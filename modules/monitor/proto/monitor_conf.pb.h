// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/monitor/proto/monitor_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/adapters/proto/adapter_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
namespace apollo {
namespace monitor {
class MonitorConf;
struct MonitorConfDefaultTypeInternal;
extern MonitorConfDefaultTypeInternal _MonitorConf_default_instance_;
class MonitorConf_HardwareConf;
struct MonitorConf_HardwareConfDefaultTypeInternal;
extern MonitorConf_HardwareConfDefaultTypeInternal _MonitorConf_HardwareConf_default_instance_;
class MonitorConf_ModuleConf;
struct MonitorConf_ModuleConfDefaultTypeInternal;
extern MonitorConf_ModuleConfDefaultTypeInternal _MonitorConf_ModuleConf_default_instance_;
class ProcessConf;
struct ProcessConfDefaultTypeInternal;
extern ProcessConfDefaultTypeInternal _ProcessConf_default_instance_;
class ProcessStatus;
struct ProcessStatusDefaultTypeInternal;
extern ProcessStatusDefaultTypeInternal _ProcessStatus_default_instance_;
class TopicConf;
struct TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
class TopicStatus;
struct TopicStatusDefaultTypeInternal;
extern TopicStatusDefaultTypeInternal _TopicStatus_default_instance_;
}  // namespace monitor
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::monitor::MonitorConf* Arena::CreateMaybeMessage<::apollo::monitor::MonitorConf>(Arena*);
template<> ::apollo::monitor::MonitorConf_HardwareConf* Arena::CreateMaybeMessage<::apollo::monitor::MonitorConf_HardwareConf>(Arena*);
template<> ::apollo::monitor::MonitorConf_ModuleConf* Arena::CreateMaybeMessage<::apollo::monitor::MonitorConf_ModuleConf>(Arena*);
template<> ::apollo::monitor::ProcessConf* Arena::CreateMaybeMessage<::apollo::monitor::ProcessConf>(Arena*);
template<> ::apollo::monitor::ProcessStatus* Arena::CreateMaybeMessage<::apollo::monitor::ProcessStatus>(Arena*);
template<> ::apollo::monitor::TopicConf* Arena::CreateMaybeMessage<::apollo::monitor::TopicConf>(Arena*);
template<> ::apollo::monitor::TopicStatus* Arena::CreateMaybeMessage<::apollo::monitor::TopicStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace monitor {

// ===================================================================

class ProcessConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ProcessConf) */ {
 public:
  inline ProcessConf() : ProcessConf(nullptr) {}
  ~ProcessConf() override;
  explicit PROTOBUF_CONSTEXPR ProcessConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessConf(const ProcessConf& from);
  ProcessConf(ProcessConf&& from) noexcept
    : ProcessConf() {
    *this = ::std::move(from);
  }

  inline ProcessConf& operator=(const ProcessConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessConf& operator=(ProcessConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessConf* internal_default_instance() {
    return reinterpret_cast<const ProcessConf*>(
               &_ProcessConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessConf& a, ProcessConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.ProcessConf";
  }
  protected:
  explicit ProcessConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessCmdKeywordsFieldNumber = 1,
  };
  // repeated string process_cmd_keywords = 1;
  int process_cmd_keywords_size() const;
  private:
  int _internal_process_cmd_keywords_size() const;
  public:
  void clear_process_cmd_keywords();
  const std::string& process_cmd_keywords(int index) const;
  std::string* mutable_process_cmd_keywords(int index);
  void set_process_cmd_keywords(int index, const std::string& value);
  void set_process_cmd_keywords(int index, std::string&& value);
  void set_process_cmd_keywords(int index, const char* value);
  void set_process_cmd_keywords(int index, const char* value, size_t size);
  std::string* add_process_cmd_keywords();
  void add_process_cmd_keywords(const std::string& value);
  void add_process_cmd_keywords(std::string&& value);
  void add_process_cmd_keywords(const char* value);
  void add_process_cmd_keywords(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& process_cmd_keywords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_process_cmd_keywords();
  private:
  const std::string& _internal_process_cmd_keywords(int index) const;
  std::string* _internal_add_process_cmd_keywords();
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.ProcessConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> process_cmd_keywords_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ProcessStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.ProcessStatus) */ {
 public:
  inline ProcessStatus() : ProcessStatus(nullptr) {}
  ~ProcessStatus() override;
  explicit PROTOBUF_CONSTEXPR ProcessStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProcessStatus(const ProcessStatus& from);
  ProcessStatus(ProcessStatus&& from) noexcept
    : ProcessStatus() {
    *this = ::std::move(from);
  }

  inline ProcessStatus& operator=(const ProcessStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStatus& operator=(ProcessStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStatus* internal_default_instance() {
    return reinterpret_cast<const ProcessStatus*>(
               &_ProcessStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessStatus& a, ProcessStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProcessStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProcessStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.ProcessStatus";
  }
  protected:
  explicit ProcessStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunningFieldNumber = 1,
  };
  // optional bool running = 1;
  bool has_running() const;
  private:
  bool _internal_has_running() const;
  public:
  void clear_running();
  bool running() const;
  void set_running(bool value);
  private:
  bool _internal_running() const;
  void _internal_set_running(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.ProcessStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool running_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TopicConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.TopicConf) */ {
 public:
  inline TopicConf() : TopicConf(nullptr) {}
  ~TopicConf() override;
  explicit PROTOBUF_CONSTEXPR TopicConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicConf(const TopicConf& from);
  TopicConf(TopicConf&& from) noexcept
    : TopicConf() {
    *this = ::std::move(from);
  }

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicConf& operator=(TopicConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicConf* internal_default_instance() {
    return reinterpret_cast<const TopicConf*>(
               &_TopicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopicConf& a, TopicConf& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.TopicConf";
  }
  protected:
  explicit TopicConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kAcceptableDelayFieldNumber = 2,
  };
  // optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::common::adapter::AdapterConfig_MessageType type() const;
  void set_type(::apollo::common::adapter::AdapterConfig_MessageType value);
  private:
  ::apollo::common::adapter::AdapterConfig_MessageType _internal_type() const;
  void _internal_set_type(::apollo::common::adapter::AdapterConfig_MessageType value);
  public:

  // optional double acceptable_delay = 2 [default = 3];
  bool has_acceptable_delay() const;
  private:
  bool _internal_has_acceptable_delay() const;
  public:
  void clear_acceptable_delay();
  double acceptable_delay() const;
  void set_acceptable_delay(double value);
  private:
  double _internal_acceptable_delay() const;
  void _internal_set_acceptable_delay(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.TopicConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    double acceptable_delay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class TopicStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.TopicStatus) */ {
 public:
  inline TopicStatus() : TopicStatus(nullptr) {}
  ~TopicStatus() override;
  explicit PROTOBUF_CONSTEXPR TopicStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicStatus(const TopicStatus& from);
  TopicStatus(TopicStatus&& from) noexcept
    : TopicStatus() {
    *this = ::std::move(from);
  }

  inline TopicStatus& operator=(const TopicStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicStatus& operator=(TopicStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicStatus* internal_default_instance() {
    return reinterpret_cast<const TopicStatus*>(
               &_TopicStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TopicStatus& a, TopicStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.TopicStatus";
  }
  protected:
  explicit TopicStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageDelayFieldNumber = 1,
  };
  // optional double message_delay = 1;
  bool has_message_delay() const;
  private:
  bool _internal_has_message_delay() const;
  public:
  void clear_message_delay();
  double message_delay() const;
  void set_message_delay(double value);
  private:
  double _internal_message_delay() const;
  void _internal_set_message_delay(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.TopicStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double message_delay_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class MonitorConf_ModuleConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf.ModuleConf) */ {
 public:
  inline MonitorConf_ModuleConf() : MonitorConf_ModuleConf(nullptr) {}
  ~MonitorConf_ModuleConf() override;
  explicit PROTOBUF_CONSTEXPR MonitorConf_ModuleConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorConf_ModuleConf(const MonitorConf_ModuleConf& from);
  MonitorConf_ModuleConf(MonitorConf_ModuleConf&& from) noexcept
    : MonitorConf_ModuleConf() {
    *this = ::std::move(from);
  }

  inline MonitorConf_ModuleConf& operator=(const MonitorConf_ModuleConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorConf_ModuleConf& operator=(MonitorConf_ModuleConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorConf_ModuleConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorConf_ModuleConf* internal_default_instance() {
    return reinterpret_cast<const MonitorConf_ModuleConf*>(
               &_MonitorConf_ModuleConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MonitorConf_ModuleConf& a, MonitorConf_ModuleConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorConf_ModuleConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorConf_ModuleConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorConf_ModuleConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorConf_ModuleConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorConf_ModuleConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorConf_ModuleConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorConf_ModuleConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.MonitorConf.ModuleConf";
  }
  protected:
  explicit MonitorConf_ModuleConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProcessConfFieldNumber = 2,
    kTopicConfFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.monitor.ProcessConf process_conf = 2;
  bool has_process_conf() const;
  private:
  bool _internal_has_process_conf() const;
  public:
  void clear_process_conf();
  const ::apollo::monitor::ProcessConf& process_conf() const;
  PROTOBUF_NODISCARD ::apollo::monitor::ProcessConf* release_process_conf();
  ::apollo::monitor::ProcessConf* mutable_process_conf();
  void set_allocated_process_conf(::apollo::monitor::ProcessConf* process_conf);
  private:
  const ::apollo::monitor::ProcessConf& _internal_process_conf() const;
  ::apollo::monitor::ProcessConf* _internal_mutable_process_conf();
  public:
  void unsafe_arena_set_allocated_process_conf(
      ::apollo::monitor::ProcessConf* process_conf);
  ::apollo::monitor::ProcessConf* unsafe_arena_release_process_conf();

  // optional .apollo.monitor.TopicConf topic_conf = 3;
  bool has_topic_conf() const;
  private:
  bool _internal_has_topic_conf() const;
  public:
  void clear_topic_conf();
  const ::apollo::monitor::TopicConf& topic_conf() const;
  PROTOBUF_NODISCARD ::apollo::monitor::TopicConf* release_topic_conf();
  ::apollo::monitor::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf);
  private:
  const ::apollo::monitor::TopicConf& _internal_topic_conf() const;
  ::apollo::monitor::TopicConf* _internal_mutable_topic_conf();
  public:
  void unsafe_arena_set_allocated_topic_conf(
      ::apollo::monitor::TopicConf* topic_conf);
  ::apollo::monitor::TopicConf* unsafe_arena_release_topic_conf();

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf.ModuleConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::apollo::monitor::ProcessConf* process_conf_;
    ::apollo::monitor::TopicConf* topic_conf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class MonitorConf_HardwareConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf.HardwareConf) */ {
 public:
  inline MonitorConf_HardwareConf() : MonitorConf_HardwareConf(nullptr) {}
  ~MonitorConf_HardwareConf() override;
  explicit PROTOBUF_CONSTEXPR MonitorConf_HardwareConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorConf_HardwareConf(const MonitorConf_HardwareConf& from);
  MonitorConf_HardwareConf(MonitorConf_HardwareConf&& from) noexcept
    : MonitorConf_HardwareConf() {
    *this = ::std::move(from);
  }

  inline MonitorConf_HardwareConf& operator=(const MonitorConf_HardwareConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorConf_HardwareConf& operator=(MonitorConf_HardwareConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorConf_HardwareConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorConf_HardwareConf* internal_default_instance() {
    return reinterpret_cast<const MonitorConf_HardwareConf*>(
               &_MonitorConf_HardwareConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MonitorConf_HardwareConf& a, MonitorConf_HardwareConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorConf_HardwareConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorConf_HardwareConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorConf_HardwareConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorConf_HardwareConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorConf_HardwareConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorConf_HardwareConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorConf_HardwareConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.MonitorConf.HardwareConf";
  }
  protected:
  explicit MonitorConf_HardwareConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTopicConfFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.monitor.TopicConf topic_conf = 2;
  bool has_topic_conf() const;
  private:
  bool _internal_has_topic_conf() const;
  public:
  void clear_topic_conf();
  const ::apollo::monitor::TopicConf& topic_conf() const;
  PROTOBUF_NODISCARD ::apollo::monitor::TopicConf* release_topic_conf();
  ::apollo::monitor::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf);
  private:
  const ::apollo::monitor::TopicConf& _internal_topic_conf() const;
  ::apollo::monitor::TopicConf* _internal_mutable_topic_conf();
  public:
  void unsafe_arena_set_allocated_topic_conf(
      ::apollo::monitor::TopicConf* topic_conf);
  ::apollo::monitor::TopicConf* unsafe_arena_release_topic_conf();

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf.HardwareConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::apollo::monitor::TopicConf* topic_conf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// -------------------------------------------------------------------

class MonitorConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.monitor.MonitorConf) */ {
 public:
  inline MonitorConf() : MonitorConf(nullptr) {}
  ~MonitorConf() override;
  explicit PROTOBUF_CONSTEXPR MonitorConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonitorConf(const MonitorConf& from);
  MonitorConf(MonitorConf&& from) noexcept
    : MonitorConf() {
    *this = ::std::move(from);
  }

  inline MonitorConf& operator=(const MonitorConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonitorConf& operator=(MonitorConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonitorConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonitorConf* internal_default_instance() {
    return reinterpret_cast<const MonitorConf*>(
               &_MonitorConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MonitorConf& a, MonitorConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MonitorConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonitorConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonitorConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonitorConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonitorConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MonitorConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitorConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.monitor.MonitorConf";
  }
  protected:
  explicit MonitorConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MonitorConf_ModuleConf ModuleConf;
  typedef MonitorConf_HardwareConf HardwareConf;

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 1,
    kHardwareFieldNumber = 2,
    kOnlineReportEndpointFieldNumber = 3,
  };
  // repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::apollo::monitor::MonitorConf_ModuleConf* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >*
      mutable_modules();
  private:
  const ::apollo::monitor::MonitorConf_ModuleConf& _internal_modules(int index) const;
  ::apollo::monitor::MonitorConf_ModuleConf* _internal_add_modules();
  public:
  const ::apollo::monitor::MonitorConf_ModuleConf& modules(int index) const;
  ::apollo::monitor::MonitorConf_ModuleConf* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >&
      modules() const;

  // repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
  int hardware_size() const;
  private:
  int _internal_hardware_size() const;
  public:
  void clear_hardware();
  ::apollo::monitor::MonitorConf_HardwareConf* mutable_hardware(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >*
      mutable_hardware();
  private:
  const ::apollo::monitor::MonitorConf_HardwareConf& _internal_hardware(int index) const;
  ::apollo::monitor::MonitorConf_HardwareConf* _internal_add_hardware();
  public:
  const ::apollo::monitor::MonitorConf_HardwareConf& hardware(int index) const;
  ::apollo::monitor::MonitorConf_HardwareConf* add_hardware();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >&
      hardware() const;

  // optional string online_report_endpoint = 3;
  bool has_online_report_endpoint() const;
  private:
  bool _internal_has_online_report_endpoint() const;
  public:
  void clear_online_report_endpoint();
  const std::string& online_report_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_online_report_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_online_report_endpoint();
  PROTOBUF_NODISCARD std::string* release_online_report_endpoint();
  void set_allocated_online_report_endpoint(std::string* online_report_endpoint);
  private:
  const std::string& _internal_online_report_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_online_report_endpoint(const std::string& value);
  std::string* _internal_mutable_online_report_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:apollo.monitor.MonitorConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf > modules_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf > hardware_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr online_report_endpoint_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessConf

// repeated string process_cmd_keywords = 1;
inline int ProcessConf::_internal_process_cmd_keywords_size() const {
  return _impl_.process_cmd_keywords_.size();
}
inline int ProcessConf::process_cmd_keywords_size() const {
  return _internal_process_cmd_keywords_size();
}
inline void ProcessConf::clear_process_cmd_keywords() {
  _impl_.process_cmd_keywords_.Clear();
}
inline std::string* ProcessConf::add_process_cmd_keywords() {
  std::string* _s = _internal_add_process_cmd_keywords();
  // @@protoc_insertion_point(field_add_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return _s;
}
inline const std::string& ProcessConf::_internal_process_cmd_keywords(int index) const {
  return _impl_.process_cmd_keywords_.Get(index);
}
inline const std::string& ProcessConf::process_cmd_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessConf.process_cmd_keywords)
  return _internal_process_cmd_keywords(index);
}
inline std::string* ProcessConf::mutable_process_cmd_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.ProcessConf.process_cmd_keywords)
  return _impl_.process_cmd_keywords_.Mutable(index);
}
inline void ProcessConf::set_process_cmd_keywords(int index, const std::string& value) {
  _impl_.process_cmd_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::set_process_cmd_keywords(int index, std::string&& value) {
  _impl_.process_cmd_keywords_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::set_process_cmd_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.process_cmd_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::set_process_cmd_keywords(int index, const char* value, size_t size) {
  _impl_.process_cmd_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline std::string* ProcessConf::_internal_add_process_cmd_keywords() {
  return _impl_.process_cmd_keywords_.Add();
}
inline void ProcessConf::add_process_cmd_keywords(const std::string& value) {
  _impl_.process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::add_process_cmd_keywords(std::string&& value) {
  _impl_.process_cmd_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::add_process_cmd_keywords(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.process_cmd_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline void ProcessConf::add_process_cmd_keywords(const char* value, size_t size) {
  _impl_.process_cmd_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.monitor.ProcessConf.process_cmd_keywords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessConf::process_cmd_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return _impl_.process_cmd_keywords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessConf::mutable_process_cmd_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.ProcessConf.process_cmd_keywords)
  return &_impl_.process_cmd_keywords_;
}

// -------------------------------------------------------------------

// ProcessStatus

// optional bool running = 1;
inline bool ProcessStatus::_internal_has_running() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProcessStatus::has_running() const {
  return _internal_has_running();
}
inline void ProcessStatus::clear_running() {
  _impl_.running_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ProcessStatus::_internal_running() const {
  return _impl_.running_;
}
inline bool ProcessStatus::running() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.ProcessStatus.running)
  return _internal_running();
}
inline void ProcessStatus::_internal_set_running(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.running_ = value;
}
inline void ProcessStatus::set_running(bool value) {
  _internal_set_running(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.ProcessStatus.running)
}

// -------------------------------------------------------------------

// TopicConf

// optional .apollo.common.adapter.AdapterConfig.MessageType type = 1;
inline bool TopicConf::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicConf::has_type() const {
  return _internal_has_type();
}
inline void TopicConf::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::common::adapter::AdapterConfig_MessageType TopicConf::_internal_type() const {
  return static_cast< ::apollo::common::adapter::AdapterConfig_MessageType >(_impl_.type_);
}
inline ::apollo::common::adapter::AdapterConfig_MessageType TopicConf::type() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.type)
  return _internal_type();
}
inline void TopicConf::_internal_set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  assert(::apollo::common::adapter::AdapterConfig_MessageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void TopicConf::set_type(::apollo::common::adapter::AdapterConfig_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.type)
}

// optional double acceptable_delay = 2 [default = 3];
inline bool TopicConf::_internal_has_acceptable_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicConf::has_acceptable_delay() const {
  return _internal_has_acceptable_delay();
}
inline void TopicConf::clear_acceptable_delay() {
  _impl_.acceptable_delay_ = 3;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TopicConf::_internal_acceptable_delay() const {
  return _impl_.acceptable_delay_;
}
inline double TopicConf::acceptable_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicConf.acceptable_delay)
  return _internal_acceptable_delay();
}
inline void TopicConf::_internal_set_acceptable_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acceptable_delay_ = value;
}
inline void TopicConf::set_acceptable_delay(double value) {
  _internal_set_acceptable_delay(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicConf.acceptable_delay)
}

// -------------------------------------------------------------------

// TopicStatus

// optional double message_delay = 1;
inline bool TopicStatus::_internal_has_message_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicStatus::has_message_delay() const {
  return _internal_has_message_delay();
}
inline void TopicStatus::clear_message_delay() {
  _impl_.message_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double TopicStatus::_internal_message_delay() const {
  return _impl_.message_delay_;
}
inline double TopicStatus::message_delay() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.TopicStatus.message_delay)
  return _internal_message_delay();
}
inline void TopicStatus::_internal_set_message_delay(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_delay_ = value;
}
inline void TopicStatus::set_message_delay(double value) {
  _internal_set_message_delay(value);
  // @@protoc_insertion_point(field_set:apollo.monitor.TopicStatus.message_delay)
}

// -------------------------------------------------------------------

// MonitorConf_ModuleConf

// optional string name = 1;
inline bool MonitorConf_ModuleConf::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MonitorConf_ModuleConf::has_name() const {
  return _internal_has_name();
}
inline void MonitorConf_ModuleConf::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MonitorConf_ModuleConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorConf_ModuleConf::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.ModuleConf.name)
}
inline std::string* MonitorConf_ModuleConf::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.name)
  return _s;
}
inline const std::string& MonitorConf_ModuleConf::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MonitorConf_ModuleConf::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorConf_ModuleConf::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorConf_ModuleConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MonitorConf_ModuleConf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.name)
}

// optional .apollo.monitor.ProcessConf process_conf = 2;
inline bool MonitorConf_ModuleConf::_internal_has_process_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.process_conf_ != nullptr);
  return value;
}
inline bool MonitorConf_ModuleConf::has_process_conf() const {
  return _internal_has_process_conf();
}
inline void MonitorConf_ModuleConf::clear_process_conf() {
  if (_impl_.process_conf_ != nullptr) _impl_.process_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::monitor::ProcessConf& MonitorConf_ModuleConf::_internal_process_conf() const {
  const ::apollo::monitor::ProcessConf* p = _impl_.process_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::monitor::ProcessConf&>(
      ::apollo::monitor::_ProcessConf_default_instance_);
}
inline const ::apollo::monitor::ProcessConf& MonitorConf_ModuleConf::process_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return _internal_process_conf();
}
inline void MonitorConf_ModuleConf::unsafe_arena_set_allocated_process_conf(
    ::apollo::monitor::ProcessConf* process_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.process_conf_);
  }
  _impl_.process_conf_ = process_conf;
  if (process_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.monitor.MonitorConf.ModuleConf.process_conf)
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::release_process_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::monitor::ProcessConf* temp = _impl_.process_conf_;
  _impl_.process_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::unsafe_arena_release_process_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::monitor::ProcessConf* temp = _impl_.process_conf_;
  _impl_.process_conf_ = nullptr;
  return temp;
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::_internal_mutable_process_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.process_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::ProcessConf>(GetArenaForAllocation());
    _impl_.process_conf_ = p;
  }
  return _impl_.process_conf_;
}
inline ::apollo::monitor::ProcessConf* MonitorConf_ModuleConf::mutable_process_conf() {
  ::apollo::monitor::ProcessConf* _msg = _internal_mutable_process_conf();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.process_conf)
  return _msg;
}
inline void MonitorConf_ModuleConf::set_allocated_process_conf(::apollo::monitor::ProcessConf* process_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.process_conf_;
  }
  if (process_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(process_conf);
    if (message_arena != submessage_arena) {
      process_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, process_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.process_conf_ = process_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.process_conf)
}

// optional .apollo.monitor.TopicConf topic_conf = 3;
inline bool MonitorConf_ModuleConf::_internal_has_topic_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_conf_ != nullptr);
  return value;
}
inline bool MonitorConf_ModuleConf::has_topic_conf() const {
  return _internal_has_topic_conf();
}
inline void MonitorConf_ModuleConf::clear_topic_conf() {
  if (_impl_.topic_conf_ != nullptr) _impl_.topic_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::monitor::TopicConf& MonitorConf_ModuleConf::_internal_topic_conf() const {
  const ::apollo::monitor::TopicConf* p = _impl_.topic_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::monitor::TopicConf&>(
      ::apollo::monitor::_TopicConf_default_instance_);
}
inline const ::apollo::monitor::TopicConf& MonitorConf_ModuleConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return _internal_topic_conf();
}
inline void MonitorConf_ModuleConf::unsafe_arena_set_allocated_topic_conf(
    ::apollo::monitor::TopicConf* topic_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_conf_);
  }
  _impl_.topic_conf_ = topic_conf;
  if (topic_conf) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::release_topic_conf() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::monitor::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::unsafe_arena_release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::monitor::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
  return temp;
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::_internal_mutable_topic_conf() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::TopicConf>(GetArenaForAllocation());
    _impl_.topic_conf_ = p;
  }
  return _impl_.topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_ModuleConf::mutable_topic_conf() {
  ::apollo::monitor::TopicConf* _msg = _internal_mutable_topic_conf();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
  return _msg;
}
inline void MonitorConf_ModuleConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_conf_;
  }
  if (topic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_conf);
    if (message_arena != submessage_arena) {
      topic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.ModuleConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf_HardwareConf

// optional string name = 1;
inline bool MonitorConf_HardwareConf::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MonitorConf_HardwareConf::has_name() const {
  return _internal_has_name();
}
inline void MonitorConf_HardwareConf::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MonitorConf_HardwareConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorConf_HardwareConf::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.HardwareConf.name)
}
inline std::string* MonitorConf_HardwareConf::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.name)
  return _s;
}
inline const std::string& MonitorConf_HardwareConf::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MonitorConf_HardwareConf::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorConf_HardwareConf::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorConf_HardwareConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MonitorConf_HardwareConf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.name)
}

// optional .apollo.monitor.TopicConf topic_conf = 2;
inline bool MonitorConf_HardwareConf::_internal_has_topic_conf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_conf_ != nullptr);
  return value;
}
inline bool MonitorConf_HardwareConf::has_topic_conf() const {
  return _internal_has_topic_conf();
}
inline void MonitorConf_HardwareConf::clear_topic_conf() {
  if (_impl_.topic_conf_ != nullptr) _impl_.topic_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::monitor::TopicConf& MonitorConf_HardwareConf::_internal_topic_conf() const {
  const ::apollo::monitor::TopicConf* p = _impl_.topic_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::monitor::TopicConf&>(
      ::apollo::monitor::_TopicConf_default_instance_);
}
inline const ::apollo::monitor::TopicConf& MonitorConf_HardwareConf::topic_conf() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return _internal_topic_conf();
}
inline void MonitorConf_HardwareConf::unsafe_arena_set_allocated_topic_conf(
    ::apollo::monitor::TopicConf* topic_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_conf_);
  }
  _impl_.topic_conf_ = topic_conf;
  if (topic_conf) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::release_topic_conf() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::monitor::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::unsafe_arena_release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::monitor::TopicConf* temp = _impl_.topic_conf_;
  _impl_.topic_conf_ = nullptr;
  return temp;
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::_internal_mutable_topic_conf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.topic_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::monitor::TopicConf>(GetArenaForAllocation());
    _impl_.topic_conf_ = p;
  }
  return _impl_.topic_conf_;
}
inline ::apollo::monitor::TopicConf* MonitorConf_HardwareConf::mutable_topic_conf() {
  ::apollo::monitor::TopicConf* _msg = _internal_mutable_topic_conf();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
  return _msg;
}
inline void MonitorConf_HardwareConf::set_allocated_topic_conf(::apollo::monitor::TopicConf* topic_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_conf_;
  }
  if (topic_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_conf);
    if (message_arena != submessage_arena) {
      topic_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.HardwareConf.topic_conf)
}

// -------------------------------------------------------------------

// MonitorConf

// repeated .apollo.monitor.MonitorConf.ModuleConf modules = 1;
inline int MonitorConf::_internal_modules_size() const {
  return _impl_.modules_.size();
}
inline int MonitorConf::modules_size() const {
  return _internal_modules_size();
}
inline void MonitorConf::clear_modules() {
  _impl_.modules_.Clear();
}
inline ::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.modules)
  return _impl_.modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >*
MonitorConf::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.modules)
  return &_impl_.modules_;
}
inline const ::apollo::monitor::MonitorConf_ModuleConf& MonitorConf::_internal_modules(int index) const {
  return _impl_.modules_.Get(index);
}
inline const ::apollo::monitor::MonitorConf_ModuleConf& MonitorConf::modules(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.modules)
  return _internal_modules(index);
}
inline ::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::_internal_add_modules() {
  return _impl_.modules_.Add();
}
inline ::apollo::monitor::MonitorConf_ModuleConf* MonitorConf::add_modules() {
  ::apollo::monitor::MonitorConf_ModuleConf* _add = _internal_add_modules();
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.modules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_ModuleConf >&
MonitorConf::modules() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.modules)
  return _impl_.modules_;
}

// repeated .apollo.monitor.MonitorConf.HardwareConf hardware = 2;
inline int MonitorConf::_internal_hardware_size() const {
  return _impl_.hardware_.size();
}
inline int MonitorConf::hardware_size() const {
  return _internal_hardware_size();
}
inline void MonitorConf::clear_hardware() {
  _impl_.hardware_.Clear();
}
inline ::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::mutable_hardware(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.hardware)
  return _impl_.hardware_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >*
MonitorConf::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_list:apollo.monitor.MonitorConf.hardware)
  return &_impl_.hardware_;
}
inline const ::apollo::monitor::MonitorConf_HardwareConf& MonitorConf::_internal_hardware(int index) const {
  return _impl_.hardware_.Get(index);
}
inline const ::apollo::monitor::MonitorConf_HardwareConf& MonitorConf::hardware(int index) const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.hardware)
  return _internal_hardware(index);
}
inline ::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::_internal_add_hardware() {
  return _impl_.hardware_.Add();
}
inline ::apollo::monitor::MonitorConf_HardwareConf* MonitorConf::add_hardware() {
  ::apollo::monitor::MonitorConf_HardwareConf* _add = _internal_add_hardware();
  // @@protoc_insertion_point(field_add:apollo.monitor.MonitorConf.hardware)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::monitor::MonitorConf_HardwareConf >&
MonitorConf::hardware() const {
  // @@protoc_insertion_point(field_list:apollo.monitor.MonitorConf.hardware)
  return _impl_.hardware_;
}

// optional string online_report_endpoint = 3;
inline bool MonitorConf::_internal_has_online_report_endpoint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MonitorConf::has_online_report_endpoint() const {
  return _internal_has_online_report_endpoint();
}
inline void MonitorConf::clear_online_report_endpoint() {
  _impl_.online_report_endpoint_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MonitorConf::online_report_endpoint() const {
  // @@protoc_insertion_point(field_get:apollo.monitor.MonitorConf.online_report_endpoint)
  return _internal_online_report_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MonitorConf::set_online_report_endpoint(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.online_report_endpoint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.monitor.MonitorConf.online_report_endpoint)
}
inline std::string* MonitorConf::mutable_online_report_endpoint() {
  std::string* _s = _internal_mutable_online_report_endpoint();
  // @@protoc_insertion_point(field_mutable:apollo.monitor.MonitorConf.online_report_endpoint)
  return _s;
}
inline const std::string& MonitorConf::_internal_online_report_endpoint() const {
  return _impl_.online_report_endpoint_.Get();
}
inline void MonitorConf::_internal_set_online_report_endpoint(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.online_report_endpoint_.Set(value, GetArenaForAllocation());
}
inline std::string* MonitorConf::_internal_mutable_online_report_endpoint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.online_report_endpoint_.Mutable(GetArenaForAllocation());
}
inline std::string* MonitorConf::release_online_report_endpoint() {
  // @@protoc_insertion_point(field_release:apollo.monitor.MonitorConf.online_report_endpoint)
  if (!_internal_has_online_report_endpoint()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.online_report_endpoint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.online_report_endpoint_.IsDefault()) {
    _impl_.online_report_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MonitorConf::set_allocated_online_report_endpoint(std::string* online_report_endpoint) {
  if (online_report_endpoint != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.online_report_endpoint_.SetAllocated(online_report_endpoint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.online_report_endpoint_.IsDefault()) {
    _impl_.online_report_endpoint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.monitor.MonitorConf.online_report_endpoint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto
