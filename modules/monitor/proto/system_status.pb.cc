// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/monitor/proto/system_status.proto

#include "modules/monitor/proto/system_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace monitor {
PROTOBUF_CONSTEXPR HardwareStatus::HardwareStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.detailed_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.topic_status_)*/nullptr
  , /*decltype(_impl_.gps_unstable_start_time_)*/0
  , /*decltype(_impl_.summary_)*/0
  , /*decltype(_impl_.status_)*/-1} {}
struct HardwareStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HardwareStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HardwareStatusDefaultTypeInternal() {}
  union {
    HardwareStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HardwareStatusDefaultTypeInternal _HardwareStatus_default_instance_;
PROTOBUF_CONSTEXPR ModuleStatus::ModuleStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.process_status_)*/nullptr
  , /*decltype(_impl_.topic_status_)*/nullptr
  , /*decltype(_impl_.summary_)*/0} {}
struct ModuleStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleStatusDefaultTypeInternal() {}
  union {
    ModuleStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleStatusDefaultTypeInternal _ModuleStatus_default_instance_;
PROTOBUF_CONSTEXPR SystemStatus_ModulesEntry_DoNotUse::SystemStatus_ModulesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SystemStatus_ModulesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemStatus_ModulesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemStatus_ModulesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemStatus_ModulesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemStatus_ModulesEntry_DoNotUseDefaultTypeInternal _SystemStatus_ModulesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SystemStatus_HardwareEntry_DoNotUse::SystemStatus_HardwareEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SystemStatus_HardwareEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemStatus_HardwareEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemStatus_HardwareEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SystemStatus_HardwareEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemStatus_HardwareEntry_DoNotUseDefaultTypeInternal _SystemStatus_HardwareEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SystemStatus::SystemStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.modules_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.hardware_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passenger_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.safety_mode_trigger_time_)*/0
  , /*decltype(_impl_.require_emergency_stop_)*/false} {}
struct SystemStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemStatusDefaultTypeInternal() {}
  union {
    SystemStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemStatusDefaultTypeInternal _SystemStatus_default_instance_;
}  // namespace monitor
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.detailed_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.gps_unstable_start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::HardwareStatus, _impl_.topic_status_),
  4,
  0,
  5,
  1,
  3,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _impl_.process_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::ModuleStatus, _impl_.topic_status_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.passenger_msg_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.safety_mode_trigger_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::monitor::SystemStatus, _impl_.require_emergency_stop_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::monitor::HardwareStatus)},
  { 18, 28, -1, sizeof(::apollo::monitor::ModuleStatus)},
  { 32, 40, -1, sizeof(::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse)},
  { 42, 50, -1, sizeof(::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse)},
  { 52, 64, -1, sizeof(::apollo::monitor::SystemStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::monitor::_HardwareStatus_default_instance_._instance,
  &::apollo::monitor::_ModuleStatus_default_instance_._instance,
  &::apollo::monitor::_SystemStatus_ModulesEntry_DoNotUse_default_instance_._instance,
  &::apollo::monitor::_SystemStatus_HardwareEntry_DoNotUse_default_instance_._instance,
  &::apollo::monitor::_SystemStatus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/monitor/proto/system_status.pr"
  "oto\022\016apollo.monitor\032!modules/common/prot"
  "o/header.proto\032(modules/monitor/proto/mo"
  "nitor_conf.proto\"\204\003\n\016HardwareStatus\0221\n\007s"
  "ummary\030\001 \001(\0162\027.apollo.monitor.Summary:\007U"
  "NKNOWN\022\013\n\003msg\030\002 \001(\t\022<\n\006status\030\003 \001(\0162%.ap"
  "ollo.monitor.HardwareStatus.Status:\005UNDE"
  "F\022\024\n\014detailed_msg\030\006 \001(\t\022\037\n\027gps_unstable_"
  "start_time\030\004 \001(\001\0221\n\014topic_status\030\005 \001(\0132\033"
  ".apollo.monitor.TopicStatus\"\211\001\n\006Status\022\006"
  "\n\002OK\020\000\022\r\n\tNOT_READY\020\001\022\017\n\013NOT_PRESENT\020\002\022\010"
  "\n\004WARN\020\006\022\007\n\003ERR\020\003\022\030\n\024GPS_UNSTABLE_WARNIN"
  "G\020\004\022\026\n\022GPS_UNSTABLE_ERROR\020\005\022\022\n\005UNDEF\020\377\377\377"
  "\377\377\377\377\377\377\001\"\270\001\n\014ModuleStatus\0221\n\007summary\030\001 \001("
  "\0162\027.apollo.monitor.Summary:\007UNKNOWN\022\013\n\003m"
  "sg\030\002 \001(\t\0225\n\016process_status\030\003 \001(\0132\035.apoll"
  "o.monitor.ProcessStatus\0221\n\014topic_status\030"
  "\004 \001(\0132\033.apollo.monitor.TopicStatus\"\247\003\n\014S"
  "ystemStatus\022%\n\006header\030\001 \001(\0132\025.apollo.com"
  "mon.Header\022:\n\007modules\030\002 \003(\0132).apollo.mon"
  "itor.SystemStatus.ModulesEntry\022<\n\010hardwa"
  "re\030\003 \003(\0132*.apollo.monitor.SystemStatus.H"
  "ardwareEntry\022\025\n\rpassenger_msg\030\004 \001(\t\022 \n\030s"
  "afety_mode_trigger_time\030\005 \001(\001\022\036\n\026require"
  "_emergency_stop\030\006 \001(\010\032L\n\014ModulesEntry\022\013\n"
  "\003key\030\001 \001(\t\022+\n\005value\030\002 \001(\0132\034.apollo.monit"
  "or.ModuleStatus:\0028\001\032O\n\rHardwareEntry\022\013\n\003"
  "key\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.apollo.monito"
  "r.HardwareStatus:\0028\001*>\n\007Summary\022\013\n\007UNKNO"
  "WN\020\000\022\006\n\002OK\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR\020\003\022\t\n\005FAT"
  "AL\020\004"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_deps[2] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmonitor_2fproto_2fmonitor_5fconf_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto = {
    false, false, 1204, descriptor_table_protodef_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto,
    "modules/monitor/proto/system_status.proto",
    &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once, descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto::offsets,
    file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto, file_level_enum_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto,
    file_level_service_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter() {
  return &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto(&descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
namespace apollo {
namespace monitor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HardwareStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[0];
}
bool HardwareStatus_Status_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HardwareStatus_Status HardwareStatus::OK;
constexpr HardwareStatus_Status HardwareStatus::NOT_READY;
constexpr HardwareStatus_Status HardwareStatus::NOT_PRESENT;
constexpr HardwareStatus_Status HardwareStatus::WARN;
constexpr HardwareStatus_Status HardwareStatus::ERR;
constexpr HardwareStatus_Status HardwareStatus::GPS_UNSTABLE_WARNING;
constexpr HardwareStatus_Status HardwareStatus::GPS_UNSTABLE_ERROR;
constexpr HardwareStatus_Status HardwareStatus::UNDEF;
constexpr HardwareStatus_Status HardwareStatus::Status_MIN;
constexpr HardwareStatus_Status HardwareStatus::Status_MAX;
constexpr int HardwareStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Summary_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[1];
}
bool Summary_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HardwareStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<HardwareStatus>()._impl_._has_bits_);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_detailed_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_unstable_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::monitor::TopicStatus& topic_status(const HardwareStatus* msg);
  static void set_has_topic_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::monitor::TopicStatus&
HardwareStatus::_Internal::topic_status(const HardwareStatus* msg) {
  return *msg->_impl_.topic_status_;
}
void HardwareStatus::clear_topic_status() {
  if (_impl_.topic_status_ != nullptr) _impl_.topic_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
HardwareStatus::HardwareStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.HardwareStatus)
}
HardwareStatus::HardwareStatus(const HardwareStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.detailed_msg_){}
    , decltype(_impl_.topic_status_){nullptr}
    , decltype(_impl_.gps_unstable_start_time_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _impl_.msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  _impl_.detailed_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailed_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detailed_msg()) {
    _impl_.detailed_msg_.Set(from._internal_detailed_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_topic_status()) {
    _impl_.topic_status_ = new ::apollo::monitor::TopicStatus(*from._impl_.topic_status_);
  }
  ::memcpy(&_impl_.gps_unstable_start_time_, &from._impl_.gps_unstable_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.gps_unstable_start_time_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.HardwareStatus)
}

inline void HardwareStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.detailed_msg_){}
    , decltype(_impl_.topic_status_){nullptr}
    , decltype(_impl_.gps_unstable_start_time_){0}
    , decltype(_impl_.summary_){0}
    , decltype(_impl_.status_){-1}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.detailed_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.detailed_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HardwareStatus::~HardwareStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.HardwareStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HardwareStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.detailed_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.topic_status_;
}

void HardwareStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HardwareStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.HardwareStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.detailed_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.topic_status_ != nullptr);
      _impl_.topic_status_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.gps_unstable_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.summary_) -
        reinterpret_cast<char*>(&_impl_.gps_unstable_start_time_)) + sizeof(_impl_.summary_));
    _impl_.status_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardwareStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::monitor::Summary_IsValid(val))) {
            _internal_set_summary(static_cast<::apollo::monitor::Summary>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.HardwareStatus.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::monitor::HardwareStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::monitor::HardwareStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double gps_unstable_start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_gps_unstable_start_time(&has_bits);
          _impl_.gps_unstable_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.TopicStatus topic_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string detailed_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_detailed_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.HardwareStatus.detailed_msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HardwareStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.HardwareStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_summary(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.HardwareStatus.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // optional .apollo.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // optional double gps_unstable_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_gps_unstable_start_time(), target);
  }

  // optional .apollo.monitor.TopicStatus topic_status = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::topic_status(this),
        _Internal::topic_status(this).GetCachedSize(), target, stream);
  }

  // optional string detailed_msg = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_detailed_msg().data(), static_cast<int>(this->_internal_detailed_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.HardwareStatus.detailed_msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_detailed_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.HardwareStatus)
  return target;
}

size_t HardwareStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.HardwareStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional string detailed_msg = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_detailed_msg());
    }

    // optional .apollo.monitor.TopicStatus topic_status = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_status_);
    }

    // optional double gps_unstable_start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_summary());
    }

    // optional .apollo.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HardwareStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HardwareStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HardwareStatus::GetClassData() const { return &_class_data_; }

void HardwareStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HardwareStatus *>(to)->MergeFrom(
      static_cast<const HardwareStatus &>(from));
}


void HardwareStatus::MergeFrom(const HardwareStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.HardwareStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_detailed_msg(from._internal_detailed_msg());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_topic_status()->::apollo::monitor::TopicStatus::MergeFrom(from._internal_topic_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gps_unstable_start_time_ = from._impl_.gps_unstable_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.summary_ = from._impl_.summary_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.status_ = from._impl_.status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HardwareStatus::CopyFrom(const HardwareStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.HardwareStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareStatus::IsInitialized() const {
  return true;
}

void HardwareStatus::InternalSwap(HardwareStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.detailed_msg_, lhs_arena,
      &other->_impl_.detailed_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HardwareStatus, _impl_.summary_)
      + sizeof(HardwareStatus::_impl_.summary_)
      - PROTOBUF_FIELD_OFFSET(HardwareStatus, _impl_.topic_status_)>(
          reinterpret_cast<char*>(&_impl_.topic_status_),
          reinterpret_cast<char*>(&other->_impl_.topic_status_));
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[0]);
}

// ===================================================================

class ModuleStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleStatus>()._impl_._has_bits_);
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::monitor::ProcessStatus& process_status(const ModuleStatus* msg);
  static void set_has_process_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::monitor::TopicStatus& topic_status(const ModuleStatus* msg);
  static void set_has_topic_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::monitor::ProcessStatus&
ModuleStatus::_Internal::process_status(const ModuleStatus* msg) {
  return *msg->_impl_.process_status_;
}
const ::apollo::monitor::TopicStatus&
ModuleStatus::_Internal::topic_status(const ModuleStatus* msg) {
  return *msg->_impl_.topic_status_;
}
void ModuleStatus::clear_process_status() {
  if (_impl_.process_status_ != nullptr) _impl_.process_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ModuleStatus::clear_topic_status() {
  if (_impl_.topic_status_ != nullptr) _impl_.topic_status_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ModuleStatus::ModuleStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.ModuleStatus)
}
ModuleStatus::ModuleStatus(const ModuleStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.process_status_){nullptr}
    , decltype(_impl_.topic_status_){nullptr}
    , decltype(_impl_.summary_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg()) {
    _impl_.msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_process_status()) {
    _impl_.process_status_ = new ::apollo::monitor::ProcessStatus(*from._impl_.process_status_);
  }
  if (from._internal_has_topic_status()) {
    _impl_.topic_status_ = new ::apollo::monitor::TopicStatus(*from._impl_.topic_status_);
  }
  _impl_.summary_ = from._impl_.summary_;
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.ModuleStatus)
}

inline void ModuleStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.process_status_){nullptr}
    , decltype(_impl_.topic_status_){nullptr}
    , decltype(_impl_.summary_){0}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleStatus::~ModuleStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.ModuleStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.process_status_;
  if (this != internal_default_instance()) delete _impl_.topic_status_;
}

void ModuleStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.ModuleStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.process_status_ != nullptr);
      _impl_.process_status_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.topic_status_ != nullptr);
      _impl_.topic_status_->Clear();
    }
  }
  _impl_.summary_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::monitor::Summary_IsValid(val))) {
            _internal_set_summary(static_cast<::apollo::monitor::Summary>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.ModuleStatus.msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.ProcessStatus process_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_process_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.monitor.TopicStatus topic_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.ModuleStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_summary(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.ModuleStatus.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // optional .apollo.monitor.ProcessStatus process_status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::process_status(this),
        _Internal::process_status(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.monitor.TopicStatus topic_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::topic_status(this),
        _Internal::topic_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.ModuleStatus)
  return target;
}

size_t ModuleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.ModuleStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg());
    }

    // optional .apollo.monitor.ProcessStatus process_status = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.process_status_);
    }

    // optional .apollo.monitor.TopicStatus topic_status = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_status_);
    }

    // optional .apollo.monitor.Summary summary = 1 [default = UNKNOWN];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_summary());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleStatus::GetClassData() const { return &_class_data_; }

void ModuleStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleStatus *>(to)->MergeFrom(
      static_cast<const ModuleStatus &>(from));
}


void ModuleStatus::MergeFrom(const ModuleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.ModuleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg(from._internal_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_process_status()->::apollo::monitor::ProcessStatus::MergeFrom(from._internal_process_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_topic_status()->::apollo::monitor::TopicStatus::MergeFrom(from._internal_topic_status());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.summary_ = from._impl_.summary_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleStatus::CopyFrom(const ModuleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.ModuleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleStatus::IsInitialized() const {
  return true;
}

void ModuleStatus::InternalSwap(ModuleStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleStatus, _impl_.summary_)
      + sizeof(ModuleStatus::_impl_.summary_)
      - PROTOBUF_FIELD_OFFSET(ModuleStatus, _impl_.process_status_)>(
          reinterpret_cast<char*>(&_impl_.process_status_),
          reinterpret_cast<char*>(&other->_impl_.process_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[1]);
}

// ===================================================================

SystemStatus_ModulesEntry_DoNotUse::SystemStatus_ModulesEntry_DoNotUse() {}
SystemStatus_ModulesEntry_DoNotUse::SystemStatus_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemStatus_ModulesEntry_DoNotUse::MergeFrom(const SystemStatus_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus_ModulesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[2]);
}

// ===================================================================

SystemStatus_HardwareEntry_DoNotUse::SystemStatus_HardwareEntry_DoNotUse() {}
SystemStatus_HardwareEntry_DoNotUse::SystemStatus_HardwareEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemStatus_HardwareEntry_DoNotUse::MergeFrom(const SystemStatus_HardwareEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus_HardwareEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[3]);
}

// ===================================================================

class SystemStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemStatus>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const SystemStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passenger_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_safety_mode_trigger_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_require_emergency_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
SystemStatus::_Internal::header(const SystemStatus* msg) {
  return *msg->_impl_.header_;
}
void SystemStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SystemStatus::SystemStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SystemStatus::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.monitor.SystemStatus)
}
SystemStatus::SystemStatus(const SystemStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.modules_)*/{}
    , /*decltype(_impl_.hardware_)*/{}
    , decltype(_impl_.passenger_msg_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.safety_mode_trigger_time_){}
    , decltype(_impl_.require_emergency_stop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.hardware_.MergeFrom(from._impl_.hardware_);
  _impl_.passenger_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passenger_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_passenger_msg()) {
    _impl_.passenger_msg_.Set(from._internal_passenger_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.safety_mode_trigger_time_, &from._impl_.safety_mode_trigger_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.require_emergency_stop_) -
    reinterpret_cast<char*>(&_impl_.safety_mode_trigger_time_)) + sizeof(_impl_.require_emergency_stop_));
  // @@protoc_insertion_point(copy_constructor:apollo.monitor.SystemStatus)
}

inline void SystemStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.modules_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.hardware_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.passenger_msg_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.safety_mode_trigger_time_){0}
    , decltype(_impl_.require_emergency_stop_){false}
  };
  _impl_.passenger_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passenger_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemStatus::~SystemStatus() {
  // @@protoc_insertion_point(destructor:apollo.monitor.SystemStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SystemStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modules_.Destruct();
  _impl_.modules_.~MapField();
  _impl_.hardware_.Destruct();
  _impl_.hardware_.~MapField();
  _impl_.passenger_msg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void SystemStatus::ArenaDtor(void* object) {
  SystemStatus* _this = reinterpret_cast< SystemStatus* >(object);
  _this->_impl_.modules_.Destruct();
  _this->_impl_.hardware_.Destruct();
}
void SystemStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.monitor.SystemStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modules_.Clear();
  _impl_.hardware_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.passenger_msg_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.safety_mode_trigger_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.require_emergency_stop_) -
        reinterpret_cast<char*>(&_impl_.safety_mode_trigger_time_)) + sizeof(_impl_.require_emergency_stop_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.monitor.ModuleStatus> modules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.monitor.HardwareStatus> hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.hardware_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string passenger_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_passenger_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.monitor.SystemStatus.passenger_msg");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double safety_mode_trigger_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_safety_mode_trigger_time(&has_bits);
          _impl_.safety_mode_trigger_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool require_emergency_stop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_require_emergency_stop(&has_bits);
          _impl_.require_emergency_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.monitor.SystemStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // map<string, .apollo.monitor.ModuleStatus> modules = 2;
  if (!this->_internal_modules().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::monitor::ModuleStatus>;
    using WireHelper = SystemStatus_ModulesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modules();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.monitor.SystemStatus.ModulesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .apollo.monitor.HardwareStatus> hardware = 3;
  if (!this->_internal_hardware().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::monitor::HardwareStatus>;
    using WireHelper = SystemStatus_HardwareEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_hardware();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.monitor.SystemStatus.HardwareEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional string passenger_msg = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_passenger_msg().data(), static_cast<int>(this->_internal_passenger_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.monitor.SystemStatus.passenger_msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_passenger_msg(), target);
  }

  // optional double safety_mode_trigger_time = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_safety_mode_trigger_time(), target);
  }

  // optional bool require_emergency_stop = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_require_emergency_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.monitor.SystemStatus)
  return target;
}

size_t SystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.monitor.SystemStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.monitor.ModuleStatus> modules = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::ModuleStatus >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += SystemStatus_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .apollo.monitor.HardwareStatus> hardware = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hardware_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::monitor::HardwareStatus >::const_iterator
      it = this->_internal_hardware().begin();
      it != this->_internal_hardware().end(); ++it) {
    total_size += SystemStatus_HardwareEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string passenger_msg = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_passenger_msg());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double safety_mode_trigger_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool require_emergency_stop = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SystemStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemStatus::GetClassData() const { return &_class_data_; }

void SystemStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SystemStatus *>(to)->MergeFrom(
      static_cast<const SystemStatus &>(from));
}


void SystemStatus::MergeFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.monitor.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.modules_.MergeFrom(from._impl_.modules_);
  _impl_.hardware_.MergeFrom(from._impl_.hardware_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_passenger_msg(from._internal_passenger_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.safety_mode_trigger_time_ = from._impl_.safety_mode_trigger_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.require_emergency_stop_ = from._impl_.require_emergency_stop_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.monitor.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {
  return true;
}

void SystemStatus::InternalSwap(SystemStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.modules_.InternalSwap(&other->_impl_.modules_);
  _impl_.hardware_.InternalSwap(&other->_impl_.hardware_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passenger_msg_, lhs_arena,
      &other->_impl_.passenger_msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemStatus, _impl_.require_emergency_stop_)
      + sizeof(SystemStatus::_impl_.require_emergency_stop_)
      - PROTOBUF_FIELD_OFFSET(SystemStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_getter, &descriptor_table_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto_once,
      file_level_metadata_modules_2fmonitor_2fproto_2fsystem_5fstatus_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace monitor
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::monitor::HardwareStatus*
Arena::CreateMaybeMessage< ::apollo::monitor::HardwareStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::HardwareStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::ModuleStatus*
Arena::CreateMaybeMessage< ::apollo::monitor::ModuleStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::ModuleStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::SystemStatus_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::SystemStatus_HardwareEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::monitor::SystemStatus*
Arena::CreateMaybeMessage< ::apollo::monitor::SystemStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::monitor::SystemStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
