// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/task.proto

#include "modules/data/proto/task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace data {
PROTOBUF_CONSTEXPR MapPoint::MapPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0} {}
struct MapPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapPointDefaultTypeInternal() {}
  union {
    MapPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapPointDefaultTypeInternal _MapPoint_default_instance_;
PROTOBUF_CONSTEXPR Rosbag_Topic::Rosbag_Topic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frequency_)*/0
  , /*decltype(_impl_.msg_count_)*/0} {}
struct Rosbag_TopicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rosbag_TopicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rosbag_TopicDefaultTypeInternal() {}
  union {
    Rosbag_Topic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rosbag_TopicDefaultTypeInternal _Rosbag_Topic_default_instance_;
PROTOBUF_CONSTEXPR Rosbag_TopicsEntry_DoNotUse::Rosbag_TopicsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Rosbag_TopicsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal _Rosbag_TopicsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Rosbag::Rosbag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topics_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/uint64_t{0u}
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.msg_count_)*/0
  , /*decltype(_impl_.end_time_)*/0} {}
struct RosbagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RosbagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RosbagDefaultTypeInternal() {}
  union {
    Rosbag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RosbagDefaultTypeInternal _Rosbag_default_instance_;
PROTOBUF_CONSTEXPR Disengagement::Disengagement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.time_)*/0} {}
struct DisengagementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisengagementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisengagementDefaultTypeInternal() {}
  union {
    Disengagement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisengagementDefaultTypeInternal _Disengagement_default_instance_;
PROTOBUF_CONSTEXPR Task_MileageEntry_DoNotUse::Task_MileageEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Task_MileageEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Task_MileageEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Task_MileageEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Task_MileageEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Task_MileageEntry_DoNotUseDefaultTypeInternal _Task_MileageEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bags_)*/{}
  , /*decltype(_impl_.topics_)*/{}
  , /*decltype(_impl_.disengagements_)*/{}
  , /*decltype(_impl_.map_path_)*/{}
  , /*decltype(_impl_.mileage_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0
  , /*decltype(_impl_.loop_type_)*/0} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace data
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdata_2fproto_2ftask_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2fproto_2ftask_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdata_2fproto_2ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::MapPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::MapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::MapPoint, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::MapPoint, _impl_.longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_Topic, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_Topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_Topic, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_Topic, _impl_.msg_count_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_Topic, _impl_.frequency_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_TopicsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_TopicsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_TopicsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag_TopicsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.msg_count_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Rosbag, _impl_.topics_),
  0,
  1,
  3,
  2,
  5,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Disengagement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Disengagement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Disengagement, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Disengagement, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Disengagement, _impl_.desc_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task_MileageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task_MileageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task_MileageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task_MileageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.loop_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.bags_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.disengagements_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.map_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Task, _impl_.mileage_),
  0,
  2,
  3,
  4,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::data::MapPoint)},
  { 10, 19, -1, sizeof(::apollo::data::Rosbag_Topic)},
  { 22, 30, -1, sizeof(::apollo::data::Rosbag_TopicsEntry_DoNotUse)},
  { 32, 45, -1, sizeof(::apollo::data::Rosbag)},
  { 52, 61, -1, sizeof(::apollo::data::Disengagement)},
  { 64, 72, -1, sizeof(::apollo::data::Task_MileageEntry_DoNotUse)},
  { 74, 90, -1, sizeof(::apollo::data::Task)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::data::_MapPoint_default_instance_._instance,
  &::apollo::data::_Rosbag_Topic_default_instance_._instance,
  &::apollo::data::_Rosbag_TopicsEntry_DoNotUse_default_instance_._instance,
  &::apollo::data::_Rosbag_default_instance_._instance,
  &::apollo::data::_Disengagement_default_instance_._instance,
  &::apollo::data::_Task_MileageEntry_DoNotUse_default_instance_._instance,
  &::apollo::data::_Task_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdata_2fproto_2ftask_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035modules/data/proto/task.proto\022\013apollo."
  "data\032$modules/data/proto/static_info.pro"
  "to\"/\n\010MapPoint\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlong"
  "itude\030\002 \001(\001\"\252\002\n\006Rosbag\022\014\n\004name\030\001 \001(\t\022\014\n\004"
  "size\030\002 \001(\004\022\017\n\007version\030\003 \001(\005\022\022\n\nstart_tim"
  "e\030\004 \001(\001\022\020\n\010end_time\030\005 \001(\001\022\021\n\tmsg_count\030\006"
  " \001(\005\022/\n\006topics\030\007 \003(\0132\037.apollo.data.Rosba"
  "g.TopicsEntry\032\?\n\005Topic\022\020\n\010msg_type\030\001 \001(\t"
  "\022\021\n\tmsg_count\030\002 \001(\005\022\021\n\tfrequency\030\003 \001(\001\032H"
  "\n\013TopicsEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030\002 \001("
  "\0132\031.apollo.data.Rosbag.Topic:\0028\001\"T\n\rDise"
  "ngagement\022\014\n\004time\030\001 \001(\001\022\'\n\010location\030\002 \001("
  "\0132\025.apollo.data.MapPoint\022\014\n\004desc\030\003 \001(\t\"\267"
  "\003\n\004Task\022\n\n\002id\030\001 \001(\t\022\022\n\nstart_time\030\002 \001(\001\022"
  "\020\n\010end_time\030\003 \001(\001\022-\n\tloop_type\030\004 \001(\0162\032.a"
  "pollo.data.Task.LoopType\022%\n\004info\030\005 \001(\0132\027"
  ".apollo.data.StaticInfo\022!\n\004bags\030\006 \003(\0132\023."
  "apollo.data.Rosbag\022\016\n\006topics\030\007 \003(\t\0222\n\016di"
  "sengagements\030\010 \003(\0132\032.apollo.data.Disenga"
  "gement\022\'\n\010map_path\030\t \003(\0132\025.apollo.data.M"
  "apPoint\022/\n\007mileage\030\n \003(\0132\036.apollo.data.T"
  "ask.MileageEntry\032.\n\014MileageEntry\022\013\n\003key\030"
  "\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"6\n\010LoopType\022\013\n\007"
  "UNKNOWN\020\000\022\r\n\tOPEN_LOOP\020\001\022\016\n\nCLOSE_LOOP\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_deps[1] = {
  &::descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdata_2fproto_2ftask_2eproto = {
    false, false, 960, descriptor_table_protodef_modules_2fdata_2fproto_2ftask_2eproto,
    "modules/data/proto/task.proto",
    &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once, descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_modules_2fdata_2fproto_2ftask_2eproto::offsets,
    file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto, file_level_enum_descriptors_modules_2fdata_2fproto_2ftask_2eproto,
    file_level_service_descriptors_modules_2fdata_2fproto_2ftask_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter() {
  return &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdata_2fproto_2ftask_2eproto(&descriptor_table_modules_2fdata_2fproto_2ftask_2eproto);
namespace apollo {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_LoopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2ftask_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2ftask_2eproto[0];
}
bool Task_LoopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Task_LoopType Task::UNKNOWN;
constexpr Task_LoopType Task::OPEN_LOOP;
constexpr Task_LoopType Task::CLOSE_LOOP;
constexpr Task_LoopType Task::LoopType_MIN;
constexpr Task_LoopType Task::LoopType_MAX;
constexpr int Task::LoopType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MapPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<MapPoint>()._impl_._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MapPoint::MapPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.MapPoint)
}
MapPoint::MapPoint(const MapPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.longitude_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.MapPoint)
}

inline void MapPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
  };
}

MapPoint::~MapPoint() {
  // @@protoc_insertion_point(destructor:apollo.data.MapPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.MapPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.longitude_) -
        reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.MapPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.MapPoint)
  return target;
}

size_t MapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.MapPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapPoint::GetClassData() const { return &_class_data_; }

void MapPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapPoint *>(to)->MergeFrom(
      static_cast<const MapPoint &>(from));
}


void MapPoint::MergeFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.MapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.latitude_ = from._impl_.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitude_ = from._impl_.longitude_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapPoint::CopyFrom(const MapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.MapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPoint::IsInitialized() const {
  return true;
}

void MapPoint::InternalSwap(MapPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapPoint, _impl_.longitude_)
      + sizeof(MapPoint::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(MapPoint, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[0]);
}

// ===================================================================

class Rosbag_Topic::_Internal {
 public:
  using HasBits = decltype(std::declval<Rosbag_Topic>()._impl_._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_msg_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Rosbag_Topic::Rosbag_Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.Rosbag.Topic)
}
Rosbag_Topic::Rosbag_Topic(const Rosbag_Topic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.frequency_){}
    , decltype(_impl_.msg_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_msg_type()) {
    _impl_.msg_type_.Set(from._internal_msg_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.frequency_, &from._impl_.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.msg_count_) -
    reinterpret_cast<char*>(&_impl_.frequency_)) + sizeof(_impl_.msg_count_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.Rosbag.Topic)
}

inline void Rosbag_Topic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.frequency_){0}
    , decltype(_impl_.msg_count_){0}
  };
  _impl_.msg_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rosbag_Topic::~Rosbag_Topic() {
  // @@protoc_insertion_point(destructor:apollo.data.Rosbag.Topic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rosbag_Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_type_.Destroy();
}

void Rosbag_Topic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rosbag_Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Rosbag.Topic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.msg_type_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.msg_count_) -
        reinterpret_cast<char*>(&_impl_.frequency_)) + sizeof(_impl_.msg_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rosbag_Topic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Rosbag.Topic.msg_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 msg_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_msg_count(&has_bits);
          _impl_.msg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_frequency(&has_bits);
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rosbag_Topic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Rosbag.Topic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string msg_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_msg_type().data(), static_cast<int>(this->_internal_msg_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.Topic.msg_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg_type(), target);
  }

  // optional int32 msg_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_msg_count(), target);
  }

  // optional double frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Rosbag.Topic)
  return target;
}

size_t Rosbag_Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Rosbag.Topic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string msg_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msg_type());
    }

    // optional double frequency = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 msg_count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rosbag_Topic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rosbag_Topic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rosbag_Topic::GetClassData() const { return &_class_data_; }

void Rosbag_Topic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rosbag_Topic *>(to)->MergeFrom(
      static_cast<const Rosbag_Topic &>(from));
}


void Rosbag_Topic::MergeFrom(const Rosbag_Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Rosbag.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_msg_type(from._internal_msg_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.frequency_ = from._impl_.frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.msg_count_ = from._impl_.msg_count_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rosbag_Topic::CopyFrom(const Rosbag_Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Rosbag.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rosbag_Topic::IsInitialized() const {
  return true;
}

void Rosbag_Topic::InternalSwap(Rosbag_Topic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_type_, lhs_arena,
      &other->_impl_.msg_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rosbag_Topic, _impl_.msg_count_)
      + sizeof(Rosbag_Topic::_impl_.msg_count_)
      - PROTOBUF_FIELD_OFFSET(Rosbag_Topic, _impl_.frequency_)>(
          reinterpret_cast<char*>(&_impl_.frequency_),
          reinterpret_cast<char*>(&other->_impl_.frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rosbag_Topic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[1]);
}

// ===================================================================

Rosbag_TopicsEntry_DoNotUse::Rosbag_TopicsEntry_DoNotUse() {}
Rosbag_TopicsEntry_DoNotUse::Rosbag_TopicsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Rosbag_TopicsEntry_DoNotUse::MergeFrom(const Rosbag_TopicsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Rosbag_TopicsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[2]);
}

// ===================================================================

class Rosbag::_Internal {
 public:
  using HasBits = decltype(std::declval<Rosbag>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_msg_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Rosbag::Rosbag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Rosbag::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.data.Rosbag)
}
Rosbag::Rosbag(const Rosbag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.topics_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.msg_count_){}
    , decltype(_impl_.end_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topics_.MergeFrom(from._impl_.topics_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.Rosbag)
}

inline void Rosbag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.topics_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.size_){uint64_t{0u}}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.msg_count_){0}
    , decltype(_impl_.end_time_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Rosbag::~Rosbag() {
  // @@protoc_insertion_point(destructor:apollo.data.Rosbag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Rosbag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topics_.Destruct();
  _impl_.topics_.~MapField();
  _impl_.name_.Destroy();
}

void Rosbag::ArenaDtor(void* object) {
  Rosbag* _this = reinterpret_cast< Rosbag* >(object);
  _this->_impl_.topics_.Destruct();
}
void Rosbag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rosbag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Rosbag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rosbag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Rosbag.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 msg_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_msg_count(&has_bits);
          _impl_.msg_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.data.Rosbag.Topic> topics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.topics_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rosbag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Rosbag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Rosbag.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  // optional int32 version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  // optional double start_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_time(), target);
  }

  // optional double end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_end_time(), target);
  }

  // optional int32 msg_count = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_msg_count(), target);
  }

  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  if (!this->_internal_topics().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::data::Rosbag_Topic>;
    using WireHelper = Rosbag_TopicsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_topics();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.Rosbag.TopicsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Rosbag)
  return target;
}

size_t Rosbag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Rosbag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_topics_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >::const_iterator
      it = this->_internal_topics().begin();
      it != this->_internal_topics().end(); ++it) {
    total_size += Rosbag_TopicsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
    }

    // optional double start_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

    // optional int32 msg_count = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_msg_count());
    }

    // optional double end_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rosbag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Rosbag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rosbag::GetClassData() const { return &_class_data_; }

void Rosbag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Rosbag *>(to)->MergeFrom(
      static_cast<const Rosbag &>(from));
}


void Rosbag::MergeFrom(const Rosbag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Rosbag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.topics_.MergeFrom(from._impl_.topics_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.msg_count_ = from._impl_.msg_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.end_time_ = from._impl_.end_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rosbag::CopyFrom(const Rosbag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Rosbag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rosbag::IsInitialized() const {
  return true;
}

void Rosbag::InternalSwap(Rosbag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rosbag, _impl_.end_time_)
      + sizeof(Rosbag::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(Rosbag, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rosbag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[3]);
}

// ===================================================================

class Disengagement::_Internal {
 public:
  using HasBits = decltype(std::declval<Disengagement>()._impl_._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::data::MapPoint& location(const Disengagement* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::data::MapPoint&
Disengagement::_Internal::location(const Disengagement* msg) {
  return *msg->_impl_.location_;
}
Disengagement::Disengagement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.Disengagement)
}
Disengagement::Disengagement(const Disengagement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_desc()) {
    _impl_.desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _impl_.location_ = new ::apollo::data::MapPoint(*from._impl_.location_);
  }
  _impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:apollo.data.Disengagement)
}

inline void Disengagement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.time_){0}
  };
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Disengagement::~Disengagement() {
  // @@protoc_insertion_point(destructor:apollo.data.Disengagement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Disengagement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void Disengagement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Disengagement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Disengagement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disengagement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.MapPoint location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string desc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Disengagement.desc");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Disengagement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Disengagement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_time(), target);
  }

  // optional .apollo.data.MapPoint location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional string desc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Disengagement.desc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Disengagement)
  return target;
}

size_t Disengagement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Disengagement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string desc = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc());
    }

    // optional .apollo.data.MapPoint location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional double time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disengagement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Disengagement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disengagement::GetClassData() const { return &_class_data_; }

void Disengagement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Disengagement *>(to)->MergeFrom(
      static_cast<const Disengagement &>(from));
}


void Disengagement::MergeFrom(const Disengagement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Disengagement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_desc(from._internal_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::apollo::data::MapPoint::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.time_ = from._impl_.time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disengagement::CopyFrom(const Disengagement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Disengagement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disengagement::IsInitialized() const {
  return true;
}

void Disengagement::InternalSwap(Disengagement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Disengagement, _impl_.time_)
      + sizeof(Disengagement::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(Disengagement, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Disengagement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[4]);
}

// ===================================================================

Task_MileageEntry_DoNotUse::Task_MileageEntry_DoNotUse() {}
Task_MileageEntry_DoNotUse::Task_MileageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_MileageEntry_DoNotUse::MergeFrom(const Task_MileageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_MileageEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[5]);
}

// ===================================================================

class Task::_Internal {
 public:
  using HasBits = decltype(std::declval<Task>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_loop_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::data::StaticInfo& info(const Task* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::data::StaticInfo&
Task::_Internal::info(const Task* msg) {
  return *msg->_impl_.info_;
}
void Task::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Task::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.data.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bags_){from._impl_.bags_}
    , decltype(_impl_.topics_){from._impl_.topics_}
    , decltype(_impl_.disengagements_){from._impl_.disengagements_}
    , decltype(_impl_.map_path_){from._impl_.map_path_}
    , /*decltype(_impl_.mileage_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.loop_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mileage_.MergeFrom(from._impl_.mileage_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _impl_.info_ = new ::apollo::data::StaticInfo(*from._impl_.info_);
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loop_type_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.loop_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bags_){arena}
    , decltype(_impl_.topics_){arena}
    , decltype(_impl_.disengagements_){arena}
    , decltype(_impl_.map_path_){arena}
    , /*decltype(_impl_.mileage_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
    , decltype(_impl_.loop_type_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:apollo.data.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bags_.~RepeatedPtrField();
  _impl_.topics_.~RepeatedPtrField();
  _impl_.disengagements_.~RepeatedPtrField();
  _impl_.map_path_.~RepeatedPtrField();
  _impl_.mileage_.Destruct();
  _impl_.mileage_.~MapField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  _this->_impl_.mileage_.Destruct();
}
void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bags_.Clear();
  _impl_.topics_.Clear();
  _impl_.disengagements_.Clear();
  _impl_.map_path_.Clear();
  _impl_.mileage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.loop_type_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.loop_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Task.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.Task.LoopType loop_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::data::Task_LoopType_IsValid(val))) {
            _internal_set_loop_type(static_cast<::apollo::data::Task_LoopType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.StaticInfo info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.data.Rosbag bags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string topics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.data.Task.topics");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.data.Disengagement disengagements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disengagements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.data.MapPoint map_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, double> mileage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.mileage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_time(), target);
  }

  // optional double end_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_time(), target);
  }

  // optional .apollo.data.Task.LoopType loop_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_loop_type(), target);
  }

  // optional .apollo.data.StaticInfo info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.data.Rosbag bags = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bags_size()); i < n; i++) {
    const auto& repfield = this->_internal_bags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string topics = 7;
  for (int i = 0, n = this->_internal_topics_size(); i < n; i++) {
    const auto& s = this->_internal_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Task.topics");
    target = stream->WriteString(7, s, target);
  }

  // repeated .apollo.data.Disengagement disengagements = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disengagements_size()); i < n; i++) {
    const auto& repfield = this->_internal_disengagements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.data.MapPoint map_path = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, double> mileage = 10;
  if (!this->_internal_mileage().empty()) {
    using MapType = ::_pb::Map<std::string, double>;
    using WireHelper = Task_MileageEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mileage();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.Task.MileageEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.data.Rosbag bags = 6;
  total_size += 1UL * this->_internal_bags_size();
  for (const auto& msg : this->_impl_.bags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string topics = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.topics_.size());
  for (int i = 0, n = _impl_.topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.topics_.Get(i));
  }

  // repeated .apollo.data.Disengagement disengagements = 8;
  total_size += 1UL * this->_internal_disengagements_size();
  for (const auto& msg : this->_impl_.disengagements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.data.MapPoint map_path = 9;
  total_size += 1UL * this->_internal_map_path_size();
  for (const auto& msg : this->_impl_.map_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, double> mileage = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mileage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_mileage().begin();
      it != this->_internal_mileage().end(); ++it) {
    total_size += Task_MileageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.data.StaticInfo info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.info_);
    }

    // optional double start_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double end_time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional .apollo.data.Task.LoopType loop_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_loop_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bags_.MergeFrom(from._impl_.bags_);
  _impl_.topics_.MergeFrom(from._impl_.topics_);
  _impl_.disengagements_.MergeFrom(from._impl_.disengagements_);
  _impl_.map_path_.MergeFrom(from._impl_.map_path_);
  _impl_.mileage_.MergeFrom(from._impl_.mileage_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_info()->::apollo::data::StaticInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.end_time_ = from._impl_.end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.loop_type_ = from._impl_.loop_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bags_.InternalSwap(&other->_impl_.bags_);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  _impl_.disengagements_.InternalSwap(&other->_impl_.disengagements_);
  _impl_.map_path_.InternalSwap(&other->_impl_.map_path_);
  _impl_.mileage_.InternalSwap(&other->_impl_.mileage_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.loop_type_)
      + sizeof(Task::_impl_.loop_type_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2ftask_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2ftask_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::MapPoint*
Arena::CreateMaybeMessage< ::apollo::data::MapPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::MapPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Rosbag_Topic*
Arena::CreateMaybeMessage< ::apollo::data::Rosbag_Topic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Rosbag_Topic >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Rosbag_TopicsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::data::Rosbag_TopicsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Rosbag_TopicsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Rosbag*
Arena::CreateMaybeMessage< ::apollo::data::Rosbag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Rosbag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Disengagement*
Arena::CreateMaybeMessage< ::apollo::data::Disengagement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Disengagement >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Task_MileageEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::data::Task_MileageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Task_MileageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Task*
Arena::CreateMaybeMessage< ::apollo::data::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Task >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
