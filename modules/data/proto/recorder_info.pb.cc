// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/recorder_info.proto

#include "modules/data/proto/recorder_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace data {
namespace recorder {
PROTOBUF_CONSTEXPR RecorderInfo::RecorderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_.writing_disk_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.resources_)*/nullptr
  , /*decltype(_impl_.status_)*/0u} {}
struct RecorderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecorderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecorderInfoDefaultTypeInternal() {}
  union {
    RecorderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecorderInfoDefaultTypeInternal _RecorderInfo_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.sequence_)*/0u} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR Disk::Disk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sn_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mount_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.used_)*/0
  , /*decltype(_impl_.avail_)*/0
  , /*decltype(_impl_.use_percent_)*/0} {}
struct DiskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiskDefaultTypeInternal() {}
  union {
    Disk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiskDefaultTypeInternal _Disk_default_instance_;
PROTOBUF_CONSTEXPR Resources::Resources(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourcesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourcesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourcesDefaultTypeInternal() {}
  union {
    Resources _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourcesDefaultTypeInternal _Resources_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bags_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR Bag::Bag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.writing_filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct BagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BagDefaultTypeInternal() {}
  union {
    Bag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BagDefaultTypeInternal _Bag_default_instance_;
}  // namespace recorder
}  // namespace data
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2fproto_2frecorder_5finfo_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_.writing_disk_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::RecorderInfo, _impl_.resources_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Task, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Task, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Task, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Task, _impl_.duration_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.sn_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.fs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.used_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.avail_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.use_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.mount_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Disk, _impl_.slot_),
  0,
  1,
  4,
  5,
  6,
  7,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Resources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Resources, _impl_.disks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Data, _impl_.bags_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Bag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Bag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::recorder::Bag, _impl_.writing_filename_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::data::recorder::RecorderInfo)},
  { 16, 25, -1, sizeof(::apollo::data::recorder::Task)},
  { 28, 42, -1, sizeof(::apollo::data::recorder::Disk)},
  { 50, -1, -1, sizeof(::apollo::data::recorder::Resources)},
  { 57, -1, -1, sizeof(::apollo::data::recorder::Data)},
  { 64, 71, -1, sizeof(::apollo::data::recorder::Bag)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::data::recorder::_RecorderInfo_default_instance_._instance,
  &::apollo::data::recorder::_Task_default_instance_._instance,
  &::apollo::data::recorder::_Disk_default_instance_._instance,
  &::apollo::data::recorder::_Resources_default_instance_._instance,
  &::apollo::data::recorder::_Data_default_instance_._instance,
  &::apollo::data::recorder::_Bag_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&modules/data/proto/recorder_info.proto"
  "\022\024apollo.data.recorder\"\330\001\n\014RecorderInfo\022"
  "\016\n\006status\030\001 \001(\r\022(\n\004task\030\002 \001(\0132\032.apollo.d"
  "ata.recorder.Task\0220\n\014writing_disk\030\003 \001(\0132"
  "\032.apollo.data.recorder.Disk\022(\n\004data\030\004 \001("
  "\0132\032.apollo.data.recorder.Data\0222\n\tresourc"
  "es\030\005 \001(\0132\037.apollo.data.recorder.Resource"
  "s\"6\n\004Task\022\n\n\002id\030\001 \001(\t\022\020\n\010sequence\030\002 \001(\r\022"
  "\020\n\010duration\030\003 \001(\001\"{\n\004Disk\022\n\n\002sn\030\001 \001(\t\022\n\n"
  "\002fs\030\002 \001(\t\022\014\n\004size\030\003 \001(\001\022\014\n\004used\030\004 \001(\001\022\r\n"
  "\005avail\030\005 \001(\001\022\023\n\013use_percent\030\006 \001(\001\022\r\n\005mou"
  "nt\030\007 \001(\t\022\014\n\004slot\030\010 \001(\t\"6\n\tResources\022)\n\005d"
  "isks\030\001 \003(\0132\032.apollo.data.recorder.Disk\"/"
  "\n\004Data\022\'\n\004bags\030\001 \003(\0132\031.apollo.data.recor"
  "der.Bag\"\037\n\003Bag\022\030\n\020writing_filename\030\001 \001(\t"
  "*\333\001\n\nStatusType\022\026\n\022DATA_RECORDER_INIT\020\000\022"
  "\031\n\025DATA_RECORDER_RUNNING\020\001\022\026\n\022DATA_RECOR"
  "D_ENABLE\020\002\022\024\n\020DATA_SYNC_ENABLE\020\004\022\027\n\023DISK"
  "_SPACE_WARNNING\020\010\022\024\n\020DISK_SPACE_ALERT\020\020\022"
  "\025\n\021DELETING_OLD_DATA\020 \022\026\n\022DATA_RECORDER_"
  "EXIT\020@\022\016\n\tUNDEFINED\020\200\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto = {
    false, false, 822, descriptor_table_protodef_modules_2fdata_2fproto_2frecorder_5finfo_2eproto,
    "modules/data/proto/recorder_info.proto",
    &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto::offsets,
    file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto, file_level_enum_descriptors_modules_2fdata_2fproto_2frecorder_5finfo_2eproto,
    file_level_service_descriptors_modules_2fdata_2fproto_2frecorder_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter() {
  return &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdata_2fproto_2frecorder_5finfo_2eproto(&descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto);
namespace apollo {
namespace data {
namespace recorder {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[0];
}
bool StatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RecorderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RecorderInfo>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::data::recorder::Task& task(const RecorderInfo* msg);
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::data::recorder::Disk& writing_disk(const RecorderInfo* msg);
  static void set_has_writing_disk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::data::recorder::Data& data(const RecorderInfo* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::data::recorder::Resources& resources(const RecorderInfo* msg);
  static void set_has_resources(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::data::recorder::Task&
RecorderInfo::_Internal::task(const RecorderInfo* msg) {
  return *msg->_impl_.task_;
}
const ::apollo::data::recorder::Disk&
RecorderInfo::_Internal::writing_disk(const RecorderInfo* msg) {
  return *msg->_impl_.writing_disk_;
}
const ::apollo::data::recorder::Data&
RecorderInfo::_Internal::data(const RecorderInfo* msg) {
  return *msg->_impl_.data_;
}
const ::apollo::data::recorder::Resources&
RecorderInfo::_Internal::resources(const RecorderInfo* msg) {
  return *msg->_impl_.resources_;
}
RecorderInfo::RecorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.RecorderInfo)
}
RecorderInfo::RecorderInfo(const RecorderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.writing_disk_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.resources_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    _impl_.task_ = new ::apollo::data::recorder::Task(*from._impl_.task_);
  }
  if (from._internal_has_writing_disk()) {
    _impl_.writing_disk_ = new ::apollo::data::recorder::Disk(*from._impl_.writing_disk_);
  }
  if (from._internal_has_data()) {
    _impl_.data_ = new ::apollo::data::recorder::Data(*from._impl_.data_);
  }
  if (from._internal_has_resources()) {
    _impl_.resources_ = new ::apollo::data::recorder::Resources(*from._impl_.resources_);
  }
  _impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.RecorderInfo)
}

inline void RecorderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.writing_disk_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.resources_){nullptr}
    , decltype(_impl_.status_){0u}
  };
}

RecorderInfo::~RecorderInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.RecorderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecorderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.task_;
  if (this != internal_default_instance()) delete _impl_.writing_disk_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.resources_;
}

void RecorderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecorderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.RecorderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.task_ != nullptr);
      _impl_.task_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.writing_disk_ != nullptr);
      _impl_.writing_disk_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.resources_ != nullptr);
      _impl_.resources_->Clear();
    }
  }
  _impl_.status_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecorderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.recorder.Task task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.recorder.Disk writing_disk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_writing_disk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.recorder.Data data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.recorder.Resources resources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecorderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.RecorderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 status = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // optional .apollo.data.recorder.Task task = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.recorder.Disk writing_disk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::writing_disk(this),
        _Internal::writing_disk(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.recorder.Data data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.recorder.Resources resources = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resources(this),
        _Internal::resources(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.RecorderInfo)
  return target;
}

size_t RecorderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.RecorderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.data.recorder.Task task = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_);
    }

    // optional .apollo.data.recorder.Disk writing_disk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.writing_disk_);
    }

    // optional .apollo.data.recorder.Data data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // optional .apollo.data.recorder.Resources resources = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.resources_);
    }

    // optional uint32 status = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecorderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecorderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecorderInfo::GetClassData() const { return &_class_data_; }

void RecorderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecorderInfo *>(to)->MergeFrom(
      static_cast<const RecorderInfo &>(from));
}


void RecorderInfo::MergeFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.RecorderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_task()->::apollo::data::recorder::Task::MergeFrom(from._internal_task());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_writing_disk()->::apollo::data::recorder::Disk::MergeFrom(from._internal_writing_disk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::apollo::data::recorder::Data::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_resources()->::apollo::data::recorder::Resources::MergeFrom(from._internal_resources());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.status_ = from._impl_.status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecorderInfo::CopyFrom(const RecorderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.RecorderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecorderInfo::IsInitialized() const {
  return true;
}

void RecorderInfo::InternalSwap(RecorderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecorderInfo, _impl_.status_)
      + sizeof(RecorderInfo::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RecorderInfo, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecorderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[0]);
}

// ===================================================================

class Task::_Internal {
 public:
  using HasBits = decltype(std::declval<Task>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.sequence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sequence_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sequence_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.sequence_){0u}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sequence_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.sequence_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Task.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence(&has_bits);
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 sequence = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence(), target);
  }

  // optional double duration = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double duration = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 sequence = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.sequence_ = from._impl_.sequence_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.sequence_)
      + sizeof(Task::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[1]);
}

// ===================================================================

class Disk::_Internal {
 public:
  using HasBits = decltype(std::declval<Disk>()._impl_._has_bits_);
  static void set_has_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avail(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_use_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Disk::Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.Disk)
}
Disk::Disk(const Disk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sn_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.mount_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.used_){}
    , decltype(_impl_.avail_){}
    , decltype(_impl_.use_percent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sn()) {
    _impl_.sn_.Set(from._internal_sn(), 
      GetArenaForAllocation());
  }
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_fs()) {
    _impl_.fs_.Set(from._internal_fs(), 
      GetArenaForAllocation());
  }
  _impl_.mount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mount()) {
    _impl_.mount_.Set(from._internal_mount(), 
      GetArenaForAllocation());
  }
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_slot()) {
    _impl_.slot_.Set(from._internal_slot(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_percent_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.use_percent_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Disk)
}

inline void Disk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sn_){}
    , decltype(_impl_.fs_){}
    , decltype(_impl_.mount_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.used_){0}
    , decltype(_impl_.avail_){0}
    , decltype(_impl_.use_percent_){0}
  };
  _impl_.sn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mount_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Disk::~Disk() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Disk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Disk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sn_.Destroy();
  _impl_.fs_.Destroy();
  _impl_.mount_.Destroy();
  _impl_.slot_.Destroy();
}

void Disk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Disk::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Disk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sn_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fs_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mount_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.slot_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.use_percent_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.use_percent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Disk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Disk.sn");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string fs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Disk.fs");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double used = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_used(&has_bits);
          _impl_.used_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double avail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_avail(&has_bits);
          _impl_.avail_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double use_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_use_percent(&has_bits);
          _impl_.use_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string mount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_mount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Disk.mount");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string slot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_slot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Disk.slot");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Disk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Disk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.sn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sn(), target);
  }

  // optional string fs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fs().data(), static_cast<int>(this->_internal_fs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.fs");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fs(), target);
  }

  // optional double size = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_size(), target);
  }

  // optional double used = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_used(), target);
  }

  // optional double avail = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_avail(), target);
  }

  // optional double use_percent = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_use_percent(), target);
  }

  // optional string mount = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mount().data(), static_cast<int>(this->_internal_mount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.mount");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mount(), target);
  }

  // optional string slot = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_slot().data(), static_cast<int>(this->_internal_slot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Disk.slot");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Disk)
  return target;
}

size_t Disk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Disk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sn());
    }

    // optional string fs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_fs());
    }

    // optional string mount = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mount());
    }

    // optional string slot = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_slot());
    }

    // optional double size = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double used = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double avail = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double use_percent = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Disk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Disk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Disk::GetClassData() const { return &_class_data_; }

void Disk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Disk *>(to)->MergeFrom(
      static_cast<const Disk &>(from));
}


void Disk::MergeFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Disk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sn(from._internal_sn());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_fs(from._internal_fs());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mount(from._internal_mount());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_slot(from._internal_slot());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.used_ = from._impl_.used_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.avail_ = from._impl_.avail_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.use_percent_ = from._impl_.use_percent_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Disk::CopyFrom(const Disk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Disk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Disk::IsInitialized() const {
  return true;
}

void Disk::InternalSwap(Disk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sn_, lhs_arena,
      &other->_impl_.sn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fs_, lhs_arena,
      &other->_impl_.fs_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mount_, lhs_arena,
      &other->_impl_.mount_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slot_, lhs_arena,
      &other->_impl_.slot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Disk, _impl_.use_percent_)
      + sizeof(Disk::_impl_.use_percent_)
      - PROTOBUF_FIELD_OFFSET(Disk, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Disk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[2]);
}

// ===================================================================

class Resources::_Internal {
 public:
};

Resources::Resources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.Resources)
}
Resources::Resources(const Resources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.disks_){from._impl_.disks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Resources)
}

inline void Resources::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Resources::~Resources() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Resources)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resources::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.disks_.~RepeatedPtrField();
}

void Resources::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resources::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Resources)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.disks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resources::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.data.recorder.Disk disks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resources::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Resources)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Disk disks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disks_size()); i < n; i++) {
    const auto& repfield = this->_internal_disks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Resources)
  return target;
}

size_t Resources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Resources)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Disk disks = 1;
  total_size += 1UL * this->_internal_disks_size();
  for (const auto& msg : this->_impl_.disks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Resources::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Resources::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Resources::GetClassData() const { return &_class_data_; }

void Resources::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Resources *>(to)->MergeFrom(
      static_cast<const Resources &>(from));
}


void Resources::MergeFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Resources)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.disks_.MergeFrom(from._impl_.disks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Resources::CopyFrom(const Resources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Resources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resources::IsInitialized() const {
  return true;
}

void Resources::InternalSwap(Resources* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.disks_.InternalSwap(&other->_impl_.disks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resources::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[3]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.bags_){from._impl_.bags_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bags_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bags_.~RepeatedPtrField();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.data.recorder.Bag bags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Bag bags = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bags_size()); i < n; i++) {
    const auto& repfield = this->_internal_bags(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.data.recorder.Bag bags = 1;
  total_size += 1UL * this->_internal_bags_size();
  for (const auto& msg : this->_impl_.bags_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bags_.MergeFrom(from._impl_.bags_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bags_.InternalSwap(&other->_impl_.bags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[4]);
}

// ===================================================================

class Bag::_Internal {
 public:
  using HasBits = decltype(std::declval<Bag>()._impl_._has_bits_);
  static void set_has_writing_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Bag::Bag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.recorder.Bag)
}
Bag::Bag(const Bag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.writing_filename_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.writing_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.writing_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_writing_filename()) {
    _impl_.writing_filename_.Set(from._internal_writing_filename(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.recorder.Bag)
}

inline void Bag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.writing_filename_){}
  };
  _impl_.writing_filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.writing_filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bag::~Bag() {
  // @@protoc_insertion_point(destructor:apollo.data.recorder.Bag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.writing_filename_.Destroy();
}

void Bag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.recorder.Bag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.writing_filename_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string writing_filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_writing_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.recorder.Bag.writing_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.recorder.Bag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string writing_filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_writing_filename().data(), static_cast<int>(this->_internal_writing_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.recorder.Bag.writing_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_writing_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.recorder.Bag)
  return target;
}

size_t Bag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.recorder.Bag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string writing_filename = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_writing_filename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Bag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bag::GetClassData() const { return &_class_data_; }

void Bag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Bag *>(to)->MergeFrom(
      static_cast<const Bag &>(from));
}


void Bag::MergeFrom(const Bag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.recorder.Bag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_writing_filename()) {
    _internal_set_writing_filename(from._internal_writing_filename());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bag::CopyFrom(const Bag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.recorder.Bag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bag::IsInitialized() const {
  return true;
}

void Bag::InternalSwap(Bag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.writing_filename_, lhs_arena,
      &other->_impl_.writing_filename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Bag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2frecorder_5finfo_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace recorder
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::RecorderInfo*
Arena::CreateMaybeMessage< ::apollo::data::recorder::RecorderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::RecorderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::Task*
Arena::CreateMaybeMessage< ::apollo::data::recorder::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::Disk*
Arena::CreateMaybeMessage< ::apollo::data::recorder::Disk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::Disk >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::Resources*
Arena::CreateMaybeMessage< ::apollo::data::recorder::Resources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::Resources >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::Data*
Arena::CreateMaybeMessage< ::apollo::data::recorder::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::recorder::Bag*
Arena::CreateMaybeMessage< ::apollo::data::recorder::Bag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::recorder::Bag >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
