// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/static_info.proto

#include "modules/data/proto/static_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace data {
PROTOBUF_CONSTEXPR VehicleInfo::VehicleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_)*/nullptr
  , /*decltype(_impl_.canbus_conf_)*/nullptr
  , /*decltype(_impl_.vehicle_config_)*/nullptr
  , /*decltype(_impl_.control_config_)*/nullptr
  , /*decltype(_impl_.brand_)*/1
  , /*decltype(_impl_.model_)*/1} {}
struct VehicleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleInfoDefaultTypeInternal() {}
  union {
    VehicleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleInfoDefaultTypeInternal _VehicleInfo_default_instance_;
PROTOBUF_CONSTEXPR EnvironmentInfo::EnvironmentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.temperature_)*/0} {}
struct EnvironmentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnvironmentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnvironmentInfoDefaultTypeInternal() {}
  union {
    EnvironmentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnvironmentInfoDefaultTypeInternal _EnvironmentInfo_default_instance_;
PROTOBUF_CONSTEXPR HardwareInfo_ConfigsEntry_DoNotUse::HardwareInfo_ConfigsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct HardwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HardwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HardwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HardwareInfo_ConfigsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HardwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal _HardwareInfo_ConfigsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HardwareInfo::HardwareInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.configs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HardwareInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HardwareInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HardwareInfoDefaultTypeInternal() {}
  union {
    HardwareInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HardwareInfoDefaultTypeInternal _HardwareInfo_default_instance_;
PROTOBUF_CONSTEXPR SoftwareInfo_ConfigsEntry_DoNotUse::SoftwareInfo_ConfigsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SoftwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SoftwareInfo_ConfigsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareInfo_ConfigsEntry_DoNotUseDefaultTypeInternal _SoftwareInfo_ConfigsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SoftwareInfo::SoftwareInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.configs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.docker_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.commit_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latest_routing_request_)*/nullptr} {}
struct SoftwareInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareInfoDefaultTypeInternal() {}
  union {
    SoftwareInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;
PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entity_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.co_driver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR StaticInfo::StaticInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vehicle_)*/nullptr
  , /*decltype(_impl_.environment_)*/nullptr
  , /*decltype(_impl_.hardware_)*/nullptr
  , /*decltype(_impl_.software_)*/nullptr
  , /*decltype(_impl_.user_)*/nullptr} {}
struct StaticInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticInfoDefaultTypeInternal() {}
  union {
    StaticInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticInfoDefaultTypeInternal _StaticInfo_default_instance_;
PROTOBUF_CONSTEXPR StaticInfoConf::StaticInfoConf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hardware_configs_)*/{}
  , /*decltype(_impl_.software_configs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StaticInfoConfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticInfoConfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticInfoConfDefaultTypeInternal() {}
  union {
    StaticInfoConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticInfoConfDefaultTypeInternal _StaticInfoConf_default_instance_;
}  // namespace data
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdata_2fproto_2fstatic_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.brand_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.license_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.canbus_conf_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.vehicle_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::VehicleInfo, _impl_.control_config_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::EnvironmentInfo, _impl_.temperature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::HardwareInfo, _impl_.configs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_.docker_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_.commit_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_.configs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SoftwareInfo, _impl_.latest_routing_request_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _impl_.driver_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::UserInfo, _impl_.co_driver_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_.environment_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_.hardware_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_.software_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfo, _impl_.user_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, _impl_.hardware_configs_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::StaticInfoConf, _impl_.software_configs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::data::VehicleInfo)},
  { 20, 28, -1, sizeof(::apollo::data::EnvironmentInfo)},
  { 30, 38, -1, sizeof(::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse)},
  { 40, -1, -1, sizeof(::apollo::data::HardwareInfo)},
  { 47, 55, -1, sizeof(::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse)},
  { 57, 68, -1, sizeof(::apollo::data::SoftwareInfo)},
  { 73, 82, -1, sizeof(::apollo::data::UserInfo)},
  { 85, 96, -1, sizeof(::apollo::data::StaticInfo)},
  { 101, -1, -1, sizeof(::apollo::data::StaticInfoConf)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::data::_VehicleInfo_default_instance_._instance,
  &::apollo::data::_EnvironmentInfo_default_instance_._instance,
  &::apollo::data::_HardwareInfo_ConfigsEntry_DoNotUse_default_instance_._instance,
  &::apollo::data::_HardwareInfo_default_instance_._instance,
  &::apollo::data::_SoftwareInfo_ConfigsEntry_DoNotUse_default_instance_._instance,
  &::apollo::data::_SoftwareInfo_default_instance_._instance,
  &::apollo::data::_UserInfo_default_instance_._instance,
  &::apollo::data::_StaticInfo_default_instance_._instance,
  &::apollo::data::_StaticInfoConf_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$modules/data/proto/static_info.proto\022\013"
  "apollo.data\032&modules/canbus/proto/canbus"
  "_conf.proto\032\"modules/canbus/proto/chassi"
  "s.proto\0321modules/common/configs/proto/ve"
  "hicle_config.proto\032(modules/control/prot"
  "o/control_conf.proto\032#modules/routing/pr"
  "oto/routing.proto\"\227\003\n\013VehicleInfo\022\014\n\004nam"
  "e\030\001 \001(\t\022-\n\005brand\030\002 \001(\0162\036.apollo.data.Veh"
  "icleInfo.Brand\022-\n\005model\030\003 \001(\0162\036.apollo.d"
  "ata.VehicleInfo.Model\022+\n\007license\030\004 \001(\0132\026"
  ".apollo.canbus.LicenseB\002\030\001\022.\n\013canbus_con"
  "f\030\005 \001(\0132\031.apollo.canbus.CanbusConf\0224\n\016ve"
  "hicle_config\030\006 \001(\0132\034.apollo.common.Vehic"
  "leConfig\0223\n\016control_config\030\007 \001(\0132\033.apoll"
  "o.control.ControlConf\")\n\005Brand\022\013\n\007LINCOL"
  "N\020\001\022\010\n\004FORD\020\002\022\t\n\005LEXUS\020\003\")\n\005Model\022\007\n\003MKZ"
  "\020\001\022\013\n\007TRANSIT\020\002\022\n\n\006RX450H\020\003\"<\n\017Environme"
  "ntInfo\022\024\n\010map_name\030\001 \001(\tB\002\030\001\022\023\n\013temperat"
  "ure\030\002 \001(\002\"w\n\014HardwareInfo\0227\n\007configs\030\001 \003"
  "(\0132&.apollo.data.HardwareInfo.ConfigsEnt"
  "ry\032.\n\014ConfigsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\366\001\n\014SoftwareInfo\022\030\n\014docker_im"
  "age\030\001 \001(\tB\002\030\001\022\021\n\tcommit_id\030\002 \001(\t\022\020\n\004mode"
  "\030\003 \001(\tB\002\030\001\0227\n\007configs\030\004 \003(\0132&.apollo.dat"
  "a.SoftwareInfo.ConfigsEntry\022>\n\026latest_ro"
  "uting_request\030\005 \001(\0132\036.apollo.routing.Rou"
  "tingRequest\032.\n\014ConfigsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\010UserInfo\022\016\n\006entit"
  "y\030\001 \001(\t\022\016\n\006driver\030\002 \001(\t\022\021\n\tco_driver\030\003 \001"
  "(\t\"\351\001\n\nStaticInfo\022)\n\007vehicle\030\001 \001(\0132\030.apo"
  "llo.data.VehicleInfo\0221\n\013environment\030\002 \001("
  "\0132\034.apollo.data.EnvironmentInfo\022+\n\010hardw"
  "are\030\003 \001(\0132\031.apollo.data.HardwareInfo\022+\n\010"
  "software\030\004 \001(\0132\031.apollo.data.SoftwareInf"
  "o\022#\n\004user\030\005 \001(\0132\025.apollo.data.UserInfo\"D"
  "\n\016StaticInfoConf\022\030\n\020hardware_configs\030\001 \003"
  "(\t\022\030\n\020software_configs\030\002 \003(\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fcanbus_5fconf_2eproto,
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto,
  &::descriptor_table_modules_2fcontrol_2fproto_2fcontrol_5fconf_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto = {
    false, false, 1468, descriptor_table_protodef_modules_2fdata_2fproto_2fstatic_5finfo_2eproto,
    "modules/data/proto/static_info.proto",
    &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once, descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_deps, 5, 9,
    schemas, file_default_instances, TableStruct_modules_2fdata_2fproto_2fstatic_5finfo_2eproto::offsets,
    file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto, file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto,
    file_level_service_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter() {
  return &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdata_2fproto_2fstatic_5finfo_2eproto(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto);
namespace apollo {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleInfo_Brand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[0];
}
bool VehicleInfo_Brand_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleInfo_Brand VehicleInfo::LINCOLN;
constexpr VehicleInfo_Brand VehicleInfo::FORD;
constexpr VehicleInfo_Brand VehicleInfo::LEXUS;
constexpr VehicleInfo_Brand VehicleInfo::Brand_MIN;
constexpr VehicleInfo_Brand VehicleInfo::Brand_MAX;
constexpr int VehicleInfo::Brand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleInfo_Model_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto);
  return file_level_enum_descriptors_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[1];
}
bool VehicleInfo_Model_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehicleInfo_Model VehicleInfo::MKZ;
constexpr VehicleInfo_Model VehicleInfo::TRANSIT;
constexpr VehicleInfo_Model VehicleInfo::RX450H;
constexpr VehicleInfo_Model VehicleInfo::Model_MIN;
constexpr VehicleInfo_Model VehicleInfo::Model_MAX;
constexpr int VehicleInfo::Model_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class VehicleInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_brand(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::canbus::License& license(const VehicleInfo* msg);
  static void set_has_license(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::canbus::CanbusConf& canbus_conf(const VehicleInfo* msg);
  static void set_has_canbus_conf(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::VehicleConfig& vehicle_config(const VehicleInfo* msg);
  static void set_has_vehicle_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::control::ControlConf& control_config(const VehicleInfo* msg);
  static void set_has_control_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::canbus::License&
VehicleInfo::_Internal::license(const VehicleInfo* msg) {
  return *msg->_impl_.license_;
}
const ::apollo::canbus::CanbusConf&
VehicleInfo::_Internal::canbus_conf(const VehicleInfo* msg) {
  return *msg->_impl_.canbus_conf_;
}
const ::apollo::common::VehicleConfig&
VehicleInfo::_Internal::vehicle_config(const VehicleInfo* msg) {
  return *msg->_impl_.vehicle_config_;
}
const ::apollo::control::ControlConf&
VehicleInfo::_Internal::control_config(const VehicleInfo* msg) {
  return *msg->_impl_.control_config_;
}
void VehicleInfo::clear_license() {
  if (_impl_.license_ != nullptr) _impl_.license_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void VehicleInfo::clear_canbus_conf() {
  if (_impl_.canbus_conf_ != nullptr) _impl_.canbus_conf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void VehicleInfo::clear_vehicle_config() {
  if (_impl_.vehicle_config_ != nullptr) _impl_.vehicle_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void VehicleInfo::clear_control_config() {
  if (_impl_.control_config_ != nullptr) _impl_.control_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
VehicleInfo::VehicleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.VehicleInfo)
}
VehicleInfo::VehicleInfo(const VehicleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.canbus_conf_){nullptr}
    , decltype(_impl_.vehicle_config_){nullptr}
    , decltype(_impl_.control_config_){nullptr}
    , decltype(_impl_.brand_){}
    , decltype(_impl_.model_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_license()) {
    _impl_.license_ = new ::apollo::canbus::License(*from._impl_.license_);
  }
  if (from._internal_has_canbus_conf()) {
    _impl_.canbus_conf_ = new ::apollo::canbus::CanbusConf(*from._impl_.canbus_conf_);
  }
  if (from._internal_has_vehicle_config()) {
    _impl_.vehicle_config_ = new ::apollo::common::VehicleConfig(*from._impl_.vehicle_config_);
  }
  if (from._internal_has_control_config()) {
    _impl_.control_config_ = new ::apollo::control::ControlConf(*from._impl_.control_config_);
  }
  ::memcpy(&_impl_.brand_, &from._impl_.brand_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.model_) -
    reinterpret_cast<char*>(&_impl_.brand_)) + sizeof(_impl_.model_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.VehicleInfo)
}

inline void VehicleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.license_){nullptr}
    , decltype(_impl_.canbus_conf_){nullptr}
    , decltype(_impl_.vehicle_config_){nullptr}
    , decltype(_impl_.control_config_){nullptr}
    , decltype(_impl_.brand_){1}
    , decltype(_impl_.model_){1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleInfo::~VehicleInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.VehicleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.license_;
  if (this != internal_default_instance()) delete _impl_.canbus_conf_;
  if (this != internal_default_instance()) delete _impl_.vehicle_config_;
  if (this != internal_default_instance()) delete _impl_.control_config_;
}

void VehicleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.VehicleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.license_ != nullptr);
      _impl_.license_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.canbus_conf_ != nullptr);
      _impl_.canbus_conf_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.vehicle_config_ != nullptr);
      _impl_.vehicle_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.control_config_ != nullptr);
      _impl_.control_config_->Clear();
    }
    _impl_.brand_ = 1;
    _impl_.model_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.VehicleInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.VehicleInfo.Brand brand = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::data::VehicleInfo_Brand_IsValid(val))) {
            _internal_set_brand(static_cast<::apollo::data::VehicleInfo_Brand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.VehicleInfo.Model model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::data::VehicleInfo_Model_IsValid(val))) {
            _internal_set_model(static_cast<::apollo::data::VehicleInfo_Model>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.License license = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.CanbusConf canbus_conf = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_canbus_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleConfig vehicle_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.control.ControlConf control_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.VehicleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.VehicleInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.data.VehicleInfo.Brand brand = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_brand(), target);
  }

  // optional .apollo.data.VehicleInfo.Model model = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_model(), target);
  }

  // optional .apollo.canbus.License license = 4 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::license(this),
        _Internal::license(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.CanbusConf canbus_conf = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::canbus_conf(this),
        _Internal::canbus_conf(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.VehicleConfig vehicle_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::vehicle_config(this),
        _Internal::vehicle_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.control.ControlConf control_config = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::control_config(this),
        _Internal::control_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.VehicleInfo)
  return target;
}

size_t VehicleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.VehicleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.canbus.License license = 4 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.license_);
    }

    // optional .apollo.canbus.CanbusConf canbus_conf = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.canbus_conf_);
    }

    // optional .apollo.common.VehicleConfig vehicle_config = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_config_);
    }

    // optional .apollo.control.ControlConf control_config = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.control_config_);
    }

    // optional .apollo.data.VehicleInfo.Brand brand = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_brand());
    }

    // optional .apollo.data.VehicleInfo.Model model = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_model());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleInfo::GetClassData() const { return &_class_data_; }

void VehicleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleInfo *>(to)->MergeFrom(
      static_cast<const VehicleInfo &>(from));
}


void VehicleInfo::MergeFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.VehicleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_license()->::apollo::canbus::License::MergeFrom(from._internal_license());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_canbus_conf()->::apollo::canbus::CanbusConf::MergeFrom(from._internal_canbus_conf());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vehicle_config()->::apollo::common::VehicleConfig::MergeFrom(from._internal_vehicle_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_control_config()->::apollo::control::ControlConf::MergeFrom(from._internal_control_config());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.brand_ = from._impl_.brand_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.model_ = from._impl_.model_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleInfo::CopyFrom(const VehicleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.VehicleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInfo::IsInitialized() const {
  return true;
}

void VehicleInfo::InternalSwap(VehicleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleInfo, _impl_.control_config_)
      + sizeof(VehicleInfo::_impl_.control_config_)
      - PROTOBUF_FIELD_OFFSET(VehicleInfo, _impl_.license_)>(
          reinterpret_cast<char*>(&_impl_.license_),
          reinterpret_cast<char*>(&other->_impl_.license_));
  swap(_impl_.brand_, other->_impl_.brand_);
  swap(_impl_.model_, other->_impl_.model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[0]);
}

// ===================================================================

class EnvironmentInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<EnvironmentInfo>()._impl_._has_bits_);
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

EnvironmentInfo::EnvironmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.EnvironmentInfo)
}
EnvironmentInfo::EnvironmentInfo(const EnvironmentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.temperature_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _impl_.map_name_.Set(from._internal_map_name(), 
      GetArenaForAllocation());
  }
  _impl_.temperature_ = from._impl_.temperature_;
  // @@protoc_insertion_point(copy_constructor:apollo.data.EnvironmentInfo)
}

inline void EnvironmentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.temperature_){0}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnvironmentInfo::~EnvironmentInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.EnvironmentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnvironmentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_name_.Destroy();
}

void EnvironmentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnvironmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.EnvironmentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.map_name_.ClearNonDefaultToEmpty();
  }
  _impl_.temperature_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnvironmentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string map_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.EnvironmentInfo.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional float temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_temperature(&has_bits);
          _impl_.temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnvironmentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.EnvironmentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string map_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.EnvironmentInfo.map_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_name(), target);
  }

  // optional float temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.EnvironmentInfo)
  return target;
}

size_t EnvironmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.EnvironmentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional float temperature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnvironmentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnvironmentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnvironmentInfo::GetClassData() const { return &_class_data_; }

void EnvironmentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnvironmentInfo *>(to)->MergeFrom(
      static_cast<const EnvironmentInfo &>(from));
}


void EnvironmentInfo::MergeFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.EnvironmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.temperature_ = from._impl_.temperature_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnvironmentInfo::CopyFrom(const EnvironmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.EnvironmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentInfo::IsInitialized() const {
  return true;
}

void EnvironmentInfo::InternalSwap(EnvironmentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  swap(_impl_.temperature_, other->_impl_.temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[1]);
}

// ===================================================================

HardwareInfo_ConfigsEntry_DoNotUse::HardwareInfo_ConfigsEntry_DoNotUse() {}
HardwareInfo_ConfigsEntry_DoNotUse::HardwareInfo_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HardwareInfo_ConfigsEntry_DoNotUse::MergeFrom(const HardwareInfo_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HardwareInfo_ConfigsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[2]);
}

// ===================================================================

class HardwareInfo::_Internal {
 public:
};

HardwareInfo::HardwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &HardwareInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.data.HardwareInfo)
}
HardwareInfo::HardwareInfo(const HardwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      /*decltype(_impl_.configs_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.configs_.MergeFrom(from._impl_.configs_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.HardwareInfo)
}

inline void HardwareInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.configs_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HardwareInfo::~HardwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.HardwareInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void HardwareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configs_.Destruct();
  _impl_.configs_.~MapField();
}

void HardwareInfo::ArenaDtor(void* object) {
  HardwareInfo* _this = reinterpret_cast< HardwareInfo* >(object);
  _this->_impl_.configs_.Destruct();
}
void HardwareInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HardwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.HardwareInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardwareInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HardwareInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.HardwareInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configs = 1;
  if (!this->_internal_configs().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = HardwareInfo_ConfigsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.HardwareInfo.ConfigsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.HardwareInfo.ConfigsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.HardwareInfo)
  return target;
}

size_t HardwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.HardwareInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configs().begin();
      it != this->_internal_configs().end(); ++it) {
    total_size += HardwareInfo_ConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HardwareInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HardwareInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HardwareInfo::GetClassData() const { return &_class_data_; }

void HardwareInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HardwareInfo *>(to)->MergeFrom(
      static_cast<const HardwareInfo &>(from));
}


void HardwareInfo::MergeFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.HardwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.configs_.MergeFrom(from._impl_.configs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HardwareInfo::CopyFrom(const HardwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.HardwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareInfo::IsInitialized() const {
  return true;
}

void HardwareInfo::InternalSwap(HardwareInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.configs_.InternalSwap(&other->_impl_.configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[3]);
}

// ===================================================================

SoftwareInfo_ConfigsEntry_DoNotUse::SoftwareInfo_ConfigsEntry_DoNotUse() {}
SoftwareInfo_ConfigsEntry_DoNotUse::SoftwareInfo_ConfigsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SoftwareInfo_ConfigsEntry_DoNotUse::MergeFrom(const SoftwareInfo_ConfigsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo_ConfigsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[4]);
}

// ===================================================================

class SoftwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareInfo>()._impl_._has_bits_);
  static void set_has_docker_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_commit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::routing::RoutingRequest& latest_routing_request(const SoftwareInfo* msg);
  static void set_has_latest_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::routing::RoutingRequest&
SoftwareInfo::_Internal::latest_routing_request(const SoftwareInfo* msg) {
  return *msg->_impl_.latest_routing_request_;
}
void SoftwareInfo::clear_latest_routing_request() {
  if (_impl_.latest_routing_request_ != nullptr) _impl_.latest_routing_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
SoftwareInfo::SoftwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SoftwareInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.data.SoftwareInfo)
}
SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configs_)*/{}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.commit_id_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.latest_routing_request_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.configs_.MergeFrom(from._impl_.configs_);
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_docker_image()) {
    _impl_.docker_image_.Set(from._internal_docker_image(), 
      GetArenaForAllocation());
  }
  _impl_.commit_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commit_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_commit_id()) {
    _impl_.commit_id_.Set(from._internal_commit_id(), 
      GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mode()) {
    _impl_.mode_.Set(from._internal_mode(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_latest_routing_request()) {
    _impl_.latest_routing_request_ = new ::apollo::routing::RoutingRequest(*from._impl_.latest_routing_request_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.SoftwareInfo)
}

inline void SoftwareInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.configs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.docker_image_){}
    , decltype(_impl_.commit_id_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.latest_routing_request_){nullptr}
  };
  _impl_.docker_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.docker_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commit_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commit_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.SoftwareInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SoftwareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.configs_.Destruct();
  _impl_.configs_.~MapField();
  _impl_.docker_image_.Destroy();
  _impl_.commit_id_.Destroy();
  _impl_.mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.latest_routing_request_;
}

void SoftwareInfo::ArenaDtor(void* object) {
  SoftwareInfo* _this = reinterpret_cast< SoftwareInfo* >(object);
  _this->_impl_.configs_.Destruct();
}
void SoftwareInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.SoftwareInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.configs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.docker_image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.commit_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.latest_routing_request_ != nullptr);
      _impl_.latest_routing_request_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string docker_image = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_docker_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.SoftwareInfo.docker_image");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string commit_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_commit_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.SoftwareInfo.commit_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string mode = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.SoftwareInfo.mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // map<string, string> configs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.configs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_routing_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SoftwareInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.SoftwareInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string docker_image = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_docker_image().data(), static_cast<int>(this->_internal_docker_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.docker_image");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_docker_image(), target);
  }

  // optional string commit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commit_id().data(), static_cast<int>(this->_internal_commit_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.commit_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commit_id(), target);
  }

  // optional string mode = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SoftwareInfo.mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  // map<string, string> configs = 4;
  if (!this->_internal_configs().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SoftwareInfo_ConfigsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.SoftwareInfo.ConfigsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.data.SoftwareInfo.ConfigsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::latest_routing_request(this),
        _Internal::latest_routing_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.SoftwareInfo)
  return target;
}

size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.SoftwareInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configs().begin();
      it != this->_internal_configs().end(); ++it) {
    total_size += SoftwareInfo_ConfigsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string docker_image = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_docker_image());
    }

    // optional string commit_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_commit_id());
    }

    // optional string mode = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mode());
    }

    // optional .apollo.routing.RoutingRequest latest_routing_request = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latest_routing_request_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SoftwareInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SoftwareInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SoftwareInfo::GetClassData() const { return &_class_data_; }

void SoftwareInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SoftwareInfo *>(to)->MergeFrom(
      static_cast<const SoftwareInfo &>(from));
}


void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.configs_.MergeFrom(from._impl_.configs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_docker_image(from._internal_docker_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_commit_id(from._internal_commit_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_mode(from._internal_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_latest_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_latest_routing_request());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  return true;
}

void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.configs_.InternalSwap(&other->_impl_.configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.docker_image_, lhs_arena,
      &other->_impl_.docker_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commit_id_, lhs_arena,
      &other->_impl_.commit_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  swap(_impl_.latest_routing_request_, other->_impl_.latest_routing_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[5]);
}

// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static void set_has_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_co_driver(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.co_driver_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.entity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_entity()) {
    _impl_.entity_.Set(from._internal_entity(), 
      GetArenaForAllocation());
  }
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_driver()) {
    _impl_.driver_.Set(from._internal_driver(), 
      GetArenaForAllocation());
  }
  _impl_.co_driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.co_driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_co_driver()) {
    _impl_.co_driver_.Set(from._internal_co_driver(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.UserInfo)
}

inline void UserInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entity_){}
    , decltype(_impl_.driver_){}
    , decltype(_impl_.co_driver_){}
  };
  _impl_.entity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.entity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.co_driver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.co_driver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_.Destroy();
  _impl_.driver_.Destroy();
  _impl_.co_driver_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.entity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.driver_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.co_driver_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.UserInfo.entity");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string driver = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.UserInfo.driver");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string co_driver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_co_driver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.UserInfo.co_driver");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // optional string driver = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_driver().data(), static_cast<int>(this->_internal_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.driver");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_driver(), target);
  }

  // optional string co_driver = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_co_driver().data(), static_cast<int>(this->_internal_co_driver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.UserInfo.co_driver");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_co_driver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string entity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entity());
    }

    // optional string driver = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_driver());
    }

    // optional string co_driver = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_co_driver());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }

void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfo *>(to)->MergeFrom(
      static_cast<const UserInfo &>(from));
}


void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entity(from._internal_entity());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_driver(from._internal_driver());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_co_driver(from._internal_co_driver());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.entity_, lhs_arena,
      &other->_impl_.entity_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.driver_, lhs_arena,
      &other->_impl_.driver_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.co_driver_, lhs_arena,
      &other->_impl_.co_driver_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[6]);
}

// ===================================================================

class StaticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticInfo>()._impl_._has_bits_);
  static const ::apollo::data::VehicleInfo& vehicle(const StaticInfo* msg);
  static void set_has_vehicle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::data::EnvironmentInfo& environment(const StaticInfo* msg);
  static void set_has_environment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::data::HardwareInfo& hardware(const StaticInfo* msg);
  static void set_has_hardware(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::data::SoftwareInfo& software(const StaticInfo* msg);
  static void set_has_software(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::data::UserInfo& user(const StaticInfo* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::data::VehicleInfo&
StaticInfo::_Internal::vehicle(const StaticInfo* msg) {
  return *msg->_impl_.vehicle_;
}
const ::apollo::data::EnvironmentInfo&
StaticInfo::_Internal::environment(const StaticInfo* msg) {
  return *msg->_impl_.environment_;
}
const ::apollo::data::HardwareInfo&
StaticInfo::_Internal::hardware(const StaticInfo* msg) {
  return *msg->_impl_.hardware_;
}
const ::apollo::data::SoftwareInfo&
StaticInfo::_Internal::software(const StaticInfo* msg) {
  return *msg->_impl_.software_;
}
const ::apollo::data::UserInfo&
StaticInfo::_Internal::user(const StaticInfo* msg) {
  return *msg->_impl_.user_;
}
StaticInfo::StaticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.StaticInfo)
}
StaticInfo::StaticInfo(const StaticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.environment_){nullptr}
    , decltype(_impl_.hardware_){nullptr}
    , decltype(_impl_.software_){nullptr}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle()) {
    _impl_.vehicle_ = new ::apollo::data::VehicleInfo(*from._impl_.vehicle_);
  }
  if (from._internal_has_environment()) {
    _impl_.environment_ = new ::apollo::data::EnvironmentInfo(*from._impl_.environment_);
  }
  if (from._internal_has_hardware()) {
    _impl_.hardware_ = new ::apollo::data::HardwareInfo(*from._impl_.hardware_);
  }
  if (from._internal_has_software()) {
    _impl_.software_ = new ::apollo::data::SoftwareInfo(*from._impl_.software_);
  }
  if (from._internal_has_user()) {
    _impl_.user_ = new ::apollo::data::UserInfo(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfo)
}

inline void StaticInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.environment_){nullptr}
    , decltype(_impl_.hardware_){nullptr}
    , decltype(_impl_.software_){nullptr}
    , decltype(_impl_.user_){nullptr}
  };
}

StaticInfo::~StaticInfo() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StaticInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vehicle_;
  if (this != internal_default_instance()) delete _impl_.environment_;
  if (this != internal_default_instance()) delete _impl_.hardware_;
  if (this != internal_default_instance()) delete _impl_.software_;
  if (this != internal_default_instance()) delete _impl_.user_;
}

void StaticInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StaticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.vehicle_ != nullptr);
      _impl_.vehicle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.environment_ != nullptr);
      _impl_.environment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.hardware_ != nullptr);
      _impl_.hardware_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.software_ != nullptr);
      _impl_.software_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.data.VehicleInfo vehicle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.EnvironmentInfo environment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.HardwareInfo hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.SoftwareInfo software = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_software(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.data.UserInfo user = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.data.VehicleInfo vehicle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vehicle(this),
        _Internal::vehicle(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.EnvironmentInfo environment = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::environment(this),
        _Internal::environment(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.HardwareInfo hardware = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hardware(this),
        _Internal::hardware(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.SoftwareInfo software = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::software(this),
        _Internal::software(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.data.UserInfo user = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfo)
  return target;
}

size_t StaticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.data.VehicleInfo vehicle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_);
    }

    // optional .apollo.data.EnvironmentInfo environment = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.environment_);
    }

    // optional .apollo.data.HardwareInfo hardware = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hardware_);
    }

    // optional .apollo.data.SoftwareInfo software = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.software_);
    }

    // optional .apollo.data.UserInfo user = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticInfo::GetClassData() const { return &_class_data_; }

void StaticInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticInfo *>(to)->MergeFrom(
      static_cast<const StaticInfo &>(from));
}


void StaticInfo::MergeFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vehicle()->::apollo::data::VehicleInfo::MergeFrom(from._internal_vehicle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_environment()->::apollo::data::EnvironmentInfo::MergeFrom(from._internal_environment());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_hardware()->::apollo::data::HardwareInfo::MergeFrom(from._internal_hardware());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_software()->::apollo::data::SoftwareInfo::MergeFrom(from._internal_software());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_user()->::apollo::data::UserInfo::MergeFrom(from._internal_user());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticInfo::CopyFrom(const StaticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfo::IsInitialized() const {
  return true;
}

void StaticInfo::InternalSwap(StaticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticInfo, _impl_.user_)
      + sizeof(StaticInfo::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(StaticInfo, _impl_.vehicle_)>(
          reinterpret_cast<char*>(&_impl_.vehicle_),
          reinterpret_cast<char*>(&other->_impl_.vehicle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[7]);
}

// ===================================================================

class StaticInfoConf::_Internal {
 public:
};

StaticInfoConf::StaticInfoConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.StaticInfoConf)
}
StaticInfoConf::StaticInfoConf(const StaticInfoConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.hardware_configs_){from._impl_.hardware_configs_}
    , decltype(_impl_.software_configs_){from._impl_.software_configs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.data.StaticInfoConf)
}

inline void StaticInfoConf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hardware_configs_){arena}
    , decltype(_impl_.software_configs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StaticInfoConf::~StaticInfoConf() {
  // @@protoc_insertion_point(destructor:apollo.data.StaticInfoConf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StaticInfoConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hardware_configs_.~RepeatedPtrField();
  _impl_.software_configs_.~RepeatedPtrField();
}

void StaticInfoConf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StaticInfoConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.StaticInfoConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hardware_configs_.Clear();
  _impl_.software_configs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticInfoConf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string hardware_configs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hardware_configs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.data.StaticInfoConf.hardware_configs");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string software_configs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_software_configs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.data.StaticInfoConf.software_configs");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticInfoConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.StaticInfoConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hardware_configs = 1;
  for (int i = 0, n = this->_internal_hardware_configs_size(); i < n; i++) {
    const auto& s = this->_internal_hardware_configs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.hardware_configs");
    target = stream->WriteString(1, s, target);
  }

  // repeated string software_configs = 2;
  for (int i = 0, n = this->_internal_software_configs_size(); i < n; i++) {
    const auto& s = this->_internal_software_configs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.StaticInfoConf.software_configs");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.StaticInfoConf)
  return target;
}

size_t StaticInfoConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.StaticInfoConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hardware_configs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hardware_configs_.size());
  for (int i = 0, n = _impl_.hardware_configs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.hardware_configs_.Get(i));
  }

  // repeated string software_configs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.software_configs_.size());
  for (int i = 0, n = _impl_.software_configs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.software_configs_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticInfoConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticInfoConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticInfoConf::GetClassData() const { return &_class_data_; }

void StaticInfoConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticInfoConf *>(to)->MergeFrom(
      static_cast<const StaticInfoConf &>(from));
}


void StaticInfoConf::MergeFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.StaticInfoConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.hardware_configs_.MergeFrom(from._impl_.hardware_configs_);
  _impl_.software_configs_.MergeFrom(from._impl_.software_configs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticInfoConf::CopyFrom(const StaticInfoConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.StaticInfoConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticInfoConf::IsInitialized() const {
  return true;
}

void StaticInfoConf::InternalSwap(StaticInfoConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hardware_configs_.InternalSwap(&other->_impl_.hardware_configs_);
  _impl_.software_configs_.InternalSwap(&other->_impl_.software_configs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticInfoConf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_getter, &descriptor_table_modules_2fdata_2fproto_2fstatic_5finfo_2eproto_once,
      file_level_metadata_modules_2fdata_2fproto_2fstatic_5finfo_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::VehicleInfo*
Arena::CreateMaybeMessage< ::apollo::data::VehicleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::VehicleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::EnvironmentInfo*
Arena::CreateMaybeMessage< ::apollo::data::EnvironmentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::EnvironmentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::HardwareInfo_ConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::HardwareInfo*
Arena::CreateMaybeMessage< ::apollo::data::HardwareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::HardwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::SoftwareInfo_ConfigsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SoftwareInfo*
Arena::CreateMaybeMessage< ::apollo::data::SoftwareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::SoftwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::UserInfo*
Arena::CreateMaybeMessage< ::apollo::data::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::StaticInfo*
Arena::CreateMaybeMessage< ::apollo::data::StaticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::StaticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::StaticInfoConf*
Arena::CreateMaybeMessage< ::apollo::data::StaticInfoConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::StaticInfoConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
