// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/warehouse_query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/data/proto/task.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto;
namespace apollo {
namespace data {
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
struct SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::SearchRequest* Arena::CreateMaybeMessage<::apollo::data::SearchRequest>(Arena*);
template<> ::apollo::data::SearchResponse* Arena::CreateMaybeMessage<::apollo::data::SearchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {

// ===================================================================

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 4,
    kFieldsFieldNumber = 5,
    kVehicleNameFieldNumber = 1,
    kMapNameFieldNumber = 2,
    kLoopTypeFieldNumber = 3,
    kOffsetFieldNumber = 7,
    kCountFieldNumber = 6,
  };
  // repeated string topics = 4;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // repeated string fields = 5;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // optional string vehicle_name = 1;
  bool has_vehicle_name() const;
  private:
  bool _internal_has_vehicle_name() const;
  public:
  void clear_vehicle_name();
  const std::string& vehicle_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehicle_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehicle_name();
  PROTOBUF_NODISCARD std::string* release_vehicle_name();
  void set_allocated_vehicle_name(std::string* vehicle_name);
  private:
  const std::string& _internal_vehicle_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_name(const std::string& value);
  std::string* _internal_mutable_vehicle_name();
  public:

  // optional string map_name = 2;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional .apollo.data.Task.LoopType loop_type = 3;
  bool has_loop_type() const;
  private:
  bool _internal_has_loop_type() const;
  public:
  void clear_loop_type();
  ::apollo::data::Task_LoopType loop_type() const;
  void set_loop_type(::apollo::data::Task_LoopType value);
  private:
  ::apollo::data::Task_LoopType _internal_loop_type() const;
  void _internal_set_loop_type(::apollo::data::Task_LoopType value);
  public:

  // optional int32 offset = 7;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // optional int32 count = 6 [default = 20];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    int loop_type_;
    int32_t offset_;
    int32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  ~SearchResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SearchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kTotalCountFieldNumber = 2,
  };
  // repeated .apollo.data.Task tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::apollo::data::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Task >*
      mutable_tasks();
  private:
  const ::apollo::data::Task& _internal_tasks(int index) const;
  ::apollo::data::Task* _internal_add_tasks();
  public:
  const ::apollo::data::Task& tasks(int index) const;
  ::apollo::data::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Task >&
      tasks() const;

  // optional int32 total_count = 2;
  bool has_total_count() const;
  private:
  bool _internal_has_total_count() const;
  public:
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Task > tasks_;
    int32_t total_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// optional string vehicle_name = 1;
inline bool SearchRequest::_internal_has_vehicle_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchRequest::has_vehicle_name() const {
  return _internal_has_vehicle_name();
}
inline void SearchRequest::clear_vehicle_name() {
  _impl_.vehicle_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchRequest::vehicle_name() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.vehicle_name)
  return _internal_vehicle_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_vehicle_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.vehicle_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.vehicle_name)
}
inline std::string* SearchRequest::mutable_vehicle_name() {
  std::string* _s = _internal_mutable_vehicle_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.SearchRequest.vehicle_name)
  return _s;
}
inline const std::string& SearchRequest::_internal_vehicle_name() const {
  return _impl_.vehicle_name_.Get();
}
inline void SearchRequest::_internal_set_vehicle_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vehicle_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_vehicle_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.vehicle_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_vehicle_name() {
  // @@protoc_insertion_point(field_release:apollo.data.SearchRequest.vehicle_name)
  if (!_internal_has_vehicle_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.vehicle_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vehicle_name_.IsDefault()) {
    _impl_.vehicle_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchRequest::set_allocated_vehicle_name(std::string* vehicle_name) {
  if (vehicle_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vehicle_name_.SetAllocated(vehicle_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vehicle_name_.IsDefault()) {
    _impl_.vehicle_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SearchRequest.vehicle_name)
}

// optional string map_name = 2;
inline bool SearchRequest::_internal_has_map_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchRequest::has_map_name() const {
  return _internal_has_map_name();
}
inline void SearchRequest::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SearchRequest::map_name() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_map_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.map_name)
}
inline std::string* SearchRequest::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.SearchRequest.map_name)
  return _s;
}
inline const std::string& SearchRequest::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void SearchRequest::_internal_set_map_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_map_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_map_name() {
  // @@protoc_insertion_point(field_release:apollo.data.SearchRequest.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.map_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SearchRequest::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SearchRequest.map_name)
}

// optional .apollo.data.Task.LoopType loop_type = 3;
inline bool SearchRequest::_internal_has_loop_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SearchRequest::has_loop_type() const {
  return _internal_has_loop_type();
}
inline void SearchRequest::clear_loop_type() {
  _impl_.loop_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::data::Task_LoopType SearchRequest::_internal_loop_type() const {
  return static_cast< ::apollo::data::Task_LoopType >(_impl_.loop_type_);
}
inline ::apollo::data::Task_LoopType SearchRequest::loop_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.loop_type)
  return _internal_loop_type();
}
inline void SearchRequest::_internal_set_loop_type(::apollo::data::Task_LoopType value) {
  assert(::apollo::data::Task_LoopType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.loop_type_ = value;
}
inline void SearchRequest::set_loop_type(::apollo::data::Task_LoopType value) {
  _internal_set_loop_type(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.loop_type)
}

// repeated string topics = 4;
inline int SearchRequest::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int SearchRequest::topics_size() const {
  return _internal_topics_size();
}
inline void SearchRequest::clear_topics() {
  _impl_.topics_.Clear();
}
inline std::string* SearchRequest::add_topics() {
  std::string* _s = _internal_add_topics();
  // @@protoc_insertion_point(field_add_mutable:apollo.data.SearchRequest.topics)
  return _s;
}
inline const std::string& SearchRequest::_internal_topics(int index) const {
  return _impl_.topics_.Get(index);
}
inline const std::string& SearchRequest::topics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.topics)
  return _internal_topics(index);
}
inline std::string* SearchRequest::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.SearchRequest.topics)
  return _impl_.topics_.Mutable(index);
}
inline void SearchRequest::set_topics(int index, const std::string& value) {
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::set_topics(int index, std::string&& value) {
  _impl_.topics_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::set_topics(int index, const char* value, size_t size) {
  _impl_.topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.SearchRequest.topics)
}
inline std::string* SearchRequest::_internal_add_topics() {
  return _impl_.topics_.Add();
}
inline void SearchRequest::add_topics(const std::string& value) {
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::add_topics(std::string&& value) {
  _impl_.topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.SearchRequest.topics)
}
inline void SearchRequest::add_topics(const char* value, size_t size) {
  _impl_.topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.SearchRequest.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::topics() const {
  // @@protoc_insertion_point(field_list:apollo.data.SearchRequest.topics)
  return _impl_.topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.SearchRequest.topics)
  return &_impl_.topics_;
}

// repeated string fields = 5;
inline int SearchRequest::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int SearchRequest::fields_size() const {
  return _internal_fields_size();
}
inline void SearchRequest::clear_fields() {
  _impl_.fields_.Clear();
}
inline std::string* SearchRequest::add_fields() {
  std::string* _s = _internal_add_fields();
  // @@protoc_insertion_point(field_add_mutable:apollo.data.SearchRequest.fields)
  return _s;
}
inline const std::string& SearchRequest::_internal_fields(int index) const {
  return _impl_.fields_.Get(index);
}
inline const std::string& SearchRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.fields)
  return _internal_fields(index);
}
inline std::string* SearchRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.SearchRequest.fields)
  return _impl_.fields_.Mutable(index);
}
inline void SearchRequest::set_fields(int index, const std::string& value) {
  _impl_.fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::set_fields(int index, std::string&& value) {
  _impl_.fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::set_fields(int index, const char* value, size_t size) {
  _impl_.fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.SearchRequest.fields)
}
inline std::string* SearchRequest::_internal_add_fields() {
  return _impl_.fields_.Add();
}
inline void SearchRequest::add_fields(const std::string& value) {
  _impl_.fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::add_fields(std::string&& value) {
  _impl_.fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.SearchRequest.fields)
}
inline void SearchRequest::add_fields(const char* value, size_t size) {
  _impl_.fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.SearchRequest.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchRequest::fields() const {
  // @@protoc_insertion_point(field_list:apollo.data.SearchRequest.fields)
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.SearchRequest.fields)
  return &_impl_.fields_;
}

// optional int32 count = 6 [default = 20];
inline bool SearchRequest::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SearchRequest::has_count() const {
  return _internal_has_count();
}
inline void SearchRequest::clear_count() {
  _impl_.count_ = 20;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t SearchRequest::_internal_count() const {
  return _impl_.count_;
}
inline int32_t SearchRequest::count() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.count)
  return _internal_count();
}
inline void SearchRequest::_internal_set_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.count_ = value;
}
inline void SearchRequest::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.count)
}

// optional int32 offset = 7;
inline bool SearchRequest::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SearchRequest::has_offset() const {
  return _internal_has_offset();
}
inline void SearchRequest::clear_offset() {
  _impl_.offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t SearchRequest::_internal_offset() const {
  return _impl_.offset_;
}
inline int32_t SearchRequest::offset() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchRequest.offset)
  return _internal_offset();
}
inline void SearchRequest::_internal_set_offset(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.offset_ = value;
}
inline void SearchRequest::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchRequest.offset)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .apollo.data.Task tasks = 1;
inline int SearchResponse::_internal_tasks_size() const {
  return _impl_.tasks_.size();
}
inline int SearchResponse::tasks_size() const {
  return _internal_tasks_size();
}
inline ::apollo::data::Task* SearchResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.SearchResponse.tasks)
  return _impl_.tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Task >*
SearchResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.SearchResponse.tasks)
  return &_impl_.tasks_;
}
inline const ::apollo::data::Task& SearchResponse::_internal_tasks(int index) const {
  return _impl_.tasks_.Get(index);
}
inline const ::apollo::data::Task& SearchResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchResponse.tasks)
  return _internal_tasks(index);
}
inline ::apollo::data::Task* SearchResponse::_internal_add_tasks() {
  return _impl_.tasks_.Add();
}
inline ::apollo::data::Task* SearchResponse::add_tasks() {
  ::apollo::data::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:apollo.data.SearchResponse.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Task >&
SearchResponse::tasks() const {
  // @@protoc_insertion_point(field_list:apollo.data.SearchResponse.tasks)
  return _impl_.tasks_;
}

// optional int32 total_count = 2;
inline bool SearchResponse::_internal_has_total_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchResponse::has_total_count() const {
  return _internal_has_total_count();
}
inline void SearchResponse::clear_total_count() {
  _impl_.total_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SearchResponse::_internal_total_count() const {
  return _impl_.total_count_;
}
inline int32_t SearchResponse::total_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.SearchResponse.total_count)
  return _internal_total_count();
}
inline void SearchResponse::_internal_set_total_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_count_ = value;
}
inline void SearchResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:apollo.data.SearchResponse.total_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2fwarehouse_5fquery_2eproto
