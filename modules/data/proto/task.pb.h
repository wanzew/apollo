// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2ftask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/data/proto/static_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2ftask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2fproto_2ftask_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2fproto_2ftask_2eproto;
namespace apollo {
namespace data {
class Disengagement;
struct DisengagementDefaultTypeInternal;
extern DisengagementDefaultTypeInternal _Disengagement_default_instance_;
class MapPoint;
struct MapPointDefaultTypeInternal;
extern MapPointDefaultTypeInternal _MapPoint_default_instance_;
class Rosbag;
struct RosbagDefaultTypeInternal;
extern RosbagDefaultTypeInternal _Rosbag_default_instance_;
class Rosbag_Topic;
struct Rosbag_TopicDefaultTypeInternal;
extern Rosbag_TopicDefaultTypeInternal _Rosbag_Topic_default_instance_;
class Rosbag_TopicsEntry_DoNotUse;
struct Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal;
extern Rosbag_TopicsEntry_DoNotUseDefaultTypeInternal _Rosbag_TopicsEntry_DoNotUse_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class Task_MileageEntry_DoNotUse;
struct Task_MileageEntry_DoNotUseDefaultTypeInternal;
extern Task_MileageEntry_DoNotUseDefaultTypeInternal _Task_MileageEntry_DoNotUse_default_instance_;
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::Disengagement* Arena::CreateMaybeMessage<::apollo::data::Disengagement>(Arena*);
template<> ::apollo::data::MapPoint* Arena::CreateMaybeMessage<::apollo::data::MapPoint>(Arena*);
template<> ::apollo::data::Rosbag* Arena::CreateMaybeMessage<::apollo::data::Rosbag>(Arena*);
template<> ::apollo::data::Rosbag_Topic* Arena::CreateMaybeMessage<::apollo::data::Rosbag_Topic>(Arena*);
template<> ::apollo::data::Rosbag_TopicsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::data::Rosbag_TopicsEntry_DoNotUse>(Arena*);
template<> ::apollo::data::Task* Arena::CreateMaybeMessage<::apollo::data::Task>(Arena*);
template<> ::apollo::data::Task_MileageEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::data::Task_MileageEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {

enum Task_LoopType : int {
  Task_LoopType_UNKNOWN = 0,
  Task_LoopType_OPEN_LOOP = 1,
  Task_LoopType_CLOSE_LOOP = 2
};
bool Task_LoopType_IsValid(int value);
constexpr Task_LoopType Task_LoopType_LoopType_MIN = Task_LoopType_UNKNOWN;
constexpr Task_LoopType Task_LoopType_LoopType_MAX = Task_LoopType_CLOSE_LOOP;
constexpr int Task_LoopType_LoopType_ARRAYSIZE = Task_LoopType_LoopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Task_LoopType_descriptor();
template<typename T>
inline const std::string& Task_LoopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Task_LoopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Task_LoopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Task_LoopType_descriptor(), enum_t_value);
}
inline bool Task_LoopType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Task_LoopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Task_LoopType>(
    Task_LoopType_descriptor(), name, value);
}
// ===================================================================

class MapPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.MapPoint) */ {
 public:
  inline MapPoint() : MapPoint(nullptr) {}
  ~MapPoint() override;
  explicit PROTOBUF_CONSTEXPR MapPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapPoint(const MapPoint& from);
  MapPoint(MapPoint&& from) noexcept
    : MapPoint() {
    *this = ::std::move(from);
  }

  inline MapPoint& operator=(const MapPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPoint& operator=(MapPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapPoint* internal_default_instance() {
    return reinterpret_cast<const MapPoint*>(
               &_MapPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapPoint& a, MapPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.MapPoint";
  }
  protected:
  explicit MapPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // optional double latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // optional double longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.MapPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double latitude_;
    double longitude_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class Rosbag_Topic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Rosbag.Topic) */ {
 public:
  inline Rosbag_Topic() : Rosbag_Topic(nullptr) {}
  ~Rosbag_Topic() override;
  explicit PROTOBUF_CONSTEXPR Rosbag_Topic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rosbag_Topic(const Rosbag_Topic& from);
  Rosbag_Topic(Rosbag_Topic&& from) noexcept
    : Rosbag_Topic() {
    *this = ::std::move(from);
  }

  inline Rosbag_Topic& operator=(const Rosbag_Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rosbag_Topic& operator=(Rosbag_Topic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rosbag_Topic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rosbag_Topic* internal_default_instance() {
    return reinterpret_cast<const Rosbag_Topic*>(
               &_Rosbag_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rosbag_Topic& a, Rosbag_Topic& b) {
    a.Swap(&b);
  }
  inline void Swap(Rosbag_Topic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rosbag_Topic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rosbag_Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rosbag_Topic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rosbag_Topic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rosbag_Topic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rosbag_Topic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Rosbag.Topic";
  }
  protected:
  explicit Rosbag_Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kFrequencyFieldNumber = 3,
    kMsgCountFieldNumber = 2,
  };
  // optional string msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  const std::string& msg_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_type();
  PROTOBUF_NODISCARD std::string* release_msg_type();
  void set_allocated_msg_type(std::string* msg_type);
  private:
  const std::string& _internal_msg_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type(const std::string& value);
  std::string* _internal_mutable_msg_type();
  public:

  // optional double frequency = 3;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  // optional int32 msg_count = 2;
  bool has_msg_count() const;
  private:
  bool _internal_has_msg_count() const;
  public:
  void clear_msg_count();
  int32_t msg_count() const;
  void set_msg_count(int32_t value);
  private:
  int32_t _internal_msg_count() const;
  void _internal_set_msg_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Rosbag.Topic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_;
    double frequency_;
    int32_t msg_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class Rosbag_TopicsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rosbag_TopicsEntry_DoNotUse, 
    std::string, ::apollo::data::Rosbag_Topic,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Rosbag_TopicsEntry_DoNotUse, 
    std::string, ::apollo::data::Rosbag_Topic,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Rosbag_TopicsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Rosbag_TopicsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Rosbag_TopicsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Rosbag_TopicsEntry_DoNotUse& other);
  static const Rosbag_TopicsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Rosbag_TopicsEntry_DoNotUse*>(&_Rosbag_TopicsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.data.Rosbag.TopicsEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};

// -------------------------------------------------------------------

class Rosbag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Rosbag) */ {
 public:
  inline Rosbag() : Rosbag(nullptr) {}
  ~Rosbag() override;
  explicit PROTOBUF_CONSTEXPR Rosbag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rosbag(const Rosbag& from);
  Rosbag(Rosbag&& from) noexcept
    : Rosbag() {
    *this = ::std::move(from);
  }

  inline Rosbag& operator=(const Rosbag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rosbag& operator=(Rosbag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rosbag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rosbag* internal_default_instance() {
    return reinterpret_cast<const Rosbag*>(
               &_Rosbag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rosbag& a, Rosbag& b) {
    a.Swap(&b);
  }
  inline void Swap(Rosbag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rosbag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rosbag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rosbag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rosbag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Rosbag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rosbag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Rosbag";
  }
  protected:
  explicit Rosbag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Rosbag_Topic Topic;

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 7,
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kVersionFieldNumber = 3,
    kMsgCountFieldNumber = 6,
    kEndTimeFieldNumber = 5,
  };
  // map<string, .apollo.data.Rosbag.Topic> topics = 7;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >&
      _internal_topics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >*
      _internal_mutable_topics();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >&
      topics() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >*
      mutable_topics();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // optional double start_time = 4;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // optional int32 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 msg_count = 6;
  bool has_msg_count() const;
  private:
  bool _internal_has_msg_count() const;
  public:
  void clear_msg_count();
  int32_t msg_count() const;
  void set_msg_count(int32_t value);
  private:
  int32_t _internal_msg_count() const;
  void _internal_set_msg_count(int32_t value);
  public:

  // optional double end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Rosbag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Rosbag_TopicsEntry_DoNotUse,
        std::string, ::apollo::data::Rosbag_Topic,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> topics_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t size_;
    double start_time_;
    int32_t version_;
    int32_t msg_count_;
    double end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class Disengagement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Disengagement) */ {
 public:
  inline Disengagement() : Disengagement(nullptr) {}
  ~Disengagement() override;
  explicit PROTOBUF_CONSTEXPR Disengagement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Disengagement(const Disengagement& from);
  Disengagement(Disengagement&& from) noexcept
    : Disengagement() {
    *this = ::std::move(from);
  }

  inline Disengagement& operator=(const Disengagement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disengagement& operator=(Disengagement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Disengagement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Disengagement* internal_default_instance() {
    return reinterpret_cast<const Disengagement*>(
               &_Disengagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Disengagement& a, Disengagement& b) {
    a.Swap(&b);
  }
  inline void Swap(Disengagement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disengagement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Disengagement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Disengagement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Disengagement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Disengagement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disengagement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Disengagement";
  }
  protected:
  explicit Disengagement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 3,
    kLocationFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // optional string desc = 3;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // optional .apollo.data.MapPoint location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::apollo::data::MapPoint& location() const;
  PROTOBUF_NODISCARD ::apollo::data::MapPoint* release_location();
  ::apollo::data::MapPoint* mutable_location();
  void set_allocated_location(::apollo::data::MapPoint* location);
  private:
  const ::apollo::data::MapPoint& _internal_location() const;
  ::apollo::data::MapPoint* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::apollo::data::MapPoint* location);
  ::apollo::data::MapPoint* unsafe_arena_release_location();

  // optional double time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Disengagement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    ::apollo::data::MapPoint* location_;
    double time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};
// -------------------------------------------------------------------

class Task_MileageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_MileageEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Task_MileageEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  Task_MileageEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Task_MileageEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Task_MileageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Task_MileageEntry_DoNotUse& other);
  static const Task_MileageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Task_MileageEntry_DoNotUse*>(&_Task_MileageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "apollo.data.Task.MileageEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};

// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit PROTOBUF_CONSTEXPR Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Task_LoopType LoopType;
  static constexpr LoopType UNKNOWN =
    Task_LoopType_UNKNOWN;
  static constexpr LoopType OPEN_LOOP =
    Task_LoopType_OPEN_LOOP;
  static constexpr LoopType CLOSE_LOOP =
    Task_LoopType_CLOSE_LOOP;
  static inline bool LoopType_IsValid(int value) {
    return Task_LoopType_IsValid(value);
  }
  static constexpr LoopType LoopType_MIN =
    Task_LoopType_LoopType_MIN;
  static constexpr LoopType LoopType_MAX =
    Task_LoopType_LoopType_MAX;
  static constexpr int LoopType_ARRAYSIZE =
    Task_LoopType_LoopType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LoopType_descriptor() {
    return Task_LoopType_descriptor();
  }
  template<typename T>
  static inline const std::string& LoopType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LoopType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LoopType_Name.");
    return Task_LoopType_Name(enum_t_value);
  }
  static inline bool LoopType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LoopType* value) {
    return Task_LoopType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBagsFieldNumber = 6,
    kTopicsFieldNumber = 7,
    kDisengagementsFieldNumber = 8,
    kMapPathFieldNumber = 9,
    kMileageFieldNumber = 10,
    kIdFieldNumber = 1,
    kInfoFieldNumber = 5,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kLoopTypeFieldNumber = 4,
  };
  // repeated .apollo.data.Rosbag bags = 6;
  int bags_size() const;
  private:
  int _internal_bags_size() const;
  public:
  void clear_bags();
  ::apollo::data::Rosbag* mutable_bags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Rosbag >*
      mutable_bags();
  private:
  const ::apollo::data::Rosbag& _internal_bags(int index) const;
  ::apollo::data::Rosbag* _internal_add_bags();
  public:
  const ::apollo::data::Rosbag& bags(int index) const;
  ::apollo::data::Rosbag* add_bags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Rosbag >&
      bags() const;

  // repeated string topics = 7;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const char* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();
  private:
  const std::string& _internal_topics(int index) const;
  std::string* _internal_add_topics();
  public:

  // repeated .apollo.data.Disengagement disengagements = 8;
  int disengagements_size() const;
  private:
  int _internal_disengagements_size() const;
  public:
  void clear_disengagements();
  ::apollo::data::Disengagement* mutable_disengagements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Disengagement >*
      mutable_disengagements();
  private:
  const ::apollo::data::Disengagement& _internal_disengagements(int index) const;
  ::apollo::data::Disengagement* _internal_add_disengagements();
  public:
  const ::apollo::data::Disengagement& disengagements(int index) const;
  ::apollo::data::Disengagement* add_disengagements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Disengagement >&
      disengagements() const;

  // repeated .apollo.data.MapPoint map_path = 9;
  int map_path_size() const;
  private:
  int _internal_map_path_size() const;
  public:
  void clear_map_path();
  ::apollo::data::MapPoint* mutable_map_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::MapPoint >*
      mutable_map_path();
  private:
  const ::apollo::data::MapPoint& _internal_map_path(int index) const;
  ::apollo::data::MapPoint* _internal_add_map_path();
  public:
  const ::apollo::data::MapPoint& map_path(int index) const;
  ::apollo::data::MapPoint* add_map_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::MapPoint >&
      map_path() const;

  // map<string, double> mileage = 10;
  int mileage_size() const;
  private:
  int _internal_mileage_size() const;
  public:
  void clear_mileage();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_mileage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_mileage();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      mileage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_mileage();

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.data.StaticInfo info = 5;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::apollo::data::StaticInfo& info() const;
  PROTOBUF_NODISCARD ::apollo::data::StaticInfo* release_info();
  ::apollo::data::StaticInfo* mutable_info();
  void set_allocated_info(::apollo::data::StaticInfo* info);
  private:
  const ::apollo::data::StaticInfo& _internal_info() const;
  ::apollo::data::StaticInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::apollo::data::StaticInfo* info);
  ::apollo::data::StaticInfo* unsafe_arena_release_info();

  // optional double start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // optional double end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // optional .apollo.data.Task.LoopType loop_type = 4;
  bool has_loop_type() const;
  private:
  bool _internal_has_loop_type() const;
  public:
  void clear_loop_type();
  ::apollo::data::Task_LoopType loop_type() const;
  void set_loop_type(::apollo::data::Task_LoopType value);
  private:
  ::apollo::data::Task_LoopType _internal_loop_type() const;
  void _internal_set_loop_type(::apollo::data::Task_LoopType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Rosbag > bags_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Disengagement > disengagements_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::MapPoint > map_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Task_MileageEntry_DoNotUse,
        std::string, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> mileage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::apollo::data::StaticInfo* info_;
    double start_time_;
    double end_time_;
    int loop_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapPoint

// optional double latitude = 1;
inline bool MapPoint::_internal_has_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapPoint::has_latitude() const {
  return _internal_has_latitude();
}
inline void MapPoint::clear_latitude() {
  _impl_.latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double MapPoint::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double MapPoint::latitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.latitude)
  return _internal_latitude();
}
inline void MapPoint::_internal_set_latitude(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.latitude_ = value;
}
inline void MapPoint::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.latitude)
}

// optional double longitude = 2;
inline bool MapPoint::_internal_has_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MapPoint::has_longitude() const {
  return _internal_has_longitude();
}
inline void MapPoint::clear_longitude() {
  _impl_.longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double MapPoint::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double MapPoint::longitude() const {
  // @@protoc_insertion_point(field_get:apollo.data.MapPoint.longitude)
  return _internal_longitude();
}
inline void MapPoint::_internal_set_longitude(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.longitude_ = value;
}
inline void MapPoint::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:apollo.data.MapPoint.longitude)
}

// -------------------------------------------------------------------

// Rosbag_Topic

// optional string msg_type = 1;
inline bool Rosbag_Topic::_internal_has_msg_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rosbag_Topic::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void Rosbag_Topic::clear_msg_type() {
  _impl_.msg_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Rosbag_Topic::msg_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_type)
  return _internal_msg_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Rosbag_Topic::set_msg_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.msg_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_type)
}
inline std::string* Rosbag_Topic::mutable_msg_type() {
  std::string* _s = _internal_mutable_msg_type();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.Topic.msg_type)
  return _s;
}
inline const std::string& Rosbag_Topic::_internal_msg_type() const {
  return _impl_.msg_type_.Get();
}
inline void Rosbag_Topic::_internal_set_msg_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.msg_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Rosbag_Topic::_internal_mutable_msg_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.msg_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Rosbag_Topic::release_msg_type() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.Topic.msg_type)
  if (!_internal_has_msg_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.msg_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_type_.IsDefault()) {
    _impl_.msg_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Rosbag_Topic::set_allocated_msg_type(std::string* msg_type) {
  if (msg_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_type_.SetAllocated(msg_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_type_.IsDefault()) {
    _impl_.msg_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.Topic.msg_type)
}

// optional int32 msg_count = 2;
inline bool Rosbag_Topic::_internal_has_msg_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rosbag_Topic::has_msg_count() const {
  return _internal_has_msg_count();
}
inline void Rosbag_Topic::clear_msg_count() {
  _impl_.msg_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Rosbag_Topic::_internal_msg_count() const {
  return _impl_.msg_count_;
}
inline int32_t Rosbag_Topic::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.msg_count)
  return _internal_msg_count();
}
inline void Rosbag_Topic::_internal_set_msg_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.msg_count_ = value;
}
inline void Rosbag_Topic::set_msg_count(int32_t value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.msg_count)
}

// optional double frequency = 3;
inline bool Rosbag_Topic::_internal_has_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rosbag_Topic::has_frequency() const {
  return _internal_has_frequency();
}
inline void Rosbag_Topic::clear_frequency() {
  _impl_.frequency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Rosbag_Topic::_internal_frequency() const {
  return _impl_.frequency_;
}
inline double Rosbag_Topic::frequency() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.Topic.frequency)
  return _internal_frequency();
}
inline void Rosbag_Topic::_internal_set_frequency(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frequency_ = value;
}
inline void Rosbag_Topic::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.Topic.frequency)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Rosbag

// optional string name = 1;
inline bool Rosbag::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rosbag::has_name() const {
  return _internal_has_name();
}
inline void Rosbag::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Rosbag::name() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Rosbag::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.name)
}
inline std::string* Rosbag::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.Rosbag.name)
  return _s;
}
inline const std::string& Rosbag::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Rosbag::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Rosbag::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Rosbag::release_name() {
  // @@protoc_insertion_point(field_release:apollo.data.Rosbag.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Rosbag::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Rosbag.name)
}

// optional uint64 size = 2;
inline bool Rosbag::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rosbag::has_size() const {
  return _internal_has_size();
}
inline void Rosbag::clear_size() {
  _impl_.size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t Rosbag::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t Rosbag::size() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.size)
  return _internal_size();
}
inline void Rosbag::_internal_set_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}
inline void Rosbag::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.size)
}

// optional int32 version = 3;
inline bool Rosbag::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Rosbag::has_version() const {
  return _internal_has_version();
}
inline void Rosbag::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t Rosbag::_internal_version() const {
  return _impl_.version_;
}
inline int32_t Rosbag::version() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.version)
  return _internal_version();
}
inline void Rosbag::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.version_ = value;
}
inline void Rosbag::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.version)
}

// optional double start_time = 4;
inline bool Rosbag::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rosbag::has_start_time() const {
  return _internal_has_start_time();
}
inline void Rosbag::clear_start_time() {
  _impl_.start_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Rosbag::_internal_start_time() const {
  return _impl_.start_time_;
}
inline double Rosbag::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.start_time)
  return _internal_start_time();
}
inline void Rosbag::_internal_set_start_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_time_ = value;
}
inline void Rosbag::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.start_time)
}

// optional double end_time = 5;
inline bool Rosbag::_internal_has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Rosbag::has_end_time() const {
  return _internal_has_end_time();
}
inline void Rosbag::clear_end_time() {
  _impl_.end_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Rosbag::_internal_end_time() const {
  return _impl_.end_time_;
}
inline double Rosbag::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.end_time)
  return _internal_end_time();
}
inline void Rosbag::_internal_set_end_time(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.end_time_ = value;
}
inline void Rosbag::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.end_time)
}

// optional int32 msg_count = 6;
inline bool Rosbag::_internal_has_msg_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Rosbag::has_msg_count() const {
  return _internal_has_msg_count();
}
inline void Rosbag::clear_msg_count() {
  _impl_.msg_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t Rosbag::_internal_msg_count() const {
  return _impl_.msg_count_;
}
inline int32_t Rosbag::msg_count() const {
  // @@protoc_insertion_point(field_get:apollo.data.Rosbag.msg_count)
  return _internal_msg_count();
}
inline void Rosbag::_internal_set_msg_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.msg_count_ = value;
}
inline void Rosbag::set_msg_count(int32_t value) {
  _internal_set_msg_count(value);
  // @@protoc_insertion_point(field_set:apollo.data.Rosbag.msg_count)
}

// map<string, .apollo.data.Rosbag.Topic> topics = 7;
inline int Rosbag::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int Rosbag::topics_size() const {
  return _internal_topics_size();
}
inline void Rosbag::clear_topics() {
  _impl_.topics_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >&
Rosbag::_internal_topics() const {
  return _impl_.topics_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >&
Rosbag::topics() const {
  // @@protoc_insertion_point(field_map:apollo.data.Rosbag.topics)
  return _internal_topics();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >*
Rosbag::_internal_mutable_topics() {
  return _impl_.topics_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::data::Rosbag_Topic >*
Rosbag::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Rosbag.topics)
  return _internal_mutable_topics();
}

// -------------------------------------------------------------------

// Disengagement

// optional double time = 1;
inline bool Disengagement::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Disengagement::has_time() const {
  return _internal_has_time();
}
inline void Disengagement::clear_time() {
  _impl_.time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Disengagement::_internal_time() const {
  return _impl_.time_;
}
inline double Disengagement::time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.time)
  return _internal_time();
}
inline void Disengagement::_internal_set_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_ = value;
}
inline void Disengagement::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.time)
}

// optional .apollo.data.MapPoint location = 2;
inline bool Disengagement::_internal_has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline bool Disengagement::has_location() const {
  return _internal_has_location();
}
inline void Disengagement::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::data::MapPoint& Disengagement::_internal_location() const {
  const ::apollo::data::MapPoint* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::MapPoint&>(
      ::apollo::data::_MapPoint_default_instance_);
}
inline const ::apollo::data::MapPoint& Disengagement::location() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.location)
  return _internal_location();
}
inline void Disengagement::unsafe_arena_set_allocated_location(
    ::apollo::data::MapPoint* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.Disengagement.location)
}
inline ::apollo::data::MapPoint* Disengagement::release_location() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::MapPoint* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::MapPoint* Disengagement::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.location)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::MapPoint* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::apollo::data::MapPoint* Disengagement::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::MapPoint>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::apollo::data::MapPoint* Disengagement::mutable_location() {
  ::apollo::data::MapPoint* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.location)
  return _msg;
}
inline void Disengagement::set_allocated_location(::apollo::data::MapPoint* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.location)
}

// optional string desc = 3;
inline bool Disengagement::_internal_has_desc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Disengagement::has_desc() const {
  return _internal_has_desc();
}
inline void Disengagement::clear_desc() {
  _impl_.desc_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Disengagement::desc() const {
  // @@protoc_insertion_point(field_get:apollo.data.Disengagement.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Disengagement::set_desc(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Disengagement.desc)
}
inline std::string* Disengagement::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:apollo.data.Disengagement.desc)
  return _s;
}
inline const std::string& Disengagement::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void Disengagement::_internal_set_desc(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Disengagement::_internal_mutable_desc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Disengagement::release_desc() {
  // @@protoc_insertion_point(field_release:apollo.data.Disengagement.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.desc_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Disengagement::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Disengagement.desc)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Task

// optional string id = 1;
inline bool Task::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Task::has_id() const {
  return _internal_has_id();
}
inline void Task::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Task.id)
}
inline std::string* Task::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.id)
}

// optional double start_time = 2;
inline bool Task::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Task::has_start_time() const {
  return _internal_has_start_time();
}
inline void Task::clear_start_time() {
  _impl_.start_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Task::_internal_start_time() const {
  return _impl_.start_time_;
}
inline double Task::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.start_time)
  return _internal_start_time();
}
inline void Task::_internal_set_start_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_time_ = value;
}
inline void Task::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.start_time)
}

// optional double end_time = 3;
inline bool Task::_internal_has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Task::has_end_time() const {
  return _internal_has_end_time();
}
inline void Task::clear_end_time() {
  _impl_.end_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Task::_internal_end_time() const {
  return _impl_.end_time_;
}
inline double Task::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.end_time)
  return _internal_end_time();
}
inline void Task::_internal_set_end_time(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_time_ = value;
}
inline void Task::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.end_time)
}

// optional .apollo.data.Task.LoopType loop_type = 4;
inline bool Task::_internal_has_loop_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Task::has_loop_type() const {
  return _internal_has_loop_type();
}
inline void Task::clear_loop_type() {
  _impl_.loop_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::data::Task_LoopType Task::_internal_loop_type() const {
  return static_cast< ::apollo::data::Task_LoopType >(_impl_.loop_type_);
}
inline ::apollo::data::Task_LoopType Task::loop_type() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.loop_type)
  return _internal_loop_type();
}
inline void Task::_internal_set_loop_type(::apollo::data::Task_LoopType value) {
  assert(::apollo::data::Task_LoopType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.loop_type_ = value;
}
inline void Task::set_loop_type(::apollo::data::Task_LoopType value) {
  _internal_set_loop_type(value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.loop_type)
}

// optional .apollo.data.StaticInfo info = 5;
inline bool Task::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool Task::has_info() const {
  return _internal_has_info();
}
inline const ::apollo::data::StaticInfo& Task::_internal_info() const {
  const ::apollo::data::StaticInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::StaticInfo&>(
      ::apollo::data::_StaticInfo_default_instance_);
}
inline const ::apollo::data::StaticInfo& Task::info() const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.info)
  return _internal_info();
}
inline void Task::unsafe_arena_set_allocated_info(
    ::apollo::data::StaticInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.Task.info)
}
inline ::apollo::data::StaticInfo* Task::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::StaticInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::StaticInfo* Task::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:apollo.data.Task.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::StaticInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::apollo::data::StaticInfo* Task::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::StaticInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::apollo::data::StaticInfo* Task::mutable_info() {
  ::apollo::data::StaticInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.info)
  return _msg;
}
inline void Task::set_allocated_info(::apollo::data::StaticInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Task.info)
}

// repeated .apollo.data.Rosbag bags = 6;
inline int Task::_internal_bags_size() const {
  return _impl_.bags_.size();
}
inline int Task::bags_size() const {
  return _internal_bags_size();
}
inline void Task::clear_bags() {
  _impl_.bags_.Clear();
}
inline ::apollo::data::Rosbag* Task::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.bags)
  return _impl_.bags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Rosbag >*
Task::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.bags)
  return &_impl_.bags_;
}
inline const ::apollo::data::Rosbag& Task::_internal_bags(int index) const {
  return _impl_.bags_.Get(index);
}
inline const ::apollo::data::Rosbag& Task::bags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.bags)
  return _internal_bags(index);
}
inline ::apollo::data::Rosbag* Task::_internal_add_bags() {
  return _impl_.bags_.Add();
}
inline ::apollo::data::Rosbag* Task::add_bags() {
  ::apollo::data::Rosbag* _add = _internal_add_bags();
  // @@protoc_insertion_point(field_add:apollo.data.Task.bags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Rosbag >&
Task::bags() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.bags)
  return _impl_.bags_;
}

// repeated string topics = 7;
inline int Task::_internal_topics_size() const {
  return _impl_.topics_.size();
}
inline int Task::topics_size() const {
  return _internal_topics_size();
}
inline void Task::clear_topics() {
  _impl_.topics_.Clear();
}
inline std::string* Task::add_topics() {
  std::string* _s = _internal_add_topics();
  // @@protoc_insertion_point(field_add_mutable:apollo.data.Task.topics)
  return _s;
}
inline const std::string& Task::_internal_topics(int index) const {
  return _impl_.topics_.Get(index);
}
inline const std::string& Task::topics(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.topics)
  return _internal_topics(index);
}
inline std::string* Task::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.topics)
  return _impl_.topics_.Mutable(index);
}
inline void Task::set_topics(int index, const std::string& value) {
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.data.Task.topics)
}
inline void Task::set_topics(int index, std::string&& value) {
  _impl_.topics_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.data.Task.topics)
}
inline void Task::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.data.Task.topics)
}
inline void Task::set_topics(int index, const char* value, size_t size) {
  _impl_.topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.data.Task.topics)
}
inline std::string* Task::_internal_add_topics() {
  return _impl_.topics_.Add();
}
inline void Task::add_topics(const std::string& value) {
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.data.Task.topics)
}
inline void Task::add_topics(std::string&& value) {
  _impl_.topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.data.Task.topics)
}
inline void Task::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.data.Task.topics)
}
inline void Task::add_topics(const char* value, size_t size) {
  _impl_.topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.data.Task.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::topics() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.topics)
  return _impl_.topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.topics)
  return &_impl_.topics_;
}

// repeated .apollo.data.Disengagement disengagements = 8;
inline int Task::_internal_disengagements_size() const {
  return _impl_.disengagements_.size();
}
inline int Task::disengagements_size() const {
  return _internal_disengagements_size();
}
inline void Task::clear_disengagements() {
  _impl_.disengagements_.Clear();
}
inline ::apollo::data::Disengagement* Task::mutable_disengagements(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.disengagements)
  return _impl_.disengagements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Disengagement >*
Task::mutable_disengagements() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.disengagements)
  return &_impl_.disengagements_;
}
inline const ::apollo::data::Disengagement& Task::_internal_disengagements(int index) const {
  return _impl_.disengagements_.Get(index);
}
inline const ::apollo::data::Disengagement& Task::disengagements(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.disengagements)
  return _internal_disengagements(index);
}
inline ::apollo::data::Disengagement* Task::_internal_add_disengagements() {
  return _impl_.disengagements_.Add();
}
inline ::apollo::data::Disengagement* Task::add_disengagements() {
  ::apollo::data::Disengagement* _add = _internal_add_disengagements();
  // @@protoc_insertion_point(field_add:apollo.data.Task.disengagements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Disengagement >&
Task::disengagements() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.disengagements)
  return _impl_.disengagements_;
}

// repeated .apollo.data.MapPoint map_path = 9;
inline int Task::_internal_map_path_size() const {
  return _impl_.map_path_.size();
}
inline int Task::map_path_size() const {
  return _internal_map_path_size();
}
inline void Task::clear_map_path() {
  _impl_.map_path_.Clear();
}
inline ::apollo::data::MapPoint* Task::mutable_map_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.Task.map_path)
  return _impl_.map_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::MapPoint >*
Task::mutable_map_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.Task.map_path)
  return &_impl_.map_path_;
}
inline const ::apollo::data::MapPoint& Task::_internal_map_path(int index) const {
  return _impl_.map_path_.Get(index);
}
inline const ::apollo::data::MapPoint& Task::map_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.Task.map_path)
  return _internal_map_path(index);
}
inline ::apollo::data::MapPoint* Task::_internal_add_map_path() {
  return _impl_.map_path_.Add();
}
inline ::apollo::data::MapPoint* Task::add_map_path() {
  ::apollo::data::MapPoint* _add = _internal_add_map_path();
  // @@protoc_insertion_point(field_add:apollo.data.Task.map_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::MapPoint >&
Task::map_path() const {
  // @@protoc_insertion_point(field_list:apollo.data.Task.map_path)
  return _impl_.map_path_;
}

// map<string, double> mileage = 10;
inline int Task::_internal_mileage_size() const {
  return _impl_.mileage_.size();
}
inline int Task::mileage_size() const {
  return _internal_mileage_size();
}
inline void Task::clear_mileage() {
  _impl_.mileage_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Task::_internal_mileage() const {
  return _impl_.mileage_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Task::mileage() const {
  // @@protoc_insertion_point(field_map:apollo.data.Task.mileage)
  return _internal_mileage();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Task::_internal_mutable_mileage() {
  return _impl_.mileage_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Task::mutable_mileage() {
  // @@protoc_insertion_point(field_mutable_map:apollo.data.Task.mileage)
  return _internal_mutable_mileage();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::data::Task_LoopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::data::Task_LoopType>() {
  return ::apollo::data::Task_LoopType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2ftask_2eproto
