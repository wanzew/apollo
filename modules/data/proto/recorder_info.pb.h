// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/proto/recorder_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2frecorder_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2frecorder_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2fproto_2frecorder_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
namespace apollo {
namespace data {
namespace recorder {
class Bag;
struct BagDefaultTypeInternal;
extern BagDefaultTypeInternal _Bag_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Disk;
struct DiskDefaultTypeInternal;
extern DiskDefaultTypeInternal _Disk_default_instance_;
class RecorderInfo;
struct RecorderInfoDefaultTypeInternal;
extern RecorderInfoDefaultTypeInternal _RecorderInfo_default_instance_;
class Resources;
struct ResourcesDefaultTypeInternal;
extern ResourcesDefaultTypeInternal _Resources_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace recorder
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::recorder::Bag* Arena::CreateMaybeMessage<::apollo::data::recorder::Bag>(Arena*);
template<> ::apollo::data::recorder::Data* Arena::CreateMaybeMessage<::apollo::data::recorder::Data>(Arena*);
template<> ::apollo::data::recorder::Disk* Arena::CreateMaybeMessage<::apollo::data::recorder::Disk>(Arena*);
template<> ::apollo::data::recorder::RecorderInfo* Arena::CreateMaybeMessage<::apollo::data::recorder::RecorderInfo>(Arena*);
template<> ::apollo::data::recorder::Resources* Arena::CreateMaybeMessage<::apollo::data::recorder::Resources>(Arena*);
template<> ::apollo::data::recorder::Task* Arena::CreateMaybeMessage<::apollo::data::recorder::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {
namespace recorder {

enum StatusType : int {
  DATA_RECORDER_INIT = 0,
  DATA_RECORDER_RUNNING = 1,
  DATA_RECORD_ENABLE = 2,
  DATA_SYNC_ENABLE = 4,
  DISK_SPACE_WARNNING = 8,
  DISK_SPACE_ALERT = 16,
  DELETING_OLD_DATA = 32,
  DATA_RECORDER_EXIT = 64,
  UNDEFINED = 128
};
bool StatusType_IsValid(int value);
constexpr StatusType StatusType_MIN = DATA_RECORDER_INIT;
constexpr StatusType StatusType_MAX = UNDEFINED;
constexpr int StatusType_ARRAYSIZE = StatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusType_descriptor();
template<typename T>
inline const std::string& StatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusType_descriptor(), enum_t_value);
}
inline bool StatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusType>(
    StatusType_descriptor(), name, value);
}
// ===================================================================

class RecorderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.RecorderInfo) */ {
 public:
  inline RecorderInfo() : RecorderInfo(nullptr) {}
  ~RecorderInfo() override;
  explicit PROTOBUF_CONSTEXPR RecorderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecorderInfo(const RecorderInfo& from);
  RecorderInfo(RecorderInfo&& from) noexcept
    : RecorderInfo() {
    *this = ::std::move(from);
  }

  inline RecorderInfo& operator=(const RecorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecorderInfo& operator=(RecorderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecorderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecorderInfo* internal_default_instance() {
    return reinterpret_cast<const RecorderInfo*>(
               &_RecorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecorderInfo& a, RecorderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RecorderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecorderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecorderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecorderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecorderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecorderInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecorderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.RecorderInfo";
  }
  protected:
  explicit RecorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 2,
    kWritingDiskFieldNumber = 3,
    kDataFieldNumber = 4,
    kResourcesFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // optional .apollo.data.recorder.Task task = 2;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::apollo::data::recorder::Task& task() const;
  PROTOBUF_NODISCARD ::apollo::data::recorder::Task* release_task();
  ::apollo::data::recorder::Task* mutable_task();
  void set_allocated_task(::apollo::data::recorder::Task* task);
  private:
  const ::apollo::data::recorder::Task& _internal_task() const;
  ::apollo::data::recorder::Task* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::apollo::data::recorder::Task* task);
  ::apollo::data::recorder::Task* unsafe_arena_release_task();

  // optional .apollo.data.recorder.Disk writing_disk = 3;
  bool has_writing_disk() const;
  private:
  bool _internal_has_writing_disk() const;
  public:
  void clear_writing_disk();
  const ::apollo::data::recorder::Disk& writing_disk() const;
  PROTOBUF_NODISCARD ::apollo::data::recorder::Disk* release_writing_disk();
  ::apollo::data::recorder::Disk* mutable_writing_disk();
  void set_allocated_writing_disk(::apollo::data::recorder::Disk* writing_disk);
  private:
  const ::apollo::data::recorder::Disk& _internal_writing_disk() const;
  ::apollo::data::recorder::Disk* _internal_mutable_writing_disk();
  public:
  void unsafe_arena_set_allocated_writing_disk(
      ::apollo::data::recorder::Disk* writing_disk);
  ::apollo::data::recorder::Disk* unsafe_arena_release_writing_disk();

  // optional .apollo.data.recorder.Data data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::apollo::data::recorder::Data& data() const;
  PROTOBUF_NODISCARD ::apollo::data::recorder::Data* release_data();
  ::apollo::data::recorder::Data* mutable_data();
  void set_allocated_data(::apollo::data::recorder::Data* data);
  private:
  const ::apollo::data::recorder::Data& _internal_data() const;
  ::apollo::data::recorder::Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::apollo::data::recorder::Data* data);
  ::apollo::data::recorder::Data* unsafe_arena_release_data();

  // optional .apollo.data.recorder.Resources resources = 5;
  bool has_resources() const;
  private:
  bool _internal_has_resources() const;
  public:
  void clear_resources();
  const ::apollo::data::recorder::Resources& resources() const;
  PROTOBUF_NODISCARD ::apollo::data::recorder::Resources* release_resources();
  ::apollo::data::recorder::Resources* mutable_resources();
  void set_allocated_resources(::apollo::data::recorder::Resources* resources);
  private:
  const ::apollo::data::recorder::Resources& _internal_resources() const;
  ::apollo::data::recorder::Resources* _internal_mutable_resources();
  public:
  void unsafe_arena_set_allocated_resources(
      ::apollo::data::recorder::Resources* resources);
  ::apollo::data::recorder::Resources* unsafe_arena_release_resources();

  // optional uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.RecorderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::data::recorder::Task* task_;
    ::apollo::data::recorder::Disk* writing_disk_;
    ::apollo::data::recorder::Data* data_;
    ::apollo::data::recorder::Resources* resources_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit PROTOBUF_CONSTEXPR Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDurationFieldNumber = 3,
    kSequenceFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional uint32 sequence = 2;
  bool has_sequence() const;
  private:
  bool _internal_has_sequence() const;
  public:
  void clear_sequence();
  uint32_t sequence() const;
  void set_sequence(uint32_t value);
  private:
  uint32_t _internal_sequence() const;
  void _internal_set_sequence(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double duration_;
    uint32_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Disk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.Disk) */ {
 public:
  inline Disk() : Disk(nullptr) {}
  ~Disk() override;
  explicit PROTOBUF_CONSTEXPR Disk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Disk(const Disk& from);
  Disk(Disk&& from) noexcept
    : Disk() {
    *this = ::std::move(from);
  }

  inline Disk& operator=(const Disk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Disk& operator=(Disk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Disk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Disk* internal_default_instance() {
    return reinterpret_cast<const Disk*>(
               &_Disk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Disk& a, Disk& b) {
    a.Swap(&b);
  }
  inline void Swap(Disk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Disk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Disk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Disk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Disk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Disk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Disk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.Disk";
  }
  protected:
  explicit Disk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kFsFieldNumber = 2,
    kMountFieldNumber = 7,
    kSlotFieldNumber = 8,
    kSizeFieldNumber = 3,
    kUsedFieldNumber = 4,
    kAvailFieldNumber = 5,
    kUsePercentFieldNumber = 6,
  };
  // optional string sn = 1;
  bool has_sn() const;
  private:
  bool _internal_has_sn() const;
  public:
  void clear_sn();
  const std::string& sn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sn();
  PROTOBUF_NODISCARD std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // optional string fs = 2;
  bool has_fs() const;
  private:
  bool _internal_has_fs() const;
  public:
  void clear_fs();
  const std::string& fs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fs();
  PROTOBUF_NODISCARD std::string* release_fs();
  void set_allocated_fs(std::string* fs);
  private:
  const std::string& _internal_fs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fs(const std::string& value);
  std::string* _internal_mutable_fs();
  public:

  // optional string mount = 7;
  bool has_mount() const;
  private:
  bool _internal_has_mount() const;
  public:
  void clear_mount();
  const std::string& mount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mount();
  PROTOBUF_NODISCARD std::string* release_mount();
  void set_allocated_mount(std::string* mount);
  private:
  const std::string& _internal_mount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mount(const std::string& value);
  std::string* _internal_mutable_mount();
  public:

  // optional string slot = 8;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const std::string& slot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slot();
  PROTOBUF_NODISCARD std::string* release_slot();
  void set_allocated_slot(std::string* slot);
  private:
  const std::string& _internal_slot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot(const std::string& value);
  std::string* _internal_mutable_slot();
  public:

  // optional double size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // optional double used = 4;
  bool has_used() const;
  private:
  bool _internal_has_used() const;
  public:
  void clear_used();
  double used() const;
  void set_used(double value);
  private:
  double _internal_used() const;
  void _internal_set_used(double value);
  public:

  // optional double avail = 5;
  bool has_avail() const;
  private:
  bool _internal_has_avail() const;
  public:
  void clear_avail();
  double avail() const;
  void set_avail(double value);
  private:
  double _internal_avail() const;
  void _internal_set_avail(double value);
  public:

  // optional double use_percent = 6;
  bool has_use_percent() const;
  private:
  bool _internal_has_use_percent() const;
  public:
  void clear_use_percent();
  double use_percent() const;
  void set_use_percent(double value);
  private:
  double _internal_use_percent() const;
  void _internal_set_use_percent(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.Disk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slot_;
    double size_;
    double used_;
    double avail_;
    double use_percent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Resources final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.Resources) */ {
 public:
  inline Resources() : Resources(nullptr) {}
  ~Resources() override;
  explicit PROTOBUF_CONSTEXPR Resources(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resources(const Resources& from);
  Resources(Resources&& from) noexcept
    : Resources() {
    *this = ::std::move(from);
  }

  inline Resources& operator=(const Resources& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resources& operator=(Resources&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resources& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resources* internal_default_instance() {
    return reinterpret_cast<const Resources*>(
               &_Resources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Resources& a, Resources& b) {
    a.Swap(&b);
  }
  inline void Swap(Resources* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resources>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Resources& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Resources& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resources* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.Resources";
  }
  protected:
  explicit Resources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisksFieldNumber = 1,
  };
  // repeated .apollo.data.recorder.Disk disks = 1;
  int disks_size() const;
  private:
  int _internal_disks_size() const;
  public:
  void clear_disks();
  ::apollo::data::recorder::Disk* mutable_disks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Disk >*
      mutable_disks();
  private:
  const ::apollo::data::recorder::Disk& _internal_disks(int index) const;
  ::apollo::data::recorder::Disk* _internal_add_disks();
  public:
  const ::apollo::data::recorder::Disk& disks(int index) const;
  ::apollo::data::recorder::Disk* add_disks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Disk >&
      disks() const;

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.Resources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Disk > disks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagsFieldNumber = 1,
  };
  // repeated .apollo.data.recorder.Bag bags = 1;
  int bags_size() const;
  private:
  int _internal_bags_size() const;
  public:
  void clear_bags();
  ::apollo::data::recorder::Bag* mutable_bags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Bag >*
      mutable_bags();
  private:
  const ::apollo::data::recorder::Bag& _internal_bags(int index) const;
  ::apollo::data::recorder::Bag* _internal_add_bags();
  public:
  const ::apollo::data::recorder::Bag& bags(int index) const;
  ::apollo::data::recorder::Bag* add_bags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Bag >&
      bags() const;

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Bag > bags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// -------------------------------------------------------------------

class Bag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.recorder.Bag) */ {
 public:
  inline Bag() : Bag(nullptr) {}
  ~Bag() override;
  explicit PROTOBUF_CONSTEXPR Bag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bag(const Bag& from);
  Bag(Bag&& from) noexcept
    : Bag() {
    *this = ::std::move(from);
  }

  inline Bag& operator=(const Bag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bag& operator=(Bag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bag& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bag* internal_default_instance() {
    return reinterpret_cast<const Bag*>(
               &_Bag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Bag& a, Bag& b) {
    a.Swap(&b);
  }
  inline void Swap(Bag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.recorder.Bag";
  }
  protected:
  explicit Bag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritingFilenameFieldNumber = 1,
  };
  // optional string writing_filename = 1;
  bool has_writing_filename() const;
  private:
  bool _internal_has_writing_filename() const;
  public:
  void clear_writing_filename();
  const std::string& writing_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_writing_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_writing_filename();
  PROTOBUF_NODISCARD std::string* release_writing_filename();
  void set_allocated_writing_filename(std::string* writing_filename);
  private:
  const std::string& _internal_writing_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_writing_filename(const std::string& value);
  std::string* _internal_mutable_writing_filename();
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.recorder.Bag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr writing_filename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2fproto_2frecorder_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecorderInfo

// optional uint32 status = 1;
inline bool RecorderInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RecorderInfo::has_status() const {
  return _internal_has_status();
}
inline void RecorderInfo::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t RecorderInfo::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t RecorderInfo::status() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.status)
  return _internal_status();
}
inline void RecorderInfo::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void RecorderInfo::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.RecorderInfo.status)
}

// optional .apollo.data.recorder.Task task = 2;
inline bool RecorderInfo::_internal_has_task() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.task_ != nullptr);
  return value;
}
inline bool RecorderInfo::has_task() const {
  return _internal_has_task();
}
inline void RecorderInfo::clear_task() {
  if (_impl_.task_ != nullptr) _impl_.task_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::data::recorder::Task& RecorderInfo::_internal_task() const {
  const ::apollo::data::recorder::Task* p = _impl_.task_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::recorder::Task&>(
      ::apollo::data::recorder::_Task_default_instance_);
}
inline const ::apollo::data::recorder::Task& RecorderInfo::task() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.task)
  return _internal_task();
}
inline void RecorderInfo::unsafe_arena_set_allocated_task(
    ::apollo::data::recorder::Task* task) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.task_);
  }
  _impl_.task_ = task;
  if (task) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.recorder.RecorderInfo.task)
}
inline ::apollo::data::recorder::Task* RecorderInfo::release_task() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::data::recorder::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::recorder::Task* RecorderInfo::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.task)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::data::recorder::Task* temp = _impl_.task_;
  _impl_.task_ = nullptr;
  return temp;
}
inline ::apollo::data::recorder::Task* RecorderInfo::_internal_mutable_task() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.task_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::recorder::Task>(GetArenaForAllocation());
    _impl_.task_ = p;
  }
  return _impl_.task_;
}
inline ::apollo::data::recorder::Task* RecorderInfo::mutable_task() {
  ::apollo::data::recorder::Task* _msg = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.task)
  return _msg;
}
inline void RecorderInfo::set_allocated_task(::apollo::data::recorder::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_ = task;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.task)
}

// optional .apollo.data.recorder.Disk writing_disk = 3;
inline bool RecorderInfo::_internal_has_writing_disk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.writing_disk_ != nullptr);
  return value;
}
inline bool RecorderInfo::has_writing_disk() const {
  return _internal_has_writing_disk();
}
inline void RecorderInfo::clear_writing_disk() {
  if (_impl_.writing_disk_ != nullptr) _impl_.writing_disk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::data::recorder::Disk& RecorderInfo::_internal_writing_disk() const {
  const ::apollo::data::recorder::Disk* p = _impl_.writing_disk_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::recorder::Disk&>(
      ::apollo::data::recorder::_Disk_default_instance_);
}
inline const ::apollo::data::recorder::Disk& RecorderInfo::writing_disk() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.writing_disk)
  return _internal_writing_disk();
}
inline void RecorderInfo::unsafe_arena_set_allocated_writing_disk(
    ::apollo::data::recorder::Disk* writing_disk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.writing_disk_);
  }
  _impl_.writing_disk_ = writing_disk;
  if (writing_disk) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.recorder.RecorderInfo.writing_disk)
}
inline ::apollo::data::recorder::Disk* RecorderInfo::release_writing_disk() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::recorder::Disk* temp = _impl_.writing_disk_;
  _impl_.writing_disk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::recorder::Disk* RecorderInfo::unsafe_arena_release_writing_disk() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.writing_disk)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::recorder::Disk* temp = _impl_.writing_disk_;
  _impl_.writing_disk_ = nullptr;
  return temp;
}
inline ::apollo::data::recorder::Disk* RecorderInfo::_internal_mutable_writing_disk() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.writing_disk_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::recorder::Disk>(GetArenaForAllocation());
    _impl_.writing_disk_ = p;
  }
  return _impl_.writing_disk_;
}
inline ::apollo::data::recorder::Disk* RecorderInfo::mutable_writing_disk() {
  ::apollo::data::recorder::Disk* _msg = _internal_mutable_writing_disk();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.writing_disk)
  return _msg;
}
inline void RecorderInfo::set_allocated_writing_disk(::apollo::data::recorder::Disk* writing_disk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.writing_disk_;
  }
  if (writing_disk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(writing_disk);
    if (message_arena != submessage_arena) {
      writing_disk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, writing_disk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.writing_disk_ = writing_disk;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.writing_disk)
}

// optional .apollo.data.recorder.Data data = 4;
inline bool RecorderInfo::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline bool RecorderInfo::has_data() const {
  return _internal_has_data();
}
inline void RecorderInfo::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::data::recorder::Data& RecorderInfo::_internal_data() const {
  const ::apollo::data::recorder::Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::recorder::Data&>(
      ::apollo::data::recorder::_Data_default_instance_);
}
inline const ::apollo::data::recorder::Data& RecorderInfo::data() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.data)
  return _internal_data();
}
inline void RecorderInfo::unsafe_arena_set_allocated_data(
    ::apollo::data::recorder::Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.recorder.RecorderInfo.data)
}
inline ::apollo::data::recorder::Data* RecorderInfo::release_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::data::recorder::Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::recorder::Data* RecorderInfo::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::data::recorder::Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::apollo::data::recorder::Data* RecorderInfo::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::recorder::Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::apollo::data::recorder::Data* RecorderInfo::mutable_data() {
  ::apollo::data::recorder::Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.data)
  return _msg;
}
inline void RecorderInfo::set_allocated_data(::apollo::data::recorder::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.data)
}

// optional .apollo.data.recorder.Resources resources = 5;
inline bool RecorderInfo::_internal_has_resources() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resources_ != nullptr);
  return value;
}
inline bool RecorderInfo::has_resources() const {
  return _internal_has_resources();
}
inline void RecorderInfo::clear_resources() {
  if (_impl_.resources_ != nullptr) _impl_.resources_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::data::recorder::Resources& RecorderInfo::_internal_resources() const {
  const ::apollo::data::recorder::Resources* p = _impl_.resources_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::recorder::Resources&>(
      ::apollo::data::recorder::_Resources_default_instance_);
}
inline const ::apollo::data::recorder::Resources& RecorderInfo::resources() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.RecorderInfo.resources)
  return _internal_resources();
}
inline void RecorderInfo::unsafe_arena_set_allocated_resources(
    ::apollo::data::recorder::Resources* resources) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resources_);
  }
  _impl_.resources_ = resources;
  if (resources) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.recorder.RecorderInfo.resources)
}
inline ::apollo::data::recorder::Resources* RecorderInfo::release_resources() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::data::recorder::Resources* temp = _impl_.resources_;
  _impl_.resources_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::recorder::Resources* RecorderInfo::unsafe_arena_release_resources() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.RecorderInfo.resources)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::data::recorder::Resources* temp = _impl_.resources_;
  _impl_.resources_ = nullptr;
  return temp;
}
inline ::apollo::data::recorder::Resources* RecorderInfo::_internal_mutable_resources() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.resources_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::recorder::Resources>(GetArenaForAllocation());
    _impl_.resources_ = p;
  }
  return _impl_.resources_;
}
inline ::apollo::data::recorder::Resources* RecorderInfo::mutable_resources() {
  ::apollo::data::recorder::Resources* _msg = _internal_mutable_resources();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.RecorderInfo.resources)
  return _msg;
}
inline void RecorderInfo::set_allocated_resources(::apollo::data::recorder::Resources* resources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resources_;
  }
  if (resources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resources);
    if (message_arena != submessage_arena) {
      resources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resources, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.resources_ = resources;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.RecorderInfo.resources)
}

// -------------------------------------------------------------------

// Task

// optional string id = 1;
inline bool Task::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Task::has_id() const {
  return _internal_has_id();
}
inline void Task::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.id)
}
inline std::string* Task::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Task.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Task.id)
}

// optional uint32 sequence = 2;
inline bool Task::_internal_has_sequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Task::has_sequence() const {
  return _internal_has_sequence();
}
inline void Task::clear_sequence() {
  _impl_.sequence_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Task::_internal_sequence() const {
  return _impl_.sequence_;
}
inline uint32_t Task::sequence() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.sequence)
  return _internal_sequence();
}
inline void Task::_internal_set_sequence(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_ = value;
}
inline void Task::set_sequence(uint32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.sequence)
}

// optional double duration = 3;
inline bool Task::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Task::has_duration() const {
  return _internal_has_duration();
}
inline void Task::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Task::_internal_duration() const {
  return _impl_.duration_;
}
inline double Task::duration() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Task.duration)
  return _internal_duration();
}
inline void Task::_internal_set_duration(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void Task::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Task.duration)
}

// -------------------------------------------------------------------

// Disk

// optional string sn = 1;
inline bool Disk::_internal_has_sn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Disk::has_sn() const {
  return _internal_has_sn();
}
inline void Disk::clear_sn() {
  _impl_.sn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Disk::sn() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.sn)
  return _internal_sn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Disk::set_sn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.sn)
}
inline std::string* Disk::mutable_sn() {
  std::string* _s = _internal_mutable_sn();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.sn)
  return _s;
}
inline const std::string& Disk::_internal_sn() const {
  return _impl_.sn_.Get();
}
inline void Disk::_internal_set_sn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sn_.Set(value, GetArenaForAllocation());
}
inline std::string* Disk::_internal_mutable_sn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sn_.Mutable(GetArenaForAllocation());
}
inline std::string* Disk::release_sn() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.sn)
  if (!_internal_has_sn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sn_.IsDefault()) {
    _impl_.sn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Disk::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sn_.SetAllocated(sn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sn_.IsDefault()) {
    _impl_.sn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.sn)
}

// optional string fs = 2;
inline bool Disk::_internal_has_fs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Disk::has_fs() const {
  return _internal_has_fs();
}
inline void Disk::clear_fs() {
  _impl_.fs_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Disk::fs() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.fs)
  return _internal_fs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Disk::set_fs(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.fs_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.fs)
}
inline std::string* Disk::mutable_fs() {
  std::string* _s = _internal_mutable_fs();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.fs)
  return _s;
}
inline const std::string& Disk::_internal_fs() const {
  return _impl_.fs_.Get();
}
inline void Disk::_internal_set_fs(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fs_.Set(value, GetArenaForAllocation());
}
inline std::string* Disk::_internal_mutable_fs() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fs_.Mutable(GetArenaForAllocation());
}
inline std::string* Disk::release_fs() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.fs)
  if (!_internal_has_fs()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.fs_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fs_.IsDefault()) {
    _impl_.fs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Disk::set_allocated_fs(std::string* fs) {
  if (fs != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fs_.SetAllocated(fs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fs_.IsDefault()) {
    _impl_.fs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.fs)
}

// optional double size = 3;
inline bool Disk::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Disk::has_size() const {
  return _internal_has_size();
}
inline void Disk::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Disk::_internal_size() const {
  return _impl_.size_;
}
inline double Disk::size() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.size)
  return _internal_size();
}
inline void Disk::_internal_set_size(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.size_ = value;
}
inline void Disk::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.size)
}

// optional double used = 4;
inline bool Disk::_internal_has_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Disk::has_used() const {
  return _internal_has_used();
}
inline void Disk::clear_used() {
  _impl_.used_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Disk::_internal_used() const {
  return _impl_.used_;
}
inline double Disk::used() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.used)
  return _internal_used();
}
inline void Disk::_internal_set_used(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.used_ = value;
}
inline void Disk::set_used(double value) {
  _internal_set_used(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.used)
}

// optional double avail = 5;
inline bool Disk::_internal_has_avail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Disk::has_avail() const {
  return _internal_has_avail();
}
inline void Disk::clear_avail() {
  _impl_.avail_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double Disk::_internal_avail() const {
  return _impl_.avail_;
}
inline double Disk::avail() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.avail)
  return _internal_avail();
}
inline void Disk::_internal_set_avail(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.avail_ = value;
}
inline void Disk::set_avail(double value) {
  _internal_set_avail(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.avail)
}

// optional double use_percent = 6;
inline bool Disk::_internal_has_use_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Disk::has_use_percent() const {
  return _internal_has_use_percent();
}
inline void Disk::clear_use_percent() {
  _impl_.use_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double Disk::_internal_use_percent() const {
  return _impl_.use_percent_;
}
inline double Disk::use_percent() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.use_percent)
  return _internal_use_percent();
}
inline void Disk::_internal_set_use_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.use_percent_ = value;
}
inline void Disk::set_use_percent(double value) {
  _internal_set_use_percent(value);
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.use_percent)
}

// optional string mount = 7;
inline bool Disk::_internal_has_mount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Disk::has_mount() const {
  return _internal_has_mount();
}
inline void Disk::clear_mount() {
  _impl_.mount_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Disk::mount() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.mount)
  return _internal_mount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Disk::set_mount(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.mount_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.mount)
}
inline std::string* Disk::mutable_mount() {
  std::string* _s = _internal_mutable_mount();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.mount)
  return _s;
}
inline const std::string& Disk::_internal_mount() const {
  return _impl_.mount_.Get();
}
inline void Disk::_internal_set_mount(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mount_.Set(value, GetArenaForAllocation());
}
inline std::string* Disk::_internal_mutable_mount() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.mount_.Mutable(GetArenaForAllocation());
}
inline std::string* Disk::release_mount() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.mount)
  if (!_internal_has_mount()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.mount_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mount_.IsDefault()) {
    _impl_.mount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Disk::set_allocated_mount(std::string* mount) {
  if (mount != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mount_.SetAllocated(mount, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mount_.IsDefault()) {
    _impl_.mount_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.mount)
}

// optional string slot = 8;
inline bool Disk::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Disk::has_slot() const {
  return _internal_has_slot();
}
inline void Disk::clear_slot() {
  _impl_.slot_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Disk::slot() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Disk.slot)
  return _internal_slot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Disk::set_slot(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.slot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Disk.slot)
}
inline std::string* Disk::mutable_slot() {
  std::string* _s = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Disk.slot)
  return _s;
}
inline const std::string& Disk::_internal_slot() const {
  return _impl_.slot_.Get();
}
inline void Disk::_internal_set_slot(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.slot_.Set(value, GetArenaForAllocation());
}
inline std::string* Disk::_internal_mutable_slot() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.slot_.Mutable(GetArenaForAllocation());
}
inline std::string* Disk::release_slot() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Disk.slot)
  if (!_internal_has_slot()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.slot_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.slot_.IsDefault()) {
    _impl_.slot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Disk::set_allocated_slot(std::string* slot) {
  if (slot != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.slot_.SetAllocated(slot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.slot_.IsDefault()) {
    _impl_.slot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Disk.slot)
}

// -------------------------------------------------------------------

// Resources

// repeated .apollo.data.recorder.Disk disks = 1;
inline int Resources::_internal_disks_size() const {
  return _impl_.disks_.size();
}
inline int Resources::disks_size() const {
  return _internal_disks_size();
}
inline void Resources::clear_disks() {
  _impl_.disks_.Clear();
}
inline ::apollo::data::recorder::Disk* Resources::mutable_disks(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Resources.disks)
  return _impl_.disks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Disk >*
Resources::mutable_disks() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.recorder.Resources.disks)
  return &_impl_.disks_;
}
inline const ::apollo::data::recorder::Disk& Resources::_internal_disks(int index) const {
  return _impl_.disks_.Get(index);
}
inline const ::apollo::data::recorder::Disk& Resources::disks(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Resources.disks)
  return _internal_disks(index);
}
inline ::apollo::data::recorder::Disk* Resources::_internal_add_disks() {
  return _impl_.disks_.Add();
}
inline ::apollo::data::recorder::Disk* Resources::add_disks() {
  ::apollo::data::recorder::Disk* _add = _internal_add_disks();
  // @@protoc_insertion_point(field_add:apollo.data.recorder.Resources.disks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Disk >&
Resources::disks() const {
  // @@protoc_insertion_point(field_list:apollo.data.recorder.Resources.disks)
  return _impl_.disks_;
}

// -------------------------------------------------------------------

// Data

// repeated .apollo.data.recorder.Bag bags = 1;
inline int Data::_internal_bags_size() const {
  return _impl_.bags_.size();
}
inline int Data::bags_size() const {
  return _internal_bags_size();
}
inline void Data::clear_bags() {
  _impl_.bags_.Clear();
}
inline ::apollo::data::recorder::Bag* Data::mutable_bags(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Data.bags)
  return _impl_.bags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Bag >*
Data::mutable_bags() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.recorder.Data.bags)
  return &_impl_.bags_;
}
inline const ::apollo::data::recorder::Bag& Data::_internal_bags(int index) const {
  return _impl_.bags_.Get(index);
}
inline const ::apollo::data::recorder::Bag& Data::bags(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Data.bags)
  return _internal_bags(index);
}
inline ::apollo::data::recorder::Bag* Data::_internal_add_bags() {
  return _impl_.bags_.Add();
}
inline ::apollo::data::recorder::Bag* Data::add_bags() {
  ::apollo::data::recorder::Bag* _add = _internal_add_bags();
  // @@protoc_insertion_point(field_add:apollo.data.recorder.Data.bags)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::recorder::Bag >&
Data::bags() const {
  // @@protoc_insertion_point(field_list:apollo.data.recorder.Data.bags)
  return _impl_.bags_;
}

// -------------------------------------------------------------------

// Bag

// optional string writing_filename = 1;
inline bool Bag::_internal_has_writing_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bag::has_writing_filename() const {
  return _internal_has_writing_filename();
}
inline void Bag::clear_writing_filename() {
  _impl_.writing_filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Bag::writing_filename() const {
  // @@protoc_insertion_point(field_get:apollo.data.recorder.Bag.writing_filename)
  return _internal_writing_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bag::set_writing_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.writing_filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.recorder.Bag.writing_filename)
}
inline std::string* Bag::mutable_writing_filename() {
  std::string* _s = _internal_mutable_writing_filename();
  // @@protoc_insertion_point(field_mutable:apollo.data.recorder.Bag.writing_filename)
  return _s;
}
inline const std::string& Bag::_internal_writing_filename() const {
  return _impl_.writing_filename_.Get();
}
inline void Bag::_internal_set_writing_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.writing_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* Bag::_internal_mutable_writing_filename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.writing_filename_.Mutable(GetArenaForAllocation());
}
inline std::string* Bag::release_writing_filename() {
  // @@protoc_insertion_point(field_release:apollo.data.recorder.Bag.writing_filename)
  if (!_internal_has_writing_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.writing_filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.writing_filename_.IsDefault()) {
    _impl_.writing_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Bag::set_allocated_writing_filename(std::string* writing_filename) {
  if (writing_filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.writing_filename_.SetAllocated(writing_filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.writing_filename_.IsDefault()) {
    _impl_.writing_filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.recorder.Bag.writing_filename)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recorder
}  // namespace data
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::data::recorder::StatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::data::recorder::StatusType>() {
  return ::apollo::data::recorder::StatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2fproto_2frecorder_5finfo_2eproto
