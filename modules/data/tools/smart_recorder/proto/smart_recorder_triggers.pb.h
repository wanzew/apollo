// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
namespace apollo {
namespace data {
class RecordSegmentSetting;
struct RecordSegmentSettingDefaultTypeInternal;
extern RecordSegmentSettingDefaultTypeInternal _RecordSegmentSetting_default_instance_;
class SmartRecordTrigger;
struct SmartRecordTriggerDefaultTypeInternal;
extern SmartRecordTriggerDefaultTypeInternal _SmartRecordTrigger_default_instance_;
class Trigger;
struct TriggerDefaultTypeInternal;
extern TriggerDefaultTypeInternal _Trigger_default_instance_;
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::data::RecordSegmentSetting* Arena::CreateMaybeMessage<::apollo::data::RecordSegmentSetting>(Arena*);
template<> ::apollo::data::SmartRecordTrigger* Arena::CreateMaybeMessage<::apollo::data::SmartRecordTrigger>(Arena*);
template<> ::apollo::data::Trigger* Arena::CreateMaybeMessage<::apollo::data::Trigger>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace data {

// ===================================================================

class RecordSegmentSetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.RecordSegmentSetting) */ {
 public:
  inline RecordSegmentSetting() : RecordSegmentSetting(nullptr) {}
  ~RecordSegmentSetting() override;
  explicit PROTOBUF_CONSTEXPR RecordSegmentSetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordSegmentSetting(const RecordSegmentSetting& from);
  RecordSegmentSetting(RecordSegmentSetting&& from) noexcept
    : RecordSegmentSetting() {
    *this = ::std::move(from);
  }

  inline RecordSegmentSetting& operator=(const RecordSegmentSetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordSegmentSetting& operator=(RecordSegmentSetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordSegmentSetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordSegmentSetting* internal_default_instance() {
    return reinterpret_cast<const RecordSegmentSetting*>(
               &_RecordSegmentSetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordSegmentSetting& a, RecordSegmentSetting& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordSegmentSetting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordSegmentSetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordSegmentSetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordSegmentSetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordSegmentSetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordSegmentSetting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordSegmentSetting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.RecordSegmentSetting";
  }
  protected:
  explicit RecordSegmentSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeSegmentFieldNumber = 1,
    kTimeSegmentFieldNumber = 2,
  };
  // optional int32 size_segment = 1 [default = 500];
  bool has_size_segment() const;
  private:
  bool _internal_has_size_segment() const;
  public:
  void clear_size_segment();
  int32_t size_segment() const;
  void set_size_segment(int32_t value);
  private:
  int32_t _internal_size_segment() const;
  void _internal_set_size_segment(int32_t value);
  public:

  // optional int32 time_segment = 2 [default = 180];
  bool has_time_segment() const;
  private:
  bool _internal_has_time_segment() const;
  public:
  void clear_time_segment();
  int32_t time_segment() const;
  void set_time_segment(int32_t value);
  private:
  int32_t _internal_time_segment() const;
  void _internal_set_time_segment(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.RecordSegmentSetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t size_segment_;
    int32_t time_segment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// -------------------------------------------------------------------

class Trigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.Trigger) */ {
 public:
  inline Trigger() : Trigger(nullptr) {}
  ~Trigger() override;
  explicit PROTOBUF_CONSTEXPR Trigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trigger(const Trigger& from);
  Trigger(Trigger&& from) noexcept
    : Trigger() {
    *this = ::std::move(from);
  }

  inline Trigger& operator=(const Trigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trigger& operator=(Trigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trigger* internal_default_instance() {
    return reinterpret_cast<const Trigger*>(
               &_Trigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trigger& a, Trigger& b) {
    a.Swap(&b);
  }
  inline void Swap(Trigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Trigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Trigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Trigger& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.Trigger";
  }
  protected:
  explicit Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggerNameFieldNumber = 1,
    kDescriptionFieldNumber = 5,
    kBackwardTimeFieldNumber = 3,
    kForwardTimeFieldNumber = 4,
    kEnabledFieldNumber = 2,
  };
  // optional string trigger_name = 1;
  bool has_trigger_name() const;
  private:
  bool _internal_has_trigger_name() const;
  public:
  void clear_trigger_name();
  const std::string& trigger_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_name();
  PROTOBUF_NODISCARD std::string* release_trigger_name();
  void set_allocated_trigger_name(std::string* trigger_name);
  private:
  const std::string& _internal_trigger_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_name(const std::string& value);
  std::string* _internal_mutable_trigger_name();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional double backward_time = 3;
  bool has_backward_time() const;
  private:
  bool _internal_has_backward_time() const;
  public:
  void clear_backward_time();
  double backward_time() const;
  void set_backward_time(double value);
  private:
  double _internal_backward_time() const;
  void _internal_set_backward_time(double value);
  public:

  // optional double forward_time = 4;
  bool has_forward_time() const;
  private:
  bool _internal_has_forward_time() const;
  public:
  void clear_forward_time();
  double forward_time() const;
  void set_forward_time(double value);
  private:
  double _internal_forward_time() const;
  void _internal_set_forward_time(double value);
  public:

  // optional bool enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.Trigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    double backward_time_;
    double forward_time_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// -------------------------------------------------------------------

class SmartRecordTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.data.SmartRecordTrigger) */ {
 public:
  inline SmartRecordTrigger() : SmartRecordTrigger(nullptr) {}
  ~SmartRecordTrigger() override;
  explicit PROTOBUF_CONSTEXPR SmartRecordTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SmartRecordTrigger(const SmartRecordTrigger& from);
  SmartRecordTrigger(SmartRecordTrigger&& from) noexcept
    : SmartRecordTrigger() {
    *this = ::std::move(from);
  }

  inline SmartRecordTrigger& operator=(const SmartRecordTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartRecordTrigger& operator=(SmartRecordTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SmartRecordTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const SmartRecordTrigger* internal_default_instance() {
    return reinterpret_cast<const SmartRecordTrigger*>(
               &_SmartRecordTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SmartRecordTrigger& a, SmartRecordTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartRecordTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SmartRecordTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SmartRecordTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SmartRecordTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SmartRecordTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SmartRecordTrigger& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartRecordTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.data.SmartRecordTrigger";
  }
  protected:
  explicit SmartRecordTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggersFieldNumber = 2,
    kTriggerLogFilePathFieldNumber = 5,
    kSegmentSettingFieldNumber = 1,
    kMaxBackwardTimeFieldNumber = 3,
    kMinRestoreChunkFieldNumber = 4,
  };
  // repeated .apollo.data.Trigger triggers = 2;
  int triggers_size() const;
  private:
  int _internal_triggers_size() const;
  public:
  void clear_triggers();
  ::apollo::data::Trigger* mutable_triggers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >*
      mutable_triggers();
  private:
  const ::apollo::data::Trigger& _internal_triggers(int index) const;
  ::apollo::data::Trigger* _internal_add_triggers();
  public:
  const ::apollo::data::Trigger& triggers(int index) const;
  ::apollo::data::Trigger* add_triggers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >&
      triggers() const;

  // optional string trigger_log_file_path = 5;
  bool has_trigger_log_file_path() const;
  private:
  bool _internal_has_trigger_log_file_path() const;
  public:
  void clear_trigger_log_file_path();
  const std::string& trigger_log_file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trigger_log_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trigger_log_file_path();
  PROTOBUF_NODISCARD std::string* release_trigger_log_file_path();
  void set_allocated_trigger_log_file_path(std::string* trigger_log_file_path);
  private:
  const std::string& _internal_trigger_log_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trigger_log_file_path(const std::string& value);
  std::string* _internal_mutable_trigger_log_file_path();
  public:

  // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
  bool has_segment_setting() const;
  private:
  bool _internal_has_segment_setting() const;
  public:
  void clear_segment_setting();
  const ::apollo::data::RecordSegmentSetting& segment_setting() const;
  PROTOBUF_NODISCARD ::apollo::data::RecordSegmentSetting* release_segment_setting();
  ::apollo::data::RecordSegmentSetting* mutable_segment_setting();
  void set_allocated_segment_setting(::apollo::data::RecordSegmentSetting* segment_setting);
  private:
  const ::apollo::data::RecordSegmentSetting& _internal_segment_setting() const;
  ::apollo::data::RecordSegmentSetting* _internal_mutable_segment_setting();
  public:
  void unsafe_arena_set_allocated_segment_setting(
      ::apollo::data::RecordSegmentSetting* segment_setting);
  ::apollo::data::RecordSegmentSetting* unsafe_arena_release_segment_setting();

  // optional double max_backward_time = 3 [default = 30];
  bool has_max_backward_time() const;
  private:
  bool _internal_has_max_backward_time() const;
  public:
  void clear_max_backward_time();
  double max_backward_time() const;
  void set_max_backward_time(double value);
  private:
  double _internal_max_backward_time() const;
  void _internal_set_max_backward_time(double value);
  public:

  // optional double min_restore_chunk = 4 [default = 5];
  bool has_min_restore_chunk() const;
  private:
  bool _internal_has_min_restore_chunk() const;
  public:
  void clear_min_restore_chunk();
  double min_restore_chunk() const;
  void set_min_restore_chunk(double value);
  private:
  double _internal_min_restore_chunk() const;
  void _internal_set_min_restore_chunk(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.data.SmartRecordTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger > triggers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigger_log_file_path_;
    ::apollo::data::RecordSegmentSetting* segment_setting_;
    double max_backward_time_;
    double min_restore_chunk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordSegmentSetting

// optional int32 size_segment = 1 [default = 500];
inline bool RecordSegmentSetting::_internal_has_size_segment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordSegmentSetting::has_size_segment() const {
  return _internal_has_size_segment();
}
inline void RecordSegmentSetting::clear_size_segment() {
  _impl_.size_segment_ = 500;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t RecordSegmentSetting::_internal_size_segment() const {
  return _impl_.size_segment_;
}
inline int32_t RecordSegmentSetting::size_segment() const {
  // @@protoc_insertion_point(field_get:apollo.data.RecordSegmentSetting.size_segment)
  return _internal_size_segment();
}
inline void RecordSegmentSetting::_internal_set_size_segment(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_segment_ = value;
}
inline void RecordSegmentSetting::set_size_segment(int32_t value) {
  _internal_set_size_segment(value);
  // @@protoc_insertion_point(field_set:apollo.data.RecordSegmentSetting.size_segment)
}

// optional int32 time_segment = 2 [default = 180];
inline bool RecordSegmentSetting::_internal_has_time_segment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordSegmentSetting::has_time_segment() const {
  return _internal_has_time_segment();
}
inline void RecordSegmentSetting::clear_time_segment() {
  _impl_.time_segment_ = 180;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RecordSegmentSetting::_internal_time_segment() const {
  return _impl_.time_segment_;
}
inline int32_t RecordSegmentSetting::time_segment() const {
  // @@protoc_insertion_point(field_get:apollo.data.RecordSegmentSetting.time_segment)
  return _internal_time_segment();
}
inline void RecordSegmentSetting::_internal_set_time_segment(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_segment_ = value;
}
inline void RecordSegmentSetting::set_time_segment(int32_t value) {
  _internal_set_time_segment(value);
  // @@protoc_insertion_point(field_set:apollo.data.RecordSegmentSetting.time_segment)
}

// -------------------------------------------------------------------

// Trigger

// optional string trigger_name = 1;
inline bool Trigger::_internal_has_trigger_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Trigger::has_trigger_name() const {
  return _internal_has_trigger_name();
}
inline void Trigger::clear_trigger_name() {
  _impl_.trigger_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Trigger::trigger_name() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.trigger_name)
  return _internal_trigger_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trigger::set_trigger_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.trigger_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.trigger_name)
}
inline std::string* Trigger::mutable_trigger_name() {
  std::string* _s = _internal_mutable_trigger_name();
  // @@protoc_insertion_point(field_mutable:apollo.data.Trigger.trigger_name)
  return _s;
}
inline const std::string& Trigger::_internal_trigger_name() const {
  return _impl_.trigger_name_.Get();
}
inline void Trigger::_internal_set_trigger_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trigger_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Trigger::_internal_mutable_trigger_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.trigger_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Trigger::release_trigger_name() {
  // @@protoc_insertion_point(field_release:apollo.data.Trigger.trigger_name)
  if (!_internal_has_trigger_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.trigger_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_name_.IsDefault()) {
    _impl_.trigger_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Trigger::set_allocated_trigger_name(std::string* trigger_name) {
  if (trigger_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trigger_name_.SetAllocated(trigger_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_name_.IsDefault()) {
    _impl_.trigger_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Trigger.trigger_name)
}

// optional bool enabled = 2;
inline bool Trigger::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Trigger::has_enabled() const {
  return _internal_has_enabled();
}
inline void Trigger::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Trigger::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool Trigger::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.enabled)
  return _internal_enabled();
}
inline void Trigger::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.enabled_ = value;
}
inline void Trigger::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.enabled)
}

// optional double backward_time = 3;
inline bool Trigger::_internal_has_backward_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Trigger::has_backward_time() const {
  return _internal_has_backward_time();
}
inline void Trigger::clear_backward_time() {
  _impl_.backward_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Trigger::_internal_backward_time() const {
  return _impl_.backward_time_;
}
inline double Trigger::backward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.backward_time)
  return _internal_backward_time();
}
inline void Trigger::_internal_set_backward_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.backward_time_ = value;
}
inline void Trigger::set_backward_time(double value) {
  _internal_set_backward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.backward_time)
}

// optional double forward_time = 4;
inline bool Trigger::_internal_has_forward_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Trigger::has_forward_time() const {
  return _internal_has_forward_time();
}
inline void Trigger::clear_forward_time() {
  _impl_.forward_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Trigger::_internal_forward_time() const {
  return _impl_.forward_time_;
}
inline double Trigger::forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.forward_time)
  return _internal_forward_time();
}
inline void Trigger::_internal_set_forward_time(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.forward_time_ = value;
}
inline void Trigger::set_forward_time(double value) {
  _internal_set_forward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.forward_time)
}

// optional string description = 5;
inline bool Trigger::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Trigger::has_description() const {
  return _internal_has_description();
}
inline void Trigger::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Trigger::description() const {
  // @@protoc_insertion_point(field_get:apollo.data.Trigger.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trigger::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.Trigger.description)
}
inline std::string* Trigger::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:apollo.data.Trigger.description)
  return _s;
}
inline const std::string& Trigger::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Trigger::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Trigger::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Trigger::release_description() {
  // @@protoc_insertion_point(field_release:apollo.data.Trigger.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Trigger::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.Trigger.description)
}

// -------------------------------------------------------------------

// SmartRecordTrigger

// optional .apollo.data.RecordSegmentSetting segment_setting = 1;
inline bool SmartRecordTrigger::_internal_has_segment_setting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.segment_setting_ != nullptr);
  return value;
}
inline bool SmartRecordTrigger::has_segment_setting() const {
  return _internal_has_segment_setting();
}
inline void SmartRecordTrigger::clear_segment_setting() {
  if (_impl_.segment_setting_ != nullptr) _impl_.segment_setting_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::data::RecordSegmentSetting& SmartRecordTrigger::_internal_segment_setting() const {
  const ::apollo::data::RecordSegmentSetting* p = _impl_.segment_setting_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::data::RecordSegmentSetting&>(
      ::apollo::data::_RecordSegmentSetting_default_instance_);
}
inline const ::apollo::data::RecordSegmentSetting& SmartRecordTrigger::segment_setting() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.segment_setting)
  return _internal_segment_setting();
}
inline void SmartRecordTrigger::unsafe_arena_set_allocated_segment_setting(
    ::apollo::data::RecordSegmentSetting* segment_setting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.segment_setting_);
  }
  _impl_.segment_setting_ = segment_setting;
  if (segment_setting) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.data.SmartRecordTrigger.segment_setting)
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::release_segment_setting() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::RecordSegmentSetting* temp = _impl_.segment_setting_;
  _impl_.segment_setting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::unsafe_arena_release_segment_setting() {
  // @@protoc_insertion_point(field_release:apollo.data.SmartRecordTrigger.segment_setting)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::data::RecordSegmentSetting* temp = _impl_.segment_setting_;
  _impl_.segment_setting_ = nullptr;
  return temp;
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::_internal_mutable_segment_setting() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.segment_setting_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::data::RecordSegmentSetting>(GetArenaForAllocation());
    _impl_.segment_setting_ = p;
  }
  return _impl_.segment_setting_;
}
inline ::apollo::data::RecordSegmentSetting* SmartRecordTrigger::mutable_segment_setting() {
  ::apollo::data::RecordSegmentSetting* _msg = _internal_mutable_segment_setting();
  // @@protoc_insertion_point(field_mutable:apollo.data.SmartRecordTrigger.segment_setting)
  return _msg;
}
inline void SmartRecordTrigger::set_allocated_segment_setting(::apollo::data::RecordSegmentSetting* segment_setting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.segment_setting_;
  }
  if (segment_setting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(segment_setting);
    if (message_arena != submessage_arena) {
      segment_setting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, segment_setting, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.segment_setting_ = segment_setting;
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SmartRecordTrigger.segment_setting)
}

// repeated .apollo.data.Trigger triggers = 2;
inline int SmartRecordTrigger::_internal_triggers_size() const {
  return _impl_.triggers_.size();
}
inline int SmartRecordTrigger::triggers_size() const {
  return _internal_triggers_size();
}
inline void SmartRecordTrigger::clear_triggers() {
  _impl_.triggers_.Clear();
}
inline ::apollo::data::Trigger* SmartRecordTrigger::mutable_triggers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.data.SmartRecordTrigger.triggers)
  return _impl_.triggers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >*
SmartRecordTrigger::mutable_triggers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.data.SmartRecordTrigger.triggers)
  return &_impl_.triggers_;
}
inline const ::apollo::data::Trigger& SmartRecordTrigger::_internal_triggers(int index) const {
  return _impl_.triggers_.Get(index);
}
inline const ::apollo::data::Trigger& SmartRecordTrigger::triggers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.triggers)
  return _internal_triggers(index);
}
inline ::apollo::data::Trigger* SmartRecordTrigger::_internal_add_triggers() {
  return _impl_.triggers_.Add();
}
inline ::apollo::data::Trigger* SmartRecordTrigger::add_triggers() {
  ::apollo::data::Trigger* _add = _internal_add_triggers();
  // @@protoc_insertion_point(field_add:apollo.data.SmartRecordTrigger.triggers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::data::Trigger >&
SmartRecordTrigger::triggers() const {
  // @@protoc_insertion_point(field_list:apollo.data.SmartRecordTrigger.triggers)
  return _impl_.triggers_;
}

// optional double max_backward_time = 3 [default = 30];
inline bool SmartRecordTrigger::_internal_has_max_backward_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SmartRecordTrigger::has_max_backward_time() const {
  return _internal_has_max_backward_time();
}
inline void SmartRecordTrigger::clear_max_backward_time() {
  _impl_.max_backward_time_ = 30;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SmartRecordTrigger::_internal_max_backward_time() const {
  return _impl_.max_backward_time_;
}
inline double SmartRecordTrigger::max_backward_time() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.max_backward_time)
  return _internal_max_backward_time();
}
inline void SmartRecordTrigger::_internal_set_max_backward_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_backward_time_ = value;
}
inline void SmartRecordTrigger::set_max_backward_time(double value) {
  _internal_set_max_backward_time(value);
  // @@protoc_insertion_point(field_set:apollo.data.SmartRecordTrigger.max_backward_time)
}

// optional double min_restore_chunk = 4 [default = 5];
inline bool SmartRecordTrigger::_internal_has_min_restore_chunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SmartRecordTrigger::has_min_restore_chunk() const {
  return _internal_has_min_restore_chunk();
}
inline void SmartRecordTrigger::clear_min_restore_chunk() {
  _impl_.min_restore_chunk_ = 5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SmartRecordTrigger::_internal_min_restore_chunk() const {
  return _impl_.min_restore_chunk_;
}
inline double SmartRecordTrigger::min_restore_chunk() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.min_restore_chunk)
  return _internal_min_restore_chunk();
}
inline void SmartRecordTrigger::_internal_set_min_restore_chunk(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_restore_chunk_ = value;
}
inline void SmartRecordTrigger::set_min_restore_chunk(double value) {
  _internal_set_min_restore_chunk(value);
  // @@protoc_insertion_point(field_set:apollo.data.SmartRecordTrigger.min_restore_chunk)
}

// optional string trigger_log_file_path = 5;
inline bool SmartRecordTrigger::_internal_has_trigger_log_file_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SmartRecordTrigger::has_trigger_log_file_path() const {
  return _internal_has_trigger_log_file_path();
}
inline void SmartRecordTrigger::clear_trigger_log_file_path() {
  _impl_.trigger_log_file_path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmartRecordTrigger::trigger_log_file_path() const {
  // @@protoc_insertion_point(field_get:apollo.data.SmartRecordTrigger.trigger_log_file_path)
  return _internal_trigger_log_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SmartRecordTrigger::set_trigger_log_file_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.trigger_log_file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.data.SmartRecordTrigger.trigger_log_file_path)
}
inline std::string* SmartRecordTrigger::mutable_trigger_log_file_path() {
  std::string* _s = _internal_mutable_trigger_log_file_path();
  // @@protoc_insertion_point(field_mutable:apollo.data.SmartRecordTrigger.trigger_log_file_path)
  return _s;
}
inline const std::string& SmartRecordTrigger::_internal_trigger_log_file_path() const {
  return _impl_.trigger_log_file_path_.Get();
}
inline void SmartRecordTrigger::_internal_set_trigger_log_file_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.trigger_log_file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SmartRecordTrigger::_internal_mutable_trigger_log_file_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.trigger_log_file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SmartRecordTrigger::release_trigger_log_file_path() {
  // @@protoc_insertion_point(field_release:apollo.data.SmartRecordTrigger.trigger_log_file_path)
  if (!_internal_has_trigger_log_file_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.trigger_log_file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_log_file_path_.IsDefault()) {
    _impl_.trigger_log_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SmartRecordTrigger::set_allocated_trigger_log_file_path(std::string* trigger_log_file_path) {
  if (trigger_log_file_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trigger_log_file_path_.SetAllocated(trigger_log_file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.trigger_log_file_path_.IsDefault()) {
    _impl_.trigger_log_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.data.SmartRecordTrigger.trigger_log_file_path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto
