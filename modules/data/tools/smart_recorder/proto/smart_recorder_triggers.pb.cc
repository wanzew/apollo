// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto

#include "modules/data/tools/smart_recorder/proto/smart_recorder_triggers.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace data {
PROTOBUF_CONSTEXPR RecordSegmentSetting::RecordSegmentSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.size_segment_)*/500
  , /*decltype(_impl_.time_segment_)*/180} {}
struct RecordSegmentSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordSegmentSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordSegmentSettingDefaultTypeInternal() {}
  union {
    RecordSegmentSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordSegmentSettingDefaultTypeInternal _RecordSegmentSetting_default_instance_;
PROTOBUF_CONSTEXPR Trigger::Trigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trigger_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.backward_time_)*/0
  , /*decltype(_impl_.forward_time_)*/0
  , /*decltype(_impl_.enabled_)*/false} {}
struct TriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TriggerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TriggerDefaultTypeInternal() {}
  union {
    Trigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TriggerDefaultTypeInternal _Trigger_default_instance_;
PROTOBUF_CONSTEXPR SmartRecordTrigger::SmartRecordTrigger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.triggers_)*/{}
  , /*decltype(_impl_.trigger_log_file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.segment_setting_)*/nullptr
  , /*decltype(_impl_.max_backward_time_)*/30
  , /*decltype(_impl_.min_restore_chunk_)*/5} {}
struct SmartRecordTriggerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmartRecordTriggerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmartRecordTriggerDefaultTypeInternal() {}
  union {
    SmartRecordTrigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmartRecordTriggerDefaultTypeInternal _SmartRecordTrigger_default_instance_;
}  // namespace data
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = nullptr;

const uint32_t TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _impl_.size_segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::RecordSegmentSetting, _impl_.time_segment_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_.trigger_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_.backward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_.forward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::Trigger, _impl_.description_),
  0,
  4,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_.segment_setting_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_.triggers_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_.max_backward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_.min_restore_chunk_),
  PROTOBUF_FIELD_OFFSET(::apollo::data::SmartRecordTrigger, _impl_.trigger_log_file_path_),
  1,
  ~0u,
  2,
  3,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::data::RecordSegmentSetting)},
  { 10, 21, -1, sizeof(::apollo::data::Trigger)},
  { 26, 37, -1, sizeof(::apollo::data::SmartRecordTrigger)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::data::_RecordSegmentSetting_default_instance_._instance,
  &::apollo::data::_Trigger_default_instance_._instance,
  &::apollo::data::_SmartRecordTrigger_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nEmodules/data/tools/smart_recorder/prot"
  "o/smart_recorder_triggers.proto\022\013apollo."
  "data\"L\n\024RecordSegmentSetting\022\031\n\014size_seg"
  "ment\030\001 \001(\005:\003500\022\031\n\014time_segment\030\002 \001(\005:\0031"
  "80\"r\n\007Trigger\022\024\n\014trigger_name\030\001 \001(\t\022\017\n\007e"
  "nabled\030\002 \001(\010\022\025\n\rbackward_time\030\003 \001(\001\022\024\n\014f"
  "orward_time\030\004 \001(\001\022\023\n\013description\030\005 \001(\t\"\324"
  "\001\n\022SmartRecordTrigger\022:\n\017segment_setting"
  "\030\001 \001(\0132!.apollo.data.RecordSegmentSettin"
  "g\022&\n\010triggers\030\002 \003(\0132\024.apollo.data.Trigge"
  "r\022\035\n\021max_backward_time\030\003 \001(\001:\00230\022\034\n\021min_"
  "restore_chunk\030\004 \001(\001:\0015\022\035\n\025trigger_log_fi"
  "le_path\030\005 \001(\t"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto = {
    false, false, 493, descriptor_table_protodef_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto,
    "modules/data/tools/smart_recorder/proto/smart_recorder_triggers.proto",
    &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto::offsets,
    file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto, file_level_enum_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto,
    file_level_service_descriptors_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_getter() {
  return &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto(&descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto);
namespace apollo {
namespace data {

// ===================================================================

class RecordSegmentSetting::_Internal {
 public:
  using HasBits = decltype(std::declval<RecordSegmentSetting>()._impl_._has_bits_);
  static void set_has_size_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RecordSegmentSetting::RecordSegmentSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.RecordSegmentSetting)
}
RecordSegmentSetting::RecordSegmentSetting(const RecordSegmentSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_segment_){}
    , decltype(_impl_.time_segment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.size_segment_, &from._impl_.size_segment_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_segment_) -
    reinterpret_cast<char*>(&_impl_.size_segment_)) + sizeof(_impl_.time_segment_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.RecordSegmentSetting)
}

inline void RecordSegmentSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.size_segment_){500}
    , decltype(_impl_.time_segment_){180}
  };
}

RecordSegmentSetting::~RecordSegmentSetting() {
  // @@protoc_insertion_point(destructor:apollo.data.RecordSegmentSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordSegmentSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordSegmentSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordSegmentSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.RecordSegmentSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.size_segment_ = 500;
    _impl_.time_segment_ = 180;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordSegmentSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 size_segment = 1 [default = 500];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_size_segment(&has_bits);
          _impl_.size_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 time_segment = 2 [default = 180];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_segment(&has_bits);
          _impl_.time_segment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordSegmentSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.RecordSegmentSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 size_segment = 1 [default = 500];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_size_segment(), target);
  }

  // optional int32 time_segment = 2 [default = 180];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_segment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.RecordSegmentSetting)
  return target;
}

size_t RecordSegmentSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.RecordSegmentSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 size_segment = 1 [default = 500];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size_segment());
    }

    // optional int32 time_segment = 2 [default = 180];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_segment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordSegmentSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecordSegmentSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordSegmentSetting::GetClassData() const { return &_class_data_; }

void RecordSegmentSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RecordSegmentSetting *>(to)->MergeFrom(
      static_cast<const RecordSegmentSetting &>(from));
}


void RecordSegmentSetting::MergeFrom(const RecordSegmentSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.RecordSegmentSetting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.size_segment_ = from._impl_.size_segment_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_segment_ = from._impl_.time_segment_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordSegmentSetting::CopyFrom(const RecordSegmentSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.RecordSegmentSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordSegmentSetting::IsInitialized() const {
  return true;
}

void RecordSegmentSetting::InternalSwap(RecordSegmentSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.size_segment_, other->_impl_.size_segment_);
  swap(_impl_.time_segment_, other->_impl_.time_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordSegmentSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_getter, &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once,
      file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[0]);
}

// ===================================================================

class Trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<Trigger>()._impl_._has_bits_);
  static void set_has_trigger_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_backward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_forward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Trigger::Trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.backward_time_){}
    , decltype(_impl_.forward_time_){}
    , decltype(_impl_.enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trigger_name()) {
    _impl_.trigger_name_.Set(from._internal_trigger_name(), 
      GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _impl_.description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.backward_time_, &from._impl_.backward_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.backward_time_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.Trigger)
}

inline void Trigger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trigger_name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.backward_time_){0}
    , decltype(_impl_.forward_time_){0}
    , decltype(_impl_.enabled_){false}
  };
  _impl_.trigger_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:apollo.data.Trigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Trigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trigger_name_.Destroy();
  _impl_.description_.Destroy();
}

void Trigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.Trigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.trigger_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.description_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.backward_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enabled_) -
        reinterpret_cast<char*>(&_impl_.backward_time_)) + sizeof(_impl_.enabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trigger_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trigger_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Trigger.trigger_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double backward_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_backward_time(&has_bits);
          _impl_.backward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double forward_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_forward_time(&has_bits);
          _impl_.forward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.Trigger.description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.Trigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string trigger_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trigger_name().data(), static_cast<int>(this->_internal_trigger_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Trigger.trigger_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trigger_name(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // optional double backward_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_backward_time(), target);
  }

  // optional double forward_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_forward_time(), target);
  }

  // optional string description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.Trigger.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.Trigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string trigger_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trigger_name());
    }

    // optional string description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional double backward_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double forward_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trigger::GetClassData() const { return &_class_data_; }

void Trigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trigger *>(to)->MergeFrom(
      static_cast<const Trigger &>(from));
}


void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trigger_name(from._internal_trigger_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.backward_time_ = from._impl_.backward_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.forward_time_ = from._impl_.forward_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_name_, lhs_arena,
      &other->_impl_.trigger_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trigger, _impl_.enabled_)
      + sizeof(Trigger::_impl_.enabled_)
      - PROTOBUF_FIELD_OFFSET(Trigger, _impl_.backward_time_)>(
          reinterpret_cast<char*>(&_impl_.backward_time_),
          reinterpret_cast<char*>(&other->_impl_.backward_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_getter, &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once,
      file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[1]);
}

// ===================================================================

class SmartRecordTrigger::_Internal {
 public:
  using HasBits = decltype(std::declval<SmartRecordTrigger>()._impl_._has_bits_);
  static const ::apollo::data::RecordSegmentSetting& segment_setting(const SmartRecordTrigger* msg);
  static void set_has_segment_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_backward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_restore_chunk(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trigger_log_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::data::RecordSegmentSetting&
SmartRecordTrigger::_Internal::segment_setting(const SmartRecordTrigger* msg) {
  return *msg->_impl_.segment_setting_;
}
SmartRecordTrigger::SmartRecordTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.data.SmartRecordTrigger)
}
SmartRecordTrigger::SmartRecordTrigger(const SmartRecordTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){from._impl_.triggers_}
    , decltype(_impl_.trigger_log_file_path_){}
    , decltype(_impl_.segment_setting_){nullptr}
    , decltype(_impl_.max_backward_time_){}
    , decltype(_impl_.min_restore_chunk_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trigger_log_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_log_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trigger_log_file_path()) {
    _impl_.trigger_log_file_path_.Set(from._internal_trigger_log_file_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_segment_setting()) {
    _impl_.segment_setting_ = new ::apollo::data::RecordSegmentSetting(*from._impl_.segment_setting_);
  }
  ::memcpy(&_impl_.max_backward_time_, &from._impl_.max_backward_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_restore_chunk_) -
    reinterpret_cast<char*>(&_impl_.max_backward_time_)) + sizeof(_impl_.min_restore_chunk_));
  // @@protoc_insertion_point(copy_constructor:apollo.data.SmartRecordTrigger)
}

inline void SmartRecordTrigger::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.triggers_){arena}
    , decltype(_impl_.trigger_log_file_path_){}
    , decltype(_impl_.segment_setting_){nullptr}
    , decltype(_impl_.max_backward_time_){30}
    , decltype(_impl_.min_restore_chunk_){5}
  };
  _impl_.trigger_log_file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trigger_log_file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SmartRecordTrigger::~SmartRecordTrigger() {
  // @@protoc_insertion_point(destructor:apollo.data.SmartRecordTrigger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmartRecordTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.triggers_.~RepeatedPtrField();
  _impl_.trigger_log_file_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.segment_setting_;
}

void SmartRecordTrigger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SmartRecordTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.data.SmartRecordTrigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.triggers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.trigger_log_file_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.segment_setting_ != nullptr);
      _impl_.segment_setting_->Clear();
    }
    _impl_.max_backward_time_ = 30;
    _impl_.min_restore_chunk_ = 5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SmartRecordTrigger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_segment_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.data.Trigger triggers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triggers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double max_backward_time = 3 [default = 30];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_backward_time(&has_bits);
          _impl_.max_backward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_restore_chunk = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_min_restore_chunk(&has_bits);
          _impl_.min_restore_chunk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string trigger_log_file_path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_trigger_log_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.data.SmartRecordTrigger.trigger_log_file_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmartRecordTrigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.data.SmartRecordTrigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::segment_setting(this),
        _Internal::segment_setting(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.data.Trigger triggers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triggers_size()); i < n; i++) {
    const auto& repfield = this->_internal_triggers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double max_backward_time = 3 [default = 30];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_backward_time(), target);
  }

  // optional double min_restore_chunk = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_restore_chunk(), target);
  }

  // optional string trigger_log_file_path = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trigger_log_file_path().data(), static_cast<int>(this->_internal_trigger_log_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.data.SmartRecordTrigger.trigger_log_file_path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_trigger_log_file_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.data.SmartRecordTrigger)
  return target;
}

size_t SmartRecordTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.data.SmartRecordTrigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.data.Trigger triggers = 2;
  total_size += 1UL * this->_internal_triggers_size();
  for (const auto& msg : this->_impl_.triggers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string trigger_log_file_path = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trigger_log_file_path());
    }

    // optional .apollo.data.RecordSegmentSetting segment_setting = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.segment_setting_);
    }

    // optional double max_backward_time = 3 [default = 30];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_restore_chunk = 4 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SmartRecordTrigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SmartRecordTrigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SmartRecordTrigger::GetClassData() const { return &_class_data_; }

void SmartRecordTrigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SmartRecordTrigger *>(to)->MergeFrom(
      static_cast<const SmartRecordTrigger &>(from));
}


void SmartRecordTrigger::MergeFrom(const SmartRecordTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.data.SmartRecordTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.triggers_.MergeFrom(from._impl_.triggers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trigger_log_file_path(from._internal_trigger_log_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_segment_setting()->::apollo::data::RecordSegmentSetting::MergeFrom(from._internal_segment_setting());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_backward_time_ = from._impl_.max_backward_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.min_restore_chunk_ = from._impl_.min_restore_chunk_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SmartRecordTrigger::CopyFrom(const SmartRecordTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.data.SmartRecordTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartRecordTrigger::IsInitialized() const {
  return true;
}

void SmartRecordTrigger::InternalSwap(SmartRecordTrigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.triggers_.InternalSwap(&other->_impl_.triggers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trigger_log_file_path_, lhs_arena,
      &other->_impl_.trigger_log_file_path_, rhs_arena
  );
  swap(_impl_.segment_setting_, other->_impl_.segment_setting_);
  swap(_impl_.max_backward_time_, other->_impl_.max_backward_time_);
  swap(_impl_.min_restore_chunk_, other->_impl_.min_restore_chunk_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SmartRecordTrigger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_getter, &descriptor_table_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto_once,
      file_level_metadata_modules_2fdata_2ftools_2fsmart_5frecorder_2fproto_2fsmart_5frecorder_5ftriggers_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::data::RecordSegmentSetting*
Arena::CreateMaybeMessage< ::apollo::data::RecordSegmentSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::RecordSegmentSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::Trigger*
Arena::CreateMaybeMessage< ::apollo::data::Trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::data::SmartRecordTrigger*
Arena::CreateMaybeMessage< ::apollo::data::SmartRecordTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::data::SmartRecordTrigger >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
