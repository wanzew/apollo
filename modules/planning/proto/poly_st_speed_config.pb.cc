// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/poly_st_speed_config.proto

#include "modules/planning/proto/poly_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR PolyStSpeedConfig::PolyStSpeedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.st_boundary_config_)*/nullptr
  , /*decltype(_impl_.total_path_length_)*/0
  , /*decltype(_impl_.total_time_)*/0
  , /*decltype(_impl_.preferred_accel_)*/0
  , /*decltype(_impl_.preferred_decel_)*/0
  , /*decltype(_impl_.max_accel_)*/0
  , /*decltype(_impl_.min_decel_)*/0
  , /*decltype(_impl_.speed_limit_buffer_)*/0
  , /*decltype(_impl_.speed_weight_)*/0
  , /*decltype(_impl_.jerk_weight_)*/0
  , /*decltype(_impl_.obstacle_weight_)*/0
  , /*decltype(_impl_.unblocking_obstacle_cost_)*/0} {}
struct PolyStSpeedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolyStSpeedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolyStSpeedConfigDefaultTypeInternal() {}
  union {
    PolyStSpeedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolyStSpeedConfigDefaultTypeInternal _PolyStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.total_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.total_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.preferred_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.preferred_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.max_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.min_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.speed_limit_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.speed_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.obstacle_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.unblocking_obstacle_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PolyStSpeedConfig, _impl_.st_boundary_config_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::apollo::planning::PolyStSpeedConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_PolyStSpeedConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1modules/planning/proto/poly_st_speed_c"
  "onfig.proto\022\017apollo.planning\032/modules/pl"
  "anning/proto/st_boundary_config.proto\"\333\002"
  "\n\021PolyStSpeedConfig\022\031\n\021total_path_length"
  "\030\001 \001(\001\022\022\n\ntotal_time\030\002 \001(\001\022\027\n\017preferred_"
  "accel\030\003 \001(\001\022\027\n\017preferred_decel\030\004 \001(\001\022\021\n\t"
  "max_accel\030\005 \001(\001\022\021\n\tmin_decel\030\006 \001(\001\022\032\n\022sp"
  "eed_limit_buffer\030\007 \001(\001\022\024\n\014speed_weight\030\010"
  " \001(\001\022\023\n\013jerk_weight\030\t \001(\001\022\027\n\017obstacle_we"
  "ight\030\n \001(\001\022 \n\030unblocking_obstacle_cost\030\013"
  " \001(\001\022=\n\022st_boundary_config\030\014 \001(\0132!.apoll"
  "o.planning.StBoundaryConfig"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto = {
    false, false, 467, descriptor_table_protodef_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto,
    "modules/planning/proto/poly_st_speed_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class PolyStSpeedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PolyStSpeedConfig>()._impl_._has_bits_);
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preferred_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferred_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_limit_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_speed_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_obstacle_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_unblocking_obstacle_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::planning::StBoundaryConfig& st_boundary_config(const PolyStSpeedConfig* msg);
  static void set_has_st_boundary_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::StBoundaryConfig&
PolyStSpeedConfig::_Internal::st_boundary_config(const PolyStSpeedConfig* msg) {
  return *msg->_impl_.st_boundary_config_;
}
void PolyStSpeedConfig::clear_st_boundary_config() {
  if (_impl_.st_boundary_config_ != nullptr) _impl_.st_boundary_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PolyStSpeedConfig::PolyStSpeedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PolyStSpeedConfig)
}
PolyStSpeedConfig::PolyStSpeedConfig(const PolyStSpeedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.total_path_length_){}
    , decltype(_impl_.total_time_){}
    , decltype(_impl_.preferred_accel_){}
    , decltype(_impl_.preferred_decel_){}
    , decltype(_impl_.max_accel_){}
    , decltype(_impl_.min_decel_){}
    , decltype(_impl_.speed_limit_buffer_){}
    , decltype(_impl_.speed_weight_){}
    , decltype(_impl_.jerk_weight_){}
    , decltype(_impl_.obstacle_weight_){}
    , decltype(_impl_.unblocking_obstacle_cost_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_st_boundary_config()) {
    _impl_.st_boundary_config_ = new ::apollo::planning::StBoundaryConfig(*from._impl_.st_boundary_config_);
  }
  ::memcpy(&_impl_.total_path_length_, &from._impl_.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unblocking_obstacle_cost_) -
    reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.unblocking_obstacle_cost_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PolyStSpeedConfig)
}

inline void PolyStSpeedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.total_path_length_){0}
    , decltype(_impl_.total_time_){0}
    , decltype(_impl_.preferred_accel_){0}
    , decltype(_impl_.preferred_decel_){0}
    , decltype(_impl_.max_accel_){0}
    , decltype(_impl_.min_decel_){0}
    , decltype(_impl_.speed_limit_buffer_){0}
    , decltype(_impl_.speed_weight_){0}
    , decltype(_impl_.jerk_weight_){0}
    , decltype(_impl_.obstacle_weight_){0}
    , decltype(_impl_.unblocking_obstacle_cost_){0}
  };
}

PolyStSpeedConfig::~PolyStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PolyStSpeedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolyStSpeedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.st_boundary_config_;
}

void PolyStSpeedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolyStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PolyStSpeedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.st_boundary_config_ != nullptr);
    _impl_.st_boundary_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_buffer_) -
        reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.speed_limit_buffer_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.unblocking_obstacle_cost_) -
        reinterpret_cast<char*>(&_impl_.speed_weight_)) + sizeof(_impl_.unblocking_obstacle_cost_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyStSpeedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_path_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_total_path_length(&has_bits);
          _impl_.total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double total_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_time(&has_bits);
          _impl_.total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_accel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_preferred_accel(&has_bits);
          _impl_.preferred_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_decel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_preferred_decel(&has_bits);
          _impl_.preferred_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_accel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_max_accel(&has_bits);
          _impl_.max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_decel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_min_decel(&has_bits);
          _impl_.min_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit_buffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_speed_limit_buffer(&has_bits);
          _impl_.speed_limit_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_speed_weight(&has_bits);
          _impl_.speed_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_jerk_weight(&has_bits);
          _impl_.jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_obstacle_weight(&has_bits);
          _impl_.obstacle_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double unblocking_obstacle_cost = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_unblocking_obstacle_cost(&has_bits);
          _impl_.unblocking_obstacle_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_boundary_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyStSpeedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PolyStSpeedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_path_length = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_path_length(), target);
  }

  // optional double total_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_time(), target);
  }

  // optional double preferred_accel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_preferred_accel(), target);
  }

  // optional double preferred_decel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_preferred_decel(), target);
  }

  // optional double max_accel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_accel(), target);
  }

  // optional double min_decel = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_min_decel(), target);
  }

  // optional double speed_limit_buffer = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_limit_buffer(), target);
  }

  // optional double speed_weight = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_speed_weight(), target);
  }

  // optional double jerk_weight = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_jerk_weight(), target);
  }

  // optional double obstacle_weight = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_obstacle_weight(), target);
  }

  // optional double unblocking_obstacle_cost = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_unblocking_obstacle_cost(), target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::st_boundary_config(this),
        _Internal::st_boundary_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PolyStSpeedConfig)
  return target;
}

size_t PolyStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PolyStSpeedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.st_boundary_config_);
    }

    // optional double total_path_length = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double preferred_accel = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double max_accel = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double min_decel = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit_buffer = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double speed_weight = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double jerk_weight = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double unblocking_obstacle_cost = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyStSpeedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolyStSpeedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyStSpeedConfig::GetClassData() const { return &_class_data_; }

void PolyStSpeedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolyStSpeedConfig *>(to)->MergeFrom(
      static_cast<const PolyStSpeedConfig &>(from));
}


void PolyStSpeedConfig::MergeFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PolyStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from._internal_st_boundary_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.total_path_length_ = from._impl_.total_path_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.total_time_ = from._impl_.total_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.preferred_accel_ = from._impl_.preferred_accel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.preferred_decel_ = from._impl_.preferred_decel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_accel_ = from._impl_.max_accel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.min_decel_ = from._impl_.min_decel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.speed_limit_buffer_ = from._impl_.speed_limit_buffer_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.speed_weight_ = from._impl_.speed_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.jerk_weight_ = from._impl_.jerk_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.obstacle_weight_ = from._impl_.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.unblocking_obstacle_cost_ = from._impl_.unblocking_obstacle_cost_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyStSpeedConfig::CopyFrom(const PolyStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PolyStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyStSpeedConfig::IsInitialized() const {
  return true;
}

void PolyStSpeedConfig::InternalSwap(PolyStSpeedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolyStSpeedConfig, _impl_.unblocking_obstacle_cost_)
      + sizeof(PolyStSpeedConfig::_impl_.unblocking_obstacle_cost_)
      - PROTOBUF_FIELD_OFFSET(PolyStSpeedConfig, _impl_.st_boundary_config_)>(
          reinterpret_cast<char*>(&_impl_.st_boundary_config_),
          reinterpret_cast<char*>(&other->_impl_.st_boundary_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyStSpeedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PolyStSpeedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PolyStSpeedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PolyStSpeedConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
