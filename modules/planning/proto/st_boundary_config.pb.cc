// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/st_boundary_config.proto

#include "modules/planning/proto/st_boundary_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR StBoundaryConfig::StBoundaryConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.static_obs_nudge_speed_ratio_)*/0
  , /*decltype(_impl_.dynamic_obs_nudge_speed_ratio_)*/0
  , /*decltype(_impl_.centri_jerk_speed_coeff_)*/0
  , /*decltype(_impl_.num_points_to_avg_kappa_)*/4u
  , /*decltype(_impl_.boundary_buffer_)*/0.1
  , /*decltype(_impl_.high_speed_centric_acceleration_limit_)*/1.2
  , /*decltype(_impl_.low_speed_centric_acceleration_limit_)*/1.4
  , /*decltype(_impl_.high_speed_threshold_)*/20
  , /*decltype(_impl_.low_speed_threshold_)*/7
  , /*decltype(_impl_.minimal_kappa_)*/1e-05
  , /*decltype(_impl_.point_extension_)*/1
  , /*decltype(_impl_.lowest_speed_)*/2.5} {}
struct StBoundaryConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StBoundaryConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StBoundaryConfigDefaultTypeInternal() {}
  union {
    StBoundaryConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StBoundaryConfigDefaultTypeInternal _StBoundaryConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.boundary_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.high_speed_centric_acceleration_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.low_speed_centric_acceleration_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.high_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.low_speed_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.minimal_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.point_extension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.lowest_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.num_points_to_avg_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.static_obs_nudge_speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.dynamic_obs_nudge_speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StBoundaryConfig, _impl_.centri_jerk_speed_coeff_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  3,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::apollo::planning::StBoundaryConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_StBoundaryConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/planning/proto/st_boundary_con"
  "fig.proto\022\017apollo.planning\"\300\003\n\020StBoundar"
  "yConfig\022\034\n\017boundary_buffer\030\001 \001(\001:\0030.1\0222\n"
  "%high_speed_centric_acceleration_limit\030\002"
  " \001(\001:\0031.2\0221\n$low_speed_centric_accelerat"
  "ion_limit\030\003 \001(\001:\0031.4\022 \n\024high_speed_thres"
  "hold\030\004 \001(\001:\00220\022\036\n\023low_speed_threshold\030\005 "
  "\001(\001:\0017\022\034\n\rminimal_kappa\030\006 \001(\001:\0051e-05\022\032\n\017"
  "point_extension\030\007 \001(\001:\0011\022\031\n\014lowest_speed"
  "\030\010 \001(\001:\0032.5\022\"\n\027num_points_to_avg_kappa\030\t"
  " \001(\r:\0014\022$\n\034static_obs_nudge_speed_ratio\030"
  "\n \001(\001\022%\n\035dynamic_obs_nudge_speed_ratio\030\013"
  " \001(\001\022\037\n\027centri_jerk_speed_coeff\030\014 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto = {
    false, false, 517, descriptor_table_protodef_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
    "modules/planning/proto/st_boundary_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class StBoundaryConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StBoundaryConfig>()._impl_._has_bits_);
  static void set_has_boundary_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_high_speed_centric_acceleration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_low_speed_centric_acceleration_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_high_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_low_speed_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_minimal_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_point_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lowest_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_points_to_avg_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_static_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dynamic_obs_nudge_speed_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_centri_jerk_speed_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StBoundaryConfig::StBoundaryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StBoundaryConfig)
}
StBoundaryConfig::StBoundaryConfig(const StBoundaryConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.static_obs_nudge_speed_ratio_){}
    , decltype(_impl_.dynamic_obs_nudge_speed_ratio_){}
    , decltype(_impl_.centri_jerk_speed_coeff_){}
    , decltype(_impl_.num_points_to_avg_kappa_){}
    , decltype(_impl_.boundary_buffer_){}
    , decltype(_impl_.high_speed_centric_acceleration_limit_){}
    , decltype(_impl_.low_speed_centric_acceleration_limit_){}
    , decltype(_impl_.high_speed_threshold_){}
    , decltype(_impl_.low_speed_threshold_){}
    , decltype(_impl_.minimal_kappa_){}
    , decltype(_impl_.point_extension_){}
    , decltype(_impl_.lowest_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.static_obs_nudge_speed_ratio_, &from._impl_.static_obs_nudge_speed_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lowest_speed_) -
    reinterpret_cast<char*>(&_impl_.static_obs_nudge_speed_ratio_)) + sizeof(_impl_.lowest_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StBoundaryConfig)
}

inline void StBoundaryConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.static_obs_nudge_speed_ratio_){0}
    , decltype(_impl_.dynamic_obs_nudge_speed_ratio_){0}
    , decltype(_impl_.centri_jerk_speed_coeff_){0}
    , decltype(_impl_.num_points_to_avg_kappa_){4u}
    , decltype(_impl_.boundary_buffer_){0.1}
    , decltype(_impl_.high_speed_centric_acceleration_limit_){1.2}
    , decltype(_impl_.low_speed_centric_acceleration_limit_){1.4}
    , decltype(_impl_.high_speed_threshold_){20}
    , decltype(_impl_.low_speed_threshold_){7}
    , decltype(_impl_.minimal_kappa_){1e-05}
    , decltype(_impl_.point_extension_){1}
    , decltype(_impl_.lowest_speed_){2.5}
  };
}

StBoundaryConfig::~StBoundaryConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StBoundaryConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StBoundaryConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StBoundaryConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StBoundaryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StBoundaryConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.static_obs_nudge_speed_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.centri_jerk_speed_coeff_) -
        reinterpret_cast<char*>(&_impl_.static_obs_nudge_speed_ratio_)) + sizeof(_impl_.centri_jerk_speed_coeff_));
    _impl_.num_points_to_avg_kappa_ = 4u;
    _impl_.boundary_buffer_ = 0.1;
    _impl_.high_speed_centric_acceleration_limit_ = 1.2;
    _impl_.low_speed_centric_acceleration_limit_ = 1.4;
    _impl_.high_speed_threshold_ = 20;
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.low_speed_threshold_ = 7;
    _impl_.minimal_kappa_ = 1e-05;
    _impl_.point_extension_ = 1;
    _impl_.lowest_speed_ = 2.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StBoundaryConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double boundary_buffer = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_boundary_buffer(&has_bits);
          _impl_.boundary_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_high_speed_centric_acceleration_limit(&has_bits);
          _impl_.high_speed_centric_acceleration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_low_speed_centric_acceleration_limit(&has_bits);
          _impl_.low_speed_centric_acceleration_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double high_speed_threshold = 4 [default = 20];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_high_speed_threshold(&has_bits);
          _impl_.high_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double low_speed_threshold = 5 [default = 7];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_low_speed_threshold(&has_bits);
          _impl_.low_speed_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double minimal_kappa = 6 [default = 1e-05];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_minimal_kappa(&has_bits);
          _impl_.minimal_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_extension = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_point_extension(&has_bits);
          _impl_.point_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lowest_speed = 8 [default = 2.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_lowest_speed(&has_bits);
          _impl_.lowest_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_num_points_to_avg_kappa(&has_bits);
          _impl_.num_points_to_avg_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double static_obs_nudge_speed_ratio = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_static_obs_nudge_speed_ratio(&has_bits);
          _impl_.static_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dynamic_obs_nudge_speed_ratio = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_dynamic_obs_nudge_speed_ratio(&has_bits);
          _impl_.dynamic_obs_nudge_speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double centri_jerk_speed_coeff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_centri_jerk_speed_coeff(&has_bits);
          _impl_.centri_jerk_speed_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StBoundaryConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StBoundaryConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double boundary_buffer = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_boundary_buffer(), target);
  }

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_high_speed_centric_acceleration_limit(), target);
  }

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_low_speed_centric_acceleration_limit(), target);
  }

  // optional double high_speed_threshold = 4 [default = 20];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_high_speed_threshold(), target);
  }

  // optional double low_speed_threshold = 5 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_low_speed_threshold(), target);
  }

  // optional double minimal_kappa = 6 [default = 1e-05];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_minimal_kappa(), target);
  }

  // optional double point_extension = 7 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_point_extension(), target);
  }

  // optional double lowest_speed = 8 [default = 2.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_lowest_speed(), target);
  }

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_points_to_avg_kappa(), target);
  }

  // optional double static_obs_nudge_speed_ratio = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_static_obs_nudge_speed_ratio(), target);
  }

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_dynamic_obs_nudge_speed_ratio(), target);
  }

  // optional double centri_jerk_speed_coeff = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_centri_jerk_speed_coeff(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StBoundaryConfig)
  return target;
}

size_t StBoundaryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StBoundaryConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double static_obs_nudge_speed_ratio = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dynamic_obs_nudge_speed_ratio = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double centri_jerk_speed_coeff = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_points_to_avg_kappa());
    }

    // optional double boundary_buffer = 1 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double high_speed_threshold = 4 [default = 20];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double low_speed_threshold = 5 [default = 7];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double minimal_kappa = 6 [default = 1e-05];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double point_extension = 7 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double lowest_speed = 8 [default = 2.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StBoundaryConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StBoundaryConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StBoundaryConfig::GetClassData() const { return &_class_data_; }

void StBoundaryConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StBoundaryConfig *>(to)->MergeFrom(
      static_cast<const StBoundaryConfig &>(from));
}


void StBoundaryConfig::MergeFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StBoundaryConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.static_obs_nudge_speed_ratio_ = from._impl_.static_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dynamic_obs_nudge_speed_ratio_ = from._impl_.dynamic_obs_nudge_speed_ratio_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.centri_jerk_speed_coeff_ = from._impl_.centri_jerk_speed_coeff_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.num_points_to_avg_kappa_ = from._impl_.num_points_to_avg_kappa_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.boundary_buffer_ = from._impl_.boundary_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.high_speed_centric_acceleration_limit_ = from._impl_.high_speed_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.low_speed_centric_acceleration_limit_ = from._impl_.low_speed_centric_acceleration_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.high_speed_threshold_ = from._impl_.high_speed_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.low_speed_threshold_ = from._impl_.low_speed_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.minimal_kappa_ = from._impl_.minimal_kappa_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.point_extension_ = from._impl_.point_extension_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.lowest_speed_ = from._impl_.lowest_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StBoundaryConfig::CopyFrom(const StBoundaryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StBoundaryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StBoundaryConfig::IsInitialized() const {
  return true;
}

void StBoundaryConfig::InternalSwap(StBoundaryConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StBoundaryConfig, _impl_.centri_jerk_speed_coeff_)
      + sizeof(StBoundaryConfig::_impl_.centri_jerk_speed_coeff_)
      - PROTOBUF_FIELD_OFFSET(StBoundaryConfig, _impl_.static_obs_nudge_speed_ratio_)>(
          reinterpret_cast<char*>(&_impl_.static_obs_nudge_speed_ratio_),
          reinterpret_cast<char*>(&other->_impl_.static_obs_nudge_speed_ratio_));
  swap(_impl_.num_points_to_avg_kappa_, other->_impl_.num_points_to_avg_kappa_);
  swap(_impl_.boundary_buffer_, other->_impl_.boundary_buffer_);
  swap(_impl_.high_speed_centric_acceleration_limit_, other->_impl_.high_speed_centric_acceleration_limit_);
  swap(_impl_.low_speed_centric_acceleration_limit_, other->_impl_.low_speed_centric_acceleration_limit_);
  swap(_impl_.high_speed_threshold_, other->_impl_.high_speed_threshold_);
  swap(_impl_.low_speed_threshold_, other->_impl_.low_speed_threshold_);
  swap(_impl_.minimal_kappa_, other->_impl_.minimal_kappa_);
  swap(_impl_.point_extension_, other->_impl_.point_extension_);
  swap(_impl_.lowest_speed_, other->_impl_.lowest_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StBoundaryConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::StBoundaryConfig*
Arena::CreateMaybeMessage< ::apollo::planning::StBoundaryConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StBoundaryConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
