// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decision.proto

#include "modules/planning/proto/decision.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR TargetLane::TargetLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_s_)*/0
  , /*decltype(_impl_.end_s_)*/0
  , /*decltype(_impl_.speed_limit_)*/0} {}
struct TargetLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetLaneDefaultTypeInternal() {}
  union {
    TargetLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetLaneDefaultTypeInternal _TargetLane_default_instance_;
PROTOBUF_CONSTEXPR ObjectIgnore::ObjectIgnore(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ObjectIgnoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectIgnoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectIgnoreDefaultTypeInternal() {}
  union {
    ObjectIgnore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectIgnoreDefaultTypeInternal _ObjectIgnore_default_instance_;
PROTOBUF_CONSTEXPR ObjectStop::ObjectStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wait_for_obstacle_)*/{}
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.distance_s_)*/0
  , /*decltype(_impl_.stop_heading_)*/0
  , /*decltype(_impl_.reason_code_)*/1} {}
struct ObjectStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectStopDefaultTypeInternal() {}
  union {
    ObjectStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectStopDefaultTypeInternal _ObjectStop_default_instance_;
PROTOBUF_CONSTEXPR ObjectNudge::ObjectNudge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.distance_l_)*/0
  , /*decltype(_impl_.type_)*/1} {}
struct ObjectNudgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectNudgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectNudgeDefaultTypeInternal() {}
  union {
    ObjectNudge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectNudgeDefaultTypeInternal _ObjectNudge_default_instance_;
PROTOBUF_CONSTEXPR ObjectYield::ObjectYield(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fence_point_)*/nullptr
  , /*decltype(_impl_.distance_s_)*/0
  , /*decltype(_impl_.fence_heading_)*/0
  , /*decltype(_impl_.time_buffer_)*/0} {}
struct ObjectYieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectYieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectYieldDefaultTypeInternal() {}
  union {
    ObjectYield _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectYieldDefaultTypeInternal _ObjectYield_default_instance_;
PROTOBUF_CONSTEXPR ObjectFollow::ObjectFollow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fence_point_)*/nullptr
  , /*decltype(_impl_.distance_s_)*/0
  , /*decltype(_impl_.fence_heading_)*/0} {}
struct ObjectFollowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectFollowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectFollowDefaultTypeInternal() {}
  union {
    ObjectFollow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectFollowDefaultTypeInternal _ObjectFollow_default_instance_;
PROTOBUF_CONSTEXPR ObjectOvertake::ObjectOvertake(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fence_point_)*/nullptr
  , /*decltype(_impl_.distance_s_)*/0
  , /*decltype(_impl_.fence_heading_)*/0
  , /*decltype(_impl_.time_buffer_)*/0} {}
struct ObjectOvertakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectOvertakeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectOvertakeDefaultTypeInternal() {}
  union {
    ObjectOvertake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectOvertakeDefaultTypeInternal _ObjectOvertake_default_instance_;
PROTOBUF_CONSTEXPR ObjectSidePass::ObjectSidePass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/1} {}
struct ObjectSidePassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectSidePassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectSidePassDefaultTypeInternal() {}
  union {
    ObjectSidePass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectSidePassDefaultTypeInternal _ObjectSidePass_default_instance_;
PROTOBUF_CONSTEXPR ObjectAvoid::ObjectAvoid(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ObjectAvoidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectAvoidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectAvoidDefaultTypeInternal() {}
  union {
    ObjectAvoid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectAvoidDefaultTypeInternal _ObjectAvoid_default_instance_;
PROTOBUF_CONSTEXPR ObjectStatus::ObjectStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.motion_type_)*/nullptr
  , /*decltype(_impl_.decision_type_)*/nullptr} {}
struct ObjectStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectStatusDefaultTypeInternal() {}
  union {
    ObjectStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectStatusDefaultTypeInternal _ObjectStatus_default_instance_;
PROTOBUF_CONSTEXPR ObjectStatic::ObjectStatic(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ObjectStaticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectStaticDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectStaticDefaultTypeInternal() {}
  union {
    ObjectStatic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectStaticDefaultTypeInternal _ObjectStatic_default_instance_;
PROTOBUF_CONSTEXPR ObjectDynamic::ObjectDynamic(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ObjectDynamicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDynamicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDynamicDefaultTypeInternal() {}
  union {
    ObjectDynamic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDynamicDefaultTypeInternal _ObjectDynamic_default_instance_;
PROTOBUF_CONSTEXPR ObjectMotionType::ObjectMotionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motion_tag_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObjectMotionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectMotionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectMotionTypeDefaultTypeInternal() {}
  union {
    ObjectMotionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectMotionTypeDefaultTypeInternal _ObjectMotionType_default_instance_;
PROTOBUF_CONSTEXPR ObjectDecisionType::ObjectDecisionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_tag_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ObjectDecisionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDecisionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDecisionTypeDefaultTypeInternal() {}
  union {
    ObjectDecisionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDecisionTypeDefaultTypeInternal _ObjectDecisionType_default_instance_;
PROTOBUF_CONSTEXPR ObjectDecision::ObjectDecision(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_decision_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.perception_id_)*/0} {}
struct ObjectDecisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDecisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDecisionDefaultTypeInternal() {}
  union {
    ObjectDecision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDecisionDefaultTypeInternal _ObjectDecision_default_instance_;
PROTOBUF_CONSTEXPR ObjectDecisions::ObjectDecisions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.decision_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectDecisionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDecisionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDecisionsDefaultTypeInternal() {}
  union {
    ObjectDecisions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDecisionsDefaultTypeInternal _ObjectDecisions_default_instance_;
PROTOBUF_CONSTEXPR MainStop::MainStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.stop_heading_)*/0
  , /*decltype(_impl_.change_lane_type_)*/0
  , /*decltype(_impl_.reason_code_)*/1} {}
struct MainStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainStopDefaultTypeInternal() {}
  union {
    MainStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainStopDefaultTypeInternal _MainStop_default_instance_;
PROTOBUF_CONSTEXPR EmergencyStopHardBrake::EmergencyStopHardBrake(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct EmergencyStopHardBrakeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmergencyStopHardBrakeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmergencyStopHardBrakeDefaultTypeInternal() {}
  union {
    EmergencyStopHardBrake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmergencyStopHardBrakeDefaultTypeInternal _EmergencyStopHardBrake_default_instance_;
PROTOBUF_CONSTEXPR EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct EmergencyStopCruiseToStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmergencyStopCruiseToStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmergencyStopCruiseToStopDefaultTypeInternal() {}
  union {
    EmergencyStopCruiseToStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmergencyStopCruiseToStopDefaultTypeInternal _EmergencyStopCruiseToStop_default_instance_;
PROTOBUF_CONSTEXPR MainEmergencyStop::MainEmergencyStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_code_)*/1
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MainEmergencyStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainEmergencyStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainEmergencyStopDefaultTypeInternal() {}
  union {
    MainEmergencyStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainEmergencyStopDefaultTypeInternal _MainEmergencyStop_default_instance_;
PROTOBUF_CONSTEXPR MainCruise::MainCruise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.change_lane_type_)*/0} {}
struct MainCruiseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainCruiseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainCruiseDefaultTypeInternal() {}
  union {
    MainCruise _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainCruiseDefaultTypeInternal _MainCruise_default_instance_;
PROTOBUF_CONSTEXPR MainChangeLane::MainChangeLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default_lane_)*/{}
  , /*decltype(_impl_.default_lane_stop_)*/nullptr
  , /*decltype(_impl_.target_lane_stop_)*/nullptr
  , /*decltype(_impl_.type_)*/1} {}
struct MainChangeLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainChangeLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainChangeLaneDefaultTypeInternal() {}
  union {
    MainChangeLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainChangeLaneDefaultTypeInternal _MainChangeLane_default_instance_;
PROTOBUF_CONSTEXPR MainMissionComplete::MainMissionComplete(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.stop_heading_)*/0} {}
struct MainMissionCompleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainMissionCompleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainMissionCompleteDefaultTypeInternal() {}
  union {
    MainMissionComplete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainMissionCompleteDefaultTypeInternal _MainMissionComplete_default_instance_;
PROTOBUF_CONSTEXPR MainNotReady::MainNotReady(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct MainNotReadyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainNotReadyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainNotReadyDefaultTypeInternal() {}
  union {
    MainNotReady _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainNotReadyDefaultTypeInternal _MainNotReady_default_instance_;
PROTOBUF_CONSTEXPR MainParking::MainParking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/1} {}
struct MainParkingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainParkingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainParkingDefaultTypeInternal() {}
  union {
    MainParking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainParkingDefaultTypeInternal _MainParking_default_instance_;
PROTOBUF_CONSTEXPR MainDecision::MainDecision(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_lane_)*/{}
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MainDecisionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MainDecisionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MainDecisionDefaultTypeInternal() {}
  union {
    MainDecision _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MainDecisionDefaultTypeInternal _MainDecision_default_instance_;
PROTOBUF_CONSTEXPR DecisionResult::DecisionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.main_decision_)*/nullptr
  , /*decltype(_impl_.object_decision_)*/nullptr
  , /*decltype(_impl_.vehicle_signal_)*/nullptr} {}
struct DecisionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecisionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecisionResultDefaultTypeInternal() {}
  union {
    DecisionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecisionResultDefaultTypeInternal _DecisionResult_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _impl_.start_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _impl_.end_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TargetLane, _impl_.speed_limit_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectIgnore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_.distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_.stop_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStop, _impl_.wait_for_obstacle_),
  3,
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectNudge, _impl_.distance_l_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _impl_.distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _impl_.fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _impl_.fence_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectYield, _impl_.time_buffer_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _impl_.distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _impl_.fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectFollow, _impl_.fence_heading_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _impl_.distance_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _impl_.fence_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _impl_.fence_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectOvertake, _impl_.time_buffer_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectSidePass, _impl_.type_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectAvoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStatus, _impl_.motion_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStatus, _impl_.decision_type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectStatic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectMotionType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectMotionType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectMotionType, _impl_.motion_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisionType, _impl_.object_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _impl_.perception_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecision, _impl_.object_decision_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObjectDecisions, _impl_.decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_.stop_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainStop, _impl_.change_lane_type_),
  4,
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopHardBrake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EmergencyStopCruiseToStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _impl_.reason_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _impl_.reason_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainEmergencyStop, _impl_.task_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainCruise, _impl_.change_lane_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _impl_.default_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _impl_.default_lane_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainChangeLane, _impl_.target_lane_stop_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainMissionComplete, _impl_.stop_heading_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainNotReady, _impl_.reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainParking, _impl_.status_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _impl_.target_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::MainDecision, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _impl_.main_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _impl_.object_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DecisionResult, _impl_.vehicle_signal_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::planning::TargetLane)},
  { 14, -1, -1, sizeof(::apollo::planning::ObjectIgnore)},
  { 20, 31, -1, sizeof(::apollo::planning::ObjectStop)},
  { 36, 44, -1, sizeof(::apollo::planning::ObjectNudge)},
  { 46, 56, -1, sizeof(::apollo::planning::ObjectYield)},
  { 60, 69, -1, sizeof(::apollo::planning::ObjectFollow)},
  { 72, 82, -1, sizeof(::apollo::planning::ObjectOvertake)},
  { 86, 93, -1, sizeof(::apollo::planning::ObjectSidePass)},
  { 94, -1, -1, sizeof(::apollo::planning::ObjectAvoid)},
  { 100, 108, -1, sizeof(::apollo::planning::ObjectStatus)},
  { 110, -1, -1, sizeof(::apollo::planning::ObjectStatic)},
  { 116, -1, -1, sizeof(::apollo::planning::ObjectDynamic)},
  { 122, -1, -1, sizeof(::apollo::planning::ObjectMotionType)},
  { 131, -1, -1, sizeof(::apollo::planning::ObjectDecisionType)},
  { 146, 155, -1, sizeof(::apollo::planning::ObjectDecision)},
  { 158, -1, -1, sizeof(::apollo::planning::ObjectDecisions)},
  { 165, 176, -1, sizeof(::apollo::planning::MainStop)},
  { 181, -1, -1, sizeof(::apollo::planning::EmergencyStopHardBrake)},
  { 187, -1, -1, sizeof(::apollo::planning::EmergencyStopCruiseToStop)},
  { 193, 204, -1, sizeof(::apollo::planning::MainEmergencyStop)},
  { 208, 215, -1, sizeof(::apollo::planning::MainCruise)},
  { 216, 226, -1, sizeof(::apollo::planning::MainChangeLane)},
  { 230, 238, -1, sizeof(::apollo::planning::MainMissionComplete)},
  { 240, 247, -1, sizeof(::apollo::planning::MainNotReady)},
  { 248, 255, -1, sizeof(::apollo::planning::MainParking)},
  { 256, -1, -1, sizeof(::apollo::planning::MainDecision)},
  { 271, 280, -1, sizeof(::apollo::planning::DecisionResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_TargetLane_default_instance_._instance,
  &::apollo::planning::_ObjectIgnore_default_instance_._instance,
  &::apollo::planning::_ObjectStop_default_instance_._instance,
  &::apollo::planning::_ObjectNudge_default_instance_._instance,
  &::apollo::planning::_ObjectYield_default_instance_._instance,
  &::apollo::planning::_ObjectFollow_default_instance_._instance,
  &::apollo::planning::_ObjectOvertake_default_instance_._instance,
  &::apollo::planning::_ObjectSidePass_default_instance_._instance,
  &::apollo::planning::_ObjectAvoid_default_instance_._instance,
  &::apollo::planning::_ObjectStatus_default_instance_._instance,
  &::apollo::planning::_ObjectStatic_default_instance_._instance,
  &::apollo::planning::_ObjectDynamic_default_instance_._instance,
  &::apollo::planning::_ObjectMotionType_default_instance_._instance,
  &::apollo::planning::_ObjectDecisionType_default_instance_._instance,
  &::apollo::planning::_ObjectDecision_default_instance_._instance,
  &::apollo::planning::_ObjectDecisions_default_instance_._instance,
  &::apollo::planning::_MainStop_default_instance_._instance,
  &::apollo::planning::_EmergencyStopHardBrake_default_instance_._instance,
  &::apollo::planning::_EmergencyStopCruiseToStop_default_instance_._instance,
  &::apollo::planning::_MainEmergencyStop_default_instance_._instance,
  &::apollo::planning::_MainCruise_default_instance_._instance,
  &::apollo::planning::_MainChangeLane_default_instance_._instance,
  &::apollo::planning::_MainMissionComplete_default_instance_._instance,
  &::apollo::planning::_MainNotReady_default_instance_._instance,
  &::apollo::planning::_MainParking_default_instance_._instance,
  &::apollo::planning::_MainDecision_default_instance_._instance,
  &::apollo::planning::_DecisionResult_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fdecision_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/planning/proto/decision.proto\022"
  "\017apollo.planning\032#modules/common/proto/g"
  "eometry.proto\032)modules/common/proto/vehi"
  "cle_signal.proto\032#modules/routing/proto/"
  "routing.proto\"M\n\nTargetLane\022\n\n\002id\030\001 \001(\t\022"
  "\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\022\023\n\013speed"
  "_limit\030\004 \001(\001\"\016\n\014ObjectIgnore\"\264\001\n\nObjectS"
  "top\0224\n\013reason_code\030\001 \001(\0162\037.apollo.planni"
  "ng.StopReasonCode\022\022\n\ndistance_s\030\002 \001(\001\022+\n"
  "\nstop_point\030\003 \001(\0132\027.apollo.common.PointE"
  "NU\022\024\n\014stop_heading\030\004 \001(\001\022\031\n\021wait_for_obs"
  "tacle\030\005 \003(\t\"\254\001\n\013ObjectNudge\022/\n\004type\030\001 \001("
  "\0162!.apollo.planning.ObjectNudge.Type\022\022\n\n"
  "distance_l\030\002 \001(\001\"X\n\004Type\022\016\n\nLEFT_NUDGE\020\001"
  "\022\017\n\013RIGHT_NUDGE\020\002\022\026\n\022DYNAMIC_LEFT_NUDGE\020"
  "\003\022\027\n\023DYNAMIC_RIGHT_NUDGE\020\004\"{\n\013ObjectYiel"
  "d\022\022\n\ndistance_s\030\001 \001(\001\022,\n\013fence_point\030\002 \001"
  "(\0132\027.apollo.common.PointENU\022\025\n\rfence_hea"
  "ding\030\003 \001(\001\022\023\n\013time_buffer\030\004 \001(\001\"g\n\014Objec"
  "tFollow\022\022\n\ndistance_s\030\001 \001(\001\022,\n\013fence_poi"
  "nt\030\002 \001(\0132\027.apollo.common.PointENU\022\025\n\rfen"
  "ce_heading\030\003 \001(\001\"~\n\016ObjectOvertake\022\022\n\ndi"
  "stance_s\030\001 \001(\001\022,\n\013fence_point\030\002 \001(\0132\027.ap"
  "ollo.common.PointENU\022\025\n\rfence_heading\030\003 "
  "\001(\001\022\023\n\013time_buffer\030\004 \001(\001\"a\n\016ObjectSidePa"
  "ss\0222\n\004type\030\001 \001(\0162$.apollo.planning.Objec"
  "tSidePass.Type\"\033\n\004Type\022\010\n\004LEFT\020\001\022\t\n\005RIGH"
  "T\020\002\"\r\n\013ObjectAvoid\"\202\001\n\014ObjectStatus\0226\n\013m"
  "otion_type\030\001 \001(\0132!.apollo.planning.Objec"
  "tMotionType\022:\n\rdecision_type\030\002 \001(\0132#.apo"
  "llo.planning.ObjectDecisionType\"\016\n\014Objec"
  "tStatic\"\017\n\rObjectDynamic\"\204\001\n\020ObjectMotio"
  "nType\022/\n\006static\030\001 \001(\0132\035.apollo.planning."
  "ObjectStaticH\000\0221\n\007dynamic\030\002 \001(\0132\036.apollo"
  ".planning.ObjectDynamicH\000B\014\n\nmotion_tag\""
  "\251\003\n\022ObjectDecisionType\022/\n\006ignore\030\001 \001(\0132\035"
  ".apollo.planning.ObjectIgnoreH\000\022+\n\004stop\030"
  "\002 \001(\0132\033.apollo.planning.ObjectStopH\000\022/\n\006"
  "follow\030\003 \001(\0132\035.apollo.planning.ObjectFol"
  "lowH\000\022-\n\005yield\030\004 \001(\0132\034.apollo.planning.O"
  "bjectYieldH\000\0223\n\010overtake\030\005 \001(\0132\037.apollo."
  "planning.ObjectOvertakeH\000\022-\n\005nudge\030\006 \001(\013"
  "2\034.apollo.planning.ObjectNudgeH\000\022-\n\005avoi"
  "d\030\007 \001(\0132\034.apollo.planning.ObjectAvoidH\000\022"
  "4\n\tside_pass\030\010 \001(\0132\037.apollo.planning.Obj"
  "ectSidePassH\000B\014\n\nobject_tag\"q\n\016ObjectDec"
  "ision\022\n\n\002id\030\001 \001(\t\022\025\n\rperception_id\030\002 \001(\005"
  "\022<\n\017object_decision\030\003 \003(\0132#.apollo.plann"
  "ing.ObjectDecisionType\"D\n\017ObjectDecision"
  "s\0221\n\010decision\030\001 \003(\0132\037.apollo.planning.Ob"
  "jectDecision\"\315\001\n\010MainStop\0224\n\013reason_code"
  "\030\001 \001(\0162\037.apollo.planning.StopReasonCode\022"
  "\016\n\006reason\030\002 \001(\t\022+\n\nstop_point\030\003 \001(\0132\027.ap"
  "ollo.common.PointENU\022\024\n\014stop_heading\030\004 \001"
  "(\001\0228\n\020change_lane_type\030\005 \001(\0162\036.apollo.ro"
  "uting.ChangeLaneType\"\030\n\026EmergencyStopHar"
  "dBrake\"\033\n\031EmergencyStopCruiseToStop\"\237\003\n\021"
  "MainEmergencyStop\022B\n\013reason_code\030\001 \001(\0162-"
  ".apollo.planning.MainEmergencyStop.Reaso"
  "nCode\022\016\n\006reason\030\002 \001(\t\022=\n\nhard_brake\030\003 \001("
  "\0132\'.apollo.planning.EmergencyStopHardBra"
  "keH\000\022D\n\016cruise_to_stop\030\004 \001(\0132*.apollo.pl"
  "anning.EmergencyStopCruiseToStopH\000\"\250\001\n\nR"
  "easonCode\022\035\n\031ESTOP_REASON_INTERNAL_ERR\020\001"
  "\022\032\n\026ESTOP_REASON_COLLISION\020\002\022\035\n\031ESTOP_RE"
  "ASON_ST_FIND_PATH\020\003\022!\n\035ESTOP_REASON_ST_M"
  "AKE_DECISION\020\004\022\035\n\031ESTOP_REASON_SENSOR_ER"
  "ROR\020\005B\006\n\004task\"F\n\nMainCruise\0228\n\020change_la"
  "ne_type\030\001 \001(\0162\036.apollo.routing.ChangeLan"
  "eType\"\377\001\n\016MainChangeLane\0222\n\004type\030\001 \001(\0162$"
  ".apollo.planning.MainChangeLane.Type\0221\n\014"
  "default_lane\030\002 \003(\0132\033.apollo.planning.Tar"
  "getLane\0224\n\021default_lane_stop\030\003 \001(\0132\031.apo"
  "llo.planning.MainStop\0223\n\020target_lane_sto"
  "p\030\004 \001(\0132\031.apollo.planning.MainStop\"\033\n\004Ty"
  "pe\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"X\n\023MainMissionCo"
  "mplete\022+\n\nstop_point\030\001 \001(\0132\027.apollo.comm"
  "on.PointENU\022\024\n\014stop_heading\030\002 \001(\001\"\036\n\014Mai"
  "nNotReady\022\016\n\006reason\030\001 \001(\t\"j\n\013MainParking"
  "\022:\n\006status\030\001 \001(\0162*.apollo.planning.MainP"
  "arking.ParkingStatus\"\037\n\rParkingStatus\022\016\n"
  "\nIN_PARKING\020\001\"\276\003\n\014MainDecision\022-\n\006cruise"
  "\030\001 \001(\0132\033.apollo.planning.MainCruiseH\000\022)\n"
  "\004stop\030\002 \001(\0132\031.apollo.planning.MainStopH\000"
  "\0223\n\005estop\030\003 \001(\0132\".apollo.planning.MainEm"
  "ergencyStopH\000\022:\n\013change_lane\030\004 \001(\0132\037.apo"
  "llo.planning.MainChangeLaneB\002\030\001H\000\022@\n\020mis"
  "sion_complete\030\006 \001(\0132$.apollo.planning.Ma"
  "inMissionCompleteH\000\0222\n\tnot_ready\030\007 \001(\0132\035"
  ".apollo.planning.MainNotReadyH\000\022/\n\007parki"
  "ng\030\010 \001(\0132\034.apollo.planning.MainParkingH\000"
  "\0224\n\013target_lane\030\005 \003(\0132\033.apollo.planning."
  "TargetLaneB\002\030\001B\006\n\004task\"\267\001\n\016DecisionResul"
  "t\0224\n\rmain_decision\030\001 \001(\0132\035.apollo.planni"
  "ng.MainDecision\0229\n\017object_decision\030\002 \001(\013"
  "2 .apollo.planning.ObjectDecisions\0224\n\016ve"
  "hicle_signal\030\003 \001(\0132\034.apollo.common.Vehic"
  "leSignal*\236\004\n\016StopReasonCode\022\034\n\030STOP_REAS"
  "ON_HEAD_VEHICLE\020\001\022\033\n\027STOP_REASON_DESTINA"
  "TION\020\002\022\032\n\026STOP_REASON_PEDESTRIAN\020\003\022\030\n\024ST"
  "OP_REASON_OBSTACLE\020\004\022\032\n\026STOP_REASON_PREP"
  "ARKING\020\005\022\026\n\022STOP_REASON_SIGNAL\020d\022\031\n\025STOP"
  "_REASON_STOP_SIGN\020e\022\032\n\026STOP_REASON_YIELD"
  "_SIGN\020f\022\032\n\026STOP_REASON_CLEAR_ZONE\020g\022\031\n\025S"
  "TOP_REASON_CROSSWALK\020h\022\027\n\023STOP_REASON_CR"
  "EEPER\020i\022\035\n\031STOP_REASON_REFERENCE_END\020j\022\035"
  "\n\031STOP_REASON_YELLOW_SIGNAL\020k\022\031\n\025STOP_RE"
  "ASON_PULL_OVER\020l\022\037\n\033STOP_REASON_SIDEPASS"
  "_SAFETY\020m\022$\n\037STOP_REASON_PRE_OPEN_SPACE_"
  "STOP\020\310\001\022$\n\037STOP_REASON_LANE_CHANGE_URGEN"
  "CY\020\311\001\022\032\n\025STOP_REASON_EMERGENCY\020\312\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto = {
    false, false, 4433, descriptor_table_protodef_modules_2fplanning_2fproto_2fdecision_2eproto,
    "modules/planning/proto/decision.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_deps, 3, 27,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fdecision_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectNudge_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[0];
}
bool ObjectNudge_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObjectNudge_Type ObjectNudge::LEFT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::RIGHT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::DYNAMIC_LEFT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::DYNAMIC_RIGHT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge::Type_MIN;
constexpr ObjectNudge_Type ObjectNudge::Type_MAX;
constexpr int ObjectNudge::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectSidePass_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[1];
}
bool ObjectSidePass_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObjectSidePass_Type ObjectSidePass::LEFT;
constexpr ObjectSidePass_Type ObjectSidePass::RIGHT;
constexpr ObjectSidePass_Type ObjectSidePass::Type_MIN;
constexpr ObjectSidePass_Type ObjectSidePass::Type_MAX;
constexpr int ObjectSidePass::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[2];
}
bool MainEmergencyStop_ReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_INTERNAL_ERR;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_COLLISION;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_FIND_PATH;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_ST_MAKE_DECISION;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ESTOP_REASON_SENSOR_ERROR;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MIN;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop::ReasonCode_MAX;
constexpr int MainEmergencyStop::ReasonCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainChangeLane_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[3];
}
bool MainChangeLane_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MainChangeLane_Type MainChangeLane::LEFT;
constexpr MainChangeLane_Type MainChangeLane::RIGHT;
constexpr MainChangeLane_Type MainChangeLane::Type_MIN;
constexpr MainChangeLane_Type MainChangeLane::Type_MAX;
constexpr int MainChangeLane::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainParking_ParkingStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[4];
}
bool MainParking_ParkingStatus_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MainParking_ParkingStatus MainParking::IN_PARKING;
constexpr MainParking_ParkingStatus MainParking::ParkingStatus_MIN;
constexpr MainParking_ParkingStatus MainParking::ParkingStatus_MAX;
constexpr int MainParking::ParkingStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fdecision_2eproto[5];
}
bool StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 200:
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TargetLane::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetLane>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TargetLane::TargetLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TargetLane)
}
TargetLane::TargetLane(const TargetLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_s_){}
    , decltype(_impl_.end_s_){}
    , decltype(_impl_.speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_s_, &from._impl_.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_limit_) -
    reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TargetLane)
}

inline void TargetLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.start_s_){0}
    , decltype(_impl_.end_s_){0}
    , decltype(_impl_.speed_limit_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.TargetLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void TargetLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TargetLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_) -
        reinterpret_cast<char*>(&_impl_.start_s_)) + sizeof(_impl_.speed_limit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TargetLane.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_start_s(&has_bits);
          _impl_.start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_end_s(&has_bits);
          _impl_.end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TargetLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TargetLane.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_end_s(), target);
  }

  // optional double speed_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TargetLane)
  return target;
}

size_t TargetLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TargetLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double start_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetLane::GetClassData() const { return &_class_data_; }

void TargetLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetLane *>(to)->MergeFrom(
      static_cast<const TargetLane &>(from));
}


void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_s_ = from._impl_.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.end_s_ = from._impl_.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {
  return true;
}

void TargetLane::InternalSwap(TargetLane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetLane, _impl_.speed_limit_)
      + sizeof(TargetLane::_impl_.speed_limit_)
      - PROTOBUF_FIELD_OFFSET(TargetLane, _impl_.start_s_)>(
          reinterpret_cast<char*>(&_impl_.start_s_),
          reinterpret_cast<char*>(&other->_impl_.start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[0]);
}

// ===================================================================

class ObjectIgnore::_Internal {
 public:
};

ObjectIgnore::ObjectIgnore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectIgnore)
}
ObjectIgnore::ObjectIgnore(const ObjectIgnore& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectIgnore)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectIgnore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectIgnore::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ObjectIgnore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[1]);
}

// ===================================================================

class ObjectStop::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectStop>()._impl_._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& stop_point(const ObjectStop* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::PointENU&
ObjectStop::_Internal::stop_point(const ObjectStop* msg) {
  return *msg->_impl_.stop_point_;
}
void ObjectStop::clear_stop_point() {
  if (_impl_.stop_point_ != nullptr) _impl_.stop_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectStop::ObjectStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectStop)
}
ObjectStop::ObjectStop(const ObjectStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wait_for_obstacle_){from._impl_.wait_for_obstacle_}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.distance_s_){}
    , decltype(_impl_.stop_heading_){}
    , decltype(_impl_.reason_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::common::PointENU(*from._impl_.stop_point_);
  }
  ::memcpy(&_impl_.distance_s_, &from._impl_.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_code_) -
    reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.reason_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectStop)
}

inline void ObjectStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wait_for_obstacle_){arena}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.distance_s_){0}
    , decltype(_impl_.stop_heading_){0}
    , decltype(_impl_.reason_code_){1}
  };
}

ObjectStop::~ObjectStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.wait_for_obstacle_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void ObjectStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wait_for_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
    _impl_.stop_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stop_heading_) -
        reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.stop_heading_));
    _impl_.reason_code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double distance_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance_s(&has_bits);
          _impl_.distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU stop_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_stop_heading(&has_bits);
          _impl_.stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string wait_for_obstacle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_wait_for_obstacle();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.planning.ObjectStop.wait_for_obstacle");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional double distance_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_heading(), target);
  }

  // repeated string wait_for_obstacle = 5;
  for (int i = 0, n = this->_internal_wait_for_obstacle_size(); i < n; i++) {
    const auto& s = this->_internal_wait_for_obstacle(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectStop.wait_for_obstacle");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectStop)
  return target;
}

size_t ObjectStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string wait_for_obstacle = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.wait_for_obstacle_.size());
  for (int i = 0, n = _impl_.wait_for_obstacle_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.wait_for_obstacle_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU stop_point = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double distance_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double stop_heading = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectStop::GetClassData() const { return &_class_data_; }

void ObjectStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectStop *>(to)->MergeFrom(
      static_cast<const ObjectStop &>(from));
}


void ObjectStop::MergeFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.wait_for_obstacle_.MergeFrom(from._impl_.wait_for_obstacle_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_s_ = from._impl_.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.stop_heading_ = from._impl_.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.reason_code_ = from._impl_.reason_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectStop::CopyFrom(const ObjectStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStop::IsInitialized() const {
  return true;
}

void ObjectStop::InternalSwap(ObjectStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.wait_for_obstacle_.InternalSwap(&other->_impl_.wait_for_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectStop, _impl_.stop_heading_)
      + sizeof(ObjectStop::_impl_.stop_heading_)
      - PROTOBUF_FIELD_OFFSET(ObjectStop, _impl_.stop_point_)>(
          reinterpret_cast<char*>(&_impl_.stop_point_),
          reinterpret_cast<char*>(&other->_impl_.stop_point_));
  swap(_impl_.reason_code_, other->_impl_.reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[2]);
}

// ===================================================================

class ObjectNudge::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectNudge>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_distance_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectNudge::ObjectNudge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectNudge)
}
ObjectNudge::ObjectNudge(const ObjectNudge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_l_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.distance_l_, &from._impl_.distance_l_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.distance_l_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectNudge)
}

inline void ObjectNudge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.distance_l_){0}
    , decltype(_impl_.type_){1}
  };
}

ObjectNudge::~ObjectNudge() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectNudge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectNudge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectNudge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectNudge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectNudge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.distance_l_ = 0;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectNudge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectNudge.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ObjectNudge_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::ObjectNudge_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double distance_l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance_l(&has_bits);
          _impl_.distance_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectNudge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectNudge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ObjectNudge.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double distance_l = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectNudge)
  return target;
}

size_t ObjectNudge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectNudge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double distance_l = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.ObjectNudge.Type type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectNudge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectNudge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectNudge::GetClassData() const { return &_class_data_; }

void ObjectNudge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectNudge *>(to)->MergeFrom(
      static_cast<const ObjectNudge &>(from));
}


void ObjectNudge::MergeFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectNudge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.distance_l_ = from._impl_.distance_l_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectNudge::CopyFrom(const ObjectNudge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectNudge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNudge::IsInitialized() const {
  return true;
}

void ObjectNudge::InternalSwap(ObjectNudge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.distance_l_, other->_impl_.distance_l_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectNudge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[3]);
}

// ===================================================================

class ObjectYield::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectYield>()._impl_._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectYield* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
ObjectYield::_Internal::fence_point(const ObjectYield* msg) {
  return *msg->_impl_.fence_point_;
}
void ObjectYield::clear_fence_point() {
  if (_impl_.fence_point_ != nullptr) _impl_.fence_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectYield::ObjectYield(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectYield)
}
ObjectYield::ObjectYield(const ObjectYield& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){}
    , decltype(_impl_.fence_heading_){}
    , decltype(_impl_.time_buffer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    _impl_.fence_point_ = new ::apollo::common::PointENU(*from._impl_.fence_point_);
  }
  ::memcpy(&_impl_.distance_s_, &from._impl_.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_buffer_) -
    reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectYield)
}

inline void ObjectYield::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){0}
    , decltype(_impl_.fence_heading_){0}
    , decltype(_impl_.time_buffer_){0}
  };
}

ObjectYield::~ObjectYield() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectYield)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectYield::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_point_;
}

void ObjectYield::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectYield::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectYield)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fence_point_ != nullptr);
    _impl_.fence_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_buffer_) -
        reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.time_buffer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectYield::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          _impl_.distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          _impl_.fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_time_buffer(&has_bits);
          _impl_.time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectYield::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectYield)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence_point(this),
        _Internal::fence_point(this).GetCachedSize(), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectYield)
  return target;
}

size_t ObjectYield::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectYield)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectYield::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectYield::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectYield::GetClassData() const { return &_class_data_; }

void ObjectYield::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectYield *>(to)->MergeFrom(
      static_cast<const ObjectYield &>(from));
}


void ObjectYield::MergeFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectYield)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_s_ = from._impl_.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fence_heading_ = from._impl_.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.time_buffer_ = from._impl_.time_buffer_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectYield::CopyFrom(const ObjectYield& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectYield)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectYield::IsInitialized() const {
  return true;
}

void ObjectYield::InternalSwap(ObjectYield* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectYield, _impl_.time_buffer_)
      + sizeof(ObjectYield::_impl_.time_buffer_)
      - PROTOBUF_FIELD_OFFSET(ObjectYield, _impl_.fence_point_)>(
          reinterpret_cast<char*>(&_impl_.fence_point_),
          reinterpret_cast<char*>(&other->_impl_.fence_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectYield::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[4]);
}

// ===================================================================

class ObjectFollow::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectFollow>()._impl_._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectFollow* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::PointENU&
ObjectFollow::_Internal::fence_point(const ObjectFollow* msg) {
  return *msg->_impl_.fence_point_;
}
void ObjectFollow::clear_fence_point() {
  if (_impl_.fence_point_ != nullptr) _impl_.fence_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectFollow::ObjectFollow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectFollow)
}
ObjectFollow::ObjectFollow(const ObjectFollow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){}
    , decltype(_impl_.fence_heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    _impl_.fence_point_ = new ::apollo::common::PointENU(*from._impl_.fence_point_);
  }
  ::memcpy(&_impl_.distance_s_, &from._impl_.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fence_heading_) -
    reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.fence_heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectFollow)
}

inline void ObjectFollow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){0}
    , decltype(_impl_.fence_heading_){0}
  };
}

ObjectFollow::~ObjectFollow() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectFollow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectFollow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_point_;
}

void ObjectFollow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectFollow::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectFollow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fence_point_ != nullptr);
    _impl_.fence_point_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fence_heading_) -
        reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.fence_heading_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectFollow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          _impl_.distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          _impl_.fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectFollow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectFollow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence_point(this),
        _Internal::fence_point(this).GetCachedSize(), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectFollow)
  return target;
}

size_t ObjectFollow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectFollow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectFollow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectFollow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectFollow::GetClassData() const { return &_class_data_; }

void ObjectFollow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectFollow *>(to)->MergeFrom(
      static_cast<const ObjectFollow &>(from));
}


void ObjectFollow::MergeFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectFollow)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_s_ = from._impl_.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fence_heading_ = from._impl_.fence_heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectFollow::CopyFrom(const ObjectFollow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectFollow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectFollow::IsInitialized() const {
  return true;
}

void ObjectFollow::InternalSwap(ObjectFollow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectFollow, _impl_.fence_heading_)
      + sizeof(ObjectFollow::_impl_.fence_heading_)
      - PROTOBUF_FIELD_OFFSET(ObjectFollow, _impl_.fence_point_)>(
          reinterpret_cast<char*>(&_impl_.fence_point_),
          reinterpret_cast<char*>(&other->_impl_.fence_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectFollow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[5]);
}

// ===================================================================

class ObjectOvertake::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectOvertake>()._impl_._has_bits_);
  static void set_has_distance_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& fence_point(const ObjectOvertake* msg);
  static void set_has_fence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fence_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
ObjectOvertake::_Internal::fence_point(const ObjectOvertake* msg) {
  return *msg->_impl_.fence_point_;
}
void ObjectOvertake::clear_fence_point() {
  if (_impl_.fence_point_ != nullptr) _impl_.fence_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ObjectOvertake::ObjectOvertake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectOvertake)
}
ObjectOvertake::ObjectOvertake(const ObjectOvertake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){}
    , decltype(_impl_.fence_heading_){}
    , decltype(_impl_.time_buffer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fence_point()) {
    _impl_.fence_point_ = new ::apollo::common::PointENU(*from._impl_.fence_point_);
  }
  ::memcpy(&_impl_.distance_s_, &from._impl_.distance_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_buffer_) -
    reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectOvertake)
}

inline void ObjectOvertake::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fence_point_){nullptr}
    , decltype(_impl_.distance_s_){0}
    , decltype(_impl_.fence_heading_){0}
    , decltype(_impl_.time_buffer_){0}
  };
}

ObjectOvertake::~ObjectOvertake() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectOvertake)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectOvertake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fence_point_;
}

void ObjectOvertake::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectOvertake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectOvertake)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.fence_point_ != nullptr);
    _impl_.fence_point_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.distance_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_buffer_) -
        reinterpret_cast<char*>(&_impl_.distance_s_)) + sizeof(_impl_.time_buffer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectOvertake::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double distance_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_distance_s(&has_bits);
          _impl_.distance_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU fence_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fence_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double fence_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_fence_heading(&has_bits);
          _impl_.fence_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_time_buffer(&has_bits);
          _impl_.time_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectOvertake::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectOvertake)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double distance_s = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_s(), target);
  }

  // optional .apollo.common.PointENU fence_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fence_point(this),
        _Internal::fence_point(this).GetCachedSize(), target, stream);
  }

  // optional double fence_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_fence_heading(), target);
  }

  // optional double time_buffer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectOvertake)
  return target;
}

size_t ObjectOvertake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectOvertake)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.PointENU fence_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fence_point_);
    }

    // optional double distance_s = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double fence_heading = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double time_buffer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectOvertake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectOvertake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectOvertake::GetClassData() const { return &_class_data_; }

void ObjectOvertake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectOvertake *>(to)->MergeFrom(
      static_cast<const ObjectOvertake &>(from));
}


void ObjectOvertake::MergeFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectOvertake)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fence_point()->::apollo::common::PointENU::MergeFrom(from._internal_fence_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_s_ = from._impl_.distance_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.fence_heading_ = from._impl_.fence_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.time_buffer_ = from._impl_.time_buffer_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectOvertake::CopyFrom(const ObjectOvertake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectOvertake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectOvertake::IsInitialized() const {
  return true;
}

void ObjectOvertake::InternalSwap(ObjectOvertake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectOvertake, _impl_.time_buffer_)
      + sizeof(ObjectOvertake::_impl_.time_buffer_)
      - PROTOBUF_FIELD_OFFSET(ObjectOvertake, _impl_.fence_point_)>(
          reinterpret_cast<char*>(&_impl_.fence_point_),
          reinterpret_cast<char*>(&other->_impl_.fence_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectOvertake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[6]);
}

// ===================================================================

class ObjectSidePass::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectSidePass>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectSidePass::ObjectSidePass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectSidePass)
}
ObjectSidePass::ObjectSidePass(const ObjectSidePass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectSidePass)
}

inline void ObjectSidePass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){1}
  };
}

ObjectSidePass::~ObjectSidePass() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectSidePass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectSidePass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectSidePass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectSidePass::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectSidePass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectSidePass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectSidePass.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ObjectSidePass_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::ObjectSidePass_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectSidePass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectSidePass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectSidePass)
  return target;
}

size_t ObjectSidePass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectSidePass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectSidePass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectSidePass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectSidePass::GetClassData() const { return &_class_data_; }

void ObjectSidePass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectSidePass *>(to)->MergeFrom(
      static_cast<const ObjectSidePass &>(from));
}


void ObjectSidePass::MergeFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectSidePass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectSidePass::CopyFrom(const ObjectSidePass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectSidePass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSidePass::IsInitialized() const {
  return true;
}

void ObjectSidePass::InternalSwap(ObjectSidePass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSidePass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[7]);
}

// ===================================================================

class ObjectAvoid::_Internal {
 public:
};

ObjectAvoid::ObjectAvoid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectAvoid)
}
ObjectAvoid::ObjectAvoid(const ObjectAvoid& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectAvoid)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAvoid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAvoid::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ObjectAvoid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[8]);
}

// ===================================================================

class ObjectStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectStatus>()._impl_._has_bits_);
  static const ::apollo::planning::ObjectMotionType& motion_type(const ObjectStatus* msg);
  static void set_has_motion_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ObjectDecisionType& decision_type(const ObjectStatus* msg);
  static void set_has_decision_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::ObjectMotionType&
ObjectStatus::_Internal::motion_type(const ObjectStatus* msg) {
  return *msg->_impl_.motion_type_;
}
const ::apollo::planning::ObjectDecisionType&
ObjectStatus::_Internal::decision_type(const ObjectStatus* msg) {
  return *msg->_impl_.decision_type_;
}
ObjectStatus::ObjectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectStatus)
}
ObjectStatus::ObjectStatus(const ObjectStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_type_){nullptr}
    , decltype(_impl_.decision_type_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motion_type()) {
    _impl_.motion_type_ = new ::apollo::planning::ObjectMotionType(*from._impl_.motion_type_);
  }
  if (from._internal_has_decision_type()) {
    _impl_.decision_type_ = new ::apollo::planning::ObjectDecisionType(*from._impl_.decision_type_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectStatus)
}

inline void ObjectStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.motion_type_){nullptr}
    , decltype(_impl_.decision_type_){nullptr}
  };
}

ObjectStatus::~ObjectStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.motion_type_;
  if (this != internal_default_instance()) delete _impl_.decision_type_;
}

void ObjectStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.motion_type_ != nullptr);
      _impl_.motion_type_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.decision_type_ != nullptr);
      _impl_.decision_type_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ObjectMotionType motion_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectDecisionType decision_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ObjectMotionType motion_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::motion_type(this),
        _Internal::motion_type(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ObjectDecisionType decision_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::decision_type(this),
        _Internal::decision_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectStatus)
  return target;
}

size_t ObjectStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.ObjectMotionType motion_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.motion_type_);
    }

    // optional .apollo.planning.ObjectDecisionType decision_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decision_type_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectStatus::GetClassData() const { return &_class_data_; }

void ObjectStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectStatus *>(to)->MergeFrom(
      static_cast<const ObjectStatus &>(from));
}


void ObjectStatus::MergeFrom(const ObjectStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_motion_type()->::apollo::planning::ObjectMotionType::MergeFrom(from._internal_motion_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_decision_type()->::apollo::planning::ObjectDecisionType::MergeFrom(from._internal_decision_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectStatus::CopyFrom(const ObjectStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectStatus::IsInitialized() const {
  return true;
}

void ObjectStatus::InternalSwap(ObjectStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectStatus, _impl_.decision_type_)
      + sizeof(ObjectStatus::_impl_.decision_type_)
      - PROTOBUF_FIELD_OFFSET(ObjectStatus, _impl_.motion_type_)>(
          reinterpret_cast<char*>(&_impl_.motion_type_),
          reinterpret_cast<char*>(&other->_impl_.motion_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[9]);
}

// ===================================================================

class ObjectStatic::_Internal {
 public:
};

ObjectStatic::ObjectStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectStatic)
}
ObjectStatic::ObjectStatic(const ObjectStatic& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectStatic)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectStatic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectStatic::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ObjectStatic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[10]);
}

// ===================================================================

class ObjectDynamic::_Internal {
 public:
};

ObjectDynamic::ObjectDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectDynamic)
}
ObjectDynamic::ObjectDynamic(const ObjectDynamic& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDynamic)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectDynamic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectDynamic::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ObjectDynamic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[11]);
}

// ===================================================================

class ObjectMotionType::_Internal {
 public:
  static const ::apollo::planning::ObjectStatic& static_(const ObjectMotionType* msg);
  static const ::apollo::planning::ObjectDynamic& dynamic(const ObjectMotionType* msg);
};

const ::apollo::planning::ObjectStatic&
ObjectMotionType::_Internal::static_(const ObjectMotionType* msg) {
  return *msg->_impl_.motion_tag_.static__;
}
const ::apollo::planning::ObjectDynamic&
ObjectMotionType::_Internal::dynamic(const ObjectMotionType* msg) {
  return *msg->_impl_.motion_tag_.dynamic_;
}
void ObjectMotionType::set_allocated_static_(::apollo::planning::ObjectStatic* static_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_motion_tag();
  if (static_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(static_);
    if (message_arena != submessage_arena) {
      static_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, static_, submessage_arena);
    }
    set_has_static_();
    _impl_.motion_tag_.static__ = static_;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectMotionType.static)
}
void ObjectMotionType::set_allocated_dynamic(::apollo::planning::ObjectDynamic* dynamic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_motion_tag();
  if (dynamic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dynamic);
    if (message_arena != submessage_arena) {
      dynamic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic, submessage_arena);
    }
    set_has_dynamic();
    _impl_.motion_tag_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectMotionType.dynamic)
}
ObjectMotionType::ObjectMotionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectMotionType)
}
ObjectMotionType::ObjectMotionType(const ObjectMotionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.motion_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_motion_tag();
  switch (from.motion_tag_case()) {
    case kStatic: {
      _internal_mutable_static_()->::apollo::planning::ObjectStatic::MergeFrom(from._internal_static_());
      break;
    }
    case kDynamic: {
      _internal_mutable_dynamic()->::apollo::planning::ObjectDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectMotionType)
}

inline void ObjectMotionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motion_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_motion_tag();
}

ObjectMotionType::~ObjectMotionType() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectMotionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectMotionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_motion_tag()) {
    clear_motion_tag();
  }
}

void ObjectMotionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectMotionType::clear_motion_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ObjectMotionType)
  switch (motion_tag_case()) {
    case kStatic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.motion_tag_.static__;
      }
      break;
    }
    case kDynamic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.motion_tag_.dynamic_;
      }
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MOTION_TAG_NOT_SET;
}


void ObjectMotionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectMotionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_motion_tag();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectMotionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.planning.ObjectStatic static = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectDynamic dynamic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectMotionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectMotionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (motion_tag_case()) {
    case kStatic: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::static_(this),
          _Internal::static_(this).GetCachedSize(), target, stream);
      break;
    }
    case kDynamic: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::dynamic(this),
          _Internal::dynamic(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectMotionType)
  return target;
}

size_t ObjectMotionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectMotionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (motion_tag_case()) {
    // .apollo.planning.ObjectStatic static = 1;
    case kStatic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.motion_tag_.static__);
      break;
    }
    // .apollo.planning.ObjectDynamic dynamic = 2;
    case kDynamic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.motion_tag_.dynamic_);
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectMotionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectMotionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectMotionType::GetClassData() const { return &_class_data_; }

void ObjectMotionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectMotionType *>(to)->MergeFrom(
      static_cast<const ObjectMotionType &>(from));
}


void ObjectMotionType::MergeFrom(const ObjectMotionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectMotionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.motion_tag_case()) {
    case kStatic: {
      _internal_mutable_static_()->::apollo::planning::ObjectStatic::MergeFrom(from._internal_static_());
      break;
    }
    case kDynamic: {
      _internal_mutable_dynamic()->::apollo::planning::ObjectDynamic::MergeFrom(from._internal_dynamic());
      break;
    }
    case MOTION_TAG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectMotionType::CopyFrom(const ObjectMotionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectMotionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMotionType::IsInitialized() const {
  return true;
}

void ObjectMotionType::InternalSwap(ObjectMotionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.motion_tag_, other->_impl_.motion_tag_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectMotionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[12]);
}

// ===================================================================

class ObjectDecisionType::_Internal {
 public:
  static const ::apollo::planning::ObjectIgnore& ignore(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectStop& stop(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectFollow& follow(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectYield& yield(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectOvertake& overtake(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectNudge& nudge(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectAvoid& avoid(const ObjectDecisionType* msg);
  static const ::apollo::planning::ObjectSidePass& side_pass(const ObjectDecisionType* msg);
};

const ::apollo::planning::ObjectIgnore&
ObjectDecisionType::_Internal::ignore(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.ignore_;
}
const ::apollo::planning::ObjectStop&
ObjectDecisionType::_Internal::stop(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.stop_;
}
const ::apollo::planning::ObjectFollow&
ObjectDecisionType::_Internal::follow(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.follow_;
}
const ::apollo::planning::ObjectYield&
ObjectDecisionType::_Internal::yield(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.yield_;
}
const ::apollo::planning::ObjectOvertake&
ObjectDecisionType::_Internal::overtake(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.overtake_;
}
const ::apollo::planning::ObjectNudge&
ObjectDecisionType::_Internal::nudge(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.nudge_;
}
const ::apollo::planning::ObjectAvoid&
ObjectDecisionType::_Internal::avoid(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.avoid_;
}
const ::apollo::planning::ObjectSidePass&
ObjectDecisionType::_Internal::side_pass(const ObjectDecisionType* msg) {
  return *msg->_impl_.object_tag_.side_pass_;
}
void ObjectDecisionType::set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (ignore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ignore);
    if (message_arena != submessage_arena) {
      ignore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ignore, submessage_arena);
    }
    set_has_ignore();
    _impl_.object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.ignore)
}
void ObjectDecisionType::set_allocated_stop(::apollo::planning::ObjectStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    _impl_.object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.stop)
}
void ObjectDecisionType::set_allocated_follow(::apollo::planning::ObjectFollow* follow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (follow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(follow);
    if (message_arena != submessage_arena) {
      follow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow, submessage_arena);
    }
    set_has_follow();
    _impl_.object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.follow)
}
void ObjectDecisionType::set_allocated_yield(::apollo::planning::ObjectYield* yield) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (yield) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yield);
    if (message_arena != submessage_arena) {
      yield = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield, submessage_arena);
    }
    set_has_yield();
    _impl_.object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.yield)
}
void ObjectDecisionType::set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (overtake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(overtake);
    if (message_arena != submessage_arena) {
      overtake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overtake, submessage_arena);
    }
    set_has_overtake();
    _impl_.object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.overtake)
}
void ObjectDecisionType::set_allocated_nudge(::apollo::planning::ObjectNudge* nudge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (nudge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nudge);
    if (message_arena != submessage_arena) {
      nudge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nudge, submessage_arena);
    }
    set_has_nudge();
    _impl_.object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.nudge)
}
void ObjectDecisionType::set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (avoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(avoid);
    if (message_arena != submessage_arena) {
      avoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avoid, submessage_arena);
    }
    set_has_avoid();
    _impl_.object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.avoid)
}
void ObjectDecisionType::set_allocated_side_pass(::apollo::planning::ObjectSidePass* side_pass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (side_pass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(side_pass);
    if (message_arena != submessage_arena) {
      side_pass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, side_pass, submessage_arena);
    }
    set_has_side_pass();
    _impl_.object_tag_.side_pass_ = side_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecisionType.side_pass)
}
ObjectDecisionType::ObjectDecisionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectDecisionType)
}
ObjectDecisionType::ObjectDecisionType(const ObjectDecisionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.object_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_object_tag();
  switch (from.object_tag_case()) {
    case kIgnore: {
      _internal_mutable_ignore()->::apollo::planning::ObjectIgnore::MergeFrom(from._internal_ignore());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::ObjectStop::MergeFrom(from._internal_stop());
      break;
    }
    case kFollow: {
      _internal_mutable_follow()->::apollo::planning::ObjectFollow::MergeFrom(from._internal_follow());
      break;
    }
    case kYield: {
      _internal_mutable_yield()->::apollo::planning::ObjectYield::MergeFrom(from._internal_yield());
      break;
    }
    case kOvertake: {
      _internal_mutable_overtake()->::apollo::planning::ObjectOvertake::MergeFrom(from._internal_overtake());
      break;
    }
    case kNudge: {
      _internal_mutable_nudge()->::apollo::planning::ObjectNudge::MergeFrom(from._internal_nudge());
      break;
    }
    case kAvoid: {
      _internal_mutable_avoid()->::apollo::planning::ObjectAvoid::MergeFrom(from._internal_avoid());
      break;
    }
    case kSidePass: {
      _internal_mutable_side_pass()->::apollo::planning::ObjectSidePass::MergeFrom(from._internal_side_pass());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisionType)
}

inline void ObjectDecisionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_object_tag();
}

ObjectDecisionType::~ObjectDecisionType() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectDecisionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_object_tag()) {
    clear_object_tag();
  }
}

void ObjectDecisionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectDecisionType::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ObjectDecisionType)
  switch (object_tag_case()) {
    case kIgnore: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.ignore_;
      }
      break;
    }
    case kStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.stop_;
      }
      break;
    }
    case kFollow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.follow_;
      }
      break;
    }
    case kYield: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.yield_;
      }
      break;
    }
    case kOvertake: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.overtake_;
      }
      break;
    }
    case kNudge: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.nudge_;
      }
      break;
    }
    case kAvoid: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.avoid_;
      }
      break;
    }
    case kSidePass: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.side_pass_;
      }
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void ObjectDecisionType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_object_tag();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDecisionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.planning.ObjectIgnore ignore = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ignore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectStop stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectFollow follow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_follow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectYield yield = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectOvertake overtake = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_overtake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectNudge nudge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_nudge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectAvoid avoid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_avoid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ObjectSidePass side_pass = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_pass(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectDecisionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (object_tag_case()) {
    case kIgnore: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::ignore(this),
          _Internal::ignore(this).GetCachedSize(), target, stream);
      break;
    }
    case kStop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::stop(this),
          _Internal::stop(this).GetCachedSize(), target, stream);
      break;
    }
    case kFollow: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::follow(this),
          _Internal::follow(this).GetCachedSize(), target, stream);
      break;
    }
    case kYield: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::yield(this),
          _Internal::yield(this).GetCachedSize(), target, stream);
      break;
    }
    case kOvertake: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::overtake(this),
          _Internal::overtake(this).GetCachedSize(), target, stream);
      break;
    }
    case kNudge: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::nudge(this),
          _Internal::nudge(this).GetCachedSize(), target, stream);
      break;
    }
    case kAvoid: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::avoid(this),
          _Internal::avoid(this).GetCachedSize(), target, stream);
      break;
    }
    case kSidePass: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::side_pass(this),
          _Internal::side_pass(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisionType)
  return target;
}

size_t ObjectDecisionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (object_tag_case()) {
    // .apollo.planning.ObjectIgnore ignore = 1;
    case kIgnore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.ignore_);
      break;
    }
    // .apollo.planning.ObjectStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.stop_);
      break;
    }
    // .apollo.planning.ObjectFollow follow = 3;
    case kFollow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.follow_);
      break;
    }
    // .apollo.planning.ObjectYield yield = 4;
    case kYield: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.yield_);
      break;
    }
    // .apollo.planning.ObjectOvertake overtake = 5;
    case kOvertake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.overtake_);
      break;
    }
    // .apollo.planning.ObjectNudge nudge = 6;
    case kNudge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.nudge_);
      break;
    }
    // .apollo.planning.ObjectAvoid avoid = 7;
    case kAvoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.avoid_);
      break;
    }
    // .apollo.planning.ObjectSidePass side_pass = 8;
    case kSidePass: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.side_pass_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectDecisionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectDecisionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectDecisionType::GetClassData() const { return &_class_data_; }

void ObjectDecisionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectDecisionType *>(to)->MergeFrom(
      static_cast<const ObjectDecisionType &>(from));
}


void ObjectDecisionType::MergeFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisionType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_tag_case()) {
    case kIgnore: {
      _internal_mutable_ignore()->::apollo::planning::ObjectIgnore::MergeFrom(from._internal_ignore());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::ObjectStop::MergeFrom(from._internal_stop());
      break;
    }
    case kFollow: {
      _internal_mutable_follow()->::apollo::planning::ObjectFollow::MergeFrom(from._internal_follow());
      break;
    }
    case kYield: {
      _internal_mutable_yield()->::apollo::planning::ObjectYield::MergeFrom(from._internal_yield());
      break;
    }
    case kOvertake: {
      _internal_mutable_overtake()->::apollo::planning::ObjectOvertake::MergeFrom(from._internal_overtake());
      break;
    }
    case kNudge: {
      _internal_mutable_nudge()->::apollo::planning::ObjectNudge::MergeFrom(from._internal_nudge());
      break;
    }
    case kAvoid: {
      _internal_mutable_avoid()->::apollo::planning::ObjectAvoid::MergeFrom(from._internal_avoid());
      break;
    }
    case kSidePass: {
      _internal_mutable_side_pass()->::apollo::planning::ObjectSidePass::MergeFrom(from._internal_side_pass());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectDecisionType::CopyFrom(const ObjectDecisionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisionType::IsInitialized() const {
  return true;
}

void ObjectDecisionType::InternalSwap(ObjectDecisionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_tag_, other->_impl_.object_tag_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecisionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[13]);
}

// ===================================================================

class ObjectDecision::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDecision>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_perception_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectDecision::ObjectDecision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectDecision)
}
ObjectDecision::ObjectDecision(const ObjectDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_decision_){from._impl_.object_decision_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.perception_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.perception_id_ = from._impl_.perception_id_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecision)
}

inline void ObjectDecision::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_decision_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.perception_id_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectDecision::~ObjectDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecision)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectDecision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_decision_.~RepeatedPtrField();
  _impl_.id_.Destroy();
}

void ObjectDecision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecision)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_decision_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.perception_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDecision::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.ObjectDecision.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 perception_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_perception_id(&has_bits);
          _impl_.perception_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectDecision::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecision)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ObjectDecision.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional int32 perception_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_perception_id(), target);
  }

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_object_decision_size()); i < n; i++) {
    const auto& repfield = this->_internal_object_decision(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecision)
  return target;
}

size_t ObjectDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecision)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  total_size += 1UL * this->_internal_object_decision_size();
  for (const auto& msg : this->_impl_.object_decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional int32 perception_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_perception_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectDecision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectDecision::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectDecision::GetClassData() const { return &_class_data_; }

void ObjectDecision::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectDecision *>(to)->MergeFrom(
      static_cast<const ObjectDecision &>(from));
}


void ObjectDecision::MergeFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecision)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.object_decision_.MergeFrom(from._impl_.object_decision_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.perception_id_ = from._impl_.perception_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectDecision::CopyFrom(const ObjectDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecision::IsInitialized() const {
  return true;
}

void ObjectDecision::InternalSwap(ObjectDecision* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.object_decision_.InternalSwap(&other->_impl_.object_decision_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.perception_id_, other->_impl_.perception_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[14]);
}

// ===================================================================

class ObjectDecisions::_Internal {
 public:
};

ObjectDecisions::ObjectDecisions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObjectDecisions)
}
ObjectDecisions::ObjectDecisions(const ObjectDecisions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.decision_){from._impl_.decision_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObjectDecisions)
}

inline void ObjectDecisions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.decision_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectDecisions::~ObjectDecisions() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObjectDecisions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectDecisions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decision_.~RepeatedPtrField();
}

void ObjectDecisions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectDecisions::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObjectDecisions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decision_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDecisions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.ObjectDecision decision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectDecisions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObjectDecisions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecision decision = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decision_size()); i < n; i++) {
    const auto& repfield = this->_internal_decision(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObjectDecisions)
  return target;
}

size_t ObjectDecisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObjectDecisions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObjectDecision decision = 1;
  total_size += 1UL * this->_internal_decision_size();
  for (const auto& msg : this->_impl_.decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectDecisions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObjectDecisions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectDecisions::GetClassData() const { return &_class_data_; }

void ObjectDecisions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObjectDecisions *>(to)->MergeFrom(
      static_cast<const ObjectDecisions &>(from));
}


void ObjectDecisions::MergeFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObjectDecisions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.decision_.MergeFrom(from._impl_.decision_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectDecisions::CopyFrom(const ObjectDecisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObjectDecisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDecisions::IsInitialized() const {
  return true;
}

void ObjectDecisions::InternalSwap(ObjectDecisions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.decision_.InternalSwap(&other->_impl_.decision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDecisions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[15]);
}

// ===================================================================

class MainStop::_Internal {
 public:
  using HasBits = decltype(std::declval<MainStop>()._impl_._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::PointENU& stop_point(const MainStop* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
MainStop::_Internal::stop_point(const MainStop* msg) {
  return *msg->_impl_.stop_point_;
}
void MainStop::clear_stop_point() {
  if (_impl_.stop_point_ != nullptr) _impl_.stop_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MainStop::MainStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainStop)
}
MainStop::MainStop(const MainStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_heading_){}
    , decltype(_impl_.change_lane_type_){}
    , decltype(_impl_.reason_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _impl_.reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::common::PointENU(*from._impl_.stop_point_);
  }
  ::memcpy(&_impl_.stop_heading_, &from._impl_.stop_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_code_) -
    reinterpret_cast<char*>(&_impl_.stop_heading_)) + sizeof(_impl_.reason_code_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainStop)
}

inline void MainStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_heading_){0}
    , decltype(_impl_.change_lane_type_){0}
    , decltype(_impl_.reason_code_){1}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MainStop::~MainStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void MainStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
      _impl_.stop_point_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.stop_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.change_lane_type_) -
        reinterpret_cast<char*>(&_impl_.stop_heading_)) + sizeof(_impl_.change_lane_type_));
    _impl_.reason_code_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.StopReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::StopReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.MainStop.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU stop_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_stop_heading(&has_bits);
          _impl_.stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.StopReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // optional .apollo.common.PointENU stop_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double stop_heading = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_heading(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainStop)
  return target;
}

size_t MainStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .apollo.common.PointENU stop_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double stop_heading = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_change_lane_type());
    }

    // optional .apollo.planning.StopReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainStop::GetClassData() const { return &_class_data_; }

void MainStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainStop *>(to)->MergeFrom(
      static_cast<const MainStop &>(from));
}


void MainStop::MergeFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.stop_heading_ = from._impl_.stop_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.change_lane_type_ = from._impl_.change_lane_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.reason_code_ = from._impl_.reason_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainStop::CopyFrom(const MainStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainStop::IsInitialized() const {
  return true;
}

void MainStop::InternalSwap(MainStop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MainStop, _impl_.change_lane_type_)
      + sizeof(MainStop::_impl_.change_lane_type_)
      - PROTOBUF_FIELD_OFFSET(MainStop, _impl_.stop_point_)>(
          reinterpret_cast<char*>(&_impl_.stop_point_),
          reinterpret_cast<char*>(&other->_impl_.stop_point_));
  swap(_impl_.reason_code_, other->_impl_.reason_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[16]);
}

// ===================================================================

class EmergencyStopHardBrake::_Internal {
 public:
};

EmergencyStopHardBrake::EmergencyStopHardBrake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.EmergencyStopHardBrake)
}
EmergencyStopHardBrake::EmergencyStopHardBrake(const EmergencyStopHardBrake& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopHardBrake)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmergencyStopHardBrake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmergencyStopHardBrake::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmergencyStopHardBrake::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[17]);
}

// ===================================================================

class EmergencyStopCruiseToStop::_Internal {
 public:
};

EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.EmergencyStopCruiseToStop)
}
EmergencyStopCruiseToStop::EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EmergencyStopCruiseToStop)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmergencyStopCruiseToStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmergencyStopCruiseToStop::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata EmergencyStopCruiseToStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[18]);
}

// ===================================================================

class MainEmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<MainEmergencyStop>()._impl_._has_bits_);
  static void set_has_reason_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::EmergencyStopHardBrake& hard_brake(const MainEmergencyStop* msg);
  static const ::apollo::planning::EmergencyStopCruiseToStop& cruise_to_stop(const MainEmergencyStop* msg);
};

const ::apollo::planning::EmergencyStopHardBrake&
MainEmergencyStop::_Internal::hard_brake(const MainEmergencyStop* msg) {
  return *msg->_impl_.task_.hard_brake_;
}
const ::apollo::planning::EmergencyStopCruiseToStop&
MainEmergencyStop::_Internal::cruise_to_stop(const MainEmergencyStop* msg) {
  return *msg->_impl_.task_.cruise_to_stop_;
}
void MainEmergencyStop::set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (hard_brake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hard_brake);
    if (message_arena != submessage_arena) {
      hard_brake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hard_brake, submessage_arena);
    }
    set_has_hard_brake();
    _impl_.task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.hard_brake)
}
void MainEmergencyStop::set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (cruise_to_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cruise_to_stop);
    if (message_arena != submessage_arena) {
      cruise_to_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise_to_stop, submessage_arena);
    }
    set_has_cruise_to_stop();
    _impl_.task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.cruise_to_stop)
}
MainEmergencyStop::MainEmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainEmergencyStop)
}
MainEmergencyStop::MainEmergencyStop(const MainEmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.reason_code_){}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _impl_.reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  _impl_.reason_code_ = from._impl_.reason_code_;
  clear_has_task();
  switch (from.task_case()) {
    case kHardBrake: {
      _internal_mutable_hard_brake()->::apollo::planning::EmergencyStopHardBrake::MergeFrom(from._internal_hard_brake());
      break;
    }
    case kCruiseToStop: {
      _internal_mutable_cruise_to_stop()->::apollo::planning::EmergencyStopCruiseToStop::MergeFrom(from._internal_cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainEmergencyStop)
}

inline void MainEmergencyStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.reason_code_){1}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_task();
}

MainEmergencyStop::~MainEmergencyStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainEmergencyStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainEmergencyStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (has_task()) {
    clear_task();
  }
}

void MainEmergencyStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainEmergencyStop::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainEmergencyStop)
  switch (task_case()) {
    case kHardBrake: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.hard_brake_;
      }
      break;
    }
    case kCruiseToStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.cruise_to_stop_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}


void MainEmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainEmergencyStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.reason_.ClearNonDefaultToEmpty();
    }
    _impl_.reason_code_ = 1;
  }
  clear_task();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainEmergencyStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(val))) {
            _internal_set_reason_code(static_cast<::apollo::planning::MainEmergencyStop_ReasonCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.MainEmergencyStop.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hard_brake(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise_to_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainEmergencyStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainEmergencyStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason_code(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainEmergencyStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  switch (task_case()) {
    case kHardBrake: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::hard_brake(this),
          _Internal::hard_brake(this).GetCachedSize(), target, stream);
      break;
    }
    case kCruiseToStop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::cruise_to_stop(this),
          _Internal::cruise_to_stop(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainEmergencyStop)
  return target;
}

size_t MainEmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainEmergencyStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason_code());
    }

  }
  switch (task_case()) {
    // .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
    case kHardBrake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.hard_brake_);
      break;
    }
    // .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
    case kCruiseToStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.cruise_to_stop_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainEmergencyStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainEmergencyStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainEmergencyStop::GetClassData() const { return &_class_data_; }

void MainEmergencyStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainEmergencyStop *>(to)->MergeFrom(
      static_cast<const MainEmergencyStop &>(from));
}


void MainEmergencyStop::MergeFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainEmergencyStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.reason_code_ = from._impl_.reason_code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.task_case()) {
    case kHardBrake: {
      _internal_mutable_hard_brake()->::apollo::planning::EmergencyStopHardBrake::MergeFrom(from._internal_hard_brake());
      break;
    }
    case kCruiseToStop: {
      _internal_mutable_cruise_to_stop()->::apollo::planning::EmergencyStopCruiseToStop::MergeFrom(from._internal_cruise_to_stop());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainEmergencyStop::CopyFrom(const MainEmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainEmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainEmergencyStop::IsInitialized() const {
  return true;
}

void MainEmergencyStop::InternalSwap(MainEmergencyStop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.reason_code_, other->_impl_.reason_code_);
  swap(_impl_.task_, other->_impl_.task_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainEmergencyStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[19]);
}

// ===================================================================

class MainCruise::_Internal {
 public:
  using HasBits = decltype(std::declval<MainCruise>()._impl_._has_bits_);
  static void set_has_change_lane_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainCruise::MainCruise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainCruise)
}
MainCruise::MainCruise(const MainCruise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_lane_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.change_lane_type_ = from._impl_.change_lane_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainCruise)
}

inline void MainCruise::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.change_lane_type_){0}
  };
}

MainCruise::~MainCruise() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainCruise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainCruise::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MainCruise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainCruise::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainCruise)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.change_lane_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainCruise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::routing::ChangeLaneType_IsValid(val))) {
            _internal_set_change_lane_type(static_cast<::apollo::routing::ChangeLaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainCruise::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainCruise)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_lane_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainCruise)
  return target;
}

size_t MainCruise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainCruise)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_lane_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainCruise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainCruise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainCruise::GetClassData() const { return &_class_data_; }

void MainCruise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainCruise *>(to)->MergeFrom(
      static_cast<const MainCruise &>(from));
}


void MainCruise::MergeFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainCruise)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_change_lane_type()) {
    _internal_set_change_lane_type(from._internal_change_lane_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainCruise::CopyFrom(const MainCruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainCruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainCruise::IsInitialized() const {
  return true;
}

void MainCruise::InternalSwap(MainCruise* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.change_lane_type_, other->_impl_.change_lane_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainCruise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[20]);
}

// ===================================================================

class MainChangeLane::_Internal {
 public:
  using HasBits = decltype(std::declval<MainChangeLane>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::MainStop& default_lane_stop(const MainChangeLane* msg);
  static void set_has_default_lane_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::MainStop& target_lane_stop(const MainChangeLane* msg);
  static void set_has_target_lane_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::MainStop&
MainChangeLane::_Internal::default_lane_stop(const MainChangeLane* msg) {
  return *msg->_impl_.default_lane_stop_;
}
const ::apollo::planning::MainStop&
MainChangeLane::_Internal::target_lane_stop(const MainChangeLane* msg) {
  return *msg->_impl_.target_lane_stop_;
}
MainChangeLane::MainChangeLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainChangeLane)
}
MainChangeLane::MainChangeLane(const MainChangeLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_lane_){from._impl_.default_lane_}
    , decltype(_impl_.default_lane_stop_){nullptr}
    , decltype(_impl_.target_lane_stop_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_lane_stop()) {
    _impl_.default_lane_stop_ = new ::apollo::planning::MainStop(*from._impl_.default_lane_stop_);
  }
  if (from._internal_has_target_lane_stop()) {
    _impl_.target_lane_stop_ = new ::apollo::planning::MainStop(*from._impl_.target_lane_stop_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainChangeLane)
}

inline void MainChangeLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_lane_){arena}
    , decltype(_impl_.default_lane_stop_){nullptr}
    , decltype(_impl_.target_lane_stop_){nullptr}
    , decltype(_impl_.type_){1}
  };
}

MainChangeLane::~MainChangeLane() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainChangeLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainChangeLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_lane_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.default_lane_stop_;
  if (this != internal_default_instance()) delete _impl_.target_lane_stop_;
}

void MainChangeLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainChangeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainChangeLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_lane_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.default_lane_stop_ != nullptr);
      _impl_.default_lane_stop_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_lane_stop_ != nullptr);
      _impl_.target_lane_stop_->Clear();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainChangeLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.MainChangeLane.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainChangeLane_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::MainChangeLane_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TargetLane default_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.MainStop default_lane_stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_lane_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.MainStop target_lane_stop = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_lane_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainChangeLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainChangeLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.MainChangeLane.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .apollo.planning.TargetLane default_lane = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_default_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_default_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::default_lane_stop(this),
        _Internal::default_lane_stop(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::target_lane_stop(this),
        _Internal::target_lane_stop(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainChangeLane)
  return target;
}

size_t MainChangeLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainChangeLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TargetLane default_lane = 2;
  total_size += 1UL * this->_internal_default_lane_size();
  for (const auto& msg : this->_impl_.default_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.MainStop default_lane_stop = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_lane_stop_);
    }

    // optional .apollo.planning.MainStop target_lane_stop = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_lane_stop_);
    }

    // optional .apollo.planning.MainChangeLane.Type type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainChangeLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainChangeLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainChangeLane::GetClassData() const { return &_class_data_; }

void MainChangeLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainChangeLane *>(to)->MergeFrom(
      static_cast<const MainChangeLane &>(from));
}


void MainChangeLane::MergeFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainChangeLane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.default_lane_.MergeFrom(from._impl_.default_lane_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_default_lane_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_default_lane_stop());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target_lane_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_target_lane_stop());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainChangeLane::CopyFrom(const MainChangeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainChangeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainChangeLane::IsInitialized() const {
  return true;
}

void MainChangeLane::InternalSwap(MainChangeLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.default_lane_.InternalSwap(&other->_impl_.default_lane_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MainChangeLane, _impl_.target_lane_stop_)
      + sizeof(MainChangeLane::_impl_.target_lane_stop_)
      - PROTOBUF_FIELD_OFFSET(MainChangeLane, _impl_.default_lane_stop_)>(
          reinterpret_cast<char*>(&_impl_.default_lane_stop_),
          reinterpret_cast<char*>(&other->_impl_.default_lane_stop_));
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainChangeLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[21]);
}

// ===================================================================

class MainMissionComplete::_Internal {
 public:
  using HasBits = decltype(std::declval<MainMissionComplete>()._impl_._has_bits_);
  static const ::apollo::common::PointENU& stop_point(const MainMissionComplete* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PointENU&
MainMissionComplete::_Internal::stop_point(const MainMissionComplete* msg) {
  return *msg->_impl_.stop_point_;
}
void MainMissionComplete::clear_stop_point() {
  if (_impl_.stop_point_ != nullptr) _impl_.stop_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MainMissionComplete::MainMissionComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainMissionComplete)
}
MainMissionComplete::MainMissionComplete(const MainMissionComplete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::common::PointENU(*from._impl_.stop_point_);
  }
  _impl_.stop_heading_ = from._impl_.stop_heading_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainMissionComplete)
}

inline void MainMissionComplete::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_heading_){0}
  };
}

MainMissionComplete::~MainMissionComplete() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainMissionComplete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainMissionComplete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void MainMissionComplete::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainMissionComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainMissionComplete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
    _impl_.stop_point_->Clear();
  }
  _impl_.stop_heading_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainMissionComplete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.PointENU stop_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_heading(&has_bits);
          _impl_.stop_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainMissionComplete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainMissionComplete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.PointENU stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double stop_heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainMissionComplete)
  return target;
}

size_t MainMissionComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainMissionComplete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.PointENU stop_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double stop_heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainMissionComplete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainMissionComplete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainMissionComplete::GetClassData() const { return &_class_data_; }

void MainMissionComplete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainMissionComplete *>(to)->MergeFrom(
      static_cast<const MainMissionComplete &>(from));
}


void MainMissionComplete::MergeFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainMissionComplete)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_heading_ = from._impl_.stop_heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainMissionComplete::CopyFrom(const MainMissionComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainMissionComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainMissionComplete::IsInitialized() const {
  return true;
}

void MainMissionComplete::InternalSwap(MainMissionComplete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MainMissionComplete, _impl_.stop_heading_)
      + sizeof(MainMissionComplete::_impl_.stop_heading_)
      - PROTOBUF_FIELD_OFFSET(MainMissionComplete, _impl_.stop_point_)>(
          reinterpret_cast<char*>(&_impl_.stop_point_),
          reinterpret_cast<char*>(&other->_impl_.stop_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MainMissionComplete::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[22]);
}

// ===================================================================

class MainNotReady::_Internal {
 public:
  using HasBits = decltype(std::declval<MainNotReady>()._impl_._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainNotReady::MainNotReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainNotReady)
}
MainNotReady::MainNotReady(const MainNotReady& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _impl_.reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainNotReady)
}

inline void MainNotReady::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MainNotReady::~MainNotReady() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainNotReady)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainNotReady::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void MainNotReady::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainNotReady::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainNotReady)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainNotReady::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.MainNotReady.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainNotReady::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainNotReady)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.MainNotReady.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainNotReady)
  return target;
}

size_t MainNotReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainNotReady)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainNotReady::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainNotReady::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainNotReady::GetClassData() const { return &_class_data_; }

void MainNotReady::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainNotReady *>(to)->MergeFrom(
      static_cast<const MainNotReady &>(from));
}


void MainNotReady::MergeFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainNotReady)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainNotReady::CopyFrom(const MainNotReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainNotReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainNotReady::IsInitialized() const {
  return true;
}

void MainNotReady::InternalSwap(MainNotReady* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MainNotReady::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[23]);
}

// ===================================================================

class MainParking::_Internal {
 public:
  using HasBits = decltype(std::declval<MainParking>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MainParking::MainParking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainParking)
}
MainParking::MainParking(const MainParking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainParking)
}

inline void MainParking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){1}
  };
}

MainParking::~MainParking() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainParking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainParking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MainParking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainParking::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainParking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainParking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.MainParking.ParkingStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::MainParking_ParkingStatus_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::MainParking_ParkingStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainParking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainParking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.MainParking.ParkingStatus status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainParking)
  return target;
}

size_t MainParking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainParking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.MainParking.ParkingStatus status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainParking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainParking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainParking::GetClassData() const { return &_class_data_; }

void MainParking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainParking *>(to)->MergeFrom(
      static_cast<const MainParking &>(from));
}


void MainParking::MergeFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainParking)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainParking::CopyFrom(const MainParking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainParking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainParking::IsInitialized() const {
  return true;
}

void MainParking::InternalSwap(MainParking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainParking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[24]);
}

// ===================================================================

class MainDecision::_Internal {
 public:
  static const ::apollo::planning::MainCruise& cruise(const MainDecision* msg);
  static const ::apollo::planning::MainStop& stop(const MainDecision* msg);
  static const ::apollo::planning::MainEmergencyStop& estop(const MainDecision* msg);
  static const ::apollo::planning::MainChangeLane& change_lane(const MainDecision* msg);
  static const ::apollo::planning::MainMissionComplete& mission_complete(const MainDecision* msg);
  static const ::apollo::planning::MainNotReady& not_ready(const MainDecision* msg);
  static const ::apollo::planning::MainParking& parking(const MainDecision* msg);
};

const ::apollo::planning::MainCruise&
MainDecision::_Internal::cruise(const MainDecision* msg) {
  return *msg->_impl_.task_.cruise_;
}
const ::apollo::planning::MainStop&
MainDecision::_Internal::stop(const MainDecision* msg) {
  return *msg->_impl_.task_.stop_;
}
const ::apollo::planning::MainEmergencyStop&
MainDecision::_Internal::estop(const MainDecision* msg) {
  return *msg->_impl_.task_.estop_;
}
const ::apollo::planning::MainChangeLane&
MainDecision::_Internal::change_lane(const MainDecision* msg) {
  return *msg->_impl_.task_.change_lane_;
}
const ::apollo::planning::MainMissionComplete&
MainDecision::_Internal::mission_complete(const MainDecision* msg) {
  return *msg->_impl_.task_.mission_complete_;
}
const ::apollo::planning::MainNotReady&
MainDecision::_Internal::not_ready(const MainDecision* msg) {
  return *msg->_impl_.task_.not_ready_;
}
const ::apollo::planning::MainParking&
MainDecision::_Internal::parking(const MainDecision* msg) {
  return *msg->_impl_.task_.parking_;
}
void MainDecision::set_allocated_cruise(::apollo::planning::MainCruise* cruise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (cruise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cruise);
    if (message_arena != submessage_arena) {
      cruise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise, submessage_arena);
    }
    set_has_cruise();
    _impl_.task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.cruise)
}
void MainDecision::set_allocated_stop(::apollo::planning::MainStop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    _impl_.task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.stop)
}
void MainDecision::set_allocated_estop(::apollo::planning::MainEmergencyStop* estop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (estop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(estop);
    if (message_arena != submessage_arena) {
      estop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    set_has_estop();
    _impl_.task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.estop)
}
void MainDecision::set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (change_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(change_lane);
    if (message_arena != submessage_arena) {
      change_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change_lane, submessage_arena);
    }
    set_has_change_lane();
    _impl_.task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.change_lane)
}
void MainDecision::set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (mission_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mission_complete);
    if (message_arena != submessage_arena) {
      mission_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_complete, submessage_arena);
    }
    set_has_mission_complete();
    _impl_.task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.mission_complete)
}
void MainDecision::set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (not_ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(not_ready);
    if (message_arena != submessage_arena) {
      not_ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, not_ready, submessage_arena);
    }
    set_has_not_ready();
    _impl_.task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.not_ready)
}
void MainDecision::set_allocated_parking(::apollo::planning::MainParking* parking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task();
  if (parking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parking);
    if (message_arena != submessage_arena) {
      parking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking, submessage_arena);
    }
    set_has_parking();
    _impl_.task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainDecision.parking)
}
MainDecision::MainDecision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.MainDecision)
}
MainDecision::MainDecision(const MainDecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.target_lane_){from._impl_.target_lane_}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_task();
  switch (from.task_case()) {
    case kCruise: {
      _internal_mutable_cruise()->::apollo::planning::MainCruise::MergeFrom(from._internal_cruise());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_stop());
      break;
    }
    case kEstop: {
      _internal_mutable_estop()->::apollo::planning::MainEmergencyStop::MergeFrom(from._internal_estop());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::MainChangeLane::MergeFrom(from._internal_change_lane());
      break;
    }
    case kMissionComplete: {
      _internal_mutable_mission_complete()->::apollo::planning::MainMissionComplete::MergeFrom(from._internal_mission_complete());
      break;
    }
    case kNotReady: {
      _internal_mutable_not_ready()->::apollo::planning::MainNotReady::MergeFrom(from._internal_not_ready());
      break;
    }
    case kParking: {
      _internal_mutable_parking()->::apollo::planning::MainParking::MergeFrom(from._internal_parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.MainDecision)
}

inline void MainDecision::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_lane_){arena}
    , decltype(_impl_.task_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_task();
}

MainDecision::~MainDecision() {
  // @@protoc_insertion_point(destructor:apollo.planning.MainDecision)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MainDecision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_lane_.~RepeatedPtrField();
  if (has_task()) {
    clear_task();
  }
}

void MainDecision::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MainDecision::clear_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.MainDecision)
  switch (task_case()) {
    case kCruise: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.cruise_;
      }
      break;
    }
    case kStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.stop_;
      }
      break;
    }
    case kEstop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.estop_;
      }
      break;
    }
    case kChangeLane: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.change_lane_;
      }
      break;
    }
    case kMissionComplete: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.mission_complete_;
      }
      break;
    }
    case kNotReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.not_ready_;
      }
      break;
    }
    case kParking: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_.parking_;
      }
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}


void MainDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.MainDecision)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_lane_.Clear();
  clear_task();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MainDecision::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.planning.MainCruise cruise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cruise(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainStop stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainEmergencyStop estop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_estop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainMissionComplete mission_complete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_complete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainNotReady not_ready = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_ready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.MainParking parking = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MainDecision::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.MainDecision)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (task_case()) {
    case kCruise: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::cruise(this),
          _Internal::cruise(this).GetCachedSize(), target, stream);
      break;
    }
    case kStop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::stop(this),
          _Internal::stop(this).GetCachedSize(), target, stream);
      break;
    }
    case kEstop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::estop(this),
          _Internal::estop(this).GetCachedSize(), target, stream);
      break;
    }
    case kChangeLane: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::change_lane(this),
          _Internal::change_lane(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  switch (task_case()) {
    case kMissionComplete: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::mission_complete(this),
          _Internal::mission_complete(this).GetCachedSize(), target, stream);
      break;
    }
    case kNotReady: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::not_ready(this),
          _Internal::not_ready(this).GetCachedSize(), target, stream);
      break;
    }
    case kParking: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::parking(this),
          _Internal::parking(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.MainDecision)
  return target;
}

size_t MainDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.MainDecision)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  total_size += 1UL * this->_internal_target_lane_size();
  for (const auto& msg : this->_impl_.target_lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (task_case()) {
    // .apollo.planning.MainCruise cruise = 1;
    case kCruise: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.cruise_);
      break;
    }
    // .apollo.planning.MainStop stop = 2;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.stop_);
      break;
    }
    // .apollo.planning.MainEmergencyStop estop = 3;
    case kEstop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.estop_);
      break;
    }
    // .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
    case kChangeLane: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.change_lane_);
      break;
    }
    // .apollo.planning.MainMissionComplete mission_complete = 6;
    case kMissionComplete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.mission_complete_);
      break;
    }
    // .apollo.planning.MainNotReady not_ready = 7;
    case kNotReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.not_ready_);
      break;
    }
    // .apollo.planning.MainParking parking = 8;
    case kParking: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_.parking_);
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MainDecision::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MainDecision::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MainDecision::GetClassData() const { return &_class_data_; }

void MainDecision::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MainDecision *>(to)->MergeFrom(
      static_cast<const MainDecision &>(from));
}


void MainDecision::MergeFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.MainDecision)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.target_lane_.MergeFrom(from._impl_.target_lane_);
  switch (from.task_case()) {
    case kCruise: {
      _internal_mutable_cruise()->::apollo::planning::MainCruise::MergeFrom(from._internal_cruise());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::apollo::planning::MainStop::MergeFrom(from._internal_stop());
      break;
    }
    case kEstop: {
      _internal_mutable_estop()->::apollo::planning::MainEmergencyStop::MergeFrom(from._internal_estop());
      break;
    }
    case kChangeLane: {
      _internal_mutable_change_lane()->::apollo::planning::MainChangeLane::MergeFrom(from._internal_change_lane());
      break;
    }
    case kMissionComplete: {
      _internal_mutable_mission_complete()->::apollo::planning::MainMissionComplete::MergeFrom(from._internal_mission_complete());
      break;
    }
    case kNotReady: {
      _internal_mutable_not_ready()->::apollo::planning::MainNotReady::MergeFrom(from._internal_not_ready());
      break;
    }
    case kParking: {
      _internal_mutable_parking()->::apollo::planning::MainParking::MergeFrom(from._internal_parking());
      break;
    }
    case TASK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MainDecision::CopyFrom(const MainDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.MainDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainDecision::IsInitialized() const {
  return true;
}

void MainDecision::InternalSwap(MainDecision* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_lane_.InternalSwap(&other->_impl_.target_lane_);
  swap(_impl_.task_, other->_impl_.task_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MainDecision::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[25]);
}

// ===================================================================

class DecisionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionResult>()._impl_._has_bits_);
  static const ::apollo::planning::MainDecision& main_decision(const DecisionResult* msg);
  static void set_has_main_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ObjectDecisions& object_decision(const DecisionResult* msg);
  static void set_has_object_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::VehicleSignal& vehicle_signal(const DecisionResult* msg);
  static void set_has_vehicle_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::MainDecision&
DecisionResult::_Internal::main_decision(const DecisionResult* msg) {
  return *msg->_impl_.main_decision_;
}
const ::apollo::planning::ObjectDecisions&
DecisionResult::_Internal::object_decision(const DecisionResult* msg) {
  return *msg->_impl_.object_decision_;
}
const ::apollo::common::VehicleSignal&
DecisionResult::_Internal::vehicle_signal(const DecisionResult* msg) {
  return *msg->_impl_.vehicle_signal_;
}
void DecisionResult::clear_vehicle_signal() {
  if (_impl_.vehicle_signal_ != nullptr) _impl_.vehicle_signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DecisionResult::DecisionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DecisionResult)
}
DecisionResult::DecisionResult(const DecisionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_decision_){nullptr}
    , decltype(_impl_.object_decision_){nullptr}
    , decltype(_impl_.vehicle_signal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_main_decision()) {
    _impl_.main_decision_ = new ::apollo::planning::MainDecision(*from._impl_.main_decision_);
  }
  if (from._internal_has_object_decision()) {
    _impl_.object_decision_ = new ::apollo::planning::ObjectDecisions(*from._impl_.object_decision_);
  }
  if (from._internal_has_vehicle_signal()) {
    _impl_.vehicle_signal_ = new ::apollo::common::VehicleSignal(*from._impl_.vehicle_signal_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DecisionResult)
}

inline void DecisionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.main_decision_){nullptr}
    , decltype(_impl_.object_decision_){nullptr}
    , decltype(_impl_.vehicle_signal_){nullptr}
  };
}

DecisionResult::~DecisionResult() {
  // @@protoc_insertion_point(destructor:apollo.planning.DecisionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecisionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.main_decision_;
  if (this != internal_default_instance()) delete _impl_.object_decision_;
  if (this != internal_default_instance()) delete _impl_.vehicle_signal_;
}

void DecisionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DecisionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DecisionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.main_decision_ != nullptr);
      _impl_.main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_decision_ != nullptr);
      _impl_.object_decision_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.vehicle_signal_ != nullptr);
      _impl_.vehicle_signal_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.MainDecision main_decision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_main_decision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectDecisions object_decision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_decision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal vehicle_signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecisionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DecisionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.MainDecision main_decision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::main_decision(this),
        _Internal::main_decision(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object_decision(this),
        _Internal::object_decision(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vehicle_signal(this),
        _Internal::vehicle_signal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DecisionResult)
  return target;
}

size_t DecisionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DecisionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.MainDecision main_decision = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.main_decision_);
    }

    // optional .apollo.planning.ObjectDecisions object_decision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_decision_);
    }

    // optional .apollo.common.VehicleSignal vehicle_signal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_signal_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecisionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecisionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecisionResult::GetClassData() const { return &_class_data_; }

void DecisionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecisionResult *>(to)->MergeFrom(
      static_cast<const DecisionResult &>(from));
}


void DecisionResult::MergeFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DecisionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_main_decision()->::apollo::planning::MainDecision::MergeFrom(from._internal_main_decision());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object_decision()->::apollo::planning::ObjectDecisions::MergeFrom(from._internal_object_decision());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vehicle_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_vehicle_signal());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecisionResult::CopyFrom(const DecisionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DecisionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionResult::IsInitialized() const {
  return true;
}

void DecisionResult::InternalSwap(DecisionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionResult, _impl_.vehicle_signal_)
      + sizeof(DecisionResult::_impl_.vehicle_signal_)
      - PROTOBUF_FIELD_OFFSET(DecisionResult, _impl_.main_decision_)>(
          reinterpret_cast<char*>(&_impl_.main_decision_),
          reinterpret_cast<char*>(&other->_impl_.main_decision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdecision_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::TargetLane*
Arena::CreateMaybeMessage< ::apollo::planning::TargetLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TargetLane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectIgnore*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectIgnore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectIgnore >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectStop*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectNudge*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectNudge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectNudge >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectYield*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectYield >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectYield >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectFollow*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectFollow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectFollow >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectOvertake*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectOvertake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectOvertake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectSidePass*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectSidePass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectSidePass >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectAvoid*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectAvoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectAvoid >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectStatus*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectStatic*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectStatic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectStatic >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDynamic*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectDynamic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectDynamic >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectMotionType*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectMotionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectMotionType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecisionType*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecisionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectDecisionType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecision*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObjectDecisions*
Arena::CreateMaybeMessage< ::apollo::planning::ObjectDecisions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObjectDecisions >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainStop*
Arena::CreateMaybeMessage< ::apollo::planning::MainStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::EmergencyStopHardBrake*
Arena::CreateMaybeMessage< ::apollo::planning::EmergencyStopHardBrake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::EmergencyStopHardBrake >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::EmergencyStopCruiseToStop*
Arena::CreateMaybeMessage< ::apollo::planning::EmergencyStopCruiseToStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::EmergencyStopCruiseToStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainEmergencyStop*
Arena::CreateMaybeMessage< ::apollo::planning::MainEmergencyStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainEmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainCruise*
Arena::CreateMaybeMessage< ::apollo::planning::MainCruise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainCruise >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainChangeLane*
Arena::CreateMaybeMessage< ::apollo::planning::MainChangeLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainChangeLane >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainMissionComplete*
Arena::CreateMaybeMessage< ::apollo::planning::MainMissionComplete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainMissionComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainNotReady*
Arena::CreateMaybeMessage< ::apollo::planning::MainNotReady >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainNotReady >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainParking*
Arena::CreateMaybeMessage< ::apollo::planning::MainParking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainParking >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::MainDecision*
Arena::CreateMaybeMessage< ::apollo::planning::MainDecision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::MainDecision >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DecisionResult*
Arena::CreateMaybeMessage< ::apollo::planning::DecisionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DecisionResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
