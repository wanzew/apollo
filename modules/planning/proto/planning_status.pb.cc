// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_status.proto

#include "modules/planning/proto/planning_status.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR ChangeLaneStatus::ChangeLaneStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.status_)*/1} {}
struct ChangeLaneStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeLaneStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeLaneStatusDefaultTypeInternal() {}
  union {
    ChangeLaneStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeLaneStatusDefaultTypeInternal _ChangeLaneStatus_default_instance_;
PROTOBUF_CONSTEXPR StopTimer::StopTimer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_time_)*/0} {}
struct StopTimerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopTimerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopTimerDefaultTypeInternal() {}
  union {
    StopTimer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopTimerDefaultTypeInternal _StopTimer_default_instance_;
PROTOBUF_CONSTEXPR CrosswalkStatus::CrosswalkStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_timers_)*/{}
  , /*decltype(_impl_.crosswalk_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CrosswalkStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrosswalkStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrosswalkStatusDefaultTypeInternal() {}
  union {
    CrosswalkStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrosswalkStatusDefaultTypeInternal _CrosswalkStatus_default_instance_;
PROTOBUF_CONSTEXPR PullOverStatus::PullOverStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inlane_dest_point_)*/nullptr
  , /*decltype(_impl_.start_point_)*/nullptr
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.stop_point_heading_)*/0
  , /*decltype(_impl_.status_set_time_)*/0
  , /*decltype(_impl_.in_pull_over_)*/false
  , /*decltype(_impl_.status_)*/1
  , /*decltype(_impl_.reason_)*/1} {}
struct PullOverStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullOverStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullOverStatusDefaultTypeInternal() {}
  union {
    PullOverStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullOverStatusDefaultTypeInternal _PullOverStatus_default_instance_;
PROTOBUF_CONSTEXPR ReroutingStatus::ReroutingStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_rerouting_time_)*/0} {}
struct ReroutingStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReroutingStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReroutingStatusDefaultTypeInternal() {}
  union {
    ReroutingStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReroutingStatusDefaultTypeInternal _ReroutingStatus_default_instance_;
PROTOBUF_CONSTEXPR RightOfWayStatus_JunctionEntry_DoNotUse::RightOfWayStatus_JunctionEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RightOfWayStatus_JunctionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RightOfWayStatus_JunctionEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RightOfWayStatus_JunctionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RightOfWayStatus_JunctionEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RightOfWayStatus_JunctionEntry_DoNotUseDefaultTypeInternal _RightOfWayStatus_JunctionEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RightOfWayStatus::RightOfWayStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RightOfWayStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RightOfWayStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RightOfWayStatusDefaultTypeInternal() {}
  union {
    RightOfWayStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RightOfWayStatusDefaultTypeInternal _RightOfWayStatus_default_instance_;
PROTOBUF_CONSTEXPR SidePassStatus::SidePassStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pass_obstacle_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wait_start_time_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.pass_side_)*/1} {}
struct SidePassStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SidePassStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SidePassStatusDefaultTypeInternal() {}
  union {
    SidePassStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SidePassStatusDefaultTypeInternal _SidePassStatus_default_instance_;
PROTOBUF_CONSTEXPR StopSignStatus_LaneWatchVehicles::StopSignStatus_LaneWatchVehicles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.watch_vehicles_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct StopSignStatus_LaneWatchVehiclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopSignStatus_LaneWatchVehiclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopSignStatus_LaneWatchVehiclesDefaultTypeInternal() {}
  union {
    StopSignStatus_LaneWatchVehicles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopSignStatus_LaneWatchVehiclesDefaultTypeInternal _StopSignStatus_LaneWatchVehicles_default_instance_;
PROTOBUF_CONSTEXPR StopSignStatus::StopSignStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_watch_vehicles_)*/{}
  , /*decltype(_impl_.stop_sign_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_start_time_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct StopSignStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopSignStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopSignStatusDefaultTypeInternal() {}
  union {
    StopSignStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopSignStatusDefaultTypeInternal _StopSignStatus_default_instance_;
PROTOBUF_CONSTEXPR PlanningState::PlanningState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_tag_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PlanningStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningStateDefaultTypeInternal() {}
  union {
    PlanningState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningStateDefaultTypeInternal _PlanningState_default_instance_;
PROTOBUF_CONSTEXPR PlanningStatus::PlanningStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planning_state_)*/nullptr
  , /*decltype(_impl_.change_lane_)*/nullptr
  , /*decltype(_impl_.crosswalk_)*/nullptr
  , /*decltype(_impl_.engage_advice_)*/nullptr
  , /*decltype(_impl_.rerouting_)*/nullptr
  , /*decltype(_impl_.right_of_way_)*/nullptr
  , /*decltype(_impl_.side_pass_)*/nullptr
  , /*decltype(_impl_.stop_sign_)*/nullptr} {}
struct PlanningStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningStatusDefaultTypeInternal() {}
  union {
    PlanningStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningStatusDefaultTypeInternal _PlanningStatus_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _impl_.path_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChangeLaneStatus, _impl_.timestamp_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTimer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTimer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTimer, _impl_.obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopTimer, _impl_.stop_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _impl_.crosswalk_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkStatus, _impl_.stop_timers_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.in_pull_over_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.inlane_dest_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.start_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.stop_point_heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PullOverStatus, _impl_.status_set_time_),
  5,
  6,
  0,
  1,
  2,
  3,
  7,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingStatus, _impl_.last_rerouting_time_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RightOfWayStatus, _impl_.junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _impl_.wait_start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _impl_.pass_obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SidePassStatus, _impl_.pass_side_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus_LaneWatchVehicles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus_LaneWatchVehicles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus_LaneWatchVehicles, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus_LaneWatchVehicles, _impl_.watch_vehicles_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _impl_.stop_sign_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _impl_.stop_start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignStatus, _impl_.lane_watch_vehicles_),
  0,
  2,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningState, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningState, _impl_.object_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.planning_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.change_lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.rerouting_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.right_of_way_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.side_pass_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningStatus, _impl_.stop_sign_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::planning::ChangeLaneStatus)},
  { 12, 20, -1, sizeof(::apollo::planning::StopTimer)},
  { 22, 30, -1, sizeof(::apollo::planning::CrosswalkStatus)},
  { 32, 46, -1, sizeof(::apollo::planning::PullOverStatus)},
  { 54, 61, -1, sizeof(::apollo::planning::ReroutingStatus)},
  { 62, 70, -1, sizeof(::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse)},
  { 72, -1, -1, sizeof(::apollo::planning::RightOfWayStatus)},
  { 79, 89, -1, sizeof(::apollo::planning::SidePassStatus)},
  { 93, 101, -1, sizeof(::apollo::planning::StopSignStatus_LaneWatchVehicles)},
  { 103, 113, -1, sizeof(::apollo::planning::StopSignStatus)},
  { 117, -1, -1, sizeof(::apollo::planning::PlanningState)},
  { 125, 139, -1, sizeof(::apollo::planning::PlanningStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_ChangeLaneStatus_default_instance_._instance,
  &::apollo::planning::_StopTimer_default_instance_._instance,
  &::apollo::planning::_CrosswalkStatus_default_instance_._instance,
  &::apollo::planning::_PullOverStatus_default_instance_._instance,
  &::apollo::planning::_ReroutingStatus_default_instance_._instance,
  &::apollo::planning::_RightOfWayStatus_JunctionEntry_DoNotUse_default_instance_._instance,
  &::apollo::planning::_RightOfWayStatus_default_instance_._instance,
  &::apollo::planning::_SidePassStatus_default_instance_._instance,
  &::apollo::planning::_StopSignStatus_LaneWatchVehicles_default_instance_._instance,
  &::apollo::planning::_StopSignStatus_default_instance_._instance,
  &::apollo::planning::_PlanningState_default_instance_._instance,
  &::apollo::planning::_PlanningStatus_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/planning_status"
  ".proto\022\017apollo.planning\032%modules/plannin"
  "g/proto/decision.proto\032&modules/common/p"
  "roto/drive_state.proto\032#modules/common/p"
  "roto/geometry.proto\"\277\001\n\020ChangeLaneStatus"
  "\0228\n\006status\030\001 \001(\0162(.apollo.planning.Chang"
  "eLaneStatus.Status\022\017\n\007path_id\030\002 \001(\t\022\021\n\tt"
  "imestamp\030\003 \001(\001\"M\n\006Status\022\022\n\016IN_CHANGE_LA"
  "NE\020\001\022\026\n\022CHANGE_LANE_FAILED\020\002\022\027\n\023CHANGE_L"
  "ANE_SUCCESS\020\003\"3\n\tStopTimer\022\023\n\013obstacle_i"
  "d\030\001 \001(\t\022\021\n\tstop_time\030\002 \001(\001\"X\n\017CrosswalkS"
  "tatus\022\024\n\014crosswalk_id\030\001 \001(\t\022/\n\013stop_time"
  "rs\030\002 \003(\0132\032.apollo.planning.StopTimer\"\257\003\n"
  "\016PullOverStatus\022\033\n\014in_pull_over\030\001 \001(\010:\005f"
  "alse\0226\n\006status\030\002 \001(\0162&.apollo.planning.P"
  "ullOverStatus.Status\0222\n\021inlane_dest_poin"
  "t\030\003 \001(\0132\027.apollo.common.PointENU\022,\n\013star"
  "t_point\030\004 \001(\0132\027.apollo.common.PointENU\022+"
  "\n\nstop_point\030\005 \001(\0132\027.apollo.common.Point"
  "ENU\022\032\n\022stop_point_heading\030\006 \001(\001\0226\n\006reaso"
  "n\030\007 \001(\0162&.apollo.planning.PullOverStatus"
  ".Reason\022\027\n\017status_set_time\030\010 \001(\001\"\031\n\006Reas"
  "on\022\017\n\013DESTINATION\020\001\"1\n\006Status\022\013\n\007UNKNOWN"
  "\020\001\022\020\n\014IN_OPERATION\020\002\022\010\n\004DONE\020\003\".\n\017Rerout"
  "ingStatus\022\033\n\023last_rerouting_time\030\001 \001(\001\"\206"
  "\001\n\020RightOfWayStatus\022A\n\010junction\030\001 \003(\0132/."
  "apollo.planning.RightOfWayStatus.Junctio"
  "nEntry\032/\n\rJunctionEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\010:\0028\001\"\356\001\n\016SidePassStatus\0226\n\006st"
  "atus\030\001 \001(\0162&.apollo.planning.SidePassSta"
  "tus.Status\022\027\n\017wait_start_time\030\002 \001(\001\022\030\n\020p"
  "ass_obstacle_id\030\003 \001(\t\0227\n\tpass_side\030\004 \001(\016"
  "2$.apollo.planning.ObjectSidePass.Type\"8"
  "\n\006Status\022\013\n\007UNKNOWN\020\000\022\t\n\005DRIVE\020\001\022\010\n\004WAIT"
  "\020\002\022\014\n\010SIDEPASS\020\003\"\325\002\n\016StopSignStatus\022\024\n\014s"
  "top_sign_id\030\001 \001(\t\0226\n\006status\030\002 \001(\0162&.apol"
  "lo.planning.StopSignStatus.Status\022\027\n\017sto"
  "p_start_time\030\003 \001(\001\022N\n\023lane_watch_vehicle"
  "s\030\004 \003(\01321.apollo.planning.StopSignStatus"
  ".LaneWatchVehicles\032<\n\021LaneWatchVehicles\022"
  "\017\n\007lane_id\030\001 \001(\t\022\026\n\016watch_vehicles\030\002 \003(\t"
  "\"N\n\006Status\022\013\n\007UNKNOWN\020\000\022\t\n\005DRIVE\020\001\022\010\n\004ST"
  "OP\020\002\022\010\n\004WAIT\020\003\022\t\n\005CREEP\020\004\022\r\n\tSTOP_DONE\020\005"
  "\"S\n\rPlanningState\0224\n\tpull_over\030\001 \001(\0132\037.a"
  "pollo.planning.PullOverStatusH\000B\014\n\nobjec"
  "t_tag\"\277\003\n\016PlanningStatus\0226\n\016planning_sta"
  "te\030\001 \001(\0132\036.apollo.planning.PlanningState"
  "\0226\n\013change_lane\030\002 \001(\0132!.apollo.planning."
  "ChangeLaneStatus\0223\n\tcrosswalk\030\003 \001(\0132 .ap"
  "ollo.planning.CrosswalkStatus\0222\n\rengage_"
  "advice\030\004 \001(\0132\033.apollo.common.EngageAdvic"
  "e\0223\n\trerouting\030\005 \001(\0132 .apollo.planning.R"
  "eroutingStatus\0227\n\014right_of_way\030\006 \001(\0132!.a"
  "pollo.planning.RightOfWayStatus\0222\n\tside_"
  "pass\030\007 \001(\0132\037.apollo.planning.SidePassSta"
  "tus\0222\n\tstop_sign\030\010 \001(\0132\037.apollo.planning"
  ".StopSignStatus"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto = {
    false, false, 2255, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto,
    "modules/planning/proto/planning_status.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChangeLaneStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[0];
}
bool ChangeLaneStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChangeLaneStatus_Status ChangeLaneStatus::IN_CHANGE_LANE;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_FAILED;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::CHANGE_LANE_SUCCESS;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::Status_MIN;
constexpr ChangeLaneStatus_Status ChangeLaneStatus::Status_MAX;
constexpr int ChangeLaneStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PullOverStatus_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[1];
}
bool PullOverStatus_Reason_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PullOverStatus_Reason PullOverStatus::DESTINATION;
constexpr PullOverStatus_Reason PullOverStatus::Reason_MIN;
constexpr PullOverStatus_Reason PullOverStatus::Reason_MAX;
constexpr int PullOverStatus::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PullOverStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[2];
}
bool PullOverStatus_Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PullOverStatus_Status PullOverStatus::UNKNOWN;
constexpr PullOverStatus_Status PullOverStatus::IN_OPERATION;
constexpr PullOverStatus_Status PullOverStatus::DONE;
constexpr PullOverStatus_Status PullOverStatus::Status_MIN;
constexpr PullOverStatus_Status PullOverStatus::Status_MAX;
constexpr int PullOverStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SidePassStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[3];
}
bool SidePassStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SidePassStatus_Status SidePassStatus::UNKNOWN;
constexpr SidePassStatus_Status SidePassStatus::DRIVE;
constexpr SidePassStatus_Status SidePassStatus::WAIT;
constexpr SidePassStatus_Status SidePassStatus::SIDEPASS;
constexpr SidePassStatus_Status SidePassStatus::Status_MIN;
constexpr SidePassStatus_Status SidePassStatus::Status_MAX;
constexpr int SidePassStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopSignStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[4];
}
bool StopSignStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopSignStatus_Status StopSignStatus::UNKNOWN;
constexpr StopSignStatus_Status StopSignStatus::DRIVE;
constexpr StopSignStatus_Status StopSignStatus::STOP;
constexpr StopSignStatus_Status StopSignStatus::WAIT;
constexpr StopSignStatus_Status StopSignStatus::CREEP;
constexpr StopSignStatus_Status StopSignStatus::STOP_DONE;
constexpr StopSignStatus_Status StopSignStatus::Status_MIN;
constexpr StopSignStatus_Status StopSignStatus::Status_MAX;
constexpr int StopSignStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ChangeLaneStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeLaneStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChangeLaneStatus::ChangeLaneStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ChangeLaneStatus)
}
ChangeLaneStatus::ChangeLaneStatus(const ChangeLaneStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path_id()) {
    _impl_.path_id_.Set(from._internal_path_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChangeLaneStatus)
}

inline void ChangeLaneStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_){}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.status_){1}
  };
  _impl_.path_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangeLaneStatus::~ChangeLaneStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChangeLaneStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeLaneStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_id_.Destroy();
}

void ChangeLaneStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeLaneStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChangeLaneStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    _impl_.timestamp_ = 0;
    _impl_.status_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeLaneStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ChangeLaneStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::ChangeLaneStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string path_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.ChangeLaneStatus.path_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeLaneStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChangeLaneStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string path_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path_id().data(), static_cast<int>(this->_internal_path_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.ChangeLaneStatus.path_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_id(), target);
  }

  // optional double timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChangeLaneStatus)
  return target;
}

size_t ChangeLaneStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChangeLaneStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string path_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path_id());
    }

    // optional double timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.ChangeLaneStatus.Status status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeLaneStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeLaneStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeLaneStatus::GetClassData() const { return &_class_data_; }

void ChangeLaneStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeLaneStatus *>(to)->MergeFrom(
      static_cast<const ChangeLaneStatus &>(from));
}


void ChangeLaneStatus::MergeFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChangeLaneStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_path_id(from._internal_path_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.status_ = from._impl_.status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeLaneStatus::CopyFrom(const ChangeLaneStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChangeLaneStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLaneStatus::IsInitialized() const {
  return true;
}

void ChangeLaneStatus::InternalSwap(ChangeLaneStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_id_, lhs_arena,
      &other->_impl_.path_id_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeLaneStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[0]);
}

// ===================================================================

class StopTimer::_Internal {
 public:
  using HasBits = decltype(std::declval<StopTimer>()._impl_._has_bits_);
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopTimer::StopTimer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopTimer)
}
StopTimer::StopTimer(const StopTimer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.stop_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obstacle_id()) {
    _impl_.obstacle_id_.Set(from._internal_obstacle_id(), 
      GetArenaForAllocation());
  }
  _impl_.stop_time_ = from._impl_.stop_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopTimer)
}

inline void StopTimer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.stop_time_){0}
  };
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopTimer::~StopTimer() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopTimer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopTimer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_id_.Destroy();
}

void StopTimer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopTimer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.obstacle_id_.ClearNonDefaultToEmpty();
  }
  _impl_.stop_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopTimer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.StopTimer.obstacle_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double stop_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_time(&has_bits);
          _impl_.stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopTimer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopTimer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopTimer.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obstacle_id(), target);
  }

  // optional double stop_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopTimer)
  return target;
}

size_t StopTimer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopTimer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string obstacle_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional double stop_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopTimer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopTimer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopTimer::GetClassData() const { return &_class_data_; }

void StopTimer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopTimer *>(to)->MergeFrom(
      static_cast<const StopTimer &>(from));
}


void StopTimer::MergeFrom(const StopTimer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopTimer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obstacle_id(from._internal_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_time_ = from._impl_.stop_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopTimer::CopyFrom(const StopTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTimer::IsInitialized() const {
  return true;
}

void StopTimer::InternalSwap(StopTimer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obstacle_id_, lhs_arena,
      &other->_impl_.obstacle_id_, rhs_arena
  );
  swap(_impl_.stop_time_, other->_impl_.stop_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopTimer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[1]);
}

// ===================================================================

class CrosswalkStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkStatus>()._impl_._has_bits_);
  static void set_has_crosswalk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CrosswalkStatus::CrosswalkStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CrosswalkStatus)
}
CrosswalkStatus::CrosswalkStatus(const CrosswalkStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_timers_){from._impl_.stop_timers_}
    , decltype(_impl_.crosswalk_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.crosswalk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosswalk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_crosswalk_id()) {
    _impl_.crosswalk_id_.Set(from._internal_crosswalk_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkStatus)
}

inline void CrosswalkStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_timers_){arena}
    , decltype(_impl_.crosswalk_id_){}
  };
  _impl_.crosswalk_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crosswalk_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CrosswalkStatus::~CrosswalkStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrosswalkStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_timers_.~RepeatedPtrField();
  _impl_.crosswalk_id_.Destroy();
}

void CrosswalkStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrosswalkStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_timers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.crosswalk_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrosswalkStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string crosswalk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_crosswalk_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.CrosswalkStatus.crosswalk_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.StopTimer stop_timers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_timers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrosswalkStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string crosswalk_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_crosswalk_id().data(), static_cast<int>(this->_internal_crosswalk_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.CrosswalkStatus.crosswalk_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_crosswalk_id(), target);
  }

  // repeated .apollo.planning.StopTimer stop_timers = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_timers_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_timers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkStatus)
  return target;
}

size_t CrosswalkStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.StopTimer stop_timers = 2;
  total_size += 1UL * this->_internal_stop_timers_size();
  for (const auto& msg : this->_impl_.stop_timers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string crosswalk_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_crosswalk_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrosswalkStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrosswalkStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrosswalkStatus::GetClassData() const { return &_class_data_; }

void CrosswalkStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrosswalkStatus *>(to)->MergeFrom(
      static_cast<const CrosswalkStatus &>(from));
}


void CrosswalkStatus::MergeFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.stop_timers_.MergeFrom(from._impl_.stop_timers_);
  if (from._internal_has_crosswalk_id()) {
    _internal_set_crosswalk_id(from._internal_crosswalk_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrosswalkStatus::CopyFrom(const CrosswalkStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkStatus::IsInitialized() const {
  return true;
}

void CrosswalkStatus::InternalSwap(CrosswalkStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stop_timers_.InternalSwap(&other->_impl_.stop_timers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crosswalk_id_, lhs_arena,
      &other->_impl_.crosswalk_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[2]);
}

// ===================================================================

class PullOverStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PullOverStatus>()._impl_._has_bits_);
  static void set_has_in_pull_over(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::common::PointENU& inlane_dest_point(const PullOverStatus* msg);
  static void set_has_inlane_dest_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::PointENU& start_point(const PullOverStatus* msg);
  static void set_has_start_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::PointENU& stop_point(const PullOverStatus* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_point_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_status_set_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::common::PointENU&
PullOverStatus::_Internal::inlane_dest_point(const PullOverStatus* msg) {
  return *msg->_impl_.inlane_dest_point_;
}
const ::apollo::common::PointENU&
PullOverStatus::_Internal::start_point(const PullOverStatus* msg) {
  return *msg->_impl_.start_point_;
}
const ::apollo::common::PointENU&
PullOverStatus::_Internal::stop_point(const PullOverStatus* msg) {
  return *msg->_impl_.stop_point_;
}
void PullOverStatus::clear_inlane_dest_point() {
  if (_impl_.inlane_dest_point_ != nullptr) _impl_.inlane_dest_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PullOverStatus::clear_start_point() {
  if (_impl_.start_point_ != nullptr) _impl_.start_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PullOverStatus::clear_stop_point() {
  if (_impl_.stop_point_ != nullptr) _impl_.stop_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PullOverStatus::PullOverStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PullOverStatus)
}
PullOverStatus::PullOverStatus(const PullOverStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inlane_dest_point_){nullptr}
    , decltype(_impl_.start_point_){nullptr}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_point_heading_){}
    , decltype(_impl_.status_set_time_){}
    , decltype(_impl_.in_pull_over_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inlane_dest_point()) {
    _impl_.inlane_dest_point_ = new ::apollo::common::PointENU(*from._impl_.inlane_dest_point_);
  }
  if (from._internal_has_start_point()) {
    _impl_.start_point_ = new ::apollo::common::PointENU(*from._impl_.start_point_);
  }
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::common::PointENU(*from._impl_.stop_point_);
  }
  ::memcpy(&_impl_.stop_point_heading_, &from._impl_.stop_point_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.stop_point_heading_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PullOverStatus)
}

inline void PullOverStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inlane_dest_point_){nullptr}
    , decltype(_impl_.start_point_){nullptr}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.stop_point_heading_){0}
    , decltype(_impl_.status_set_time_){0}
    , decltype(_impl_.in_pull_over_){false}
    , decltype(_impl_.status_){1}
    , decltype(_impl_.reason_){1}
  };
}

PullOverStatus::~PullOverStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PullOverStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullOverStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.inlane_dest_point_;
  if (this != internal_default_instance()) delete _impl_.start_point_;
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void PullOverStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullOverStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PullOverStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.inlane_dest_point_ != nullptr);
      _impl_.inlane_dest_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.start_point_ != nullptr);
      _impl_.start_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
      _impl_.stop_point_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.stop_point_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.in_pull_over_) -
        reinterpret_cast<char*>(&_impl_.stop_point_heading_)) + sizeof(_impl_.in_pull_over_));
    _impl_.status_ = 1;
    _impl_.reason_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullOverStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool in_pull_over = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_in_pull_over(&has_bits);
          _impl_.in_pull_over_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PullOverStatus.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PullOverStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::PullOverStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU inlane_dest_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inlane_dest_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU start_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU stop_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_point_heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_stop_point_heading(&has_bits);
          _impl_.stop_point_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PullOverStatus.Reason reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PullOverStatus_Reason_IsValid(val))) {
            _internal_set_reason(static_cast<::apollo::planning::PullOverStatus_Reason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double status_set_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_status_set_time(&has_bits);
          _impl_.status_set_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullOverStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PullOverStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool in_pull_over = 1 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_in_pull_over(), target);
  }

  // optional .apollo.planning.PullOverStatus.Status status = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional .apollo.common.PointENU inlane_dest_point = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inlane_dest_point(this),
        _Internal::inlane_dest_point(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.PointENU start_point = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::start_point(this),
        _Internal::start_point(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.PointENU stop_point = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double stop_point_heading = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_stop_point_heading(), target);
  }

  // optional .apollo.planning.PullOverStatus.Reason reason = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_reason(), target);
  }

  // optional double status_set_time = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_status_set_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PullOverStatus)
  return target;
}

size_t PullOverStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PullOverStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.PointENU inlane_dest_point = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inlane_dest_point_);
    }

    // optional .apollo.common.PointENU start_point = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_point_);
    }

    // optional .apollo.common.PointENU stop_point = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double stop_point_heading = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double status_set_time = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool in_pull_over = 1 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.PullOverStatus.Status status = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .apollo.planning.PullOverStatus.Reason reason = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullOverStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PullOverStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullOverStatus::GetClassData() const { return &_class_data_; }

void PullOverStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PullOverStatus *>(to)->MergeFrom(
      static_cast<const PullOverStatus &>(from));
}


void PullOverStatus::MergeFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PullOverStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_inlane_dest_point()->::apollo::common::PointENU::MergeFrom(from._internal_inlane_dest_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_start_point()->::apollo::common::PointENU::MergeFrom(from._internal_start_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_stop_point()->::apollo::common::PointENU::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.stop_point_heading_ = from._impl_.stop_point_heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.status_set_time_ = from._impl_.status_set_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.in_pull_over_ = from._impl_.in_pull_over_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.reason_ = from._impl_.reason_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullOverStatus::CopyFrom(const PullOverStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PullOverStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullOverStatus::IsInitialized() const {
  return true;
}

void PullOverStatus::InternalSwap(PullOverStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PullOverStatus, _impl_.in_pull_over_)
      + sizeof(PullOverStatus::_impl_.in_pull_over_)
      - PROTOBUF_FIELD_OFFSET(PullOverStatus, _impl_.inlane_dest_point_)>(
          reinterpret_cast<char*>(&_impl_.inlane_dest_point_),
          reinterpret_cast<char*>(&other->_impl_.inlane_dest_point_));
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.reason_, other->_impl_.reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullOverStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[3]);
}

// ===================================================================

class ReroutingStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<ReroutingStatus>()._impl_._has_bits_);
  static void set_has_last_rerouting_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReroutingStatus::ReroutingStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ReroutingStatus)
}
ReroutingStatus::ReroutingStatus(const ReroutingStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_rerouting_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.last_rerouting_time_ = from._impl_.last_rerouting_time_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingStatus)
}

inline void ReroutingStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_rerouting_time_){0}
  };
}

ReroutingStatus::~ReroutingStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReroutingStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReroutingStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReroutingStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.last_rerouting_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReroutingStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double last_rerouting_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_last_rerouting_time(&has_bits);
          _impl_.last_rerouting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReroutingStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double last_rerouting_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_last_rerouting_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingStatus)
  return target;
}

size_t ReroutingStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double last_rerouting_time = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReroutingStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReroutingStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReroutingStatus::GetClassData() const { return &_class_data_; }

void ReroutingStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReroutingStatus *>(to)->MergeFrom(
      static_cast<const ReroutingStatus &>(from));
}


void ReroutingStatus::MergeFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_rerouting_time()) {
    _internal_set_last_rerouting_time(from._internal_last_rerouting_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReroutingStatus::CopyFrom(const ReroutingStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingStatus::IsInitialized() const {
  return true;
}

void ReroutingStatus::InternalSwap(ReroutingStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.last_rerouting_time_, other->_impl_.last_rerouting_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReroutingStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[4]);
}

// ===================================================================

RightOfWayStatus_JunctionEntry_DoNotUse::RightOfWayStatus_JunctionEntry_DoNotUse() {}
RightOfWayStatus_JunctionEntry_DoNotUse::RightOfWayStatus_JunctionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RightOfWayStatus_JunctionEntry_DoNotUse::MergeFrom(const RightOfWayStatus_JunctionEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RightOfWayStatus_JunctionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[5]);
}

// ===================================================================

class RightOfWayStatus::_Internal {
 public:
};

RightOfWayStatus::RightOfWayStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RightOfWayStatus::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RightOfWayStatus)
}
RightOfWayStatus::RightOfWayStatus(const RightOfWayStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      /*decltype(_impl_.junction_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.junction_.MergeFrom(from._impl_.junction_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RightOfWayStatus)
}

inline void RightOfWayStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.junction_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RightOfWayStatus::~RightOfWayStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.RightOfWayStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RightOfWayStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.junction_.Destruct();
  _impl_.junction_.~MapField();
}

void RightOfWayStatus::ArenaDtor(void* object) {
  RightOfWayStatus* _this = reinterpret_cast< RightOfWayStatus* >(object);
  _this->_impl_.junction_.Destruct();
}
void RightOfWayStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RightOfWayStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RightOfWayStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junction_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RightOfWayStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bool> junction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.junction_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RightOfWayStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RightOfWayStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bool> junction = 1;
  if (!this->_internal_junction().empty()) {
    using MapType = ::_pb::Map<std::string, bool>;
    using WireHelper = RightOfWayStatus_JunctionEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_junction();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.planning.RightOfWayStatus.JunctionEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RightOfWayStatus)
  return target;
}

size_t RightOfWayStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RightOfWayStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bool> junction = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_junction_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, bool >::const_iterator
      it = this->_internal_junction().begin();
      it != this->_internal_junction().end(); ++it) {
    total_size += RightOfWayStatus_JunctionEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RightOfWayStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RightOfWayStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RightOfWayStatus::GetClassData() const { return &_class_data_; }

void RightOfWayStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RightOfWayStatus *>(to)->MergeFrom(
      static_cast<const RightOfWayStatus &>(from));
}


void RightOfWayStatus::MergeFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RightOfWayStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.junction_.MergeFrom(from._impl_.junction_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RightOfWayStatus::CopyFrom(const RightOfWayStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RightOfWayStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightOfWayStatus::IsInitialized() const {
  return true;
}

void RightOfWayStatus::InternalSwap(RightOfWayStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.junction_.InternalSwap(&other->_impl_.junction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RightOfWayStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[6]);
}

// ===================================================================

class SidePassStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<SidePassStatus>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wait_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pass_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_side(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SidePassStatus::SidePassStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SidePassStatus)
}
SidePassStatus::SidePassStatus(const SidePassStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_obstacle_id_){}
    , decltype(_impl_.wait_start_time_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pass_side_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pass_obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_obstacle_id()) {
    _impl_.pass_obstacle_id_.Set(from._internal_pass_obstacle_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.wait_start_time_, &from._impl_.wait_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pass_side_) -
    reinterpret_cast<char*>(&_impl_.wait_start_time_)) + sizeof(_impl_.pass_side_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SidePassStatus)
}

inline void SidePassStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_obstacle_id_){}
    , decltype(_impl_.wait_start_time_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.pass_side_){1}
  };
  _impl_.pass_obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SidePassStatus::~SidePassStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.SidePassStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SidePassStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pass_obstacle_id_.Destroy();
}

void SidePassStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SidePassStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SidePassStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pass_obstacle_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.wait_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.wait_start_time_)) + sizeof(_impl_.status_));
    _impl_.pass_side_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SidePassStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.SidePassStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::SidePassStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::SidePassStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wait_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_wait_start_time(&has_bits);
          _impl_.wait_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string pass_obstacle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pass_obstacle_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.SidePassStatus.pass_obstacle_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ObjectSidePass_Type_IsValid(val))) {
            _internal_set_pass_side(static_cast<::apollo::planning::ObjectSidePass_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SidePassStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SidePassStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.SidePassStatus.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional double wait_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_wait_start_time(), target);
  }

  // optional string pass_obstacle_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_obstacle_id().data(), static_cast<int>(this->_internal_pass_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.SidePassStatus.pass_obstacle_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_obstacle_id(), target);
  }

  // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pass_side(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SidePassStatus)
  return target;
}

size_t SidePassStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SidePassStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string pass_obstacle_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_obstacle_id());
    }

    // optional double wait_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.SidePassStatus.Status status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .apollo.planning.ObjectSidePass.Type pass_side = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pass_side());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SidePassStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SidePassStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SidePassStatus::GetClassData() const { return &_class_data_; }

void SidePassStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SidePassStatus *>(to)->MergeFrom(
      static_cast<const SidePassStatus &>(from));
}


void SidePassStatus::MergeFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SidePassStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pass_obstacle_id(from._internal_pass_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wait_start_time_ = from._impl_.wait_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.pass_side_ = from._impl_.pass_side_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SidePassStatus::CopyFrom(const SidePassStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SidePassStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SidePassStatus::IsInitialized() const {
  return true;
}

void SidePassStatus::InternalSwap(SidePassStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_obstacle_id_, lhs_arena,
      &other->_impl_.pass_obstacle_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SidePassStatus, _impl_.status_)
      + sizeof(SidePassStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SidePassStatus, _impl_.wait_start_time_)>(
          reinterpret_cast<char*>(&_impl_.wait_start_time_),
          reinterpret_cast<char*>(&other->_impl_.wait_start_time_));
  swap(_impl_.pass_side_, other->_impl_.pass_side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SidePassStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[7]);
}

// ===================================================================

class StopSignStatus_LaneWatchVehicles::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSignStatus_LaneWatchVehicles>()._impl_._has_bits_);
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopSignStatus_LaneWatchVehicles::StopSignStatus_LaneWatchVehicles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
}
StopSignStatus_LaneWatchVehicles::StopSignStatus_LaneWatchVehicles(const StopSignStatus_LaneWatchVehicles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.watch_vehicles_){from._impl_.watch_vehicles_}
    , decltype(_impl_.lane_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
}

inline void StopSignStatus_LaneWatchVehicles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.watch_vehicles_){arena}
    , decltype(_impl_.lane_id_){}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopSignStatus_LaneWatchVehicles::~StopSignStatus_LaneWatchVehicles() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopSignStatus_LaneWatchVehicles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.watch_vehicles_.~RepeatedPtrField();
  _impl_.lane_id_.Destroy();
}

void StopSignStatus_LaneWatchVehicles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopSignStatus_LaneWatchVehicles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.watch_vehicles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lane_id_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSignStatus_LaneWatchVehicles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated string watch_vehicles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_watch_vehicles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSignStatus_LaneWatchVehicles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lane_id(), target);
  }

  // repeated string watch_vehicles = 2;
  for (int i = 0, n = this->_internal_watch_vehicles_size(); i < n; i++) {
    const auto& s = this->_internal_watch_vehicles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.LaneWatchVehicles.watch_vehicles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus.LaneWatchVehicles)
  return target;
}

size_t StopSignStatus_LaneWatchVehicles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string watch_vehicles = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.watch_vehicles_.size());
  for (int i = 0, n = _impl_.watch_vehicles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.watch_vehicles_.Get(i));
  }

  // optional string lane_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSignStatus_LaneWatchVehicles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopSignStatus_LaneWatchVehicles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSignStatus_LaneWatchVehicles::GetClassData() const { return &_class_data_; }

void StopSignStatus_LaneWatchVehicles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopSignStatus_LaneWatchVehicles *>(to)->MergeFrom(
      static_cast<const StopSignStatus_LaneWatchVehicles &>(from));
}


void StopSignStatus_LaneWatchVehicles::MergeFrom(const StopSignStatus_LaneWatchVehicles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.watch_vehicles_.MergeFrom(from._impl_.watch_vehicles_);
  if (from._internal_has_lane_id()) {
    _internal_set_lane_id(from._internal_lane_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSignStatus_LaneWatchVehicles::CopyFrom(const StopSignStatus_LaneWatchVehicles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus.LaneWatchVehicles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus_LaneWatchVehicles::IsInitialized() const {
  return true;
}

void StopSignStatus_LaneWatchVehicles::InternalSwap(StopSignStatus_LaneWatchVehicles* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.watch_vehicles_.InternalSwap(&other->_impl_.watch_vehicles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignStatus_LaneWatchVehicles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[8]);
}

// ===================================================================

class StopSignStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSignStatus>()._impl_._has_bits_);
  static void set_has_stop_sign_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopSignStatus::StopSignStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopSignStatus)
}
StopSignStatus::StopSignStatus(const StopSignStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_watch_vehicles_){from._impl_.lane_watch_vehicles_}
    , decltype(_impl_.stop_sign_id_){}
    , decltype(_impl_.stop_start_time_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_sign_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_sign_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stop_sign_id()) {
    _impl_.stop_sign_id_.Set(from._internal_stop_sign_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stop_start_time_, &from._impl_.stop_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.stop_start_time_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignStatus)
}

inline void StopSignStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_watch_vehicles_){arena}
    , decltype(_impl_.stop_sign_id_){}
    , decltype(_impl_.stop_start_time_){0}
    , decltype(_impl_.status_){0}
  };
  _impl_.stop_sign_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_sign_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopSignStatus::~StopSignStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopSignStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_watch_vehicles_.~RepeatedPtrField();
  _impl_.stop_sign_id_.Destroy();
}

void StopSignStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopSignStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_watch_vehicles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.stop_sign_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.stop_start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.stop_start_time_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSignStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string stop_sign_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stop_sign_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.StopSignStatus.stop_sign_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StopSignStatus.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopSignStatus_Status_IsValid(val))) {
            _internal_set_status(static_cast<::apollo::planning::StopSignStatus_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double stop_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_stop_start_time(&has_bits);
          _impl_.stop_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_watch_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSignStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string stop_sign_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stop_sign_id().data(), static_cast<int>(this->_internal_stop_sign_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.StopSignStatus.stop_sign_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_sign_id(), target);
  }

  // optional .apollo.planning.StopSignStatus.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // optional double stop_start_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_stop_start_time(), target);
  }

  // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_watch_vehicles_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_watch_vehicles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignStatus)
  return target;
}

size_t StopSignStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.StopSignStatus.LaneWatchVehicles lane_watch_vehicles = 4;
  total_size += 1UL * this->_internal_lane_watch_vehicles_size();
  for (const auto& msg : this->_impl_.lane_watch_vehicles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string stop_sign_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stop_sign_id());
    }

    // optional double stop_start_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StopSignStatus.Status status = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSignStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopSignStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSignStatus::GetClassData() const { return &_class_data_; }

void StopSignStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopSignStatus *>(to)->MergeFrom(
      static_cast<const StopSignStatus &>(from));
}


void StopSignStatus::MergeFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lane_watch_vehicles_.MergeFrom(from._impl_.lane_watch_vehicles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stop_sign_id(from._internal_stop_sign_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_start_time_ = from._impl_.stop_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.status_ = from._impl_.status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSignStatus::CopyFrom(const StopSignStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignStatus::IsInitialized() const {
  return true;
}

void StopSignStatus::InternalSwap(StopSignStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_watch_vehicles_.InternalSwap(&other->_impl_.lane_watch_vehicles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_sign_id_, lhs_arena,
      &other->_impl_.stop_sign_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopSignStatus, _impl_.status_)
      + sizeof(StopSignStatus::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(StopSignStatus, _impl_.stop_start_time_)>(
          reinterpret_cast<char*>(&_impl_.stop_start_time_),
          reinterpret_cast<char*>(&other->_impl_.stop_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[9]);
}

// ===================================================================

class PlanningState::_Internal {
 public:
  static const ::apollo::planning::PullOverStatus& pull_over(const PlanningState* msg);
};

const ::apollo::planning::PullOverStatus&
PlanningState::_Internal::pull_over(const PlanningState* msg) {
  return *msg->_impl_.object_tag_.pull_over_;
}
void PlanningState::set_allocated_pull_over(::apollo::planning::PullOverStatus* pull_over) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_object_tag();
  if (pull_over) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pull_over);
    if (message_arena != submessage_arena) {
      pull_over = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pull_over, submessage_arena);
    }
    set_has_pull_over();
    _impl_.object_tag_.pull_over_ = pull_over;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningState.pull_over)
}
PlanningState::PlanningState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningState)
}
PlanningState::PlanningState(const PlanningState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.object_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_object_tag();
  switch (from.object_tag_case()) {
    case kPullOver: {
      _internal_mutable_pull_over()->::apollo::planning::PullOverStatus::MergeFrom(from._internal_pull_over());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningState)
}

inline void PlanningState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_tag_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_object_tag();
}

PlanningState::~PlanningState() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_object_tag()) {
    clear_object_tag();
  }
}

void PlanningState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningState::clear_object_tag() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningState)
  switch (object_tag_case()) {
    case kPullOver: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.object_tag_.pull_over_;
      }
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OBJECT_TAG_NOT_SET;
}


void PlanningState::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_object_tag();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .apollo.planning.PullOverStatus pull_over = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull_over(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .apollo.planning.PullOverStatus pull_over = 1;
  if (_internal_has_pull_over()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pull_over(this),
        _Internal::pull_over(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningState)
  return target;
}

size_t PlanningState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (object_tag_case()) {
    // .apollo.planning.PullOverStatus pull_over = 1;
    case kPullOver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.object_tag_.pull_over_);
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningState::GetClassData() const { return &_class_data_; }

void PlanningState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningState *>(to)->MergeFrom(
      static_cast<const PlanningState &>(from));
}


void PlanningState::MergeFrom(const PlanningState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.object_tag_case()) {
    case kPullOver: {
      _internal_mutable_pull_over()->::apollo::planning::PullOverStatus::MergeFrom(from._internal_pull_over());
      break;
    }
    case OBJECT_TAG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningState::CopyFrom(const PlanningState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningState::IsInitialized() const {
  return true;
}

void PlanningState::InternalSwap(PlanningState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_tag_, other->_impl_.object_tag_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[10]);
}

// ===================================================================

class PlanningStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningStatus>()._impl_._has_bits_);
  static const ::apollo::planning::PlanningState& planning_state(const PlanningStatus* msg);
  static void set_has_planning_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ChangeLaneStatus& change_lane(const PlanningStatus* msg);
  static void set_has_change_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::CrosswalkStatus& crosswalk(const PlanningStatus* msg);
  static void set_has_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const PlanningStatus* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::ReroutingStatus& rerouting(const PlanningStatus* msg);
  static void set_has_rerouting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::RightOfWayStatus& right_of_way(const PlanningStatus* msg);
  static void set_has_right_of_way(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::SidePassStatus& side_pass(const PlanningStatus* msg);
  static void set_has_side_pass(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning::StopSignStatus& stop_sign(const PlanningStatus* msg);
  static void set_has_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::planning::PlanningState&
PlanningStatus::_Internal::planning_state(const PlanningStatus* msg) {
  return *msg->_impl_.planning_state_;
}
const ::apollo::planning::ChangeLaneStatus&
PlanningStatus::_Internal::change_lane(const PlanningStatus* msg) {
  return *msg->_impl_.change_lane_;
}
const ::apollo::planning::CrosswalkStatus&
PlanningStatus::_Internal::crosswalk(const PlanningStatus* msg) {
  return *msg->_impl_.crosswalk_;
}
const ::apollo::common::EngageAdvice&
PlanningStatus::_Internal::engage_advice(const PlanningStatus* msg) {
  return *msg->_impl_.engage_advice_;
}
const ::apollo::planning::ReroutingStatus&
PlanningStatus::_Internal::rerouting(const PlanningStatus* msg) {
  return *msg->_impl_.rerouting_;
}
const ::apollo::planning::RightOfWayStatus&
PlanningStatus::_Internal::right_of_way(const PlanningStatus* msg) {
  return *msg->_impl_.right_of_way_;
}
const ::apollo::planning::SidePassStatus&
PlanningStatus::_Internal::side_pass(const PlanningStatus* msg) {
  return *msg->_impl_.side_pass_;
}
const ::apollo::planning::StopSignStatus&
PlanningStatus::_Internal::stop_sign(const PlanningStatus* msg) {
  return *msg->_impl_.stop_sign_;
}
void PlanningStatus::clear_engage_advice() {
  if (_impl_.engage_advice_ != nullptr) _impl_.engage_advice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PlanningStatus::PlanningStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningStatus)
}
PlanningStatus::PlanningStatus(const PlanningStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_state_){nullptr}
    , decltype(_impl_.change_lane_){nullptr}
    , decltype(_impl_.crosswalk_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.rerouting_){nullptr}
    , decltype(_impl_.right_of_way_){nullptr}
    , decltype(_impl_.side_pass_){nullptr}
    , decltype(_impl_.stop_sign_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning_state()) {
    _impl_.planning_state_ = new ::apollo::planning::PlanningState(*from._impl_.planning_state_);
  }
  if (from._internal_has_change_lane()) {
    _impl_.change_lane_ = new ::apollo::planning::ChangeLaneStatus(*from._impl_.change_lane_);
  }
  if (from._internal_has_crosswalk()) {
    _impl_.crosswalk_ = new ::apollo::planning::CrosswalkStatus(*from._impl_.crosswalk_);
  }
  if (from._internal_has_engage_advice()) {
    _impl_.engage_advice_ = new ::apollo::common::EngageAdvice(*from._impl_.engage_advice_);
  }
  if (from._internal_has_rerouting()) {
    _impl_.rerouting_ = new ::apollo::planning::ReroutingStatus(*from._impl_.rerouting_);
  }
  if (from._internal_has_right_of_way()) {
    _impl_.right_of_way_ = new ::apollo::planning::RightOfWayStatus(*from._impl_.right_of_way_);
  }
  if (from._internal_has_side_pass()) {
    _impl_.side_pass_ = new ::apollo::planning::SidePassStatus(*from._impl_.side_pass_);
  }
  if (from._internal_has_stop_sign()) {
    _impl_.stop_sign_ = new ::apollo::planning::StopSignStatus(*from._impl_.stop_sign_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningStatus)
}

inline void PlanningStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_state_){nullptr}
    , decltype(_impl_.change_lane_){nullptr}
    , decltype(_impl_.crosswalk_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.rerouting_){nullptr}
    , decltype(_impl_.right_of_way_){nullptr}
    , decltype(_impl_.side_pass_){nullptr}
    , decltype(_impl_.stop_sign_){nullptr}
  };
}

PlanningStatus::~PlanningStatus() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.planning_state_;
  if (this != internal_default_instance()) delete _impl_.change_lane_;
  if (this != internal_default_instance()) delete _impl_.crosswalk_;
  if (this != internal_default_instance()) delete _impl_.engage_advice_;
  if (this != internal_default_instance()) delete _impl_.rerouting_;
  if (this != internal_default_instance()) delete _impl_.right_of_way_;
  if (this != internal_default_instance()) delete _impl_.side_pass_;
  if (this != internal_default_instance()) delete _impl_.stop_sign_;
}

void PlanningStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.planning_state_ != nullptr);
      _impl_.planning_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.change_lane_ != nullptr);
      _impl_.change_lane_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.crosswalk_ != nullptr);
      _impl_.crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.engage_advice_ != nullptr);
      _impl_.engage_advice_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.rerouting_ != nullptr);
      _impl_.rerouting_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.right_of_way_ != nullptr);
      _impl_.right_of_way_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.side_pass_ != nullptr);
      _impl_.side_pass_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.stop_sign_ != nullptr);
      _impl_.stop_sign_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.PlanningState planning_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ReroutingStatus rerouting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rerouting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.RightOfWayStatus right_of_way = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_of_way(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.SidePassStatus side_pass = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_side_pass(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StopSignStatus stop_sign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PlanningState planning_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::planning_state(this),
        _Internal::planning_state(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::change_lane(this),
        _Internal::change_lane(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::crosswalk(this),
        _Internal::crosswalk(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::engage_advice(this),
        _Internal::engage_advice(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ReroutingStatus rerouting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rerouting(this),
        _Internal::rerouting(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.RightOfWayStatus right_of_way = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::right_of_way(this),
        _Internal::right_of_way(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.SidePassStatus side_pass = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::side_pass(this),
        _Internal::side_pass(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.StopSignStatus stop_sign = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::stop_sign(this),
        _Internal::stop_sign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningStatus)
  return target;
}

size_t PlanningStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.PlanningState planning_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_state_);
    }

    // optional .apollo.planning.ChangeLaneStatus change_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_lane_);
    }

    // optional .apollo.planning.CrosswalkStatus crosswalk = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.crosswalk_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.engage_advice_);
    }

    // optional .apollo.planning.ReroutingStatus rerouting = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rerouting_);
    }

    // optional .apollo.planning.RightOfWayStatus right_of_way = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_of_way_);
    }

    // optional .apollo.planning.SidePassStatus side_pass = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.side_pass_);
    }

    // optional .apollo.planning.StopSignStatus stop_sign = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_sign_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningStatus::GetClassData() const { return &_class_data_; }

void PlanningStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningStatus *>(to)->MergeFrom(
      static_cast<const PlanningStatus &>(from));
}


void PlanningStatus::MergeFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_planning_state()->::apollo::planning::PlanningState::MergeFrom(from._internal_planning_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_change_lane()->::apollo::planning::ChangeLaneStatus::MergeFrom(from._internal_change_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkStatus::MergeFrom(from._internal_crosswalk());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingStatus::MergeFrom(from._internal_rerouting());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_right_of_way()->::apollo::planning::RightOfWayStatus::MergeFrom(from._internal_right_of_way());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_side_pass()->::apollo::planning::SidePassStatus::MergeFrom(from._internal_side_pass());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignStatus::MergeFrom(from._internal_stop_sign());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningStatus::CopyFrom(const PlanningStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningStatus::IsInitialized() const {
  return true;
}

void PlanningStatus::InternalSwap(PlanningStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningStatus, _impl_.stop_sign_)
      + sizeof(PlanningStatus::_impl_.stop_sign_)
      - PROTOBUF_FIELD_OFFSET(PlanningStatus, _impl_.planning_state_)>(
          reinterpret_cast<char*>(&_impl_.planning_state_),
          reinterpret_cast<char*>(&other->_impl_.planning_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fstatus_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::ChangeLaneStatus*
Arena::CreateMaybeMessage< ::apollo::planning::ChangeLaneStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ChangeLaneStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopTimer*
Arena::CreateMaybeMessage< ::apollo::planning::StopTimer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopTimer >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CrosswalkStatus*
Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CrosswalkStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PullOverStatus*
Arena::CreateMaybeMessage< ::apollo::planning::PullOverStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PullOverStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReroutingStatus*
Arena::CreateMaybeMessage< ::apollo::planning::ReroutingStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ReroutingStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RightOfWayStatus_JunctionEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RightOfWayStatus*
Arena::CreateMaybeMessage< ::apollo::planning::RightOfWayStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RightOfWayStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SidePassStatus*
Arena::CreateMaybeMessage< ::apollo::planning::SidePassStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SidePassStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopSignStatus_LaneWatchVehicles*
Arena::CreateMaybeMessage< ::apollo::planning::StopSignStatus_LaneWatchVehicles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopSignStatus_LaneWatchVehicles >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopSignStatus*
Arena::CreateMaybeMessage< ::apollo::planning::StopSignStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopSignStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningState*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningState >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningStatus*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
