// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto

#include "modules/planning/proto/navi_speed_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preferred_accel_)*/2
  , /*decltype(_impl_.preferred_decel_)*/2
  , /*decltype(_impl_.max_accel_)*/4
  , /*decltype(_impl_.max_decel_)*/5
  , /*decltype(_impl_.obstacle_buffer_)*/0.5
  , /*decltype(_impl_.safe_distance_base_)*/2
  , /*decltype(_impl_.safe_distance_ratio_)*/1} {}
struct NaviSpeedDeciderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NaviSpeedDeciderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NaviSpeedDeciderConfigDefaultTypeInternal() {}
  union {
    NaviSpeedDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.preferred_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.preferred_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.max_accel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.max_decel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.safe_distance_base_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviSpeedDeciderConfig, _impl_.safe_distance_ratio_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::apollo::planning::NaviSpeedDeciderConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_NaviSpeedDeciderConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/planning/proto/navi_speed_deci"
  "der_config.proto\022\017apollo.planning\"\331\001\n\026Na"
  "viSpeedDeciderConfig\022\032\n\017preferred_accel\030"
  "\001 \001(\001:\0012\022\032\n\017preferred_decel\030\002 \001(\001:\0012\022\024\n\t"
  "max_accel\030\003 \001(\001:\0014\022\024\n\tmax_decel\030\004 \001(\001:\0015"
  "\022\034\n\017obstacle_buffer\030\005 \001(\001:\0030.5\022\035\n\022safe_d"
  "istance_base\030\007 \001(\001:\0012\022\036\n\023safe_distance_r"
  "atio\030\010 \001(\001:\0011"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto = {
    false, false, 293, descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
    "modules/planning/proto/navi_speed_decider_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class NaviSpeedDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviSpeedDeciderConfig>()._impl_._has_bits_);
  static void set_has_preferred_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_accel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_decel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_safe_distance_base(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_safe_distance_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviSpeedDeciderConfig)
}
NaviSpeedDeciderConfig::NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferred_accel_){}
    , decltype(_impl_.preferred_decel_){}
    , decltype(_impl_.max_accel_){}
    , decltype(_impl_.max_decel_){}
    , decltype(_impl_.obstacle_buffer_){}
    , decltype(_impl_.safe_distance_base_){}
    , decltype(_impl_.safe_distance_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.preferred_accel_, &from._impl_.preferred_accel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.safe_distance_ratio_) -
    reinterpret_cast<char*>(&_impl_.preferred_accel_)) + sizeof(_impl_.safe_distance_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviSpeedDeciderConfig)
}

inline void NaviSpeedDeciderConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferred_accel_){2}
    , decltype(_impl_.preferred_decel_){2}
    , decltype(_impl_.max_accel_){4}
    , decltype(_impl_.max_decel_){5}
    , decltype(_impl_.obstacle_buffer_){0.5}
    , decltype(_impl_.safe_distance_base_){2}
    , decltype(_impl_.safe_distance_ratio_){1}
  };
}

NaviSpeedDeciderConfig::~NaviSpeedDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviSpeedDeciderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NaviSpeedDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NaviSpeedDeciderConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NaviSpeedDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviSpeedDeciderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    _impl_.preferred_accel_ = 2;
    _impl_.preferred_decel_ = 2;
    _impl_.max_accel_ = 4;
    _impl_.max_decel_ = 5;
    _impl_.obstacle_buffer_ = 0.5;
    _impl_.safe_distance_base_ = 2;
    _impl_.safe_distance_ratio_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviSpeedDeciderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double preferred_accel = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_preferred_accel(&has_bits);
          _impl_.preferred_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_decel = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_preferred_decel(&has_bits);
          _impl_.preferred_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_accel = 3 [default = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_accel(&has_bits);
          _impl_.max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_decel = 4 [default = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_decel(&has_bits);
          _impl_.max_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_buffer = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_obstacle_buffer(&has_bits);
          _impl_.obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance_base = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_safe_distance_base(&has_bits);
          _impl_.safe_distance_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double safe_distance_ratio = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_safe_distance_ratio(&has_bits);
          _impl_.safe_distance_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NaviSpeedDeciderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviSpeedDeciderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double preferred_accel = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_preferred_accel(), target);
  }

  // optional double preferred_decel = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_preferred_decel(), target);
  }

  // optional double max_accel = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_accel(), target);
  }

  // optional double max_decel = 4 [default = 5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_decel(), target);
  }

  // optional double obstacle_buffer = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_obstacle_buffer(), target);
  }

  // optional double safe_distance_base = 7 [default = 2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_safe_distance_base(), target);
  }

  // optional double safe_distance_ratio = 8 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_safe_distance_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviSpeedDeciderConfig)
  return target;
}

size_t NaviSpeedDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviSpeedDeciderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double preferred_accel = 1 [default = 2];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double preferred_decel = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_accel = 3 [default = 4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_decel = 4 [default = 5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_buffer = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_base = 7 [default = 2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double safe_distance_ratio = 8 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviSpeedDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviSpeedDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviSpeedDeciderConfig::GetClassData() const { return &_class_data_; }

void NaviSpeedDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviSpeedDeciderConfig *>(to)->MergeFrom(
      static_cast<const NaviSpeedDeciderConfig &>(from));
}


void NaviSpeedDeciderConfig::MergeFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviSpeedDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preferred_accel_ = from._impl_.preferred_accel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.preferred_decel_ = from._impl_.preferred_decel_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_accel_ = from._impl_.max_accel_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_decel_ = from._impl_.max_decel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.obstacle_buffer_ = from._impl_.obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.safe_distance_base_ = from._impl_.safe_distance_base_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.safe_distance_ratio_ = from._impl_.safe_distance_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviSpeedDeciderConfig::CopyFrom(const NaviSpeedDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviSpeedDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviSpeedDeciderConfig::IsInitialized() const {
  return true;
}

void NaviSpeedDeciderConfig::InternalSwap(NaviSpeedDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.preferred_accel_, other->_impl_.preferred_accel_);
  swap(_impl_.preferred_decel_, other->_impl_.preferred_decel_);
  swap(_impl_.max_accel_, other->_impl_.max_accel_);
  swap(_impl_.max_decel_, other->_impl_.max_decel_);
  swap(_impl_.obstacle_buffer_, other->_impl_.obstacle_buffer_);
  swap(_impl_.safe_distance_base_, other->_impl_.safe_distance_base_);
  swap(_impl_.safe_distance_ratio_, other->_impl_.safe_distance_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviSpeedDeciderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviSpeedDeciderConfig*
Arena::CreateMaybeMessage< ::apollo::planning::NaviSpeedDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviSpeedDeciderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
