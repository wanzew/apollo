// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/reference_line_smoother_config.proto

#include "modules/planning/proto/reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR QpSplineSmootherConfig::QpSplineSmootherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.second_derivative_weight_)*/0
  , /*decltype(_impl_.spline_order_)*/5u
  , /*decltype(_impl_.max_spline_length_)*/25
  , /*decltype(_impl_.regularization_weight_)*/0.1
  , /*decltype(_impl_.third_derivative_weight_)*/100} {}
struct QpSplineSmootherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QpSplineSmootherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QpSplineSmootherConfigDefaultTypeInternal() {}
  union {
    QpSplineSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QpSplineSmootherConfigDefaultTypeInternal _QpSplineSmootherConfig_default_instance_;
PROTOBUF_CONSTEXPR SpiralSmootherConfig::SpiralSmootherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.opt_weight_curve_length_)*/0
  , /*decltype(_impl_.opt_weight_d2kappa_)*/0
  , /*decltype(_impl_.max_deviation_)*/0.1
  , /*decltype(_impl_.piecewise_length_)*/10
  , /*decltype(_impl_.opt_tol_)*/1e-08
  , /*decltype(_impl_.max_iteration_)*/1000
  , /*decltype(_impl_.opt_acceptable_iteration_)*/15
  , /*decltype(_impl_.opt_acceptable_tol_)*/1e-06
  , /*decltype(_impl_.opt_weight_kappa_)*/1.5
  , /*decltype(_impl_.opt_weight_dkappa_)*/1} {}
struct SpiralSmootherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpiralSmootherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpiralSmootherConfigDefaultTypeInternal() {}
  union {
    SpiralSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpiralSmootherConfigDefaultTypeInternal _SpiralSmootherConfig_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_constraint_interval_)*/5
  , /*decltype(_impl_.longitudinal_boundary_bound_)*/1
  , /*decltype(_impl_.lateral_boundary_bound_)*/0.1
  , /*decltype(_impl_.curb_shift_)*/0.2
  , /*decltype(_impl_.num_of_total_points_)*/500u
  , /*decltype(_impl_.driving_side_)*/2
  , /*decltype(_impl_.wide_lane_threshold_factor_)*/2
  , /*decltype(_impl_.wide_lane_shift_remain_factor_)*/0.5
  , /*decltype(_impl_.resolution_)*/0.02
  , /*decltype(_impl_.SmootherConfig_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ReferenceLineSmootherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineSmootherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineSmootherConfigDefaultTypeInternal() {}
  union {
    ReferenceLineSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineSmootherConfigDefaultTypeInternal _ReferenceLineSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_.spline_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_.max_spline_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_.regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_.second_derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineSmootherConfig, _impl_.third_derivative_weight_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.max_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.piecewise_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.max_iteration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_acceptable_iteration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_weight_curve_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_weight_kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_weight_dkappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SpiralSmootherConfig, _impl_.opt_weight_d2kappa_),
  2,
  3,
  5,
  4,
  7,
  6,
  0,
  8,
  9,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.max_constraint_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.longitudinal_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.num_of_total_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.curb_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.driving_side_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.wide_lane_threshold_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.wide_lane_shift_remain_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.resolution_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineSmootherConfig, _impl_.SmootherConfig_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::apollo::planning::QpSplineSmootherConfig)},
  { 16, 32, -1, sizeof(::apollo::planning::SpiralSmootherConfig)},
  { 42, 60, -1, sizeof(::apollo::planning::ReferenceLineSmootherConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_QpSplineSmootherConfig_default_instance_._instance,
  &::apollo::planning::_SpiralSmootherConfig_default_instance_._instance,
  &::apollo::planning::_ReferenceLineSmootherConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/planning/proto/reference_line_"
  "smoother_config.proto\022\017apollo.planning\"\277"
  "\001\n\026QpSplineSmootherConfig\022\027\n\014spline_orde"
  "r\030\001 \001(\r:\0015\022\035\n\021max_spline_length\030\002 \001(\001:\0022"
  "5\022\"\n\025regularization_weight\030\003 \001(\001:\0030.1\022#\n"
  "\030second_derivative_weight\030\004 \001(\001:\0010\022$\n\027th"
  "ird_derivative_weight\030\005 \001(\001:\003100\"\316\002\n\024Spi"
  "ralSmootherConfig\022\032\n\rmax_deviation\030\001 \001(\001"
  ":\0030.1\022\034\n\020piecewise_length\030\002 \001(\001:\00210\022\033\n\rm"
  "ax_iteration\030\003 \001(\005:\0041000\022\026\n\007opt_tol\030\004 \001("
  "\001:\0051e-08\022!\n\022opt_acceptable_tol\030\005 \001(\001:\0051e"
  "-06\022$\n\030opt_acceptable_iteration\030\006 \001(\005:\0021"
  "5\022\"\n\027opt_weight_curve_length\030\007 \001(\001:\0010\022\035\n"
  "\020opt_weight_kappa\030\010 \001(\001:\0031.5\022\034\n\021opt_weig"
  "ht_dkappa\030\t \001(\001:\0011\022\035\n\022opt_weight_d2kappa"
  "\030\n \001(\001:\0010\"\272\004\n\033ReferenceLineSmootherConfi"
  "g\022\"\n\027max_constraint_interval\030\001 \001(\001:\0015\022&\n"
  "\033longitudinal_boundary_bound\030\002 \001(\001:\0011\022#\n"
  "\026lateral_boundary_bound\030\003 \001(\001:\0030.1\022 \n\023nu"
  "m_of_total_points\030\004 \001(\r:\003500\022\027\n\ncurb_shi"
  "ft\030\005 \001(\001:\0030.2\022U\n\014driving_side\030\006 \001(\01628.ap"
  "ollo.planning.ReferenceLineSmootherConfi"
  "g.DrivingSide:\005RIGHT\022%\n\032wide_lane_thresh"
  "old_factor\030\007 \001(\001:\0012\022*\n\035wide_lane_shift_r"
  "emain_factor\030\010 \001(\001:\0030.5\022\030\n\nresolution\030\t "
  "\001(\001:\0040.02\022<\n\tqp_spline\030\024 \001(\0132\'.apollo.pl"
  "anning.QpSplineSmootherConfigH\000\0227\n\006spira"
  "l\030\025 \001(\0132%.apollo.planning.SpiralSmoother"
  "ConfigH\000\"\"\n\013DrivingSide\022\010\n\004LEFT\020\001\022\t\n\005RIG"
  "HT\020\002B\020\n\016SmootherConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto = {
    false, false, 1182, descriptor_table_protodef_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto,
    "modules/planning/proto/reference_line_smoother_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceLineSmootherConfig_DrivingSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[0];
}
bool ReferenceLineSmootherConfig_DrivingSide_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::LEFT;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::RIGHT;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MIN;
constexpr ReferenceLineSmootherConfig_DrivingSide ReferenceLineSmootherConfig::DrivingSide_MAX;
constexpr int ReferenceLineSmootherConfig::DrivingSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class QpSplineSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpSplineSmootherConfig>()._impl_._has_bits_);
  static void set_has_spline_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_spline_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_regularization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_second_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_third_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

QpSplineSmootherConfig::QpSplineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QpSplineSmootherConfig)
}
QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.second_derivative_weight_){}
    , decltype(_impl_.spline_order_){}
    , decltype(_impl_.max_spline_length_){}
    , decltype(_impl_.regularization_weight_){}
    , decltype(_impl_.third_derivative_weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.second_derivative_weight_, &from._impl_.second_derivative_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.third_derivative_weight_) -
    reinterpret_cast<char*>(&_impl_.second_derivative_weight_)) + sizeof(_impl_.third_derivative_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineSmootherConfig)
}

inline void QpSplineSmootherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.second_derivative_weight_){0}
    , decltype(_impl_.spline_order_){5u}
    , decltype(_impl_.max_spline_length_){25}
    , decltype(_impl_.regularization_weight_){0.1}
    , decltype(_impl_.third_derivative_weight_){100}
  };
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineSmootherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QpSplineSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QpSplineSmootherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    _impl_.second_derivative_weight_ = 0;
    _impl_.spline_order_ = 5u;
    _impl_.max_spline_length_ = 25;
    _impl_.regularization_weight_ = 0.1;
    _impl_.third_derivative_weight_ = 100;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpSplineSmootherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spline_order = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spline_order(&has_bits);
          _impl_.spline_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_spline_length = 2 [default = 25];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_spline_length(&has_bits);
          _impl_.max_spline_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double regularization_weight = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_regularization_weight(&has_bits);
          _impl_.regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double second_derivative_weight = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_second_derivative_weight(&has_bits);
          _impl_.second_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double third_derivative_weight = 5 [default = 100];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_third_derivative_weight(&has_bits);
          _impl_.third_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpSplineSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spline_order = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_spline_length(), target);
  }

  // optional double regularization_weight = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_regularization_weight(), target);
  }

  // optional double second_derivative_weight = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 5 [default = 100];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_third_derivative_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineSmootherConfig)
  return target;
}

size_t QpSplineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double second_derivative_weight = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spline_order());
    }

    // optional double max_spline_length = 2 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 3 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double third_derivative_weight = 5 [default = 100];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpSplineSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpSplineSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpSplineSmootherConfig::GetClassData() const { return &_class_data_; }

void QpSplineSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpSplineSmootherConfig *>(to)->MergeFrom(
      static_cast<const QpSplineSmootherConfig &>(from));
}


void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.second_derivative_weight_ = from._impl_.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.spline_order_ = from._impl_.spline_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_spline_length_ = from._impl_.max_spline_length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.regularization_weight_ = from._impl_.regularization_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.third_derivative_weight_ = from._impl_.third_derivative_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.second_derivative_weight_, other->_impl_.second_derivative_weight_);
  swap(_impl_.spline_order_, other->_impl_.spline_order_);
  swap(_impl_.max_spline_length_, other->_impl_.max_spline_length_);
  swap(_impl_.regularization_weight_, other->_impl_.regularization_weight_);
  swap(_impl_.third_derivative_weight_, other->_impl_.third_derivative_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpSplineSmootherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[0]);
}

// ===================================================================

class SpiralSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SpiralSmootherConfig>()._impl_._has_bits_);
  static void set_has_max_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_piecewise_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_opt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_opt_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_opt_acceptable_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_opt_weight_curve_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opt_weight_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_opt_weight_dkappa(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_opt_weight_d2kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpiralSmootherConfig::SpiralSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SpiralSmootherConfig)
}
SpiralSmootherConfig::SpiralSmootherConfig(const SpiralSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.opt_weight_curve_length_){}
    , decltype(_impl_.opt_weight_d2kappa_){}
    , decltype(_impl_.max_deviation_){}
    , decltype(_impl_.piecewise_length_){}
    , decltype(_impl_.opt_tol_){}
    , decltype(_impl_.max_iteration_){}
    , decltype(_impl_.opt_acceptable_iteration_){}
    , decltype(_impl_.opt_acceptable_tol_){}
    , decltype(_impl_.opt_weight_kappa_){}
    , decltype(_impl_.opt_weight_dkappa_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.opt_weight_curve_length_, &from._impl_.opt_weight_curve_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opt_weight_dkappa_) -
    reinterpret_cast<char*>(&_impl_.opt_weight_curve_length_)) + sizeof(_impl_.opt_weight_dkappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SpiralSmootherConfig)
}

inline void SpiralSmootherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.opt_weight_curve_length_){0}
    , decltype(_impl_.opt_weight_d2kappa_){0}
    , decltype(_impl_.max_deviation_){0.1}
    , decltype(_impl_.piecewise_length_){10}
    , decltype(_impl_.opt_tol_){1e-08}
    , decltype(_impl_.max_iteration_){1000}
    , decltype(_impl_.opt_acceptable_iteration_){15}
    , decltype(_impl_.opt_acceptable_tol_){1e-06}
    , decltype(_impl_.opt_weight_kappa_){1.5}
    , decltype(_impl_.opt_weight_dkappa_){1}
  };
}

SpiralSmootherConfig::~SpiralSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.SpiralSmootherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpiralSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpiralSmootherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpiralSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SpiralSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.opt_weight_curve_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.opt_weight_d2kappa_) -
        reinterpret_cast<char*>(&_impl_.opt_weight_curve_length_)) + sizeof(_impl_.opt_weight_d2kappa_));
    _impl_.max_deviation_ = 0.1;
    _impl_.piecewise_length_ = 10;
    _impl_.opt_tol_ = 1e-08;
    _impl_.max_iteration_ = 1000;
    _impl_.opt_acceptable_iteration_ = 15;
    _impl_.opt_acceptable_tol_ = 1e-06;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.opt_weight_kappa_ = 1.5;
    _impl_.opt_weight_dkappa_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpiralSmootherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_deviation = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_deviation(&has_bits);
          _impl_.max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double piecewise_length = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_piecewise_length(&has_bits);
          _impl_.piecewise_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_iteration = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_iteration(&has_bits);
          _impl_.max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_tol = 4 [default = 1e-08];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_opt_tol(&has_bits);
          _impl_.opt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_acceptable_tol = 5 [default = 1e-06];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_opt_acceptable_tol(&has_bits);
          _impl_.opt_acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 opt_acceptable_iteration = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_opt_acceptable_iteration(&has_bits);
          _impl_.opt_acceptable_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_weight_curve_length = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_opt_weight_curve_length(&has_bits);
          _impl_.opt_weight_curve_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_weight_kappa = 8 [default = 1.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_opt_weight_kappa(&has_bits);
          _impl_.opt_weight_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_weight_dkappa = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_opt_weight_dkappa(&has_bits);
          _impl_.opt_weight_dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double opt_weight_d2kappa = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_opt_weight_d2kappa(&has_bits);
          _impl_.opt_weight_d2kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpiralSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SpiralSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_deviation = 1 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_deviation(), target);
  }

  // optional double piecewise_length = 2 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_piecewise_length(), target);
  }

  // optional int32 max_iteration = 3 [default = 1000];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_iteration(), target);
  }

  // optional double opt_tol = 4 [default = 1e-08];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_opt_tol(), target);
  }

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_opt_acceptable_tol(), target);
  }

  // optional int32 opt_acceptable_iteration = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_opt_acceptable_iteration(), target);
  }

  // optional double opt_weight_curve_length = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_opt_weight_curve_length(), target);
  }

  // optional double opt_weight_kappa = 8 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_opt_weight_kappa(), target);
  }

  // optional double opt_weight_dkappa = 9 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_opt_weight_dkappa(), target);
  }

  // optional double opt_weight_d2kappa = 10 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_opt_weight_d2kappa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SpiralSmootherConfig)
  return target;
}

size_t SpiralSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SpiralSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double opt_weight_curve_length = 7 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double opt_weight_d2kappa = 10 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_deviation = 1 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double piecewise_length = 2 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double opt_tol = 4 [default = 1e-08];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 max_iteration = 3 [default = 1000];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_iteration());
    }

    // optional int32 opt_acceptable_iteration = 6 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_opt_acceptable_iteration());
    }

    // optional double opt_acceptable_tol = 5 [default = 1e-06];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double opt_weight_kappa = 8 [default = 1.5];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double opt_weight_dkappa = 9 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpiralSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpiralSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpiralSmootherConfig::GetClassData() const { return &_class_data_; }

void SpiralSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpiralSmootherConfig *>(to)->MergeFrom(
      static_cast<const SpiralSmootherConfig &>(from));
}


void SpiralSmootherConfig::MergeFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.opt_weight_curve_length_ = from._impl_.opt_weight_curve_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.opt_weight_d2kappa_ = from._impl_.opt_weight_d2kappa_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_deviation_ = from._impl_.max_deviation_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.piecewise_length_ = from._impl_.piecewise_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.opt_tol_ = from._impl_.opt_tol_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_iteration_ = from._impl_.max_iteration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.opt_acceptable_iteration_ = from._impl_.opt_acceptable_iteration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.opt_acceptable_tol_ = from._impl_.opt_acceptable_tol_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.opt_weight_kappa_ = from._impl_.opt_weight_kappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.opt_weight_dkappa_ = from._impl_.opt_weight_dkappa_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpiralSmootherConfig::CopyFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralSmootherConfig::IsInitialized() const {
  return true;
}

void SpiralSmootherConfig::InternalSwap(SpiralSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpiralSmootherConfig, _impl_.opt_weight_d2kappa_)
      + sizeof(SpiralSmootherConfig::_impl_.opt_weight_d2kappa_)
      - PROTOBUF_FIELD_OFFSET(SpiralSmootherConfig, _impl_.opt_weight_curve_length_)>(
          reinterpret_cast<char*>(&_impl_.opt_weight_curve_length_),
          reinterpret_cast<char*>(&other->_impl_.opt_weight_curve_length_));
  swap(_impl_.max_deviation_, other->_impl_.max_deviation_);
  swap(_impl_.piecewise_length_, other->_impl_.piecewise_length_);
  swap(_impl_.opt_tol_, other->_impl_.opt_tol_);
  swap(_impl_.max_iteration_, other->_impl_.max_iteration_);
  swap(_impl_.opt_acceptable_iteration_, other->_impl_.opt_acceptable_iteration_);
  swap(_impl_.opt_acceptable_tol_, other->_impl_.opt_acceptable_tol_);
  swap(_impl_.opt_weight_kappa_, other->_impl_.opt_weight_kappa_);
  swap(_impl_.opt_weight_dkappa_, other->_impl_.opt_weight_dkappa_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpiralSmootherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[1]);
}

// ===================================================================

class ReferenceLineSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineSmootherConfig>()._impl_._has_bits_);
  static void set_has_max_constraint_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitudinal_boundary_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_boundary_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_of_total_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curb_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_driving_side(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wide_lane_threshold_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wide_lane_shift_remain_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning::QpSplineSmootherConfig& qp_spline(const ReferenceLineSmootherConfig* msg);
  static const ::apollo::planning::SpiralSmootherConfig& spiral(const ReferenceLineSmootherConfig* msg);
};

const ::apollo::planning::QpSplineSmootherConfig&
ReferenceLineSmootherConfig::_Internal::qp_spline(const ReferenceLineSmootherConfig* msg) {
  return *msg->_impl_.SmootherConfig_.qp_spline_;
}
const ::apollo::planning::SpiralSmootherConfig&
ReferenceLineSmootherConfig::_Internal::spiral(const ReferenceLineSmootherConfig* msg) {
  return *msg->_impl_.SmootherConfig_.spiral_;
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (qp_spline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qp_spline);
    if (message_arena != submessage_arena) {
      qp_spline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    _impl_.SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
}
void ReferenceLineSmootherConfig::set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (spiral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spiral);
    if (message_arena != submessage_arena) {
      spiral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spiral, submessage_arena);
    }
    set_has_spiral();
    _impl_.SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ReferenceLineSmootherConfig.spiral)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ReferenceLineSmootherConfig)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_constraint_interval_){}
    , decltype(_impl_.longitudinal_boundary_bound_){}
    , decltype(_impl_.lateral_boundary_bound_){}
    , decltype(_impl_.curb_shift_){}
    , decltype(_impl_.num_of_total_points_){}
    , decltype(_impl_.driving_side_){}
    , decltype(_impl_.wide_lane_threshold_factor_){}
    , decltype(_impl_.wide_lane_shift_remain_factor_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.SmootherConfig_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_constraint_interval_, &from._impl_.max_constraint_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resolution_) -
    reinterpret_cast<char*>(&_impl_.max_constraint_interval_)) + sizeof(_impl_.resolution_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::apollo::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::apollo::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineSmootherConfig)
}

inline void ReferenceLineSmootherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_constraint_interval_){5}
    , decltype(_impl_.longitudinal_boundary_bound_){1}
    , decltype(_impl_.lateral_boundary_bound_){0.1}
    , decltype(_impl_.curb_shift_){0.2}
    , decltype(_impl_.num_of_total_points_){500u}
    , decltype(_impl_.driving_side_){2}
    , decltype(_impl_.wide_lane_threshold_factor_){2}
    , decltype(_impl_.wide_lane_shift_remain_factor_){0.5}
    , decltype(_impl_.resolution_){0.02}
    , decltype(_impl_.SmootherConfig_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineSmootherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.SmootherConfig_.qp_spline_;
      }
      break;
    }
    case kSpiral: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.SmootherConfig_.spiral_;
      }
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.max_constraint_interval_ = 5;
    _impl_.longitudinal_boundary_bound_ = 1;
    _impl_.lateral_boundary_bound_ = 0.1;
    _impl_.curb_shift_ = 0.2;
    _impl_.num_of_total_points_ = 500u;
    _impl_.driving_side_ = 2;
    _impl_.wide_lane_threshold_factor_ = 2;
    _impl_.wide_lane_shift_remain_factor_ = 0.5;
  }
  _impl_.resolution_ = 0.02;
  clear_SmootherConfig();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineSmootherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_constraint_interval = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_constraint_interval(&has_bits);
          _impl_.max_constraint_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double longitudinal_boundary_bound = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_longitudinal_boundary_bound(&has_bits);
          _impl_.longitudinal_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_boundary_bound = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lateral_boundary_bound(&has_bits);
          _impl_.lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_of_total_points = 4 [default = 500];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_of_total_points(&has_bits);
          _impl_.num_of_total_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double curb_shift = 5 [default = 0.2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_curb_shift(&has_bits);
          _impl_.curb_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ReferenceLineSmootherConfig_DrivingSide_IsValid(val))) {
            _internal_set_driving_side(static_cast<::apollo::planning::ReferenceLineSmootherConfig_DrivingSide>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double wide_lane_threshold_factor = 7 [default = 2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_wide_lane_threshold_factor(&has_bits);
          _impl_.wide_lane_threshold_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_wide_lane_shift_remain_factor(&has_bits);
          _impl_.wide_lane_shift_remain_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double resolution = 9 [default = 0.02];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_resolution(&has_bits);
          _impl_.resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.SpiralSmootherConfig spiral = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_spiral(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_constraint_interval = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_constraint_interval(), target);
  }

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitudinal_boundary_bound(), target);
  }

  // optional double lateral_boundary_bound = 3 [default = 0.1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_boundary_bound(), target);
  }

  // optional uint32 num_of_total_points = 4 [default = 500];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_of_total_points(), target);
  }

  // optional double curb_shift = 5 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_curb_shift(), target);
  }

  // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_driving_side(), target);
  }

  // optional double wide_lane_threshold_factor = 7 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_wide_lane_threshold_factor(), target);
  }

  // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_wide_lane_shift_remain_factor(), target);
  }

  // optional double resolution = 9 [default = 0.02];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_resolution(), target);
  }

  switch (SmootherConfig_case()) {
    case kQpSpline: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::qp_spline(this),
          _Internal::qp_spline(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpiral: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::spiral(this),
          _Internal::spiral(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineSmootherConfig)
  return target;
}

size_t ReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double max_constraint_interval = 1 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_boundary_bound = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lateral_boundary_bound = 3 [default = 0.1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curb_shift = 5 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_of_total_points = 4 [default = 500];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_of_total_points());
    }

    // optional .apollo.planning.ReferenceLineSmootherConfig.DrivingSide driving_side = 6 [default = RIGHT];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_driving_side());
    }

    // optional double wide_lane_threshold_factor = 7 [default = 2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wide_lane_shift_remain_factor = 8 [default = 0.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double resolution = 9 [default = 0.02];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  switch (SmootherConfig_case()) {
    // .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.SmootherConfig_.qp_spline_);
      break;
    }
    // .apollo.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.SmootherConfig_.spiral_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineSmootherConfig::GetClassData() const { return &_class_data_; }

void ReferenceLineSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReferenceLineSmootherConfig *>(to)->MergeFrom(
      static_cast<const ReferenceLineSmootherConfig &>(from));
}


void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_constraint_interval_ = from._impl_.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.longitudinal_boundary_bound_ = from._impl_.longitudinal_boundary_bound_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.lateral_boundary_bound_ = from._impl_.lateral_boundary_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.curb_shift_ = from._impl_.curb_shift_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.num_of_total_points_ = from._impl_.num_of_total_points_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.driving_side_ = from._impl_.driving_side_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.wide_lane_threshold_factor_ = from._impl_.wide_lane_threshold_factor_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.wide_lane_shift_remain_factor_ = from._impl_.wide_lane_shift_remain_factor_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_resolution(from._internal_resolution());
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::apollo::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::apollo::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_constraint_interval_, other->_impl_.max_constraint_interval_);
  swap(_impl_.longitudinal_boundary_bound_, other->_impl_.longitudinal_boundary_bound_);
  swap(_impl_.lateral_boundary_bound_, other->_impl_.lateral_boundary_bound_);
  swap(_impl_.curb_shift_, other->_impl_.curb_shift_);
  swap(_impl_.num_of_total_points_, other->_impl_.num_of_total_points_);
  swap(_impl_.driving_side_, other->_impl_.driving_side_);
  swap(_impl_.wide_lane_threshold_factor_, other->_impl_.wide_lane_threshold_factor_);
  swap(_impl_.wide_lane_shift_remain_factor_, other->_impl_.wide_lane_shift_remain_factor_);
  swap(_impl_.resolution_, other->_impl_.resolution_);
  swap(_impl_.SmootherConfig_, other->_impl_.SmootherConfig_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QpSplineSmootherConfig*
Arena::CreateMaybeMessage< ::apollo::planning::QpSplineSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QpSplineSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SpiralSmootherConfig*
Arena::CreateMaybeMessage< ::apollo::planning::SpiralSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SpiralSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReferenceLineSmootherConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ReferenceLineSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ReferenceLineSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
