// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planner_open_space_config.proto

#include "modules/planning/proto/planner_open_space_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roi_config_)*/nullptr
  , /*decltype(_impl_.warm_start_config_)*/nullptr
  , /*decltype(_impl_.dual_variable_warm_start_config_)*/nullptr
  , /*decltype(_impl_.distance_approach_config_)*/nullptr
  , /*decltype(_impl_.iterative_anchoring_smoother_config_)*/nullptr
  , /*decltype(_impl_.trajectory_partition_config_)*/nullptr
  , /*decltype(_impl_.enable_check_parallel_trajectory_)*/false
  , /*decltype(_impl_.enable_linear_interpolation_)*/false
  , /*decltype(_impl_.delta_t_)*/1
  , /*decltype(_impl_.is_near_destination_threshold_)*/0.001
  , /*decltype(_impl_.is_near_destination_theta_threshold_)*/0.05} {}
struct PlannerOpenSpaceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlannerOpenSpaceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlannerOpenSpaceConfigDefaultTypeInternal() {}
  union {
    PlannerOpenSpaceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
PROTOBUF_CONSTEXPR ROIConfig::ROIConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parking_inwards_)*/false
  , /*decltype(_impl_.roi_longitudinal_range_start_)*/10
  , /*decltype(_impl_.roi_longitudinal_range_end_)*/10
  , /*decltype(_impl_.parking_start_range_)*/7} {}
struct ROIConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROIConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROIConfigDefaultTypeInternal() {}
  union {
    ROIConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
PROTOBUF_CONSTEXPR WarmStartConfig::WarmStartConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_curve_config_)*/nullptr
  , /*decltype(_impl_.traj_forward_penalty_)*/0
  , /*decltype(_impl_.traj_back_penalty_)*/0
  , /*decltype(_impl_.xy_grid_resolution_)*/0.2
  , /*decltype(_impl_.phi_grid_resolution_)*/0.05
  , /*decltype(_impl_.next_node_num_)*/uint64_t{10u}
  , /*decltype(_impl_.step_size_)*/0.5
  , /*decltype(_impl_.traj_gear_switch_penalty_)*/10
  , /*decltype(_impl_.traj_steer_penalty_)*/100
  , /*decltype(_impl_.traj_steer_change_penalty_)*/10
  , /*decltype(_impl_.grid_a_star_xy_resolution_)*/0.1
  , /*decltype(_impl_.node_radius_)*/0.5} {}
struct WarmStartConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WarmStartConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WarmStartConfigDefaultTypeInternal() {}
  union {
    WarmStartConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
PROTOBUF_CONSTEXPR DualVariableWarmStartConfig::DualVariableWarmStartConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ipopt_config_)*/nullptr
  , /*decltype(_impl_.osqp_config_)*/nullptr
  , /*decltype(_impl_.min_safety_distance_)*/0
  , /*decltype(_impl_.qp_format_)*/0
  , /*decltype(_impl_.debug_osqp_)*/false
  , /*decltype(_impl_.weight_d_)*/1
  , /*decltype(_impl_.beta_)*/1} {}
struct DualVariableWarmStartConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DualVariableWarmStartConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DualVariableWarmStartConfigDefaultTypeInternal() {}
  union {
    DualVariableWarmStartConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DualVariableWarmStartConfigDefaultTypeInternal _DualVariableWarmStartConfig_default_instance_;
PROTOBUF_CONSTEXPR DistanceApproachConfig::DistanceApproachConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ipopt_config_)*/nullptr
  , /*decltype(_impl_.weight_steer_)*/0
  , /*decltype(_impl_.weight_a_)*/0
  , /*decltype(_impl_.weight_steer_rate_)*/0
  , /*decltype(_impl_.weight_a_rate_)*/0
  , /*decltype(_impl_.weight_x_)*/0
  , /*decltype(_impl_.weight_y_)*/0
  , /*decltype(_impl_.weight_phi_)*/0
  , /*decltype(_impl_.weight_v_)*/0
  , /*decltype(_impl_.weight_steer_stitching_)*/0
  , /*decltype(_impl_.weight_a_stitching_)*/0
  , /*decltype(_impl_.weight_first_order_time_)*/0
  , /*decltype(_impl_.weight_second_order_time_)*/0
  , /*decltype(_impl_.min_safety_distance_)*/0
  , /*decltype(_impl_.use_fix_time_)*/false
  , /*decltype(_impl_.enable_constraint_check_)*/false
  , /*decltype(_impl_.enable_hand_derivative_)*/false
  , /*decltype(_impl_.enable_derivative_check_)*/false
  , /*decltype(_impl_.distance_approach_mode_)*/0
  , /*decltype(_impl_.weight_end_state_)*/0
  , /*decltype(_impl_.weight_slack_)*/0
  , /*decltype(_impl_.enable_initial_final_check_)*/false
  , /*decltype(_impl_.enable_jacobian_ad_)*/false
  , /*decltype(_impl_.enable_check_initial_state_)*/false
  , /*decltype(_impl_.max_speed_forward_)*/3
  , /*decltype(_impl_.max_speed_reverse_)*/2
  , /*decltype(_impl_.max_acceleration_forward_)*/2
  , /*decltype(_impl_.max_acceleration_reverse_)*/2
  , /*decltype(_impl_.min_time_sample_scaling_)*/0.1
  , /*decltype(_impl_.max_time_sample_scaling_)*/10} {}
struct DistanceApproachConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceApproachConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceApproachConfigDefaultTypeInternal() {}
  union {
    DistanceApproachConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceApproachConfigDefaultTypeInternal _DistanceApproachConfig_default_instance_;
PROTOBUF_CONSTEXPR IpoptConfig::IpoptConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ipopt_print_timing_statistics_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipopt_alpha_for_y_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipopt_recalc_y_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipopt_print_level_)*/0
  , /*decltype(_impl_.mumps_mem_percent_)*/0
  , /*decltype(_impl_.mumps_pivtol_)*/0
  , /*decltype(_impl_.ipopt_tol_)*/0
  , /*decltype(_impl_.ipopt_acceptable_constr_viol_tol_)*/0
  , /*decltype(_impl_.ipopt_min_hessian_perturbation_)*/0
  , /*decltype(_impl_.ipopt_jacobian_regularization_value_)*/0
  , /*decltype(_impl_.ipopt_max_iter_)*/0
  , /*decltype(_impl_.ipopt_mu_init_)*/0.1} {}
struct IpoptConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IpoptConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IpoptConfigDefaultTypeInternal() {}
  union {
    IpoptConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IpoptConfigDefaultTypeInternal _IpoptConfig_default_instance_;
PROTOBUF_CONSTEXPR OSQPConfig::OSQPConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.osqp_debug_log_)*/false
  , /*decltype(_impl_.alpha_)*/1
  , /*decltype(_impl_.eps_abs_)*/0.001
  , /*decltype(_impl_.eps_rel_)*/0.001
  , /*decltype(_impl_.max_iter_)*/10000
  , /*decltype(_impl_.polish_)*/true} {}
struct OSQPConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OSQPConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OSQPConfigDefaultTypeInternal() {}
  union {
    OSQPConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OSQPConfigDefaultTypeInternal _OSQPConfig_default_instance_;
PROTOBUF_CONSTEXPR IterativeAnchoringConfig::IterativeAnchoringConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fem_pos_deviation_smoother_config_)*/nullptr
  , /*decltype(_impl_.s_curve_config_)*/nullptr
  , /*decltype(_impl_.estimate_bound_)*/false
  , /*decltype(_impl_.reanchoring_trails_num_)*/50
  , /*decltype(_impl_.interpolated_delta_s_)*/0.1
  , /*decltype(_impl_.reanchoring_pos_stddev_)*/0.25
  , /*decltype(_impl_.reanchoring_length_stddev_)*/1
  , /*decltype(_impl_.default_bound_)*/2
  , /*decltype(_impl_.vehicle_shortest_dimension_)*/1.04
  , /*decltype(_impl_.collision_decrease_ratio_)*/0.9
  , /*decltype(_impl_.max_forward_v_)*/2
  , /*decltype(_impl_.max_reverse_v_)*/2
  , /*decltype(_impl_.max_forward_acc_)*/3
  , /*decltype(_impl_.max_reverse_acc_)*/2
  , /*decltype(_impl_.max_acc_jerk_)*/4
  , /*decltype(_impl_.delta_t_)*/0.2} {}
struct IterativeAnchoringConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IterativeAnchoringConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IterativeAnchoringConfigDefaultTypeInternal() {}
  union {
    IterativeAnchoringConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IterativeAnchoringConfigDefaultTypeInternal _IterativeAnchoringConfig_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryPartitionConfig::TrajectoryPartitionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.interpolated_pieces_num_)*/uint64_t{50u}
  , /*decltype(_impl_.initial_gear_check_horizon_)*/uint64_t{3u}
  , /*decltype(_impl_.heading_searching_range_)*/0.3
  , /*decltype(_impl_.gear_shift_period_duration_)*/2
  , /*decltype(_impl_.gear_shift_max_t_)*/3
  , /*decltype(_impl_.gear_shift_unit_t_)*/0.02} {}
struct TrajectoryPartitionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryPartitionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryPartitionConfigDefaultTypeInternal() {}
  union {
    TrajectoryPartitionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryPartitionConfigDefaultTypeInternal _TrajectoryPartitionConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.roi_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.dual_variable_warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.distance_approach_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.iterative_anchoring_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.trajectory_partition_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.enable_check_parallel_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.enable_linear_interpolation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerOpenSpaceConfig, _impl_.is_near_destination_theta_threshold_),
  0,
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  6,
  7,
  10,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _impl_.roi_longitudinal_range_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _impl_.roi_longitudinal_range_end_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _impl_.parking_start_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ROIConfig, _impl_.parking_inwards_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.next_node_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.step_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.traj_back_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.node_radius_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::WarmStartConfig, _impl_.s_curve_config_),
  3,
  4,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  11,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.weight_d_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.qp_format_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.debug_osqp_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.beta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DualVariableWarmStartConfig, _impl_.osqp_config_),
  5,
  0,
  3,
  2,
  4,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_steer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_steer_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_a_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_phi_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_steer_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_a_stitching_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_first_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_second_order_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.min_safety_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.max_speed_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.max_speed_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.max_acceleration_forward_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.max_acceleration_reverse_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.min_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.max_time_sample_scaling_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.use_fix_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.ipopt_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_constraint_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_hand_derivative_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_derivative_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_initial_final_check_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.distance_approach_mode_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_jacobian_ad_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.enable_check_initial_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_end_state_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DistanceApproachConfig, _impl_.weight_slack_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  25,
  26,
  27,
  28,
  29,
  14,
  0,
  15,
  16,
  17,
  21,
  18,
  22,
  23,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.mumps_mem_percent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.mumps_pivtol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_acceptable_constr_viol_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_min_hessian_perturbation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_jacobian_regularization_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_print_timing_statistics_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_alpha_for_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_recalc_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IpoptConfig, _impl_.ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.eps_abs_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.eps_rel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.polish_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OSQPConfig, _impl_.osqp_debug_log_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.interpolated_delta_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.reanchoring_trails_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.reanchoring_pos_stddev_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.reanchoring_length_stddev_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.estimate_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.default_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.vehicle_shortest_dimension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.fem_pos_deviation_smoother_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.collision_decrease_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.max_forward_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.max_reverse_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.max_forward_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.max_reverse_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.max_acc_jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.delta_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::IterativeAnchoringConfig, _impl_.s_curve_config_),
  4,
  3,
  5,
  6,
  2,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.interpolated_pieces_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.initial_gear_check_horizon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.heading_searching_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.gear_shift_period_duration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.gear_shift_max_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPartitionConfig, _impl_.gear_shift_unit_t_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::apollo::planning::PlannerOpenSpaceConfig)},
  { 28, 38, -1, sizeof(::apollo::planning::ROIConfig)},
  { 42, 60, -1, sizeof(::apollo::planning::WarmStartConfig)},
  { 72, 85, -1, sizeof(::apollo::planning::DualVariableWarmStartConfig)},
  { 92, 128, -1, sizeof(::apollo::planning::DistanceApproachConfig)},
  { 158, 176, -1, sizeof(::apollo::planning::IpoptConfig)},
  { 188, 200, -1, sizeof(::apollo::planning::OSQPConfig)},
  { 206, 228, -1, sizeof(::apollo::planning::IterativeAnchoringConfig)},
  { 244, 256, -1, sizeof(::apollo::planning::TrajectoryPartitionConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_PlannerOpenSpaceConfig_default_instance_._instance,
  &::apollo::planning::_ROIConfig_default_instance_._instance,
  &::apollo::planning::_WarmStartConfig_default_instance_._instance,
  &::apollo::planning::_DualVariableWarmStartConfig_default_instance_._instance,
  &::apollo::planning::_DistanceApproachConfig_default_instance_._instance,
  &::apollo::planning::_IpoptConfig_default_instance_._instance,
  &::apollo::planning::_OSQPConfig_default_instance_._instance,
  &::apollo::planning::_IterativeAnchoringConfig_default_instance_._instance,
  &::apollo::planning::_TrajectoryPartitionConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6modules/planning/proto/planner_open_sp"
  "ace_config.proto\022\017apollo.planning\032Cmodul"
  "es/planning/proto/math/fem_pos_deviation"
  "_smoother_config.proto\032(modules/planning"
  "/proto/task_config.proto\"\242\005\n\026PlannerOpen"
  "SpaceConfig\022.\n\nroi_config\030\001 \001(\0132\032.apollo"
  ".planning.ROIConfig\022;\n\021warm_start_config"
  "\030\002 \001(\0132 .apollo.planning.WarmStartConfig"
  "\022U\n\037dual_variable_warm_start_config\030\003 \001("
  "\0132,.apollo.planning.DualVariableWarmStar"
  "tConfig\022I\n\030distance_approach_config\030\004 \001("
  "\0132\'.apollo.planning.DistanceApproachConf"
  "ig\022V\n#iterative_anchoring_smoother_confi"
  "g\030\005 \001(\0132).apollo.planning.IterativeAncho"
  "ringConfig\022O\n\033trajectory_partition_confi"
  "g\030\006 \001(\0132*.apollo.planning.TrajectoryPart"
  "itionConfig\022\022\n\007delta_t\030\007 \001(\002:\0011\022,\n\035is_ne"
  "ar_destination_threshold\030\010 \001(\001:\0050.001\022/\n"
  " enable_check_parallel_trajectory\030\t \001(\010:"
  "\005false\022*\n\033enable_linear_interpolation\030\n "
  "\001(\010:\005false\0221\n#is_near_destination_theta_"
  "threshold\030\013 \001(\001:\0040.05\"\235\001\n\tROIConfig\022(\n\034r"
  "oi_longitudinal_range_start\030\001 \001(\001:\00210\022&\n"
  "\032roi_longitudinal_range_end\030\002 \001(\001:\00210\022\036\n"
  "\023parking_start_range\030\003 \001(\001:\0017\022\036\n\017parking"
  "_inwards\030\004 \001(\010:\005false\"\303\003\n\017WarmStartConfi"
  "g\022\037\n\022xy_grid_resolution\030\001 \001(\001:\0030.2\022!\n\023ph"
  "i_grid_resolution\030\002 \001(\001:\0040.05\022\031\n\rnext_no"
  "de_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001(\001:\0030.5"
  "\022\037\n\024traj_forward_penalty\030\005 \001(\001:\0010\022\034\n\021tra"
  "j_back_penalty\030\006 \001(\001:\0010\022$\n\030traj_gear_swi"
  "tch_penalty\030\007 \001(\001:\00210\022\037\n\022traj_steer_pena"
  "lty\030\010 \001(\001:\003100\022%\n\031traj_steer_change_pena"
  "lty\030\t \001(\001:\00210\022&\n\031grid_a_star_xy_resoluti"
  "on\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020 \001(\001:\0030.5\022"
  "J\n\016s_curve_config\030\021 \001(\01322.apollo.plannin"
  "g.PiecewiseJerkSpeedOptimizerConfig\"\230\002\n\033"
  "DualVariableWarmStartConfig\022\023\n\010weight_d\030"
  "\001 \001(\001:\0011\0222\n\014ipopt_config\030\002 \001(\0132\034.apollo."
  "planning.IpoptConfig\0222\n\tqp_format\030\003 \001(\0162"
  "\037.apollo.planning.DualWarmUpMode\022\036\n\023min_"
  "safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug_osqp\030\005"
  " \001(\010:\005false\022\017\n\004beta\030\006 \001(\001:\0011\0220\n\013osqp_con"
  "fig\030\007 \001(\0132\033.apollo.planning.OSQPConfig\"\325"
  "\007\n\026DistanceApproachConfig\022\024\n\014weight_stee"
  "r\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022\031\n\021weight_stee"
  "r_rate\030\003 \001(\001\022\025\n\rweight_a_rate\030\004 \001(\001\022\020\n\010w"
  "eight_x\030\005 \001(\001\022\020\n\010weight_y\030\006 \001(\001\022\022\n\nweigh"
  "t_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 \001(\001\022\036\n\026weight_"
  "steer_stitching\030\t \001(\001\022\032\n\022weight_a_stitch"
  "ing\030\n \001(\001\022\037\n\027weight_first_order_time\030\013 \001"
  "(\001\022 \n\030weight_second_order_time\030\014 \001(\001\022\036\n\023"
  "min_safety_distance\030\r \001(\001:\0010\022\034\n\021max_spee"
  "d_forward\030\016 \001(\001:\0013\022\034\n\021max_speed_reverse\030"
  "\017 \001(\001:\0012\022#\n\030max_acceleration_forward\030\020 \001"
  "(\001:\0012\022#\n\030max_acceleration_reverse\030\021 \001(\001:"
  "\0012\022$\n\027min_time_sample_scaling\030\022 \001(\001:\0030.1"
  "\022#\n\027max_time_sample_scaling\030\023 \001(\001:\00210\022\033\n"
  "\014use_fix_time\030\024 \001(\010:\005false\0222\n\014ipopt_conf"
  "ig\030\025 \001(\0132\034.apollo.planning.IpoptConfig\022\037"
  "\n\027enable_constraint_check\030\026 \001(\010\022\036\n\026enabl"
  "e_hand_derivative\030\027 \001(\010\022\037\n\027enable_deriva"
  "tive_check\030\030 \001(\010\022)\n\032enable_initial_final"
  "_check\030\031 \001(\010:\005false\022E\n\026distance_approach"
  "_mode\030\032 \001(\0162%.apollo.planning.DistanceAp"
  "proachMode\022!\n\022enable_jacobian_ad\030\033 \001(\010:\005"
  "false\022)\n\032enable_check_initial_state\030\034 \001("
  "\010:\005false\022\033\n\020weight_end_state\030\035 \001(\001:\0010\022\027\n"
  "\014weight_slack\030\036 \001(\001:\0010\"\371\002\n\013IpoptConfig\022\031"
  "\n\021ipopt_print_level\030\001 \001(\005\022\031\n\021mumps_mem_p"
  "ercent\030\002 \001(\005\022\024\n\014mumps_pivtol\030\003 \001(\001\022\026\n\016ip"
  "opt_max_iter\030\004 \001(\005\022\021\n\tipopt_tol\030\005 \001(\001\022(\n"
  " ipopt_acceptable_constr_viol_tol\030\006 \001(\001\022"
  "&\n\036ipopt_min_hessian_perturbation\030\007 \001(\001\022"
  "+\n#ipopt_jacobian_regularization_value\030\010"
  " \001(\001\022%\n\035ipopt_print_timing_statistics\030\t "
  "\001(\t\022\031\n\021ipopt_alpha_for_y\030\n \001(\t\022\026\n\016ipopt_"
  "recalc_y\030\013 \001(\t\022\032\n\ripopt_mu_init\030\014 \001(\001:\0030"
  ".1\"\234\001\n\nOSQPConfig\022\020\n\005alpha\030\001 \001(\001:\0011\022\026\n\007e"
  "ps_abs\030\002 \001(\001:\0050.001\022\026\n\007eps_rel\030\003 \001(\001:\0050."
  "001\022\027\n\010max_iter\030\004 \001(\005:\00510000\022\024\n\006polish\030\005"
  " \001(\010:\004true\022\035\n\016osqp_debug_log\030\006 \001(\010:\005fals"
  "e\"\371\004\n\030IterativeAnchoringConfig\022!\n\024interp"
  "olated_delta_s\030\001 \001(\001:\0030.1\022\"\n\026reanchoring"
  "_trails_num\030\002 \001(\005:\00250\022$\n\026reanchoring_pos"
  "_stddev\030\003 \001(\001:\0040.25\022$\n\031reanchoring_lengt"
  "h_stddev\030\004 \001(\001:\0011\022\035\n\016estimate_bound\030\005 \001("
  "\010:\005false\022\030\n\rdefault_bound\030\006 \001(\001:\0012\022(\n\032ve"
  "hicle_shortest_dimension\030\007 \001(\001:\0041.04\022Y\n!"
  "fem_pos_deviation_smoother_config\030\010 \001(\0132"
  "..apollo.planning.FemPosDeviationSmoothe"
  "rConfig\022%\n\030collision_decrease_ratio\030\t \001("
  "\001:\0030.9\022\030\n\rmax_forward_v\030\n \001(\001:\0012\022\030\n\rmax_"
  "reverse_v\030\013 \001(\001:\0012\022\032\n\017max_forward_acc\030\014 "
  "\001(\001:\0013\022\032\n\017max_reverse_acc\030\r \001(\001:\0012\022\027\n\014ma"
  "x_acc_jerk\030\016 \001(\001:\0014\022\024\n\007delta_t\030\017 \001(\001:\0030."
  "2\022J\n\016s_curve_config\030\020 \001(\01322.apollo.plann"
  "ing.PiecewiseJerkSpeedOptimizerConfig\"\362\001"
  "\n\031TrajectoryPartitionConfig\022#\n\027interpola"
  "ted_pieces_num\030\001 \001(\004:\00250\022%\n\032initial_gear"
  "_check_horizon\030\002 \001(\004:\0013\022$\n\027heading_searc"
  "hing_range\030\003 \001(\001:\0030.3\022%\n\032gear_shift_peri"
  "od_duration\030\004 \001(\001:\0012\022\033\n\020gear_shift_max_t"
  "\030\005 \001(\001:\0013\022\037\n\021gear_shift_unit_t\030\006 \001(\001:\0040."
  "02*J\n\016DualWarmUpMode\022\t\n\005IPOPT\020\000\022\013\n\007IPOPT"
  "QP\020\001\022\010\n\004OSQP\020\002\022\t\n\005DEBUG\020\003\022\013\n\007SLACKQP\020\004*\367"
  "\001\n\024DistanceApproachMode\022\033\n\027DISTANCE_APPR"
  "OACH_IPOPT\020\000\022 \n\034DISTANCE_APPROACH_IPOPT_"
  "CUDA\020\001\022$\n DISTANCE_APPROACH_IPOPT_FIXED_"
  "TS\020\002\022&\n\"DISTANCE_APPROACH_IPOPT_FIXED_DU"
  "AL\020\003\022%\n!DISTANCE_APPROACH_IPOPT_RELAX_EN"
  "D\020\004\022+\n\'DISTANCE_APPROACH_IPOPT_RELAX_END"
  "_SLACK\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto = {
    false, false, 4488, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
    "modules/planning/proto/planner_open_space_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps, 2, 9,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualWarmUpMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[0];
}
bool DualWarmUpMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceApproachMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[1];
}
bool DistanceApproachMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlannerOpenSpaceConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannerOpenSpaceConfig>()._impl_._has_bits_);
  static const ::apollo::planning::ROIConfig& roi_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_roi_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::WarmStartConfig& warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::DualVariableWarmStartConfig& dual_variable_warm_start_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_dual_variable_warm_start_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::DistanceApproachConfig& distance_approach_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_distance_approach_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::IterativeAnchoringConfig& iterative_anchoring_smoother_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_iterative_anchoring_smoother_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::TrajectoryPartitionConfig& trajectory_partition_config(const PlannerOpenSpaceConfig* msg);
  static void set_has_trajectory_partition_config(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_near_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_check_parallel_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_enable_linear_interpolation(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_near_destination_theta_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::apollo::planning::ROIConfig&
PlannerOpenSpaceConfig::_Internal::roi_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.roi_config_;
}
const ::apollo::planning::WarmStartConfig&
PlannerOpenSpaceConfig::_Internal::warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.warm_start_config_;
}
const ::apollo::planning::DualVariableWarmStartConfig&
PlannerOpenSpaceConfig::_Internal::dual_variable_warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.dual_variable_warm_start_config_;
}
const ::apollo::planning::DistanceApproachConfig&
PlannerOpenSpaceConfig::_Internal::distance_approach_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.distance_approach_config_;
}
const ::apollo::planning::IterativeAnchoringConfig&
PlannerOpenSpaceConfig::_Internal::iterative_anchoring_smoother_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.iterative_anchoring_smoother_config_;
}
const ::apollo::planning::TrajectoryPartitionConfig&
PlannerOpenSpaceConfig::_Internal::trajectory_partition_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->_impl_.trajectory_partition_config_;
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_config_){nullptr}
    , decltype(_impl_.warm_start_config_){nullptr}
    , decltype(_impl_.dual_variable_warm_start_config_){nullptr}
    , decltype(_impl_.distance_approach_config_){nullptr}
    , decltype(_impl_.iterative_anchoring_smoother_config_){nullptr}
    , decltype(_impl_.trajectory_partition_config_){nullptr}
    , decltype(_impl_.enable_check_parallel_trajectory_){}
    , decltype(_impl_.enable_linear_interpolation_){}
    , decltype(_impl_.delta_t_){}
    , decltype(_impl_.is_near_destination_threshold_){}
    , decltype(_impl_.is_near_destination_theta_threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roi_config()) {
    _impl_.roi_config_ = new ::apollo::planning::ROIConfig(*from._impl_.roi_config_);
  }
  if (from._internal_has_warm_start_config()) {
    _impl_.warm_start_config_ = new ::apollo::planning::WarmStartConfig(*from._impl_.warm_start_config_);
  }
  if (from._internal_has_dual_variable_warm_start_config()) {
    _impl_.dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableWarmStartConfig(*from._impl_.dual_variable_warm_start_config_);
  }
  if (from._internal_has_distance_approach_config()) {
    _impl_.distance_approach_config_ = new ::apollo::planning::DistanceApproachConfig(*from._impl_.distance_approach_config_);
  }
  if (from._internal_has_iterative_anchoring_smoother_config()) {
    _impl_.iterative_anchoring_smoother_config_ = new ::apollo::planning::IterativeAnchoringConfig(*from._impl_.iterative_anchoring_smoother_config_);
  }
  if (from._internal_has_trajectory_partition_config()) {
    _impl_.trajectory_partition_config_ = new ::apollo::planning::TrajectoryPartitionConfig(*from._impl_.trajectory_partition_config_);
  }
  ::memcpy(&_impl_.enable_check_parallel_trajectory_, &from._impl_.enable_check_parallel_trajectory_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&_impl_.enable_check_parallel_trajectory_)) + sizeof(_impl_.is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerOpenSpaceConfig)
}

inline void PlannerOpenSpaceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roi_config_){nullptr}
    , decltype(_impl_.warm_start_config_){nullptr}
    , decltype(_impl_.dual_variable_warm_start_config_){nullptr}
    , decltype(_impl_.distance_approach_config_){nullptr}
    , decltype(_impl_.iterative_anchoring_smoother_config_){nullptr}
    , decltype(_impl_.trajectory_partition_config_){nullptr}
    , decltype(_impl_.enable_check_parallel_trajectory_){false}
    , decltype(_impl_.enable_linear_interpolation_){false}
    , decltype(_impl_.delta_t_){1}
    , decltype(_impl_.is_near_destination_threshold_){0.001}
    , decltype(_impl_.is_near_destination_theta_threshold_){0.05}
  };
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerOpenSpaceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlannerOpenSpaceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.roi_config_;
  if (this != internal_default_instance()) delete _impl_.warm_start_config_;
  if (this != internal_default_instance()) delete _impl_.dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete _impl_.distance_approach_config_;
  if (this != internal_default_instance()) delete _impl_.iterative_anchoring_smoother_config_;
  if (this != internal_default_instance()) delete _impl_.trajectory_partition_config_;
}

void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerOpenSpaceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.roi_config_ != nullptr);
      _impl_.roi_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.warm_start_config_ != nullptr);
      _impl_.warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.dual_variable_warm_start_config_ != nullptr);
      _impl_.dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.distance_approach_config_ != nullptr);
      _impl_.distance_approach_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.iterative_anchoring_smoother_config_ != nullptr);
      _impl_.iterative_anchoring_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.trajectory_partition_config_ != nullptr);
      _impl_.trajectory_partition_config_->Clear();
    }
  }
  ::memset(&_impl_.enable_check_parallel_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_linear_interpolation_) -
      reinterpret_cast<char*>(&_impl_.enable_check_parallel_trajectory_)) + sizeof(_impl_.enable_linear_interpolation_));
  if (cached_has_bits & 0x00000700u) {
    _impl_.delta_t_ = 1;
    _impl_.is_near_destination_threshold_ = 0.001;
    _impl_.is_near_destination_theta_threshold_ = 0.05;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlannerOpenSpaceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ROIConfig roi_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_warm_start_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dual_variable_warm_start_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_approach_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_iterative_anchoring_smoother_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_partition_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float delta_t = 7 [default = 1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_delta_t(&has_bits);
          _impl_.delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double is_near_destination_threshold = 8 [default = 0.001];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_is_near_destination_threshold(&has_bits);
          _impl_.is_near_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_check_parallel_trajectory = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_enable_check_parallel_trajectory(&has_bits);
          _impl_.enable_check_parallel_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_linear_interpolation = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_enable_linear_interpolation(&has_bits);
          _impl_.enable_linear_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_is_near_destination_theta_threshold(&has_bits);
          _impl_.is_near_destination_theta_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlannerOpenSpaceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerOpenSpaceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ROIConfig roi_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::roi_config(this),
        _Internal::roi_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::warm_start_config(this),
        _Internal::warm_start_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dual_variable_warm_start_config(this),
        _Internal::dual_variable_warm_start_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::distance_approach_config(this),
        _Internal::distance_approach_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::iterative_anchoring_smoother_config(this),
        _Internal::iterative_anchoring_smoother_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::trajectory_partition_config(this),
        _Internal::trajectory_partition_config(this).GetCachedSize(), target, stream);
  }

  // optional float delta_t = 7 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_delta_t(), target);
  }

  // optional double is_near_destination_threshold = 8 [default = 0.001];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_is_near_destination_threshold(), target);
  }

  // optional bool enable_check_parallel_trajectory = 9 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_check_parallel_trajectory(), target);
  }

  // optional bool enable_linear_interpolation = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_linear_interpolation(), target);
  }

  // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_is_near_destination_theta_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.ROIConfig roi_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roi_config_);
    }

    // optional .apollo.planning.WarmStartConfig warm_start_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.warm_start_config_);
    }

    // optional .apollo.planning.DualVariableWarmStartConfig dual_variable_warm_start_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachConfig distance_approach_config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.distance_approach_config_);
    }

    // optional .apollo.planning.IterativeAnchoringConfig iterative_anchoring_smoother_config = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.iterative_anchoring_smoother_config_);
    }

    // optional .apollo.planning.TrajectoryPartitionConfig trajectory_partition_config = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trajectory_partition_config_);
    }

    // optional bool enable_check_parallel_trajectory = 9 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool enable_linear_interpolation = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float delta_t = 7 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 8 [default = 0.001];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double is_near_destination_theta_threshold = 11 [default = 0.05];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlannerOpenSpaceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlannerOpenSpaceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlannerOpenSpaceConfig::GetClassData() const { return &_class_data_; }

void PlannerOpenSpaceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlannerOpenSpaceConfig *>(to)->MergeFrom(
      static_cast<const PlannerOpenSpaceConfig &>(from));
}


void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roi_config()->::apollo::planning::ROIConfig::MergeFrom(from._internal_roi_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_warm_start_config()->::apollo::planning::WarmStartConfig::MergeFrom(from._internal_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableWarmStartConfig::MergeFrom(from._internal_dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_distance_approach_config()->::apollo::planning::DistanceApproachConfig::MergeFrom(from._internal_distance_approach_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_iterative_anchoring_smoother_config()->::apollo::planning::IterativeAnchoringConfig::MergeFrom(from._internal_iterative_anchoring_smoother_config());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_trajectory_partition_config()->::apollo::planning::TrajectoryPartitionConfig::MergeFrom(from._internal_trajectory_partition_config());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.enable_check_parallel_trajectory_ = from._impl_.enable_check_parallel_trajectory_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.enable_linear_interpolation_ = from._impl_.enable_linear_interpolation_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.delta_t_ = from._impl_.delta_t_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.is_near_destination_threshold_ = from._impl_.is_near_destination_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.is_near_destination_theta_threshold_ = from._impl_.is_near_destination_theta_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlannerOpenSpaceConfig, _impl_.enable_linear_interpolation_)
      + sizeof(PlannerOpenSpaceConfig::_impl_.enable_linear_interpolation_)
      - PROTOBUF_FIELD_OFFSET(PlannerOpenSpaceConfig, _impl_.roi_config_)>(
          reinterpret_cast<char*>(&_impl_.roi_config_),
          reinterpret_cast<char*>(&other->_impl_.roi_config_));
  swap(_impl_.delta_t_, other->_impl_.delta_t_);
  swap(_impl_.is_near_destination_threshold_, other->_impl_.is_near_destination_threshold_);
  swap(_impl_.is_near_destination_theta_threshold_, other->_impl_.is_near_destination_theta_threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[0]);
}

// ===================================================================

class ROIConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ROIConfig>()._impl_._has_bits_);
  static void set_has_roi_longitudinal_range_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roi_longitudinal_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parking_start_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_parking_inwards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ROIConfig::ROIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ROIConfig)
}
ROIConfig::ROIConfig(const ROIConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_inwards_){}
    , decltype(_impl_.roi_longitudinal_range_start_){}
    , decltype(_impl_.roi_longitudinal_range_end_){}
    , decltype(_impl_.parking_start_range_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parking_inwards_, &from._impl_.parking_inwards_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.parking_start_range_) -
    reinterpret_cast<char*>(&_impl_.parking_inwards_)) + sizeof(_impl_.parking_start_range_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ROIConfig)
}

inline void ROIConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_inwards_){false}
    , decltype(_impl_.roi_longitudinal_range_start_){10}
    , decltype(_impl_.roi_longitudinal_range_end_){10}
    , decltype(_impl_.parking_start_range_){7}
  };
}

ROIConfig::~ROIConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ROIConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROIConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROIConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ROIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ROIConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.parking_inwards_ = false;
    _impl_.roi_longitudinal_range_start_ = 10;
    _impl_.roi_longitudinal_range_end_ = 10;
    _impl_.parking_start_range_ = 7;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROIConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double roi_longitudinal_range_start = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_roi_longitudinal_range_start(&has_bits);
          _impl_.roi_longitudinal_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double roi_longitudinal_range_end = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_roi_longitudinal_range_end(&has_bits);
          _impl_.roi_longitudinal_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double parking_start_range = 3 [default = 7];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_parking_start_range(&has_bits);
          _impl_.parking_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool parking_inwards = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_parking_inwards(&has_bits);
          _impl_.parking_inwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROIConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ROIConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double roi_longitudinal_range_start = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_roi_longitudinal_range_start(), target);
  }

  // optional double roi_longitudinal_range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_roi_longitudinal_range_end(), target);
  }

  // optional double parking_start_range = 3 [default = 7];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_parking_start_range(), target);
  }

  // optional bool parking_inwards = 4 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_parking_inwards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ROIConfig)
  return target;
}

size_t ROIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ROIConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool parking_inwards = 4 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double roi_longitudinal_range_start = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range_end = 2 [default = 10];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double parking_start_range = 3 [default = 7];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROIConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROIConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROIConfig::GetClassData() const { return &_class_data_; }

void ROIConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROIConfig *>(to)->MergeFrom(
      static_cast<const ROIConfig &>(from));
}


void ROIConfig::MergeFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parking_inwards_ = from._impl_.parking_inwards_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.roi_longitudinal_range_start_ = from._impl_.roi_longitudinal_range_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.roi_longitudinal_range_end_ = from._impl_.roi_longitudinal_range_end_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.parking_start_range_ = from._impl_.parking_start_range_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROIConfig::CopyFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIConfig::IsInitialized() const {
  return true;
}

void ROIConfig::InternalSwap(ROIConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.parking_inwards_, other->_impl_.parking_inwards_);
  swap(_impl_.roi_longitudinal_range_start_, other->_impl_.roi_longitudinal_range_start_);
  swap(_impl_.roi_longitudinal_range_end_, other->_impl_.roi_longitudinal_range_end_);
  swap(_impl_.parking_start_range_, other->_impl_.parking_start_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[1]);
}

// ===================================================================

class WarmStartConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<WarmStartConfig>()._impl_._has_bits_);
  static void set_has_xy_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phi_grid_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_node_num(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_step_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_traj_forward_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_traj_back_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_traj_gear_switch_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_traj_steer_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_traj_steer_change_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_grid_a_star_xy_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_node_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const WarmStartConfig* msg);
  static void set_has_s_curve_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig&
WarmStartConfig::_Internal::s_curve_config(const WarmStartConfig* msg) {
  return *msg->_impl_.s_curve_config_;
}
void WarmStartConfig::clear_s_curve_config() {
  if (_impl_.s_curve_config_ != nullptr) _impl_.s_curve_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WarmStartConfig::WarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_curve_config_){nullptr}
    , decltype(_impl_.traj_forward_penalty_){}
    , decltype(_impl_.traj_back_penalty_){}
    , decltype(_impl_.xy_grid_resolution_){}
    , decltype(_impl_.phi_grid_resolution_){}
    , decltype(_impl_.next_node_num_){}
    , decltype(_impl_.step_size_){}
    , decltype(_impl_.traj_gear_switch_penalty_){}
    , decltype(_impl_.traj_steer_penalty_){}
    , decltype(_impl_.traj_steer_change_penalty_){}
    , decltype(_impl_.grid_a_star_xy_resolution_){}
    , decltype(_impl_.node_radius_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_s_curve_config()) {
    _impl_.s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig(*from._impl_.s_curve_config_);
  }
  ::memcpy(&_impl_.traj_forward_penalty_, &from._impl_.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.node_radius_) -
    reinterpret_cast<char*>(&_impl_.traj_forward_penalty_)) + sizeof(_impl_.node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.WarmStartConfig)
}

inline void WarmStartConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_curve_config_){nullptr}
    , decltype(_impl_.traj_forward_penalty_){0}
    , decltype(_impl_.traj_back_penalty_){0}
    , decltype(_impl_.xy_grid_resolution_){0.2}
    , decltype(_impl_.phi_grid_resolution_){0.05}
    , decltype(_impl_.next_node_num_){uint64_t{10u}}
    , decltype(_impl_.step_size_){0.5}
    , decltype(_impl_.traj_gear_switch_penalty_){10}
    , decltype(_impl_.traj_steer_penalty_){100}
    , decltype(_impl_.traj_steer_change_penalty_){10}
    , decltype(_impl_.grid_a_star_xy_resolution_){0.1}
    , decltype(_impl_.node_radius_){0.5}
  };
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.WarmStartConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WarmStartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.s_curve_config_;
}

void WarmStartConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.WarmStartConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.s_curve_config_ != nullptr);
    _impl_.s_curve_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.traj_back_penalty_) -
        reinterpret_cast<char*>(&_impl_.traj_forward_penalty_)) + sizeof(_impl_.traj_back_penalty_));
    _impl_.xy_grid_resolution_ = 0.2;
    _impl_.phi_grid_resolution_ = 0.05;
    _impl_.next_node_num_ = uint64_t{10u};
    _impl_.step_size_ = 0.5;
    _impl_.traj_gear_switch_penalty_ = 10;
  }
  if (cached_has_bits & 0x00000f00u) {
    _impl_.traj_steer_penalty_ = 100;
    _impl_.traj_steer_change_penalty_ = 10;
    _impl_.grid_a_star_xy_resolution_ = 0.1;
    _impl_.node_radius_ = 0.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarmStartConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_xy_grid_resolution(&has_bits);
          _impl_.xy_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_phi_grid_resolution(&has_bits);
          _impl_.phi_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 next_node_num = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_next_node_num(&has_bits);
          _impl_.next_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double step_size = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_step_size(&has_bits);
          _impl_.step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_forward_penalty = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_traj_forward_penalty(&has_bits);
          _impl_.traj_forward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_back_penalty = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_traj_back_penalty(&has_bits);
          _impl_.traj_back_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_traj_gear_switch_penalty(&has_bits);
          _impl_.traj_gear_switch_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_steer_penalty = 8 [default = 100];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_traj_steer_penalty(&has_bits);
          _impl_.traj_steer_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_traj_steer_change_penalty(&has_bits);
          _impl_.traj_steer_change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_grid_a_star_xy_resolution(&has_bits);
          _impl_.grid_a_star_xy_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double node_radius = 16 [default = 0.5];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_node_radius(&has_bits);
          _impl_.node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_curve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WarmStartConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.WarmStartConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_node_radius(), target);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::s_curve_config(this),
        _Internal::s_curve_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.WarmStartConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.s_curve_config_);
    }

    // optional double traj_forward_penalty = 5 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double traj_steer_penalty = 8 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WarmStartConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WarmStartConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WarmStartConfig::GetClassData() const { return &_class_data_; }

void WarmStartConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WarmStartConfig *>(to)->MergeFrom(
      static_cast<const WarmStartConfig &>(from));
}


void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_s_curve_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from._internal_s_curve_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.traj_forward_penalty_ = from._impl_.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.traj_back_penalty_ = from._impl_.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.xy_grid_resolution_ = from._impl_.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.phi_grid_resolution_ = from._impl_.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.next_node_num_ = from._impl_.next_node_num_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.step_size_ = from._impl_.step_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.traj_gear_switch_penalty_ = from._impl_.traj_gear_switch_penalty_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.traj_steer_penalty_ = from._impl_.traj_steer_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.traj_steer_change_penalty_ = from._impl_.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.grid_a_star_xy_resolution_ = from._impl_.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.node_radius_ = from._impl_.node_radius_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarmStartConfig, _impl_.traj_back_penalty_)
      + sizeof(WarmStartConfig::_impl_.traj_back_penalty_)
      - PROTOBUF_FIELD_OFFSET(WarmStartConfig, _impl_.s_curve_config_)>(
          reinterpret_cast<char*>(&_impl_.s_curve_config_),
          reinterpret_cast<char*>(&other->_impl_.s_curve_config_));
  swap(_impl_.xy_grid_resolution_, other->_impl_.xy_grid_resolution_);
  swap(_impl_.phi_grid_resolution_, other->_impl_.phi_grid_resolution_);
  swap(_impl_.next_node_num_, other->_impl_.next_node_num_);
  swap(_impl_.step_size_, other->_impl_.step_size_);
  swap(_impl_.traj_gear_switch_penalty_, other->_impl_.traj_gear_switch_penalty_);
  swap(_impl_.traj_steer_penalty_, other->_impl_.traj_steer_penalty_);
  swap(_impl_.traj_steer_change_penalty_, other->_impl_.traj_steer_change_penalty_);
  swap(_impl_.grid_a_star_xy_resolution_, other->_impl_.grid_a_star_xy_resolution_);
  swap(_impl_.node_radius_, other->_impl_.node_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WarmStartConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[2]);
}

// ===================================================================

class DualVariableWarmStartConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DualVariableWarmStartConfig>()._impl_._has_bits_);
  static void set_has_weight_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::IpoptConfig& ipopt_config(const DualVariableWarmStartConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_qp_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_debug_osqp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_beta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning::OSQPConfig& osqp_config(const DualVariableWarmStartConfig* msg);
  static void set_has_osqp_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::IpoptConfig&
DualVariableWarmStartConfig::_Internal::ipopt_config(const DualVariableWarmStartConfig* msg) {
  return *msg->_impl_.ipopt_config_;
}
const ::apollo::planning::OSQPConfig&
DualVariableWarmStartConfig::_Internal::osqp_config(const DualVariableWarmStartConfig* msg) {
  return *msg->_impl_.osqp_config_;
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DualVariableWarmStartConfig)
}
DualVariableWarmStartConfig::DualVariableWarmStartConfig(const DualVariableWarmStartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_config_){nullptr}
    , decltype(_impl_.osqp_config_){nullptr}
    , decltype(_impl_.min_safety_distance_){}
    , decltype(_impl_.qp_format_){}
    , decltype(_impl_.debug_osqp_){}
    , decltype(_impl_.weight_d_){}
    , decltype(_impl_.beta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    _impl_.ipopt_config_ = new ::apollo::planning::IpoptConfig(*from._impl_.ipopt_config_);
  }
  if (from._internal_has_osqp_config()) {
    _impl_.osqp_config_ = new ::apollo::planning::OSQPConfig(*from._impl_.osqp_config_);
  }
  ::memcpy(&_impl_.min_safety_distance_, &from._impl_.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.beta_) -
    reinterpret_cast<char*>(&_impl_.min_safety_distance_)) + sizeof(_impl_.beta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableWarmStartConfig)
}

inline void DualVariableWarmStartConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_config_){nullptr}
    , decltype(_impl_.osqp_config_){nullptr}
    , decltype(_impl_.min_safety_distance_){0}
    , decltype(_impl_.qp_format_){0}
    , decltype(_impl_.debug_osqp_){false}
    , decltype(_impl_.weight_d_){1}
    , decltype(_impl_.beta_){1}
  };
}

DualVariableWarmStartConfig::~DualVariableWarmStartConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableWarmStartConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DualVariableWarmStartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ipopt_config_;
  if (this != internal_default_instance()) delete _impl_.osqp_config_;
}

void DualVariableWarmStartConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DualVariableWarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableWarmStartConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ipopt_config_ != nullptr);
      _impl_.ipopt_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.osqp_config_ != nullptr);
      _impl_.osqp_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.debug_osqp_) -
        reinterpret_cast<char*>(&_impl_.min_safety_distance_)) + sizeof(_impl_.debug_osqp_));
    _impl_.weight_d_ = 1;
    _impl_.beta_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DualVariableWarmStartConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_d = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_weight_d(&has_bits);
          _impl_.weight_d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptConfig ipopt_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DualWarmUpMode qp_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DualWarmUpMode_IsValid(val))) {
            _internal_set_qp_format(static_cast<::apollo::planning::DualWarmUpMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double min_safety_distance = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          _impl_.min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug_osqp = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_debug_osqp(&has_bits);
          _impl_.debug_osqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double beta = 6 [default = 1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_beta(&has_bits);
          _impl_.beta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OSQPConfig osqp_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_osqp_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DualVariableWarmStartConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableWarmStartConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_d(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ipopt_config(this),
        _Internal::ipopt_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.DualWarmUpMode qp_format = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_beta(), target);
  }

  // optional .apollo.planning.OSQPConfig osqp_config = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::osqp_config(this),
        _Internal::osqp_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableWarmStartConfig)
  return target;
}

size_t DualVariableWarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableWarmStartConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ipopt_config_);
    }

    // optional .apollo.planning.OSQPConfig osqp_config = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.osqp_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualWarmUpMode qp_format = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DualVariableWarmStartConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DualVariableWarmStartConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DualVariableWarmStartConfig::GetClassData() const { return &_class_data_; }

void DualVariableWarmStartConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DualVariableWarmStartConfig *>(to)->MergeFrom(
      static_cast<const DualVariableWarmStartConfig &>(from));
}


void DualVariableWarmStartConfig::MergeFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableWarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_osqp_config()->::apollo::planning::OSQPConfig::MergeFrom(from._internal_osqp_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_safety_distance_ = from._impl_.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.qp_format_ = from._impl_.qp_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.debug_osqp_ = from._impl_.debug_osqp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.weight_d_ = from._impl_.weight_d_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.beta_ = from._impl_.beta_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DualVariableWarmStartConfig::CopyFrom(const DualVariableWarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableWarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableWarmStartConfig::IsInitialized() const {
  return true;
}

void DualVariableWarmStartConfig::InternalSwap(DualVariableWarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualVariableWarmStartConfig, _impl_.debug_osqp_)
      + sizeof(DualVariableWarmStartConfig::_impl_.debug_osqp_)
      - PROTOBUF_FIELD_OFFSET(DualVariableWarmStartConfig, _impl_.ipopt_config_)>(
          reinterpret_cast<char*>(&_impl_.ipopt_config_),
          reinterpret_cast<char*>(&other->_impl_.ipopt_config_));
  swap(_impl_.weight_d_, other->_impl_.weight_d_);
  swap(_impl_.beta_, other->_impl_.beta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DualVariableWarmStartConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[3]);
}

// ===================================================================

class DistanceApproachConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DistanceApproachConfig>()._impl_._has_bits_);
  static void set_has_weight_steer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_weight_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_steer_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_a_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_weight_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_weight_v(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_weight_steer_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_weight_a_stitching(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weight_first_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weight_second_order_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_safety_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_speed_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_speed_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_acceleration_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_max_acceleration_reverse(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_min_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_max_time_sample_scaling(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_use_fix_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::apollo::planning::IpoptConfig& ipopt_config(const DistanceApproachConfig* msg);
  static void set_has_ipopt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_constraint_check(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_enable_hand_derivative(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_enable_derivative_check(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_enable_initial_final_check(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_distance_approach_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_enable_jacobian_ad(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_enable_check_initial_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_weight_end_state(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_weight_slack(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::apollo::planning::IpoptConfig&
DistanceApproachConfig::_Internal::ipopt_config(const DistanceApproachConfig* msg) {
  return *msg->_impl_.ipopt_config_;
}
DistanceApproachConfig::DistanceApproachConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DistanceApproachConfig)
}
DistanceApproachConfig::DistanceApproachConfig(const DistanceApproachConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_config_){nullptr}
    , decltype(_impl_.weight_steer_){}
    , decltype(_impl_.weight_a_){}
    , decltype(_impl_.weight_steer_rate_){}
    , decltype(_impl_.weight_a_rate_){}
    , decltype(_impl_.weight_x_){}
    , decltype(_impl_.weight_y_){}
    , decltype(_impl_.weight_phi_){}
    , decltype(_impl_.weight_v_){}
    , decltype(_impl_.weight_steer_stitching_){}
    , decltype(_impl_.weight_a_stitching_){}
    , decltype(_impl_.weight_first_order_time_){}
    , decltype(_impl_.weight_second_order_time_){}
    , decltype(_impl_.min_safety_distance_){}
    , decltype(_impl_.use_fix_time_){}
    , decltype(_impl_.enable_constraint_check_){}
    , decltype(_impl_.enable_hand_derivative_){}
    , decltype(_impl_.enable_derivative_check_){}
    , decltype(_impl_.distance_approach_mode_){}
    , decltype(_impl_.weight_end_state_){}
    , decltype(_impl_.weight_slack_){}
    , decltype(_impl_.enable_initial_final_check_){}
    , decltype(_impl_.enable_jacobian_ad_){}
    , decltype(_impl_.enable_check_initial_state_){}
    , decltype(_impl_.max_speed_forward_){}
    , decltype(_impl_.max_speed_reverse_){}
    , decltype(_impl_.max_acceleration_forward_){}
    , decltype(_impl_.max_acceleration_reverse_){}
    , decltype(_impl_.min_time_sample_scaling_){}
    , decltype(_impl_.max_time_sample_scaling_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ipopt_config()) {
    _impl_.ipopt_config_ = new ::apollo::planning::IpoptConfig(*from._impl_.ipopt_config_);
  }
  ::memcpy(&_impl_.weight_steer_, &from._impl_.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_time_sample_scaling_) -
    reinterpret_cast<char*>(&_impl_.weight_steer_)) + sizeof(_impl_.max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachConfig)
}

inline void DistanceApproachConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_config_){nullptr}
    , decltype(_impl_.weight_steer_){0}
    , decltype(_impl_.weight_a_){0}
    , decltype(_impl_.weight_steer_rate_){0}
    , decltype(_impl_.weight_a_rate_){0}
    , decltype(_impl_.weight_x_){0}
    , decltype(_impl_.weight_y_){0}
    , decltype(_impl_.weight_phi_){0}
    , decltype(_impl_.weight_v_){0}
    , decltype(_impl_.weight_steer_stitching_){0}
    , decltype(_impl_.weight_a_stitching_){0}
    , decltype(_impl_.weight_first_order_time_){0}
    , decltype(_impl_.weight_second_order_time_){0}
    , decltype(_impl_.min_safety_distance_){0}
    , decltype(_impl_.use_fix_time_){false}
    , decltype(_impl_.enable_constraint_check_){false}
    , decltype(_impl_.enable_hand_derivative_){false}
    , decltype(_impl_.enable_derivative_check_){false}
    , decltype(_impl_.distance_approach_mode_){0}
    , decltype(_impl_.weight_end_state_){0}
    , decltype(_impl_.weight_slack_){0}
    , decltype(_impl_.enable_initial_final_check_){false}
    , decltype(_impl_.enable_jacobian_ad_){false}
    , decltype(_impl_.enable_check_initial_state_){false}
    , decltype(_impl_.max_speed_forward_){3}
    , decltype(_impl_.max_speed_reverse_){2}
    , decltype(_impl_.max_acceleration_forward_){2}
    , decltype(_impl_.max_acceleration_reverse_){2}
    , decltype(_impl_.min_time_sample_scaling_){0.1}
    , decltype(_impl_.max_time_sample_scaling_){10}
  };
}

DistanceApproachConfig::~DistanceApproachConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistanceApproachConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ipopt_config_;
}

void DistanceApproachConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistanceApproachConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ipopt_config_ != nullptr);
    _impl_.ipopt_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.weight_phi_) -
        reinterpret_cast<char*>(&_impl_.weight_steer_)) + sizeof(_impl_.weight_phi_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_constraint_check_) -
        reinterpret_cast<char*>(&_impl_.weight_v_)) + sizeof(_impl_.enable_constraint_check_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.enable_check_initial_state_) -
        reinterpret_cast<char*>(&_impl_.enable_hand_derivative_)) + sizeof(_impl_.enable_check_initial_state_));
  }
  if (cached_has_bits & 0x3f000000u) {
    _impl_.max_speed_forward_ = 3;
    _impl_.max_speed_reverse_ = 2;
    _impl_.max_acceleration_forward_ = 2;
    _impl_.max_acceleration_reverse_ = 2;
    _impl_.min_time_sample_scaling_ = 0.1;
    _impl_.max_time_sample_scaling_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceApproachConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_weight_steer(&has_bits);
          _impl_.weight_steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_weight_a(&has_bits);
          _impl_.weight_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_steer_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_weight_steer_rate(&has_bits);
          _impl_.weight_steer_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_weight_a_rate(&has_bits);
          _impl_.weight_a_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_weight_x(&has_bits);
          _impl_.weight_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_weight_y(&has_bits);
          _impl_.weight_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_phi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_weight_phi(&has_bits);
          _impl_.weight_phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_weight_v(&has_bits);
          _impl_.weight_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_steer_stitching = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_weight_steer_stitching(&has_bits);
          _impl_.weight_steer_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_a_stitching = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_weight_a_stitching(&has_bits);
          _impl_.weight_a_stitching_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_first_order_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_weight_first_order_time(&has_bits);
          _impl_.weight_first_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_second_order_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_weight_second_order_time(&has_bits);
          _impl_.weight_second_order_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_safety_distance = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_min_safety_distance(&has_bits);
          _impl_.min_safety_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_speed_forward = 14 [default = 3];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_max_speed_forward(&has_bits);
          _impl_.max_speed_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_speed_reverse = 15 [default = 2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_max_speed_reverse(&has_bits);
          _impl_.max_speed_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_forward = 16 [default = 2];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_max_acceleration_forward(&has_bits);
          _impl_.max_acceleration_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_max_acceleration_reverse(&has_bits);
          _impl_.max_acceleration_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_min_time_sample_scaling(&has_bits);
          _impl_.min_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_max_time_sample_scaling(&has_bits);
          _impl_.max_time_sample_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_fix_time = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_use_fix_time(&has_bits);
          _impl_.use_fix_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.IpoptConfig ipopt_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ipopt_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_constraint_check = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_enable_constraint_check(&has_bits);
          _impl_.enable_constraint_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_hand_derivative = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_enable_hand_derivative(&has_bits);
          _impl_.enable_hand_derivative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_derivative_check = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_enable_derivative_check(&has_bits);
          _impl_.enable_derivative_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_initial_final_check = 25 [default = false];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_enable_initial_final_check(&has_bits);
          _impl_.enable_initial_final_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::DistanceApproachMode_IsValid(val))) {
            _internal_set_distance_approach_mode(static_cast<::apollo::planning::DistanceApproachMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_jacobian_ad = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_enable_jacobian_ad(&has_bits);
          _impl_.enable_jacobian_ad_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_check_initial_state = 28 [default = false];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_enable_check_initial_state(&has_bits);
          _impl_.enable_check_initial_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_end_state = 29 [default = 0];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _Internal::set_has_weight_end_state(&has_bits);
          _impl_.weight_end_state_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_slack = 30 [default = 0];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_weight_slack(&has_bits);
          _impl_.weight_slack_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistanceApproachConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::ipopt_config(this),
        _Internal::ipopt_config(this).GetCachedSize(), target, stream);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_enable_initial_final_check(), target);
  }

  // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_distance_approach_mode(), target);
  }

  // optional bool enable_jacobian_ad = 27 [default = false];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_enable_jacobian_ad(), target);
  }

  // optional bool enable_check_initial_state = 28 [default = false];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_enable_check_initial_state(), target);
  }

  // optional double weight_end_state = 29 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_weight_end_state(), target);
  }

  // optional double weight_slack = 30 [default = 0];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_weight_slack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachConfig)
  return target;
}

size_t DistanceApproachConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.IpoptConfig ipopt_config = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double weight_v = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool enable_hand_derivative = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional .apollo.planning.DistanceApproachMode distance_approach_mode = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_distance_approach_mode());
    }

    // optional double weight_end_state = 29 [default = 0];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double weight_slack = 30 [default = 0];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_jacobian_ad = 27 [default = false];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool enable_check_initial_state = 28 [default = false];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional double max_speed_forward = 14 [default = 3];
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double max_time_sample_scaling = 19 [default = 10];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceApproachConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistanceApproachConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceApproachConfig::GetClassData() const { return &_class_data_; }

void DistanceApproachConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistanceApproachConfig *>(to)->MergeFrom(
      static_cast<const DistanceApproachConfig &>(from));
}


void DistanceApproachConfig::MergeFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ipopt_config()->::apollo::planning::IpoptConfig::MergeFrom(from._internal_ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.weight_steer_ = from._impl_.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.weight_a_ = from._impl_.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.weight_steer_rate_ = from._impl_.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.weight_a_rate_ = from._impl_.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.weight_x_ = from._impl_.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.weight_y_ = from._impl_.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.weight_phi_ = from._impl_.weight_phi_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.weight_v_ = from._impl_.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.weight_steer_stitching_ = from._impl_.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.weight_a_stitching_ = from._impl_.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.weight_first_order_time_ = from._impl_.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.weight_second_order_time_ = from._impl_.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.min_safety_distance_ = from._impl_.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.use_fix_time_ = from._impl_.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.enable_constraint_check_ = from._impl_.enable_constraint_check_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.enable_hand_derivative_ = from._impl_.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.enable_derivative_check_ = from._impl_.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.distance_approach_mode_ = from._impl_.distance_approach_mode_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.weight_end_state_ = from._impl_.weight_end_state_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.weight_slack_ = from._impl_.weight_slack_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.enable_initial_final_check_ = from._impl_.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.enable_jacobian_ad_ = from._impl_.enable_jacobian_ad_;
    }
    if (cached_has_bits & 0x00800000u) {
      _impl_.enable_check_initial_state_ = from._impl_.enable_check_initial_state_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _impl_.max_speed_forward_ = from._impl_.max_speed_forward_;
    }
    if (cached_has_bits & 0x02000000u) {
      _impl_.max_speed_reverse_ = from._impl_.max_speed_reverse_;
    }
    if (cached_has_bits & 0x04000000u) {
      _impl_.max_acceleration_forward_ = from._impl_.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x08000000u) {
      _impl_.max_acceleration_reverse_ = from._impl_.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x10000000u) {
      _impl_.min_time_sample_scaling_ = from._impl_.min_time_sample_scaling_;
    }
    if (cached_has_bits & 0x20000000u) {
      _impl_.max_time_sample_scaling_ = from._impl_.max_time_sample_scaling_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceApproachConfig::CopyFrom(const DistanceApproachConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachConfig::IsInitialized() const {
  return true;
}

void DistanceApproachConfig::InternalSwap(DistanceApproachConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DistanceApproachConfig, _impl_.enable_check_initial_state_)
      + sizeof(DistanceApproachConfig::_impl_.enable_check_initial_state_)
      - PROTOBUF_FIELD_OFFSET(DistanceApproachConfig, _impl_.ipopt_config_)>(
          reinterpret_cast<char*>(&_impl_.ipopt_config_),
          reinterpret_cast<char*>(&other->_impl_.ipopt_config_));
  swap(_impl_.max_speed_forward_, other->_impl_.max_speed_forward_);
  swap(_impl_.max_speed_reverse_, other->_impl_.max_speed_reverse_);
  swap(_impl_.max_acceleration_forward_, other->_impl_.max_acceleration_forward_);
  swap(_impl_.max_acceleration_reverse_, other->_impl_.max_acceleration_reverse_);
  swap(_impl_.min_time_sample_scaling_, other->_impl_.min_time_sample_scaling_);
  swap(_impl_.max_time_sample_scaling_, other->_impl_.max_time_sample_scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceApproachConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[4]);
}

// ===================================================================

class IpoptConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IpoptConfig>()._impl_._has_bits_);
  static void set_has_ipopt_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mumps_mem_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mumps_pivtol(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ipopt_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ipopt_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ipopt_acceptable_constr_viol_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ipopt_min_hessian_perturbation(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_jacobian_regularization_value(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ipopt_print_timing_statistics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ipopt_alpha_for_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipopt_recalc_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipopt_mu_init(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

IpoptConfig::IpoptConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.IpoptConfig)
}
IpoptConfig::IpoptConfig(const IpoptConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_print_timing_statistics_){}
    , decltype(_impl_.ipopt_alpha_for_y_){}
    , decltype(_impl_.ipopt_recalc_y_){}
    , decltype(_impl_.ipopt_print_level_){}
    , decltype(_impl_.mumps_mem_percent_){}
    , decltype(_impl_.mumps_pivtol_){}
    , decltype(_impl_.ipopt_tol_){}
    , decltype(_impl_.ipopt_acceptable_constr_viol_tol_){}
    , decltype(_impl_.ipopt_min_hessian_perturbation_){}
    , decltype(_impl_.ipopt_jacobian_regularization_value_){}
    , decltype(_impl_.ipopt_max_iter_){}
    , decltype(_impl_.ipopt_mu_init_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ipopt_print_timing_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_print_timing_statistics_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipopt_print_timing_statistics()) {
    _impl_.ipopt_print_timing_statistics_.Set(from._internal_ipopt_print_timing_statistics(), 
      GetArenaForAllocation());
  }
  _impl_.ipopt_alpha_for_y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_alpha_for_y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipopt_alpha_for_y()) {
    _impl_.ipopt_alpha_for_y_.Set(from._internal_ipopt_alpha_for_y(), 
      GetArenaForAllocation());
  }
  _impl_.ipopt_recalc_y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_recalc_y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ipopt_recalc_y()) {
    _impl_.ipopt_recalc_y_.Set(from._internal_ipopt_recalc_y(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ipopt_print_level_, &from._impl_.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ipopt_mu_init_) -
    reinterpret_cast<char*>(&_impl_.ipopt_print_level_)) + sizeof(_impl_.ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptConfig)
}

inline void IpoptConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ipopt_print_timing_statistics_){}
    , decltype(_impl_.ipopt_alpha_for_y_){}
    , decltype(_impl_.ipopt_recalc_y_){}
    , decltype(_impl_.ipopt_print_level_){0}
    , decltype(_impl_.mumps_mem_percent_){0}
    , decltype(_impl_.mumps_pivtol_){0}
    , decltype(_impl_.ipopt_tol_){0}
    , decltype(_impl_.ipopt_acceptable_constr_viol_tol_){0}
    , decltype(_impl_.ipopt_min_hessian_perturbation_){0}
    , decltype(_impl_.ipopt_jacobian_regularization_value_){0}
    , decltype(_impl_.ipopt_max_iter_){0}
    , decltype(_impl_.ipopt_mu_init_){0.1}
  };
  _impl_.ipopt_print_timing_statistics_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_print_timing_statistics_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipopt_alpha_for_y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_alpha_for_y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipopt_recalc_y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipopt_recalc_y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IpoptConfig::~IpoptConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IpoptConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ipopt_print_timing_statistics_.Destroy();
  _impl_.ipopt_alpha_for_y_.Destroy();
  _impl_.ipopt_recalc_y_.Destroy();
}

void IpoptConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IpoptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ipopt_print_timing_statistics_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ipopt_alpha_for_y_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ipopt_recalc_y_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&_impl_.ipopt_print_level_)) + sizeof(_impl_.ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ipopt_max_iter_) -
        reinterpret_cast<char*>(&_impl_.ipopt_min_hessian_perturbation_)) + sizeof(_impl_.ipopt_max_iter_));
    _impl_.ipopt_mu_init_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpoptConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ipopt_print_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ipopt_print_level(&has_bits);
          _impl_.ipopt_print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 mumps_mem_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mumps_mem_percent(&has_bits);
          _impl_.mumps_mem_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double mumps_pivtol = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_mumps_pivtol(&has_bits);
          _impl_.mumps_pivtol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ipopt_max_iter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ipopt_max_iter(&has_bits);
          _impl_.ipopt_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_tol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_ipopt_tol(&has_bits);
          _impl_.ipopt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_ipopt_acceptable_constr_viol_tol(&has_bits);
          _impl_.ipopt_acceptable_constr_viol_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_min_hessian_perturbation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_ipopt_min_hessian_perturbation(&has_bits);
          _impl_.ipopt_min_hessian_perturbation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_jacobian_regularization_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_ipopt_jacobian_regularization_value(&has_bits);
          _impl_.ipopt_jacobian_regularization_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_print_timing_statistics = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ipopt_print_timing_statistics();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_alpha_for_y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ipopt_alpha_for_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ipopt_recalc_y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_ipopt_recalc_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.IpoptConfig.ipopt_recalc_y");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_ipopt_mu_init(&has_bits);
          _impl_.ipopt_mu_init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IpoptConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_print_timing_statistics().data(), static_cast<int>(this->_internal_ipopt_print_timing_statistics().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_print_timing_statistics");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_alpha_for_y().data(), static_cast<int>(this->_internal_ipopt_alpha_for_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_alpha_for_y");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ipopt_recalc_y().data(), static_cast<int>(this->_internal_ipopt_recalc_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptConfig.ipopt_recalc_y");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_ipopt_mu_init(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptConfig)
  return target;
}

size_t IpoptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string ipopt_print_timing_statistics = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IpoptConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IpoptConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IpoptConfig::GetClassData() const { return &_class_data_; }

void IpoptConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IpoptConfig *>(to)->MergeFrom(
      static_cast<const IpoptConfig &>(from));
}


void IpoptConfig::MergeFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ipopt_print_timing_statistics(from._internal_ipopt_print_timing_statistics());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ipopt_alpha_for_y(from._internal_ipopt_alpha_for_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ipopt_recalc_y(from._internal_ipopt_recalc_y());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ipopt_print_level_ = from._impl_.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.mumps_mem_percent_ = from._impl_.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.mumps_pivtol_ = from._impl_.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.ipopt_tol_ = from._impl_.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.ipopt_acceptable_constr_viol_tol_ = from._impl_.ipopt_acceptable_constr_viol_tol_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.ipopt_min_hessian_perturbation_ = from._impl_.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.ipopt_jacobian_regularization_value_ = from._impl_.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.ipopt_max_iter_ = from._impl_.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.ipopt_mu_init_ = from._impl_.ipopt_mu_init_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IpoptConfig::CopyFrom(const IpoptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptConfig::IsInitialized() const {
  return true;
}

void IpoptConfig::InternalSwap(IpoptConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipopt_print_timing_statistics_, lhs_arena,
      &other->_impl_.ipopt_print_timing_statistics_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipopt_alpha_for_y_, lhs_arena,
      &other->_impl_.ipopt_alpha_for_y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipopt_recalc_y_, lhs_arena,
      &other->_impl_.ipopt_recalc_y_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IpoptConfig, _impl_.ipopt_max_iter_)
      + sizeof(IpoptConfig::_impl_.ipopt_max_iter_)
      - PROTOBUF_FIELD_OFFSET(IpoptConfig, _impl_.ipopt_print_level_)>(
          reinterpret_cast<char*>(&_impl_.ipopt_print_level_),
          reinterpret_cast<char*>(&other->_impl_.ipopt_print_level_));
  swap(_impl_.ipopt_mu_init_, other->_impl_.ipopt_mu_init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpoptConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[5]);
}

// ===================================================================

class OSQPConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<OSQPConfig>()._impl_._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eps_abs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_eps_rel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_polish(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_osqp_debug_log(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OSQPConfig::OSQPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OSQPConfig)
}
OSQPConfig::OSQPConfig(const OSQPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.osqp_debug_log_){}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.eps_abs_){}
    , decltype(_impl_.eps_rel_){}
    , decltype(_impl_.max_iter_){}
    , decltype(_impl_.polish_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.osqp_debug_log_, &from._impl_.osqp_debug_log_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.polish_) -
    reinterpret_cast<char*>(&_impl_.osqp_debug_log_)) + sizeof(_impl_.polish_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OSQPConfig)
}

inline void OSQPConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.osqp_debug_log_){false}
    , decltype(_impl_.alpha_){1}
    , decltype(_impl_.eps_abs_){0.001}
    , decltype(_impl_.eps_rel_){0.001}
    , decltype(_impl_.max_iter_){10000}
    , decltype(_impl_.polish_){true}
  };
}

OSQPConfig::~OSQPConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OSQPConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OSQPConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OSQPConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OSQPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OSQPConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    _impl_.osqp_debug_log_ = false;
    _impl_.alpha_ = 1;
    _impl_.eps_abs_ = 0.001;
    _impl_.eps_rel_ = 0.001;
    _impl_.max_iter_ = 10000;
    _impl_.polish_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OSQPConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double alpha = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_alpha(&has_bits);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_abs = 2 [default = 0.001];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_eps_abs(&has_bits);
          _impl_.eps_abs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eps_rel = 3 [default = 0.001];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_eps_rel(&has_bits);
          _impl_.eps_rel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_iter = 4 [default = 10000];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_iter(&has_bits);
          _impl_.max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool polish = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_polish(&has_bits);
          _impl_.polish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool osqp_debug_log = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_osqp_debug_log(&has_bits);
          _impl_.osqp_debug_log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OSQPConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OSQPConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double alpha = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_alpha(), target);
  }

  // optional double eps_abs = 2 [default = 0.001];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_eps_abs(), target);
  }

  // optional double eps_rel = 3 [default = 0.001];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_eps_rel(), target);
  }

  // optional int32 max_iter = 4 [default = 10000];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_iter(), target);
  }

  // optional bool polish = 5 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_polish(), target);
  }

  // optional bool osqp_debug_log = 6 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_osqp_debug_log(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OSQPConfig)
  return target;
}

size_t OSQPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OSQPConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool osqp_debug_log = 6 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double alpha = 1 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double eps_abs = 2 [default = 0.001];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double eps_rel = 3 [default = 0.001];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 max_iter = 4 [default = 10000];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_iter());
    }

    // optional bool polish = 5 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OSQPConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OSQPConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OSQPConfig::GetClassData() const { return &_class_data_; }

void OSQPConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OSQPConfig *>(to)->MergeFrom(
      static_cast<const OSQPConfig &>(from));
}


void OSQPConfig::MergeFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OSQPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.osqp_debug_log_ = from._impl_.osqp_debug_log_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.eps_abs_ = from._impl_.eps_abs_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.eps_rel_ = from._impl_.eps_rel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.max_iter_ = from._impl_.max_iter_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.polish_ = from._impl_.polish_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OSQPConfig::CopyFrom(const OSQPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OSQPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSQPConfig::IsInitialized() const {
  return true;
}

void OSQPConfig::InternalSwap(OSQPConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.osqp_debug_log_, other->_impl_.osqp_debug_log_);
  swap(_impl_.alpha_, other->_impl_.alpha_);
  swap(_impl_.eps_abs_, other->_impl_.eps_abs_);
  swap(_impl_.eps_rel_, other->_impl_.eps_rel_);
  swap(_impl_.max_iter_, other->_impl_.max_iter_);
  swap(_impl_.polish_, other->_impl_.polish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OSQPConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[6]);
}

// ===================================================================

class IterativeAnchoringConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<IterativeAnchoringConfig>()._impl_._has_bits_);
  static void set_has_interpolated_delta_s(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reanchoring_trails_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reanchoring_pos_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reanchoring_length_stddev(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_estimate_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_bound(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vehicle_shortest_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoother_config(const IterativeAnchoringConfig* msg);
  static void set_has_fem_pos_deviation_smoother_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_collision_decrease_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_forward_v(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_reverse_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_forward_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_reverse_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_acc_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_delta_t(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const IterativeAnchoringConfig* msg);
  static void set_has_s_curve_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::FemPosDeviationSmootherConfig&
IterativeAnchoringConfig::_Internal::fem_pos_deviation_smoother_config(const IterativeAnchoringConfig* msg) {
  return *msg->_impl_.fem_pos_deviation_smoother_config_;
}
const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig&
IterativeAnchoringConfig::_Internal::s_curve_config(const IterativeAnchoringConfig* msg) {
  return *msg->_impl_.s_curve_config_;
}
void IterativeAnchoringConfig::clear_fem_pos_deviation_smoother_config() {
  if (_impl_.fem_pos_deviation_smoother_config_ != nullptr) _impl_.fem_pos_deviation_smoother_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void IterativeAnchoringConfig::clear_s_curve_config() {
  if (_impl_.s_curve_config_ != nullptr) _impl_.s_curve_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
IterativeAnchoringConfig::IterativeAnchoringConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.IterativeAnchoringConfig)
}
IterativeAnchoringConfig::IterativeAnchoringConfig(const IterativeAnchoringConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fem_pos_deviation_smoother_config_){nullptr}
    , decltype(_impl_.s_curve_config_){nullptr}
    , decltype(_impl_.estimate_bound_){}
    , decltype(_impl_.reanchoring_trails_num_){}
    , decltype(_impl_.interpolated_delta_s_){}
    , decltype(_impl_.reanchoring_pos_stddev_){}
    , decltype(_impl_.reanchoring_length_stddev_){}
    , decltype(_impl_.default_bound_){}
    , decltype(_impl_.vehicle_shortest_dimension_){}
    , decltype(_impl_.collision_decrease_ratio_){}
    , decltype(_impl_.max_forward_v_){}
    , decltype(_impl_.max_reverse_v_){}
    , decltype(_impl_.max_forward_acc_){}
    , decltype(_impl_.max_reverse_acc_){}
    , decltype(_impl_.max_acc_jerk_){}
    , decltype(_impl_.delta_t_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fem_pos_deviation_smoother_config()) {
    _impl_.fem_pos_deviation_smoother_config_ = new ::apollo::planning::FemPosDeviationSmootherConfig(*from._impl_.fem_pos_deviation_smoother_config_);
  }
  if (from._internal_has_s_curve_config()) {
    _impl_.s_curve_config_ = new ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig(*from._impl_.s_curve_config_);
  }
  ::memcpy(&_impl_.estimate_bound_, &from._impl_.estimate_bound_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delta_t_) -
    reinterpret_cast<char*>(&_impl_.estimate_bound_)) + sizeof(_impl_.delta_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IterativeAnchoringConfig)
}

inline void IterativeAnchoringConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fem_pos_deviation_smoother_config_){nullptr}
    , decltype(_impl_.s_curve_config_){nullptr}
    , decltype(_impl_.estimate_bound_){false}
    , decltype(_impl_.reanchoring_trails_num_){50}
    , decltype(_impl_.interpolated_delta_s_){0.1}
    , decltype(_impl_.reanchoring_pos_stddev_){0.25}
    , decltype(_impl_.reanchoring_length_stddev_){1}
    , decltype(_impl_.default_bound_){2}
    , decltype(_impl_.vehicle_shortest_dimension_){1.04}
    , decltype(_impl_.collision_decrease_ratio_){0.9}
    , decltype(_impl_.max_forward_v_){2}
    , decltype(_impl_.max_reverse_v_){2}
    , decltype(_impl_.max_forward_acc_){3}
    , decltype(_impl_.max_reverse_acc_){2}
    , decltype(_impl_.max_acc_jerk_){4}
    , decltype(_impl_.delta_t_){0.2}
  };
}

IterativeAnchoringConfig::~IterativeAnchoringConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IterativeAnchoringConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IterativeAnchoringConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fem_pos_deviation_smoother_config_;
  if (this != internal_default_instance()) delete _impl_.s_curve_config_;
}

void IterativeAnchoringConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IterativeAnchoringConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IterativeAnchoringConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fem_pos_deviation_smoother_config_ != nullptr);
      _impl_.fem_pos_deviation_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.s_curve_config_ != nullptr);
      _impl_.s_curve_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    _impl_.estimate_bound_ = false;
    _impl_.reanchoring_trails_num_ = 50;
    _impl_.interpolated_delta_s_ = 0.1;
    _impl_.reanchoring_pos_stddev_ = 0.25;
    _impl_.reanchoring_length_stddev_ = 1;
    _impl_.default_bound_ = 2;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.vehicle_shortest_dimension_ = 1.04;
    _impl_.collision_decrease_ratio_ = 0.9;
    _impl_.max_forward_v_ = 2;
    _impl_.max_reverse_v_ = 2;
    _impl_.max_forward_acc_ = 3;
    _impl_.max_reverse_acc_ = 2;
    _impl_.max_acc_jerk_ = 4;
    _impl_.delta_t_ = 0.2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IterativeAnchoringConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double interpolated_delta_s = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_interpolated_delta_s(&has_bits);
          _impl_.interpolated_delta_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 reanchoring_trails_num = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reanchoring_trails_num(&has_bits);
          _impl_.reanchoring_trails_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double reanchoring_pos_stddev = 3 [default = 0.25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_reanchoring_pos_stddev(&has_bits);
          _impl_.reanchoring_pos_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reanchoring_length_stddev = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_reanchoring_length_stddev(&has_bits);
          _impl_.reanchoring_length_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool estimate_bound = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_estimate_bound(&has_bits);
          _impl_.estimate_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double default_bound = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_default_bound(&has_bits);
          _impl_.default_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double vehicle_shortest_dimension = 7 [default = 1.04];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_vehicle_shortest_dimension(&has_bits);
          _impl_.vehicle_shortest_dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fem_pos_deviation_smoother_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double collision_decrease_ratio = 9 [default = 0.9];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_collision_decrease_ratio(&has_bits);
          _impl_.collision_decrease_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_forward_v = 10 [default = 2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_max_forward_v(&has_bits);
          _impl_.max_forward_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_reverse_v = 11 [default = 2];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_max_reverse_v(&has_bits);
          _impl_.max_reverse_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_forward_acc = 12 [default = 3];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_max_forward_acc(&has_bits);
          _impl_.max_forward_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_reverse_acc = 13 [default = 2];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_max_reverse_acc(&has_bits);
          _impl_.max_reverse_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acc_jerk = 14 [default = 4];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_max_acc_jerk(&has_bits);
          _impl_.max_acc_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double delta_t = 15 [default = 0.2];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_delta_t(&has_bits);
          _impl_.delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_curve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IterativeAnchoringConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IterativeAnchoringConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double interpolated_delta_s = 1 [default = 0.1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_interpolated_delta_s(), target);
  }

  // optional int32 reanchoring_trails_num = 2 [default = 50];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reanchoring_trails_num(), target);
  }

  // optional double reanchoring_pos_stddev = 3 [default = 0.25];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_reanchoring_pos_stddev(), target);
  }

  // optional double reanchoring_length_stddev = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_reanchoring_length_stddev(), target);
  }

  // optional bool estimate_bound = 5 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_estimate_bound(), target);
  }

  // optional double default_bound = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_default_bound(), target);
  }

  // optional double vehicle_shortest_dimension = 7 [default = 1.04];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_vehicle_shortest_dimension(), target);
  }

  // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fem_pos_deviation_smoother_config(this),
        _Internal::fem_pos_deviation_smoother_config(this).GetCachedSize(), target, stream);
  }

  // optional double collision_decrease_ratio = 9 [default = 0.9];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_collision_decrease_ratio(), target);
  }

  // optional double max_forward_v = 10 [default = 2];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_forward_v(), target);
  }

  // optional double max_reverse_v = 11 [default = 2];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_reverse_v(), target);
  }

  // optional double max_forward_acc = 12 [default = 3];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_forward_acc(), target);
  }

  // optional double max_reverse_acc = 13 [default = 2];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_reverse_acc(), target);
  }

  // optional double max_acc_jerk = 14 [default = 4];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_acc_jerk(), target);
  }

  // optional double delta_t = 15 [default = 0.2];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_delta_t(), target);
  }

  // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::s_curve_config(this),
        _Internal::s_curve_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IterativeAnchoringConfig)
  return target;
}

size_t IterativeAnchoringConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IterativeAnchoringConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoother_config = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fem_pos_deviation_smoother_config_);
    }

    // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.s_curve_config_);
    }

    // optional bool estimate_bound = 5 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 reanchoring_trails_num = 2 [default = 50];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reanchoring_trails_num());
    }

    // optional double interpolated_delta_s = 1 [default = 0.1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_pos_stddev = 3 [default = 0.25];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double reanchoring_length_stddev = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double default_bound = 6 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double vehicle_shortest_dimension = 7 [default = 1.04];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double collision_decrease_ratio = 9 [default = 0.9];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double max_forward_v = 10 [default = 2];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_v = 11 [default = 2];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double max_forward_acc = 12 [default = 3];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double max_reverse_acc = 13 [default = 2];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double max_acc_jerk = 14 [default = 4];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double delta_t = 15 [default = 0.2];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IterativeAnchoringConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IterativeAnchoringConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IterativeAnchoringConfig::GetClassData() const { return &_class_data_; }

void IterativeAnchoringConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IterativeAnchoringConfig *>(to)->MergeFrom(
      static_cast<const IterativeAnchoringConfig &>(from));
}


void IterativeAnchoringConfig::MergeFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IterativeAnchoringConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fem_pos_deviation_smoother_config()->::apollo::planning::FemPosDeviationSmootherConfig::MergeFrom(from._internal_fem_pos_deviation_smoother_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_s_curve_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from._internal_s_curve_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.estimate_bound_ = from._impl_.estimate_bound_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.reanchoring_trails_num_ = from._impl_.reanchoring_trails_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.interpolated_delta_s_ = from._impl_.interpolated_delta_s_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.reanchoring_pos_stddev_ = from._impl_.reanchoring_pos_stddev_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.reanchoring_length_stddev_ = from._impl_.reanchoring_length_stddev_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.default_bound_ = from._impl_.default_bound_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.vehicle_shortest_dimension_ = from._impl_.vehicle_shortest_dimension_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.collision_decrease_ratio_ = from._impl_.collision_decrease_ratio_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.max_forward_v_ = from._impl_.max_forward_v_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.max_reverse_v_ = from._impl_.max_reverse_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.max_forward_acc_ = from._impl_.max_forward_acc_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.max_reverse_acc_ = from._impl_.max_reverse_acc_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.max_acc_jerk_ = from._impl_.max_acc_jerk_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.delta_t_ = from._impl_.delta_t_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IterativeAnchoringConfig::CopyFrom(const IterativeAnchoringConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IterativeAnchoringConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IterativeAnchoringConfig::IsInitialized() const {
  return true;
}

void IterativeAnchoringConfig::InternalSwap(IterativeAnchoringConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IterativeAnchoringConfig, _impl_.estimate_bound_)
      + sizeof(IterativeAnchoringConfig::_impl_.estimate_bound_)
      - PROTOBUF_FIELD_OFFSET(IterativeAnchoringConfig, _impl_.fem_pos_deviation_smoother_config_)>(
          reinterpret_cast<char*>(&_impl_.fem_pos_deviation_smoother_config_),
          reinterpret_cast<char*>(&other->_impl_.fem_pos_deviation_smoother_config_));
  swap(_impl_.reanchoring_trails_num_, other->_impl_.reanchoring_trails_num_);
  swap(_impl_.interpolated_delta_s_, other->_impl_.interpolated_delta_s_);
  swap(_impl_.reanchoring_pos_stddev_, other->_impl_.reanchoring_pos_stddev_);
  swap(_impl_.reanchoring_length_stddev_, other->_impl_.reanchoring_length_stddev_);
  swap(_impl_.default_bound_, other->_impl_.default_bound_);
  swap(_impl_.vehicle_shortest_dimension_, other->_impl_.vehicle_shortest_dimension_);
  swap(_impl_.collision_decrease_ratio_, other->_impl_.collision_decrease_ratio_);
  swap(_impl_.max_forward_v_, other->_impl_.max_forward_v_);
  swap(_impl_.max_reverse_v_, other->_impl_.max_reverse_v_);
  swap(_impl_.max_forward_acc_, other->_impl_.max_forward_acc_);
  swap(_impl_.max_reverse_acc_, other->_impl_.max_reverse_acc_);
  swap(_impl_.max_acc_jerk_, other->_impl_.max_acc_jerk_);
  swap(_impl_.delta_t_, other->_impl_.delta_t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IterativeAnchoringConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[7]);
}

// ===================================================================

class TrajectoryPartitionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPartitionConfig>()._impl_._has_bits_);
  static void set_has_interpolated_pieces_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_gear_check_horizon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading_searching_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gear_shift_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gear_shift_max_t(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gear_shift_unit_t(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

TrajectoryPartitionConfig::TrajectoryPartitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrajectoryPartitionConfig)
}
TrajectoryPartitionConfig::TrajectoryPartitionConfig(const TrajectoryPartitionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interpolated_pieces_num_){}
    , decltype(_impl_.initial_gear_check_horizon_){}
    , decltype(_impl_.heading_searching_range_){}
    , decltype(_impl_.gear_shift_period_duration_){}
    , decltype(_impl_.gear_shift_max_t_){}
    , decltype(_impl_.gear_shift_unit_t_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.interpolated_pieces_num_, &from._impl_.interpolated_pieces_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_shift_unit_t_) -
    reinterpret_cast<char*>(&_impl_.interpolated_pieces_num_)) + sizeof(_impl_.gear_shift_unit_t_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPartitionConfig)
}

inline void TrajectoryPartitionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.interpolated_pieces_num_){uint64_t{50u}}
    , decltype(_impl_.initial_gear_check_horizon_){uint64_t{3u}}
    , decltype(_impl_.heading_searching_range_){0.3}
    , decltype(_impl_.gear_shift_period_duration_){2}
    , decltype(_impl_.gear_shift_max_t_){3}
    , decltype(_impl_.gear_shift_unit_t_){0.02}
  };
}

TrajectoryPartitionConfig::~TrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPartitionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryPartitionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrajectoryPartitionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPartitionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    _impl_.interpolated_pieces_num_ = uint64_t{50u};
    _impl_.initial_gear_check_horizon_ = uint64_t{3u};
    _impl_.heading_searching_range_ = 0.3;
    _impl_.gear_shift_period_duration_ = 2;
    _impl_.gear_shift_max_t_ = 3;
    _impl_.gear_shift_unit_t_ = 0.02;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPartitionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 interpolated_pieces_num = 1 [default = 50];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_interpolated_pieces_num(&has_bits);
          _impl_.interpolated_pieces_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 initial_gear_check_horizon = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_initial_gear_check_horizon(&has_bits);
          _impl_.initial_gear_check_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_searching_range = 3 [default = 0.3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading_searching_range(&has_bits);
          _impl_.heading_searching_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gear_shift_period_duration = 4 [default = 2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_gear_shift_period_duration(&has_bits);
          _impl_.gear_shift_period_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gear_shift_max_t = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_gear_shift_max_t(&has_bits);
          _impl_.gear_shift_max_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double gear_shift_unit_t = 6 [default = 0.02];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_gear_shift_unit_t(&has_bits);
          _impl_.gear_shift_unit_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryPartitionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPartitionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 interpolated_pieces_num = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_initial_gear_check_horizon(), target);
  }

  // optional double heading_searching_range = 3 [default = 0.3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading_searching_range(), target);
  }

  // optional double gear_shift_period_duration = 4 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_gear_shift_period_duration(), target);
  }

  // optional double gear_shift_max_t = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 6 [default = 0.02];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_gear_shift_unit_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPartitionConfig)
  return target;
}

size_t TrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPartitionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 interpolated_pieces_num = 1 [default = 50];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_initial_gear_check_horizon());
    }

    // optional double heading_searching_range = 3 [default = 0.3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 4 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_max_t = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 6 [default = 0.02];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPartitionConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPartitionConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPartitionConfig::GetClassData() const { return &_class_data_; }

void TrajectoryPartitionConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPartitionConfig *>(to)->MergeFrom(
      static_cast<const TrajectoryPartitionConfig &>(from));
}


void TrajectoryPartitionConfig::MergeFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.interpolated_pieces_num_ = from._impl_.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.initial_gear_check_horizon_ = from._impl_.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.heading_searching_range_ = from._impl_.heading_searching_range_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.gear_shift_period_duration_ = from._impl_.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.gear_shift_max_t_ = from._impl_.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.gear_shift_unit_t_ = from._impl_.gear_shift_unit_t_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPartitionConfig::CopyFrom(const TrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void TrajectoryPartitionConfig::InternalSwap(TrajectoryPartitionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.interpolated_pieces_num_, other->_impl_.interpolated_pieces_num_);
  swap(_impl_.initial_gear_check_horizon_, other->_impl_.initial_gear_check_horizon_);
  swap(_impl_.heading_searching_range_, other->_impl_.heading_searching_range_);
  swap(_impl_.gear_shift_period_duration_, other->_impl_.gear_shift_period_duration_);
  swap(_impl_.gear_shift_max_t_, other->_impl_.gear_shift_max_t_);
  swap(_impl_.gear_shift_unit_t_, other->_impl_.gear_shift_unit_t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPartitionConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerOpenSpaceConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlannerOpenSpaceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ROIConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ROIConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ROIConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::WarmStartConfig*
Arena::CreateMaybeMessage< ::apollo::planning::WarmStartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::WarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DualVariableWarmStartConfig*
Arena::CreateMaybeMessage< ::apollo::planning::DualVariableWarmStartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DualVariableWarmStartConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DistanceApproachConfig*
Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DistanceApproachConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::IpoptConfig*
Arena::CreateMaybeMessage< ::apollo::planning::IpoptConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::IpoptConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::OSQPConfig*
Arena::CreateMaybeMessage< ::apollo::planning::OSQPConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OSQPConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::IterativeAnchoringConfig*
Arena::CreateMaybeMessage< ::apollo::planning::IterativeAnchoringConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::IterativeAnchoringConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrajectoryPartitionConfig*
Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrajectoryPartitionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
