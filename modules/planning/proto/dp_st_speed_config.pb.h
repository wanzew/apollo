// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/st_boundary_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
namespace apollo {
namespace planning {
class DpStSpeedConfig;
struct DpStSpeedConfigDefaultTypeInternal;
extern DpStSpeedConfigDefaultTypeInternal _DpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DpStSpeedConfig* Arena::CreateMaybeMessage<::apollo::planning::DpStSpeedConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class DpStSpeedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpStSpeedConfig) */ {
 public:
  inline DpStSpeedConfig() : DpStSpeedConfig(nullptr) {}
  ~DpStSpeedConfig() override;
  explicit PROTOBUF_CONSTEXPR DpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpStSpeedConfig(const DpStSpeedConfig& from);
  DpStSpeedConfig(DpStSpeedConfig&& from) noexcept
    : DpStSpeedConfig() {
    *this = ::std::move(from);
  }

  inline DpStSpeedConfig& operator=(const DpStSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpStSpeedConfig& operator=(DpStSpeedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DpStSpeedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpStSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedConfig*>(
               &_DpStSpeedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DpStSpeedConfig& a, DpStSpeedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DpStSpeedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpStSpeedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpStSpeedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpStSpeedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DpStSpeedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DpStSpeedConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpStSpeedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DpStSpeedConfig";
  }
  protected:
  explicit DpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStBoundaryConfigFieldNumber = 50,
    kSpeedWeightFieldNumber = 5,
    kReferenceWeightFieldNumber = 9,
    kTotalPathLengthFieldNumber = 1,
    kTotalTimeFieldNumber = 2,
    kMatrixDimensionSFieldNumber = 3,
    kMatrixDimensionTFieldNumber = 4,
    kAccelWeightFieldNumber = 6,
    kJerkWeightFieldNumber = 7,
    kObstacleWeightFieldNumber = 8,
    kGoDownBufferFieldNumber = 10,
    kGoUpBufferFieldNumber = 11,
    kDefaultObstacleCostFieldNumber = 12,
    kDefaultSpeedCostFieldNumber = 13,
    kExceedSpeedPenaltyFieldNumber = 14,
    kLowSpeedPenaltyFieldNumber = 15,
    kKeepClearLowSpeedPenaltyFieldNumber = 16,
    kAccelPenaltyFieldNumber = 20,
    kDecelPenaltyFieldNumber = 21,
    kPositiveJerkCoeffFieldNumber = 30,
    kNegativeJerkCoeffFieldNumber = 31,
    kMaxAccelerationFieldNumber = 40,
    kMaxDecelerationFieldNumber = 41,
  };
  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
  bool has_st_boundary_config() const;
  private:
  bool _internal_has_st_boundary_config() const;
  public:
  void clear_st_boundary_config();
  const ::apollo::planning::StBoundaryConfig& st_boundary_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::StBoundaryConfig* release_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* mutable_st_boundary_config();
  void set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config);
  private:
  const ::apollo::planning::StBoundaryConfig& _internal_st_boundary_config() const;
  ::apollo::planning::StBoundaryConfig* _internal_mutable_st_boundary_config();
  public:
  void unsafe_arena_set_allocated_st_boundary_config(
      ::apollo::planning::StBoundaryConfig* st_boundary_config);
  ::apollo::planning::StBoundaryConfig* unsafe_arena_release_st_boundary_config();

  // optional double speed_weight = 5 [default = 0];
  bool has_speed_weight() const;
  private:
  bool _internal_has_speed_weight() const;
  public:
  void clear_speed_weight();
  double speed_weight() const;
  void set_speed_weight(double value);
  private:
  double _internal_speed_weight() const;
  void _internal_set_speed_weight(double value);
  public:

  // optional double reference_weight = 9 [default = 0];
  bool has_reference_weight() const;
  private:
  bool _internal_has_reference_weight() const;
  public:
  void clear_reference_weight();
  double reference_weight() const;
  void set_reference_weight(double value);
  private:
  double _internal_reference_weight() const;
  void _internal_set_reference_weight(double value);
  public:

  // optional double total_path_length = 1 [default = 0.1];
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  double total_path_length() const;
  void set_total_path_length(double value);
  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);
  public:

  // optional double total_time = 2 [default = 3];
  bool has_total_time() const;
  private:
  bool _internal_has_total_time() const;
  public:
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // optional int32 matrix_dimension_s = 3 [default = 100];
  bool has_matrix_dimension_s() const;
  private:
  bool _internal_has_matrix_dimension_s() const;
  public:
  void clear_matrix_dimension_s();
  int32_t matrix_dimension_s() const;
  void set_matrix_dimension_s(int32_t value);
  private:
  int32_t _internal_matrix_dimension_s() const;
  void _internal_set_matrix_dimension_s(int32_t value);
  public:

  // optional int32 matrix_dimension_t = 4 [default = 10];
  bool has_matrix_dimension_t() const;
  private:
  bool _internal_has_matrix_dimension_t() const;
  public:
  void clear_matrix_dimension_t();
  int32_t matrix_dimension_t() const;
  void set_matrix_dimension_t(int32_t value);
  private:
  int32_t _internal_matrix_dimension_t() const;
  void _internal_set_matrix_dimension_t(int32_t value);
  public:

  // optional double accel_weight = 6 [default = 10];
  bool has_accel_weight() const;
  private:
  bool _internal_has_accel_weight() const;
  public:
  void clear_accel_weight();
  double accel_weight() const;
  void set_accel_weight(double value);
  private:
  double _internal_accel_weight() const;
  void _internal_set_accel_weight(double value);
  public:

  // optional double jerk_weight = 7 [default = 10];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double obstacle_weight = 8 [default = 1];
  bool has_obstacle_weight() const;
  private:
  bool _internal_has_obstacle_weight() const;
  public:
  void clear_obstacle_weight();
  double obstacle_weight() const;
  void set_obstacle_weight(double value);
  private:
  double _internal_obstacle_weight() const;
  void _internal_set_obstacle_weight(double value);
  public:

  // optional double go_down_buffer = 10 [default = 5];
  bool has_go_down_buffer() const;
  private:
  bool _internal_has_go_down_buffer() const;
  public:
  void clear_go_down_buffer();
  double go_down_buffer() const;
  void set_go_down_buffer(double value);
  private:
  double _internal_go_down_buffer() const;
  void _internal_set_go_down_buffer(double value);
  public:

  // optional double go_up_buffer = 11 [default = 5];
  bool has_go_up_buffer() const;
  private:
  bool _internal_has_go_up_buffer() const;
  public:
  void clear_go_up_buffer();
  double go_up_buffer() const;
  void set_go_up_buffer(double value);
  private:
  double _internal_go_up_buffer() const;
  void _internal_set_go_up_buffer(double value);
  public:

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  bool has_default_obstacle_cost() const;
  private:
  bool _internal_has_default_obstacle_cost() const;
  public:
  void clear_default_obstacle_cost();
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);
  private:
  double _internal_default_obstacle_cost() const;
  void _internal_set_default_obstacle_cost(double value);
  public:

  // optional double default_speed_cost = 13 [default = 1];
  bool has_default_speed_cost() const;
  private:
  bool _internal_has_default_speed_cost() const;
  public:
  void clear_default_speed_cost();
  double default_speed_cost() const;
  void set_default_speed_cost(double value);
  private:
  double _internal_default_speed_cost() const;
  void _internal_set_default_speed_cost(double value);
  public:

  // optional double exceed_speed_penalty = 14 [default = 10];
  bool has_exceed_speed_penalty() const;
  private:
  bool _internal_has_exceed_speed_penalty() const;
  public:
  void clear_exceed_speed_penalty();
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);
  private:
  double _internal_exceed_speed_penalty() const;
  void _internal_set_exceed_speed_penalty(double value);
  public:

  // optional double low_speed_penalty = 15 [default = 2.5];
  bool has_low_speed_penalty() const;
  private:
  bool _internal_has_low_speed_penalty() const;
  public:
  void clear_low_speed_penalty();
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);
  private:
  double _internal_low_speed_penalty() const;
  void _internal_set_low_speed_penalty(double value);
  public:

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  bool has_keep_clear_low_speed_penalty() const;
  private:
  bool _internal_has_keep_clear_low_speed_penalty() const;
  public:
  void clear_keep_clear_low_speed_penalty();
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);
  private:
  double _internal_keep_clear_low_speed_penalty() const;
  void _internal_set_keep_clear_low_speed_penalty(double value);
  public:

  // optional double accel_penalty = 20 [default = 2];
  bool has_accel_penalty() const;
  private:
  bool _internal_has_accel_penalty() const;
  public:
  void clear_accel_penalty();
  double accel_penalty() const;
  void set_accel_penalty(double value);
  private:
  double _internal_accel_penalty() const;
  void _internal_set_accel_penalty(double value);
  public:

  // optional double decel_penalty = 21 [default = 2];
  bool has_decel_penalty() const;
  private:
  bool _internal_has_decel_penalty() const;
  public:
  void clear_decel_penalty();
  double decel_penalty() const;
  void set_decel_penalty(double value);
  private:
  double _internal_decel_penalty() const;
  void _internal_set_decel_penalty(double value);
  public:

  // optional double positive_jerk_coeff = 30 [default = 1];
  bool has_positive_jerk_coeff() const;
  private:
  bool _internal_has_positive_jerk_coeff() const;
  public:
  void clear_positive_jerk_coeff();
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);
  private:
  double _internal_positive_jerk_coeff() const;
  void _internal_set_positive_jerk_coeff(double value);
  public:

  // optional double negative_jerk_coeff = 31 [default = 300];
  bool has_negative_jerk_coeff() const;
  private:
  bool _internal_has_negative_jerk_coeff() const;
  public:
  void clear_negative_jerk_coeff();
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);
  private:
  double _internal_negative_jerk_coeff() const;
  void _internal_set_negative_jerk_coeff(double value);
  public:

  // optional double max_acceleration = 40 [default = 4.5];
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double max_deceleration = 41 [default = -4.5];
  bool has_max_deceleration() const;
  private:
  bool _internal_has_max_deceleration() const;
  public:
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DpStSpeedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::StBoundaryConfig* st_boundary_config_;
    double speed_weight_;
    double reference_weight_;
    double total_path_length_;
    double total_time_;
    int32_t matrix_dimension_s_;
    int32_t matrix_dimension_t_;
    double accel_weight_;
    double jerk_weight_;
    double obstacle_weight_;
    double go_down_buffer_;
    double go_up_buffer_;
    double default_obstacle_cost_;
    double default_speed_cost_;
    double exceed_speed_penalty_;
    double low_speed_penalty_;
    double keep_clear_low_speed_penalty_;
    double accel_penalty_;
    double decel_penalty_;
    double positive_jerk_coeff_;
    double negative_jerk_coeff_;
    double max_acceleration_;
    double max_deceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DpStSpeedConfig

// optional double total_path_length = 1 [default = 0.1];
inline bool DpStSpeedConfig::_internal_has_total_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void DpStSpeedConfig::clear_total_path_length() {
  _impl_.total_path_length_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DpStSpeedConfig::_internal_total_path_length() const {
  return _impl_.total_path_length_;
}
inline double DpStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.total_path_length)
  return _internal_total_path_length();
}
inline void DpStSpeedConfig::_internal_set_total_path_length(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.total_path_length_ = value;
}
inline void DpStSpeedConfig::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.total_path_length)
}

// optional double total_time = 2 [default = 3];
inline bool DpStSpeedConfig::_internal_has_total_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_total_time() const {
  return _internal_has_total_time();
}
inline void DpStSpeedConfig::clear_total_time() {
  _impl_.total_time_ = 3;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DpStSpeedConfig::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double DpStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.total_time)
  return _internal_total_time();
}
inline void DpStSpeedConfig::_internal_set_total_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_time_ = value;
}
inline void DpStSpeedConfig::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.total_time)
}

// optional int32 matrix_dimension_s = 3 [default = 100];
inline bool DpStSpeedConfig::_internal_has_matrix_dimension_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_matrix_dimension_s() const {
  return _internal_has_matrix_dimension_s();
}
inline void DpStSpeedConfig::clear_matrix_dimension_s() {
  _impl_.matrix_dimension_s_ = 100;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DpStSpeedConfig::_internal_matrix_dimension_s() const {
  return _impl_.matrix_dimension_s_;
}
inline int32_t DpStSpeedConfig::matrix_dimension_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
  return _internal_matrix_dimension_s();
}
inline void DpStSpeedConfig::_internal_set_matrix_dimension_s(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.matrix_dimension_s_ = value;
}
inline void DpStSpeedConfig::set_matrix_dimension_s(int32_t value) {
  _internal_set_matrix_dimension_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_s)
}

// optional int32 matrix_dimension_t = 4 [default = 10];
inline bool DpStSpeedConfig::_internal_has_matrix_dimension_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_matrix_dimension_t() const {
  return _internal_has_matrix_dimension_t();
}
inline void DpStSpeedConfig::clear_matrix_dimension_t() {
  _impl_.matrix_dimension_t_ = 10;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DpStSpeedConfig::_internal_matrix_dimension_t() const {
  return _impl_.matrix_dimension_t_;
}
inline int32_t DpStSpeedConfig::matrix_dimension_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
  return _internal_matrix_dimension_t();
}
inline void DpStSpeedConfig::_internal_set_matrix_dimension_t(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.matrix_dimension_t_ = value;
}
inline void DpStSpeedConfig::set_matrix_dimension_t(int32_t value) {
  _internal_set_matrix_dimension_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.matrix_dimension_t)
}

// optional double speed_weight = 5 [default = 0];
inline bool DpStSpeedConfig::_internal_has_speed_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_speed_weight() const {
  return _internal_has_speed_weight();
}
inline void DpStSpeedConfig::clear_speed_weight() {
  _impl_.speed_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DpStSpeedConfig::_internal_speed_weight() const {
  return _impl_.speed_weight_;
}
inline double DpStSpeedConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.speed_weight)
  return _internal_speed_weight();
}
inline void DpStSpeedConfig::_internal_set_speed_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.speed_weight_ = value;
}
inline void DpStSpeedConfig::set_speed_weight(double value) {
  _internal_set_speed_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.speed_weight)
}

// optional double accel_weight = 6 [default = 10];
inline bool DpStSpeedConfig::_internal_has_accel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_accel_weight() const {
  return _internal_has_accel_weight();
}
inline void DpStSpeedConfig::clear_accel_weight() {
  _impl_.accel_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double DpStSpeedConfig::_internal_accel_weight() const {
  return _impl_.accel_weight_;
}
inline double DpStSpeedConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_weight)
  return _internal_accel_weight();
}
inline void DpStSpeedConfig::_internal_set_accel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.accel_weight_ = value;
}
inline void DpStSpeedConfig::set_accel_weight(double value) {
  _internal_set_accel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_weight)
}

// optional double jerk_weight = 7 [default = 10];
inline bool DpStSpeedConfig::_internal_has_jerk_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void DpStSpeedConfig::clear_jerk_weight() {
  _impl_.jerk_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double DpStSpeedConfig::_internal_jerk_weight() const {
  return _impl_.jerk_weight_;
}
inline double DpStSpeedConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void DpStSpeedConfig::_internal_set_jerk_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.jerk_weight_ = value;
}
inline void DpStSpeedConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.jerk_weight)
}

// optional double obstacle_weight = 8 [default = 1];
inline bool DpStSpeedConfig::_internal_has_obstacle_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_obstacle_weight() const {
  return _internal_has_obstacle_weight();
}
inline void DpStSpeedConfig::clear_obstacle_weight() {
  _impl_.obstacle_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double DpStSpeedConfig::_internal_obstacle_weight() const {
  return _impl_.obstacle_weight_;
}
inline double DpStSpeedConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.obstacle_weight)
  return _internal_obstacle_weight();
}
inline void DpStSpeedConfig::_internal_set_obstacle_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.obstacle_weight_ = value;
}
inline void DpStSpeedConfig::set_obstacle_weight(double value) {
  _internal_set_obstacle_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.obstacle_weight)
}

// optional double reference_weight = 9 [default = 0];
inline bool DpStSpeedConfig::_internal_has_reference_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_reference_weight() const {
  return _internal_has_reference_weight();
}
inline void DpStSpeedConfig::clear_reference_weight() {
  _impl_.reference_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double DpStSpeedConfig::_internal_reference_weight() const {
  return _impl_.reference_weight_;
}
inline double DpStSpeedConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.reference_weight)
  return _internal_reference_weight();
}
inline void DpStSpeedConfig::_internal_set_reference_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reference_weight_ = value;
}
inline void DpStSpeedConfig::set_reference_weight(double value) {
  _internal_set_reference_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.reference_weight)
}

// optional double go_down_buffer = 10 [default = 5];
inline bool DpStSpeedConfig::_internal_has_go_down_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_go_down_buffer() const {
  return _internal_has_go_down_buffer();
}
inline void DpStSpeedConfig::clear_go_down_buffer() {
  _impl_.go_down_buffer_ = 5;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double DpStSpeedConfig::_internal_go_down_buffer() const {
  return _impl_.go_down_buffer_;
}
inline double DpStSpeedConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_down_buffer)
  return _internal_go_down_buffer();
}
inline void DpStSpeedConfig::_internal_set_go_down_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.go_down_buffer_ = value;
}
inline void DpStSpeedConfig::set_go_down_buffer(double value) {
  _internal_set_go_down_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_down_buffer)
}

// optional double go_up_buffer = 11 [default = 5];
inline bool DpStSpeedConfig::_internal_has_go_up_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_go_up_buffer() const {
  return _internal_has_go_up_buffer();
}
inline void DpStSpeedConfig::clear_go_up_buffer() {
  _impl_.go_up_buffer_ = 5;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double DpStSpeedConfig::_internal_go_up_buffer() const {
  return _impl_.go_up_buffer_;
}
inline double DpStSpeedConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.go_up_buffer)
  return _internal_go_up_buffer();
}
inline void DpStSpeedConfig::_internal_set_go_up_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.go_up_buffer_ = value;
}
inline void DpStSpeedConfig::set_go_up_buffer(double value) {
  _internal_set_go_up_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 12 [default = 10000000000];
inline bool DpStSpeedConfig::_internal_has_default_obstacle_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_default_obstacle_cost() const {
  return _internal_has_default_obstacle_cost();
}
inline void DpStSpeedConfig::clear_default_obstacle_cost() {
  _impl_.default_obstacle_cost_ = 10000000000;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double DpStSpeedConfig::_internal_default_obstacle_cost() const {
  return _impl_.default_obstacle_cost_;
}
inline double DpStSpeedConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
  return _internal_default_obstacle_cost();
}
inline void DpStSpeedConfig::_internal_set_default_obstacle_cost(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.default_obstacle_cost_ = value;
}
inline void DpStSpeedConfig::set_default_obstacle_cost(double value) {
  _internal_set_default_obstacle_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 13 [default = 1];
inline bool DpStSpeedConfig::_internal_has_default_speed_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_default_speed_cost() const {
  return _internal_has_default_speed_cost();
}
inline void DpStSpeedConfig::clear_default_speed_cost() {
  _impl_.default_speed_cost_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double DpStSpeedConfig::_internal_default_speed_cost() const {
  return _impl_.default_speed_cost_;
}
inline double DpStSpeedConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.default_speed_cost)
  return _internal_default_speed_cost();
}
inline void DpStSpeedConfig::_internal_set_default_speed_cost(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.default_speed_cost_ = value;
}
inline void DpStSpeedConfig::set_default_speed_cost(double value) {
  _internal_set_default_speed_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 14 [default = 10];
inline bool DpStSpeedConfig::_internal_has_exceed_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_exceed_speed_penalty() const {
  return _internal_has_exceed_speed_penalty();
}
inline void DpStSpeedConfig::clear_exceed_speed_penalty() {
  _impl_.exceed_speed_penalty_ = 10;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double DpStSpeedConfig::_internal_exceed_speed_penalty() const {
  return _impl_.exceed_speed_penalty_;
}
inline double DpStSpeedConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
  return _internal_exceed_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_exceed_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.exceed_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_exceed_speed_penalty(double value) {
  _internal_set_exceed_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 15 [default = 2.5];
inline bool DpStSpeedConfig::_internal_has_low_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_low_speed_penalty() const {
  return _internal_has_low_speed_penalty();
}
inline void DpStSpeedConfig::clear_low_speed_penalty() {
  _impl_.low_speed_penalty_ = 2.5;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double DpStSpeedConfig::_internal_low_speed_penalty() const {
  return _impl_.low_speed_penalty_;
}
inline double DpStSpeedConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.low_speed_penalty)
  return _internal_low_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_low_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.low_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_low_speed_penalty(double value) {
  _internal_set_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.low_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 16 [default = 10];
inline bool DpStSpeedConfig::_internal_has_keep_clear_low_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_keep_clear_low_speed_penalty() const {
  return _internal_has_keep_clear_low_speed_penalty();
}
inline void DpStSpeedConfig::clear_keep_clear_low_speed_penalty() {
  _impl_.keep_clear_low_speed_penalty_ = 10;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double DpStSpeedConfig::_internal_keep_clear_low_speed_penalty() const {
  return _impl_.keep_clear_low_speed_penalty_;
}
inline double DpStSpeedConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
  return _internal_keep_clear_low_speed_penalty();
}
inline void DpStSpeedConfig::_internal_set_keep_clear_low_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.keep_clear_low_speed_penalty_ = value;
}
inline void DpStSpeedConfig::set_keep_clear_low_speed_penalty(double value) {
  _internal_set_keep_clear_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 20 [default = 2];
inline bool DpStSpeedConfig::_internal_has_accel_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_accel_penalty() const {
  return _internal_has_accel_penalty();
}
inline void DpStSpeedConfig::clear_accel_penalty() {
  _impl_.accel_penalty_ = 2;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double DpStSpeedConfig::_internal_accel_penalty() const {
  return _impl_.accel_penalty_;
}
inline double DpStSpeedConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.accel_penalty)
  return _internal_accel_penalty();
}
inline void DpStSpeedConfig::_internal_set_accel_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.accel_penalty_ = value;
}
inline void DpStSpeedConfig::set_accel_penalty(double value) {
  _internal_set_accel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.accel_penalty)
}

// optional double decel_penalty = 21 [default = 2];
inline bool DpStSpeedConfig::_internal_has_decel_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_decel_penalty() const {
  return _internal_has_decel_penalty();
}
inline void DpStSpeedConfig::clear_decel_penalty() {
  _impl_.decel_penalty_ = 2;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double DpStSpeedConfig::_internal_decel_penalty() const {
  return _impl_.decel_penalty_;
}
inline double DpStSpeedConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.decel_penalty)
  return _internal_decel_penalty();
}
inline void DpStSpeedConfig::_internal_set_decel_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.decel_penalty_ = value;
}
inline void DpStSpeedConfig::set_decel_penalty(double value) {
  _internal_set_decel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 30 [default = 1];
inline bool DpStSpeedConfig::_internal_has_positive_jerk_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_positive_jerk_coeff() const {
  return _internal_has_positive_jerk_coeff();
}
inline void DpStSpeedConfig::clear_positive_jerk_coeff() {
  _impl_.positive_jerk_coeff_ = 1;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double DpStSpeedConfig::_internal_positive_jerk_coeff() const {
  return _impl_.positive_jerk_coeff_;
}
inline double DpStSpeedConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
  return _internal_positive_jerk_coeff();
}
inline void DpStSpeedConfig::_internal_set_positive_jerk_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.positive_jerk_coeff_ = value;
}
inline void DpStSpeedConfig::set_positive_jerk_coeff(double value) {
  _internal_set_positive_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 31 [default = 300];
inline bool DpStSpeedConfig::_internal_has_negative_jerk_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_negative_jerk_coeff() const {
  return _internal_has_negative_jerk_coeff();
}
inline void DpStSpeedConfig::clear_negative_jerk_coeff() {
  _impl_.negative_jerk_coeff_ = 300;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double DpStSpeedConfig::_internal_negative_jerk_coeff() const {
  return _impl_.negative_jerk_coeff_;
}
inline double DpStSpeedConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
  return _internal_negative_jerk_coeff();
}
inline void DpStSpeedConfig::_internal_set_negative_jerk_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.negative_jerk_coeff_ = value;
}
inline void DpStSpeedConfig::set_negative_jerk_coeff(double value) {
  _internal_set_negative_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 40 [default = 4.5];
inline bool DpStSpeedConfig::_internal_has_max_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void DpStSpeedConfig::clear_max_acceleration() {
  _impl_.max_acceleration_ = 4.5;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double DpStSpeedConfig::_internal_max_acceleration() const {
  return _impl_.max_acceleration_;
}
inline double DpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_acceleration)
  return _internal_max_acceleration();
}
inline void DpStSpeedConfig::_internal_set_max_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.max_acceleration_ = value;
}
inline void DpStSpeedConfig::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_acceleration)
}

// optional double max_deceleration = 41 [default = -4.5];
inline bool DpStSpeedConfig::_internal_has_max_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DpStSpeedConfig::has_max_deceleration() const {
  return _internal_has_max_deceleration();
}
inline void DpStSpeedConfig::clear_max_deceleration() {
  _impl_.max_deceleration_ = -4.5;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double DpStSpeedConfig::_internal_max_deceleration() const {
  return _impl_.max_deceleration_;
}
inline double DpStSpeedConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.max_deceleration)
  return _internal_max_deceleration();
}
inline void DpStSpeedConfig::_internal_set_max_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.max_deceleration_ = value;
}
inline void DpStSpeedConfig::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedConfig.max_deceleration)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
inline bool DpStSpeedConfig::_internal_has_st_boundary_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.st_boundary_config_ != nullptr);
  return value;
}
inline bool DpStSpeedConfig::has_st_boundary_config() const {
  return _internal_has_st_boundary_config();
}
inline const ::apollo::planning::StBoundaryConfig& DpStSpeedConfig::_internal_st_boundary_config() const {
  const ::apollo::planning::StBoundaryConfig* p = _impl_.st_boundary_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StBoundaryConfig&>(
      ::apollo::planning::_StBoundaryConfig_default_instance_);
}
inline const ::apollo::planning::StBoundaryConfig& DpStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedConfig.st_boundary_config)
  return _internal_st_boundary_config();
}
inline void DpStSpeedConfig::unsafe_arena_set_allocated_st_boundary_config(
    ::apollo::planning::StBoundaryConfig* st_boundary_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.st_boundary_config_);
  }
  _impl_.st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DpStSpeedConfig.st_boundary_config)
}
inline ::apollo::planning::StBoundaryConfig* DpStSpeedConfig::release_st_boundary_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StBoundaryConfig* temp = _impl_.st_boundary_config_;
  _impl_.st_boundary_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StBoundaryConfig* DpStSpeedConfig::unsafe_arena_release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DpStSpeedConfig.st_boundary_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StBoundaryConfig* temp = _impl_.st_boundary_config_;
  _impl_.st_boundary_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::StBoundaryConfig* DpStSpeedConfig::_internal_mutable_st_boundary_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.st_boundary_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StBoundaryConfig>(GetArenaForAllocation());
    _impl_.st_boundary_config_ = p;
  }
  return _impl_.st_boundary_config_;
}
inline ::apollo::planning::StBoundaryConfig* DpStSpeedConfig::mutable_st_boundary_config() {
  ::apollo::planning::StBoundaryConfig* _msg = _internal_mutable_st_boundary_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DpStSpeedConfig.st_boundary_config)
  return _msg;
}
inline void DpStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.st_boundary_config_);
  }
  if (st_boundary_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(st_boundary_config));
    if (message_arena != submessage_arena) {
      st_boundary_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, st_boundary_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.st_boundary_config_ = st_boundary_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DpStSpeedConfig.st_boundary_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto
