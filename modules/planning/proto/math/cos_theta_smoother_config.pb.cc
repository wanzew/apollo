// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/math/cos_theta_smoother_config.proto

#include "modules/planning/proto/math/cos_theta_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR CosThetaSmootherConfig::CosThetaSmootherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.print_level_)*/0
  , /*decltype(_impl_.ipopt_use_automatic_differentiation_)*/false
  , /*decltype(_impl_.weight_cos_included_angle_)*/10000
  , /*decltype(_impl_.weight_anchor_points_)*/1
  , /*decltype(_impl_.weight_length_)*/1
  , /*decltype(_impl_.max_num_of_iterations_)*/500
  , /*decltype(_impl_.acceptable_num_of_iterations_)*/15
  , /*decltype(_impl_.tol_)*/1e-08
  , /*decltype(_impl_.acceptable_tol_)*/0.1} {}
struct CosThetaSmootherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosThetaSmootherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosThetaSmootherConfigDefaultTypeInternal() {}
  union {
    CosThetaSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosThetaSmootherConfigDefaultTypeInternal _CosThetaSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.weight_cos_included_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.weight_anchor_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.weight_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CosThetaSmootherConfig, _impl_.ipopt_use_automatic_differentiation_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::planning::CosThetaSmootherConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_CosThetaSmootherConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n;modules/planning/proto/math/cos_theta_"
  "smoother_config.proto\022\017apollo.planning\"\310"
  "\002\n\026CosThetaSmootherConfig\022(\n\031weight_cos_"
  "included_angle\030\001 \001(\001:\00510000\022\037\n\024weight_an"
  "chor_points\030\002 \001(\001:\0011\022\030\n\rweight_length\030\003 "
  "\001(\001:\0011\022\026\n\013print_level\030\004 \001(\005:\0010\022\"\n\025max_nu"
  "m_of_iterations\030\005 \001(\005:\003500\022(\n\034acceptable"
  "_num_of_iterations\030\006 \001(\005:\00215\022\022\n\003tol\030\007 \001("
  "\001:\0051e-08\022\033\n\016acceptable_tol\030\010 \001(\001:\0030.1\0222\n"
  "#ipopt_use_automatic_differentiation\030\t \001"
  "(\010:\005false"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = {
    false, false, 409, descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
    "modules/planning/proto/math/cos_theta_smoother_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class CosThetaSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CosThetaSmootherConfig>()._impl_._has_bits_);
  static void set_has_weight_cos_included_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_weight_anchor_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_weight_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acceptable_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ipopt_use_automatic_differentiation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CosThetaSmootherConfig::CosThetaSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CosThetaSmootherConfig)
}
CosThetaSmootherConfig::CosThetaSmootherConfig(const CosThetaSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.print_level_){}
    , decltype(_impl_.ipopt_use_automatic_differentiation_){}
    , decltype(_impl_.weight_cos_included_angle_){}
    , decltype(_impl_.weight_anchor_points_){}
    , decltype(_impl_.weight_length_){}
    , decltype(_impl_.max_num_of_iterations_){}
    , decltype(_impl_.acceptable_num_of_iterations_){}
    , decltype(_impl_.tol_){}
    , decltype(_impl_.acceptable_tol_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.print_level_, &from._impl_.print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acceptable_tol_) -
    reinterpret_cast<char*>(&_impl_.print_level_)) + sizeof(_impl_.acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CosThetaSmootherConfig)
}

inline void CosThetaSmootherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.print_level_){0}
    , decltype(_impl_.ipopt_use_automatic_differentiation_){false}
    , decltype(_impl_.weight_cos_included_angle_){10000}
    , decltype(_impl_.weight_anchor_points_){1}
    , decltype(_impl_.weight_length_){1}
    , decltype(_impl_.max_num_of_iterations_){500}
    , decltype(_impl_.acceptable_num_of_iterations_){15}
    , decltype(_impl_.tol_){1e-08}
    , decltype(_impl_.acceptable_tol_){0.1}
  };
}

CosThetaSmootherConfig::~CosThetaSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CosThetaSmootherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosThetaSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CosThetaSmootherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosThetaSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CosThetaSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ipopt_use_automatic_differentiation_) -
        reinterpret_cast<char*>(&_impl_.print_level_)) + sizeof(_impl_.ipopt_use_automatic_differentiation_));
    _impl_.weight_cos_included_angle_ = 10000;
    _impl_.weight_anchor_points_ = 1;
    _impl_.weight_length_ = 1;
    _impl_.max_num_of_iterations_ = 500;
    _impl_.acceptable_num_of_iterations_ = 15;
    _impl_.tol_ = 1e-08;
  }
  _impl_.acceptable_tol_ = 0.1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosThetaSmootherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_cos_included_angle = 1 [default = 10000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_weight_cos_included_angle(&has_bits);
          _impl_.weight_cos_included_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_anchor_points = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_weight_anchor_points(&has_bits);
          _impl_.weight_anchor_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_length = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_weight_length(&has_bits);
          _impl_.weight_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 print_level = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_print_level(&has_bits);
          _impl_.print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_num_of_iterations = 5 [default = 500];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_num_of_iterations(&has_bits);
          _impl_.max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 acceptable_num_of_iterations = 6 [default = 15];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_acceptable_num_of_iterations(&has_bits);
          _impl_.acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double tol = 7 [default = 1e-08];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_tol(&has_bits);
          _impl_.tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceptable_tol = 8 [default = 0.1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_acceptable_tol(&has_bits);
          _impl_.acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ipopt_use_automatic_differentiation(&has_bits);
          _impl_.ipopt_use_automatic_differentiation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CosThetaSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CosThetaSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double weight_cos_included_angle = 1 [default = 10000];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_cos_included_angle(), target);
  }

  // optional double weight_anchor_points = 2 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_anchor_points(), target);
  }

  // optional double weight_length = 3 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_length(), target);
  }

  // optional int32 print_level = 4 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_print_level(), target);
  }

  // optional int32 max_num_of_iterations = 5 [default = 500];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 6 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_acceptable_num_of_iterations(), target);
  }

  // optional double tol = 7 [default = 1e-08];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_tol(), target);
  }

  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceptable_tol(), target);
  }

  // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ipopt_use_automatic_differentiation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CosThetaSmootherConfig)
  return target;
}

size_t CosThetaSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CosThetaSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 print_level = 4 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_print_level());
    }

    // optional bool ipopt_use_automatic_differentiation = 9 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double weight_cos_included_angle = 1 [default = 10000];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double weight_anchor_points = 2 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double weight_length = 3 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 max_num_of_iterations = 5 [default = 500];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 6 [default = 15];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_acceptable_num_of_iterations());
    }

    // optional double tol = 7 [default = 1e-08];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double acceptable_tol = 8 [default = 0.1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosThetaSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CosThetaSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosThetaSmootherConfig::GetClassData() const { return &_class_data_; }

void CosThetaSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CosThetaSmootherConfig *>(to)->MergeFrom(
      static_cast<const CosThetaSmootherConfig &>(from));
}


void CosThetaSmootherConfig::MergeFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.print_level_ = from._impl_.print_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ipopt_use_automatic_differentiation_ = from._impl_.ipopt_use_automatic_differentiation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.weight_cos_included_angle_ = from._impl_.weight_cos_included_angle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.weight_anchor_points_ = from._impl_.weight_anchor_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.weight_length_ = from._impl_.weight_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_num_of_iterations_ = from._impl_.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.acceptable_num_of_iterations_ = from._impl_.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.tol_ = from._impl_.tol_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_acceptable_tol(from._internal_acceptable_tol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosThetaSmootherConfig::CopyFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosThetaSmootherConfig::IsInitialized() const {
  return true;
}

void CosThetaSmootherConfig::InternalSwap(CosThetaSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosThetaSmootherConfig, _impl_.ipopt_use_automatic_differentiation_)
      + sizeof(CosThetaSmootherConfig::_impl_.ipopt_use_automatic_differentiation_)
      - PROTOBUF_FIELD_OFFSET(CosThetaSmootherConfig, _impl_.print_level_)>(
          reinterpret_cast<char*>(&_impl_.print_level_),
          reinterpret_cast<char*>(&other->_impl_.print_level_));
  swap(_impl_.weight_cos_included_angle_, other->_impl_.weight_cos_included_angle_);
  swap(_impl_.weight_anchor_points_, other->_impl_.weight_anchor_points_);
  swap(_impl_.weight_length_, other->_impl_.weight_length_);
  swap(_impl_.max_num_of_iterations_, other->_impl_.max_num_of_iterations_);
  swap(_impl_.acceptable_num_of_iterations_, other->_impl_.acceptable_num_of_iterations_);
  swap(_impl_.tol_, other->_impl_.tol_);
  swap(_impl_.acceptable_tol_, other->_impl_.acceptable_tol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosThetaSmootherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::CosThetaSmootherConfig*
Arena::CreateMaybeMessage< ::apollo::planning::CosThetaSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CosThetaSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
