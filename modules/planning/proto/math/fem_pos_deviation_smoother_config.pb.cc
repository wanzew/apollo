// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/math/fem_pos_deviation_smoother_config.proto

#include "modules/planning/proto/math/fem_pos_deviation_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.apply_curvature_constraint_)*/false
  , /*decltype(_impl_.use_sqp_)*/false
  , /*decltype(_impl_.verbose_)*/false
  , /*decltype(_impl_.print_level_)*/0
  , /*decltype(_impl_.time_limit_)*/0
  , /*decltype(_impl_.weight_fem_pos_deviation_)*/10000000000
  , /*decltype(_impl_.weight_ref_deviation_)*/1
  , /*decltype(_impl_.weight_path_length_)*/1
  , /*decltype(_impl_.weight_curvature_constraint_slack_var_)*/100
  , /*decltype(_impl_.curvature_constraint_)*/0.2
  , /*decltype(_impl_.sqp_ftol_)*/0.0001
  , /*decltype(_impl_.sqp_ctol_)*/0.001
  , /*decltype(_impl_.sqp_pen_max_iter_)*/10
  , /*decltype(_impl_.sqp_sub_max_iter_)*/100
  , /*decltype(_impl_.max_iter_)*/500
  , /*decltype(_impl_.scaled_termination_)*/true
  , /*decltype(_impl_.warm_start_)*/true
  , /*decltype(_impl_.max_num_of_iterations_)*/500
  , /*decltype(_impl_.acceptable_num_of_iterations_)*/15
  , /*decltype(_impl_.tol_)*/1e-08
  , /*decltype(_impl_.acceptable_tol_)*/0.1} {}
struct FemPosDeviationSmootherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FemPosDeviationSmootherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FemPosDeviationSmootherConfigDefaultTypeInternal() {}
  union {
    FemPosDeviationSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FemPosDeviationSmootherConfigDefaultTypeInternal _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.weight_fem_pos_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.weight_ref_deviation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.weight_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.apply_curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.weight_curvature_constraint_slack_var_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.use_sqp_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.sqp_ftol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.sqp_ctol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.sqp_pen_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.sqp_sub_max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.max_iter_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.time_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.verbose_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.scaled_termination_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.warm_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.print_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.tol_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::FemPosDeviationSmootherConfig, _impl_.acceptable_tol_),
  5,
  6,
  7,
  0,
  8,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  4,
  2,
  15,
  16,
  3,
  17,
  18,
  19,
  20,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, -1, sizeof(::apollo::planning::FemPosDeviationSmootherConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nCmodules/planning/proto/math/fem_pos_de"
  "viation_smoother_config.proto\022\017apollo.pl"
  "anning\"\266\005\n\035FemPosDeviationSmootherConfig"
  "\022-\n\030weight_fem_pos_deviation\030\002 \001(\001:\0131000"
  "0000000\022\037\n\024weight_ref_deviation\030\003 \001(\001:\0011"
  "\022\035\n\022weight_path_length\030\004 \001(\001:\0011\022)\n\032apply"
  "_curvature_constraint\030\005 \001(\010:\005false\0222\n%we"
  "ight_curvature_constraint_slack_var\030\006 \001("
  "\001:\003100\022!\n\024curvature_constraint\030\007 \001(\001:\0030."
  "2\022\026\n\007use_sqp\030\010 \001(\010:\005false\022\030\n\010sqp_ftol\030\t "
  "\001(\001:\0060.0001\022\027\n\010sqp_ctol\030\n \001(\001:\0050.001\022\034\n\020"
  "sqp_pen_max_iter\030\013 \001(\005:\00210\022\035\n\020sqp_sub_ma"
  "x_iter\030\014 \001(\005:\003100\022\025\n\010max_iter\030d \001(\005:\003500"
  "\022\025\n\ntime_limit\030e \001(\001:\0010\022\026\n\007verbose\030f \001(\010"
  ":\005false\022 \n\022scaled_termination\030g \001(\010:\004tru"
  "e\022\030\n\nwarm_start\030h \001(\010:\004true\022\027\n\013print_lev"
  "el\030\310\001 \001(\005:\0010\022#\n\025max_num_of_iterations\030\311\001"
  " \001(\005:\003500\022)\n\034acceptable_num_of_iteration"
  "s\030\312\001 \001(\005:\00215\022\023\n\003tol\030\313\001 \001(\001:\0051e-08\022\034\n\016acc"
  "eptable_tol\030\314\001 \001(\001:\0030.1"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = {
    false, false, 783, descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
    "modules/planning/proto/math/fem_pos_deviation_smoother_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class FemPosDeviationSmootherConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FemPosDeviationSmootherConfig>()._impl_._has_bits_);
  static void set_has_weight_fem_pos_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_weight_ref_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_weight_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_apply_curvature_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight_curvature_constraint_slack_var(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_curvature_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_sqp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sqp_ftol(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sqp_ctol(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sqp_pen_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sqp_sub_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_max_iter(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_time_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scaled_termination(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_warm_start(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_print_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_acceptable_num_of_iterations(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_acceptable_tol(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.FemPosDeviationSmootherConfig)
}
FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.apply_curvature_constraint_){}
    , decltype(_impl_.use_sqp_){}
    , decltype(_impl_.verbose_){}
    , decltype(_impl_.print_level_){}
    , decltype(_impl_.time_limit_){}
    , decltype(_impl_.weight_fem_pos_deviation_){}
    , decltype(_impl_.weight_ref_deviation_){}
    , decltype(_impl_.weight_path_length_){}
    , decltype(_impl_.weight_curvature_constraint_slack_var_){}
    , decltype(_impl_.curvature_constraint_){}
    , decltype(_impl_.sqp_ftol_){}
    , decltype(_impl_.sqp_ctol_){}
    , decltype(_impl_.sqp_pen_max_iter_){}
    , decltype(_impl_.sqp_sub_max_iter_){}
    , decltype(_impl_.max_iter_){}
    , decltype(_impl_.scaled_termination_){}
    , decltype(_impl_.warm_start_){}
    , decltype(_impl_.max_num_of_iterations_){}
    , decltype(_impl_.acceptable_num_of_iterations_){}
    , decltype(_impl_.tol_){}
    , decltype(_impl_.acceptable_tol_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.apply_curvature_constraint_, &from._impl_.apply_curvature_constraint_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acceptable_tol_) -
    reinterpret_cast<char*>(&_impl_.apply_curvature_constraint_)) + sizeof(_impl_.acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.FemPosDeviationSmootherConfig)
}

inline void FemPosDeviationSmootherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.apply_curvature_constraint_){false}
    , decltype(_impl_.use_sqp_){false}
    , decltype(_impl_.verbose_){false}
    , decltype(_impl_.print_level_){0}
    , decltype(_impl_.time_limit_){0}
    , decltype(_impl_.weight_fem_pos_deviation_){10000000000}
    , decltype(_impl_.weight_ref_deviation_){1}
    , decltype(_impl_.weight_path_length_){1}
    , decltype(_impl_.weight_curvature_constraint_slack_var_){100}
    , decltype(_impl_.curvature_constraint_){0.2}
    , decltype(_impl_.sqp_ftol_){0.0001}
    , decltype(_impl_.sqp_ctol_){0.001}
    , decltype(_impl_.sqp_pen_max_iter_){10}
    , decltype(_impl_.sqp_sub_max_iter_){100}
    , decltype(_impl_.max_iter_){500}
    , decltype(_impl_.scaled_termination_){true}
    , decltype(_impl_.warm_start_){true}
    , decltype(_impl_.max_num_of_iterations_){500}
    , decltype(_impl_.acceptable_num_of_iterations_){15}
    , decltype(_impl_.tol_){1e-08}
    , decltype(_impl_.acceptable_tol_){0.1}
  };
}

FemPosDeviationSmootherConfig::~FemPosDeviationSmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.FemPosDeviationSmootherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FemPosDeviationSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FemPosDeviationSmootherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FemPosDeviationSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.FemPosDeviationSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.apply_curvature_constraint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_limit_) -
        reinterpret_cast<char*>(&_impl_.apply_curvature_constraint_)) + sizeof(_impl_.time_limit_));
    _impl_.weight_fem_pos_deviation_ = 10000000000;
    _impl_.weight_ref_deviation_ = 1;
    _impl_.weight_path_length_ = 1;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.weight_curvature_constraint_slack_var_ = 100;
    _impl_.curvature_constraint_ = 0.2;
    _impl_.sqp_ftol_ = 0.0001;
    _impl_.sqp_ctol_ = 0.001;
    _impl_.sqp_pen_max_iter_ = 10;
    _impl_.sqp_sub_max_iter_ = 100;
    _impl_.max_iter_ = 500;
    _impl_.scaled_termination_ = true;
  }
  if (cached_has_bits & 0x001f0000u) {
    _impl_.warm_start_ = true;
    _impl_.max_num_of_iterations_ = 500;
    _impl_.acceptable_num_of_iterations_ = 15;
    _impl_.tol_ = 1e-08;
    _impl_.acceptable_tol_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FemPosDeviationSmootherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_weight_fem_pos_deviation(&has_bits);
          _impl_.weight_fem_pos_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_ref_deviation = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_weight_ref_deviation(&has_bits);
          _impl_.weight_ref_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_path_length = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_weight_path_length(&has_bits);
          _impl_.weight_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool apply_curvature_constraint = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_apply_curvature_constraint(&has_bits);
          _impl_.apply_curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_weight_curvature_constraint_slack_var(&has_bits);
          _impl_.weight_curvature_constraint_slack_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature_constraint = 7 [default = 0.2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_curvature_constraint(&has_bits);
          _impl_.curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_sqp = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_use_sqp(&has_bits);
          _impl_.use_sqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double sqp_ftol = 9 [default = 0.0001];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_sqp_ftol(&has_bits);
          _impl_.sqp_ftol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sqp_ctol = 10 [default = 0.001];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_sqp_ctol(&has_bits);
          _impl_.sqp_ctol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sqp_pen_max_iter = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_sqp_pen_max_iter(&has_bits);
          _impl_.sqp_pen_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sqp_sub_max_iter = 12 [default = 100];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_sqp_sub_max_iter(&has_bits);
          _impl_.sqp_sub_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_iter = 100 [default = 500];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_max_iter(&has_bits);
          _impl_.max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double time_limit = 101 [default = 0];
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_time_limit(&has_bits);
          _impl_.time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool verbose = 102 [default = false];
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_verbose(&has_bits);
          _impl_.verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool scaled_termination = 103 [default = true];
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_scaled_termination(&has_bits);
          _impl_.scaled_termination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool warm_start = 104 [default = true];
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_warm_start(&has_bits);
          _impl_.warm_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 print_level = 200 [default = 0];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_print_level(&has_bits);
          _impl_.print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_num_of_iterations = 201 [default = 500];
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_max_num_of_iterations(&has_bits);
          _impl_.max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 acceptable_num_of_iterations = 202 [default = 15];
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_acceptable_num_of_iterations(&has_bits);
          _impl_.acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double tol = 203 [default = 1e-08];
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_tol(&has_bits);
          _impl_.tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceptable_tol = 204 [default = 0.1];
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_acceptable_tol(&has_bits);
          _impl_.acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FemPosDeviationSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.FemPosDeviationSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_fem_pos_deviation(), target);
  }

  // optional double weight_ref_deviation = 3 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_ref_deviation(), target);
  }

  // optional double weight_path_length = 4 [default = 1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_path_length(), target);
  }

  // optional bool apply_curvature_constraint = 5 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_apply_curvature_constraint(), target);
  }

  // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_curvature_constraint_slack_var(), target);
  }

  // optional double curvature_constraint = 7 [default = 0.2];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature_constraint(), target);
  }

  // optional bool use_sqp = 8 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_use_sqp(), target);
  }

  // optional double sqp_ftol = 9 [default = 0.0001];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_sqp_ftol(), target);
  }

  // optional double sqp_ctol = 10 [default = 0.001];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_sqp_ctol(), target);
  }

  // optional int32 sqp_pen_max_iter = 11 [default = 10];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_sqp_pen_max_iter(), target);
  }

  // optional int32 sqp_sub_max_iter = 12 [default = 100];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sqp_sub_max_iter(), target);
  }

  // optional int32 max_iter = 100 [default = 500];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(100, this->_internal_max_iter(), target);
  }

  // optional double time_limit = 101 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(101, this->_internal_time_limit(), target);
  }

  // optional bool verbose = 102 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_verbose(), target);
  }

  // optional bool scaled_termination = 103 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(103, this->_internal_scaled_termination(), target);
  }

  // optional bool warm_start = 104 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(104, this->_internal_warm_start(), target);
  }

  // optional int32 print_level = 200 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(200, this->_internal_print_level(), target);
  }

  // optional int32 max_num_of_iterations = 201 [default = 500];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(201, this->_internal_max_num_of_iterations(), target);
  }

  // optional int32 acceptable_num_of_iterations = 202 [default = 15];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(202, this->_internal_acceptable_num_of_iterations(), target);
  }

  // optional double tol = 203 [default = 1e-08];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(203, this->_internal_tol(), target);
  }

  // optional double acceptable_tol = 204 [default = 0.1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(204, this->_internal_acceptable_tol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.FemPosDeviationSmootherConfig)
  return target;
}

size_t FemPosDeviationSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.FemPosDeviationSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool apply_curvature_constraint = 5 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool use_sqp = 8 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool verbose = 102 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 print_level = 200 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_print_level());
    }

    // optional double time_limit = 101 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double weight_fem_pos_deviation = 2 [default = 10000000000];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double weight_ref_deviation = 3 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double weight_path_length = 4 [default = 1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double weight_curvature_constraint_slack_var = 6 [default = 100];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double curvature_constraint = 7 [default = 0.2];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double sqp_ftol = 9 [default = 0.0001];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double sqp_ctol = 10 [default = 0.001];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 sqp_pen_max_iter = 11 [default = 10];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sqp_pen_max_iter());
    }

    // optional int32 sqp_sub_max_iter = 12 [default = 100];
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sqp_sub_max_iter());
    }

    // optional int32 max_iter = 100 [default = 500];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_iter());
    }

    // optional bool scaled_termination = 103 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional bool warm_start = 104 [default = true];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional int32 max_num_of_iterations = 201 [default = 500];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_max_num_of_iterations());
    }

    // optional int32 acceptable_num_of_iterations = 202 [default = 15];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_acceptable_num_of_iterations());
    }

    // optional double tol = 203 [default = 1e-08];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double acceptable_tol = 204 [default = 0.1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FemPosDeviationSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FemPosDeviationSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FemPosDeviationSmootherConfig::GetClassData() const { return &_class_data_; }

void FemPosDeviationSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FemPosDeviationSmootherConfig *>(to)->MergeFrom(
      static_cast<const FemPosDeviationSmootherConfig &>(from));
}


void FemPosDeviationSmootherConfig::MergeFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.apply_curvature_constraint_ = from._impl_.apply_curvature_constraint_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.use_sqp_ = from._impl_.use_sqp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.verbose_ = from._impl_.verbose_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.print_level_ = from._impl_.print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.time_limit_ = from._impl_.time_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.weight_fem_pos_deviation_ = from._impl_.weight_fem_pos_deviation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.weight_ref_deviation_ = from._impl_.weight_ref_deviation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.weight_path_length_ = from._impl_.weight_path_length_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.weight_curvature_constraint_slack_var_ = from._impl_.weight_curvature_constraint_slack_var_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.curvature_constraint_ = from._impl_.curvature_constraint_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.sqp_ftol_ = from._impl_.sqp_ftol_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.sqp_ctol_ = from._impl_.sqp_ctol_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.sqp_pen_max_iter_ = from._impl_.sqp_pen_max_iter_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.sqp_sub_max_iter_ = from._impl_.sqp_sub_max_iter_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.max_iter_ = from._impl_.max_iter_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.scaled_termination_ = from._impl_.scaled_termination_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.warm_start_ = from._impl_.warm_start_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.max_num_of_iterations_ = from._impl_.max_num_of_iterations_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.acceptable_num_of_iterations_ = from._impl_.acceptable_num_of_iterations_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.tol_ = from._impl_.tol_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.acceptable_tol_ = from._impl_.acceptable_tol_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FemPosDeviationSmootherConfig::CopyFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FemPosDeviationSmootherConfig::IsInitialized() const {
  return true;
}

void FemPosDeviationSmootherConfig::InternalSwap(FemPosDeviationSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, _impl_.time_limit_)
      + sizeof(FemPosDeviationSmootherConfig::_impl_.time_limit_)
      - PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, _impl_.apply_curvature_constraint_)>(
          reinterpret_cast<char*>(&_impl_.apply_curvature_constraint_),
          reinterpret_cast<char*>(&other->_impl_.apply_curvature_constraint_));
  swap(_impl_.weight_fem_pos_deviation_, other->_impl_.weight_fem_pos_deviation_);
  swap(_impl_.weight_ref_deviation_, other->_impl_.weight_ref_deviation_);
  swap(_impl_.weight_path_length_, other->_impl_.weight_path_length_);
  swap(_impl_.weight_curvature_constraint_slack_var_, other->_impl_.weight_curvature_constraint_slack_var_);
  swap(_impl_.curvature_constraint_, other->_impl_.curvature_constraint_);
  swap(_impl_.sqp_ftol_, other->_impl_.sqp_ftol_);
  swap(_impl_.sqp_ctol_, other->_impl_.sqp_ctol_);
  swap(_impl_.sqp_pen_max_iter_, other->_impl_.sqp_pen_max_iter_);
  swap(_impl_.sqp_sub_max_iter_, other->_impl_.sqp_sub_max_iter_);
  swap(_impl_.max_iter_, other->_impl_.max_iter_);
  swap(_impl_.scaled_termination_, other->_impl_.scaled_termination_);
  swap(_impl_.warm_start_, other->_impl_.warm_start_);
  swap(_impl_.max_num_of_iterations_, other->_impl_.max_num_of_iterations_);
  swap(_impl_.acceptable_num_of_iterations_, other->_impl_.acceptable_num_of_iterations_);
  swap(_impl_.tol_, other->_impl_.tol_);
  swap(_impl_.acceptable_tol_, other->_impl_.acceptable_tol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FemPosDeviationSmootherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::FemPosDeviationSmootherConfig*
Arena::CreateMaybeMessage< ::apollo::planning::FemPosDeviationSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::FemPosDeviationSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
