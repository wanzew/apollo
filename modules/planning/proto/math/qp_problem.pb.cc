// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/math/qp_problem.proto

#include "modules/planning/proto/math/qp_problem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR QuadraticProgrammingProblem::QuadraticProgrammingProblem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bias_)*/{}
  , /*decltype(_impl_.equality_value_)*/{}
  , /*decltype(_impl_.inequality_value_)*/{}
  , /*decltype(_impl_.input_marker_)*/{}
  , /*decltype(_impl_.optimal_param_)*/{}
  , /*decltype(_impl_.quadratic_matrix_)*/nullptr
  , /*decltype(_impl_.equality_matrix_)*/nullptr
  , /*decltype(_impl_.inequality_matrix_)*/nullptr
  , /*decltype(_impl_.param_size_)*/0} {}
struct QuadraticProgrammingProblemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuadraticProgrammingProblemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuadraticProgrammingProblemDefaultTypeInternal() {}
  union {
    QuadraticProgrammingProblem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuadraticProgrammingProblemDefaultTypeInternal _QuadraticProgrammingProblem_default_instance_;
PROTOBUF_CONSTEXPR QPMatrix::QPMatrix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.row_size_)*/0
  , /*decltype(_impl_.col_size_)*/0} {}
struct QPMatrixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QPMatrixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QPMatrixDefaultTypeInternal() {}
  union {
    QPMatrix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QPMatrixDefaultTypeInternal _QPMatrix_default_instance_;
PROTOBUF_CONSTEXPR QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.problem_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuadraticProgrammingProblemSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuadraticProgrammingProblemSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuadraticProgrammingProblemSetDefaultTypeInternal() {}
  union {
    QuadraticProgrammingProblemSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuadraticProgrammingProblemSetDefaultTypeInternal _QuadraticProgrammingProblemSet_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.param_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.quadratic_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.bias_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.equality_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.equality_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.inequality_matrix_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.inequality_value_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.input_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblem, _impl_.optimal_param_),
  3,
  0,
  ~0u,
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _impl_.row_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _impl_.col_size_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QPMatrix, _impl_.element_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblemSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QuadraticProgrammingProblemSet, _impl_.problem_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::apollo::planning::QuadraticProgrammingProblem)},
  { 24, 33, -1, sizeof(::apollo::planning::QPMatrix)},
  { 36, -1, -1, sizeof(::apollo::planning::QuadraticProgrammingProblemSet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_QuadraticProgrammingProblem_default_instance_._instance,
  &::apollo::planning::_QPMatrix_default_instance_._instance,
  &::apollo::planning::_QuadraticProgrammingProblemSet_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/math/qp_problem"
  ".proto\022\017apollo.planning\"\275\002\n\033QuadraticPro"
  "grammingProblem\022\022\n\nparam_size\030\001 \001(\005\0223\n\020q"
  "uadratic_matrix\030\002 \001(\0132\031.apollo.planning."
  "QPMatrix\022\014\n\004bias\030\003 \003(\001\0222\n\017equality_matri"
  "x\030\004 \001(\0132\031.apollo.planning.QPMatrix\022\026\n\016eq"
  "uality_value\030\005 \003(\001\0224\n\021inequality_matrix\030"
  "\006 \001(\0132\031.apollo.planning.QPMatrix\022\030\n\020ineq"
  "uality_value\030\007 \003(\001\022\024\n\014input_marker\030\010 \003(\001"
  "\022\025\n\roptimal_param\030\t \003(\001\"\?\n\010QPMatrix\022\020\n\010r"
  "ow_size\030\001 \001(\005\022\020\n\010col_size\030\002 \001(\005\022\017\n\007eleme"
  "nt\030\003 \003(\001\"_\n\036QuadraticProgrammingProblemS"
  "et\022=\n\007problem\030\001 \003(\0132,.apollo.planning.Qu"
  "adraticProgrammingProblem"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto = {
    false, false, 545, descriptor_table_protodef_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto,
    "modules/planning/proto/math/qp_problem.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class QuadraticProgrammingProblem::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadraticProgrammingProblem>()._impl_._has_bits_);
  static void set_has_param_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::QPMatrix& quadratic_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_quadratic_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::QPMatrix& equality_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_equality_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::QPMatrix& inequality_matrix(const QuadraticProgrammingProblem* msg);
  static void set_has_inequality_matrix(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::quadratic_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->_impl_.quadratic_matrix_;
}
const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::equality_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->_impl_.equality_matrix_;
}
const ::apollo::planning::QPMatrix&
QuadraticProgrammingProblem::_Internal::inequality_matrix(const QuadraticProgrammingProblem* msg) {
  return *msg->_impl_.inequality_matrix_;
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QuadraticProgrammingProblem)
}
QuadraticProgrammingProblem::QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bias_){from._impl_.bias_}
    , decltype(_impl_.equality_value_){from._impl_.equality_value_}
    , decltype(_impl_.inequality_value_){from._impl_.inequality_value_}
    , decltype(_impl_.input_marker_){from._impl_.input_marker_}
    , decltype(_impl_.optimal_param_){from._impl_.optimal_param_}
    , decltype(_impl_.quadratic_matrix_){nullptr}
    , decltype(_impl_.equality_matrix_){nullptr}
    , decltype(_impl_.inequality_matrix_){nullptr}
    , decltype(_impl_.param_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quadratic_matrix()) {
    _impl_.quadratic_matrix_ = new ::apollo::planning::QPMatrix(*from._impl_.quadratic_matrix_);
  }
  if (from._internal_has_equality_matrix()) {
    _impl_.equality_matrix_ = new ::apollo::planning::QPMatrix(*from._impl_.equality_matrix_);
  }
  if (from._internal_has_inequality_matrix()) {
    _impl_.inequality_matrix_ = new ::apollo::planning::QPMatrix(*from._impl_.inequality_matrix_);
  }
  _impl_.param_size_ = from._impl_.param_size_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QuadraticProgrammingProblem)
}

inline void QuadraticProgrammingProblem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bias_){arena}
    , decltype(_impl_.equality_value_){arena}
    , decltype(_impl_.inequality_value_){arena}
    , decltype(_impl_.input_marker_){arena}
    , decltype(_impl_.optimal_param_){arena}
    , decltype(_impl_.quadratic_matrix_){nullptr}
    , decltype(_impl_.equality_matrix_){nullptr}
    , decltype(_impl_.inequality_matrix_){nullptr}
    , decltype(_impl_.param_size_){0}
  };
}

QuadraticProgrammingProblem::~QuadraticProgrammingProblem() {
  // @@protoc_insertion_point(destructor:apollo.planning.QuadraticProgrammingProblem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuadraticProgrammingProblem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bias_.~RepeatedField();
  _impl_.equality_value_.~RepeatedField();
  _impl_.inequality_value_.~RepeatedField();
  _impl_.input_marker_.~RepeatedField();
  _impl_.optimal_param_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.quadratic_matrix_;
  if (this != internal_default_instance()) delete _impl_.equality_matrix_;
  if (this != internal_default_instance()) delete _impl_.inequality_matrix_;
}

void QuadraticProgrammingProblem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuadraticProgrammingProblem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QuadraticProgrammingProblem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bias_.Clear();
  _impl_.equality_value_.Clear();
  _impl_.inequality_value_.Clear();
  _impl_.input_marker_.Clear();
  _impl_.optimal_param_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.quadratic_matrix_ != nullptr);
      _impl_.quadratic_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.equality_matrix_ != nullptr);
      _impl_.equality_matrix_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inequality_matrix_ != nullptr);
      _impl_.inequality_matrix_->Clear();
    }
  }
  _impl_.param_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadraticProgrammingProblem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 param_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_param_size(&has_bits);
          _impl_.param_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quadratic_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double bias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bias(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bias(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix equality_matrix = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_equality_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double equality_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_equality_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_equality_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QPMatrix inequality_matrix = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inequality_matrix(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double inequality_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inequality_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inequality_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double input_marker = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_input_marker(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_input_marker(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double optimal_param = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_optimal_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<73>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_optimal_param(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuadraticProgrammingProblem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QuadraticProgrammingProblem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 param_size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_param_size(), target);
  }

  // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quadratic_matrix(this),
        _Internal::quadratic_matrix(this).GetCachedSize(), target, stream);
  }

  // repeated double bias = 3;
  for (int i = 0, n = this->_internal_bias_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_bias(i), target);
  }

  // optional .apollo.planning.QPMatrix equality_matrix = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::equality_matrix(this),
        _Internal::equality_matrix(this).GetCachedSize(), target, stream);
  }

  // repeated double equality_value = 5;
  for (int i = 0, n = this->_internal_equality_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_equality_value(i), target);
  }

  // optional .apollo.planning.QPMatrix inequality_matrix = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::inequality_matrix(this),
        _Internal::inequality_matrix(this).GetCachedSize(), target, stream);
  }

  // repeated double inequality_value = 7;
  for (int i = 0, n = this->_internal_inequality_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_inequality_value(i), target);
  }

  // repeated double input_marker = 8;
  for (int i = 0, n = this->_internal_input_marker_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_input_marker(i), target);
  }

  // repeated double optimal_param = 9;
  for (int i = 0, n = this->_internal_optimal_param_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_optimal_param(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QuadraticProgrammingProblem)
  return target;
}

size_t QuadraticProgrammingProblem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QuadraticProgrammingProblem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bias = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bias_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bias_size());
    total_size += data_size;
  }

  // repeated double equality_value = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_equality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_equality_value_size());
    total_size += data_size;
  }

  // repeated double inequality_value = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inequality_value_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inequality_value_size());
    total_size += data_size;
  }

  // repeated double input_marker = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_input_marker_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_input_marker_size());
    total_size += data_size;
  }

  // repeated double optimal_param = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_optimal_param_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_optimal_param_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quadratic_matrix_);
    }

    // optional .apollo.planning.QPMatrix equality_matrix = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.equality_matrix_);
    }

    // optional .apollo.planning.QPMatrix inequality_matrix = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inequality_matrix_);
    }

    // optional int32 param_size = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadraticProgrammingProblem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuadraticProgrammingProblem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadraticProgrammingProblem::GetClassData() const { return &_class_data_; }

void QuadraticProgrammingProblem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuadraticProgrammingProblem *>(to)->MergeFrom(
      static_cast<const QuadraticProgrammingProblem &>(from));
}


void QuadraticProgrammingProblem::MergeFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QuadraticProgrammingProblem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bias_.MergeFrom(from._impl_.bias_);
  _impl_.equality_value_.MergeFrom(from._impl_.equality_value_);
  _impl_.inequality_value_.MergeFrom(from._impl_.inequality_value_);
  _impl_.input_marker_.MergeFrom(from._impl_.input_marker_);
  _impl_.optimal_param_.MergeFrom(from._impl_.optimal_param_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quadratic_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_quadratic_matrix());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_equality_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_equality_matrix());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inequality_matrix()->::apollo::planning::QPMatrix::MergeFrom(from._internal_inequality_matrix());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.param_size_ = from._impl_.param_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadraticProgrammingProblem::CopyFrom(const QuadraticProgrammingProblem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QuadraticProgrammingProblem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblem::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblem::InternalSwap(QuadraticProgrammingProblem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bias_.InternalSwap(&other->_impl_.bias_);
  _impl_.equality_value_.InternalSwap(&other->_impl_.equality_value_);
  _impl_.inequality_value_.InternalSwap(&other->_impl_.inequality_value_);
  _impl_.input_marker_.InternalSwap(&other->_impl_.input_marker_);
  _impl_.optimal_param_.InternalSwap(&other->_impl_.optimal_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuadraticProgrammingProblem, _impl_.param_size_)
      + sizeof(QuadraticProgrammingProblem::_impl_.param_size_)
      - PROTOBUF_FIELD_OFFSET(QuadraticProgrammingProblem, _impl_.quadratic_matrix_)>(
          reinterpret_cast<char*>(&_impl_.quadratic_matrix_),
          reinterpret_cast<char*>(&other->_impl_.quadratic_matrix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadraticProgrammingProblem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto[0]);
}

// ===================================================================

class QPMatrix::_Internal {
 public:
  using HasBits = decltype(std::declval<QPMatrix>()._impl_._has_bits_);
  static void set_has_row_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_col_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

QPMatrix::QPMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QPMatrix)
}
QPMatrix::QPMatrix(const QPMatrix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.row_size_){}
    , decltype(_impl_.col_size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_size_, &from._impl_.row_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.col_size_) -
    reinterpret_cast<char*>(&_impl_.row_size_)) + sizeof(_impl_.col_size_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QPMatrix)
}

inline void QPMatrix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.element_){arena}
    , decltype(_impl_.row_size_){0}
    , decltype(_impl_.col_size_){0}
  };
}

QPMatrix::~QPMatrix() {
  // @@protoc_insertion_point(destructor:apollo.planning.QPMatrix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QPMatrix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_.~RepeatedField();
}

void QPMatrix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QPMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QPMatrix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.row_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.col_size_) -
        reinterpret_cast<char*>(&_impl_.row_size_)) + sizeof(_impl_.col_size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QPMatrix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 row_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_size(&has_bits);
          _impl_.row_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 col_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_col_size(&has_bits);
          _impl_.col_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_element(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_element(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QPMatrix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QPMatrix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 row_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_row_size(), target);
  }

  // optional int32 col_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_col_size(), target);
  }

  // repeated double element = 3;
  for (int i = 0, n = this->_internal_element_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_element(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QPMatrix)
  return target;
}

size_t QPMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QPMatrix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double element = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_element_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 row_size = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row_size());
    }

    // optional int32 col_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_col_size());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QPMatrix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QPMatrix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QPMatrix::GetClassData() const { return &_class_data_; }

void QPMatrix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QPMatrix *>(to)->MergeFrom(
      static_cast<const QPMatrix &>(from));
}


void QPMatrix::MergeFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QPMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.element_.MergeFrom(from._impl_.element_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.row_size_ = from._impl_.row_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.col_size_ = from._impl_.col_size_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QPMatrix::CopyFrom(const QPMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QPMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QPMatrix::IsInitialized() const {
  return true;
}

void QPMatrix::InternalSwap(QPMatrix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.element_.InternalSwap(&other->_impl_.element_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QPMatrix, _impl_.col_size_)
      + sizeof(QPMatrix::_impl_.col_size_)
      - PROTOBUF_FIELD_OFFSET(QPMatrix, _impl_.row_size_)>(
          reinterpret_cast<char*>(&_impl_.row_size_),
          reinterpret_cast<char*>(&other->_impl_.row_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QPMatrix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto[1]);
}

// ===================================================================

class QuadraticProgrammingProblemSet::_Internal {
 public:
};

QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QuadraticProgrammingProblemSet)
}
QuadraticProgrammingProblemSet::QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.problem_){from._impl_.problem_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QuadraticProgrammingProblemSet)
}

inline void QuadraticProgrammingProblemSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.problem_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuadraticProgrammingProblemSet::~QuadraticProgrammingProblemSet() {
  // @@protoc_insertion_point(destructor:apollo.planning.QuadraticProgrammingProblemSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuadraticProgrammingProblemSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.problem_.~RepeatedPtrField();
}

void QuadraticProgrammingProblemSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuadraticProgrammingProblemSet::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QuadraticProgrammingProblemSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.problem_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadraticProgrammingProblemSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_problem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuadraticProgrammingProblemSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QuadraticProgrammingProblemSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_problem_size()); i < n; i++) {
    const auto& repfield = this->_internal_problem(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QuadraticProgrammingProblemSet)
  return target;
}

size_t QuadraticProgrammingProblemSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QuadraticProgrammingProblemSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  total_size += 1UL * this->_internal_problem_size();
  for (const auto& msg : this->_impl_.problem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadraticProgrammingProblemSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuadraticProgrammingProblemSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadraticProgrammingProblemSet::GetClassData() const { return &_class_data_; }

void QuadraticProgrammingProblemSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuadraticProgrammingProblemSet *>(to)->MergeFrom(
      static_cast<const QuadraticProgrammingProblemSet &>(from));
}


void QuadraticProgrammingProblemSet::MergeFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.problem_.MergeFrom(from._impl_.problem_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadraticProgrammingProblemSet::CopyFrom(const QuadraticProgrammingProblemSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QuadraticProgrammingProblemSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadraticProgrammingProblemSet::IsInitialized() const {
  return true;
}

void QuadraticProgrammingProblemSet::InternalSwap(QuadraticProgrammingProblemSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.problem_.InternalSwap(&other->_impl_.problem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadraticProgrammingProblemSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QuadraticProgrammingProblem*
Arena::CreateMaybeMessage< ::apollo::planning::QuadraticProgrammingProblem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QuadraticProgrammingProblem >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QPMatrix*
Arena::CreateMaybeMessage< ::apollo::planning::QPMatrix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QPMatrix >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QuadraticProgrammingProblemSet*
Arena::CreateMaybeMessage< ::apollo::planning::QuadraticProgrammingProblemSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QuadraticProgrammingProblemSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
