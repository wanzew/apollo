// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/st_boundary_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto;
namespace apollo {
namespace planning {
class StBoundaryConfig;
struct StBoundaryConfigDefaultTypeInternal;
extern StBoundaryConfigDefaultTypeInternal _StBoundaryConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::StBoundaryConfig* Arena::CreateMaybeMessage<::apollo::planning::StBoundaryConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class StBoundaryConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StBoundaryConfig) */ {
 public:
  inline StBoundaryConfig() : StBoundaryConfig(nullptr) {}
  ~StBoundaryConfig() override;
  explicit PROTOBUF_CONSTEXPR StBoundaryConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StBoundaryConfig(const StBoundaryConfig& from);
  StBoundaryConfig(StBoundaryConfig&& from) noexcept
    : StBoundaryConfig() {
    *this = ::std::move(from);
  }

  inline StBoundaryConfig& operator=(const StBoundaryConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StBoundaryConfig& operator=(StBoundaryConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StBoundaryConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StBoundaryConfig* internal_default_instance() {
    return reinterpret_cast<const StBoundaryConfig*>(
               &_StBoundaryConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StBoundaryConfig& a, StBoundaryConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StBoundaryConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StBoundaryConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StBoundaryConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StBoundaryConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StBoundaryConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StBoundaryConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StBoundaryConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.StBoundaryConfig";
  }
  protected:
  explicit StBoundaryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticObsNudgeSpeedRatioFieldNumber = 10,
    kDynamicObsNudgeSpeedRatioFieldNumber = 11,
    kCentriJerkSpeedCoeffFieldNumber = 12,
    kNumPointsToAvgKappaFieldNumber = 9,
    kBoundaryBufferFieldNumber = 1,
    kHighSpeedCentricAccelerationLimitFieldNumber = 2,
    kLowSpeedCentricAccelerationLimitFieldNumber = 3,
    kHighSpeedThresholdFieldNumber = 4,
    kLowSpeedThresholdFieldNumber = 5,
    kMinimalKappaFieldNumber = 6,
    kPointExtensionFieldNumber = 7,
    kLowestSpeedFieldNumber = 8,
  };
  // optional double static_obs_nudge_speed_ratio = 10;
  bool has_static_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_static_obs_nudge_speed_ratio() const;
  public:
  void clear_static_obs_nudge_speed_ratio();
  double static_obs_nudge_speed_ratio() const;
  void set_static_obs_nudge_speed_ratio(double value);
  private:
  double _internal_static_obs_nudge_speed_ratio() const;
  void _internal_set_static_obs_nudge_speed_ratio(double value);
  public:

  // optional double dynamic_obs_nudge_speed_ratio = 11;
  bool has_dynamic_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_dynamic_obs_nudge_speed_ratio() const;
  public:
  void clear_dynamic_obs_nudge_speed_ratio();
  double dynamic_obs_nudge_speed_ratio() const;
  void set_dynamic_obs_nudge_speed_ratio(double value);
  private:
  double _internal_dynamic_obs_nudge_speed_ratio() const;
  void _internal_set_dynamic_obs_nudge_speed_ratio(double value);
  public:

  // optional double centri_jerk_speed_coeff = 12;
  bool has_centri_jerk_speed_coeff() const;
  private:
  bool _internal_has_centri_jerk_speed_coeff() const;
  public:
  void clear_centri_jerk_speed_coeff();
  double centri_jerk_speed_coeff() const;
  void set_centri_jerk_speed_coeff(double value);
  private:
  double _internal_centri_jerk_speed_coeff() const;
  void _internal_set_centri_jerk_speed_coeff(double value);
  public:

  // optional uint32 num_points_to_avg_kappa = 9 [default = 4];
  bool has_num_points_to_avg_kappa() const;
  private:
  bool _internal_has_num_points_to_avg_kappa() const;
  public:
  void clear_num_points_to_avg_kappa();
  uint32_t num_points_to_avg_kappa() const;
  void set_num_points_to_avg_kappa(uint32_t value);
  private:
  uint32_t _internal_num_points_to_avg_kappa() const;
  void _internal_set_num_points_to_avg_kappa(uint32_t value);
  public:

  // optional double boundary_buffer = 1 [default = 0.1];
  bool has_boundary_buffer() const;
  private:
  bool _internal_has_boundary_buffer() const;
  public:
  void clear_boundary_buffer();
  double boundary_buffer() const;
  void set_boundary_buffer(double value);
  private:
  double _internal_boundary_buffer() const;
  void _internal_set_boundary_buffer(double value);
  public:

  // optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
  bool has_high_speed_centric_acceleration_limit() const;
  private:
  bool _internal_has_high_speed_centric_acceleration_limit() const;
  public:
  void clear_high_speed_centric_acceleration_limit();
  double high_speed_centric_acceleration_limit() const;
  void set_high_speed_centric_acceleration_limit(double value);
  private:
  double _internal_high_speed_centric_acceleration_limit() const;
  void _internal_set_high_speed_centric_acceleration_limit(double value);
  public:

  // optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
  bool has_low_speed_centric_acceleration_limit() const;
  private:
  bool _internal_has_low_speed_centric_acceleration_limit() const;
  public:
  void clear_low_speed_centric_acceleration_limit();
  double low_speed_centric_acceleration_limit() const;
  void set_low_speed_centric_acceleration_limit(double value);
  private:
  double _internal_low_speed_centric_acceleration_limit() const;
  void _internal_set_low_speed_centric_acceleration_limit(double value);
  public:

  // optional double high_speed_threshold = 4 [default = 20];
  bool has_high_speed_threshold() const;
  private:
  bool _internal_has_high_speed_threshold() const;
  public:
  void clear_high_speed_threshold();
  double high_speed_threshold() const;
  void set_high_speed_threshold(double value);
  private:
  double _internal_high_speed_threshold() const;
  void _internal_set_high_speed_threshold(double value);
  public:

  // optional double low_speed_threshold = 5 [default = 7];
  bool has_low_speed_threshold() const;
  private:
  bool _internal_has_low_speed_threshold() const;
  public:
  void clear_low_speed_threshold();
  double low_speed_threshold() const;
  void set_low_speed_threshold(double value);
  private:
  double _internal_low_speed_threshold() const;
  void _internal_set_low_speed_threshold(double value);
  public:

  // optional double minimal_kappa = 6 [default = 1e-05];
  bool has_minimal_kappa() const;
  private:
  bool _internal_has_minimal_kappa() const;
  public:
  void clear_minimal_kappa();
  double minimal_kappa() const;
  void set_minimal_kappa(double value);
  private:
  double _internal_minimal_kappa() const;
  void _internal_set_minimal_kappa(double value);
  public:

  // optional double point_extension = 7 [default = 1];
  bool has_point_extension() const;
  private:
  bool _internal_has_point_extension() const;
  public:
  void clear_point_extension();
  double point_extension() const;
  void set_point_extension(double value);
  private:
  double _internal_point_extension() const;
  void _internal_set_point_extension(double value);
  public:

  // optional double lowest_speed = 8 [default = 2.5];
  bool has_lowest_speed() const;
  private:
  bool _internal_has_lowest_speed() const;
  public:
  void clear_lowest_speed();
  double lowest_speed() const;
  void set_lowest_speed(double value);
  private:
  double _internal_lowest_speed() const;
  void _internal_set_lowest_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.StBoundaryConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double static_obs_nudge_speed_ratio_;
    double dynamic_obs_nudge_speed_ratio_;
    double centri_jerk_speed_coeff_;
    uint32_t num_points_to_avg_kappa_;
    double boundary_buffer_;
    double high_speed_centric_acceleration_limit_;
    double low_speed_centric_acceleration_limit_;
    double high_speed_threshold_;
    double low_speed_threshold_;
    double minimal_kappa_;
    double point_extension_;
    double lowest_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StBoundaryConfig

// optional double boundary_buffer = 1 [default = 0.1];
inline bool StBoundaryConfig::_internal_has_boundary_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_boundary_buffer() const {
  return _internal_has_boundary_buffer();
}
inline void StBoundaryConfig::clear_boundary_buffer() {
  _impl_.boundary_buffer_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double StBoundaryConfig::_internal_boundary_buffer() const {
  return _impl_.boundary_buffer_;
}
inline double StBoundaryConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.boundary_buffer)
  return _internal_boundary_buffer();
}
inline void StBoundaryConfig::_internal_set_boundary_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.boundary_buffer_ = value;
}
inline void StBoundaryConfig::set_boundary_buffer(double value) {
  _internal_set_boundary_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.boundary_buffer)
}

// optional double high_speed_centric_acceleration_limit = 2 [default = 1.2];
inline bool StBoundaryConfig::_internal_has_high_speed_centric_acceleration_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_high_speed_centric_acceleration_limit() const {
  return _internal_has_high_speed_centric_acceleration_limit();
}
inline void StBoundaryConfig::clear_high_speed_centric_acceleration_limit() {
  _impl_.high_speed_centric_acceleration_limit_ = 1.2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double StBoundaryConfig::_internal_high_speed_centric_acceleration_limit() const {
  return _impl_.high_speed_centric_acceleration_limit_;
}
inline double StBoundaryConfig::high_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
  return _internal_high_speed_centric_acceleration_limit();
}
inline void StBoundaryConfig::_internal_set_high_speed_centric_acceleration_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.high_speed_centric_acceleration_limit_ = value;
}
inline void StBoundaryConfig::set_high_speed_centric_acceleration_limit(double value) {
  _internal_set_high_speed_centric_acceleration_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_centric_acceleration_limit)
}

// optional double low_speed_centric_acceleration_limit = 3 [default = 1.4];
inline bool StBoundaryConfig::_internal_has_low_speed_centric_acceleration_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_low_speed_centric_acceleration_limit() const {
  return _internal_has_low_speed_centric_acceleration_limit();
}
inline void StBoundaryConfig::clear_low_speed_centric_acceleration_limit() {
  _impl_.low_speed_centric_acceleration_limit_ = 1.4;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double StBoundaryConfig::_internal_low_speed_centric_acceleration_limit() const {
  return _impl_.low_speed_centric_acceleration_limit_;
}
inline double StBoundaryConfig::low_speed_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
  return _internal_low_speed_centric_acceleration_limit();
}
inline void StBoundaryConfig::_internal_set_low_speed_centric_acceleration_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.low_speed_centric_acceleration_limit_ = value;
}
inline void StBoundaryConfig::set_low_speed_centric_acceleration_limit(double value) {
  _internal_set_low_speed_centric_acceleration_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_centric_acceleration_limit)
}

// optional double high_speed_threshold = 4 [default = 20];
inline bool StBoundaryConfig::_internal_has_high_speed_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_high_speed_threshold() const {
  return _internal_has_high_speed_threshold();
}
inline void StBoundaryConfig::clear_high_speed_threshold() {
  _impl_.high_speed_threshold_ = 20;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double StBoundaryConfig::_internal_high_speed_threshold() const {
  return _impl_.high_speed_threshold_;
}
inline double StBoundaryConfig::high_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.high_speed_threshold)
  return _internal_high_speed_threshold();
}
inline void StBoundaryConfig::_internal_set_high_speed_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.high_speed_threshold_ = value;
}
inline void StBoundaryConfig::set_high_speed_threshold(double value) {
  _internal_set_high_speed_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.high_speed_threshold)
}

// optional double low_speed_threshold = 5 [default = 7];
inline bool StBoundaryConfig::_internal_has_low_speed_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_low_speed_threshold() const {
  return _internal_has_low_speed_threshold();
}
inline void StBoundaryConfig::clear_low_speed_threshold() {
  _impl_.low_speed_threshold_ = 7;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double StBoundaryConfig::_internal_low_speed_threshold() const {
  return _impl_.low_speed_threshold_;
}
inline double StBoundaryConfig::low_speed_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.low_speed_threshold)
  return _internal_low_speed_threshold();
}
inline void StBoundaryConfig::_internal_set_low_speed_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.low_speed_threshold_ = value;
}
inline void StBoundaryConfig::set_low_speed_threshold(double value) {
  _internal_set_low_speed_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.low_speed_threshold)
}

// optional double minimal_kappa = 6 [default = 1e-05];
inline bool StBoundaryConfig::_internal_has_minimal_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_minimal_kappa() const {
  return _internal_has_minimal_kappa();
}
inline void StBoundaryConfig::clear_minimal_kappa() {
  _impl_.minimal_kappa_ = 1e-05;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double StBoundaryConfig::_internal_minimal_kappa() const {
  return _impl_.minimal_kappa_;
}
inline double StBoundaryConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.minimal_kappa)
  return _internal_minimal_kappa();
}
inline void StBoundaryConfig::_internal_set_minimal_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.minimal_kappa_ = value;
}
inline void StBoundaryConfig::set_minimal_kappa(double value) {
  _internal_set_minimal_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.minimal_kappa)
}

// optional double point_extension = 7 [default = 1];
inline bool StBoundaryConfig::_internal_has_point_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_point_extension() const {
  return _internal_has_point_extension();
}
inline void StBoundaryConfig::clear_point_extension() {
  _impl_.point_extension_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double StBoundaryConfig::_internal_point_extension() const {
  return _impl_.point_extension_;
}
inline double StBoundaryConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.point_extension)
  return _internal_point_extension();
}
inline void StBoundaryConfig::_internal_set_point_extension(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.point_extension_ = value;
}
inline void StBoundaryConfig::set_point_extension(double value) {
  _internal_set_point_extension(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.point_extension)
}

// optional double lowest_speed = 8 [default = 2.5];
inline bool StBoundaryConfig::_internal_has_lowest_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_lowest_speed() const {
  return _internal_has_lowest_speed();
}
inline void StBoundaryConfig::clear_lowest_speed() {
  _impl_.lowest_speed_ = 2.5;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double StBoundaryConfig::_internal_lowest_speed() const {
  return _impl_.lowest_speed_;
}
inline double StBoundaryConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.lowest_speed)
  return _internal_lowest_speed();
}
inline void StBoundaryConfig::_internal_set_lowest_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.lowest_speed_ = value;
}
inline void StBoundaryConfig::set_lowest_speed(double value) {
  _internal_set_lowest_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.lowest_speed)
}

// optional uint32 num_points_to_avg_kappa = 9 [default = 4];
inline bool StBoundaryConfig::_internal_has_num_points_to_avg_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_num_points_to_avg_kappa() const {
  return _internal_has_num_points_to_avg_kappa();
}
inline void StBoundaryConfig::clear_num_points_to_avg_kappa() {
  _impl_.num_points_to_avg_kappa_ = 4u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t StBoundaryConfig::_internal_num_points_to_avg_kappa() const {
  return _impl_.num_points_to_avg_kappa_;
}
inline uint32_t StBoundaryConfig::num_points_to_avg_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
  return _internal_num_points_to_avg_kappa();
}
inline void StBoundaryConfig::_internal_set_num_points_to_avg_kappa(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_points_to_avg_kappa_ = value;
}
inline void StBoundaryConfig::set_num_points_to_avg_kappa(uint32_t value) {
  _internal_set_num_points_to_avg_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.num_points_to_avg_kappa)
}

// optional double static_obs_nudge_speed_ratio = 10;
inline bool StBoundaryConfig::_internal_has_static_obs_nudge_speed_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_static_obs_nudge_speed_ratio() const {
  return _internal_has_static_obs_nudge_speed_ratio();
}
inline void StBoundaryConfig::clear_static_obs_nudge_speed_ratio() {
  _impl_.static_obs_nudge_speed_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double StBoundaryConfig::_internal_static_obs_nudge_speed_ratio() const {
  return _impl_.static_obs_nudge_speed_ratio_;
}
inline double StBoundaryConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
  return _internal_static_obs_nudge_speed_ratio();
}
inline void StBoundaryConfig::_internal_set_static_obs_nudge_speed_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.static_obs_nudge_speed_ratio_ = value;
}
inline void StBoundaryConfig::set_static_obs_nudge_speed_ratio(double value) {
  _internal_set_static_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 11;
inline bool StBoundaryConfig::_internal_has_dynamic_obs_nudge_speed_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return _internal_has_dynamic_obs_nudge_speed_ratio();
}
inline void StBoundaryConfig::clear_dynamic_obs_nudge_speed_ratio() {
  _impl_.dynamic_obs_nudge_speed_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double StBoundaryConfig::_internal_dynamic_obs_nudge_speed_ratio() const {
  return _impl_.dynamic_obs_nudge_speed_ratio_;
}
inline double StBoundaryConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
  return _internal_dynamic_obs_nudge_speed_ratio();
}
inline void StBoundaryConfig::_internal_set_dynamic_obs_nudge_speed_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dynamic_obs_nudge_speed_ratio_ = value;
}
inline void StBoundaryConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  _internal_set_dynamic_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.dynamic_obs_nudge_speed_ratio)
}

// optional double centri_jerk_speed_coeff = 12;
inline bool StBoundaryConfig::_internal_has_centri_jerk_speed_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StBoundaryConfig::has_centri_jerk_speed_coeff() const {
  return _internal_has_centri_jerk_speed_coeff();
}
inline void StBoundaryConfig::clear_centri_jerk_speed_coeff() {
  _impl_.centri_jerk_speed_coeff_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double StBoundaryConfig::_internal_centri_jerk_speed_coeff() const {
  return _impl_.centri_jerk_speed_coeff_;
}
inline double StBoundaryConfig::centri_jerk_speed_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
  return _internal_centri_jerk_speed_coeff();
}
inline void StBoundaryConfig::_internal_set_centri_jerk_speed_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.centri_jerk_speed_coeff_ = value;
}
inline void StBoundaryConfig::set_centri_jerk_speed_coeff(double value) {
  _internal_set_centri_jerk_speed_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StBoundaryConfig.centri_jerk_speed_coeff)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto
