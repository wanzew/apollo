// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#include "modules/planning/proto/planning_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning_internal {
PROTOBUF_CONSTEXPR Debug::Debug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planning_data_)*/nullptr} {}
struct DebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugDefaultTypeInternal() {}
  union {
    Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugDefaultTypeInternal _Debug_default_instance_;
PROTOBUF_CONSTEXPR SpeedPlan::SpeedPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.speed_point_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SpeedPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPlanDefaultTypeInternal() {}
  union {
    SpeedPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPlanDefaultTypeInternal _SpeedPlan_default_instance_;
PROTOBUF_CONSTEXPR StGraphBoundaryDebug::StGraphBoundaryDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/1} {}
struct StGraphBoundaryDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StGraphBoundaryDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StGraphBoundaryDebugDefaultTypeInternal() {}
  union {
    StGraphBoundaryDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StGraphBoundaryDebugDefaultTypeInternal _StGraphBoundaryDebug_default_instance_;
PROTOBUF_CONSTEXPR SLFrameDebug::SLFrameDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sampled_s_)*/{}
  , /*decltype(_impl_.static_obstacle_lower_bound_)*/{}
  , /*decltype(_impl_.dynamic_obstacle_lower_bound_)*/{}
  , /*decltype(_impl_.static_obstacle_upper_bound_)*/{}
  , /*decltype(_impl_.dynamic_obstacle_upper_bound_)*/{}
  , /*decltype(_impl_.map_lower_bound_)*/{}
  , /*decltype(_impl_.map_upper_bound_)*/{}
  , /*decltype(_impl_.sl_path_)*/{}
  , /*decltype(_impl_.aggregated_boundary_s_)*/{}
  , /*decltype(_impl_.aggregated_boundary_low_)*/{}
  , /*decltype(_impl_.aggregated_boundary_high_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct SLFrameDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SLFrameDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SLFrameDebugDefaultTypeInternal() {}
  union {
    SLFrameDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SLFrameDebugDefaultTypeInternal _SLFrameDebug_default_instance_;
PROTOBUF_CONSTEXPR STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.t_)*/{}
  , /*decltype(_impl_.lower_bound_)*/{}
  , /*decltype(_impl_.upper_bound_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal() {}
  union {
    STGraphDebug_STGraphSpeedConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal _STGraphDebug_STGraphSpeedConstraint_default_instance_;
PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.t_)*/{}
  , /*decltype(_impl_.cruise_line_s_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal() {}
  union {
    STGraphDebug_STGraphKernelCuiseRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.t_)*/{}
  , /*decltype(_impl_.follow_line_s_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal() {}
  union {
    STGraphDebug_STGraphKernelFollowRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal _STGraphDebug_STGraphKernelFollowRef_default_instance_;
PROTOBUF_CONSTEXPR STGraphDebug::STGraphDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boundary_)*/{}
  , /*decltype(_impl_.speed_limit_)*/{}
  , /*decltype(_impl_.speed_profile_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.speed_constraint_)*/nullptr
  , /*decltype(_impl_.kernel_cruise_ref_)*/nullptr
  , /*decltype(_impl_.kernel_follow_ref_)*/nullptr} {}
struct STGraphDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR STGraphDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~STGraphDebugDefaultTypeInternal() {}
  union {
    STGraphDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 STGraphDebugDefaultTypeInternal _STGraphDebug_default_instance_;
PROTOBUF_CONSTEXPR SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.light_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.light_stop_s_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.is_stop_wall_created_)*/false
  , /*decltype(_impl_.adc_stop_deacceleration_)*/0} {}
struct SignalLightDebug_SignalDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalLightDebug_SignalDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalLightDebug_SignalDebugDefaultTypeInternal() {}
  union {
    SignalLightDebug_SignalDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalLightDebug_SignalDebugDefaultTypeInternal _SignalLightDebug_SignalDebug_default_instance_;
PROTOBUF_CONSTEXPR SignalLightDebug::SignalLightDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signal_)*/{}
  , /*decltype(_impl_.adc_speed_)*/0
  , /*decltype(_impl_.adc_front_s_)*/0} {}
struct SignalLightDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalLightDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalLightDebugDefaultTypeInternal() {}
  union {
    SignalLightDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalLightDebugDefaultTypeInternal _SignalLightDebug_default_instance_;
PROTOBUF_CONSTEXPR DecisionTag::DecisionTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.decider_tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decision_)*/nullptr} {}
struct DecisionTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecisionTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecisionTagDefaultTypeInternal() {}
  union {
    DecisionTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecisionTagDefaultTypeInternal _DecisionTag_default_instance_;
PROTOBUF_CONSTEXPR ObstacleDebug::ObstacleDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.decision_tag_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sl_boundary_)*/nullptr} {}
struct ObstacleDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDebugDefaultTypeInternal() {}
  union {
    ObstacleDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDebugDefaultTypeInternal _ObstacleDebug_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineDebug::ReferenceLineDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_.is_change_lane_path_)*/false
  , /*decltype(_impl_.is_drivable_)*/false
  , /*decltype(_impl_.is_protected_)*/false} {}
struct ReferenceLineDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineDebugDefaultTypeInternal() {}
  union {
    ReferenceLineDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineDebugDefaultTypeInternal _ReferenceLineDebug_default_instance_;
PROTOBUF_CONSTEXPR SampleLayerDebug::SampleLayerDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sl_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SampleLayerDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SampleLayerDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SampleLayerDebugDefaultTypeInternal() {}
  union {
    SampleLayerDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SampleLayerDebugDefaultTypeInternal _SampleLayerDebug_default_instance_;
PROTOBUF_CONSTEXPR DpPolyGraphDebug::DpPolyGraphDebug(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_layer_)*/{}
  , /*decltype(_impl_.min_cost_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DpPolyGraphDebugDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DpPolyGraphDebugDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DpPolyGraphDebugDefaultTypeInternal() {}
  union {
    DpPolyGraphDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DpPolyGraphDebugDefaultTypeInternal _DpPolyGraphDebug_default_instance_;
PROTOBUF_CONSTEXPR PlanningData::PlanningData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/{}
  , /*decltype(_impl_.speed_plan_)*/{}
  , /*decltype(_impl_.st_graph_)*/{}
  , /*decltype(_impl_.sl_frame_)*/{}
  , /*decltype(_impl_.obstacle_)*/{}
  , /*decltype(_impl_.reference_line_)*/{}
  , /*decltype(_impl_.adc_position_)*/nullptr
  , /*decltype(_impl_.chassis_)*/nullptr
  , /*decltype(_impl_.routing_)*/nullptr
  , /*decltype(_impl_.init_point_)*/nullptr
  , /*decltype(_impl_.prediction_header_)*/nullptr
  , /*decltype(_impl_.signal_light_)*/nullptr
  , /*decltype(_impl_.dp_poly_graph_)*/nullptr
  , /*decltype(_impl_.lattice_st_image_)*/nullptr
  , /*decltype(_impl_.relative_map_)*/nullptr
  , /*decltype(_impl_.auto_tuning_training_data_)*/nullptr} {}
struct PlanningDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningDataDefaultTypeInternal() {}
  union {
    PlanningData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningDataDefaultTypeInternal _PlanningData_default_instance_;
PROTOBUF_CONSTEXPR LatticeStPixel::LatticeStPixel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.r_)*/0u
  , /*decltype(_impl_.g_)*/0u
  , /*decltype(_impl_.b_)*/0u} {}
struct LatticeStPixelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatticeStPixelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatticeStPixelDefaultTypeInternal() {}
  union {
    LatticeStPixel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatticeStPixelDefaultTypeInternal _LatticeStPixel_default_instance_;
PROTOBUF_CONSTEXPR LatticeStTraining::LatticeStTraining(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pixel_)*/{}
  , /*decltype(_impl_.annotation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.num_s_grids_)*/0u
  , /*decltype(_impl_.num_t_grids_)*/0u
  , /*decltype(_impl_.s_resolution_)*/0
  , /*decltype(_impl_.t_resolution_)*/0} {}
struct LatticeStTrainingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatticeStTrainingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatticeStTrainingDefaultTypeInternal() {}
  union {
    LatticeStTraining _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatticeStTrainingDefaultTypeInternal _LatticeStTraining_default_instance_;
PROTOBUF_CONSTEXPR CostComponents::CostComponents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cost_component_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostComponentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostComponentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostComponentsDefaultTypeInternal() {}
  union {
    CostComponents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostComponentsDefaultTypeInternal _CostComponents_default_instance_;
PROTOBUF_CONSTEXPR AutoTuningTrainingData::AutoTuningTrainingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teacher_component_)*/nullptr
  , /*decltype(_impl_.student_component_)*/nullptr} {}
struct AutoTuningTrainingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutoTuningTrainingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutoTuningTrainingDataDefaultTypeInternal() {}
  union {
    AutoTuningTrainingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutoTuningTrainingDataDefaultTypeInternal _AutoTuningTrainingData_default_instance_;
PROTOBUF_CONSTEXPR CloudReferenceLineRequest::CloudReferenceLineRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_segment_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloudReferenceLineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudReferenceLineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudReferenceLineRequestDefaultTypeInternal() {}
  union {
    CloudReferenceLineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudReferenceLineRequestDefaultTypeInternal _CloudReferenceLineRequest_default_instance_;
PROTOBUF_CONSTEXPR CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_)*/nullptr} {}
struct CloudReferenceLineRoutingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudReferenceLineRoutingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudReferenceLineRoutingRequestDefaultTypeInternal() {}
  union {
    CloudReferenceLineRoutingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudReferenceLineRoutingRequestDefaultTypeInternal _CloudReferenceLineRoutingRequest_default_instance_;
PROTOBUF_CONSTEXPR CloudReferenceLineResponse::CloudReferenceLineResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.segment_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloudReferenceLineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudReferenceLineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudReferenceLineResponseDefaultTypeInternal() {}
  union {
    CloudReferenceLineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudReferenceLineResponseDefaultTypeInternal _CloudReferenceLineResponse_default_instance_;
}  // namespace planning_internal
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[23];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::Debug, _impl_.planning_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SpeedPlan, _impl_.speed_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::StGraphBoundaryDebug, _impl_.type_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.sampled_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.static_obstacle_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.dynamic_obstacle_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.static_obstacle_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.dynamic_obstacle_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.map_lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.map_upper_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.sl_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.aggregated_boundary_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.aggregated_boundary_low_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SLFrameDebug, _impl_.aggregated_boundary_high_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _impl_.lower_bound_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint, _impl_.upper_bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef, _impl_.cruise_line_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef, _impl_.follow_line_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.speed_profile_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.speed_constraint_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.kernel_cruise_ref_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::STGraphDebug, _impl_.kernel_follow_ref_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_.light_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_.light_stop_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_.adc_stop_deacceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug_SignalDebug, _impl_.is_stop_wall_created_),
  0,
  2,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _impl_.adc_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _impl_.adc_front_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SignalLightDebug, _impl_.signal_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _impl_.decider_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DecisionTag, _impl_.decision_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _impl_.sl_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ObstacleDebug, _impl_.decision_tag_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.is_change_lane_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.is_drivable_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::ReferenceLineDebug, _impl_.is_protected_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SampleLayerDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::SampleLayerDebug, _impl_.sl_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, _impl_.sample_layer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::DpPolyGraphDebug, _impl_.min_cost_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.adc_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.routing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.init_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.speed_plan_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.st_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.sl_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.prediction_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.signal_light_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.reference_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.dp_poly_graph_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.lattice_st_image_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.relative_map_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::PlanningData, _impl_.auto_tuning_training_data_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  ~0u,
  ~0u,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStPixel, _impl_.b_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.pixel_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.annotation_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.num_s_grids_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.num_t_grids_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.s_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::LatticeStTraining, _impl_.t_resolution_),
  ~0u,
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CostComponents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CostComponents, _impl_.cost_component_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _impl_.teacher_component_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::AutoTuningTrainingData, _impl_.student_component_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRequest, _impl_.lane_segment_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineRoutingRequest, _impl_.routing_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning_internal::CloudReferenceLineResponse, _impl_.segment_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::planning_internal::Debug)},
  { 8, 16, -1, sizeof(::apollo::planning_internal::SpeedPlan)},
  { 18, 27, -1, sizeof(::apollo::planning_internal::StGraphBoundaryDebug)},
  { 30, 48, -1, sizeof(::apollo::planning_internal::SLFrameDebug)},
  { 60, -1, -1, sizeof(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint)},
  { 69, -1, -1, sizeof(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef)},
  { 77, -1, -1, sizeof(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef)},
  { 85, 98, -1, sizeof(::apollo::planning_internal::STGraphDebug)},
  { 105, 116, -1, sizeof(::apollo::planning_internal::SignalLightDebug_SignalDebug)},
  { 121, 130, -1, sizeof(::apollo::planning_internal::SignalLightDebug)},
  { 133, 141, -1, sizeof(::apollo::planning_internal::DecisionTag)},
  { 143, 152, -1, sizeof(::apollo::planning_internal::ObstacleDebug)},
  { 155, 167, -1, sizeof(::apollo::planning_internal::ReferenceLineDebug)},
  { 173, -1, -1, sizeof(::apollo::planning_internal::SampleLayerDebug)},
  { 180, -1, -1, sizeof(::apollo::planning_internal::DpPolyGraphDebug)},
  { 188, 210, -1, sizeof(::apollo::planning_internal::PlanningData)},
  { 226, 237, -1, sizeof(::apollo::planning_internal::LatticeStPixel)},
  { 242, 255, -1, sizeof(::apollo::planning_internal::LatticeStTraining)},
  { 262, -1, -1, sizeof(::apollo::planning_internal::CostComponents)},
  { 269, 277, -1, sizeof(::apollo::planning_internal::AutoTuningTrainingData)},
  { 279, -1, -1, sizeof(::apollo::planning_internal::CloudReferenceLineRequest)},
  { 286, 293, -1, sizeof(::apollo::planning_internal::CloudReferenceLineRoutingRequest)},
  { 294, -1, -1, sizeof(::apollo::planning_internal::CloudReferenceLineResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning_internal::_Debug_default_instance_._instance,
  &::apollo::planning_internal::_SpeedPlan_default_instance_._instance,
  &::apollo::planning_internal::_StGraphBoundaryDebug_default_instance_._instance,
  &::apollo::planning_internal::_SLFrameDebug_default_instance_._instance,
  &::apollo::planning_internal::_STGraphDebug_STGraphSpeedConstraint_default_instance_._instance,
  &::apollo::planning_internal::_STGraphDebug_STGraphKernelCuiseRef_default_instance_._instance,
  &::apollo::planning_internal::_STGraphDebug_STGraphKernelFollowRef_default_instance_._instance,
  &::apollo::planning_internal::_STGraphDebug_default_instance_._instance,
  &::apollo::planning_internal::_SignalLightDebug_SignalDebug_default_instance_._instance,
  &::apollo::planning_internal::_SignalLightDebug_default_instance_._instance,
  &::apollo::planning_internal::_DecisionTag_default_instance_._instance,
  &::apollo::planning_internal::_ObstacleDebug_default_instance_._instance,
  &::apollo::planning_internal::_ReferenceLineDebug_default_instance_._instance,
  &::apollo::planning_internal::_SampleLayerDebug_default_instance_._instance,
  &::apollo::planning_internal::_DpPolyGraphDebug_default_instance_._instance,
  &::apollo::planning_internal::_PlanningData_default_instance_._instance,
  &::apollo::planning_internal::_LatticeStPixel_default_instance_._instance,
  &::apollo::planning_internal::_LatticeStTraining_default_instance_._instance,
  &::apollo::planning_internal::_CostComponents_default_instance_._instance,
  &::apollo::planning_internal::_AutoTuningTrainingData_default_instance_._instance,
  &::apollo::planning_internal::_CloudReferenceLineRequest_default_instance_._instance,
  &::apollo::planning_internal::_CloudReferenceLineRoutingRequest_default_instance_._instance,
  &::apollo::planning_internal::_CloudReferenceLineResponse_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/planning/proto/planning_intern"
  "al.proto\022\030apollo.planning_internal\032!modu"
  "les/common/proto/header.proto\032\"modules/c"
  "anbus/proto/chassis.proto\032$modules/commo"
  "n/proto/pnc_point.proto\032-modules/localiz"
  "ation/proto/localization.proto\032/modules/"
  "map/relative_map/proto/navigation.proto\032"
  "#modules/routing/proto/routing.proto\0326mo"
  "dules/perception/proto/traffic_light_det"
  "ection.proto\032(modules/planning/proto/sl_"
  "boundary.proto\032%modules/planning/proto/d"
  "ecision.proto\"F\n\005Debug\022=\n\rplanning_data\030"
  "\002 \001(\0132&.apollo.planning_internal.Plannin"
  "gData\"I\n\tSpeedPlan\022\014\n\004name\030\001 \001(\t\022.\n\013spee"
  "d_point\030\002 \003(\0132\031.apollo.common.SpeedPoint"
  "\"\340\002\n\024StGraphBoundaryDebug\022\014\n\004name\030\001 \001(\t\022"
  "(\n\005point\030\002 \003(\0132\031.apollo.common.SpeedPoin"
  "t\022K\n\004type\030\003 \001(\0162=.apollo.planning_intern"
  "al.StGraphBoundaryDebug.StBoundaryType\"\302"
  "\001\n\016StBoundaryType\022\034\n\030ST_BOUNDARY_TYPE_UN"
  "KNOWN\020\001\022\031\n\025ST_BOUNDARY_TYPE_STOP\020\002\022\033\n\027ST"
  "_BOUNDARY_TYPE_FOLLOW\020\003\022\032\n\026ST_BOUNDARY_T"
  "YPE_YIELD\020\004\022\035\n\031ST_BOUNDARY_TYPE_OVERTAKE"
  "\020\005\022\037\n\033ST_BOUNDARY_TYPE_KEEP_CLEAR\020\006\"\202\003\n\014"
  "SLFrameDebug\022\014\n\004name\030\001 \001(\t\022\021\n\tsampled_s\030"
  "\002 \003(\001\022#\n\033static_obstacle_lower_bound\030\003 \003"
  "(\001\022$\n\034dynamic_obstacle_lower_bound\030\004 \003(\001"
  "\022#\n\033static_obstacle_upper_bound\030\005 \003(\001\022$\n"
  "\034dynamic_obstacle_upper_bound\030\006 \003(\001\022\027\n\017m"
  "ap_lower_bound\030\007 \003(\001\022\027\n\017map_upper_bound\030"
  "\010 \003(\001\022\'\n\007sl_path\030\t \003(\0132\026.apollo.common.S"
  "LPoint\022\035\n\025aggregated_boundary_s\030\n \003(\001\022\037\n"
  "\027aggregated_boundary_low\030\013 \003(\001\022 \n\030aggreg"
  "ated_boundary_high\030\014 \003(\001\"\222\005\n\014STGraphDebu"
  "g\022\014\n\004name\030\001 \001(\t\022@\n\010boundary\030\002 \003(\0132..apol"
  "lo.planning_internal.StGraphBoundaryDebu"
  "g\022.\n\013speed_limit\030\003 \003(\0132\031.apollo.common.S"
  "peedPoint\0220\n\rspeed_profile\030\004 \003(\0132\031.apoll"
  "o.common.SpeedPoint\022W\n\020speed_constraint\030"
  "\005 \001(\0132=.apollo.planning_internal.STGraph"
  "Debug.STGraphSpeedConstraint\022W\n\021kernel_c"
  "ruise_ref\030\006 \001(\0132<.apollo.planning_intern"
  "al.STGraphDebug.STGraphKernelCuiseRef\022X\n"
  "\021kernel_follow_ref\030\007 \001(\0132=.apollo.planni"
  "ng_internal.STGraphDebug.STGraphKernelFo"
  "llowRef\032M\n\026STGraphSpeedConstraint\022\t\n\001t\030\001"
  " \003(\001\022\023\n\013lower_bound\030\002 \003(\001\022\023\n\013upper_bound"
  "\030\003 \003(\001\0329\n\025STGraphKernelCuiseRef\022\t\n\001t\030\001 \003"
  "(\001\022\025\n\rcruise_line_s\030\002 \003(\001\032:\n\026STGraphKern"
  "elFollowRef\022\t\n\001t\030\001 \003(\001\022\025\n\rfollow_line_s\030"
  "\002 \003(\001\"\257\002\n\020SignalLightDebug\022\021\n\tadc_speed\030"
  "\001 \001(\001\022\023\n\013adc_front_s\030\002 \001(\001\022F\n\006signal\030\003 \003"
  "(\01326.apollo.planning_internal.SignalLigh"
  "tDebug.SignalDebug\032\252\001\n\013SignalDebug\022\020\n\010li"
  "ght_id\030\001 \001(\t\0224\n\005color\030\002 \001(\0162%.apollo.per"
  "ception.TrafficLight.Color\022\024\n\014light_stop"
  "_s\030\003 \001(\001\022\037\n\027adc_stop_deacceleration\030\004 \001("
  "\001\022\034\n\024is_stop_wall_created\030\005 \001(\010\"Y\n\013Decis"
  "ionTag\022\023\n\013decider_tag\030\001 \001(\t\0225\n\010decision\030"
  "\002 \001(\0132#.apollo.planning.ObjectDecisionTy"
  "pe\"\212\001\n\rObstacleDebug\022\n\n\002id\030\001 \001(\t\0220\n\013sl_b"
  "oundary\030\002 \001(\0132\033.apollo.planning.SLBounda"
  "ry\022;\n\014decision_tag\030\003 \003(\0132%.apollo.planni"
  "ng_internal.DecisionTag\"\206\001\n\022ReferenceLin"
  "eDebug\022\n\n\002id\030\001 \001(\t\022\016\n\006length\030\002 \001(\001\022\014\n\004co"
  "st\030\003 \001(\001\022\033\n\023is_change_lane_path\030\004 \001(\010\022\023\n"
  "\013is_drivable\030\005 \001(\010\022\024\n\014is_protected\030\006 \001(\010"
  "\"<\n\020SampleLayerDebug\022(\n\010sl_point\030\001 \003(\0132\026"
  ".apollo.common.SLPoint\"\204\001\n\020DpPolyGraphDe"
  "bug\022@\n\014sample_layer\030\001 \003(\0132*.apollo.plann"
  "ing_internal.SampleLayerDebug\022.\n\016min_cos"
  "t_point\030\002 \003(\0132\026.apollo.common.SLPoint\"\265\007"
  "\n\014PlanningData\022\?\n\014adc_position\030\007 \001(\0132).a"
  "pollo.localization.LocalizationEstimate\022"
  "\'\n\007chassis\030\010 \001(\0132\026.apollo.canbus.Chassis"
  "\0220\n\007routing\030\t \001(\0132\037.apollo.routing.Routi"
  "ngResponse\0222\n\ninit_point\030\n \001(\0132\036.apollo."
  "common.TrajectoryPoint\022!\n\004path\030\006 \003(\0132\023.a"
  "pollo.common.Path\0227\n\nspeed_plan\030\r \003(\0132#."
  "apollo.planning_internal.SpeedPlan\0228\n\010st"
  "_graph\030\016 \003(\0132&.apollo.planning_internal."
  "STGraphDebug\0228\n\010sl_frame\030\017 \003(\0132&.apollo."
  "planning_internal.SLFrameDebug\0220\n\021predic"
  "tion_header\030\020 \001(\0132\025.apollo.common.Header"
  "\022@\n\014signal_light\030\021 \001(\0132*.apollo.planning"
  "_internal.SignalLightDebug\0229\n\010obstacle\030\022"
  " \003(\0132\'.apollo.planning_internal.Obstacle"
  "Debug\022D\n\016reference_line\030\023 \003(\0132,.apollo.p"
  "lanning_internal.ReferenceLineDebug\022A\n\rd"
  "p_poly_graph\030\024 \001(\0132*.apollo.planning_int"
  "ernal.DpPolyGraphDebug\022E\n\020lattice_st_ima"
  "ge\030\025 \001(\0132+.apollo.planning_internal.Latt"
  "iceStTraining\0221\n\014relative_map\030\026 \001(\0132\033.ap"
  "ollo.relative_map.MapMsg\022S\n\031auto_tuning_"
  "training_data\030\027 \001(\01320.apollo.planning_in"
  "ternal.AutoTuningTrainingData\"G\n\016Lattice"
  "StPixel\022\t\n\001s\030\001 \001(\005\022\t\n\001t\030\002 \001(\005\022\t\n\001r\030\003 \001(\r"
  "\022\t\n\001g\030\004 \001(\r\022\t\n\001b\030\005 \001(\r\"\311\001\n\021LatticeStTrai"
  "ning\0227\n\005pixel\030\001 \003(\0132(.apollo.planning_in"
  "ternal.LatticeStPixel\022\021\n\ttimestamp\030\002 \001(\001"
  "\022\022\n\nannotation\030\003 \001(\t\022\023\n\013num_s_grids\030\004 \001("
  "\r\022\023\n\013num_t_grids\030\005 \001(\r\022\024\n\014s_resolution\030\006"
  " \001(\001\022\024\n\014t_resolution\030\007 \001(\001\"(\n\016CostCompon"
  "ents\022\026\n\016cost_component\030\001 \003(\001\"\242\001\n\026AutoTun"
  "ingTrainingData\022C\n\021teacher_component\030\001 \001"
  "(\0132(.apollo.planning_internal.CostCompon"
  "ents\022C\n\021student_component\030\002 \001(\0132(.apollo"
  ".planning_internal.CostComponents\"N\n\031Clo"
  "udReferenceLineRequest\0221\n\014lane_segment\030\001"
  " \003(\0132\033.apollo.routing.LaneSegment\"T\n Clo"
  "udReferenceLineRoutingRequest\0220\n\007routing"
  "\030\001 \001(\0132\037.apollo.routing.RoutingResponse\""
  "B\n\032CloudReferenceLineResponse\022$\n\007segment"
  "\030\001 \003(\0132\023.apollo.common.Path"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_deps[9] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto,
  &::descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fsl_5fboundary_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto = {
    false, false, 4547, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
    "modules/planning/proto/planning_internal.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_deps, 9, 23,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto);
namespace apollo {
namespace planning_internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[0];
}
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_UNKNOWN;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_STOP;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_FOLLOW;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_YIELD;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_OVERTAKE;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::ST_BOUNDARY_TYPE_KEEP_CLEAR;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MIN;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::StBoundaryType_MAX;
constexpr int StGraphBoundaryDebug::StBoundaryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<Debug>()._impl_._has_bits_);
  static const ::apollo::planning_internal::PlanningData& planning_data(const Debug* msg);
  static void set_has_planning_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning_internal::PlanningData&
Debug::_Internal::planning_data(const Debug* msg) {
  return *msg->_impl_.planning_data_;
}
Debug::Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning_data()) {
    _impl_.planning_data_ = new ::apollo::planning_internal::PlanningData(*from._impl_.planning_data_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.Debug)
}

inline void Debug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_data_){nullptr}
  };
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.Debug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.planning_data_;
}

void Debug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.Debug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.planning_data_ != nullptr);
    _impl_.planning_data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Debug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning_internal.PlanningData planning_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Debug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.Debug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::planning_data(this),
        _Internal::planning_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.Debug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.planning_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Debug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Debug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Debug::GetClassData() const { return &_class_data_; }

void Debug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Debug *>(to)->MergeFrom(
      static_cast<const Debug &>(from));
}


void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_planning_data()) {
    _internal_mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from._internal_planning_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.planning_data_, other->_impl_.planning_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[0]);
}

// ===================================================================

class SpeedPlan::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPlan>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SpeedPlan::clear_speed_point() {
  _impl_.speed_point_.Clear();
}
SpeedPlan::SpeedPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.SpeedPlan)
}
SpeedPlan::SpeedPlan(const SpeedPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_point_){from._impl_.speed_point_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SpeedPlan)
}

inline void SpeedPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.speed_point_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpeedPlan::~SpeedPlan() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SpeedPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speed_point_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void SpeedPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SpeedPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speed_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.SpeedPlan.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SpeedPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SpeedPlan.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SpeedPlan)
  return target;
}

size_t SpeedPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SpeedPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SpeedPoint speed_point = 2;
  total_size += 1UL * this->_internal_speed_point_size();
  for (const auto& msg : this->_impl_.speed_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPlan::GetClassData() const { return &_class_data_; }

void SpeedPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPlan *>(to)->MergeFrom(
      static_cast<const SpeedPlan &>(from));
}


void SpeedPlan::MergeFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SpeedPlan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.speed_point_.MergeFrom(from._impl_.speed_point_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPlan::CopyFrom(const SpeedPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SpeedPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPlan::IsInitialized() const {
  return true;
}

void SpeedPlan::InternalSwap(SpeedPlan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.speed_point_.InternalSwap(&other->_impl_.speed_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[1]);
}

// ===================================================================

class StGraphBoundaryDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<StGraphBoundaryDebug>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void StGraphBoundaryDebug::clear_point() {
  _impl_.point_.Clear();
}
StGraphBoundaryDebug::StGraphBoundaryDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.StGraphBoundaryDebug)
}
StGraphBoundaryDebug::StGraphBoundaryDebug(const StGraphBoundaryDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){from._impl_.point_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.StGraphBoundaryDebug)
}

inline void StGraphBoundaryDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.type_){1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StGraphBoundaryDebug::~StGraphBoundaryDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.StGraphBoundaryDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StGraphBoundaryDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void StGraphBoundaryDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StGraphBoundaryDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.StGraphBoundaryDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StGraphBoundaryDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.StGraphBoundaryDebug.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StGraphBoundaryDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.StGraphBoundaryDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.StGraphBoundaryDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.common.SpeedPoint point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.StGraphBoundaryDebug)
  return target;
}

size_t StGraphBoundaryDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.StGraphBoundaryDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SpeedPoint point = 2;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StGraphBoundaryDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StGraphBoundaryDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StGraphBoundaryDebug::GetClassData() const { return &_class_data_; }

void StGraphBoundaryDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StGraphBoundaryDebug *>(to)->MergeFrom(
      static_cast<const StGraphBoundaryDebug &>(from));
}


void StGraphBoundaryDebug::MergeFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_.MergeFrom(from._impl_.point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StGraphBoundaryDebug::CopyFrom(const StGraphBoundaryDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.StGraphBoundaryDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StGraphBoundaryDebug::IsInitialized() const {
  return true;
}

void StGraphBoundaryDebug::InternalSwap(StGraphBoundaryDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StGraphBoundaryDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[2]);
}

// ===================================================================

class SLFrameDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SLFrameDebug>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void SLFrameDebug::clear_sl_path() {
  _impl_.sl_path_.Clear();
}
SLFrameDebug::SLFrameDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.SLFrameDebug)
}
SLFrameDebug::SLFrameDebug(const SLFrameDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sampled_s_){from._impl_.sampled_s_}
    , decltype(_impl_.static_obstacle_lower_bound_){from._impl_.static_obstacle_lower_bound_}
    , decltype(_impl_.dynamic_obstacle_lower_bound_){from._impl_.dynamic_obstacle_lower_bound_}
    , decltype(_impl_.static_obstacle_upper_bound_){from._impl_.static_obstacle_upper_bound_}
    , decltype(_impl_.dynamic_obstacle_upper_bound_){from._impl_.dynamic_obstacle_upper_bound_}
    , decltype(_impl_.map_lower_bound_){from._impl_.map_lower_bound_}
    , decltype(_impl_.map_upper_bound_){from._impl_.map_upper_bound_}
    , decltype(_impl_.sl_path_){from._impl_.sl_path_}
    , decltype(_impl_.aggregated_boundary_s_){from._impl_.aggregated_boundary_s_}
    , decltype(_impl_.aggregated_boundary_low_){from._impl_.aggregated_boundary_low_}
    , decltype(_impl_.aggregated_boundary_high_){from._impl_.aggregated_boundary_high_}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SLFrameDebug)
}

inline void SLFrameDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sampled_s_){arena}
    , decltype(_impl_.static_obstacle_lower_bound_){arena}
    , decltype(_impl_.dynamic_obstacle_lower_bound_){arena}
    , decltype(_impl_.static_obstacle_upper_bound_){arena}
    , decltype(_impl_.dynamic_obstacle_upper_bound_){arena}
    , decltype(_impl_.map_lower_bound_){arena}
    , decltype(_impl_.map_upper_bound_){arena}
    , decltype(_impl_.sl_path_){arena}
    , decltype(_impl_.aggregated_boundary_s_){arena}
    , decltype(_impl_.aggregated_boundary_low_){arena}
    , decltype(_impl_.aggregated_boundary_high_){arena}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SLFrameDebug::~SLFrameDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SLFrameDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SLFrameDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sampled_s_.~RepeatedField();
  _impl_.static_obstacle_lower_bound_.~RepeatedField();
  _impl_.dynamic_obstacle_lower_bound_.~RepeatedField();
  _impl_.static_obstacle_upper_bound_.~RepeatedField();
  _impl_.dynamic_obstacle_upper_bound_.~RepeatedField();
  _impl_.map_lower_bound_.~RepeatedField();
  _impl_.map_upper_bound_.~RepeatedField();
  _impl_.sl_path_.~RepeatedPtrField();
  _impl_.aggregated_boundary_s_.~RepeatedField();
  _impl_.aggregated_boundary_low_.~RepeatedField();
  _impl_.aggregated_boundary_high_.~RepeatedField();
  _impl_.name_.Destroy();
}

void SLFrameDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SLFrameDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SLFrameDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sampled_s_.Clear();
  _impl_.static_obstacle_lower_bound_.Clear();
  _impl_.dynamic_obstacle_lower_bound_.Clear();
  _impl_.static_obstacle_upper_bound_.Clear();
  _impl_.dynamic_obstacle_upper_bound_.Clear();
  _impl_.map_lower_bound_.Clear();
  _impl_.map_upper_bound_.Clear();
  _impl_.sl_path_.Clear();
  _impl_.aggregated_boundary_s_.Clear();
  _impl_.aggregated_boundary_low_.Clear();
  _impl_.aggregated_boundary_high_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLFrameDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.SLFrameDebug.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated double sampled_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sampled_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_sampled_s(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double static_obstacle_lower_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_static_obstacle_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_static_obstacle_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double dynamic_obstacle_lower_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dynamic_obstacle_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dynamic_obstacle_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double static_obstacle_upper_bound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_static_obstacle_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_static_obstacle_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double dynamic_obstacle_upper_bound = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dynamic_obstacle_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<49>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dynamic_obstacle_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double map_lower_bound = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_map_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<57>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_map_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double map_upper_bound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_map_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<65>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_map_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SLPoint sl_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_s = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_s(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_low = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<89>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_low(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double aggregated_boundary_high = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_aggregated_boundary_high(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_aggregated_boundary_high(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLFrameDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SLFrameDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SLFrameDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated double sampled_s = 2;
  for (int i = 0, n = this->_internal_sampled_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_sampled_s(i), target);
  }

  // repeated double static_obstacle_lower_bound = 3;
  for (int i = 0, n = this->_internal_static_obstacle_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_static_obstacle_lower_bound(i), target);
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  for (int i = 0, n = this->_internal_dynamic_obstacle_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_dynamic_obstacle_lower_bound(i), target);
  }

  // repeated double static_obstacle_upper_bound = 5;
  for (int i = 0, n = this->_internal_static_obstacle_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_static_obstacle_upper_bound(i), target);
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  for (int i = 0, n = this->_internal_dynamic_obstacle_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_dynamic_obstacle_upper_bound(i), target);
  }

  // repeated double map_lower_bound = 7;
  for (int i = 0, n = this->_internal_map_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_map_lower_bound(i), target);
  }

  // repeated double map_upper_bound = 8;
  for (int i = 0, n = this->_internal_map_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_map_upper_bound(i), target);
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sl_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_sl_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double aggregated_boundary_s = 10;
  for (int i = 0, n = this->_internal_aggregated_boundary_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_aggregated_boundary_s(i), target);
  }

  // repeated double aggregated_boundary_low = 11;
  for (int i = 0, n = this->_internal_aggregated_boundary_low_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_aggregated_boundary_low(i), target);
  }

  // repeated double aggregated_boundary_high = 12;
  for (int i = 0, n = this->_internal_aggregated_boundary_high_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_aggregated_boundary_high(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SLFrameDebug)
  return target;
}

size_t SLFrameDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SLFrameDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double sampled_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sampled_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sampled_s_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_lower_bound = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_static_obstacle_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_static_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_lower_bound = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dynamic_obstacle_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dynamic_obstacle_lower_bound_size());
    total_size += data_size;
  }

  // repeated double static_obstacle_upper_bound = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_static_obstacle_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_static_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double dynamic_obstacle_upper_bound = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dynamic_obstacle_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dynamic_obstacle_upper_bound_size());
    total_size += data_size;
  }

  // repeated double map_lower_bound = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_map_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_map_lower_bound_size());
    total_size += data_size;
  }

  // repeated double map_upper_bound = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_map_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_map_upper_bound_size());
    total_size += data_size;
  }

  // repeated .apollo.common.SLPoint sl_path = 9;
  total_size += 1UL * this->_internal_sl_path_size();
  for (const auto& msg : this->_impl_.sl_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double aggregated_boundary_s = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_aggregated_boundary_s_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_low = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_low_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_aggregated_boundary_low_size());
    total_size += data_size;
  }

  // repeated double aggregated_boundary_high = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_aggregated_boundary_high_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_aggregated_boundary_high_size());
    total_size += data_size;
  }

  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLFrameDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLFrameDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLFrameDebug::GetClassData() const { return &_class_data_; }

void SLFrameDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLFrameDebug *>(to)->MergeFrom(
      static_cast<const SLFrameDebug &>(from));
}


void SLFrameDebug::MergeFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SLFrameDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sampled_s_.MergeFrom(from._impl_.sampled_s_);
  _impl_.static_obstacle_lower_bound_.MergeFrom(from._impl_.static_obstacle_lower_bound_);
  _impl_.dynamic_obstacle_lower_bound_.MergeFrom(from._impl_.dynamic_obstacle_lower_bound_);
  _impl_.static_obstacle_upper_bound_.MergeFrom(from._impl_.static_obstacle_upper_bound_);
  _impl_.dynamic_obstacle_upper_bound_.MergeFrom(from._impl_.dynamic_obstacle_upper_bound_);
  _impl_.map_lower_bound_.MergeFrom(from._impl_.map_lower_bound_);
  _impl_.map_upper_bound_.MergeFrom(from._impl_.map_upper_bound_);
  _impl_.sl_path_.MergeFrom(from._impl_.sl_path_);
  _impl_.aggregated_boundary_s_.MergeFrom(from._impl_.aggregated_boundary_s_);
  _impl_.aggregated_boundary_low_.MergeFrom(from._impl_.aggregated_boundary_low_);
  _impl_.aggregated_boundary_high_.MergeFrom(from._impl_.aggregated_boundary_high_);
  if (from._internal_has_name()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLFrameDebug::CopyFrom(const SLFrameDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SLFrameDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLFrameDebug::IsInitialized() const {
  return true;
}

void SLFrameDebug::InternalSwap(SLFrameDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sampled_s_.InternalSwap(&other->_impl_.sampled_s_);
  _impl_.static_obstacle_lower_bound_.InternalSwap(&other->_impl_.static_obstacle_lower_bound_);
  _impl_.dynamic_obstacle_lower_bound_.InternalSwap(&other->_impl_.dynamic_obstacle_lower_bound_);
  _impl_.static_obstacle_upper_bound_.InternalSwap(&other->_impl_.static_obstacle_upper_bound_);
  _impl_.dynamic_obstacle_upper_bound_.InternalSwap(&other->_impl_.dynamic_obstacle_upper_bound_);
  _impl_.map_lower_bound_.InternalSwap(&other->_impl_.map_lower_bound_);
  _impl_.map_upper_bound_.InternalSwap(&other->_impl_.map_upper_bound_);
  _impl_.sl_path_.InternalSwap(&other->_impl_.sl_path_);
  _impl_.aggregated_boundary_s_.InternalSwap(&other->_impl_.aggregated_boundary_s_);
  _impl_.aggregated_boundary_low_.InternalSwap(&other->_impl_.aggregated_boundary_low_);
  _impl_.aggregated_boundary_high_.InternalSwap(&other->_impl_.aggregated_boundary_high_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SLFrameDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[3]);
}

// ===================================================================

class STGraphDebug_STGraphSpeedConstraint::_Internal {
 public:
};

STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}
STGraphDebug_STGraphSpeedConstraint::STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.t_){from._impl_.t_}
    , decltype(_impl_.lower_bound_){from._impl_.lower_bound_}
    , decltype(_impl_.upper_bound_){from._impl_.upper_bound_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
}

inline void STGraphDebug_STGraphSpeedConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.t_){arena}
    , decltype(_impl_.lower_bound_){arena}
    , decltype(_impl_.upper_bound_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

STGraphDebug_STGraphSpeedConstraint::~STGraphDebug_STGraphSpeedConstraint() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STGraphDebug_STGraphSpeedConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_.~RepeatedField();
  _impl_.lower_bound_.~RepeatedField();
  _impl_.upper_bound_.~RepeatedField();
}

void STGraphDebug_STGraphSpeedConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STGraphDebug_STGraphSpeedConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.t_.Clear();
  _impl_.lower_bound_.Clear();
  _impl_.upper_bound_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STGraphDebug_STGraphSpeedConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double lower_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lower_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_lower_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double upper_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_upper_bound(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_upper_bound(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STGraphDebug_STGraphSpeedConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double lower_bound = 2;
  for (int i = 0, n = this->_internal_lower_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lower_bound(i), target);
  }

  // repeated double upper_bound = 3;
  for (int i = 0, n = this->_internal_upper_bound_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_upper_bound(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  return target;
}

size_t STGraphDebug_STGraphSpeedConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double lower_bound = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lower_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_lower_bound_size());
    total_size += data_size;
  }

  // repeated double upper_bound = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_upper_bound_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_upper_bound_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STGraphDebug_STGraphSpeedConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STGraphDebug_STGraphSpeedConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STGraphDebug_STGraphSpeedConstraint::GetClassData() const { return &_class_data_; }

void STGraphDebug_STGraphSpeedConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STGraphDebug_STGraphSpeedConstraint *>(to)->MergeFrom(
      static_cast<const STGraphDebug_STGraphSpeedConstraint &>(from));
}


void STGraphDebug_STGraphSpeedConstraint::MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.t_.MergeFrom(from._impl_.t_);
  _impl_.lower_bound_.MergeFrom(from._impl_.lower_bound_);
  _impl_.upper_bound_.MergeFrom(from._impl_.upper_bound_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STGraphDebug_STGraphSpeedConstraint::CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphSpeedConstraint::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphSpeedConstraint::InternalSwap(STGraphDebug_STGraphSpeedConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.t_.InternalSwap(&other->_impl_.t_);
  _impl_.lower_bound_.InternalSwap(&other->_impl_.lower_bound_);
  _impl_.upper_bound_.InternalSwap(&other->_impl_.upper_bound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphSpeedConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[4]);
}

// ===================================================================

class STGraphDebug_STGraphKernelCuiseRef::_Internal {
 public:
};

STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}
STGraphDebug_STGraphKernelCuiseRef::STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.t_){from._impl_.t_}
    , decltype(_impl_.cruise_line_s_){from._impl_.cruise_line_s_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
}

inline void STGraphDebug_STGraphKernelCuiseRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.t_){arena}
    , decltype(_impl_.cruise_line_s_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

STGraphDebug_STGraphKernelCuiseRef::~STGraphDebug_STGraphKernelCuiseRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STGraphDebug_STGraphKernelCuiseRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_.~RepeatedField();
  _impl_.cruise_line_s_.~RepeatedField();
}

void STGraphDebug_STGraphKernelCuiseRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STGraphDebug_STGraphKernelCuiseRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.t_.Clear();
  _impl_.cruise_line_s_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STGraphDebug_STGraphKernelCuiseRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double cruise_line_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cruise_line_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cruise_line_s(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STGraphDebug_STGraphKernelCuiseRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double cruise_line_s = 2;
  for (int i = 0, n = this->_internal_cruise_line_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cruise_line_s(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  return target;
}

size_t STGraphDebug_STGraphKernelCuiseRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double cruise_line_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cruise_line_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cruise_line_s_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STGraphDebug_STGraphKernelCuiseRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STGraphDebug_STGraphKernelCuiseRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STGraphDebug_STGraphKernelCuiseRef::GetClassData() const { return &_class_data_; }

void STGraphDebug_STGraphKernelCuiseRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STGraphDebug_STGraphKernelCuiseRef *>(to)->MergeFrom(
      static_cast<const STGraphDebug_STGraphKernelCuiseRef &>(from));
}


void STGraphDebug_STGraphKernelCuiseRef::MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.t_.MergeFrom(from._impl_.t_);
  _impl_.cruise_line_s_.MergeFrom(from._impl_.cruise_line_s_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STGraphDebug_STGraphKernelCuiseRef::CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelCuiseRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelCuiseRef::InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.t_.InternalSwap(&other->_impl_.t_);
  _impl_.cruise_line_s_.InternalSwap(&other->_impl_.cruise_line_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphKernelCuiseRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[5]);
}

// ===================================================================

class STGraphDebug_STGraphKernelFollowRef::_Internal {
 public:
};

STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}
STGraphDebug_STGraphKernelFollowRef::STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.t_){from._impl_.t_}
    , decltype(_impl_.follow_line_s_){from._impl_.follow_line_s_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
}

inline void STGraphDebug_STGraphKernelFollowRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.t_){arena}
    , decltype(_impl_.follow_line_s_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

STGraphDebug_STGraphKernelFollowRef::~STGraphDebug_STGraphKernelFollowRef() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STGraphDebug_STGraphKernelFollowRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_.~RepeatedField();
  _impl_.follow_line_s_.~RepeatedField();
}

void STGraphDebug_STGraphKernelFollowRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STGraphDebug_STGraphKernelFollowRef::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.t_.Clear();
  _impl_.follow_line_s_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STGraphDebug_STGraphKernelFollowRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double follow_line_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_follow_line_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_follow_line_s(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STGraphDebug_STGraphKernelFollowRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t = 1;
  for (int i = 0, n = this->_internal_t_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(i), target);
  }

  // repeated double follow_line_s = 2;
  for (int i = 0, n = this->_internal_follow_line_s_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_follow_line_s(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  return target;
}

size_t STGraphDebug_STGraphKernelFollowRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_t_size());
    total_size += data_size;
  }

  // repeated double follow_line_s = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_follow_line_s_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_follow_line_s_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STGraphDebug_STGraphKernelFollowRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STGraphDebug_STGraphKernelFollowRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STGraphDebug_STGraphKernelFollowRef::GetClassData() const { return &_class_data_; }

void STGraphDebug_STGraphKernelFollowRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STGraphDebug_STGraphKernelFollowRef *>(to)->MergeFrom(
      static_cast<const STGraphDebug_STGraphKernelFollowRef &>(from));
}


void STGraphDebug_STGraphKernelFollowRef::MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.t_.MergeFrom(from._impl_.t_);
  _impl_.follow_line_s_.MergeFrom(from._impl_.follow_line_s_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STGraphDebug_STGraphKernelFollowRef::CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug_STGraphKernelFollowRef::IsInitialized() const {
  return true;
}

void STGraphDebug_STGraphKernelFollowRef::InternalSwap(STGraphDebug_STGraphKernelFollowRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.t_.InternalSwap(&other->_impl_.t_);
  _impl_.follow_line_s_.InternalSwap(&other->_impl_.follow_line_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug_STGraphKernelFollowRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[6]);
}

// ===================================================================

class STGraphDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<STGraphDebug>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& speed_constraint(const STGraphDebug* msg);
  static void set_has_speed_constraint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& kernel_cruise_ref(const STGraphDebug* msg);
  static void set_has_kernel_cruise_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& kernel_follow_ref(const STGraphDebug* msg);
  static void set_has_kernel_follow_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint&
STGraphDebug::_Internal::speed_constraint(const STGraphDebug* msg) {
  return *msg->_impl_.speed_constraint_;
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef&
STGraphDebug::_Internal::kernel_cruise_ref(const STGraphDebug* msg) {
  return *msg->_impl_.kernel_cruise_ref_;
}
const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef&
STGraphDebug::_Internal::kernel_follow_ref(const STGraphDebug* msg) {
  return *msg->_impl_.kernel_follow_ref_;
}
void STGraphDebug::clear_speed_limit() {
  _impl_.speed_limit_.Clear();
}
void STGraphDebug::clear_speed_profile() {
  _impl_.speed_profile_.Clear();
}
STGraphDebug::STGraphDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.STGraphDebug)
}
STGraphDebug::STGraphDebug(const STGraphDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_){from._impl_.boundary_}
    , decltype(_impl_.speed_limit_){from._impl_.speed_limit_}
    , decltype(_impl_.speed_profile_){from._impl_.speed_profile_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.speed_constraint_){nullptr}
    , decltype(_impl_.kernel_cruise_ref_){nullptr}
    , decltype(_impl_.kernel_follow_ref_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_speed_constraint()) {
    _impl_.speed_constraint_ = new ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint(*from._impl_.speed_constraint_);
  }
  if (from._internal_has_kernel_cruise_ref()) {
    _impl_.kernel_cruise_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef(*from._impl_.kernel_cruise_ref_);
  }
  if (from._internal_has_kernel_follow_ref()) {
    _impl_.kernel_follow_ref_ = new ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef(*from._impl_.kernel_follow_ref_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.STGraphDebug)
}

inline void STGraphDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_){arena}
    , decltype(_impl_.speed_limit_){arena}
    , decltype(_impl_.speed_profile_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.speed_constraint_){nullptr}
    , decltype(_impl_.kernel_cruise_ref_){nullptr}
    , decltype(_impl_.kernel_follow_ref_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

STGraphDebug::~STGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.STGraphDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void STGraphDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boundary_.~RepeatedPtrField();
  _impl_.speed_limit_.~RepeatedPtrField();
  _impl_.speed_profile_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.speed_constraint_;
  if (this != internal_default_instance()) delete _impl_.kernel_cruise_ref_;
  if (this != internal_default_instance()) delete _impl_.kernel_follow_ref_;
}

void STGraphDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void STGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.STGraphDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.boundary_.Clear();
  _impl_.speed_limit_.Clear();
  _impl_.speed_profile_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.speed_constraint_ != nullptr);
      _impl_.speed_constraint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.kernel_cruise_ref_ != nullptr);
      _impl_.kernel_cruise_ref_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.kernel_follow_ref_ != nullptr);
      _impl_.kernel_follow_ref_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STGraphDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.STGraphDebug.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SpeedPoint speed_profile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_profile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_constraint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_cruise_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kernel_follow_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STGraphDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.STGraphDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.STGraphDebug.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_limit_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_limit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_profile_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_profile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::speed_constraint(this),
        _Internal::speed_constraint(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kernel_cruise_ref(this),
        _Internal::kernel_cruise_ref(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::kernel_follow_ref(this),
        _Internal::kernel_follow_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.STGraphDebug)
  return target;
}

size_t STGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.STGraphDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  total_size += 1UL * this->_internal_boundary_size();
  for (const auto& msg : this->_impl_.boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  total_size += 1UL * this->_internal_speed_limit_size();
  for (const auto& msg : this->_impl_.speed_limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  total_size += 1UL * this->_internal_speed_profile_size();
  for (const auto& msg : this->_impl_.speed_profile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speed_constraint_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kernel_cruise_ref_);
    }

    // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kernel_follow_ref_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STGraphDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STGraphDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STGraphDebug::GetClassData() const { return &_class_data_; }

void STGraphDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STGraphDebug *>(to)->MergeFrom(
      static_cast<const STGraphDebug &>(from));
}


void STGraphDebug::MergeFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.STGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.boundary_.MergeFrom(from._impl_.boundary_);
  _impl_.speed_limit_.MergeFrom(from._impl_.speed_limit_);
  _impl_.speed_profile_.MergeFrom(from._impl_.speed_profile_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_constraint()->::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint::MergeFrom(from._internal_speed_constraint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_kernel_cruise_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef::MergeFrom(from._internal_kernel_cruise_ref());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_kernel_follow_ref()->::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef::MergeFrom(from._internal_kernel_follow_ref());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STGraphDebug::CopyFrom(const STGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.STGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STGraphDebug::IsInitialized() const {
  return true;
}

void STGraphDebug::InternalSwap(STGraphDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.boundary_.InternalSwap(&other->_impl_.boundary_);
  _impl_.speed_limit_.InternalSwap(&other->_impl_.speed_limit_);
  _impl_.speed_profile_.InternalSwap(&other->_impl_.speed_profile_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STGraphDebug, _impl_.kernel_follow_ref_)
      + sizeof(STGraphDebug::_impl_.kernel_follow_ref_)
      - PROTOBUF_FIELD_OFFSET(STGraphDebug, _impl_.speed_constraint_)>(
          reinterpret_cast<char*>(&_impl_.speed_constraint_),
          reinterpret_cast<char*>(&other->_impl_.speed_constraint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STGraphDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[7]);
}

// ===================================================================

class SignalLightDebug_SignalDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalLightDebug_SignalDebug>()._impl_._has_bits_);
  static void set_has_light_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_light_stop_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_adc_stop_deacceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_stop_wall_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}
SignalLightDebug_SignalDebug::SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_id_){}
    , decltype(_impl_.light_stop_s_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.is_stop_wall_created_){}
    , decltype(_impl_.adc_stop_deacceleration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.light_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.light_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_light_id()) {
    _impl_.light_id_.Set(from._internal_light_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.light_stop_s_, &from._impl_.light_stop_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.adc_stop_deacceleration_) -
    reinterpret_cast<char*>(&_impl_.light_stop_s_)) + sizeof(_impl_.adc_stop_deacceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
}

inline void SignalLightDebug_SignalDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_id_){}
    , decltype(_impl_.light_stop_s_){0}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.is_stop_wall_created_){false}
    , decltype(_impl_.adc_stop_deacceleration_){0}
  };
  _impl_.light_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.light_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignalLightDebug_SignalDebug::~SignalLightDebug_SignalDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalLightDebug_SignalDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.light_id_.Destroy();
}

void SignalLightDebug_SignalDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalLightDebug_SignalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.light_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.light_stop_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.adc_stop_deacceleration_) -
        reinterpret_cast<char*>(&_impl_.light_stop_s_)) + sizeof(_impl_.adc_stop_deacceleration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalLightDebug_SignalDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string light_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_light_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.TrafficLight.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double light_stop_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_light_stop_s(&has_bits);
          _impl_.light_stop_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double adc_stop_deacceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_adc_stop_deacceleration(&has_bits);
          _impl_.adc_stop_deacceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_stop_wall_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_stop_wall_created(&has_bits);
          _impl_.is_stop_wall_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalLightDebug_SignalDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string light_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_light_id().data(), static_cast<int>(this->_internal_light_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.SignalLightDebug.SignalDebug.light_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_light_id(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // optional double light_stop_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_light_stop_s(), target);
  }

  // optional double adc_stop_deacceleration = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_adc_stop_deacceleration(), target);
  }

  // optional bool is_stop_wall_created = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_stop_wall_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug.SignalDebug)
  return target;
}

size_t SignalLightDebug_SignalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string light_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_light_id());
    }

    // optional double light_stop_s = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.perception.TrafficLight.Color color = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool is_stop_wall_created = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional double adc_stop_deacceleration = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalLightDebug_SignalDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignalLightDebug_SignalDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalLightDebug_SignalDebug::GetClassData() const { return &_class_data_; }

void SignalLightDebug_SignalDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignalLightDebug_SignalDebug *>(to)->MergeFrom(
      static_cast<const SignalLightDebug_SignalDebug &>(from));
}


void SignalLightDebug_SignalDebug::MergeFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_light_id(from._internal_light_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.light_stop_s_ = from._impl_.light_stop_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_stop_wall_created_ = from._impl_.is_stop_wall_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.adc_stop_deacceleration_ = from._impl_.adc_stop_deacceleration_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalLightDebug_SignalDebug::CopyFrom(const SignalLightDebug_SignalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug.SignalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug_SignalDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug_SignalDebug::InternalSwap(SignalLightDebug_SignalDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.light_id_, lhs_arena,
      &other->_impl_.light_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalLightDebug_SignalDebug, _impl_.adc_stop_deacceleration_)
      + sizeof(SignalLightDebug_SignalDebug::_impl_.adc_stop_deacceleration_)
      - PROTOBUF_FIELD_OFFSET(SignalLightDebug_SignalDebug, _impl_.light_stop_s_)>(
          reinterpret_cast<char*>(&_impl_.light_stop_s_),
          reinterpret_cast<char*>(&other->_impl_.light_stop_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalLightDebug_SignalDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[8]);
}

// ===================================================================

class SignalLightDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<SignalLightDebug>()._impl_._has_bits_);
  static void set_has_adc_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_adc_front_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SignalLightDebug::SignalLightDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.SignalLightDebug)
}
SignalLightDebug::SignalLightDebug(const SignalLightDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_){from._impl_.signal_}
    , decltype(_impl_.adc_speed_){}
    , decltype(_impl_.adc_front_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.adc_speed_, &from._impl_.adc_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.adc_front_s_) -
    reinterpret_cast<char*>(&_impl_.adc_speed_)) + sizeof(_impl_.adc_front_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SignalLightDebug)
}

inline void SignalLightDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_){arena}
    , decltype(_impl_.adc_speed_){0}
    , decltype(_impl_.adc_front_s_){0}
  };
}

SignalLightDebug::~SignalLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SignalLightDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignalLightDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_.~RepeatedPtrField();
}

void SignalLightDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignalLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SignalLightDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.adc_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.adc_front_s_) -
        reinterpret_cast<char*>(&_impl_.adc_speed_)) + sizeof(_impl_.adc_front_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalLightDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double adc_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_adc_speed(&has_bits);
          _impl_.adc_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double adc_front_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_adc_front_s(&has_bits);
          _impl_.adc_front_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignalLightDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SignalLightDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double adc_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_adc_speed(), target);
  }

  // optional double adc_front_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_adc_front_s(), target);
  }

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SignalLightDebug)
  return target;
}

size_t SignalLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SignalLightDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  total_size += 1UL * this->_internal_signal_size();
  for (const auto& msg : this->_impl_.signal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double adc_speed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double adc_front_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignalLightDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignalLightDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignalLightDebug::GetClassData() const { return &_class_data_; }

void SignalLightDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignalLightDebug *>(to)->MergeFrom(
      static_cast<const SignalLightDebug &>(from));
}


void SignalLightDebug::MergeFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SignalLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.signal_.MergeFrom(from._impl_.signal_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.adc_speed_ = from._impl_.adc_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.adc_front_s_ = from._impl_.adc_front_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignalLightDebug::CopyFrom(const SignalLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SignalLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalLightDebug::IsInitialized() const {
  return true;
}

void SignalLightDebug::InternalSwap(SignalLightDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signal_.InternalSwap(&other->_impl_.signal_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalLightDebug, _impl_.adc_front_s_)
      + sizeof(SignalLightDebug::_impl_.adc_front_s_)
      - PROTOBUF_FIELD_OFFSET(SignalLightDebug, _impl_.adc_speed_)>(
          reinterpret_cast<char*>(&_impl_.adc_speed_),
          reinterpret_cast<char*>(&other->_impl_.adc_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalLightDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[9]);
}

// ===================================================================

class DecisionTag::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionTag>()._impl_._has_bits_);
  static void set_has_decider_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ObjectDecisionType& decision(const DecisionTag* msg);
  static void set_has_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::ObjectDecisionType&
DecisionTag::_Internal::decision(const DecisionTag* msg) {
  return *msg->_impl_.decision_;
}
void DecisionTag::clear_decision() {
  if (_impl_.decision_ != nullptr) _impl_.decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DecisionTag::DecisionTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.DecisionTag)
}
DecisionTag::DecisionTag(const DecisionTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decider_tag_){}
    , decltype(_impl_.decision_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.decider_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decider_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_decider_tag()) {
    _impl_.decider_tag_.Set(from._internal_decider_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_decision()) {
    _impl_.decision_ = new ::apollo::planning::ObjectDecisionType(*from._impl_.decision_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DecisionTag)
}

inline void DecisionTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decider_tag_){}
    , decltype(_impl_.decision_){nullptr}
  };
  _impl_.decider_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.decider_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DecisionTag::~DecisionTag() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DecisionTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecisionTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decider_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.decision_;
}

void DecisionTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DecisionTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DecisionTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.decider_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.decision_ != nullptr);
      _impl_.decision_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string decider_tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_decider_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.DecisionTag.decider_tag");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObjectDecisionType decision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecisionTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DecisionTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string decider_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decider_tag().data(), static_cast<int>(this->_internal_decider_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.DecisionTag.decider_tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_decider_tag(), target);
  }

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::decision(this),
        _Internal::decision(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DecisionTag)
  return target;
}

size_t DecisionTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DecisionTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string decider_tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decider_tag());
    }

    // optional .apollo.planning.ObjectDecisionType decision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decision_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecisionTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DecisionTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecisionTag::GetClassData() const { return &_class_data_; }

void DecisionTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DecisionTag *>(to)->MergeFrom(
      static_cast<const DecisionTag &>(from));
}


void DecisionTag::MergeFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DecisionTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_decider_tag(from._internal_decider_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_decision()->::apollo::planning::ObjectDecisionType::MergeFrom(from._internal_decision());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecisionTag::CopyFrom(const DecisionTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DecisionTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionTag::IsInitialized() const {
  return true;
}

void DecisionTag::InternalSwap(DecisionTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.decider_tag_, lhs_arena,
      &other->_impl_.decider_tag_, rhs_arena
  );
  swap(_impl_.decision_, other->_impl_.decision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[10]);
}

// ===================================================================

class ObstacleDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleDebug>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::SLBoundary& sl_boundary(const ObstacleDebug* msg);
  static void set_has_sl_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::SLBoundary&
ObstacleDebug::_Internal::sl_boundary(const ObstacleDebug* msg) {
  return *msg->_impl_.sl_boundary_;
}
void ObstacleDebug::clear_sl_boundary() {
  if (_impl_.sl_boundary_ != nullptr) _impl_.sl_boundary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ObstacleDebug::ObstacleDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.ObstacleDebug)
}
ObstacleDebug::ObstacleDebug(const ObstacleDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decision_tag_){from._impl_.decision_tag_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sl_boundary_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sl_boundary()) {
    _impl_.sl_boundary_ = new ::apollo::planning::SLBoundary(*from._impl_.sl_boundary_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ObstacleDebug)
}

inline void ObstacleDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.decision_tag_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sl_boundary_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObstacleDebug::~ObstacleDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ObstacleDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.decision_tag_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sl_boundary_;
}

void ObstacleDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ObstacleDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.decision_tag_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sl_boundary_ != nullptr);
      _impl_.sl_boundary_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.ObstacleDebug.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.SLBoundary sl_boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sl_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_decision_tag(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ObstacleDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ObstacleDebug.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sl_boundary(this),
        _Internal::sl_boundary(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_decision_tag_size()); i < n; i++) {
    const auto& repfield = this->_internal_decision_tag(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ObstacleDebug)
  return target;
}

size_t ObstacleDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ObstacleDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  total_size += 1UL * this->_internal_decision_tag_size();
  for (const auto& msg : this->_impl_.decision_tag_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.planning.SLBoundary sl_boundary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sl_boundary_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleDebug::GetClassData() const { return &_class_data_; }

void ObstacleDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleDebug *>(to)->MergeFrom(
      static_cast<const ObstacleDebug &>(from));
}


void ObstacleDebug::MergeFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ObstacleDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.decision_tag_.MergeFrom(from._impl_.decision_tag_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sl_boundary()->::apollo::planning::SLBoundary::MergeFrom(from._internal_sl_boundary());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleDebug::CopyFrom(const ObstacleDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ObstacleDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDebug::IsInitialized() const {
  return true;
}

void ObstacleDebug::InternalSwap(ObstacleDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.decision_tag_.InternalSwap(&other->_impl_.decision_tag_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.sl_boundary_, other->_impl_.sl_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[11]);
}

// ===================================================================

class ReferenceLineDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineDebug>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_change_lane_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_drivable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_protected(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ReferenceLineDebug::ReferenceLineDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.ReferenceLineDebug)
}
ReferenceLineDebug::ReferenceLineDebug(const ReferenceLineDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.cost_){}
    , decltype(_impl_.is_change_lane_path_){}
    , decltype(_impl_.is_drivable_){}
    , decltype(_impl_.is_protected_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_protected_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.is_protected_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.ReferenceLineDebug)
}

inline void ReferenceLineDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.cost_){0}
    , decltype(_impl_.is_change_lane_path_){false}
    , decltype(_impl_.is_drivable_){false}
    , decltype(_impl_.is_protected_){false}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReferenceLineDebug::~ReferenceLineDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.ReferenceLineDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ReferenceLineDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.ReferenceLineDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_protected_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.is_protected_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.ReferenceLineDebug.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_cost(&has_bits);
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_change_lane_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_change_lane_path(&has_bits);
          _impl_.is_change_lane_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_drivable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_drivable(&has_bits);
          _impl_.is_drivable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_protected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_protected(&has_bits);
          _impl_.is_protected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.ReferenceLineDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.ReferenceLineDebug.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cost(), target);
  }

  // optional bool is_change_lane_path = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_change_lane_path(), target);
  }

  // optional bool is_drivable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_drivable(), target);
  }

  // optional bool is_protected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_protected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.ReferenceLineDebug)
  return target;
}

size_t ReferenceLineDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.ReferenceLineDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double cost = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool is_change_lane_path = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_drivable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_protected = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineDebug::GetClassData() const { return &_class_data_; }

void ReferenceLineDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReferenceLineDebug *>(to)->MergeFrom(
      static_cast<const ReferenceLineDebug &>(from));
}


void ReferenceLineDebug::MergeFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.ReferenceLineDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cost_ = from._impl_.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.is_change_lane_path_ = from._impl_.is_change_lane_path_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_drivable_ = from._impl_.is_drivable_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.is_protected_ = from._impl_.is_protected_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineDebug::CopyFrom(const ReferenceLineDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.ReferenceLineDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineDebug::IsInitialized() const {
  return true;
}

void ReferenceLineDebug::InternalSwap(ReferenceLineDebug* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineDebug, _impl_.is_protected_)
      + sizeof(ReferenceLineDebug::_impl_.is_protected_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineDebug, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[12]);
}

// ===================================================================

class SampleLayerDebug::_Internal {
 public:
};

void SampleLayerDebug::clear_sl_point() {
  _impl_.sl_point_.Clear();
}
SampleLayerDebug::SampleLayerDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.SampleLayerDebug)
}
SampleLayerDebug::SampleLayerDebug(const SampleLayerDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.sl_point_){from._impl_.sl_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.SampleLayerDebug)
}

inline void SampleLayerDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sl_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SampleLayerDebug::~SampleLayerDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.SampleLayerDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SampleLayerDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sl_point_.~RepeatedPtrField();
}

void SampleLayerDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SampleLayerDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.SampleLayerDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sl_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SampleLayerDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.SLPoint sl_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SampleLayerDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.SampleLayerDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sl_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_sl_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.SampleLayerDebug)
  return target;
}

size_t SampleLayerDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.SampleLayerDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.SLPoint sl_point = 1;
  total_size += 1UL * this->_internal_sl_point_size();
  for (const auto& msg : this->_impl_.sl_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SampleLayerDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SampleLayerDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SampleLayerDebug::GetClassData() const { return &_class_data_; }

void SampleLayerDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SampleLayerDebug *>(to)->MergeFrom(
      static_cast<const SampleLayerDebug &>(from));
}


void SampleLayerDebug::MergeFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.SampleLayerDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sl_point_.MergeFrom(from._impl_.sl_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SampleLayerDebug::CopyFrom(const SampleLayerDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.SampleLayerDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleLayerDebug::IsInitialized() const {
  return true;
}

void SampleLayerDebug::InternalSwap(SampleLayerDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sl_point_.InternalSwap(&other->_impl_.sl_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleLayerDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[13]);
}

// ===================================================================

class DpPolyGraphDebug::_Internal {
 public:
};

void DpPolyGraphDebug::clear_min_cost_point() {
  _impl_.min_cost_point_.Clear();
}
DpPolyGraphDebug::DpPolyGraphDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.DpPolyGraphDebug)
}
DpPolyGraphDebug::DpPolyGraphDebug(const DpPolyGraphDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.sample_layer_){from._impl_.sample_layer_}
    , decltype(_impl_.min_cost_point_){from._impl_.min_cost_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.DpPolyGraphDebug)
}

inline void DpPolyGraphDebug::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_layer_){arena}
    , decltype(_impl_.min_cost_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DpPolyGraphDebug::~DpPolyGraphDebug() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.DpPolyGraphDebug)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DpPolyGraphDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sample_layer_.~RepeatedPtrField();
  _impl_.min_cost_point_.~RepeatedPtrField();
}

void DpPolyGraphDebug::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DpPolyGraphDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.DpPolyGraphDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sample_layer_.Clear();
  _impl_.min_cost_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DpPolyGraphDebug::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sample_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.SLPoint min_cost_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_min_cost_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DpPolyGraphDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.DpPolyGraphDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sample_layer_size()); i < n; i++) {
    const auto& repfield = this->_internal_sample_layer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_min_cost_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_min_cost_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.DpPolyGraphDebug)
  return target;
}

size_t DpPolyGraphDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.DpPolyGraphDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  total_size += 1UL * this->_internal_sample_layer_size();
  for (const auto& msg : this->_impl_.sample_layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  total_size += 1UL * this->_internal_min_cost_point_size();
  for (const auto& msg : this->_impl_.min_cost_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DpPolyGraphDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DpPolyGraphDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DpPolyGraphDebug::GetClassData() const { return &_class_data_; }

void DpPolyGraphDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DpPolyGraphDebug *>(to)->MergeFrom(
      static_cast<const DpPolyGraphDebug &>(from));
}


void DpPolyGraphDebug::MergeFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.DpPolyGraphDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.sample_layer_.MergeFrom(from._impl_.sample_layer_);
  _impl_.min_cost_point_.MergeFrom(from._impl_.min_cost_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DpPolyGraphDebug::CopyFrom(const DpPolyGraphDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.DpPolyGraphDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyGraphDebug::IsInitialized() const {
  return true;
}

void DpPolyGraphDebug::InternalSwap(DpPolyGraphDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sample_layer_.InternalSwap(&other->_impl_.sample_layer_);
  _impl_.min_cost_point_.InternalSwap(&other->_impl_.min_cost_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpPolyGraphDebug::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[14]);
}

// ===================================================================

class PlanningData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningData>()._impl_._has_bits_);
  static const ::apollo::localization::LocalizationEstimate& adc_position(const PlanningData* msg);
  static void set_has_adc_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::canbus::Chassis& chassis(const PlanningData* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::RoutingResponse& routing(const PlanningData* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::TrajectoryPoint& init_point(const PlanningData* msg);
  static void set_has_init_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Header& prediction_header(const PlanningData* msg);
  static void set_has_prediction_header(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning_internal::SignalLightDebug& signal_light(const PlanningData* msg);
  static void set_has_signal_light(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning_internal::DpPolyGraphDebug& dp_poly_graph(const PlanningData* msg);
  static void set_has_dp_poly_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning_internal::LatticeStTraining& lattice_st_image(const PlanningData* msg);
  static void set_has_lattice_st_image(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::relative_map::MapMsg& relative_map(const PlanningData* msg);
  static void set_has_relative_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning_internal::AutoTuningTrainingData& auto_tuning_training_data(const PlanningData* msg);
  static void set_has_auto_tuning_training_data(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::apollo::localization::LocalizationEstimate&
PlanningData::_Internal::adc_position(const PlanningData* msg) {
  return *msg->_impl_.adc_position_;
}
const ::apollo::canbus::Chassis&
PlanningData::_Internal::chassis(const PlanningData* msg) {
  return *msg->_impl_.chassis_;
}
const ::apollo::routing::RoutingResponse&
PlanningData::_Internal::routing(const PlanningData* msg) {
  return *msg->_impl_.routing_;
}
const ::apollo::common::TrajectoryPoint&
PlanningData::_Internal::init_point(const PlanningData* msg) {
  return *msg->_impl_.init_point_;
}
const ::apollo::common::Header&
PlanningData::_Internal::prediction_header(const PlanningData* msg) {
  return *msg->_impl_.prediction_header_;
}
const ::apollo::planning_internal::SignalLightDebug&
PlanningData::_Internal::signal_light(const PlanningData* msg) {
  return *msg->_impl_.signal_light_;
}
const ::apollo::planning_internal::DpPolyGraphDebug&
PlanningData::_Internal::dp_poly_graph(const PlanningData* msg) {
  return *msg->_impl_.dp_poly_graph_;
}
const ::apollo::planning_internal::LatticeStTraining&
PlanningData::_Internal::lattice_st_image(const PlanningData* msg) {
  return *msg->_impl_.lattice_st_image_;
}
const ::apollo::relative_map::MapMsg&
PlanningData::_Internal::relative_map(const PlanningData* msg) {
  return *msg->_impl_.relative_map_;
}
const ::apollo::planning_internal::AutoTuningTrainingData&
PlanningData::_Internal::auto_tuning_training_data(const PlanningData* msg) {
  return *msg->_impl_.auto_tuning_training_data_;
}
void PlanningData::clear_adc_position() {
  if (_impl_.adc_position_ != nullptr) _impl_.adc_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlanningData::clear_chassis() {
  if (_impl_.chassis_ != nullptr) _impl_.chassis_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PlanningData::clear_routing() {
  if (_impl_.routing_ != nullptr) _impl_.routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PlanningData::clear_init_point() {
  if (_impl_.init_point_ != nullptr) _impl_.init_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void PlanningData::clear_path() {
  _impl_.path_.Clear();
}
void PlanningData::clear_prediction_header() {
  if (_impl_.prediction_header_ != nullptr) _impl_.prediction_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void PlanningData::clear_relative_map() {
  if (_impl_.relative_map_ != nullptr) _impl_.relative_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
PlanningData::PlanningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.PlanningData)
}
PlanningData::PlanningData(const PlanningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){from._impl_.path_}
    , decltype(_impl_.speed_plan_){from._impl_.speed_plan_}
    , decltype(_impl_.st_graph_){from._impl_.st_graph_}
    , decltype(_impl_.sl_frame_){from._impl_.sl_frame_}
    , decltype(_impl_.obstacle_){from._impl_.obstacle_}
    , decltype(_impl_.reference_line_){from._impl_.reference_line_}
    , decltype(_impl_.adc_position_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.init_point_){nullptr}
    , decltype(_impl_.prediction_header_){nullptr}
    , decltype(_impl_.signal_light_){nullptr}
    , decltype(_impl_.dp_poly_graph_){nullptr}
    , decltype(_impl_.lattice_st_image_){nullptr}
    , decltype(_impl_.relative_map_){nullptr}
    , decltype(_impl_.auto_tuning_training_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_adc_position()) {
    _impl_.adc_position_ = new ::apollo::localization::LocalizationEstimate(*from._impl_.adc_position_);
  }
  if (from._internal_has_chassis()) {
    _impl_.chassis_ = new ::apollo::canbus::Chassis(*from._impl_.chassis_);
  }
  if (from._internal_has_routing()) {
    _impl_.routing_ = new ::apollo::routing::RoutingResponse(*from._impl_.routing_);
  }
  if (from._internal_has_init_point()) {
    _impl_.init_point_ = new ::apollo::common::TrajectoryPoint(*from._impl_.init_point_);
  }
  if (from._internal_has_prediction_header()) {
    _impl_.prediction_header_ = new ::apollo::common::Header(*from._impl_.prediction_header_);
  }
  if (from._internal_has_signal_light()) {
    _impl_.signal_light_ = new ::apollo::planning_internal::SignalLightDebug(*from._impl_.signal_light_);
  }
  if (from._internal_has_dp_poly_graph()) {
    _impl_.dp_poly_graph_ = new ::apollo::planning_internal::DpPolyGraphDebug(*from._impl_.dp_poly_graph_);
  }
  if (from._internal_has_lattice_st_image()) {
    _impl_.lattice_st_image_ = new ::apollo::planning_internal::LatticeStTraining(*from._impl_.lattice_st_image_);
  }
  if (from._internal_has_relative_map()) {
    _impl_.relative_map_ = new ::apollo::relative_map::MapMsg(*from._impl_.relative_map_);
  }
  if (from._internal_has_auto_tuning_training_data()) {
    _impl_.auto_tuning_training_data_ = new ::apollo::planning_internal::AutoTuningTrainingData(*from._impl_.auto_tuning_training_data_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.PlanningData)
}

inline void PlanningData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){arena}
    , decltype(_impl_.speed_plan_){arena}
    , decltype(_impl_.st_graph_){arena}
    , decltype(_impl_.sl_frame_){arena}
    , decltype(_impl_.obstacle_){arena}
    , decltype(_impl_.reference_line_){arena}
    , decltype(_impl_.adc_position_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.init_point_){nullptr}
    , decltype(_impl_.prediction_header_){nullptr}
    , decltype(_impl_.signal_light_){nullptr}
    , decltype(_impl_.dp_poly_graph_){nullptr}
    , decltype(_impl_.lattice_st_image_){nullptr}
    , decltype(_impl_.relative_map_){nullptr}
    , decltype(_impl_.auto_tuning_training_data_){nullptr}
  };
}

PlanningData::~PlanningData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.PlanningData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.~RepeatedPtrField();
  _impl_.speed_plan_.~RepeatedPtrField();
  _impl_.st_graph_.~RepeatedPtrField();
  _impl_.sl_frame_.~RepeatedPtrField();
  _impl_.obstacle_.~RepeatedPtrField();
  _impl_.reference_line_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.adc_position_;
  if (this != internal_default_instance()) delete _impl_.chassis_;
  if (this != internal_default_instance()) delete _impl_.routing_;
  if (this != internal_default_instance()) delete _impl_.init_point_;
  if (this != internal_default_instance()) delete _impl_.prediction_header_;
  if (this != internal_default_instance()) delete _impl_.signal_light_;
  if (this != internal_default_instance()) delete _impl_.dp_poly_graph_;
  if (this != internal_default_instance()) delete _impl_.lattice_st_image_;
  if (this != internal_default_instance()) delete _impl_.relative_map_;
  if (this != internal_default_instance()) delete _impl_.auto_tuning_training_data_;
}

void PlanningData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.PlanningData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.Clear();
  _impl_.speed_plan_.Clear();
  _impl_.st_graph_.Clear();
  _impl_.sl_frame_.Clear();
  _impl_.obstacle_.Clear();
  _impl_.reference_line_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.adc_position_ != nullptr);
      _impl_.adc_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chassis_ != nullptr);
      _impl_.chassis_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.routing_ != nullptr);
      _impl_.routing_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.init_point_ != nullptr);
      _impl_.init_point_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.prediction_header_ != nullptr);
      _impl_.prediction_header_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.signal_light_ != nullptr);
      _impl_.signal_light_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.dp_poly_graph_ != nullptr);
      _impl_.dp_poly_graph_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.lattice_st_image_ != nullptr);
      _impl_.lattice_st_image_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.relative_map_ != nullptr);
      _impl_.relative_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.auto_tuning_training_data_ != nullptr);
      _impl_.auto_tuning_training_data_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.Path path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.LocalizationEstimate adc_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis chassis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingResponse routing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.TrajectoryPoint init_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_plan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_st_graph(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sl_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header prediction_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_reference_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_dp_poly_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_lattice_st_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.relative_map.MapMsg relative_map = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_auto_tuning_training_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.PlanningData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::adc_position(this),
        _Internal::adc_position(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.canbus.Chassis chassis = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::chassis(this),
        _Internal::chassis(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.routing.RoutingResponse routing = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::init_point(this),
        _Internal::init_point(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_plan_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_plan(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_st_graph_size()); i < n; i++) {
    const auto& repfield = this->_internal_st_graph(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sl_frame_size()); i < n; i++) {
    const auto& repfield = this->_internal_sl_frame(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Header prediction_header = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::prediction_header(this),
        _Internal::prediction_header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::signal_light(this),
        _Internal::signal_light(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reference_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_reference_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::dp_poly_graph(this),
        _Internal::dp_poly_graph(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::lattice_st_image(this),
        _Internal::lattice_st_image(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.relative_map.MapMsg relative_map = 22;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::relative_map(this),
        _Internal::relative_map(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::auto_tuning_training_data(this),
        _Internal::auto_tuning_training_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.PlanningData)
  return target;
}

size_t PlanningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.PlanningData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Path path = 6;
  total_size += 1UL * this->_internal_path_size();
  for (const auto& msg : this->_impl_.path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  total_size += 1UL * this->_internal_speed_plan_size();
  for (const auto& msg : this->_impl_.speed_plan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  total_size += 1UL * this->_internal_st_graph_size();
  for (const auto& msg : this->_impl_.st_graph_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  total_size += 1UL * this->_internal_sl_frame_size();
  for (const auto& msg : this->_impl_.sl_frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  total_size += 2UL * this->_internal_obstacle_size();
  for (const auto& msg : this->_impl_.obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  total_size += 2UL * this->_internal_reference_line_size();
  for (const auto& msg : this->_impl_.reference_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.localization.LocalizationEstimate adc_position = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.adc_position_);
    }

    // optional .apollo.canbus.Chassis chassis = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chassis_);
    }

    // optional .apollo.routing.RoutingResponse routing = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_);
    }

    // optional .apollo.common.TrajectoryPoint init_point = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.init_point_);
    }

    // optional .apollo.common.Header prediction_header = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.prediction_header_);
    }

    // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_light_);
    }

    // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dp_poly_graph_);
    }

    // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lattice_st_image_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.relative_map.MapMsg relative_map = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_map_);
    }

    // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.auto_tuning_training_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningData::GetClassData() const { return &_class_data_; }

void PlanningData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningData *>(to)->MergeFrom(
      static_cast<const PlanningData &>(from));
}


void PlanningData::MergeFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.PlanningData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.path_.MergeFrom(from._impl_.path_);
  _impl_.speed_plan_.MergeFrom(from._impl_.speed_plan_);
  _impl_.st_graph_.MergeFrom(from._impl_.st_graph_);
  _impl_.sl_frame_.MergeFrom(from._impl_.sl_frame_);
  _impl_.obstacle_.MergeFrom(from._impl_.obstacle_);
  _impl_.reference_line_.MergeFrom(from._impl_.reference_line_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_adc_position()->::apollo::localization::LocalizationEstimate::MergeFrom(from._internal_adc_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chassis()->::apollo::canbus::Chassis::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from._internal_routing());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_init_point()->::apollo::common::TrajectoryPoint::MergeFrom(from._internal_init_point());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_prediction_header()->::apollo::common::Header::MergeFrom(from._internal_prediction_header());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_signal_light()->::apollo::planning_internal::SignalLightDebug::MergeFrom(from._internal_signal_light());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dp_poly_graph()->::apollo::planning_internal::DpPolyGraphDebug::MergeFrom(from._internal_dp_poly_graph());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_lattice_st_image()->::apollo::planning_internal::LatticeStTraining::MergeFrom(from._internal_lattice_st_image());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_relative_map()->::apollo::relative_map::MapMsg::MergeFrom(from._internal_relative_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_auto_tuning_training_data()->::apollo::planning_internal::AutoTuningTrainingData::MergeFrom(from._internal_auto_tuning_training_data());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningData::CopyFrom(const PlanningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.PlanningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningData::IsInitialized() const {
  return true;
}

void PlanningData::InternalSwap(PlanningData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.path_.InternalSwap(&other->_impl_.path_);
  _impl_.speed_plan_.InternalSwap(&other->_impl_.speed_plan_);
  _impl_.st_graph_.InternalSwap(&other->_impl_.st_graph_);
  _impl_.sl_frame_.InternalSwap(&other->_impl_.sl_frame_);
  _impl_.obstacle_.InternalSwap(&other->_impl_.obstacle_);
  _impl_.reference_line_.InternalSwap(&other->_impl_.reference_line_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningData, _impl_.auto_tuning_training_data_)
      + sizeof(PlanningData::_impl_.auto_tuning_training_data_)
      - PROTOBUF_FIELD_OFFSET(PlanningData, _impl_.adc_position_)>(
          reinterpret_cast<char*>(&_impl_.adc_position_),
          reinterpret_cast<char*>(&other->_impl_.adc_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[15]);
}

// ===================================================================

class LatticeStPixel::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeStPixel>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LatticeStPixel::LatticeStPixel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.LatticeStPixel)
}
LatticeStPixel::LatticeStPixel(const LatticeStPixel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.b_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.b_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStPixel)
}

inline void LatticeStPixel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.r_){0u}
    , decltype(_impl_.g_){0u}
    , decltype(_impl_.b_){0u}
  };
}

LatticeStPixel::~LatticeStPixel() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStPixel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatticeStPixel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatticeStPixel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatticeStPixel::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStPixel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.b_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.b_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatticeStPixel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_r(&has_bits);
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_g(&has_bits);
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_b(&has_bits);
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatticeStPixel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStPixel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_s(), target);
  }

  // optional int32 t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_t(), target);
  }

  // optional uint32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_r(), target);
  }

  // optional uint32 g = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_g(), target);
  }

  // optional uint32 b = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStPixel)
  return target;
}

size_t LatticeStPixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStPixel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_s());
    }

    // optional int32 t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_t());
    }

    // optional uint32 r = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
    }

    // optional uint32 g = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
    }

    // optional uint32 b = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatticeStPixel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatticeStPixel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatticeStPixel::GetClassData() const { return &_class_data_; }

void LatticeStPixel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatticeStPixel *>(to)->MergeFrom(
      static_cast<const LatticeStPixel &>(from));
}


void LatticeStPixel::MergeFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStPixel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.r_ = from._impl_.r_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.g_ = from._impl_.g_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.b_ = from._impl_.b_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatticeStPixel::CopyFrom(const LatticeStPixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStPixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStPixel::IsInitialized() const {
  return true;
}

void LatticeStPixel::InternalSwap(LatticeStPixel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatticeStPixel, _impl_.b_)
      + sizeof(LatticeStPixel::_impl_.b_)
      - PROTOBUF_FIELD_OFFSET(LatticeStPixel, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeStPixel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[16]);
}

// ===================================================================

class LatticeStTraining::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeStTraining>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_s_grids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_t_grids(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_s_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_t_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LatticeStTraining::LatticeStTraining(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.LatticeStTraining)
}
LatticeStTraining::LatticeStTraining(const LatticeStTraining& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pixel_){from._impl_.pixel_}
    , decltype(_impl_.annotation_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.num_s_grids_){}
    , decltype(_impl_.num_t_grids_){}
    , decltype(_impl_.s_resolution_){}
    , decltype(_impl_.t_resolution_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.annotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_annotation()) {
    _impl_.annotation_.Set(from._internal_annotation(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_resolution_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.t_resolution_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.LatticeStTraining)
}

inline void LatticeStTraining::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pixel_){arena}
    , decltype(_impl_.annotation_){}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.num_s_grids_){0u}
    , decltype(_impl_.num_t_grids_){0u}
    , decltype(_impl_.s_resolution_){0}
    , decltype(_impl_.t_resolution_){0}
  };
  _impl_.annotation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.annotation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LatticeStTraining::~LatticeStTraining() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.LatticeStTraining)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatticeStTraining::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pixel_.~RepeatedPtrField();
  _impl_.annotation_.Destroy();
}

void LatticeStTraining::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatticeStTraining::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.LatticeStTraining)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pixel_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.annotation_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_resolution_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.t_resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatticeStTraining::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pixel(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string annotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_annotation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning_internal.LatticeStTraining.annotation");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_s_grids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_s_grids(&has_bits);
          _impl_.num_s_grids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_t_grids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_t_grids(&has_bits);
          _impl_.num_t_grids_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double s_resolution = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_s_resolution(&has_bits);
          _impl_.s_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t_resolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_t_resolution(&has_bits);
          _impl_.t_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatticeStTraining::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.LatticeStTraining)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pixel_size()); i < n; i++) {
    const auto& repfield = this->_internal_pixel(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // optional string annotation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_annotation().data(), static_cast<int>(this->_internal_annotation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning_internal.LatticeStTraining.annotation");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_annotation(), target);
  }

  // optional uint32 num_s_grids = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_s_grids(), target);
  }

  // optional uint32 num_t_grids = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_t_grids(), target);
  }

  // optional double s_resolution = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_s_resolution(), target);
  }

  // optional double t_resolution = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_t_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.LatticeStTraining)
  return target;
}

size_t LatticeStTraining::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.LatticeStTraining)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  total_size += 1UL * this->_internal_pixel_size();
  for (const auto& msg : this->_impl_.pixel_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string annotation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_annotation());
    }

    // optional double timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 num_s_grids = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_s_grids());
    }

    // optional uint32 num_t_grids = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_t_grids());
    }

    // optional double s_resolution = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double t_resolution = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatticeStTraining::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatticeStTraining::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatticeStTraining::GetClassData() const { return &_class_data_; }

void LatticeStTraining::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatticeStTraining *>(to)->MergeFrom(
      static_cast<const LatticeStTraining &>(from));
}


void LatticeStTraining::MergeFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.LatticeStTraining)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.pixel_.MergeFrom(from._impl_.pixel_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_annotation(from._internal_annotation());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.num_s_grids_ = from._impl_.num_s_grids_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.num_t_grids_ = from._impl_.num_t_grids_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.s_resolution_ = from._impl_.s_resolution_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.t_resolution_ = from._impl_.t_resolution_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatticeStTraining::CopyFrom(const LatticeStTraining& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.LatticeStTraining)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeStTraining::IsInitialized() const {
  return true;
}

void LatticeStTraining::InternalSwap(LatticeStTraining* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pixel_.InternalSwap(&other->_impl_.pixel_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.annotation_, lhs_arena,
      &other->_impl_.annotation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatticeStTraining, _impl_.t_resolution_)
      + sizeof(LatticeStTraining::_impl_.t_resolution_)
      - PROTOBUF_FIELD_OFFSET(LatticeStTraining, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeStTraining::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[17]);
}

// ===================================================================

class CostComponents::_Internal {
 public:
};

CostComponents::CostComponents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.CostComponents)
}
CostComponents::CostComponents(const CostComponents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.cost_component_){from._impl_.cost_component_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CostComponents)
}

inline void CostComponents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cost_component_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostComponents::~CostComponents() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CostComponents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostComponents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cost_component_.~RepeatedField();
}

void CostComponents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostComponents::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CostComponents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cost_component_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostComponents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double cost_component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cost_component(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_cost_component(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostComponents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CostComponents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  for (int i = 0, n = this->_internal_cost_component_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_cost_component(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CostComponents)
  return target;
}

size_t CostComponents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CostComponents)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double cost_component = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cost_component_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cost_component_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostComponents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CostComponents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostComponents::GetClassData() const { return &_class_data_; }

void CostComponents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CostComponents *>(to)->MergeFrom(
      static_cast<const CostComponents &>(from));
}


void CostComponents::MergeFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CostComponents)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.cost_component_.MergeFrom(from._impl_.cost_component_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostComponents::CopyFrom(const CostComponents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CostComponents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostComponents::IsInitialized() const {
  return true;
}

void CostComponents::InternalSwap(CostComponents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cost_component_.InternalSwap(&other->_impl_.cost_component_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostComponents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[18]);
}

// ===================================================================

class AutoTuningTrainingData::_Internal {
 public:
  using HasBits = decltype(std::declval<AutoTuningTrainingData>()._impl_._has_bits_);
  static const ::apollo::planning_internal::CostComponents& teacher_component(const AutoTuningTrainingData* msg);
  static void set_has_teacher_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning_internal::CostComponents& student_component(const AutoTuningTrainingData* msg);
  static void set_has_student_component(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning_internal::CostComponents&
AutoTuningTrainingData::_Internal::teacher_component(const AutoTuningTrainingData* msg) {
  return *msg->_impl_.teacher_component_;
}
const ::apollo::planning_internal::CostComponents&
AutoTuningTrainingData::_Internal::student_component(const AutoTuningTrainingData* msg) {
  return *msg->_impl_.student_component_;
}
AutoTuningTrainingData::AutoTuningTrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.AutoTuningTrainingData)
}
AutoTuningTrainingData::AutoTuningTrainingData(const AutoTuningTrainingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teacher_component_){nullptr}
    , decltype(_impl_.student_component_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_teacher_component()) {
    _impl_.teacher_component_ = new ::apollo::planning_internal::CostComponents(*from._impl_.teacher_component_);
  }
  if (from._internal_has_student_component()) {
    _impl_.student_component_ = new ::apollo::planning_internal::CostComponents(*from._impl_.student_component_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.AutoTuningTrainingData)
}

inline void AutoTuningTrainingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teacher_component_){nullptr}
    , decltype(_impl_.student_component_){nullptr}
  };
}

AutoTuningTrainingData::~AutoTuningTrainingData() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.AutoTuningTrainingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutoTuningTrainingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.teacher_component_;
  if (this != internal_default_instance()) delete _impl_.student_component_;
}

void AutoTuningTrainingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AutoTuningTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.AutoTuningTrainingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.teacher_component_ != nullptr);
      _impl_.teacher_component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.student_component_ != nullptr);
      _impl_.student_component_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutoTuningTrainingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning_internal.CostComponents teacher_component = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_teacher_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.CostComponents student_component = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_student_component(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutoTuningTrainingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.AutoTuningTrainingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning_internal.CostComponents teacher_component = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::teacher_component(this),
        _Internal::teacher_component(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.CostComponents student_component = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::student_component(this),
        _Internal::student_component(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.AutoTuningTrainingData)
  return target;
}

size_t AutoTuningTrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.AutoTuningTrainingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning_internal.CostComponents teacher_component = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.teacher_component_);
    }

    // optional .apollo.planning_internal.CostComponents student_component = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.student_component_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutoTuningTrainingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutoTuningTrainingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutoTuningTrainingData::GetClassData() const { return &_class_data_; }

void AutoTuningTrainingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AutoTuningTrainingData *>(to)->MergeFrom(
      static_cast<const AutoTuningTrainingData &>(from));
}


void AutoTuningTrainingData::MergeFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.AutoTuningTrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teacher_component()->::apollo::planning_internal::CostComponents::MergeFrom(from._internal_teacher_component());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_student_component()->::apollo::planning_internal::CostComponents::MergeFrom(from._internal_student_component());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutoTuningTrainingData::CopyFrom(const AutoTuningTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.AutoTuningTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoTuningTrainingData::IsInitialized() const {
  return true;
}

void AutoTuningTrainingData::InternalSwap(AutoTuningTrainingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutoTuningTrainingData, _impl_.student_component_)
      + sizeof(AutoTuningTrainingData::_impl_.student_component_)
      - PROTOBUF_FIELD_OFFSET(AutoTuningTrainingData, _impl_.teacher_component_)>(
          reinterpret_cast<char*>(&_impl_.teacher_component_),
          reinterpret_cast<char*>(&other->_impl_.teacher_component_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutoTuningTrainingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[19]);
}

// ===================================================================

class CloudReferenceLineRequest::_Internal {
 public:
};

void CloudReferenceLineRequest::clear_lane_segment() {
  _impl_.lane_segment_.Clear();
}
CloudReferenceLineRequest::CloudReferenceLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.CloudReferenceLineRequest)
}
CloudReferenceLineRequest::CloudReferenceLineRequest(const CloudReferenceLineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.lane_segment_){from._impl_.lane_segment_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRequest)
}

inline void CloudReferenceLineRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_segment_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloudReferenceLineRequest::~CloudReferenceLineRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudReferenceLineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_segment_.~RepeatedPtrField();
}

void CloudReferenceLineRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudReferenceLineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_segment_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudReferenceLineRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.routing.LaneSegment lane_segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudReferenceLineRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_segment_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_segment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRequest)
  return target;
}

size_t CloudReferenceLineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  total_size += 1UL * this->_internal_lane_segment_size();
  for (const auto& msg : this->_impl_.lane_segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudReferenceLineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloudReferenceLineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudReferenceLineRequest::GetClassData() const { return &_class_data_; }

void CloudReferenceLineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloudReferenceLineRequest *>(to)->MergeFrom(
      static_cast<const CloudReferenceLineRequest &>(from));
}


void CloudReferenceLineRequest::MergeFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lane_segment_.MergeFrom(from._impl_.lane_segment_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudReferenceLineRequest::CopyFrom(const CloudReferenceLineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRequest::InternalSwap(CloudReferenceLineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lane_segment_.InternalSwap(&other->_impl_.lane_segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[20]);
}

// ===================================================================

class CloudReferenceLineRoutingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudReferenceLineRoutingRequest>()._impl_._has_bits_);
  static const ::apollo::routing::RoutingResponse& routing(const CloudReferenceLineRoutingRequest* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::RoutingResponse&
CloudReferenceLineRoutingRequest::_Internal::routing(const CloudReferenceLineRoutingRequest* msg) {
  return *msg->_impl_.routing_;
}
void CloudReferenceLineRoutingRequest::clear_routing() {
  if (_impl_.routing_ != nullptr) _impl_.routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}
CloudReferenceLineRoutingRequest::CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing()) {
    _impl_.routing_ = new ::apollo::routing::RoutingResponse(*from._impl_.routing_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
}

inline void CloudReferenceLineRoutingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_){nullptr}
  };
}

CloudReferenceLineRoutingRequest::~CloudReferenceLineRoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudReferenceLineRoutingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_;
}

void CloudReferenceLineRoutingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudReferenceLineRoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.routing_ != nullptr);
    _impl_.routing_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudReferenceLineRoutingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.routing.RoutingResponse routing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudReferenceLineRoutingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.routing.RoutingResponse routing = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  return target;
}

size_t CloudReferenceLineRoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.routing.RoutingResponse routing = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudReferenceLineRoutingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloudReferenceLineRoutingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudReferenceLineRoutingRequest::GetClassData() const { return &_class_data_; }

void CloudReferenceLineRoutingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloudReferenceLineRoutingRequest *>(to)->MergeFrom(
      static_cast<const CloudReferenceLineRoutingRequest &>(from));
}


void CloudReferenceLineRoutingRequest::MergeFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing()) {
    _internal_mutable_routing()->::apollo::routing::RoutingResponse::MergeFrom(from._internal_routing());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudReferenceLineRoutingRequest::CopyFrom(const CloudReferenceLineRoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineRoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineRoutingRequest::IsInitialized() const {
  return true;
}

void CloudReferenceLineRoutingRequest::InternalSwap(CloudReferenceLineRoutingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.routing_, other->_impl_.routing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineRoutingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[21]);
}

// ===================================================================

class CloudReferenceLineResponse::_Internal {
 public:
};

void CloudReferenceLineResponse::clear_segment() {
  _impl_.segment_.Clear();
}
CloudReferenceLineResponse::CloudReferenceLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning_internal.CloudReferenceLineResponse)
}
CloudReferenceLineResponse::CloudReferenceLineResponse(const CloudReferenceLineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.segment_){from._impl_.segment_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning_internal.CloudReferenceLineResponse)
}

inline void CloudReferenceLineResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.segment_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloudReferenceLineResponse::~CloudReferenceLineResponse() {
  // @@protoc_insertion_point(destructor:apollo.planning_internal.CloudReferenceLineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudReferenceLineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.segment_.~RepeatedPtrField();
}

void CloudReferenceLineResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudReferenceLineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning_internal.CloudReferenceLineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.segment_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudReferenceLineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.Path segment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_segment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudReferenceLineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning_internal.CloudReferenceLineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Path segment = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_segment_size()); i < n; i++) {
    const auto& repfield = this->_internal_segment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning_internal.CloudReferenceLineResponse)
  return target;
}

size_t CloudReferenceLineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning_internal.CloudReferenceLineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Path segment = 1;
  total_size += 1UL * this->_internal_segment_size();
  for (const auto& msg : this->_impl_.segment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudReferenceLineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloudReferenceLineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudReferenceLineResponse::GetClassData() const { return &_class_data_; }

void CloudReferenceLineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloudReferenceLineResponse *>(to)->MergeFrom(
      static_cast<const CloudReferenceLineResponse &>(from));
}


void CloudReferenceLineResponse::MergeFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.segment_.MergeFrom(from._impl_.segment_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudReferenceLineResponse::CopyFrom(const CloudReferenceLineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning_internal.CloudReferenceLineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudReferenceLineResponse::IsInitialized() const {
  return true;
}

void CloudReferenceLineResponse::InternalSwap(CloudReferenceLineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.segment_.InternalSwap(&other->_impl_.segment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudReferenceLineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto[22]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning_internal
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::Debug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SpeedPlan*
Arena::CreateMaybeMessage< ::apollo::planning_internal::SpeedPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::SpeedPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::StGraphBoundaryDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::StGraphBoundaryDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::StGraphBoundaryDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SLFrameDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::SLFrameDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::SLFrameDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint*
Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef*
Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef*
Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::STGraphDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::STGraphDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::STGraphDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SignalLightDebug_SignalDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::SignalLightDebug_SignalDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::SignalLightDebug_SignalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SignalLightDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::SignalLightDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::SignalLightDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::DecisionTag*
Arena::CreateMaybeMessage< ::apollo::planning_internal::DecisionTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::DecisionTag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::ObstacleDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::ObstacleDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::ObstacleDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::ReferenceLineDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::ReferenceLineDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::ReferenceLineDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::SampleLayerDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::SampleLayerDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::SampleLayerDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::DpPolyGraphDebug*
Arena::CreateMaybeMessage< ::apollo::planning_internal::DpPolyGraphDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::DpPolyGraphDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::PlanningData*
Arena::CreateMaybeMessage< ::apollo::planning_internal::PlanningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::PlanningData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::LatticeStPixel*
Arena::CreateMaybeMessage< ::apollo::planning_internal::LatticeStPixel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::LatticeStPixel >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::LatticeStTraining*
Arena::CreateMaybeMessage< ::apollo::planning_internal::LatticeStTraining >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::LatticeStTraining >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CostComponents*
Arena::CreateMaybeMessage< ::apollo::planning_internal::CostComponents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::CostComponents >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::AutoTuningTrainingData*
Arena::CreateMaybeMessage< ::apollo::planning_internal::AutoTuningTrainingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::AutoTuningTrainingData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineRequest*
Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::CloudReferenceLineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineRoutingRequest*
Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineRoutingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::CloudReferenceLineRoutingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning_internal::CloudReferenceLineResponse*
Arena::CreateMaybeMessage< ::apollo::planning_internal::CloudReferenceLineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning_internal::CloudReferenceLineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
