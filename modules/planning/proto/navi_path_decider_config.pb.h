// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class LateralShiftConfigTable;
struct LateralShiftConfigTableDefaultTypeInternal;
extern LateralShiftConfigTableDefaultTypeInternal _LateralShiftConfigTable_default_instance_;
class NaviPathDeciderConfig;
struct NaviPathDeciderConfigDefaultTypeInternal;
extern NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
class ShiftConfig;
struct ShiftConfigDefaultTypeInternal;
extern ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::LateralShiftConfigTable* Arena::CreateMaybeMessage<::apollo::planning::LateralShiftConfigTable>(Arena*);
template<> ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(Arena*);
template<> ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage<::apollo::planning::ShiftConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class NaviPathDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviPathDeciderConfig) */ {
 public:
  inline NaviPathDeciderConfig() : NaviPathDeciderConfig(nullptr) {}
  ~NaviPathDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviPathDeciderConfig(const NaviPathDeciderConfig& from);
  NaviPathDeciderConfig(NaviPathDeciderConfig&& from) noexcept
    : NaviPathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviPathDeciderConfig& operator=(const NaviPathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviPathDeciderConfig& operator=(NaviPathDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviPathDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviPathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPathDeciderConfig*>(
               &_NaviPathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NaviPathDeciderConfig& a, NaviPathDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviPathDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviPathDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviPathDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviPathDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviPathDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviPathDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviPathDeciderConfig";
  }
  protected:
  explicit NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaterShiftConfigTableFieldNumber = 8,
    kMinPathLengthFieldNumber = 1,
    kMinLookForwardTimeFieldNumber = 2,
    kDefaultMinSmoothInitYFieldNumber = 3,
    kDefaultMaxSmoothInitYFieldNumber = 4,
    kDefaultThetaChangeRatioFieldNumber = 5,
    kMaxLateralDistanceFieldNumber = 6,
    kPathLCostFieldNumber = 7,
  };
  // optional .apollo.planning.LateralShiftConfigTable later_shift_config_table = 8;
  bool has_later_shift_config_table() const;
  private:
  bool _internal_has_later_shift_config_table() const;
  public:
  void clear_later_shift_config_table();
  const ::apollo::planning::LateralShiftConfigTable& later_shift_config_table() const;
  PROTOBUF_NODISCARD ::apollo::planning::LateralShiftConfigTable* release_later_shift_config_table();
  ::apollo::planning::LateralShiftConfigTable* mutable_later_shift_config_table();
  void set_allocated_later_shift_config_table(::apollo::planning::LateralShiftConfigTable* later_shift_config_table);
  private:
  const ::apollo::planning::LateralShiftConfigTable& _internal_later_shift_config_table() const;
  ::apollo::planning::LateralShiftConfigTable* _internal_mutable_later_shift_config_table();
  public:
  void unsafe_arena_set_allocated_later_shift_config_table(
      ::apollo::planning::LateralShiftConfigTable* later_shift_config_table);
  ::apollo::planning::LateralShiftConfigTable* unsafe_arena_release_later_shift_config_table();

  // optional uint32 min_path_length = 1 [default = 5];
  bool has_min_path_length() const;
  private:
  bool _internal_has_min_path_length() const;
  public:
  void clear_min_path_length();
  uint32_t min_path_length() const;
  void set_min_path_length(uint32_t value);
  private:
  uint32_t _internal_min_path_length() const;
  void _internal_set_min_path_length(uint32_t value);
  public:

  // optional uint32 min_look_forward_time = 2 [default = 2];
  bool has_min_look_forward_time() const;
  private:
  bool _internal_has_min_look_forward_time() const;
  public:
  void clear_min_look_forward_time();
  uint32_t min_look_forward_time() const;
  void set_min_look_forward_time(uint32_t value);
  private:
  uint32_t _internal_min_look_forward_time() const;
  void _internal_set_min_look_forward_time(uint32_t value);
  public:

  // optional double default_min_smooth_init_y = 3 [default = 0.1];
  bool has_default_min_smooth_init_y() const;
  private:
  bool _internal_has_default_min_smooth_init_y() const;
  public:
  void clear_default_min_smooth_init_y();
  double default_min_smooth_init_y() const;
  void set_default_min_smooth_init_y(double value);
  private:
  double _internal_default_min_smooth_init_y() const;
  void _internal_set_default_min_smooth_init_y(double value);
  public:

  // optional double default_max_smooth_init_y = 4 [default = 0.4];
  bool has_default_max_smooth_init_y() const;
  private:
  bool _internal_has_default_max_smooth_init_y() const;
  public:
  void clear_default_max_smooth_init_y();
  double default_max_smooth_init_y() const;
  void set_default_max_smooth_init_y(double value);
  private:
  double _internal_default_max_smooth_init_y() const;
  void _internal_set_default_max_smooth_init_y(double value);
  public:

  // optional double default_theta_change_ratio = 5 [default = 15];
  bool has_default_theta_change_ratio() const;
  private:
  bool _internal_has_default_theta_change_ratio() const;
  public:
  void clear_default_theta_change_ratio();
  double default_theta_change_ratio() const;
  void set_default_theta_change_ratio(double value);
  private:
  double _internal_default_theta_change_ratio() const;
  void _internal_set_default_theta_change_ratio(double value);
  public:

  // optional double max_lateral_distance = 6 [default = 6];
  bool has_max_lateral_distance() const;
  private:
  bool _internal_has_max_lateral_distance() const;
  public:
  void clear_max_lateral_distance();
  double max_lateral_distance() const;
  void set_max_lateral_distance(double value);
  private:
  double _internal_max_lateral_distance() const;
  void _internal_set_max_lateral_distance(double value);
  public:

  // optional double path_l_cost = 7 [default = 6.5];
  bool has_path_l_cost() const;
  private:
  bool _internal_has_path_l_cost() const;
  public:
  void clear_path_l_cost();
  double path_l_cost() const;
  void set_path_l_cost(double value);
  private:
  double _internal_path_l_cost() const;
  void _internal_set_path_l_cost(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviPathDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::LateralShiftConfigTable* later_shift_config_table_;
    uint32_t min_path_length_;
    uint32_t min_look_forward_time_;
    double default_min_smooth_init_y_;
    double default_max_smooth_init_y_;
    double default_theta_change_ratio_;
    double max_lateral_distance_;
    double path_l_cost_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LateralShiftConfigTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LateralShiftConfigTable) */ {
 public:
  inline LateralShiftConfigTable() : LateralShiftConfigTable(nullptr) {}
  ~LateralShiftConfigTable() override;
  explicit PROTOBUF_CONSTEXPR LateralShiftConfigTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LateralShiftConfigTable(const LateralShiftConfigTable& from);
  LateralShiftConfigTable(LateralShiftConfigTable&& from) noexcept
    : LateralShiftConfigTable() {
    *this = ::std::move(from);
  }

  inline LateralShiftConfigTable& operator=(const LateralShiftConfigTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline LateralShiftConfigTable& operator=(LateralShiftConfigTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LateralShiftConfigTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const LateralShiftConfigTable* internal_default_instance() {
    return reinterpret_cast<const LateralShiftConfigTable*>(
               &_LateralShiftConfigTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LateralShiftConfigTable& a, LateralShiftConfigTable& b) {
    a.Swap(&b);
  }
  inline void Swap(LateralShiftConfigTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LateralShiftConfigTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LateralShiftConfigTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LateralShiftConfigTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LateralShiftConfigTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LateralShiftConfigTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LateralShiftConfigTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LateralShiftConfigTable";
  }
  protected:
  explicit LateralShiftConfigTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLateralShiftFieldNumber = 1,
  };
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  int lateral_shift_size() const;
  private:
  int _internal_lateral_shift_size() const;
  public:
  void clear_lateral_shift();
  ::apollo::planning::ShiftConfig* mutable_lateral_shift(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
      mutable_lateral_shift();
  private:
  const ::apollo::planning::ShiftConfig& _internal_lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* _internal_add_lateral_shift();
  public:
  const ::apollo::planning::ShiftConfig& lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* add_lateral_shift();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
      lateral_shift() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.LateralShiftConfigTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig > lateral_shift_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ShiftConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ShiftConfig) */ {
 public:
  inline ShiftConfig() : ShiftConfig(nullptr) {}
  ~ShiftConfig() override;
  explicit PROTOBUF_CONSTEXPR ShiftConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShiftConfig(const ShiftConfig& from);
  ShiftConfig(ShiftConfig&& from) noexcept
    : ShiftConfig() {
    *this = ::std::move(from);
  }

  inline ShiftConfig& operator=(const ShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftConfig& operator=(ShiftConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShiftConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShiftConfig* internal_default_instance() {
    return reinterpret_cast<const ShiftConfig*>(
               &_ShiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShiftConfig& a, ShiftConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShiftConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShiftConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShiftConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShiftConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ShiftConfig";
  }
  protected:
  explicit ShiftConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSpeedFieldNumber = 1,
    kMinDistanceFieldNumber = 2,
    kMaxDistanceFieldNumber = 3,
    kThetaChangeRatioFieldNumber = 4,
  };
  // optional double max_speed = 1 [default = 4.16];
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // optional double min_distance = 2 [default = 0.1];
  bool has_min_distance() const;
  private:
  bool _internal_has_min_distance() const;
  public:
  void clear_min_distance();
  double min_distance() const;
  void set_min_distance(double value);
  private:
  double _internal_min_distance() const;
  void _internal_set_min_distance(double value);
  public:

  // optional double max_distance = 3 [default = 0.4];
  bool has_max_distance() const;
  private:
  bool _internal_has_max_distance() const;
  public:
  void clear_max_distance();
  double max_distance() const;
  void set_max_distance(double value);
  private:
  double _internal_max_distance() const;
  void _internal_set_max_distance(double value);
  public:

  // optional double theta_change_ratio = 4 [default = 15];
  bool has_theta_change_ratio() const;
  private:
  bool _internal_has_theta_change_ratio() const;
  public:
  void clear_theta_change_ratio();
  double theta_change_ratio() const;
  void set_theta_change_ratio(double value);
  private:
  double _internal_theta_change_ratio() const;
  void _internal_set_theta_change_ratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ShiftConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_speed_;
    double min_distance_;
    double max_distance_;
    double theta_change_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NaviPathDeciderConfig

// optional uint32 min_path_length = 1 [default = 5];
inline bool NaviPathDeciderConfig::_internal_has_min_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_path_length() const {
  return _internal_has_min_path_length();
}
inline void NaviPathDeciderConfig::clear_min_path_length() {
  _impl_.min_path_length_ = 5u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t NaviPathDeciderConfig::_internal_min_path_length() const {
  return _impl_.min_path_length_;
}
inline uint32_t NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_path_length)
  return _internal_min_path_length();
}
inline void NaviPathDeciderConfig::_internal_set_min_path_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_path_length_ = value;
}
inline void NaviPathDeciderConfig::set_min_path_length(uint32_t value) {
  _internal_set_min_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
inline bool NaviPathDeciderConfig::_internal_has_min_look_forward_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return _internal_has_min_look_forward_time();
}
inline void NaviPathDeciderConfig::clear_min_look_forward_time() {
  _impl_.min_look_forward_time_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t NaviPathDeciderConfig::_internal_min_look_forward_time() const {
  return _impl_.min_look_forward_time_;
}
inline uint32_t NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
  return _internal_min_look_forward_time();
}
inline void NaviPathDeciderConfig::_internal_set_min_look_forward_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_look_forward_time_ = value;
}
inline void NaviPathDeciderConfig::set_min_look_forward_time(uint32_t value) {
  _internal_set_min_look_forward_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double default_min_smooth_init_y = 3 [default = 0.1];
inline bool NaviPathDeciderConfig::_internal_has_default_min_smooth_init_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_default_min_smooth_init_y() const {
  return _internal_has_default_min_smooth_init_y();
}
inline void NaviPathDeciderConfig::clear_default_min_smooth_init_y() {
  _impl_.default_min_smooth_init_y_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double NaviPathDeciderConfig::_internal_default_min_smooth_init_y() const {
  return _impl_.default_min_smooth_init_y_;
}
inline double NaviPathDeciderConfig::default_min_smooth_init_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.default_min_smooth_init_y)
  return _internal_default_min_smooth_init_y();
}
inline void NaviPathDeciderConfig::_internal_set_default_min_smooth_init_y(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.default_min_smooth_init_y_ = value;
}
inline void NaviPathDeciderConfig::set_default_min_smooth_init_y(double value) {
  _internal_set_default_min_smooth_init_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.default_min_smooth_init_y)
}

// optional double default_max_smooth_init_y = 4 [default = 0.4];
inline bool NaviPathDeciderConfig::_internal_has_default_max_smooth_init_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_default_max_smooth_init_y() const {
  return _internal_has_default_max_smooth_init_y();
}
inline void NaviPathDeciderConfig::clear_default_max_smooth_init_y() {
  _impl_.default_max_smooth_init_y_ = 0.4;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double NaviPathDeciderConfig::_internal_default_max_smooth_init_y() const {
  return _impl_.default_max_smooth_init_y_;
}
inline double NaviPathDeciderConfig::default_max_smooth_init_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.default_max_smooth_init_y)
  return _internal_default_max_smooth_init_y();
}
inline void NaviPathDeciderConfig::_internal_set_default_max_smooth_init_y(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.default_max_smooth_init_y_ = value;
}
inline void NaviPathDeciderConfig::set_default_max_smooth_init_y(double value) {
  _internal_set_default_max_smooth_init_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.default_max_smooth_init_y)
}

// optional double default_theta_change_ratio = 5 [default = 15];
inline bool NaviPathDeciderConfig::_internal_has_default_theta_change_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_default_theta_change_ratio() const {
  return _internal_has_default_theta_change_ratio();
}
inline void NaviPathDeciderConfig::clear_default_theta_change_ratio() {
  _impl_.default_theta_change_ratio_ = 15;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double NaviPathDeciderConfig::_internal_default_theta_change_ratio() const {
  return _impl_.default_theta_change_ratio_;
}
inline double NaviPathDeciderConfig::default_theta_change_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.default_theta_change_ratio)
  return _internal_default_theta_change_ratio();
}
inline void NaviPathDeciderConfig::_internal_set_default_theta_change_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.default_theta_change_ratio_ = value;
}
inline void NaviPathDeciderConfig::set_default_theta_change_ratio(double value) {
  _internal_set_default_theta_change_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.default_theta_change_ratio)
}

// optional double max_lateral_distance = 6 [default = 6];
inline bool NaviPathDeciderConfig::_internal_has_max_lateral_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_lateral_distance() const {
  return _internal_has_max_lateral_distance();
}
inline void NaviPathDeciderConfig::clear_max_lateral_distance() {
  _impl_.max_lateral_distance_ = 6;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double NaviPathDeciderConfig::_internal_max_lateral_distance() const {
  return _impl_.max_lateral_distance_;
}
inline double NaviPathDeciderConfig::max_lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_lateral_distance)
  return _internal_max_lateral_distance();
}
inline void NaviPathDeciderConfig::_internal_set_max_lateral_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_lateral_distance_ = value;
}
inline void NaviPathDeciderConfig::set_max_lateral_distance(double value) {
  _internal_set_max_lateral_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_lateral_distance)
}

// optional double path_l_cost = 7 [default = 6.5];
inline bool NaviPathDeciderConfig::_internal_has_path_l_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_path_l_cost() const {
  return _internal_has_path_l_cost();
}
inline void NaviPathDeciderConfig::clear_path_l_cost() {
  _impl_.path_l_cost_ = 6.5;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double NaviPathDeciderConfig::_internal_path_l_cost() const {
  return _impl_.path_l_cost_;
}
inline double NaviPathDeciderConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.path_l_cost)
  return _internal_path_l_cost();
}
inline void NaviPathDeciderConfig::_internal_set_path_l_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.path_l_cost_ = value;
}
inline void NaviPathDeciderConfig::set_path_l_cost(double value) {
  _internal_set_path_l_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.path_l_cost)
}

// optional .apollo.planning.LateralShiftConfigTable later_shift_config_table = 8;
inline bool NaviPathDeciderConfig::_internal_has_later_shift_config_table() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.later_shift_config_table_ != nullptr);
  return value;
}
inline bool NaviPathDeciderConfig::has_later_shift_config_table() const {
  return _internal_has_later_shift_config_table();
}
inline void NaviPathDeciderConfig::clear_later_shift_config_table() {
  if (_impl_.later_shift_config_table_ != nullptr) _impl_.later_shift_config_table_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::LateralShiftConfigTable& NaviPathDeciderConfig::_internal_later_shift_config_table() const {
  const ::apollo::planning::LateralShiftConfigTable* p = _impl_.later_shift_config_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LateralShiftConfigTable&>(
      ::apollo::planning::_LateralShiftConfigTable_default_instance_);
}
inline const ::apollo::planning::LateralShiftConfigTable& NaviPathDeciderConfig::later_shift_config_table() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.later_shift_config_table)
  return _internal_later_shift_config_table();
}
inline void NaviPathDeciderConfig::unsafe_arena_set_allocated_later_shift_config_table(
    ::apollo::planning::LateralShiftConfigTable* later_shift_config_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.later_shift_config_table_);
  }
  _impl_.later_shift_config_table_ = later_shift_config_table;
  if (later_shift_config_table) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.NaviPathDeciderConfig.later_shift_config_table)
}
inline ::apollo::planning::LateralShiftConfigTable* NaviPathDeciderConfig::release_later_shift_config_table() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LateralShiftConfigTable* temp = _impl_.later_shift_config_table_;
  _impl_.later_shift_config_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LateralShiftConfigTable* NaviPathDeciderConfig::unsafe_arena_release_later_shift_config_table() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPathDeciderConfig.later_shift_config_table)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LateralShiftConfigTable* temp = _impl_.later_shift_config_table_;
  _impl_.later_shift_config_table_ = nullptr;
  return temp;
}
inline ::apollo::planning::LateralShiftConfigTable* NaviPathDeciderConfig::_internal_mutable_later_shift_config_table() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.later_shift_config_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LateralShiftConfigTable>(GetArenaForAllocation());
    _impl_.later_shift_config_table_ = p;
  }
  return _impl_.later_shift_config_table_;
}
inline ::apollo::planning::LateralShiftConfigTable* NaviPathDeciderConfig::mutable_later_shift_config_table() {
  ::apollo::planning::LateralShiftConfigTable* _msg = _internal_mutable_later_shift_config_table();
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPathDeciderConfig.later_shift_config_table)
  return _msg;
}
inline void NaviPathDeciderConfig::set_allocated_later_shift_config_table(::apollo::planning::LateralShiftConfigTable* later_shift_config_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.later_shift_config_table_;
  }
  if (later_shift_config_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(later_shift_config_table);
    if (message_arena != submessage_arena) {
      later_shift_config_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, later_shift_config_table, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.later_shift_config_table_ = later_shift_config_table;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPathDeciderConfig.later_shift_config_table)
}

// -------------------------------------------------------------------

// LateralShiftConfigTable

// repeated .apollo.planning.ShiftConfig lateral_shift = 1;
inline int LateralShiftConfigTable::_internal_lateral_shift_size() const {
  return _impl_.lateral_shift_.size();
}
inline int LateralShiftConfigTable::lateral_shift_size() const {
  return _internal_lateral_shift_size();
}
inline void LateralShiftConfigTable::clear_lateral_shift() {
  _impl_.lateral_shift_.Clear();
}
inline ::apollo::planning::ShiftConfig* LateralShiftConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LateralShiftConfigTable.lateral_shift)
  return _impl_.lateral_shift_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
LateralShiftConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LateralShiftConfigTable.lateral_shift)
  return &_impl_.lateral_shift_;
}
inline const ::apollo::planning::ShiftConfig& LateralShiftConfigTable::_internal_lateral_shift(int index) const {
  return _impl_.lateral_shift_.Get(index);
}
inline const ::apollo::planning::ShiftConfig& LateralShiftConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LateralShiftConfigTable.lateral_shift)
  return _internal_lateral_shift(index);
}
inline ::apollo::planning::ShiftConfig* LateralShiftConfigTable::_internal_add_lateral_shift() {
  return _impl_.lateral_shift_.Add();
}
inline ::apollo::planning::ShiftConfig* LateralShiftConfigTable::add_lateral_shift() {
  ::apollo::planning::ShiftConfig* _add = _internal_add_lateral_shift();
  // @@protoc_insertion_point(field_add:apollo.planning.LateralShiftConfigTable.lateral_shift)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
LateralShiftConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LateralShiftConfigTable.lateral_shift)
  return _impl_.lateral_shift_;
}

// -------------------------------------------------------------------

// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
inline bool ShiftConfig::_internal_has_max_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void ShiftConfig::clear_max_speed() {
  _impl_.max_speed_ = 4.16;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ShiftConfig::_internal_max_speed() const {
  return _impl_.max_speed_;
}
inline double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_speed)
  return _internal_max_speed();
}
inline void ShiftConfig::_internal_set_max_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_speed_ = value;
}
inline void ShiftConfig::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_speed)
}

// optional double min_distance = 2 [default = 0.1];
inline bool ShiftConfig::_internal_has_min_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftConfig::has_min_distance() const {
  return _internal_has_min_distance();
}
inline void ShiftConfig::clear_min_distance() {
  _impl_.min_distance_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ShiftConfig::_internal_min_distance() const {
  return _impl_.min_distance_;
}
inline double ShiftConfig::min_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.min_distance)
  return _internal_min_distance();
}
inline void ShiftConfig::_internal_set_min_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_distance_ = value;
}
inline void ShiftConfig::set_min_distance(double value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.min_distance)
}

// optional double max_distance = 3 [default = 0.4];
inline bool ShiftConfig::_internal_has_max_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_distance() const {
  return _internal_has_max_distance();
}
inline void ShiftConfig::clear_max_distance() {
  _impl_.max_distance_ = 0.4;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ShiftConfig::_internal_max_distance() const {
  return _impl_.max_distance_;
}
inline double ShiftConfig::max_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_distance)
  return _internal_max_distance();
}
inline void ShiftConfig::_internal_set_max_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_distance_ = value;
}
inline void ShiftConfig::set_max_distance(double value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_distance)
}

// optional double theta_change_ratio = 4 [default = 15];
inline bool ShiftConfig::_internal_has_theta_change_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShiftConfig::has_theta_change_ratio() const {
  return _internal_has_theta_change_ratio();
}
inline void ShiftConfig::clear_theta_change_ratio() {
  _impl_.theta_change_ratio_ = 15;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ShiftConfig::_internal_theta_change_ratio() const {
  return _impl_.theta_change_ratio_;
}
inline double ShiftConfig::theta_change_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.theta_change_ratio)
  return _internal_theta_change_ratio();
}
inline void ShiftConfig::_internal_set_theta_change_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.theta_change_ratio_ = value;
}
inline void ShiftConfig::set_theta_change_ratio(double value) {
  _internal_set_theta_change_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.theta_change_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto
