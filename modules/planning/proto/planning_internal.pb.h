// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/localization/proto/localization.pb.h"
#include "modules/map/relative_map/proto/navigation.pb.h"
#include "modules/routing/proto/routing.pb.h"
#include "modules/perception/proto/traffic_light_detection.pb.h"
#include "modules/planning/proto/sl_boundary.pb.h"
#include "modules/planning/proto/decision.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
namespace apollo {
namespace planning_internal {
class AutoTuningTrainingData;
struct AutoTuningTrainingDataDefaultTypeInternal;
extern AutoTuningTrainingDataDefaultTypeInternal _AutoTuningTrainingData_default_instance_;
class CloudReferenceLineRequest;
struct CloudReferenceLineRequestDefaultTypeInternal;
extern CloudReferenceLineRequestDefaultTypeInternal _CloudReferenceLineRequest_default_instance_;
class CloudReferenceLineResponse;
struct CloudReferenceLineResponseDefaultTypeInternal;
extern CloudReferenceLineResponseDefaultTypeInternal _CloudReferenceLineResponse_default_instance_;
class CloudReferenceLineRoutingRequest;
struct CloudReferenceLineRoutingRequestDefaultTypeInternal;
extern CloudReferenceLineRoutingRequestDefaultTypeInternal _CloudReferenceLineRoutingRequest_default_instance_;
class CostComponents;
struct CostComponentsDefaultTypeInternal;
extern CostComponentsDefaultTypeInternal _CostComponents_default_instance_;
class Debug;
struct DebugDefaultTypeInternal;
extern DebugDefaultTypeInternal _Debug_default_instance_;
class DecisionTag;
struct DecisionTagDefaultTypeInternal;
extern DecisionTagDefaultTypeInternal _DecisionTag_default_instance_;
class DpPolyGraphDebug;
struct DpPolyGraphDebugDefaultTypeInternal;
extern DpPolyGraphDebugDefaultTypeInternal _DpPolyGraphDebug_default_instance_;
class LatticeStPixel;
struct LatticeStPixelDefaultTypeInternal;
extern LatticeStPixelDefaultTypeInternal _LatticeStPixel_default_instance_;
class LatticeStTraining;
struct LatticeStTrainingDefaultTypeInternal;
extern LatticeStTrainingDefaultTypeInternal _LatticeStTraining_default_instance_;
class ObstacleDebug;
struct ObstacleDebugDefaultTypeInternal;
extern ObstacleDebugDefaultTypeInternal _ObstacleDebug_default_instance_;
class PlanningData;
struct PlanningDataDefaultTypeInternal;
extern PlanningDataDefaultTypeInternal _PlanningData_default_instance_;
class ReferenceLineDebug;
struct ReferenceLineDebugDefaultTypeInternal;
extern ReferenceLineDebugDefaultTypeInternal _ReferenceLineDebug_default_instance_;
class SLFrameDebug;
struct SLFrameDebugDefaultTypeInternal;
extern SLFrameDebugDefaultTypeInternal _SLFrameDebug_default_instance_;
class STGraphDebug;
struct STGraphDebugDefaultTypeInternal;
extern STGraphDebugDefaultTypeInternal _STGraphDebug_default_instance_;
class STGraphDebug_STGraphKernelCuiseRef;
struct STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelCuiseRefDefaultTypeInternal _STGraphDebug_STGraphKernelCuiseRef_default_instance_;
class STGraphDebug_STGraphKernelFollowRef;
struct STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal;
extern STGraphDebug_STGraphKernelFollowRefDefaultTypeInternal _STGraphDebug_STGraphKernelFollowRef_default_instance_;
class STGraphDebug_STGraphSpeedConstraint;
struct STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal;
extern STGraphDebug_STGraphSpeedConstraintDefaultTypeInternal _STGraphDebug_STGraphSpeedConstraint_default_instance_;
class SampleLayerDebug;
struct SampleLayerDebugDefaultTypeInternal;
extern SampleLayerDebugDefaultTypeInternal _SampleLayerDebug_default_instance_;
class SignalLightDebug;
struct SignalLightDebugDefaultTypeInternal;
extern SignalLightDebugDefaultTypeInternal _SignalLightDebug_default_instance_;
class SignalLightDebug_SignalDebug;
struct SignalLightDebug_SignalDebugDefaultTypeInternal;
extern SignalLightDebug_SignalDebugDefaultTypeInternal _SignalLightDebug_SignalDebug_default_instance_;
class SpeedPlan;
struct SpeedPlanDefaultTypeInternal;
extern SpeedPlanDefaultTypeInternal _SpeedPlan_default_instance_;
class StGraphBoundaryDebug;
struct StGraphBoundaryDebugDefaultTypeInternal;
extern StGraphBoundaryDebugDefaultTypeInternal _StGraphBoundaryDebug_default_instance_;
}  // namespace planning_internal
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning_internal::AutoTuningTrainingData* Arena::CreateMaybeMessage<::apollo::planning_internal::AutoTuningTrainingData>(Arena*);
template<> ::apollo::planning_internal::CloudReferenceLineRequest* Arena::CreateMaybeMessage<::apollo::planning_internal::CloudReferenceLineRequest>(Arena*);
template<> ::apollo::planning_internal::CloudReferenceLineResponse* Arena::CreateMaybeMessage<::apollo::planning_internal::CloudReferenceLineResponse>(Arena*);
template<> ::apollo::planning_internal::CloudReferenceLineRoutingRequest* Arena::CreateMaybeMessage<::apollo::planning_internal::CloudReferenceLineRoutingRequest>(Arena*);
template<> ::apollo::planning_internal::CostComponents* Arena::CreateMaybeMessage<::apollo::planning_internal::CostComponents>(Arena*);
template<> ::apollo::planning_internal::Debug* Arena::CreateMaybeMessage<::apollo::planning_internal::Debug>(Arena*);
template<> ::apollo::planning_internal::DecisionTag* Arena::CreateMaybeMessage<::apollo::planning_internal::DecisionTag>(Arena*);
template<> ::apollo::planning_internal::DpPolyGraphDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::DpPolyGraphDebug>(Arena*);
template<> ::apollo::planning_internal::LatticeStPixel* Arena::CreateMaybeMessage<::apollo::planning_internal::LatticeStPixel>(Arena*);
template<> ::apollo::planning_internal::LatticeStTraining* Arena::CreateMaybeMessage<::apollo::planning_internal::LatticeStTraining>(Arena*);
template<> ::apollo::planning_internal::ObstacleDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::ObstacleDebug>(Arena*);
template<> ::apollo::planning_internal::PlanningData* Arena::CreateMaybeMessage<::apollo::planning_internal::PlanningData>(Arena*);
template<> ::apollo::planning_internal::ReferenceLineDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::ReferenceLineDebug>(Arena*);
template<> ::apollo::planning_internal::SLFrameDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::SLFrameDebug>(Arena*);
template<> ::apollo::planning_internal::STGraphDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::STGraphDebug>(Arena*);
template<> ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* Arena::CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef>(Arena*);
template<> ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* Arena::CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef>(Arena*);
template<> ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* Arena::CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint>(Arena*);
template<> ::apollo::planning_internal::SampleLayerDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::SampleLayerDebug>(Arena*);
template<> ::apollo::planning_internal::SignalLightDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::SignalLightDebug>(Arena*);
template<> ::apollo::planning_internal::SignalLightDebug_SignalDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::SignalLightDebug_SignalDebug>(Arena*);
template<> ::apollo::planning_internal::SpeedPlan* Arena::CreateMaybeMessage<::apollo::planning_internal::SpeedPlan>(Arena*);
template<> ::apollo::planning_internal::StGraphBoundaryDebug* Arena::CreateMaybeMessage<::apollo::planning_internal::StGraphBoundaryDebug>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning_internal {

enum StGraphBoundaryDebug_StBoundaryType : int {
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN = 1,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP = 2,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW = 3,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD = 4,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE = 5,
  StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR = 6
};
bool StGraphBoundaryDebug_StBoundaryType_IsValid(int value);
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
constexpr StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX = StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR;
constexpr int StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE = StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StGraphBoundaryDebug_StBoundaryType_descriptor();
template<typename T>
inline const std::string& StGraphBoundaryDebug_StBoundaryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StGraphBoundaryDebug_StBoundaryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StGraphBoundaryDebug_StBoundaryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), enum_t_value);
}
inline bool StGraphBoundaryDebug_StBoundaryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StGraphBoundaryDebug_StBoundaryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StGraphBoundaryDebug_StBoundaryType>(
    StGraphBoundaryDebug_StBoundaryType_descriptor(), name, value);
}
// ===================================================================

class Debug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.Debug) */ {
 public:
  inline Debug() : Debug(nullptr) {}
  ~Debug() override;
  explicit PROTOBUF_CONSTEXPR Debug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Debug(const Debug& from);
  Debug(Debug&& from) noexcept
    : Debug() {
    *this = ::std::move(from);
  }

  inline Debug& operator=(const Debug& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug& operator=(Debug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Debug& default_instance() {
    return *internal_default_instance();
  }
  static inline const Debug* internal_default_instance() {
    return reinterpret_cast<const Debug*>(
               &_Debug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Debug& a, Debug& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Debug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Debug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Debug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Debug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Debug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.Debug";
  }
  protected:
  explicit Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanningDataFieldNumber = 2,
  };
  // optional .apollo.planning_internal.PlanningData planning_data = 2;
  bool has_planning_data() const;
  private:
  bool _internal_has_planning_data() const;
  public:
  void clear_planning_data();
  const ::apollo::planning_internal::PlanningData& planning_data() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::PlanningData* release_planning_data();
  ::apollo::planning_internal::PlanningData* mutable_planning_data();
  void set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data);
  private:
  const ::apollo::planning_internal::PlanningData& _internal_planning_data() const;
  ::apollo::planning_internal::PlanningData* _internal_mutable_planning_data();
  public:
  void unsafe_arena_set_allocated_planning_data(
      ::apollo::planning_internal::PlanningData* planning_data);
  ::apollo::planning_internal::PlanningData* unsafe_arena_release_planning_data();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.Debug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning_internal::PlanningData* planning_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SpeedPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SpeedPlan) */ {
 public:
  inline SpeedPlan() : SpeedPlan(nullptr) {}
  ~SpeedPlan() override;
  explicit PROTOBUF_CONSTEXPR SpeedPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedPlan(const SpeedPlan& from);
  SpeedPlan(SpeedPlan&& from) noexcept
    : SpeedPlan() {
    *this = ::std::move(from);
  }

  inline SpeedPlan& operator=(const SpeedPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedPlan& operator=(SpeedPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedPlan* internal_default_instance() {
    return reinterpret_cast<const SpeedPlan*>(
               &_SpeedPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpeedPlan& a, SpeedPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedPlan& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.SpeedPlan";
  }
  protected:
  explicit SpeedPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedPointFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .apollo.common.SpeedPoint speed_point = 2;
  int speed_point_size() const;
  private:
  int _internal_speed_point_size() const;
  public:
  void clear_speed_point();
  ::apollo::common::SpeedPoint* mutable_speed_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_point();
  private:
  const ::apollo::common::SpeedPoint& _internal_speed_point(int index) const;
  ::apollo::common::SpeedPoint* _internal_add_speed_point();
  public:
  const ::apollo::common::SpeedPoint& speed_point(int index) const;
  ::apollo::common::SpeedPoint* add_speed_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_point() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SpeedPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_point_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class StGraphBoundaryDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.StGraphBoundaryDebug) */ {
 public:
  inline StGraphBoundaryDebug() : StGraphBoundaryDebug(nullptr) {}
  ~StGraphBoundaryDebug() override;
  explicit PROTOBUF_CONSTEXPR StGraphBoundaryDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StGraphBoundaryDebug(const StGraphBoundaryDebug& from);
  StGraphBoundaryDebug(StGraphBoundaryDebug&& from) noexcept
    : StGraphBoundaryDebug() {
    *this = ::std::move(from);
  }

  inline StGraphBoundaryDebug& operator=(const StGraphBoundaryDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline StGraphBoundaryDebug& operator=(StGraphBoundaryDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StGraphBoundaryDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const StGraphBoundaryDebug* internal_default_instance() {
    return reinterpret_cast<const StGraphBoundaryDebug*>(
               &_StGraphBoundaryDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StGraphBoundaryDebug& a, StGraphBoundaryDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(StGraphBoundaryDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StGraphBoundaryDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StGraphBoundaryDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StGraphBoundaryDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StGraphBoundaryDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StGraphBoundaryDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StGraphBoundaryDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.StGraphBoundaryDebug";
  }
  protected:
  explicit StGraphBoundaryDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StGraphBoundaryDebug_StBoundaryType StBoundaryType;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_UNKNOWN =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_UNKNOWN;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_STOP =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_STOP;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_FOLLOW =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_FOLLOW;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_YIELD =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_YIELD;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_OVERTAKE =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_OVERTAKE;
  static constexpr StBoundaryType ST_BOUNDARY_TYPE_KEEP_CLEAR =
    StGraphBoundaryDebug_StBoundaryType_ST_BOUNDARY_TYPE_KEEP_CLEAR;
  static inline bool StBoundaryType_IsValid(int value) {
    return StGraphBoundaryDebug_StBoundaryType_IsValid(value);
  }
  static constexpr StBoundaryType StBoundaryType_MIN =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MIN;
  static constexpr StBoundaryType StBoundaryType_MAX =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_MAX;
  static constexpr int StBoundaryType_ARRAYSIZE =
    StGraphBoundaryDebug_StBoundaryType_StBoundaryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StBoundaryType_descriptor() {
    return StGraphBoundaryDebug_StBoundaryType_descriptor();
  }
  template<typename T>
  static inline const std::string& StBoundaryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StBoundaryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StBoundaryType_Name.");
    return StGraphBoundaryDebug_StBoundaryType_Name(enum_t_value);
  }
  static inline bool StBoundaryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StBoundaryType* value) {
    return StGraphBoundaryDebug_StBoundaryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 2,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated .apollo.common.SpeedPoint point = 2;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::apollo::common::SpeedPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_point();
  private:
  const ::apollo::common::SpeedPoint& _internal_point(int index) const;
  ::apollo::common::SpeedPoint* _internal_add_point();
  public:
  const ::apollo::common::SpeedPoint& point(int index) const;
  ::apollo::common::SpeedPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      point() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType type() const;
  void set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value);
  private:
  ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType _internal_type() const;
  void _internal_set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.StGraphBoundaryDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint > point_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SLFrameDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SLFrameDebug) */ {
 public:
  inline SLFrameDebug() : SLFrameDebug(nullptr) {}
  ~SLFrameDebug() override;
  explicit PROTOBUF_CONSTEXPR SLFrameDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLFrameDebug(const SLFrameDebug& from);
  SLFrameDebug(SLFrameDebug&& from) noexcept
    : SLFrameDebug() {
    *this = ::std::move(from);
  }

  inline SLFrameDebug& operator=(const SLFrameDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLFrameDebug& operator=(SLFrameDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLFrameDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLFrameDebug* internal_default_instance() {
    return reinterpret_cast<const SLFrameDebug*>(
               &_SLFrameDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SLFrameDebug& a, SLFrameDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SLFrameDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLFrameDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLFrameDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLFrameDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLFrameDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SLFrameDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLFrameDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.SLFrameDebug";
  }
  protected:
  explicit SLFrameDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampledSFieldNumber = 2,
    kStaticObstacleLowerBoundFieldNumber = 3,
    kDynamicObstacleLowerBoundFieldNumber = 4,
    kStaticObstacleUpperBoundFieldNumber = 5,
    kDynamicObstacleUpperBoundFieldNumber = 6,
    kMapLowerBoundFieldNumber = 7,
    kMapUpperBoundFieldNumber = 8,
    kSlPathFieldNumber = 9,
    kAggregatedBoundarySFieldNumber = 10,
    kAggregatedBoundaryLowFieldNumber = 11,
    kAggregatedBoundaryHighFieldNumber = 12,
    kNameFieldNumber = 1,
  };
  // repeated double sampled_s = 2;
  int sampled_s_size() const;
  private:
  int _internal_sampled_s_size() const;
  public:
  void clear_sampled_s();
  private:
  double _internal_sampled_s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_sampled_s() const;
  void _internal_add_sampled_s(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_sampled_s();
  public:
  double sampled_s(int index) const;
  void set_sampled_s(int index, double value);
  void add_sampled_s(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      sampled_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_sampled_s();

  // repeated double static_obstacle_lower_bound = 3;
  int static_obstacle_lower_bound_size() const;
  private:
  int _internal_static_obstacle_lower_bound_size() const;
  public:
  void clear_static_obstacle_lower_bound();
  private:
  double _internal_static_obstacle_lower_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_static_obstacle_lower_bound() const;
  void _internal_add_static_obstacle_lower_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_static_obstacle_lower_bound();
  public:
  double static_obstacle_lower_bound(int index) const;
  void set_static_obstacle_lower_bound(int index, double value);
  void add_static_obstacle_lower_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      static_obstacle_lower_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_static_obstacle_lower_bound();

  // repeated double dynamic_obstacle_lower_bound = 4;
  int dynamic_obstacle_lower_bound_size() const;
  private:
  int _internal_dynamic_obstacle_lower_bound_size() const;
  public:
  void clear_dynamic_obstacle_lower_bound();
  private:
  double _internal_dynamic_obstacle_lower_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dynamic_obstacle_lower_bound() const;
  void _internal_add_dynamic_obstacle_lower_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dynamic_obstacle_lower_bound();
  public:
  double dynamic_obstacle_lower_bound(int index) const;
  void set_dynamic_obstacle_lower_bound(int index, double value);
  void add_dynamic_obstacle_lower_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dynamic_obstacle_lower_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dynamic_obstacle_lower_bound();

  // repeated double static_obstacle_upper_bound = 5;
  int static_obstacle_upper_bound_size() const;
  private:
  int _internal_static_obstacle_upper_bound_size() const;
  public:
  void clear_static_obstacle_upper_bound();
  private:
  double _internal_static_obstacle_upper_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_static_obstacle_upper_bound() const;
  void _internal_add_static_obstacle_upper_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_static_obstacle_upper_bound();
  public:
  double static_obstacle_upper_bound(int index) const;
  void set_static_obstacle_upper_bound(int index, double value);
  void add_static_obstacle_upper_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      static_obstacle_upper_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_static_obstacle_upper_bound();

  // repeated double dynamic_obstacle_upper_bound = 6;
  int dynamic_obstacle_upper_bound_size() const;
  private:
  int _internal_dynamic_obstacle_upper_bound_size() const;
  public:
  void clear_dynamic_obstacle_upper_bound();
  private:
  double _internal_dynamic_obstacle_upper_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dynamic_obstacle_upper_bound() const;
  void _internal_add_dynamic_obstacle_upper_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dynamic_obstacle_upper_bound();
  public:
  double dynamic_obstacle_upper_bound(int index) const;
  void set_dynamic_obstacle_upper_bound(int index, double value);
  void add_dynamic_obstacle_upper_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dynamic_obstacle_upper_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dynamic_obstacle_upper_bound();

  // repeated double map_lower_bound = 7;
  int map_lower_bound_size() const;
  private:
  int _internal_map_lower_bound_size() const;
  public:
  void clear_map_lower_bound();
  private:
  double _internal_map_lower_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_map_lower_bound() const;
  void _internal_add_map_lower_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_map_lower_bound();
  public:
  double map_lower_bound(int index) const;
  void set_map_lower_bound(int index, double value);
  void add_map_lower_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      map_lower_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_map_lower_bound();

  // repeated double map_upper_bound = 8;
  int map_upper_bound_size() const;
  private:
  int _internal_map_upper_bound_size() const;
  public:
  void clear_map_upper_bound();
  private:
  double _internal_map_upper_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_map_upper_bound() const;
  void _internal_add_map_upper_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_map_upper_bound();
  public:
  double map_upper_bound(int index) const;
  void set_map_upper_bound(int index, double value);
  void add_map_upper_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      map_upper_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_map_upper_bound();

  // repeated .apollo.common.SLPoint sl_path = 9;
  int sl_path_size() const;
  private:
  int _internal_sl_path_size() const;
  public:
  void clear_sl_path();
  ::apollo::common::SLPoint* mutable_sl_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_sl_path();
  private:
  const ::apollo::common::SLPoint& _internal_sl_path(int index) const;
  ::apollo::common::SLPoint* _internal_add_sl_path();
  public:
  const ::apollo::common::SLPoint& sl_path(int index) const;
  ::apollo::common::SLPoint* add_sl_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
      sl_path() const;

  // repeated double aggregated_boundary_s = 10;
  int aggregated_boundary_s_size() const;
  private:
  int _internal_aggregated_boundary_s_size() const;
  public:
  void clear_aggregated_boundary_s();
  private:
  double _internal_aggregated_boundary_s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_aggregated_boundary_s() const;
  void _internal_add_aggregated_boundary_s(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_aggregated_boundary_s();
  public:
  double aggregated_boundary_s(int index) const;
  void set_aggregated_boundary_s(int index, double value);
  void add_aggregated_boundary_s(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      aggregated_boundary_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_aggregated_boundary_s();

  // repeated double aggregated_boundary_low = 11;
  int aggregated_boundary_low_size() const;
  private:
  int _internal_aggregated_boundary_low_size() const;
  public:
  void clear_aggregated_boundary_low();
  private:
  double _internal_aggregated_boundary_low(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_aggregated_boundary_low() const;
  void _internal_add_aggregated_boundary_low(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_aggregated_boundary_low();
  public:
  double aggregated_boundary_low(int index) const;
  void set_aggregated_boundary_low(int index, double value);
  void add_aggregated_boundary_low(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      aggregated_boundary_low() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_aggregated_boundary_low();

  // repeated double aggregated_boundary_high = 12;
  int aggregated_boundary_high_size() const;
  private:
  int _internal_aggregated_boundary_high_size() const;
  public:
  void clear_aggregated_boundary_high();
  private:
  double _internal_aggregated_boundary_high(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_aggregated_boundary_high() const;
  void _internal_add_aggregated_boundary_high(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_aggregated_boundary_high();
  public:
  double aggregated_boundary_high(int index) const;
  void set_aggregated_boundary_high(int index, double value);
  void add_aggregated_boundary_high(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      aggregated_boundary_high() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_aggregated_boundary_high();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SLFrameDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > sampled_s_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > static_obstacle_lower_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dynamic_obstacle_lower_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > static_obstacle_upper_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dynamic_obstacle_upper_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > map_lower_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > map_upper_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint > sl_path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > aggregated_boundary_s_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > aggregated_boundary_low_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > aggregated_boundary_high_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphSpeedConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint) */ {
 public:
  inline STGraphDebug_STGraphSpeedConstraint() : STGraphDebug_STGraphSpeedConstraint(nullptr) {}
  ~STGraphDebug_STGraphSpeedConstraint() override;
  explicit PROTOBUF_CONSTEXPR STGraphDebug_STGraphSpeedConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STGraphDebug_STGraphSpeedConstraint(const STGraphDebug_STGraphSpeedConstraint& from);
  STGraphDebug_STGraphSpeedConstraint(STGraphDebug_STGraphSpeedConstraint&& from) noexcept
    : STGraphDebug_STGraphSpeedConstraint() {
    *this = ::std::move(from);
  }

  inline STGraphDebug_STGraphSpeedConstraint& operator=(const STGraphDebug_STGraphSpeedConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline STGraphDebug_STGraphSpeedConstraint& operator=(STGraphDebug_STGraphSpeedConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STGraphDebug_STGraphSpeedConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const STGraphDebug_STGraphSpeedConstraint* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphSpeedConstraint*>(
               &_STGraphDebug_STGraphSpeedConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(STGraphDebug_STGraphSpeedConstraint& a, STGraphDebug_STGraphSpeedConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(STGraphDebug_STGraphSpeedConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STGraphDebug_STGraphSpeedConstraint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STGraphDebug_STGraphSpeedConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STGraphDebug_STGraphSpeedConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STGraphDebug_STGraphSpeedConstraint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STGraphDebug_STGraphSpeedConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint";
  }
  protected:
  explicit STGraphDebug_STGraphSpeedConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kLowerBoundFieldNumber = 2,
    kUpperBoundFieldNumber = 3,
  };
  // repeated double t = 1;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  private:
  double _internal_t(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_t() const;
  void _internal_add_t(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_t();
  public:
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      t() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_t();

  // repeated double lower_bound = 2;
  int lower_bound_size() const;
  private:
  int _internal_lower_bound_size() const;
  public:
  void clear_lower_bound();
  private:
  double _internal_lower_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lower_bound() const;
  void _internal_add_lower_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lower_bound();
  public:
  double lower_bound(int index) const;
  void set_lower_bound(int index, double value);
  void add_lower_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lower_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lower_bound();

  // repeated double upper_bound = 3;
  int upper_bound_size() const;
  private:
  int _internal_upper_bound_size() const;
  public:
  void clear_upper_bound();
  private:
  double _internal_upper_bound(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_upper_bound() const;
  void _internal_add_upper_bound(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_upper_bound();
  public:
  double upper_bound(int index) const;
  void set_upper_bound(int index, double value);
  void add_upper_bound(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      upper_bound() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_upper_bound();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > t_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lower_bound_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > upper_bound_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelCuiseRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef) */ {
 public:
  inline STGraphDebug_STGraphKernelCuiseRef() : STGraphDebug_STGraphKernelCuiseRef(nullptr) {}
  ~STGraphDebug_STGraphKernelCuiseRef() override;
  explicit PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelCuiseRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STGraphDebug_STGraphKernelCuiseRef(const STGraphDebug_STGraphKernelCuiseRef& from);
  STGraphDebug_STGraphKernelCuiseRef(STGraphDebug_STGraphKernelCuiseRef&& from) noexcept
    : STGraphDebug_STGraphKernelCuiseRef() {
    *this = ::std::move(from);
  }

  inline STGraphDebug_STGraphKernelCuiseRef& operator=(const STGraphDebug_STGraphKernelCuiseRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline STGraphDebug_STGraphKernelCuiseRef& operator=(STGraphDebug_STGraphKernelCuiseRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STGraphDebug_STGraphKernelCuiseRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const STGraphDebug_STGraphKernelCuiseRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelCuiseRef*>(
               &_STGraphDebug_STGraphKernelCuiseRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(STGraphDebug_STGraphKernelCuiseRef& a, STGraphDebug_STGraphKernelCuiseRef& b) {
    a.Swap(&b);
  }
  inline void Swap(STGraphDebug_STGraphKernelCuiseRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STGraphDebug_STGraphKernelCuiseRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STGraphDebug_STGraphKernelCuiseRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STGraphDebug_STGraphKernelCuiseRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STGraphDebug_STGraphKernelCuiseRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STGraphDebug_STGraphKernelCuiseRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef";
  }
  protected:
  explicit STGraphDebug_STGraphKernelCuiseRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kCruiseLineSFieldNumber = 2,
  };
  // repeated double t = 1;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  private:
  double _internal_t(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_t() const;
  void _internal_add_t(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_t();
  public:
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      t() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_t();

  // repeated double cruise_line_s = 2;
  int cruise_line_s_size() const;
  private:
  int _internal_cruise_line_s_size() const;
  public:
  void clear_cruise_line_s();
  private:
  double _internal_cruise_line_s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cruise_line_s() const;
  void _internal_add_cruise_line_s(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cruise_line_s();
  public:
  double cruise_line_s(int index) const;
  void set_cruise_line_s(int index, double value);
  void add_cruise_line_s(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cruise_line_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cruise_line_s();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > t_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cruise_line_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class STGraphDebug_STGraphKernelFollowRef final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef) */ {
 public:
  inline STGraphDebug_STGraphKernelFollowRef() : STGraphDebug_STGraphKernelFollowRef(nullptr) {}
  ~STGraphDebug_STGraphKernelFollowRef() override;
  explicit PROTOBUF_CONSTEXPR STGraphDebug_STGraphKernelFollowRef(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STGraphDebug_STGraphKernelFollowRef(const STGraphDebug_STGraphKernelFollowRef& from);
  STGraphDebug_STGraphKernelFollowRef(STGraphDebug_STGraphKernelFollowRef&& from) noexcept
    : STGraphDebug_STGraphKernelFollowRef() {
    *this = ::std::move(from);
  }

  inline STGraphDebug_STGraphKernelFollowRef& operator=(const STGraphDebug_STGraphKernelFollowRef& from) {
    CopyFrom(from);
    return *this;
  }
  inline STGraphDebug_STGraphKernelFollowRef& operator=(STGraphDebug_STGraphKernelFollowRef&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STGraphDebug_STGraphKernelFollowRef& default_instance() {
    return *internal_default_instance();
  }
  static inline const STGraphDebug_STGraphKernelFollowRef* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug_STGraphKernelFollowRef*>(
               &_STGraphDebug_STGraphKernelFollowRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(STGraphDebug_STGraphKernelFollowRef& a, STGraphDebug_STGraphKernelFollowRef& b) {
    a.Swap(&b);
  }
  inline void Swap(STGraphDebug_STGraphKernelFollowRef* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STGraphDebug_STGraphKernelFollowRef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STGraphDebug_STGraphKernelFollowRef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STGraphDebug_STGraphKernelFollowRef>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STGraphDebug_STGraphKernelFollowRef& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STGraphDebug_STGraphKernelFollowRef* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef";
  }
  protected:
  explicit STGraphDebug_STGraphKernelFollowRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kFollowLineSFieldNumber = 2,
  };
  // repeated double t = 1;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  private:
  double _internal_t(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_t() const;
  void _internal_add_t(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_t();
  public:
  double t(int index) const;
  void set_t(int index, double value);
  void add_t(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      t() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_t();

  // repeated double follow_line_s = 2;
  int follow_line_s_size() const;
  private:
  int _internal_follow_line_s_size() const;
  public:
  void clear_follow_line_s();
  private:
  double _internal_follow_line_s(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_follow_line_s() const;
  void _internal_add_follow_line_s(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_follow_line_s();
  public:
  double follow_line_s(int index) const;
  void set_follow_line_s(int index, double value);
  void add_follow_line_s(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      follow_line_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_follow_line_s();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > t_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > follow_line_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class STGraphDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.STGraphDebug) */ {
 public:
  inline STGraphDebug() : STGraphDebug(nullptr) {}
  ~STGraphDebug() override;
  explicit PROTOBUF_CONSTEXPR STGraphDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STGraphDebug(const STGraphDebug& from);
  STGraphDebug(STGraphDebug&& from) noexcept
    : STGraphDebug() {
    *this = ::std::move(from);
  }

  inline STGraphDebug& operator=(const STGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline STGraphDebug& operator=(STGraphDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STGraphDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const STGraphDebug* internal_default_instance() {
    return reinterpret_cast<const STGraphDebug*>(
               &_STGraphDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(STGraphDebug& a, STGraphDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(STGraphDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STGraphDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STGraphDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STGraphDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STGraphDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STGraphDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STGraphDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.STGraphDebug";
  }
  protected:
  explicit STGraphDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef STGraphDebug_STGraphSpeedConstraint STGraphSpeedConstraint;
  typedef STGraphDebug_STGraphKernelCuiseRef STGraphKernelCuiseRef;
  typedef STGraphDebug_STGraphKernelFollowRef STGraphKernelFollowRef;

  // accessors -------------------------------------------------------

  enum : int {
    kBoundaryFieldNumber = 2,
    kSpeedLimitFieldNumber = 3,
    kSpeedProfileFieldNumber = 4,
    kNameFieldNumber = 1,
    kSpeedConstraintFieldNumber = 5,
    kKernelCruiseRefFieldNumber = 6,
    kKernelFollowRefFieldNumber = 7,
  };
  // repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
  int boundary_size() const;
  private:
  int _internal_boundary_size() const;
  public:
  void clear_boundary();
  ::apollo::planning_internal::StGraphBoundaryDebug* mutable_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
      mutable_boundary();
  private:
  const ::apollo::planning_internal::StGraphBoundaryDebug& _internal_boundary(int index) const;
  ::apollo::planning_internal::StGraphBoundaryDebug* _internal_add_boundary();
  public:
  const ::apollo::planning_internal::StGraphBoundaryDebug& boundary(int index) const;
  ::apollo::planning_internal::StGraphBoundaryDebug* add_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
      boundary() const;

  // repeated .apollo.common.SpeedPoint speed_limit = 3;
  int speed_limit_size() const;
  private:
  int _internal_speed_limit_size() const;
  public:
  void clear_speed_limit();
  ::apollo::common::SpeedPoint* mutable_speed_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_limit();
  private:
  const ::apollo::common::SpeedPoint& _internal_speed_limit(int index) const;
  ::apollo::common::SpeedPoint* _internal_add_speed_limit();
  public:
  const ::apollo::common::SpeedPoint& speed_limit(int index) const;
  ::apollo::common::SpeedPoint* add_speed_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_limit() const;

  // repeated .apollo.common.SpeedPoint speed_profile = 4;
  int speed_profile_size() const;
  private:
  int _internal_speed_profile_size() const;
  public:
  void clear_speed_profile();
  ::apollo::common::SpeedPoint* mutable_speed_profile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
      mutable_speed_profile();
  private:
  const ::apollo::common::SpeedPoint& _internal_speed_profile(int index) const;
  ::apollo::common::SpeedPoint* _internal_add_speed_profile();
  public:
  const ::apollo::common::SpeedPoint& speed_profile(int index) const;
  ::apollo::common::SpeedPoint* add_speed_profile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
      speed_profile() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
  bool has_speed_constraint() const;
  private:
  bool _internal_has_speed_constraint() const;
  public:
  void clear_speed_constraint();
  const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& speed_constraint() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* release_speed_constraint();
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* mutable_speed_constraint();
  void set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint);
  private:
  const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& _internal_speed_constraint() const;
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* _internal_mutable_speed_constraint();
  public:
  void unsafe_arena_set_allocated_speed_constraint(
      ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint);
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* unsafe_arena_release_speed_constraint();

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
  bool has_kernel_cruise_ref() const;
  private:
  bool _internal_has_kernel_cruise_ref() const;
  public:
  void clear_kernel_cruise_ref();
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& kernel_cruise_ref() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* release_kernel_cruise_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* mutable_kernel_cruise_ref();
  void set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref);
  private:
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& _internal_kernel_cruise_ref() const;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* _internal_mutable_kernel_cruise_ref();
  public:
  void unsafe_arena_set_allocated_kernel_cruise_ref(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref);
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* unsafe_arena_release_kernel_cruise_ref();

  // optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
  bool has_kernel_follow_ref() const;
  private:
  bool _internal_has_kernel_follow_ref() const;
  public:
  void clear_kernel_follow_ref();
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& kernel_follow_ref() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* release_kernel_follow_ref();
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* mutable_kernel_follow_ref();
  void set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref);
  private:
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& _internal_kernel_follow_ref() const;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* _internal_mutable_kernel_follow_ref();
  public:
  void unsafe_arena_set_allocated_kernel_follow_ref(
      ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref);
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* unsafe_arena_release_kernel_follow_ref();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.STGraphDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug > boundary_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_limit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint > speed_profile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint_;
    ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref_;
    ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SignalLightDebug_SignalDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SignalLightDebug.SignalDebug) */ {
 public:
  inline SignalLightDebug_SignalDebug() : SignalLightDebug_SignalDebug(nullptr) {}
  ~SignalLightDebug_SignalDebug() override;
  explicit PROTOBUF_CONSTEXPR SignalLightDebug_SignalDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalLightDebug_SignalDebug(const SignalLightDebug_SignalDebug& from);
  SignalLightDebug_SignalDebug(SignalLightDebug_SignalDebug&& from) noexcept
    : SignalLightDebug_SignalDebug() {
    *this = ::std::move(from);
  }

  inline SignalLightDebug_SignalDebug& operator=(const SignalLightDebug_SignalDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalLightDebug_SignalDebug& operator=(SignalLightDebug_SignalDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalLightDebug_SignalDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalLightDebug_SignalDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug_SignalDebug*>(
               &_SignalLightDebug_SignalDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SignalLightDebug_SignalDebug& a, SignalLightDebug_SignalDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalLightDebug_SignalDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalLightDebug_SignalDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalLightDebug_SignalDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalLightDebug_SignalDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalLightDebug_SignalDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignalLightDebug_SignalDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalLightDebug_SignalDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.SignalLightDebug.SignalDebug";
  }
  protected:
  explicit SignalLightDebug_SignalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLightIdFieldNumber = 1,
    kLightStopSFieldNumber = 3,
    kColorFieldNumber = 2,
    kIsStopWallCreatedFieldNumber = 5,
    kAdcStopDeaccelerationFieldNumber = 4,
  };
  // optional string light_id = 1;
  bool has_light_id() const;
  private:
  bool _internal_has_light_id() const;
  public:
  void clear_light_id();
  const std::string& light_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_light_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_light_id();
  PROTOBUF_NODISCARD std::string* release_light_id();
  void set_allocated_light_id(std::string* light_id);
  private:
  const std::string& _internal_light_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_light_id(const std::string& value);
  std::string* _internal_mutable_light_id();
  public:

  // optional double light_stop_s = 3;
  bool has_light_stop_s() const;
  private:
  bool _internal_has_light_stop_s() const;
  public:
  void clear_light_stop_s();
  double light_stop_s() const;
  void set_light_stop_s(double value);
  private:
  double _internal_light_stop_s() const;
  void _internal_set_light_stop_s(double value);
  public:

  // optional .apollo.perception.TrafficLight.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::apollo::perception::TrafficLight_Color color() const;
  void set_color(::apollo::perception::TrafficLight_Color value);
  private:
  ::apollo::perception::TrafficLight_Color _internal_color() const;
  void _internal_set_color(::apollo::perception::TrafficLight_Color value);
  public:

  // optional bool is_stop_wall_created = 5;
  bool has_is_stop_wall_created() const;
  private:
  bool _internal_has_is_stop_wall_created() const;
  public:
  void clear_is_stop_wall_created();
  bool is_stop_wall_created() const;
  void set_is_stop_wall_created(bool value);
  private:
  bool _internal_is_stop_wall_created() const;
  void _internal_set_is_stop_wall_created(bool value);
  public:

  // optional double adc_stop_deacceleration = 4;
  bool has_adc_stop_deacceleration() const;
  private:
  bool _internal_has_adc_stop_deacceleration() const;
  public:
  void clear_adc_stop_deacceleration();
  double adc_stop_deacceleration() const;
  void set_adc_stop_deacceleration(double value);
  private:
  double _internal_adc_stop_deacceleration() const;
  void _internal_set_adc_stop_deacceleration(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SignalLightDebug.SignalDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr light_id_;
    double light_stop_s_;
    int color_;
    bool is_stop_wall_created_;
    double adc_stop_deacceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SignalLightDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SignalLightDebug) */ {
 public:
  inline SignalLightDebug() : SignalLightDebug(nullptr) {}
  ~SignalLightDebug() override;
  explicit PROTOBUF_CONSTEXPR SignalLightDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalLightDebug(const SignalLightDebug& from);
  SignalLightDebug(SignalLightDebug&& from) noexcept
    : SignalLightDebug() {
    *this = ::std::move(from);
  }

  inline SignalLightDebug& operator=(const SignalLightDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalLightDebug& operator=(SignalLightDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignalLightDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalLightDebug* internal_default_instance() {
    return reinterpret_cast<const SignalLightDebug*>(
               &_SignalLightDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SignalLightDebug& a, SignalLightDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalLightDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalLightDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignalLightDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignalLightDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignalLightDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SignalLightDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalLightDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.SignalLightDebug";
  }
  protected:
  explicit SignalLightDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SignalLightDebug_SignalDebug SignalDebug;

  // accessors -------------------------------------------------------

  enum : int {
    kSignalFieldNumber = 3,
    kAdcSpeedFieldNumber = 1,
    kAdcFrontSFieldNumber = 2,
  };
  // repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* mutable_signal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
      mutable_signal();
  private:
  const ::apollo::planning_internal::SignalLightDebug_SignalDebug& _internal_signal(int index) const;
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* _internal_add_signal();
  public:
  const ::apollo::planning_internal::SignalLightDebug_SignalDebug& signal(int index) const;
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* add_signal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
      signal() const;

  // optional double adc_speed = 1;
  bool has_adc_speed() const;
  private:
  bool _internal_has_adc_speed() const;
  public:
  void clear_adc_speed();
  double adc_speed() const;
  void set_adc_speed(double value);
  private:
  double _internal_adc_speed() const;
  void _internal_set_adc_speed(double value);
  public:

  // optional double adc_front_s = 2;
  bool has_adc_front_s() const;
  private:
  bool _internal_has_adc_front_s() const;
  public:
  void clear_adc_front_s();
  double adc_front_s() const;
  void set_adc_front_s(double value);
  private:
  double _internal_adc_front_s() const;
  void _internal_set_adc_front_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SignalLightDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug > signal_;
    double adc_speed_;
    double adc_front_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DecisionTag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.DecisionTag) */ {
 public:
  inline DecisionTag() : DecisionTag(nullptr) {}
  ~DecisionTag() override;
  explicit PROTOBUF_CONSTEXPR DecisionTag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecisionTag(const DecisionTag& from);
  DecisionTag(DecisionTag&& from) noexcept
    : DecisionTag() {
    *this = ::std::move(from);
  }

  inline DecisionTag& operator=(const DecisionTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionTag& operator=(DecisionTag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionTag& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionTag* internal_default_instance() {
    return reinterpret_cast<const DecisionTag*>(
               &_DecisionTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DecisionTag& a, DecisionTag& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionTag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionTag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionTag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecisionTag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DecisionTag& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionTag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.DecisionTag";
  }
  protected:
  explicit DecisionTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeciderTagFieldNumber = 1,
    kDecisionFieldNumber = 2,
  };
  // optional string decider_tag = 1;
  bool has_decider_tag() const;
  private:
  bool _internal_has_decider_tag() const;
  public:
  void clear_decider_tag();
  const std::string& decider_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decider_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decider_tag();
  PROTOBUF_NODISCARD std::string* release_decider_tag();
  void set_allocated_decider_tag(std::string* decider_tag);
  private:
  const std::string& _internal_decider_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decider_tag(const std::string& value);
  std::string* _internal_mutable_decider_tag();
  public:

  // optional .apollo.planning.ObjectDecisionType decision = 2;
  bool has_decision() const;
  private:
  bool _internal_has_decision() const;
  public:
  void clear_decision();
  const ::apollo::planning::ObjectDecisionType& decision() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectDecisionType* release_decision();
  ::apollo::planning::ObjectDecisionType* mutable_decision();
  void set_allocated_decision(::apollo::planning::ObjectDecisionType* decision);
  private:
  const ::apollo::planning::ObjectDecisionType& _internal_decision() const;
  ::apollo::planning::ObjectDecisionType* _internal_mutable_decision();
  public:
  void unsafe_arena_set_allocated_decision(
      ::apollo::planning::ObjectDecisionType* decision);
  ::apollo::planning::ObjectDecisionType* unsafe_arena_release_decision();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.DecisionTag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decider_tag_;
    ::apollo::planning::ObjectDecisionType* decision_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ObstacleDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.ObstacleDebug) */ {
 public:
  inline ObstacleDebug() : ObstacleDebug(nullptr) {}
  ~ObstacleDebug() override;
  explicit PROTOBUF_CONSTEXPR ObstacleDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObstacleDebug(const ObstacleDebug& from);
  ObstacleDebug(ObstacleDebug&& from) noexcept
    : ObstacleDebug() {
    *this = ::std::move(from);
  }

  inline ObstacleDebug& operator=(const ObstacleDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObstacleDebug& operator=(ObstacleDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObstacleDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObstacleDebug* internal_default_instance() {
    return reinterpret_cast<const ObstacleDebug*>(
               &_ObstacleDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObstacleDebug& a, ObstacleDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(ObstacleDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObstacleDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObstacleDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObstacleDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObstacleDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObstacleDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.ObstacleDebug";
  }
  protected:
  explicit ObstacleDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecisionTagFieldNumber = 3,
    kIdFieldNumber = 1,
    kSlBoundaryFieldNumber = 2,
  };
  // repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
  int decision_tag_size() const;
  private:
  int _internal_decision_tag_size() const;
  public:
  void clear_decision_tag();
  ::apollo::planning_internal::DecisionTag* mutable_decision_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
      mutable_decision_tag();
  private:
  const ::apollo::planning_internal::DecisionTag& _internal_decision_tag(int index) const;
  ::apollo::planning_internal::DecisionTag* _internal_add_decision_tag();
  public:
  const ::apollo::planning_internal::DecisionTag& decision_tag(int index) const;
  ::apollo::planning_internal::DecisionTag* add_decision_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
      decision_tag() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .apollo.planning.SLBoundary sl_boundary = 2;
  bool has_sl_boundary() const;
  private:
  bool _internal_has_sl_boundary() const;
  public:
  void clear_sl_boundary();
  const ::apollo::planning::SLBoundary& sl_boundary() const;
  PROTOBUF_NODISCARD ::apollo::planning::SLBoundary* release_sl_boundary();
  ::apollo::planning::SLBoundary* mutable_sl_boundary();
  void set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary);
  private:
  const ::apollo::planning::SLBoundary& _internal_sl_boundary() const;
  ::apollo::planning::SLBoundary* _internal_mutable_sl_boundary();
  public:
  void unsafe_arena_set_allocated_sl_boundary(
      ::apollo::planning::SLBoundary* sl_boundary);
  ::apollo::planning::SLBoundary* unsafe_arena_release_sl_boundary();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.ObstacleDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::DecisionTag > decision_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::apollo::planning::SLBoundary* sl_boundary_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.ReferenceLineDebug) */ {
 public:
  inline ReferenceLineDebug() : ReferenceLineDebug(nullptr) {}
  ~ReferenceLineDebug() override;
  explicit PROTOBUF_CONSTEXPR ReferenceLineDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLineDebug(const ReferenceLineDebug& from);
  ReferenceLineDebug(ReferenceLineDebug&& from) noexcept
    : ReferenceLineDebug() {
    *this = ::std::move(from);
  }

  inline ReferenceLineDebug& operator=(const ReferenceLineDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineDebug& operator=(ReferenceLineDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLineDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReferenceLineDebug* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineDebug*>(
               &_ReferenceLineDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReferenceLineDebug& a, ReferenceLineDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLineDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceLineDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceLineDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLineDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceLineDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.ReferenceLineDebug";
  }
  protected:
  explicit ReferenceLineDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLengthFieldNumber = 2,
    kCostFieldNumber = 3,
    kIsChangeLanePathFieldNumber = 4,
    kIsDrivableFieldNumber = 5,
    kIsProtectedFieldNumber = 6,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // optional double cost = 3;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // optional bool is_change_lane_path = 4;
  bool has_is_change_lane_path() const;
  private:
  bool _internal_has_is_change_lane_path() const;
  public:
  void clear_is_change_lane_path();
  bool is_change_lane_path() const;
  void set_is_change_lane_path(bool value);
  private:
  bool _internal_is_change_lane_path() const;
  void _internal_set_is_change_lane_path(bool value);
  public:

  // optional bool is_drivable = 5;
  bool has_is_drivable() const;
  private:
  bool _internal_has_is_drivable() const;
  public:
  void clear_is_drivable();
  bool is_drivable() const;
  void set_is_drivable(bool value);
  private:
  bool _internal_is_drivable() const;
  void _internal_set_is_drivable(bool value);
  public:

  // optional bool is_protected = 6;
  bool has_is_protected() const;
  private:
  bool _internal_has_is_protected() const;
  public:
  void clear_is_protected();
  bool is_protected() const;
  void set_is_protected(bool value);
  private:
  bool _internal_is_protected() const;
  void _internal_set_is_protected(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.ReferenceLineDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double length_;
    double cost_;
    bool is_change_lane_path_;
    bool is_drivable_;
    bool is_protected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class SampleLayerDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.SampleLayerDebug) */ {
 public:
  inline SampleLayerDebug() : SampleLayerDebug(nullptr) {}
  ~SampleLayerDebug() override;
  explicit PROTOBUF_CONSTEXPR SampleLayerDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleLayerDebug(const SampleLayerDebug& from);
  SampleLayerDebug(SampleLayerDebug&& from) noexcept
    : SampleLayerDebug() {
    *this = ::std::move(from);
  }

  inline SampleLayerDebug& operator=(const SampleLayerDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleLayerDebug& operator=(SampleLayerDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleLayerDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleLayerDebug* internal_default_instance() {
    return reinterpret_cast<const SampleLayerDebug*>(
               &_SampleLayerDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SampleLayerDebug& a, SampleLayerDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleLayerDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleLayerDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampleLayerDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampleLayerDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleLayerDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SampleLayerDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleLayerDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.SampleLayerDebug";
  }
  protected:
  explicit SampleLayerDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlPointFieldNumber = 1,
  };
  // repeated .apollo.common.SLPoint sl_point = 1;
  int sl_point_size() const;
  private:
  int _internal_sl_point_size() const;
  public:
  void clear_sl_point();
  ::apollo::common::SLPoint* mutable_sl_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_sl_point();
  private:
  const ::apollo::common::SLPoint& _internal_sl_point(int index) const;
  ::apollo::common::SLPoint* _internal_add_sl_point();
  public:
  const ::apollo::common::SLPoint& sl_point(int index) const;
  ::apollo::common::SLPoint* add_sl_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
      sl_point() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.SampleLayerDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint > sl_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DpPolyGraphDebug final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.DpPolyGraphDebug) */ {
 public:
  inline DpPolyGraphDebug() : DpPolyGraphDebug(nullptr) {}
  ~DpPolyGraphDebug() override;
  explicit PROTOBUF_CONSTEXPR DpPolyGraphDebug(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpPolyGraphDebug(const DpPolyGraphDebug& from);
  DpPolyGraphDebug(DpPolyGraphDebug&& from) noexcept
    : DpPolyGraphDebug() {
    *this = ::std::move(from);
  }

  inline DpPolyGraphDebug& operator=(const DpPolyGraphDebug& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpPolyGraphDebug& operator=(DpPolyGraphDebug&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DpPolyGraphDebug& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpPolyGraphDebug* internal_default_instance() {
    return reinterpret_cast<const DpPolyGraphDebug*>(
               &_DpPolyGraphDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DpPolyGraphDebug& a, DpPolyGraphDebug& b) {
    a.Swap(&b);
  }
  inline void Swap(DpPolyGraphDebug* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpPolyGraphDebug* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpPolyGraphDebug* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpPolyGraphDebug>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DpPolyGraphDebug& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DpPolyGraphDebug& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpPolyGraphDebug* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.DpPolyGraphDebug";
  }
  protected:
  explicit DpPolyGraphDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleLayerFieldNumber = 1,
    kMinCostPointFieldNumber = 2,
  };
  // repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
  int sample_layer_size() const;
  private:
  int _internal_sample_layer_size() const;
  public:
  void clear_sample_layer();
  ::apollo::planning_internal::SampleLayerDebug* mutable_sample_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
      mutable_sample_layer();
  private:
  const ::apollo::planning_internal::SampleLayerDebug& _internal_sample_layer(int index) const;
  ::apollo::planning_internal::SampleLayerDebug* _internal_add_sample_layer();
  public:
  const ::apollo::planning_internal::SampleLayerDebug& sample_layer(int index) const;
  ::apollo::planning_internal::SampleLayerDebug* add_sample_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
      sample_layer() const;

  // repeated .apollo.common.SLPoint min_cost_point = 2;
  int min_cost_point_size() const;
  private:
  int _internal_min_cost_point_size() const;
  public:
  void clear_min_cost_point();
  ::apollo::common::SLPoint* mutable_min_cost_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
      mutable_min_cost_point();
  private:
  const ::apollo::common::SLPoint& _internal_min_cost_point(int index) const;
  ::apollo::common::SLPoint* _internal_add_min_cost_point();
  public:
  const ::apollo::common::SLPoint& min_cost_point(int index) const;
  ::apollo::common::SLPoint* add_min_cost_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
      min_cost_point() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.DpPolyGraphDebug)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug > sample_layer_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint > min_cost_point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class PlanningData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.PlanningData) */ {
 public:
  inline PlanningData() : PlanningData(nullptr) {}
  ~PlanningData() override;
  explicit PROTOBUF_CONSTEXPR PlanningData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningData(const PlanningData& from);
  PlanningData(PlanningData&& from) noexcept
    : PlanningData() {
    *this = ::std::move(from);
  }

  inline PlanningData& operator=(const PlanningData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningData& operator=(PlanningData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanningData* internal_default_instance() {
    return reinterpret_cast<const PlanningData*>(
               &_PlanningData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlanningData& a, PlanningData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.PlanningData";
  }
  protected:
  explicit PlanningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 6,
    kSpeedPlanFieldNumber = 13,
    kStGraphFieldNumber = 14,
    kSlFrameFieldNumber = 15,
    kObstacleFieldNumber = 18,
    kReferenceLineFieldNumber = 19,
    kAdcPositionFieldNumber = 7,
    kChassisFieldNumber = 8,
    kRoutingFieldNumber = 9,
    kInitPointFieldNumber = 10,
    kPredictionHeaderFieldNumber = 16,
    kSignalLightFieldNumber = 17,
    kDpPolyGraphFieldNumber = 20,
    kLatticeStImageFieldNumber = 21,
    kRelativeMapFieldNumber = 22,
    kAutoTuningTrainingDataFieldNumber = 23,
  };
  // repeated .apollo.common.Path path = 6;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::apollo::common::Path* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
      mutable_path();
  private:
  const ::apollo::common::Path& _internal_path(int index) const;
  ::apollo::common::Path* _internal_add_path();
  public:
  const ::apollo::common::Path& path(int index) const;
  ::apollo::common::Path* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
      path() const;

  // repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
  int speed_plan_size() const;
  private:
  int _internal_speed_plan_size() const;
  public:
  void clear_speed_plan();
  ::apollo::planning_internal::SpeedPlan* mutable_speed_plan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
      mutable_speed_plan();
  private:
  const ::apollo::planning_internal::SpeedPlan& _internal_speed_plan(int index) const;
  ::apollo::planning_internal::SpeedPlan* _internal_add_speed_plan();
  public:
  const ::apollo::planning_internal::SpeedPlan& speed_plan(int index) const;
  ::apollo::planning_internal::SpeedPlan* add_speed_plan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
      speed_plan() const;

  // repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
  int st_graph_size() const;
  private:
  int _internal_st_graph_size() const;
  public:
  void clear_st_graph();
  ::apollo::planning_internal::STGraphDebug* mutable_st_graph(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
      mutable_st_graph();
  private:
  const ::apollo::planning_internal::STGraphDebug& _internal_st_graph(int index) const;
  ::apollo::planning_internal::STGraphDebug* _internal_add_st_graph();
  public:
  const ::apollo::planning_internal::STGraphDebug& st_graph(int index) const;
  ::apollo::planning_internal::STGraphDebug* add_st_graph();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
      st_graph() const;

  // repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
  int sl_frame_size() const;
  private:
  int _internal_sl_frame_size() const;
  public:
  void clear_sl_frame();
  ::apollo::planning_internal::SLFrameDebug* mutable_sl_frame(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
      mutable_sl_frame();
  private:
  const ::apollo::planning_internal::SLFrameDebug& _internal_sl_frame(int index) const;
  ::apollo::planning_internal::SLFrameDebug* _internal_add_sl_frame();
  public:
  const ::apollo::planning_internal::SLFrameDebug& sl_frame(int index) const;
  ::apollo::planning_internal::SLFrameDebug* add_sl_frame();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
      sl_frame() const;

  // repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
  int obstacle_size() const;
  private:
  int _internal_obstacle_size() const;
  public:
  void clear_obstacle();
  ::apollo::planning_internal::ObstacleDebug* mutable_obstacle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
      mutable_obstacle();
  private:
  const ::apollo::planning_internal::ObstacleDebug& _internal_obstacle(int index) const;
  ::apollo::planning_internal::ObstacleDebug* _internal_add_obstacle();
  public:
  const ::apollo::planning_internal::ObstacleDebug& obstacle(int index) const;
  ::apollo::planning_internal::ObstacleDebug* add_obstacle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
      obstacle() const;

  // repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
  int reference_line_size() const;
  private:
  int _internal_reference_line_size() const;
  public:
  void clear_reference_line();
  ::apollo::planning_internal::ReferenceLineDebug* mutable_reference_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
      mutable_reference_line();
  private:
  const ::apollo::planning_internal::ReferenceLineDebug& _internal_reference_line(int index) const;
  ::apollo::planning_internal::ReferenceLineDebug* _internal_add_reference_line();
  public:
  const ::apollo::planning_internal::ReferenceLineDebug& reference_line(int index) const;
  ::apollo::planning_internal::ReferenceLineDebug* add_reference_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
      reference_line() const;

  // optional .apollo.localization.LocalizationEstimate adc_position = 7;
  bool has_adc_position() const;
  private:
  bool _internal_has_adc_position() const;
  public:
  void clear_adc_position();
  const ::apollo::localization::LocalizationEstimate& adc_position() const;
  PROTOBUF_NODISCARD ::apollo::localization::LocalizationEstimate* release_adc_position();
  ::apollo::localization::LocalizationEstimate* mutable_adc_position();
  void set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position);
  private:
  const ::apollo::localization::LocalizationEstimate& _internal_adc_position() const;
  ::apollo::localization::LocalizationEstimate* _internal_mutable_adc_position();
  public:
  void unsafe_arena_set_allocated_adc_position(
      ::apollo::localization::LocalizationEstimate* adc_position);
  ::apollo::localization::LocalizationEstimate* unsafe_arena_release_adc_position();

  // optional .apollo.canbus.Chassis chassis = 8;
  bool has_chassis() const;
  private:
  bool _internal_has_chassis() const;
  public:
  void clear_chassis();
  const ::apollo::canbus::Chassis& chassis() const;
  PROTOBUF_NODISCARD ::apollo::canbus::Chassis* release_chassis();
  ::apollo::canbus::Chassis* mutable_chassis();
  void set_allocated_chassis(::apollo::canbus::Chassis* chassis);
  private:
  const ::apollo::canbus::Chassis& _internal_chassis() const;
  ::apollo::canbus::Chassis* _internal_mutable_chassis();
  public:
  void unsafe_arena_set_allocated_chassis(
      ::apollo::canbus::Chassis* chassis);
  ::apollo::canbus::Chassis* unsafe_arena_release_chassis();

  // optional .apollo.routing.RoutingResponse routing = 9;
  bool has_routing() const;
  private:
  bool _internal_has_routing() const;
  public:
  void clear_routing();
  const ::apollo::routing::RoutingResponse& routing() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingResponse* release_routing();
  ::apollo::routing::RoutingResponse* mutable_routing();
  void set_allocated_routing(::apollo::routing::RoutingResponse* routing);
  private:
  const ::apollo::routing::RoutingResponse& _internal_routing() const;
  ::apollo::routing::RoutingResponse* _internal_mutable_routing();
  public:
  void unsafe_arena_set_allocated_routing(
      ::apollo::routing::RoutingResponse* routing);
  ::apollo::routing::RoutingResponse* unsafe_arena_release_routing();

  // optional .apollo.common.TrajectoryPoint init_point = 10;
  bool has_init_point() const;
  private:
  bool _internal_has_init_point() const;
  public:
  void clear_init_point();
  const ::apollo::common::TrajectoryPoint& init_point() const;
  PROTOBUF_NODISCARD ::apollo::common::TrajectoryPoint* release_init_point();
  ::apollo::common::TrajectoryPoint* mutable_init_point();
  void set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point);
  private:
  const ::apollo::common::TrajectoryPoint& _internal_init_point() const;
  ::apollo::common::TrajectoryPoint* _internal_mutable_init_point();
  public:
  void unsafe_arena_set_allocated_init_point(
      ::apollo::common::TrajectoryPoint* init_point);
  ::apollo::common::TrajectoryPoint* unsafe_arena_release_init_point();

  // optional .apollo.common.Header prediction_header = 16;
  bool has_prediction_header() const;
  private:
  bool _internal_has_prediction_header() const;
  public:
  void clear_prediction_header();
  const ::apollo::common::Header& prediction_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_prediction_header();
  ::apollo::common::Header* mutable_prediction_header();
  void set_allocated_prediction_header(::apollo::common::Header* prediction_header);
  private:
  const ::apollo::common::Header& _internal_prediction_header() const;
  ::apollo::common::Header* _internal_mutable_prediction_header();
  public:
  void unsafe_arena_set_allocated_prediction_header(
      ::apollo::common::Header* prediction_header);
  ::apollo::common::Header* unsafe_arena_release_prediction_header();

  // optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
  bool has_signal_light() const;
  private:
  bool _internal_has_signal_light() const;
  public:
  void clear_signal_light();
  const ::apollo::planning_internal::SignalLightDebug& signal_light() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::SignalLightDebug* release_signal_light();
  ::apollo::planning_internal::SignalLightDebug* mutable_signal_light();
  void set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light);
  private:
  const ::apollo::planning_internal::SignalLightDebug& _internal_signal_light() const;
  ::apollo::planning_internal::SignalLightDebug* _internal_mutable_signal_light();
  public:
  void unsafe_arena_set_allocated_signal_light(
      ::apollo::planning_internal::SignalLightDebug* signal_light);
  ::apollo::planning_internal::SignalLightDebug* unsafe_arena_release_signal_light();

  // optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
  bool has_dp_poly_graph() const;
  private:
  bool _internal_has_dp_poly_graph() const;
  public:
  void clear_dp_poly_graph();
  const ::apollo::planning_internal::DpPolyGraphDebug& dp_poly_graph() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::DpPolyGraphDebug* release_dp_poly_graph();
  ::apollo::planning_internal::DpPolyGraphDebug* mutable_dp_poly_graph();
  void set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph);
  private:
  const ::apollo::planning_internal::DpPolyGraphDebug& _internal_dp_poly_graph() const;
  ::apollo::planning_internal::DpPolyGraphDebug* _internal_mutable_dp_poly_graph();
  public:
  void unsafe_arena_set_allocated_dp_poly_graph(
      ::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph);
  ::apollo::planning_internal::DpPolyGraphDebug* unsafe_arena_release_dp_poly_graph();

  // optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
  bool has_lattice_st_image() const;
  private:
  bool _internal_has_lattice_st_image() const;
  public:
  void clear_lattice_st_image();
  const ::apollo::planning_internal::LatticeStTraining& lattice_st_image() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::LatticeStTraining* release_lattice_st_image();
  ::apollo::planning_internal::LatticeStTraining* mutable_lattice_st_image();
  void set_allocated_lattice_st_image(::apollo::planning_internal::LatticeStTraining* lattice_st_image);
  private:
  const ::apollo::planning_internal::LatticeStTraining& _internal_lattice_st_image() const;
  ::apollo::planning_internal::LatticeStTraining* _internal_mutable_lattice_st_image();
  public:
  void unsafe_arena_set_allocated_lattice_st_image(
      ::apollo::planning_internal::LatticeStTraining* lattice_st_image);
  ::apollo::planning_internal::LatticeStTraining* unsafe_arena_release_lattice_st_image();

  // optional .apollo.relative_map.MapMsg relative_map = 22;
  bool has_relative_map() const;
  private:
  bool _internal_has_relative_map() const;
  public:
  void clear_relative_map();
  const ::apollo::relative_map::MapMsg& relative_map() const;
  PROTOBUF_NODISCARD ::apollo::relative_map::MapMsg* release_relative_map();
  ::apollo::relative_map::MapMsg* mutable_relative_map();
  void set_allocated_relative_map(::apollo::relative_map::MapMsg* relative_map);
  private:
  const ::apollo::relative_map::MapMsg& _internal_relative_map() const;
  ::apollo::relative_map::MapMsg* _internal_mutable_relative_map();
  public:
  void unsafe_arena_set_allocated_relative_map(
      ::apollo::relative_map::MapMsg* relative_map);
  ::apollo::relative_map::MapMsg* unsafe_arena_release_relative_map();

  // optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
  bool has_auto_tuning_training_data() const;
  private:
  bool _internal_has_auto_tuning_training_data() const;
  public:
  void clear_auto_tuning_training_data();
  const ::apollo::planning_internal::AutoTuningTrainingData& auto_tuning_training_data() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::AutoTuningTrainingData* release_auto_tuning_training_data();
  ::apollo::planning_internal::AutoTuningTrainingData* mutable_auto_tuning_training_data();
  void set_allocated_auto_tuning_training_data(::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data);
  private:
  const ::apollo::planning_internal::AutoTuningTrainingData& _internal_auto_tuning_training_data() const;
  ::apollo::planning_internal::AutoTuningTrainingData* _internal_mutable_auto_tuning_training_data();
  public:
  void unsafe_arena_set_allocated_auto_tuning_training_data(
      ::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data);
  ::apollo::planning_internal::AutoTuningTrainingData* unsafe_arena_release_auto_tuning_training_data();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.PlanningData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path > path_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan > speed_plan_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug > st_graph_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug > sl_frame_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug > obstacle_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug > reference_line_;
    ::apollo::localization::LocalizationEstimate* adc_position_;
    ::apollo::canbus::Chassis* chassis_;
    ::apollo::routing::RoutingResponse* routing_;
    ::apollo::common::TrajectoryPoint* init_point_;
    ::apollo::common::Header* prediction_header_;
    ::apollo::planning_internal::SignalLightDebug* signal_light_;
    ::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph_;
    ::apollo::planning_internal::LatticeStTraining* lattice_st_image_;
    ::apollo::relative_map::MapMsg* relative_map_;
    ::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class LatticeStPixel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.LatticeStPixel) */ {
 public:
  inline LatticeStPixel() : LatticeStPixel(nullptr) {}
  ~LatticeStPixel() override;
  explicit PROTOBUF_CONSTEXPR LatticeStPixel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatticeStPixel(const LatticeStPixel& from);
  LatticeStPixel(LatticeStPixel&& from) noexcept
    : LatticeStPixel() {
    *this = ::std::move(from);
  }

  inline LatticeStPixel& operator=(const LatticeStPixel& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatticeStPixel& operator=(LatticeStPixel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatticeStPixel& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatticeStPixel* internal_default_instance() {
    return reinterpret_cast<const LatticeStPixel*>(
               &_LatticeStPixel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(LatticeStPixel& a, LatticeStPixel& b) {
    a.Swap(&b);
  }
  inline void Swap(LatticeStPixel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatticeStPixel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatticeStPixel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatticeStPixel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatticeStPixel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatticeStPixel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatticeStPixel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.LatticeStPixel";
  }
  protected:
  explicit LatticeStPixel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kTFieldNumber = 2,
    kRFieldNumber = 3,
    kGFieldNumber = 4,
    kBFieldNumber = 5,
  };
  // optional int32 s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  int32_t s() const;
  void set_s(int32_t value);
  private:
  int32_t _internal_s() const;
  void _internal_set_s(int32_t value);
  public:

  // optional int32 t = 2;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  int32_t t() const;
  void set_t(int32_t value);
  private:
  int32_t _internal_t() const;
  void _internal_set_t(int32_t value);
  public:

  // optional uint32 r = 3;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // optional uint32 g = 4;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // optional uint32 b = 5;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.LatticeStPixel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t s_;
    int32_t t_;
    uint32_t r_;
    uint32_t g_;
    uint32_t b_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class LatticeStTraining final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.LatticeStTraining) */ {
 public:
  inline LatticeStTraining() : LatticeStTraining(nullptr) {}
  ~LatticeStTraining() override;
  explicit PROTOBUF_CONSTEXPR LatticeStTraining(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatticeStTraining(const LatticeStTraining& from);
  LatticeStTraining(LatticeStTraining&& from) noexcept
    : LatticeStTraining() {
    *this = ::std::move(from);
  }

  inline LatticeStTraining& operator=(const LatticeStTraining& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatticeStTraining& operator=(LatticeStTraining&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatticeStTraining& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatticeStTraining* internal_default_instance() {
    return reinterpret_cast<const LatticeStTraining*>(
               &_LatticeStTraining_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LatticeStTraining& a, LatticeStTraining& b) {
    a.Swap(&b);
  }
  inline void Swap(LatticeStTraining* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatticeStTraining* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatticeStTraining* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatticeStTraining>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatticeStTraining& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatticeStTraining& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatticeStTraining* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.LatticeStTraining";
  }
  protected:
  explicit LatticeStTraining(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixelFieldNumber = 1,
    kAnnotationFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kNumSGridsFieldNumber = 4,
    kNumTGridsFieldNumber = 5,
    kSResolutionFieldNumber = 6,
    kTResolutionFieldNumber = 7,
  };
  // repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
  int pixel_size() const;
  private:
  int _internal_pixel_size() const;
  public:
  void clear_pixel();
  ::apollo::planning_internal::LatticeStPixel* mutable_pixel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >*
      mutable_pixel();
  private:
  const ::apollo::planning_internal::LatticeStPixel& _internal_pixel(int index) const;
  ::apollo::planning_internal::LatticeStPixel* _internal_add_pixel();
  public:
  const ::apollo::planning_internal::LatticeStPixel& pixel(int index) const;
  ::apollo::planning_internal::LatticeStPixel* add_pixel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >&
      pixel() const;

  // optional string annotation = 3;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const std::string& annotation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_annotation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_annotation();
  PROTOBUF_NODISCARD std::string* release_annotation();
  void set_allocated_annotation(std::string* annotation);
  private:
  const std::string& _internal_annotation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annotation(const std::string& value);
  std::string* _internal_mutable_annotation();
  public:

  // optional double timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional uint32 num_s_grids = 4;
  bool has_num_s_grids() const;
  private:
  bool _internal_has_num_s_grids() const;
  public:
  void clear_num_s_grids();
  uint32_t num_s_grids() const;
  void set_num_s_grids(uint32_t value);
  private:
  uint32_t _internal_num_s_grids() const;
  void _internal_set_num_s_grids(uint32_t value);
  public:

  // optional uint32 num_t_grids = 5;
  bool has_num_t_grids() const;
  private:
  bool _internal_has_num_t_grids() const;
  public:
  void clear_num_t_grids();
  uint32_t num_t_grids() const;
  void set_num_t_grids(uint32_t value);
  private:
  uint32_t _internal_num_t_grids() const;
  void _internal_set_num_t_grids(uint32_t value);
  public:

  // optional double s_resolution = 6;
  bool has_s_resolution() const;
  private:
  bool _internal_has_s_resolution() const;
  public:
  void clear_s_resolution();
  double s_resolution() const;
  void set_s_resolution(double value);
  private:
  double _internal_s_resolution() const;
  void _internal_set_s_resolution(double value);
  public:

  // optional double t_resolution = 7;
  bool has_t_resolution() const;
  private:
  bool _internal_has_t_resolution() const;
  public:
  void clear_t_resolution();
  double t_resolution() const;
  void set_t_resolution(double value);
  private:
  double _internal_t_resolution() const;
  void _internal_set_t_resolution(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.LatticeStTraining)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel > pixel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annotation_;
    double timestamp_;
    uint32_t num_s_grids_;
    uint32_t num_t_grids_;
    double s_resolution_;
    double t_resolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class CostComponents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.CostComponents) */ {
 public:
  inline CostComponents() : CostComponents(nullptr) {}
  ~CostComponents() override;
  explicit PROTOBUF_CONSTEXPR CostComponents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CostComponents(const CostComponents& from);
  CostComponents(CostComponents&& from) noexcept
    : CostComponents() {
    *this = ::std::move(from);
  }

  inline CostComponents& operator=(const CostComponents& from) {
    CopyFrom(from);
    return *this;
  }
  inline CostComponents& operator=(CostComponents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CostComponents& default_instance() {
    return *internal_default_instance();
  }
  static inline const CostComponents* internal_default_instance() {
    return reinterpret_cast<const CostComponents*>(
               &_CostComponents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CostComponents& a, CostComponents& b) {
    a.Swap(&b);
  }
  inline void Swap(CostComponents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CostComponents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CostComponents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CostComponents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CostComponents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CostComponents& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CostComponents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.CostComponents";
  }
  protected:
  explicit CostComponents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostComponentFieldNumber = 1,
  };
  // repeated double cost_component = 1;
  int cost_component_size() const;
  private:
  int _internal_cost_component_size() const;
  public:
  void clear_cost_component();
  private:
  double _internal_cost_component(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_cost_component() const;
  void _internal_add_cost_component(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_cost_component();
  public:
  double cost_component(int index) const;
  void set_cost_component(int index, double value);
  void add_cost_component(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      cost_component() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_cost_component();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.CostComponents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > cost_component_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class AutoTuningTrainingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.AutoTuningTrainingData) */ {
 public:
  inline AutoTuningTrainingData() : AutoTuningTrainingData(nullptr) {}
  ~AutoTuningTrainingData() override;
  explicit PROTOBUF_CONSTEXPR AutoTuningTrainingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutoTuningTrainingData(const AutoTuningTrainingData& from);
  AutoTuningTrainingData(AutoTuningTrainingData&& from) noexcept
    : AutoTuningTrainingData() {
    *this = ::std::move(from);
  }

  inline AutoTuningTrainingData& operator=(const AutoTuningTrainingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutoTuningTrainingData& operator=(AutoTuningTrainingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutoTuningTrainingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutoTuningTrainingData* internal_default_instance() {
    return reinterpret_cast<const AutoTuningTrainingData*>(
               &_AutoTuningTrainingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AutoTuningTrainingData& a, AutoTuningTrainingData& b) {
    a.Swap(&b);
  }
  inline void Swap(AutoTuningTrainingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutoTuningTrainingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutoTuningTrainingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutoTuningTrainingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AutoTuningTrainingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AutoTuningTrainingData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoTuningTrainingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.AutoTuningTrainingData";
  }
  protected:
  explicit AutoTuningTrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeacherComponentFieldNumber = 1,
    kStudentComponentFieldNumber = 2,
  };
  // optional .apollo.planning_internal.CostComponents teacher_component = 1;
  bool has_teacher_component() const;
  private:
  bool _internal_has_teacher_component() const;
  public:
  void clear_teacher_component();
  const ::apollo::planning_internal::CostComponents& teacher_component() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::CostComponents* release_teacher_component();
  ::apollo::planning_internal::CostComponents* mutable_teacher_component();
  void set_allocated_teacher_component(::apollo::planning_internal::CostComponents* teacher_component);
  private:
  const ::apollo::planning_internal::CostComponents& _internal_teacher_component() const;
  ::apollo::planning_internal::CostComponents* _internal_mutable_teacher_component();
  public:
  void unsafe_arena_set_allocated_teacher_component(
      ::apollo::planning_internal::CostComponents* teacher_component);
  ::apollo::planning_internal::CostComponents* unsafe_arena_release_teacher_component();

  // optional .apollo.planning_internal.CostComponents student_component = 2;
  bool has_student_component() const;
  private:
  bool _internal_has_student_component() const;
  public:
  void clear_student_component();
  const ::apollo::planning_internal::CostComponents& student_component() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::CostComponents* release_student_component();
  ::apollo::planning_internal::CostComponents* mutable_student_component();
  void set_allocated_student_component(::apollo::planning_internal::CostComponents* student_component);
  private:
  const ::apollo::planning_internal::CostComponents& _internal_student_component() const;
  ::apollo::planning_internal::CostComponents* _internal_mutable_student_component();
  public:
  void unsafe_arena_set_allocated_student_component(
      ::apollo::planning_internal::CostComponents* student_component);
  ::apollo::planning_internal::CostComponents* unsafe_arena_release_student_component();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.AutoTuningTrainingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning_internal::CostComponents* teacher_component_;
    ::apollo::planning_internal::CostComponents* student_component_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class CloudReferenceLineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.CloudReferenceLineRequest) */ {
 public:
  inline CloudReferenceLineRequest() : CloudReferenceLineRequest(nullptr) {}
  ~CloudReferenceLineRequest() override;
  explicit PROTOBUF_CONSTEXPR CloudReferenceLineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudReferenceLineRequest(const CloudReferenceLineRequest& from);
  CloudReferenceLineRequest(CloudReferenceLineRequest&& from) noexcept
    : CloudReferenceLineRequest() {
    *this = ::std::move(from);
  }

  inline CloudReferenceLineRequest& operator=(const CloudReferenceLineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudReferenceLineRequest& operator=(CloudReferenceLineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudReferenceLineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudReferenceLineRequest* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineRequest*>(
               &_CloudReferenceLineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CloudReferenceLineRequest& a, CloudReferenceLineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudReferenceLineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudReferenceLineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudReferenceLineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudReferenceLineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudReferenceLineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloudReferenceLineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudReferenceLineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.CloudReferenceLineRequest";
  }
  protected:
  explicit CloudReferenceLineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSegmentFieldNumber = 1,
  };
  // repeated .apollo.routing.LaneSegment lane_segment = 1;
  int lane_segment_size() const;
  private:
  int _internal_lane_segment_size() const;
  public:
  void clear_lane_segment();
  ::apollo::routing::LaneSegment* mutable_lane_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
      mutable_lane_segment();
  private:
  const ::apollo::routing::LaneSegment& _internal_lane_segment(int index) const;
  ::apollo::routing::LaneSegment* _internal_add_lane_segment();
  public:
  const ::apollo::routing::LaneSegment& lane_segment(int index) const;
  ::apollo::routing::LaneSegment* add_lane_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
      lane_segment() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.CloudReferenceLineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment > lane_segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class CloudReferenceLineRoutingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.CloudReferenceLineRoutingRequest) */ {
 public:
  inline CloudReferenceLineRoutingRequest() : CloudReferenceLineRoutingRequest(nullptr) {}
  ~CloudReferenceLineRoutingRequest() override;
  explicit PROTOBUF_CONSTEXPR CloudReferenceLineRoutingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudReferenceLineRoutingRequest(const CloudReferenceLineRoutingRequest& from);
  CloudReferenceLineRoutingRequest(CloudReferenceLineRoutingRequest&& from) noexcept
    : CloudReferenceLineRoutingRequest() {
    *this = ::std::move(from);
  }

  inline CloudReferenceLineRoutingRequest& operator=(const CloudReferenceLineRoutingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudReferenceLineRoutingRequest& operator=(CloudReferenceLineRoutingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudReferenceLineRoutingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudReferenceLineRoutingRequest* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineRoutingRequest*>(
               &_CloudReferenceLineRoutingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CloudReferenceLineRoutingRequest& a, CloudReferenceLineRoutingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudReferenceLineRoutingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudReferenceLineRoutingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudReferenceLineRoutingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudReferenceLineRoutingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudReferenceLineRoutingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloudReferenceLineRoutingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudReferenceLineRoutingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.CloudReferenceLineRoutingRequest";
  }
  protected:
  explicit CloudReferenceLineRoutingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingFieldNumber = 1,
  };
  // optional .apollo.routing.RoutingResponse routing = 1;
  bool has_routing() const;
  private:
  bool _internal_has_routing() const;
  public:
  void clear_routing();
  const ::apollo::routing::RoutingResponse& routing() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingResponse* release_routing();
  ::apollo::routing::RoutingResponse* mutable_routing();
  void set_allocated_routing(::apollo::routing::RoutingResponse* routing);
  private:
  const ::apollo::routing::RoutingResponse& _internal_routing() const;
  ::apollo::routing::RoutingResponse* _internal_mutable_routing();
  public:
  void unsafe_arena_set_allocated_routing(
      ::apollo::routing::RoutingResponse* routing);
  ::apollo::routing::RoutingResponse* unsafe_arena_release_routing();

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.CloudReferenceLineRoutingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::routing::RoutingResponse* routing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// -------------------------------------------------------------------

class CloudReferenceLineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning_internal.CloudReferenceLineResponse) */ {
 public:
  inline CloudReferenceLineResponse() : CloudReferenceLineResponse(nullptr) {}
  ~CloudReferenceLineResponse() override;
  explicit PROTOBUF_CONSTEXPR CloudReferenceLineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloudReferenceLineResponse(const CloudReferenceLineResponse& from);
  CloudReferenceLineResponse(CloudReferenceLineResponse&& from) noexcept
    : CloudReferenceLineResponse() {
    *this = ::std::move(from);
  }

  inline CloudReferenceLineResponse& operator=(const CloudReferenceLineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloudReferenceLineResponse& operator=(CloudReferenceLineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloudReferenceLineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloudReferenceLineResponse* internal_default_instance() {
    return reinterpret_cast<const CloudReferenceLineResponse*>(
               &_CloudReferenceLineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CloudReferenceLineResponse& a, CloudReferenceLineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloudReferenceLineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloudReferenceLineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloudReferenceLineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloudReferenceLineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloudReferenceLineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloudReferenceLineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudReferenceLineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning_internal.CloudReferenceLineResponse";
  }
  protected:
  explicit CloudReferenceLineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSegmentFieldNumber = 1,
  };
  // repeated .apollo.common.Path segment = 1;
  int segment_size() const;
  private:
  int _internal_segment_size() const;
  public:
  void clear_segment();
  ::apollo::common::Path* mutable_segment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
      mutable_segment();
  private:
  const ::apollo::common::Path& _internal_segment(int index) const;
  ::apollo::common::Path* _internal_add_segment();
  public:
  const ::apollo::common::Path& segment(int index) const;
  ::apollo::common::Path* add_segment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
      segment() const;

  // @@protoc_insertion_point(class_scope:apollo.planning_internal.CloudReferenceLineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path > segment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Debug

// optional .apollo.planning_internal.PlanningData planning_data = 2;
inline bool Debug::_internal_has_planning_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.planning_data_ != nullptr);
  return value;
}
inline bool Debug::has_planning_data() const {
  return _internal_has_planning_data();
}
inline void Debug::clear_planning_data() {
  if (_impl_.planning_data_ != nullptr) _impl_.planning_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning_internal::PlanningData& Debug::_internal_planning_data() const {
  const ::apollo::planning_internal::PlanningData* p = _impl_.planning_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::PlanningData&>(
      ::apollo::planning_internal::_PlanningData_default_instance_);
}
inline const ::apollo::planning_internal::PlanningData& Debug::planning_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.Debug.planning_data)
  return _internal_planning_data();
}
inline void Debug::unsafe_arena_set_allocated_planning_data(
    ::apollo::planning_internal::PlanningData* planning_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.planning_data_);
  }
  _impl_.planning_data_ = planning_data;
  if (planning_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.Debug.planning_data)
}
inline ::apollo::planning_internal::PlanningData* Debug::release_planning_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning_internal::PlanningData* temp = _impl_.planning_data_;
  _impl_.planning_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::PlanningData* Debug::unsafe_arena_release_planning_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.Debug.planning_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning_internal::PlanningData* temp = _impl_.planning_data_;
  _impl_.planning_data_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::PlanningData* Debug::_internal_mutable_planning_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.planning_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::PlanningData>(GetArenaForAllocation());
    _impl_.planning_data_ = p;
  }
  return _impl_.planning_data_;
}
inline ::apollo::planning_internal::PlanningData* Debug::mutable_planning_data() {
  ::apollo::planning_internal::PlanningData* _msg = _internal_mutable_planning_data();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.Debug.planning_data)
  return _msg;
}
inline void Debug::set_allocated_planning_data(::apollo::planning_internal::PlanningData* planning_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.planning_data_;
  }
  if (planning_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(planning_data);
    if (message_arena != submessage_arena) {
      planning_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.planning_data_ = planning_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.Debug.planning_data)
}

// -------------------------------------------------------------------

// SpeedPlan

// optional string name = 1;
inline bool SpeedPlan::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedPlan::has_name() const {
  return _internal_has_name();
}
inline void SpeedPlan::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeedPlan::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpeedPlan::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SpeedPlan.name)
}
inline std::string* SpeedPlan::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.name)
  return _s;
}
inline const std::string& SpeedPlan::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SpeedPlan::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeedPlan::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SpeedPlan::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SpeedPlan.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SpeedPlan::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SpeedPlan.name)
}

// repeated .apollo.common.SpeedPoint speed_point = 2;
inline int SpeedPlan::_internal_speed_point_size() const {
  return _impl_.speed_point_.size();
}
inline int SpeedPlan::speed_point_size() const {
  return _internal_speed_point_size();
}
inline ::apollo::common::SpeedPoint* SpeedPlan::mutable_speed_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SpeedPlan.speed_point)
  return _impl_.speed_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
SpeedPlan::mutable_speed_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SpeedPlan.speed_point)
  return &_impl_.speed_point_;
}
inline const ::apollo::common::SpeedPoint& SpeedPlan::_internal_speed_point(int index) const {
  return _impl_.speed_point_.Get(index);
}
inline const ::apollo::common::SpeedPoint& SpeedPlan::speed_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SpeedPlan.speed_point)
  return _internal_speed_point(index);
}
inline ::apollo::common::SpeedPoint* SpeedPlan::_internal_add_speed_point() {
  return _impl_.speed_point_.Add();
}
inline ::apollo::common::SpeedPoint* SpeedPlan::add_speed_point() {
  ::apollo::common::SpeedPoint* _add = _internal_add_speed_point();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SpeedPlan.speed_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
SpeedPlan::speed_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SpeedPlan.speed_point)
  return _impl_.speed_point_;
}

// -------------------------------------------------------------------

// StGraphBoundaryDebug

// optional string name = 1;
inline bool StGraphBoundaryDebug::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StGraphBoundaryDebug::has_name() const {
  return _internal_has_name();
}
inline void StGraphBoundaryDebug::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StGraphBoundaryDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StGraphBoundaryDebug::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.name)
}
inline std::string* StGraphBoundaryDebug::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.name)
  return _s;
}
inline const std::string& StGraphBoundaryDebug::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StGraphBoundaryDebug::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StGraphBoundaryDebug::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StGraphBoundaryDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.StGraphBoundaryDebug.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StGraphBoundaryDebug::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.StGraphBoundaryDebug.name)
}

// repeated .apollo.common.SpeedPoint point = 2;
inline int StGraphBoundaryDebug::_internal_point_size() const {
  return _impl_.point_.size();
}
inline int StGraphBoundaryDebug::point_size() const {
  return _internal_point_size();
}
inline ::apollo::common::SpeedPoint* StGraphBoundaryDebug::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.StGraphBoundaryDebug.point)
  return _impl_.point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
StGraphBoundaryDebug::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return &_impl_.point_;
}
inline const ::apollo::common::SpeedPoint& StGraphBoundaryDebug::_internal_point(int index) const {
  return _impl_.point_.Get(index);
}
inline const ::apollo::common::SpeedPoint& StGraphBoundaryDebug::point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.point)
  return _internal_point(index);
}
inline ::apollo::common::SpeedPoint* StGraphBoundaryDebug::_internal_add_point() {
  return _impl_.point_.Add();
}
inline ::apollo::common::SpeedPoint* StGraphBoundaryDebug::add_point() {
  ::apollo::common::SpeedPoint* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.StGraphBoundaryDebug.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
StGraphBoundaryDebug::point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.StGraphBoundaryDebug.point)
  return _impl_.point_;
}

// optional .apollo.planning_internal.StGraphBoundaryDebug.StBoundaryType type = 3;
inline bool StGraphBoundaryDebug::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StGraphBoundaryDebug::has_type() const {
  return _internal_has_type();
}
inline void StGraphBoundaryDebug::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::_internal_type() const {
  return static_cast< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType >(_impl_.type_);
}
inline ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType StGraphBoundaryDebug::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.StGraphBoundaryDebug.type)
  return _internal_type();
}
inline void StGraphBoundaryDebug::_internal_set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  assert(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void StGraphBoundaryDebug::set_type(::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.StGraphBoundaryDebug.type)
}

// -------------------------------------------------------------------

// SLFrameDebug

// optional string name = 1;
inline bool SLFrameDebug::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SLFrameDebug::has_name() const {
  return _internal_has_name();
}
inline void SLFrameDebug::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SLFrameDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SLFrameDebug::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.name)
}
inline std::string* SLFrameDebug::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.name)
  return _s;
}
inline const std::string& SLFrameDebug::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SLFrameDebug::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SLFrameDebug::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SLFrameDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SLFrameDebug.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SLFrameDebug::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SLFrameDebug.name)
}

// repeated double sampled_s = 2;
inline int SLFrameDebug::_internal_sampled_s_size() const {
  return _impl_.sampled_s_.size();
}
inline int SLFrameDebug::sampled_s_size() const {
  return _internal_sampled_s_size();
}
inline void SLFrameDebug::clear_sampled_s() {
  _impl_.sampled_s_.Clear();
}
inline double SLFrameDebug::_internal_sampled_s(int index) const {
  return _impl_.sampled_s_.Get(index);
}
inline double SLFrameDebug::sampled_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sampled_s)
  return _internal_sampled_s(index);
}
inline void SLFrameDebug::set_sampled_s(int index, double value) {
  _impl_.sampled_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.sampled_s)
}
inline void SLFrameDebug::_internal_add_sampled_s(double value) {
  _impl_.sampled_s_.Add(value);
}
inline void SLFrameDebug::add_sampled_s(double value) {
  _internal_add_sampled_s(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sampled_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_sampled_s() const {
  return _impl_.sampled_s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::sampled_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return _internal_sampled_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_sampled_s() {
  return &_impl_.sampled_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_sampled_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sampled_s)
  return _internal_mutable_sampled_s();
}

// repeated double static_obstacle_lower_bound = 3;
inline int SLFrameDebug::_internal_static_obstacle_lower_bound_size() const {
  return _impl_.static_obstacle_lower_bound_.size();
}
inline int SLFrameDebug::static_obstacle_lower_bound_size() const {
  return _internal_static_obstacle_lower_bound_size();
}
inline void SLFrameDebug::clear_static_obstacle_lower_bound() {
  _impl_.static_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::_internal_static_obstacle_lower_bound(int index) const {
  return _impl_.static_obstacle_lower_bound_.Get(index);
}
inline double SLFrameDebug::static_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return _internal_static_obstacle_lower_bound(index);
}
inline void SLFrameDebug::set_static_obstacle_lower_bound(int index, double value) {
  _impl_.static_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline void SLFrameDebug::_internal_add_static_obstacle_lower_bound(double value) {
  _impl_.static_obstacle_lower_bound_.Add(value);
}
inline void SLFrameDebug::add_static_obstacle_lower_bound(double value) {
  _internal_add_static_obstacle_lower_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_static_obstacle_lower_bound() const {
  return _impl_.static_obstacle_lower_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::static_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return _internal_static_obstacle_lower_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_static_obstacle_lower_bound() {
  return &_impl_.static_obstacle_lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_lower_bound)
  return _internal_mutable_static_obstacle_lower_bound();
}

// repeated double dynamic_obstacle_lower_bound = 4;
inline int SLFrameDebug::_internal_dynamic_obstacle_lower_bound_size() const {
  return _impl_.dynamic_obstacle_lower_bound_.size();
}
inline int SLFrameDebug::dynamic_obstacle_lower_bound_size() const {
  return _internal_dynamic_obstacle_lower_bound_size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_lower_bound() {
  _impl_.dynamic_obstacle_lower_bound_.Clear();
}
inline double SLFrameDebug::_internal_dynamic_obstacle_lower_bound(int index) const {
  return _impl_.dynamic_obstacle_lower_bound_.Get(index);
}
inline double SLFrameDebug::dynamic_obstacle_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return _internal_dynamic_obstacle_lower_bound(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_lower_bound(int index, double value) {
  _impl_.dynamic_obstacle_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline void SLFrameDebug::_internal_add_dynamic_obstacle_lower_bound(double value) {
  _impl_.dynamic_obstacle_lower_bound_.Add(value);
}
inline void SLFrameDebug::add_dynamic_obstacle_lower_bound(double value) {
  _internal_add_dynamic_obstacle_lower_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_dynamic_obstacle_lower_bound() const {
  return _impl_.dynamic_obstacle_lower_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return _internal_dynamic_obstacle_lower_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_dynamic_obstacle_lower_bound() {
  return &_impl_.dynamic_obstacle_lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_lower_bound)
  return _internal_mutable_dynamic_obstacle_lower_bound();
}

// repeated double static_obstacle_upper_bound = 5;
inline int SLFrameDebug::_internal_static_obstacle_upper_bound_size() const {
  return _impl_.static_obstacle_upper_bound_.size();
}
inline int SLFrameDebug::static_obstacle_upper_bound_size() const {
  return _internal_static_obstacle_upper_bound_size();
}
inline void SLFrameDebug::clear_static_obstacle_upper_bound() {
  _impl_.static_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::_internal_static_obstacle_upper_bound(int index) const {
  return _impl_.static_obstacle_upper_bound_.Get(index);
}
inline double SLFrameDebug::static_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return _internal_static_obstacle_upper_bound(index);
}
inline void SLFrameDebug::set_static_obstacle_upper_bound(int index, double value) {
  _impl_.static_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline void SLFrameDebug::_internal_add_static_obstacle_upper_bound(double value) {
  _impl_.static_obstacle_upper_bound_.Add(value);
}
inline void SLFrameDebug::add_static_obstacle_upper_bound(double value) {
  _internal_add_static_obstacle_upper_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_static_obstacle_upper_bound() const {
  return _impl_.static_obstacle_upper_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::static_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return _internal_static_obstacle_upper_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_static_obstacle_upper_bound() {
  return &_impl_.static_obstacle_upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_static_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.static_obstacle_upper_bound)
  return _internal_mutable_static_obstacle_upper_bound();
}

// repeated double dynamic_obstacle_upper_bound = 6;
inline int SLFrameDebug::_internal_dynamic_obstacle_upper_bound_size() const {
  return _impl_.dynamic_obstacle_upper_bound_.size();
}
inline int SLFrameDebug::dynamic_obstacle_upper_bound_size() const {
  return _internal_dynamic_obstacle_upper_bound_size();
}
inline void SLFrameDebug::clear_dynamic_obstacle_upper_bound() {
  _impl_.dynamic_obstacle_upper_bound_.Clear();
}
inline double SLFrameDebug::_internal_dynamic_obstacle_upper_bound(int index) const {
  return _impl_.dynamic_obstacle_upper_bound_.Get(index);
}
inline double SLFrameDebug::dynamic_obstacle_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return _internal_dynamic_obstacle_upper_bound(index);
}
inline void SLFrameDebug::set_dynamic_obstacle_upper_bound(int index, double value) {
  _impl_.dynamic_obstacle_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline void SLFrameDebug::_internal_add_dynamic_obstacle_upper_bound(double value) {
  _impl_.dynamic_obstacle_upper_bound_.Add(value);
}
inline void SLFrameDebug::add_dynamic_obstacle_upper_bound(double value) {
  _internal_add_dynamic_obstacle_upper_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_dynamic_obstacle_upper_bound() const {
  return _impl_.dynamic_obstacle_upper_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::dynamic_obstacle_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return _internal_dynamic_obstacle_upper_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_dynamic_obstacle_upper_bound() {
  return &_impl_.dynamic_obstacle_upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_dynamic_obstacle_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.dynamic_obstacle_upper_bound)
  return _internal_mutable_dynamic_obstacle_upper_bound();
}

// repeated double map_lower_bound = 7;
inline int SLFrameDebug::_internal_map_lower_bound_size() const {
  return _impl_.map_lower_bound_.size();
}
inline int SLFrameDebug::map_lower_bound_size() const {
  return _internal_map_lower_bound_size();
}
inline void SLFrameDebug::clear_map_lower_bound() {
  _impl_.map_lower_bound_.Clear();
}
inline double SLFrameDebug::_internal_map_lower_bound(int index) const {
  return _impl_.map_lower_bound_.Get(index);
}
inline double SLFrameDebug::map_lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return _internal_map_lower_bound(index);
}
inline void SLFrameDebug::set_map_lower_bound(int index, double value) {
  _impl_.map_lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
inline void SLFrameDebug::_internal_add_map_lower_bound(double value) {
  _impl_.map_lower_bound_.Add(value);
}
inline void SLFrameDebug::add_map_lower_bound(double value) {
  _internal_add_map_lower_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_lower_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_map_lower_bound() const {
  return _impl_.map_lower_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::map_lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return _internal_map_lower_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_map_lower_bound() {
  return &_impl_.map_lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_map_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_lower_bound)
  return _internal_mutable_map_lower_bound();
}

// repeated double map_upper_bound = 8;
inline int SLFrameDebug::_internal_map_upper_bound_size() const {
  return _impl_.map_upper_bound_.size();
}
inline int SLFrameDebug::map_upper_bound_size() const {
  return _internal_map_upper_bound_size();
}
inline void SLFrameDebug::clear_map_upper_bound() {
  _impl_.map_upper_bound_.Clear();
}
inline double SLFrameDebug::_internal_map_upper_bound(int index) const {
  return _impl_.map_upper_bound_.Get(index);
}
inline double SLFrameDebug::map_upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return _internal_map_upper_bound(index);
}
inline void SLFrameDebug::set_map_upper_bound(int index, double value) {
  _impl_.map_upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
inline void SLFrameDebug::_internal_add_map_upper_bound(double value) {
  _impl_.map_upper_bound_.Add(value);
}
inline void SLFrameDebug::add_map_upper_bound(double value) {
  _internal_add_map_upper_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.map_upper_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_map_upper_bound() const {
  return _impl_.map_upper_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::map_upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return _internal_map_upper_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_map_upper_bound() {
  return &_impl_.map_upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_map_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.map_upper_bound)
  return _internal_mutable_map_upper_bound();
}

// repeated .apollo.common.SLPoint sl_path = 9;
inline int SLFrameDebug::_internal_sl_path_size() const {
  return _impl_.sl_path_.size();
}
inline int SLFrameDebug::sl_path_size() const {
  return _internal_sl_path_size();
}
inline ::apollo::common::SLPoint* SLFrameDebug::mutable_sl_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SLFrameDebug.sl_path)
  return _impl_.sl_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
SLFrameDebug::mutable_sl_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return &_impl_.sl_path_;
}
inline const ::apollo::common::SLPoint& SLFrameDebug::_internal_sl_path(int index) const {
  return _impl_.sl_path_.Get(index);
}
inline const ::apollo::common::SLPoint& SLFrameDebug::sl_path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.sl_path)
  return _internal_sl_path(index);
}
inline ::apollo::common::SLPoint* SLFrameDebug::_internal_add_sl_path() {
  return _impl_.sl_path_.Add();
}
inline ::apollo::common::SLPoint* SLFrameDebug::add_sl_path() {
  ::apollo::common::SLPoint* _add = _internal_add_sl_path();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.sl_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
SLFrameDebug::sl_path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.sl_path)
  return _impl_.sl_path_;
}

// repeated double aggregated_boundary_s = 10;
inline int SLFrameDebug::_internal_aggregated_boundary_s_size() const {
  return _impl_.aggregated_boundary_s_.size();
}
inline int SLFrameDebug::aggregated_boundary_s_size() const {
  return _internal_aggregated_boundary_s_size();
}
inline void SLFrameDebug::clear_aggregated_boundary_s() {
  _impl_.aggregated_boundary_s_.Clear();
}
inline double SLFrameDebug::_internal_aggregated_boundary_s(int index) const {
  return _impl_.aggregated_boundary_s_.Get(index);
}
inline double SLFrameDebug::aggregated_boundary_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return _internal_aggregated_boundary_s(index);
}
inline void SLFrameDebug::set_aggregated_boundary_s(int index, double value) {
  _impl_.aggregated_boundary_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline void SLFrameDebug::_internal_add_aggregated_boundary_s(double value) {
  _impl_.aggregated_boundary_s_.Add(value);
}
inline void SLFrameDebug::add_aggregated_boundary_s(double value) {
  _internal_add_aggregated_boundary_s(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_aggregated_boundary_s() const {
  return _impl_.aggregated_boundary_s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return _internal_aggregated_boundary_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_aggregated_boundary_s() {
  return &_impl_.aggregated_boundary_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_s)
  return _internal_mutable_aggregated_boundary_s();
}

// repeated double aggregated_boundary_low = 11;
inline int SLFrameDebug::_internal_aggregated_boundary_low_size() const {
  return _impl_.aggregated_boundary_low_.size();
}
inline int SLFrameDebug::aggregated_boundary_low_size() const {
  return _internal_aggregated_boundary_low_size();
}
inline void SLFrameDebug::clear_aggregated_boundary_low() {
  _impl_.aggregated_boundary_low_.Clear();
}
inline double SLFrameDebug::_internal_aggregated_boundary_low(int index) const {
  return _impl_.aggregated_boundary_low_.Get(index);
}
inline double SLFrameDebug::aggregated_boundary_low(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return _internal_aggregated_boundary_low(index);
}
inline void SLFrameDebug::set_aggregated_boundary_low(int index, double value) {
  _impl_.aggregated_boundary_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline void SLFrameDebug::_internal_add_aggregated_boundary_low(double value) {
  _impl_.aggregated_boundary_low_.Add(value);
}
inline void SLFrameDebug::add_aggregated_boundary_low(double value) {
  _internal_add_aggregated_boundary_low(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_aggregated_boundary_low() const {
  return _impl_.aggregated_boundary_low_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_low() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return _internal_aggregated_boundary_low();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_aggregated_boundary_low() {
  return &_impl_.aggregated_boundary_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_low() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_low)
  return _internal_mutable_aggregated_boundary_low();
}

// repeated double aggregated_boundary_high = 12;
inline int SLFrameDebug::_internal_aggregated_boundary_high_size() const {
  return _impl_.aggregated_boundary_high_.size();
}
inline int SLFrameDebug::aggregated_boundary_high_size() const {
  return _internal_aggregated_boundary_high_size();
}
inline void SLFrameDebug::clear_aggregated_boundary_high() {
  _impl_.aggregated_boundary_high_.Clear();
}
inline double SLFrameDebug::_internal_aggregated_boundary_high(int index) const {
  return _impl_.aggregated_boundary_high_.Get(index);
}
inline double SLFrameDebug::aggregated_boundary_high(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return _internal_aggregated_boundary_high(index);
}
inline void SLFrameDebug::set_aggregated_boundary_high(int index, double value) {
  _impl_.aggregated_boundary_high_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline void SLFrameDebug::_internal_add_aggregated_boundary_high(double value) {
  _impl_.aggregated_boundary_high_.Add(value);
}
inline void SLFrameDebug::add_aggregated_boundary_high(double value) {
  _internal_add_aggregated_boundary_high(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::_internal_aggregated_boundary_high() const {
  return _impl_.aggregated_boundary_high_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SLFrameDebug::aggregated_boundary_high() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return _internal_aggregated_boundary_high();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::_internal_mutable_aggregated_boundary_high() {
  return &_impl_.aggregated_boundary_high_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SLFrameDebug::mutable_aggregated_boundary_high() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SLFrameDebug.aggregated_boundary_high)
  return _internal_mutable_aggregated_boundary_high();
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphSpeedConstraint

// repeated double t = 1;
inline int STGraphDebug_STGraphSpeedConstraint::_internal_t_size() const {
  return _impl_.t_.size();
}
inline int STGraphDebug_STGraphSpeedConstraint::t_size() const {
  return _internal_t_size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_t() {
  _impl_.t_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::_internal_t(int index) const {
  return _impl_.t_.Get(index);
}
inline double STGraphDebug_STGraphSpeedConstraint::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return _internal_t(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_t(int index, double value) {
  _impl_.t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline void STGraphDebug_STGraphSpeedConstraint::_internal_add_t(double value) {
  _impl_.t_.Add(value);
}
inline void STGraphDebug_STGraphSpeedConstraint::add_t(double value) {
  _internal_add_t(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::_internal_t() const {
  return _impl_.t_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return _internal_t();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::_internal_mutable_t() {
  return &_impl_.t_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.t)
  return _internal_mutable_t();
}

// repeated double lower_bound = 2;
inline int STGraphDebug_STGraphSpeedConstraint::_internal_lower_bound_size() const {
  return _impl_.lower_bound_.size();
}
inline int STGraphDebug_STGraphSpeedConstraint::lower_bound_size() const {
  return _internal_lower_bound_size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_lower_bound() {
  _impl_.lower_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::_internal_lower_bound(int index) const {
  return _impl_.lower_bound_.Get(index);
}
inline double STGraphDebug_STGraphSpeedConstraint::lower_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return _internal_lower_bound(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_lower_bound(int index, double value) {
  _impl_.lower_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::_internal_add_lower_bound(double value) {
  _impl_.lower_bound_.Add(value);
}
inline void STGraphDebug_STGraphSpeedConstraint::add_lower_bound(double value) {
  _internal_add_lower_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::_internal_lower_bound() const {
  return _impl_.lower_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return _internal_lower_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::_internal_mutable_lower_bound() {
  return &_impl_.lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_lower_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.lower_bound)
  return _internal_mutable_lower_bound();
}

// repeated double upper_bound = 3;
inline int STGraphDebug_STGraphSpeedConstraint::_internal_upper_bound_size() const {
  return _impl_.upper_bound_.size();
}
inline int STGraphDebug_STGraphSpeedConstraint::upper_bound_size() const {
  return _internal_upper_bound_size();
}
inline void STGraphDebug_STGraphSpeedConstraint::clear_upper_bound() {
  _impl_.upper_bound_.Clear();
}
inline double STGraphDebug_STGraphSpeedConstraint::_internal_upper_bound(int index) const {
  return _impl_.upper_bound_.Get(index);
}
inline double STGraphDebug_STGraphSpeedConstraint::upper_bound(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return _internal_upper_bound(index);
}
inline void STGraphDebug_STGraphSpeedConstraint::set_upper_bound(int index, double value) {
  _impl_.upper_bound_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline void STGraphDebug_STGraphSpeedConstraint::_internal_add_upper_bound(double value) {
  _impl_.upper_bound_.Add(value);
}
inline void STGraphDebug_STGraphSpeedConstraint::add_upper_bound(double value) {
  _internal_add_upper_bound(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::_internal_upper_bound() const {
  return _impl_.upper_bound_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphSpeedConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return _internal_upper_bound();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::_internal_mutable_upper_bound() {
  return &_impl_.upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphSpeedConstraint::mutable_upper_bound() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint.upper_bound)
  return _internal_mutable_upper_bound();
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelCuiseRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelCuiseRef::_internal_t_size() const {
  return _impl_.t_.size();
}
inline int STGraphDebug_STGraphKernelCuiseRef::t_size() const {
  return _internal_t_size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_t() {
  _impl_.t_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::_internal_t(int index) const {
  return _impl_.t_.Get(index);
}
inline double STGraphDebug_STGraphKernelCuiseRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return _internal_t(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_t(int index, double value) {
  _impl_.t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline void STGraphDebug_STGraphKernelCuiseRef::_internal_add_t(double value) {
  _impl_.t_.Add(value);
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_t(double value) {
  _internal_add_t(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::_internal_t() const {
  return _impl_.t_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return _internal_t();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::_internal_mutable_t() {
  return &_impl_.t_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.t)
  return _internal_mutable_t();
}

// repeated double cruise_line_s = 2;
inline int STGraphDebug_STGraphKernelCuiseRef::_internal_cruise_line_s_size() const {
  return _impl_.cruise_line_s_.size();
}
inline int STGraphDebug_STGraphKernelCuiseRef::cruise_line_s_size() const {
  return _internal_cruise_line_s_size();
}
inline void STGraphDebug_STGraphKernelCuiseRef::clear_cruise_line_s() {
  _impl_.cruise_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelCuiseRef::_internal_cruise_line_s(int index) const {
  return _impl_.cruise_line_s_.Get(index);
}
inline double STGraphDebug_STGraphKernelCuiseRef::cruise_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return _internal_cruise_line_s(index);
}
inline void STGraphDebug_STGraphKernelCuiseRef::set_cruise_line_s(int index, double value) {
  _impl_.cruise_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline void STGraphDebug_STGraphKernelCuiseRef::_internal_add_cruise_line_s(double value) {
  _impl_.cruise_line_s_.Add(value);
}
inline void STGraphDebug_STGraphKernelCuiseRef::add_cruise_line_s(double value) {
  _internal_add_cruise_line_s(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::_internal_cruise_line_s() const {
  return _impl_.cruise_line_s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelCuiseRef::cruise_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return _internal_cruise_line_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::_internal_mutable_cruise_line_s() {
  return &_impl_.cruise_line_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelCuiseRef::mutable_cruise_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef.cruise_line_s)
  return _internal_mutable_cruise_line_s();
}

// -------------------------------------------------------------------

// STGraphDebug_STGraphKernelFollowRef

// repeated double t = 1;
inline int STGraphDebug_STGraphKernelFollowRef::_internal_t_size() const {
  return _impl_.t_.size();
}
inline int STGraphDebug_STGraphKernelFollowRef::t_size() const {
  return _internal_t_size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_t() {
  _impl_.t_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::_internal_t(int index) const {
  return _impl_.t_.Get(index);
}
inline double STGraphDebug_STGraphKernelFollowRef::t(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return _internal_t(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_t(int index, double value) {
  _impl_.t_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline void STGraphDebug_STGraphKernelFollowRef::_internal_add_t(double value) {
  _impl_.t_.Add(value);
}
inline void STGraphDebug_STGraphKernelFollowRef::add_t(double value) {
  _internal_add_t(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::_internal_t() const {
  return _impl_.t_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::t() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return _internal_t();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::_internal_mutable_t() {
  return &_impl_.t_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.t)
  return _internal_mutable_t();
}

// repeated double follow_line_s = 2;
inline int STGraphDebug_STGraphKernelFollowRef::_internal_follow_line_s_size() const {
  return _impl_.follow_line_s_.size();
}
inline int STGraphDebug_STGraphKernelFollowRef::follow_line_s_size() const {
  return _internal_follow_line_s_size();
}
inline void STGraphDebug_STGraphKernelFollowRef::clear_follow_line_s() {
  _impl_.follow_line_s_.Clear();
}
inline double STGraphDebug_STGraphKernelFollowRef::_internal_follow_line_s(int index) const {
  return _impl_.follow_line_s_.Get(index);
}
inline double STGraphDebug_STGraphKernelFollowRef::follow_line_s(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return _internal_follow_line_s(index);
}
inline void STGraphDebug_STGraphKernelFollowRef::set_follow_line_s(int index, double value) {
  _impl_.follow_line_s_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline void STGraphDebug_STGraphKernelFollowRef::_internal_add_follow_line_s(double value) {
  _impl_.follow_line_s_.Add(value);
}
inline void STGraphDebug_STGraphKernelFollowRef::add_follow_line_s(double value) {
  _internal_add_follow_line_s(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::_internal_follow_line_s() const {
  return _impl_.follow_line_s_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
STGraphDebug_STGraphKernelFollowRef::follow_line_s() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return _internal_follow_line_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::_internal_mutable_follow_line_s() {
  return &_impl_.follow_line_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
STGraphDebug_STGraphKernelFollowRef::mutable_follow_line_s() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef.follow_line_s)
  return _internal_mutable_follow_line_s();
}

// -------------------------------------------------------------------

// STGraphDebug

// optional string name = 1;
inline bool STGraphDebug::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool STGraphDebug::has_name() const {
  return _internal_has_name();
}
inline void STGraphDebug::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& STGraphDebug::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void STGraphDebug::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.STGraphDebug.name)
}
inline std::string* STGraphDebug::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.name)
  return _s;
}
inline const std::string& STGraphDebug::_internal_name() const {
  return _impl_.name_.Get();
}
inline void STGraphDebug::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* STGraphDebug::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* STGraphDebug::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void STGraphDebug::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.name)
}

// repeated .apollo.planning_internal.StGraphBoundaryDebug boundary = 2;
inline int STGraphDebug::_internal_boundary_size() const {
  return _impl_.boundary_.size();
}
inline int STGraphDebug::boundary_size() const {
  return _internal_boundary_size();
}
inline void STGraphDebug::clear_boundary() {
  _impl_.boundary_.Clear();
}
inline ::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::mutable_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.boundary)
  return _impl_.boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >*
STGraphDebug::mutable_boundary() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.boundary)
  return &_impl_.boundary_;
}
inline const ::apollo::planning_internal::StGraphBoundaryDebug& STGraphDebug::_internal_boundary(int index) const {
  return _impl_.boundary_.Get(index);
}
inline const ::apollo::planning_internal::StGraphBoundaryDebug& STGraphDebug::boundary(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.boundary)
  return _internal_boundary(index);
}
inline ::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::_internal_add_boundary() {
  return _impl_.boundary_.Add();
}
inline ::apollo::planning_internal::StGraphBoundaryDebug* STGraphDebug::add_boundary() {
  ::apollo::planning_internal::StGraphBoundaryDebug* _add = _internal_add_boundary();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.boundary)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::StGraphBoundaryDebug >&
STGraphDebug::boundary() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.boundary)
  return _impl_.boundary_;
}

// repeated .apollo.common.SpeedPoint speed_limit = 3;
inline int STGraphDebug::_internal_speed_limit_size() const {
  return _impl_.speed_limit_.size();
}
inline int STGraphDebug::speed_limit_size() const {
  return _internal_speed_limit_size();
}
inline ::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_limit)
  return _impl_.speed_limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return &_impl_.speed_limit_;
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::_internal_speed_limit(int index) const {
  return _impl_.speed_limit_.Get(index);
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_limit)
  return _internal_speed_limit(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::_internal_add_speed_limit() {
  return _impl_.speed_limit_.Add();
}
inline ::apollo::common::SpeedPoint* STGraphDebug::add_speed_limit() {
  ::apollo::common::SpeedPoint* _add = _internal_add_speed_limit();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_limit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_limit() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_limit)
  return _impl_.speed_limit_;
}

// repeated .apollo.common.SpeedPoint speed_profile = 4;
inline int STGraphDebug::_internal_speed_profile_size() const {
  return _impl_.speed_profile_.size();
}
inline int STGraphDebug::speed_profile_size() const {
  return _internal_speed_profile_size();
}
inline ::apollo::common::SpeedPoint* STGraphDebug::mutable_speed_profile(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_profile)
  return _impl_.speed_profile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >*
STGraphDebug::mutable_speed_profile() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return &_impl_.speed_profile_;
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::_internal_speed_profile(int index) const {
  return _impl_.speed_profile_.Get(index);
}
inline const ::apollo::common::SpeedPoint& STGraphDebug::speed_profile(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_profile)
  return _internal_speed_profile(index);
}
inline ::apollo::common::SpeedPoint* STGraphDebug::_internal_add_speed_profile() {
  return _impl_.speed_profile_.Add();
}
inline ::apollo::common::SpeedPoint* STGraphDebug::add_speed_profile() {
  ::apollo::common::SpeedPoint* _add = _internal_add_speed_profile();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.STGraphDebug.speed_profile)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SpeedPoint >&
STGraphDebug::speed_profile() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.STGraphDebug.speed_profile)
  return _impl_.speed_profile_;
}

// optional .apollo.planning_internal.STGraphDebug.STGraphSpeedConstraint speed_constraint = 5;
inline bool STGraphDebug::_internal_has_speed_constraint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.speed_constraint_ != nullptr);
  return value;
}
inline bool STGraphDebug::has_speed_constraint() const {
  return _internal_has_speed_constraint();
}
inline void STGraphDebug::clear_speed_constraint() {
  if (_impl_.speed_constraint_ != nullptr) _impl_.speed_constraint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::_internal_speed_constraint() const {
  const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* p = _impl_.speed_constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint&>(
      ::apollo::planning_internal::_STGraphDebug_STGraphSpeedConstraint_default_instance_);
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint& STGraphDebug::speed_constraint() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.speed_constraint)
  return _internal_speed_constraint();
}
inline void STGraphDebug::unsafe_arena_set_allocated_speed_constraint(
    ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.speed_constraint_);
  }
  _impl_.speed_constraint_ = speed_constraint;
  if (speed_constraint) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.STGraphDebug.speed_constraint)
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::release_speed_constraint() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = _impl_.speed_constraint_;
  _impl_.speed_constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::unsafe_arena_release_speed_constraint() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.speed_constraint)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* temp = _impl_.speed_constraint_;
  _impl_.speed_constraint_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::_internal_mutable_speed_constraint() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.speed_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint>(GetArenaForAllocation());
    _impl_.speed_constraint_ = p;
  }
  return _impl_.speed_constraint_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* STGraphDebug::mutable_speed_constraint() {
  ::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* _msg = _internal_mutable_speed_constraint();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.speed_constraint)
  return _msg;
}
inline void STGraphDebug::set_allocated_speed_constraint(::apollo::planning_internal::STGraphDebug_STGraphSpeedConstraint* speed_constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.speed_constraint_;
  }
  if (speed_constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(speed_constraint);
    if (message_arena != submessage_arena) {
      speed_constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_constraint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.speed_constraint_ = speed_constraint;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.speed_constraint)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelCuiseRef kernel_cruise_ref = 6;
inline bool STGraphDebug::_internal_has_kernel_cruise_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kernel_cruise_ref_ != nullptr);
  return value;
}
inline bool STGraphDebug::has_kernel_cruise_ref() const {
  return _internal_has_kernel_cruise_ref();
}
inline void STGraphDebug::clear_kernel_cruise_ref() {
  if (_impl_.kernel_cruise_ref_ != nullptr) _impl_.kernel_cruise_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::_internal_kernel_cruise_ref() const {
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* p = _impl_.kernel_cruise_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef&>(
      ::apollo::planning_internal::_STGraphDebug_STGraphKernelCuiseRef_default_instance_);
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef& STGraphDebug::kernel_cruise_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return _internal_kernel_cruise_ref();
}
inline void STGraphDebug::unsafe_arena_set_allocated_kernel_cruise_ref(
    ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kernel_cruise_ref_);
  }
  _impl_.kernel_cruise_ref_ = kernel_cruise_ref;
  if (kernel_cruise_ref) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::release_kernel_cruise_ref() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = _impl_.kernel_cruise_ref_;
  _impl_.kernel_cruise_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::unsafe_arena_release_kernel_cruise_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* temp = _impl_.kernel_cruise_ref_;
  _impl_.kernel_cruise_ref_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::_internal_mutable_kernel_cruise_ref() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.kernel_cruise_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef>(GetArenaForAllocation());
    _impl_.kernel_cruise_ref_ = p;
  }
  return _impl_.kernel_cruise_ref_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* STGraphDebug::mutable_kernel_cruise_ref() {
  ::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* _msg = _internal_mutable_kernel_cruise_ref();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
  return _msg;
}
inline void STGraphDebug::set_allocated_kernel_cruise_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelCuiseRef* kernel_cruise_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kernel_cruise_ref_;
  }
  if (kernel_cruise_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kernel_cruise_ref);
    if (message_arena != submessage_arena) {
      kernel_cruise_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel_cruise_ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.kernel_cruise_ref_ = kernel_cruise_ref;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_cruise_ref)
}

// optional .apollo.planning_internal.STGraphDebug.STGraphKernelFollowRef kernel_follow_ref = 7;
inline bool STGraphDebug::_internal_has_kernel_follow_ref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kernel_follow_ref_ != nullptr);
  return value;
}
inline bool STGraphDebug::has_kernel_follow_ref() const {
  return _internal_has_kernel_follow_ref();
}
inline void STGraphDebug::clear_kernel_follow_ref() {
  if (_impl_.kernel_follow_ref_ != nullptr) _impl_.kernel_follow_ref_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::_internal_kernel_follow_ref() const {
  const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* p = _impl_.kernel_follow_ref_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef&>(
      ::apollo::planning_internal::_STGraphDebug_STGraphKernelFollowRef_default_instance_);
}
inline const ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef& STGraphDebug::kernel_follow_ref() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return _internal_kernel_follow_ref();
}
inline void STGraphDebug::unsafe_arena_set_allocated_kernel_follow_ref(
    ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kernel_follow_ref_);
  }
  _impl_.kernel_follow_ref_ = kernel_follow_ref;
  if (kernel_follow_ref) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::release_kernel_follow_ref() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = _impl_.kernel_follow_ref_;
  _impl_.kernel_follow_ref_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::unsafe_arena_release_kernel_follow_ref() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* temp = _impl_.kernel_follow_ref_;
  _impl_.kernel_follow_ref_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::_internal_mutable_kernel_follow_ref() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.kernel_follow_ref_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef>(GetArenaForAllocation());
    _impl_.kernel_follow_ref_ = p;
  }
  return _impl_.kernel_follow_ref_;
}
inline ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* STGraphDebug::mutable_kernel_follow_ref() {
  ::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* _msg = _internal_mutable_kernel_follow_ref();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
  return _msg;
}
inline void STGraphDebug::set_allocated_kernel_follow_ref(::apollo::planning_internal::STGraphDebug_STGraphKernelFollowRef* kernel_follow_ref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kernel_follow_ref_;
  }
  if (kernel_follow_ref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kernel_follow_ref);
    if (message_arena != submessage_arena) {
      kernel_follow_ref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kernel_follow_ref, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.kernel_follow_ref_ = kernel_follow_ref;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.STGraphDebug.kernel_follow_ref)
}

// -------------------------------------------------------------------

// SignalLightDebug_SignalDebug

// optional string light_id = 1;
inline bool SignalLightDebug_SignalDebug::_internal_has_light_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalLightDebug_SignalDebug::has_light_id() const {
  return _internal_has_light_id();
}
inline void SignalLightDebug_SignalDebug::clear_light_id() {
  _impl_.light_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignalLightDebug_SignalDebug::light_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return _internal_light_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SignalLightDebug_SignalDebug::set_light_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.light_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}
inline std::string* SignalLightDebug_SignalDebug::mutable_light_id() {
  std::string* _s = _internal_mutable_light_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  return _s;
}
inline const std::string& SignalLightDebug_SignalDebug::_internal_light_id() const {
  return _impl_.light_id_.Get();
}
inline void SignalLightDebug_SignalDebug::_internal_set_light_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.light_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignalLightDebug_SignalDebug::_internal_mutable_light_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.light_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SignalLightDebug_SignalDebug::release_light_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
  if (!_internal_has_light_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.light_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.light_id_.IsDefault()) {
    _impl_.light_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SignalLightDebug_SignalDebug::set_allocated_light_id(std::string* light_id) {
  if (light_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.light_id_.SetAllocated(light_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.light_id_.IsDefault()) {
    _impl_.light_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.SignalLightDebug.SignalDebug.light_id)
}

// optional .apollo.perception.TrafficLight.Color color = 2;
inline bool SignalLightDebug_SignalDebug::_internal_has_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SignalLightDebug_SignalDebug::has_color() const {
  return _internal_has_color();
}
inline void SignalLightDebug_SignalDebug::clear_color() {
  _impl_.color_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::perception::TrafficLight_Color SignalLightDebug_SignalDebug::_internal_color() const {
  return static_cast< ::apollo::perception::TrafficLight_Color >(_impl_.color_);
}
inline ::apollo::perception::TrafficLight_Color SignalLightDebug_SignalDebug::color() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
  return _internal_color();
}
inline void SignalLightDebug_SignalDebug::_internal_set_color(::apollo::perception::TrafficLight_Color value) {
  assert(::apollo::perception::TrafficLight_Color_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.color_ = value;
}
inline void SignalLightDebug_SignalDebug::set_color(::apollo::perception::TrafficLight_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.color)
}

// optional double light_stop_s = 3;
inline bool SignalLightDebug_SignalDebug::_internal_has_light_stop_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalLightDebug_SignalDebug::has_light_stop_s() const {
  return _internal_has_light_stop_s();
}
inline void SignalLightDebug_SignalDebug::clear_light_stop_s() {
  _impl_.light_stop_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SignalLightDebug_SignalDebug::_internal_light_stop_s() const {
  return _impl_.light_stop_s_;
}
inline double SignalLightDebug_SignalDebug::light_stop_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
  return _internal_light_stop_s();
}
inline void SignalLightDebug_SignalDebug::_internal_set_light_stop_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.light_stop_s_ = value;
}
inline void SignalLightDebug_SignalDebug::set_light_stop_s(double value) {
  _internal_set_light_stop_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.light_stop_s)
}

// optional double adc_stop_deacceleration = 4;
inline bool SignalLightDebug_SignalDebug::_internal_has_adc_stop_deacceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SignalLightDebug_SignalDebug::has_adc_stop_deacceleration() const {
  return _internal_has_adc_stop_deacceleration();
}
inline void SignalLightDebug_SignalDebug::clear_adc_stop_deacceleration() {
  _impl_.adc_stop_deacceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SignalLightDebug_SignalDebug::_internal_adc_stop_deacceleration() const {
  return _impl_.adc_stop_deacceleration_;
}
inline double SignalLightDebug_SignalDebug::adc_stop_deacceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
  return _internal_adc_stop_deacceleration();
}
inline void SignalLightDebug_SignalDebug::_internal_set_adc_stop_deacceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.adc_stop_deacceleration_ = value;
}
inline void SignalLightDebug_SignalDebug::set_adc_stop_deacceleration(double value) {
  _internal_set_adc_stop_deacceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.adc_stop_deacceleration)
}

// optional bool is_stop_wall_created = 5;
inline bool SignalLightDebug_SignalDebug::_internal_has_is_stop_wall_created() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SignalLightDebug_SignalDebug::has_is_stop_wall_created() const {
  return _internal_has_is_stop_wall_created();
}
inline void SignalLightDebug_SignalDebug::clear_is_stop_wall_created() {
  _impl_.is_stop_wall_created_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool SignalLightDebug_SignalDebug::_internal_is_stop_wall_created() const {
  return _impl_.is_stop_wall_created_;
}
inline bool SignalLightDebug_SignalDebug::is_stop_wall_created() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
  return _internal_is_stop_wall_created();
}
inline void SignalLightDebug_SignalDebug::_internal_set_is_stop_wall_created(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_stop_wall_created_ = value;
}
inline void SignalLightDebug_SignalDebug::set_is_stop_wall_created(bool value) {
  _internal_set_is_stop_wall_created(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.SignalDebug.is_stop_wall_created)
}

// -------------------------------------------------------------------

// SignalLightDebug

// optional double adc_speed = 1;
inline bool SignalLightDebug::_internal_has_adc_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SignalLightDebug::has_adc_speed() const {
  return _internal_has_adc_speed();
}
inline void SignalLightDebug::clear_adc_speed() {
  _impl_.adc_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SignalLightDebug::_internal_adc_speed() const {
  return _impl_.adc_speed_;
}
inline double SignalLightDebug::adc_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_speed)
  return _internal_adc_speed();
}
inline void SignalLightDebug::_internal_set_adc_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.adc_speed_ = value;
}
inline void SignalLightDebug::set_adc_speed(double value) {
  _internal_set_adc_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_speed)
}

// optional double adc_front_s = 2;
inline bool SignalLightDebug::_internal_has_adc_front_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SignalLightDebug::has_adc_front_s() const {
  return _internal_has_adc_front_s();
}
inline void SignalLightDebug::clear_adc_front_s() {
  _impl_.adc_front_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SignalLightDebug::_internal_adc_front_s() const {
  return _impl_.adc_front_s_;
}
inline double SignalLightDebug::adc_front_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.adc_front_s)
  return _internal_adc_front_s();
}
inline void SignalLightDebug::_internal_set_adc_front_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.adc_front_s_ = value;
}
inline void SignalLightDebug::set_adc_front_s(double value) {
  _internal_set_adc_front_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.SignalLightDebug.adc_front_s)
}

// repeated .apollo.planning_internal.SignalLightDebug.SignalDebug signal = 3;
inline int SignalLightDebug::_internal_signal_size() const {
  return _impl_.signal_.size();
}
inline int SignalLightDebug::signal_size() const {
  return _internal_signal_size();
}
inline void SignalLightDebug::clear_signal() {
  _impl_.signal_.Clear();
}
inline ::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SignalLightDebug.signal)
  return _impl_.signal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >*
SignalLightDebug::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SignalLightDebug.signal)
  return &_impl_.signal_;
}
inline const ::apollo::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::_internal_signal(int index) const {
  return _impl_.signal_.Get(index);
}
inline const ::apollo::planning_internal::SignalLightDebug_SignalDebug& SignalLightDebug::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SignalLightDebug.signal)
  return _internal_signal(index);
}
inline ::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::_internal_add_signal() {
  return _impl_.signal_.Add();
}
inline ::apollo::planning_internal::SignalLightDebug_SignalDebug* SignalLightDebug::add_signal() {
  ::apollo::planning_internal::SignalLightDebug_SignalDebug* _add = _internal_add_signal();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SignalLightDebug.signal)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SignalLightDebug_SignalDebug >&
SignalLightDebug::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SignalLightDebug.signal)
  return _impl_.signal_;
}

// -------------------------------------------------------------------

// DecisionTag

// optional string decider_tag = 1;
inline bool DecisionTag::_internal_has_decider_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DecisionTag::has_decider_tag() const {
  return _internal_has_decider_tag();
}
inline void DecisionTag::clear_decider_tag() {
  _impl_.decider_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DecisionTag::decider_tag() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decider_tag)
  return _internal_decider_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecisionTag::set_decider_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.decider_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.DecisionTag.decider_tag)
}
inline std::string* DecisionTag::mutable_decider_tag() {
  std::string* _s = _internal_mutable_decider_tag();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decider_tag)
  return _s;
}
inline const std::string& DecisionTag::_internal_decider_tag() const {
  return _impl_.decider_tag_.Get();
}
inline void DecisionTag::_internal_set_decider_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.decider_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* DecisionTag::_internal_mutable_decider_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.decider_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* DecisionTag::release_decider_tag() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decider_tag)
  if (!_internal_has_decider_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.decider_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decider_tag_.IsDefault()) {
    _impl_.decider_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DecisionTag::set_allocated_decider_tag(std::string* decider_tag) {
  if (decider_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.decider_tag_.SetAllocated(decider_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.decider_tag_.IsDefault()) {
    _impl_.decider_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decider_tag)
}

// optional .apollo.planning.ObjectDecisionType decision = 2;
inline bool DecisionTag::_internal_has_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_ != nullptr);
  return value;
}
inline bool DecisionTag::has_decision() const {
  return _internal_has_decision();
}
inline const ::apollo::planning::ObjectDecisionType& DecisionTag::_internal_decision() const {
  const ::apollo::planning::ObjectDecisionType* p = _impl_.decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::ObjectDecisionType&>(
      ::apollo::planning::_ObjectDecisionType_default_instance_);
}
inline const ::apollo::planning::ObjectDecisionType& DecisionTag::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DecisionTag.decision)
  return _internal_decision();
}
inline void DecisionTag::unsafe_arena_set_allocated_decision(
    ::apollo::planning::ObjectDecisionType* decision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_);
  }
  _impl_.decision_ = decision;
  if (decision) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.DecisionTag.decision)
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::release_decision() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisionType* temp = _impl_.decision_;
  _impl_.decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::unsafe_arena_release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.DecisionTag.decision)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisionType* temp = _impl_.decision_;
  _impl_.decision_ = nullptr;
  return temp;
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::_internal_mutable_decision() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ObjectDecisionType>(GetArenaForAllocation());
    _impl_.decision_ = p;
  }
  return _impl_.decision_;
}
inline ::apollo::planning::ObjectDecisionType* DecisionTag::mutable_decision() {
  ::apollo::planning::ObjectDecisionType* _msg = _internal_mutable_decision();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DecisionTag.decision)
  return _msg;
}
inline void DecisionTag::set_allocated_decision(::apollo::planning::ObjectDecisionType* decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_);
  }
  if (decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision));
    if (message_arena != submessage_arena) {
      decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.decision_ = decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.DecisionTag.decision)
}

// -------------------------------------------------------------------

// ObstacleDebug

// optional string id = 1;
inline bool ObstacleDebug::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObstacleDebug::has_id() const {
  return _internal_has_id();
}
inline void ObstacleDebug::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObstacleDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObstacleDebug::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ObstacleDebug.id)
}
inline std::string* ObstacleDebug::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.id)
  return _s;
}
inline const std::string& ObstacleDebug::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ObstacleDebug::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObstacleDebug::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObstacleDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObstacleDebug::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.id)
}

// optional .apollo.planning.SLBoundary sl_boundary = 2;
inline bool ObstacleDebug::_internal_has_sl_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sl_boundary_ != nullptr);
  return value;
}
inline bool ObstacleDebug::has_sl_boundary() const {
  return _internal_has_sl_boundary();
}
inline const ::apollo::planning::SLBoundary& ObstacleDebug::_internal_sl_boundary() const {
  const ::apollo::planning::SLBoundary* p = _impl_.sl_boundary_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::SLBoundary&>(
      ::apollo::planning::_SLBoundary_default_instance_);
}
inline const ::apollo::planning::SLBoundary& ObstacleDebug::sl_boundary() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return _internal_sl_boundary();
}
inline void ObstacleDebug::unsafe_arena_set_allocated_sl_boundary(
    ::apollo::planning::SLBoundary* sl_boundary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sl_boundary_);
  }
  _impl_.sl_boundary_ = sl_boundary;
  if (sl_boundary) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.ObstacleDebug.sl_boundary)
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::release_sl_boundary() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::SLBoundary* temp = _impl_.sl_boundary_;
  _impl_.sl_boundary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::unsafe_arena_release_sl_boundary() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ObstacleDebug.sl_boundary)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::SLBoundary* temp = _impl_.sl_boundary_;
  _impl_.sl_boundary_ = nullptr;
  return temp;
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::_internal_mutable_sl_boundary() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sl_boundary_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::SLBoundary>(GetArenaForAllocation());
    _impl_.sl_boundary_ = p;
  }
  return _impl_.sl_boundary_;
}
inline ::apollo::planning::SLBoundary* ObstacleDebug::mutable_sl_boundary() {
  ::apollo::planning::SLBoundary* _msg = _internal_mutable_sl_boundary();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.sl_boundary)
  return _msg;
}
inline void ObstacleDebug::set_allocated_sl_boundary(::apollo::planning::SLBoundary* sl_boundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sl_boundary_);
  }
  if (sl_boundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sl_boundary));
    if (message_arena != submessage_arena) {
      sl_boundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sl_boundary, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sl_boundary_ = sl_boundary;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ObstacleDebug.sl_boundary)
}

// repeated .apollo.planning_internal.DecisionTag decision_tag = 3;
inline int ObstacleDebug::_internal_decision_tag_size() const {
  return _impl_.decision_tag_.size();
}
inline int ObstacleDebug::decision_tag_size() const {
  return _internal_decision_tag_size();
}
inline void ObstacleDebug::clear_decision_tag() {
  _impl_.decision_tag_.Clear();
}
inline ::apollo::planning_internal::DecisionTag* ObstacleDebug::mutable_decision_tag(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ObstacleDebug.decision_tag)
  return _impl_.decision_tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >*
ObstacleDebug::mutable_decision_tag() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return &_impl_.decision_tag_;
}
inline const ::apollo::planning_internal::DecisionTag& ObstacleDebug::_internal_decision_tag(int index) const {
  return _impl_.decision_tag_.Get(index);
}
inline const ::apollo::planning_internal::DecisionTag& ObstacleDebug::decision_tag(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ObstacleDebug.decision_tag)
  return _internal_decision_tag(index);
}
inline ::apollo::planning_internal::DecisionTag* ObstacleDebug::_internal_add_decision_tag() {
  return _impl_.decision_tag_.Add();
}
inline ::apollo::planning_internal::DecisionTag* ObstacleDebug::add_decision_tag() {
  ::apollo::planning_internal::DecisionTag* _add = _internal_add_decision_tag();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.ObstacleDebug.decision_tag)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::DecisionTag >&
ObstacleDebug::decision_tag() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.ObstacleDebug.decision_tag)
  return _impl_.decision_tag_;
}

// -------------------------------------------------------------------

// ReferenceLineDebug

// optional string id = 1;
inline bool ReferenceLineDebug::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_id() const {
  return _internal_has_id();
}
inline void ReferenceLineDebug::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReferenceLineDebug::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReferenceLineDebug::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.id)
}
inline std::string* ReferenceLineDebug::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.ReferenceLineDebug.id)
  return _s;
}
inline const std::string& ReferenceLineDebug::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ReferenceLineDebug::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ReferenceLineDebug::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ReferenceLineDebug::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.ReferenceLineDebug.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ReferenceLineDebug::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.ReferenceLineDebug.id)
}

// optional double length = 2;
inline bool ReferenceLineDebug::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_length() const {
  return _internal_has_length();
}
inline void ReferenceLineDebug::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ReferenceLineDebug::_internal_length() const {
  return _impl_.length_;
}
inline double ReferenceLineDebug::length() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.length)
  return _internal_length();
}
inline void ReferenceLineDebug::_internal_set_length(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.length_ = value;
}
inline void ReferenceLineDebug::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.length)
}

// optional double cost = 3;
inline bool ReferenceLineDebug::_internal_has_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_cost() const {
  return _internal_has_cost();
}
inline void ReferenceLineDebug::clear_cost() {
  _impl_.cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ReferenceLineDebug::_internal_cost() const {
  return _impl_.cost_;
}
inline double ReferenceLineDebug::cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.cost)
  return _internal_cost();
}
inline void ReferenceLineDebug::_internal_set_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cost_ = value;
}
inline void ReferenceLineDebug::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.cost)
}

// optional bool is_change_lane_path = 4;
inline bool ReferenceLineDebug::_internal_has_is_change_lane_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_is_change_lane_path() const {
  return _internal_has_is_change_lane_path();
}
inline void ReferenceLineDebug::clear_is_change_lane_path() {
  _impl_.is_change_lane_path_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ReferenceLineDebug::_internal_is_change_lane_path() const {
  return _impl_.is_change_lane_path_;
}
inline bool ReferenceLineDebug::is_change_lane_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
  return _internal_is_change_lane_path();
}
inline void ReferenceLineDebug::_internal_set_is_change_lane_path(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_change_lane_path_ = value;
}
inline void ReferenceLineDebug::set_is_change_lane_path(bool value) {
  _internal_set_is_change_lane_path(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_change_lane_path)
}

// optional bool is_drivable = 5;
inline bool ReferenceLineDebug::_internal_has_is_drivable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_is_drivable() const {
  return _internal_has_is_drivable();
}
inline void ReferenceLineDebug::clear_is_drivable() {
  _impl_.is_drivable_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ReferenceLineDebug::_internal_is_drivable() const {
  return _impl_.is_drivable_;
}
inline bool ReferenceLineDebug::is_drivable() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_drivable)
  return _internal_is_drivable();
}
inline void ReferenceLineDebug::_internal_set_is_drivable(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_drivable_ = value;
}
inline void ReferenceLineDebug::set_is_drivable(bool value) {
  _internal_set_is_drivable(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_drivable)
}

// optional bool is_protected = 6;
inline bool ReferenceLineDebug::_internal_has_is_protected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReferenceLineDebug::has_is_protected() const {
  return _internal_has_is_protected();
}
inline void ReferenceLineDebug::clear_is_protected() {
  _impl_.is_protected_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ReferenceLineDebug::_internal_is_protected() const {
  return _impl_.is_protected_;
}
inline bool ReferenceLineDebug::is_protected() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.ReferenceLineDebug.is_protected)
  return _internal_is_protected();
}
inline void ReferenceLineDebug::_internal_set_is_protected(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_protected_ = value;
}
inline void ReferenceLineDebug::set_is_protected(bool value) {
  _internal_set_is_protected(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.ReferenceLineDebug.is_protected)
}

// -------------------------------------------------------------------

// SampleLayerDebug

// repeated .apollo.common.SLPoint sl_point = 1;
inline int SampleLayerDebug::_internal_sl_point_size() const {
  return _impl_.sl_point_.size();
}
inline int SampleLayerDebug::sl_point_size() const {
  return _internal_sl_point_size();
}
inline ::apollo::common::SLPoint* SampleLayerDebug::mutable_sl_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.SampleLayerDebug.sl_point)
  return _impl_.sl_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
SampleLayerDebug::mutable_sl_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return &_impl_.sl_point_;
}
inline const ::apollo::common::SLPoint& SampleLayerDebug::_internal_sl_point(int index) const {
  return _impl_.sl_point_.Get(index);
}
inline const ::apollo::common::SLPoint& SampleLayerDebug::sl_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.SampleLayerDebug.sl_point)
  return _internal_sl_point(index);
}
inline ::apollo::common::SLPoint* SampleLayerDebug::_internal_add_sl_point() {
  return _impl_.sl_point_.Add();
}
inline ::apollo::common::SLPoint* SampleLayerDebug::add_sl_point() {
  ::apollo::common::SLPoint* _add = _internal_add_sl_point();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.SampleLayerDebug.sl_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
SampleLayerDebug::sl_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.SampleLayerDebug.sl_point)
  return _impl_.sl_point_;
}

// -------------------------------------------------------------------

// DpPolyGraphDebug

// repeated .apollo.planning_internal.SampleLayerDebug sample_layer = 1;
inline int DpPolyGraphDebug::_internal_sample_layer_size() const {
  return _impl_.sample_layer_.size();
}
inline int DpPolyGraphDebug::sample_layer_size() const {
  return _internal_sample_layer_size();
}
inline void DpPolyGraphDebug::clear_sample_layer() {
  _impl_.sample_layer_.Clear();
}
inline ::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::mutable_sample_layer(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return _impl_.sample_layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >*
DpPolyGraphDebug::mutable_sample_layer() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return &_impl_.sample_layer_;
}
inline const ::apollo::planning_internal::SampleLayerDebug& DpPolyGraphDebug::_internal_sample_layer(int index) const {
  return _impl_.sample_layer_.Get(index);
}
inline const ::apollo::planning_internal::SampleLayerDebug& DpPolyGraphDebug::sample_layer(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return _internal_sample_layer(index);
}
inline ::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::_internal_add_sample_layer() {
  return _impl_.sample_layer_.Add();
}
inline ::apollo::planning_internal::SampleLayerDebug* DpPolyGraphDebug::add_sample_layer() {
  ::apollo::planning_internal::SampleLayerDebug* _add = _internal_add_sample_layer();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SampleLayerDebug >&
DpPolyGraphDebug::sample_layer() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.sample_layer)
  return _impl_.sample_layer_;
}

// repeated .apollo.common.SLPoint min_cost_point = 2;
inline int DpPolyGraphDebug::_internal_min_cost_point_size() const {
  return _impl_.min_cost_point_.size();
}
inline int DpPolyGraphDebug::min_cost_point_size() const {
  return _internal_min_cost_point_size();
}
inline ::apollo::common::SLPoint* DpPolyGraphDebug::mutable_min_cost_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return _impl_.min_cost_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >*
DpPolyGraphDebug::mutable_min_cost_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return &_impl_.min_cost_point_;
}
inline const ::apollo::common::SLPoint& DpPolyGraphDebug::_internal_min_cost_point(int index) const {
  return _impl_.min_cost_point_.Get(index);
}
inline const ::apollo::common::SLPoint& DpPolyGraphDebug::min_cost_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return _internal_min_cost_point(index);
}
inline ::apollo::common::SLPoint* DpPolyGraphDebug::_internal_add_min_cost_point() {
  return _impl_.min_cost_point_.Add();
}
inline ::apollo::common::SLPoint* DpPolyGraphDebug::add_min_cost_point() {
  ::apollo::common::SLPoint* _add = _internal_add_min_cost_point();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::SLPoint >&
DpPolyGraphDebug::min_cost_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.DpPolyGraphDebug.min_cost_point)
  return _impl_.min_cost_point_;
}

// -------------------------------------------------------------------

// PlanningData

// optional .apollo.localization.LocalizationEstimate adc_position = 7;
inline bool PlanningData::_internal_has_adc_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adc_position_ != nullptr);
  return value;
}
inline bool PlanningData::has_adc_position() const {
  return _internal_has_adc_position();
}
inline const ::apollo::localization::LocalizationEstimate& PlanningData::_internal_adc_position() const {
  const ::apollo::localization::LocalizationEstimate* p = _impl_.adc_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::localization::LocalizationEstimate&>(
      ::apollo::localization::_LocalizationEstimate_default_instance_);
}
inline const ::apollo::localization::LocalizationEstimate& PlanningData::adc_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.adc_position)
  return _internal_adc_position();
}
inline void PlanningData::unsafe_arena_set_allocated_adc_position(
    ::apollo::localization::LocalizationEstimate* adc_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adc_position_);
  }
  _impl_.adc_position_ = adc_position;
  if (adc_position) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.adc_position)
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::release_adc_position() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::localization::LocalizationEstimate* temp = _impl_.adc_position_;
  _impl_.adc_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::unsafe_arena_release_adc_position() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.adc_position)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::localization::LocalizationEstimate* temp = _impl_.adc_position_;
  _impl_.adc_position_ = nullptr;
  return temp;
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::_internal_mutable_adc_position() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.adc_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::localization::LocalizationEstimate>(GetArenaForAllocation());
    _impl_.adc_position_ = p;
  }
  return _impl_.adc_position_;
}
inline ::apollo::localization::LocalizationEstimate* PlanningData::mutable_adc_position() {
  ::apollo::localization::LocalizationEstimate* _msg = _internal_mutable_adc_position();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.adc_position)
  return _msg;
}
inline void PlanningData::set_allocated_adc_position(::apollo::localization::LocalizationEstimate* adc_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adc_position_);
  }
  if (adc_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adc_position));
    if (message_arena != submessage_arena) {
      adc_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adc_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.adc_position_ = adc_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.adc_position)
}

// optional .apollo.canbus.Chassis chassis = 8;
inline bool PlanningData::_internal_has_chassis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chassis_ != nullptr);
  return value;
}
inline bool PlanningData::has_chassis() const {
  return _internal_has_chassis();
}
inline const ::apollo::canbus::Chassis& PlanningData::_internal_chassis() const {
  const ::apollo::canbus::Chassis* p = _impl_.chassis_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::canbus::Chassis&>(
      ::apollo::canbus::_Chassis_default_instance_);
}
inline const ::apollo::canbus::Chassis& PlanningData::chassis() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.chassis)
  return _internal_chassis();
}
inline void PlanningData::unsafe_arena_set_allocated_chassis(
    ::apollo::canbus::Chassis* chassis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chassis_);
  }
  _impl_.chassis_ = chassis;
  if (chassis) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.chassis)
}
inline ::apollo::canbus::Chassis* PlanningData::release_chassis() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Chassis* temp = _impl_.chassis_;
  _impl_.chassis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::canbus::Chassis* PlanningData::unsafe_arena_release_chassis() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.chassis)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::canbus::Chassis* temp = _impl_.chassis_;
  _impl_.chassis_ = nullptr;
  return temp;
}
inline ::apollo::canbus::Chassis* PlanningData::_internal_mutable_chassis() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chassis_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Chassis>(GetArenaForAllocation());
    _impl_.chassis_ = p;
  }
  return _impl_.chassis_;
}
inline ::apollo::canbus::Chassis* PlanningData::mutable_chassis() {
  ::apollo::canbus::Chassis* _msg = _internal_mutable_chassis();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.chassis)
  return _msg;
}
inline void PlanningData::set_allocated_chassis(::apollo::canbus::Chassis* chassis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chassis_);
  }
  if (chassis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chassis));
    if (message_arena != submessage_arena) {
      chassis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chassis, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chassis_ = chassis;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.chassis)
}

// optional .apollo.routing.RoutingResponse routing = 9;
inline bool PlanningData::_internal_has_routing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_ != nullptr);
  return value;
}
inline bool PlanningData::has_routing() const {
  return _internal_has_routing();
}
inline const ::apollo::routing::RoutingResponse& PlanningData::_internal_routing() const {
  const ::apollo::routing::RoutingResponse* p = _impl_.routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingResponse&>(
      ::apollo::routing::_RoutingResponse_default_instance_);
}
inline const ::apollo::routing::RoutingResponse& PlanningData::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.routing)
  return _internal_routing();
}
inline void PlanningData::unsafe_arena_set_allocated_routing(
    ::apollo::routing::RoutingResponse* routing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  _impl_.routing_ = routing;
  if (routing) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.routing)
}
inline ::apollo::routing::RoutingResponse* PlanningData::release_routing() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::RoutingResponse* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingResponse* PlanningData::unsafe_arena_release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.routing)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::routing::RoutingResponse* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingResponse* PlanningData::_internal_mutable_routing() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.routing_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingResponse>(GetArenaForAllocation());
    _impl_.routing_ = p;
  }
  return _impl_.routing_;
}
inline ::apollo::routing::RoutingResponse* PlanningData::mutable_routing() {
  ::apollo::routing::RoutingResponse* _msg = _internal_mutable_routing();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.routing)
  return _msg;
}
inline void PlanningData::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  if (routing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing));
    if (message_arena != submessage_arena) {
      routing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.routing_ = routing;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.routing)
}

// optional .apollo.common.TrajectoryPoint init_point = 10;
inline bool PlanningData::_internal_has_init_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.init_point_ != nullptr);
  return value;
}
inline bool PlanningData::has_init_point() const {
  return _internal_has_init_point();
}
inline const ::apollo::common::TrajectoryPoint& PlanningData::_internal_init_point() const {
  const ::apollo::common::TrajectoryPoint* p = _impl_.init_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::TrajectoryPoint&>(
      ::apollo::common::_TrajectoryPoint_default_instance_);
}
inline const ::apollo::common::TrajectoryPoint& PlanningData::init_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.init_point)
  return _internal_init_point();
}
inline void PlanningData::unsafe_arena_set_allocated_init_point(
    ::apollo::common::TrajectoryPoint* init_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_point_);
  }
  _impl_.init_point_ = init_point;
  if (init_point) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.init_point)
}
inline ::apollo::common::TrajectoryPoint* PlanningData::release_init_point() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::TrajectoryPoint* temp = _impl_.init_point_;
  _impl_.init_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::TrajectoryPoint* PlanningData::unsafe_arena_release_init_point() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.init_point)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::TrajectoryPoint* temp = _impl_.init_point_;
  _impl_.init_point_ = nullptr;
  return temp;
}
inline ::apollo::common::TrajectoryPoint* PlanningData::_internal_mutable_init_point() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.init_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::TrajectoryPoint>(GetArenaForAllocation());
    _impl_.init_point_ = p;
  }
  return _impl_.init_point_;
}
inline ::apollo::common::TrajectoryPoint* PlanningData::mutable_init_point() {
  ::apollo::common::TrajectoryPoint* _msg = _internal_mutable_init_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.init_point)
  return _msg;
}
inline void PlanningData::set_allocated_init_point(::apollo::common::TrajectoryPoint* init_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_point_);
  }
  if (init_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(init_point));
    if (message_arena != submessage_arena) {
      init_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.init_point_ = init_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.init_point)
}

// repeated .apollo.common.Path path = 6;
inline int PlanningData::_internal_path_size() const {
  return _impl_.path_.size();
}
inline int PlanningData::path_size() const {
  return _internal_path_size();
}
inline ::apollo::common::Path* PlanningData::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.path)
  return _impl_.path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
PlanningData::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.path)
  return &_impl_.path_;
}
inline const ::apollo::common::Path& PlanningData::_internal_path(int index) const {
  return _impl_.path_.Get(index);
}
inline const ::apollo::common::Path& PlanningData::path(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.path)
  return _internal_path(index);
}
inline ::apollo::common::Path* PlanningData::_internal_add_path() {
  return _impl_.path_.Add();
}
inline ::apollo::common::Path* PlanningData::add_path() {
  ::apollo::common::Path* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
PlanningData::path() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.path)
  return _impl_.path_;
}

// repeated .apollo.planning_internal.SpeedPlan speed_plan = 13;
inline int PlanningData::_internal_speed_plan_size() const {
  return _impl_.speed_plan_.size();
}
inline int PlanningData::speed_plan_size() const {
  return _internal_speed_plan_size();
}
inline void PlanningData::clear_speed_plan() {
  _impl_.speed_plan_.Clear();
}
inline ::apollo::planning_internal::SpeedPlan* PlanningData::mutable_speed_plan(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.speed_plan)
  return _impl_.speed_plan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >*
PlanningData::mutable_speed_plan() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.speed_plan)
  return &_impl_.speed_plan_;
}
inline const ::apollo::planning_internal::SpeedPlan& PlanningData::_internal_speed_plan(int index) const {
  return _impl_.speed_plan_.Get(index);
}
inline const ::apollo::planning_internal::SpeedPlan& PlanningData::speed_plan(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.speed_plan)
  return _internal_speed_plan(index);
}
inline ::apollo::planning_internal::SpeedPlan* PlanningData::_internal_add_speed_plan() {
  return _impl_.speed_plan_.Add();
}
inline ::apollo::planning_internal::SpeedPlan* PlanningData::add_speed_plan() {
  ::apollo::planning_internal::SpeedPlan* _add = _internal_add_speed_plan();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.speed_plan)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SpeedPlan >&
PlanningData::speed_plan() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.speed_plan)
  return _impl_.speed_plan_;
}

// repeated .apollo.planning_internal.STGraphDebug st_graph = 14;
inline int PlanningData::_internal_st_graph_size() const {
  return _impl_.st_graph_.size();
}
inline int PlanningData::st_graph_size() const {
  return _internal_st_graph_size();
}
inline void PlanningData::clear_st_graph() {
  _impl_.st_graph_.Clear();
}
inline ::apollo::planning_internal::STGraphDebug* PlanningData::mutable_st_graph(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.st_graph)
  return _impl_.st_graph_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >*
PlanningData::mutable_st_graph() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.st_graph)
  return &_impl_.st_graph_;
}
inline const ::apollo::planning_internal::STGraphDebug& PlanningData::_internal_st_graph(int index) const {
  return _impl_.st_graph_.Get(index);
}
inline const ::apollo::planning_internal::STGraphDebug& PlanningData::st_graph(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.st_graph)
  return _internal_st_graph(index);
}
inline ::apollo::planning_internal::STGraphDebug* PlanningData::_internal_add_st_graph() {
  return _impl_.st_graph_.Add();
}
inline ::apollo::planning_internal::STGraphDebug* PlanningData::add_st_graph() {
  ::apollo::planning_internal::STGraphDebug* _add = _internal_add_st_graph();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.st_graph)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::STGraphDebug >&
PlanningData::st_graph() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.st_graph)
  return _impl_.st_graph_;
}

// repeated .apollo.planning_internal.SLFrameDebug sl_frame = 15;
inline int PlanningData::_internal_sl_frame_size() const {
  return _impl_.sl_frame_.size();
}
inline int PlanningData::sl_frame_size() const {
  return _internal_sl_frame_size();
}
inline void PlanningData::clear_sl_frame() {
  _impl_.sl_frame_.Clear();
}
inline ::apollo::planning_internal::SLFrameDebug* PlanningData::mutable_sl_frame(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.sl_frame)
  return _impl_.sl_frame_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >*
PlanningData::mutable_sl_frame() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.sl_frame)
  return &_impl_.sl_frame_;
}
inline const ::apollo::planning_internal::SLFrameDebug& PlanningData::_internal_sl_frame(int index) const {
  return _impl_.sl_frame_.Get(index);
}
inline const ::apollo::planning_internal::SLFrameDebug& PlanningData::sl_frame(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.sl_frame)
  return _internal_sl_frame(index);
}
inline ::apollo::planning_internal::SLFrameDebug* PlanningData::_internal_add_sl_frame() {
  return _impl_.sl_frame_.Add();
}
inline ::apollo::planning_internal::SLFrameDebug* PlanningData::add_sl_frame() {
  ::apollo::planning_internal::SLFrameDebug* _add = _internal_add_sl_frame();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.sl_frame)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::SLFrameDebug >&
PlanningData::sl_frame() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.sl_frame)
  return _impl_.sl_frame_;
}

// optional .apollo.common.Header prediction_header = 16;
inline bool PlanningData::_internal_has_prediction_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prediction_header_ != nullptr);
  return value;
}
inline bool PlanningData::has_prediction_header() const {
  return _internal_has_prediction_header();
}
inline const ::apollo::common::Header& PlanningData::_internal_prediction_header() const {
  const ::apollo::common::Header* p = _impl_.prediction_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PlanningData::prediction_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.prediction_header)
  return _internal_prediction_header();
}
inline void PlanningData::unsafe_arena_set_allocated_prediction_header(
    ::apollo::common::Header* prediction_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prediction_header_);
  }
  _impl_.prediction_header_ = prediction_header;
  if (prediction_header) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.prediction_header)
}
inline ::apollo::common::Header* PlanningData::release_prediction_header() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Header* temp = _impl_.prediction_header_;
  _impl_.prediction_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* PlanningData::unsafe_arena_release_prediction_header() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.prediction_header)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::common::Header* temp = _impl_.prediction_header_;
  _impl_.prediction_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PlanningData::_internal_mutable_prediction_header() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.prediction_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.prediction_header_ = p;
  }
  return _impl_.prediction_header_;
}
inline ::apollo::common::Header* PlanningData::mutable_prediction_header() {
  ::apollo::common::Header* _msg = _internal_mutable_prediction_header();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.prediction_header)
  return _msg;
}
inline void PlanningData::set_allocated_prediction_header(::apollo::common::Header* prediction_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prediction_header_);
  }
  if (prediction_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_header));
    if (message_arena != submessage_arena) {
      prediction_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.prediction_header_ = prediction_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.prediction_header)
}

// optional .apollo.planning_internal.SignalLightDebug signal_light = 17;
inline bool PlanningData::_internal_has_signal_light() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_light_ != nullptr);
  return value;
}
inline bool PlanningData::has_signal_light() const {
  return _internal_has_signal_light();
}
inline void PlanningData::clear_signal_light() {
  if (_impl_.signal_light_ != nullptr) _impl_.signal_light_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::planning_internal::SignalLightDebug& PlanningData::_internal_signal_light() const {
  const ::apollo::planning_internal::SignalLightDebug* p = _impl_.signal_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::SignalLightDebug&>(
      ::apollo::planning_internal::_SignalLightDebug_default_instance_);
}
inline const ::apollo::planning_internal::SignalLightDebug& PlanningData::signal_light() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.signal_light)
  return _internal_signal_light();
}
inline void PlanningData::unsafe_arena_set_allocated_signal_light(
    ::apollo::planning_internal::SignalLightDebug* signal_light) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_light_);
  }
  _impl_.signal_light_ = signal_light;
  if (signal_light) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.signal_light)
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::release_signal_light() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning_internal::SignalLightDebug* temp = _impl_.signal_light_;
  _impl_.signal_light_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::unsafe_arena_release_signal_light() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.signal_light)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning_internal::SignalLightDebug* temp = _impl_.signal_light_;
  _impl_.signal_light_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::_internal_mutable_signal_light() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.signal_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::SignalLightDebug>(GetArenaForAllocation());
    _impl_.signal_light_ = p;
  }
  return _impl_.signal_light_;
}
inline ::apollo::planning_internal::SignalLightDebug* PlanningData::mutable_signal_light() {
  ::apollo::planning_internal::SignalLightDebug* _msg = _internal_mutable_signal_light();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.signal_light)
  return _msg;
}
inline void PlanningData::set_allocated_signal_light(::apollo::planning_internal::SignalLightDebug* signal_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signal_light_;
  }
  if (signal_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signal_light);
    if (message_arena != submessage_arena) {
      signal_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_light, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.signal_light_ = signal_light;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.signal_light)
}

// repeated .apollo.planning_internal.ObstacleDebug obstacle = 18;
inline int PlanningData::_internal_obstacle_size() const {
  return _impl_.obstacle_.size();
}
inline int PlanningData::obstacle_size() const {
  return _internal_obstacle_size();
}
inline void PlanningData::clear_obstacle() {
  _impl_.obstacle_.Clear();
}
inline ::apollo::planning_internal::ObstacleDebug* PlanningData::mutable_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.obstacle)
  return _impl_.obstacle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >*
PlanningData::mutable_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.obstacle)
  return &_impl_.obstacle_;
}
inline const ::apollo::planning_internal::ObstacleDebug& PlanningData::_internal_obstacle(int index) const {
  return _impl_.obstacle_.Get(index);
}
inline const ::apollo::planning_internal::ObstacleDebug& PlanningData::obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.obstacle)
  return _internal_obstacle(index);
}
inline ::apollo::planning_internal::ObstacleDebug* PlanningData::_internal_add_obstacle() {
  return _impl_.obstacle_.Add();
}
inline ::apollo::planning_internal::ObstacleDebug* PlanningData::add_obstacle() {
  ::apollo::planning_internal::ObstacleDebug* _add = _internal_add_obstacle();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.obstacle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ObstacleDebug >&
PlanningData::obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.obstacle)
  return _impl_.obstacle_;
}

// repeated .apollo.planning_internal.ReferenceLineDebug reference_line = 19;
inline int PlanningData::_internal_reference_line_size() const {
  return _impl_.reference_line_.size();
}
inline int PlanningData::reference_line_size() const {
  return _internal_reference_line_size();
}
inline void PlanningData::clear_reference_line() {
  _impl_.reference_line_.Clear();
}
inline ::apollo::planning_internal::ReferenceLineDebug* PlanningData::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.reference_line)
  return _impl_.reference_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >*
PlanningData::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.PlanningData.reference_line)
  return &_impl_.reference_line_;
}
inline const ::apollo::planning_internal::ReferenceLineDebug& PlanningData::_internal_reference_line(int index) const {
  return _impl_.reference_line_.Get(index);
}
inline const ::apollo::planning_internal::ReferenceLineDebug& PlanningData::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.reference_line)
  return _internal_reference_line(index);
}
inline ::apollo::planning_internal::ReferenceLineDebug* PlanningData::_internal_add_reference_line() {
  return _impl_.reference_line_.Add();
}
inline ::apollo::planning_internal::ReferenceLineDebug* PlanningData::add_reference_line() {
  ::apollo::planning_internal::ReferenceLineDebug* _add = _internal_add_reference_line();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.PlanningData.reference_line)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::ReferenceLineDebug >&
PlanningData::reference_line() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.PlanningData.reference_line)
  return _impl_.reference_line_;
}

// optional .apollo.planning_internal.DpPolyGraphDebug dp_poly_graph = 20;
inline bool PlanningData::_internal_has_dp_poly_graph() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dp_poly_graph_ != nullptr);
  return value;
}
inline bool PlanningData::has_dp_poly_graph() const {
  return _internal_has_dp_poly_graph();
}
inline void PlanningData::clear_dp_poly_graph() {
  if (_impl_.dp_poly_graph_ != nullptr) _impl_.dp_poly_graph_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::apollo::planning_internal::DpPolyGraphDebug& PlanningData::_internal_dp_poly_graph() const {
  const ::apollo::planning_internal::DpPolyGraphDebug* p = _impl_.dp_poly_graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::DpPolyGraphDebug&>(
      ::apollo::planning_internal::_DpPolyGraphDebug_default_instance_);
}
inline const ::apollo::planning_internal::DpPolyGraphDebug& PlanningData::dp_poly_graph() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.dp_poly_graph)
  return _internal_dp_poly_graph();
}
inline void PlanningData::unsafe_arena_set_allocated_dp_poly_graph(
    ::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dp_poly_graph_);
  }
  _impl_.dp_poly_graph_ = dp_poly_graph;
  if (dp_poly_graph) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.dp_poly_graph)
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::release_dp_poly_graph() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::planning_internal::DpPolyGraphDebug* temp = _impl_.dp_poly_graph_;
  _impl_.dp_poly_graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::unsafe_arena_release_dp_poly_graph() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.dp_poly_graph)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::planning_internal::DpPolyGraphDebug* temp = _impl_.dp_poly_graph_;
  _impl_.dp_poly_graph_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::_internal_mutable_dp_poly_graph() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.dp_poly_graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::DpPolyGraphDebug>(GetArenaForAllocation());
    _impl_.dp_poly_graph_ = p;
  }
  return _impl_.dp_poly_graph_;
}
inline ::apollo::planning_internal::DpPolyGraphDebug* PlanningData::mutable_dp_poly_graph() {
  ::apollo::planning_internal::DpPolyGraphDebug* _msg = _internal_mutable_dp_poly_graph();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.dp_poly_graph)
  return _msg;
}
inline void PlanningData::set_allocated_dp_poly_graph(::apollo::planning_internal::DpPolyGraphDebug* dp_poly_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dp_poly_graph_;
  }
  if (dp_poly_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dp_poly_graph);
    if (message_arena != submessage_arena) {
      dp_poly_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dp_poly_graph, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.dp_poly_graph_ = dp_poly_graph;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.dp_poly_graph)
}

// optional .apollo.planning_internal.LatticeStTraining lattice_st_image = 21;
inline bool PlanningData::_internal_has_lattice_st_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lattice_st_image_ != nullptr);
  return value;
}
inline bool PlanningData::has_lattice_st_image() const {
  return _internal_has_lattice_st_image();
}
inline void PlanningData::clear_lattice_st_image() {
  if (_impl_.lattice_st_image_ != nullptr) _impl_.lattice_st_image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::planning_internal::LatticeStTraining& PlanningData::_internal_lattice_st_image() const {
  const ::apollo::planning_internal::LatticeStTraining* p = _impl_.lattice_st_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::LatticeStTraining&>(
      ::apollo::planning_internal::_LatticeStTraining_default_instance_);
}
inline const ::apollo::planning_internal::LatticeStTraining& PlanningData::lattice_st_image() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.lattice_st_image)
  return _internal_lattice_st_image();
}
inline void PlanningData::unsafe_arena_set_allocated_lattice_st_image(
    ::apollo::planning_internal::LatticeStTraining* lattice_st_image) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lattice_st_image_);
  }
  _impl_.lattice_st_image_ = lattice_st_image;
  if (lattice_st_image) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.lattice_st_image)
}
inline ::apollo::planning_internal::LatticeStTraining* PlanningData::release_lattice_st_image() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::planning_internal::LatticeStTraining* temp = _impl_.lattice_st_image_;
  _impl_.lattice_st_image_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::LatticeStTraining* PlanningData::unsafe_arena_release_lattice_st_image() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.lattice_st_image)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::planning_internal::LatticeStTraining* temp = _impl_.lattice_st_image_;
  _impl_.lattice_st_image_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::LatticeStTraining* PlanningData::_internal_mutable_lattice_st_image() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.lattice_st_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::LatticeStTraining>(GetArenaForAllocation());
    _impl_.lattice_st_image_ = p;
  }
  return _impl_.lattice_st_image_;
}
inline ::apollo::planning_internal::LatticeStTraining* PlanningData::mutable_lattice_st_image() {
  ::apollo::planning_internal::LatticeStTraining* _msg = _internal_mutable_lattice_st_image();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.lattice_st_image)
  return _msg;
}
inline void PlanningData::set_allocated_lattice_st_image(::apollo::planning_internal::LatticeStTraining* lattice_st_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lattice_st_image_;
  }
  if (lattice_st_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lattice_st_image);
    if (message_arena != submessage_arena) {
      lattice_st_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lattice_st_image, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.lattice_st_image_ = lattice_st_image;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.lattice_st_image)
}

// optional .apollo.relative_map.MapMsg relative_map = 22;
inline bool PlanningData::_internal_has_relative_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.relative_map_ != nullptr);
  return value;
}
inline bool PlanningData::has_relative_map() const {
  return _internal_has_relative_map();
}
inline const ::apollo::relative_map::MapMsg& PlanningData::_internal_relative_map() const {
  const ::apollo::relative_map::MapMsg* p = _impl_.relative_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::relative_map::MapMsg&>(
      ::apollo::relative_map::_MapMsg_default_instance_);
}
inline const ::apollo::relative_map::MapMsg& PlanningData::relative_map() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.relative_map)
  return _internal_relative_map();
}
inline void PlanningData::unsafe_arena_set_allocated_relative_map(
    ::apollo::relative_map::MapMsg* relative_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_map_);
  }
  _impl_.relative_map_ = relative_map;
  if (relative_map) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.relative_map)
}
inline ::apollo::relative_map::MapMsg* PlanningData::release_relative_map() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::relative_map::MapMsg* temp = _impl_.relative_map_;
  _impl_.relative_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::relative_map::MapMsg* PlanningData::unsafe_arena_release_relative_map() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.relative_map)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::relative_map::MapMsg* temp = _impl_.relative_map_;
  _impl_.relative_map_ = nullptr;
  return temp;
}
inline ::apollo::relative_map::MapMsg* PlanningData::_internal_mutable_relative_map() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.relative_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::relative_map::MapMsg>(GetArenaForAllocation());
    _impl_.relative_map_ = p;
  }
  return _impl_.relative_map_;
}
inline ::apollo::relative_map::MapMsg* PlanningData::mutable_relative_map() {
  ::apollo::relative_map::MapMsg* _msg = _internal_mutable_relative_map();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.relative_map)
  return _msg;
}
inline void PlanningData::set_allocated_relative_map(::apollo::relative_map::MapMsg* relative_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relative_map_);
  }
  if (relative_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relative_map));
    if (message_arena != submessage_arena) {
      relative_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.relative_map_ = relative_map;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.relative_map)
}

// optional .apollo.planning_internal.AutoTuningTrainingData auto_tuning_training_data = 23;
inline bool PlanningData::_internal_has_auto_tuning_training_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auto_tuning_training_data_ != nullptr);
  return value;
}
inline bool PlanningData::has_auto_tuning_training_data() const {
  return _internal_has_auto_tuning_training_data();
}
inline void PlanningData::clear_auto_tuning_training_data() {
  if (_impl_.auto_tuning_training_data_ != nullptr) _impl_.auto_tuning_training_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::apollo::planning_internal::AutoTuningTrainingData& PlanningData::_internal_auto_tuning_training_data() const {
  const ::apollo::planning_internal::AutoTuningTrainingData* p = _impl_.auto_tuning_training_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::AutoTuningTrainingData&>(
      ::apollo::planning_internal::_AutoTuningTrainingData_default_instance_);
}
inline const ::apollo::planning_internal::AutoTuningTrainingData& PlanningData::auto_tuning_training_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  return _internal_auto_tuning_training_data();
}
inline void PlanningData::unsafe_arena_set_allocated_auto_tuning_training_data(
    ::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auto_tuning_training_data_);
  }
  _impl_.auto_tuning_training_data_ = auto_tuning_training_data;
  if (auto_tuning_training_data) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.PlanningData.auto_tuning_training_data)
}
inline ::apollo::planning_internal::AutoTuningTrainingData* PlanningData::release_auto_tuning_training_data() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::planning_internal::AutoTuningTrainingData* temp = _impl_.auto_tuning_training_data_;
  _impl_.auto_tuning_training_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::AutoTuningTrainingData* PlanningData::unsafe_arena_release_auto_tuning_training_data() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::apollo::planning_internal::AutoTuningTrainingData* temp = _impl_.auto_tuning_training_data_;
  _impl_.auto_tuning_training_data_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::AutoTuningTrainingData* PlanningData::_internal_mutable_auto_tuning_training_data() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.auto_tuning_training_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::AutoTuningTrainingData>(GetArenaForAllocation());
    _impl_.auto_tuning_training_data_ = p;
  }
  return _impl_.auto_tuning_training_data_;
}
inline ::apollo::planning_internal::AutoTuningTrainingData* PlanningData::mutable_auto_tuning_training_data() {
  ::apollo::planning_internal::AutoTuningTrainingData* _msg = _internal_mutable_auto_tuning_training_data();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.PlanningData.auto_tuning_training_data)
  return _msg;
}
inline void PlanningData::set_allocated_auto_tuning_training_data(::apollo::planning_internal::AutoTuningTrainingData* auto_tuning_training_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.auto_tuning_training_data_;
  }
  if (auto_tuning_training_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auto_tuning_training_data);
    if (message_arena != submessage_arena) {
      auto_tuning_training_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_tuning_training_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.auto_tuning_training_data_ = auto_tuning_training_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.PlanningData.auto_tuning_training_data)
}

// -------------------------------------------------------------------

// LatticeStPixel

// optional int32 s = 1;
inline bool LatticeStPixel::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatticeStPixel::has_s() const {
  return _internal_has_s();
}
inline void LatticeStPixel::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t LatticeStPixel::_internal_s() const {
  return _impl_.s_;
}
inline int32_t LatticeStPixel::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.s)
  return _internal_s();
}
inline void LatticeStPixel::_internal_set_s(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void LatticeStPixel::set_s(int32_t value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.s)
}

// optional int32 t = 2;
inline bool LatticeStPixel::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatticeStPixel::has_t() const {
  return _internal_has_t();
}
inline void LatticeStPixel::clear_t() {
  _impl_.t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t LatticeStPixel::_internal_t() const {
  return _impl_.t_;
}
inline int32_t LatticeStPixel::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.t)
  return _internal_t();
}
inline void LatticeStPixel::_internal_set_t(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.t_ = value;
}
inline void LatticeStPixel::set_t(int32_t value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.t)
}

// optional uint32 r = 3;
inline bool LatticeStPixel::_internal_has_r() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LatticeStPixel::has_r() const {
  return _internal_has_r();
}
inline void LatticeStPixel::clear_r() {
  _impl_.r_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LatticeStPixel::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t LatticeStPixel::r() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.r)
  return _internal_r();
}
inline void LatticeStPixel::_internal_set_r(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.r_ = value;
}
inline void LatticeStPixel::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.r)
}

// optional uint32 g = 4;
inline bool LatticeStPixel::_internal_has_g() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LatticeStPixel::has_g() const {
  return _internal_has_g();
}
inline void LatticeStPixel::clear_g() {
  _impl_.g_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LatticeStPixel::_internal_g() const {
  return _impl_.g_;
}
inline uint32_t LatticeStPixel::g() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.g)
  return _internal_g();
}
inline void LatticeStPixel::_internal_set_g(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.g_ = value;
}
inline void LatticeStPixel::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.g)
}

// optional uint32 b = 5;
inline bool LatticeStPixel::_internal_has_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LatticeStPixel::has_b() const {
  return _internal_has_b();
}
inline void LatticeStPixel::clear_b() {
  _impl_.b_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t LatticeStPixel::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t LatticeStPixel::b() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStPixel.b)
  return _internal_b();
}
inline void LatticeStPixel::_internal_set_b(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.b_ = value;
}
inline void LatticeStPixel::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStPixel.b)
}

// -------------------------------------------------------------------

// LatticeStTraining

// repeated .apollo.planning_internal.LatticeStPixel pixel = 1;
inline int LatticeStTraining::_internal_pixel_size() const {
  return _impl_.pixel_.size();
}
inline int LatticeStTraining::pixel_size() const {
  return _internal_pixel_size();
}
inline void LatticeStTraining::clear_pixel() {
  _impl_.pixel_.Clear();
}
inline ::apollo::planning_internal::LatticeStPixel* LatticeStTraining::mutable_pixel(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.LatticeStTraining.pixel)
  return _impl_.pixel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >*
LatticeStTraining::mutable_pixel() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.LatticeStTraining.pixel)
  return &_impl_.pixel_;
}
inline const ::apollo::planning_internal::LatticeStPixel& LatticeStTraining::_internal_pixel(int index) const {
  return _impl_.pixel_.Get(index);
}
inline const ::apollo::planning_internal::LatticeStPixel& LatticeStTraining::pixel(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.pixel)
  return _internal_pixel(index);
}
inline ::apollo::planning_internal::LatticeStPixel* LatticeStTraining::_internal_add_pixel() {
  return _impl_.pixel_.Add();
}
inline ::apollo::planning_internal::LatticeStPixel* LatticeStTraining::add_pixel() {
  ::apollo::planning_internal::LatticeStPixel* _add = _internal_add_pixel();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.LatticeStTraining.pixel)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning_internal::LatticeStPixel >&
LatticeStTraining::pixel() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.LatticeStTraining.pixel)
  return _impl_.pixel_;
}

// optional double timestamp = 2;
inline bool LatticeStTraining::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatticeStTraining::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void LatticeStTraining::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LatticeStTraining::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double LatticeStTraining::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.timestamp)
  return _internal_timestamp();
}
inline void LatticeStTraining::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void LatticeStTraining::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.timestamp)
}

// optional string annotation = 3;
inline bool LatticeStTraining::_internal_has_annotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatticeStTraining::has_annotation() const {
  return _internal_has_annotation();
}
inline void LatticeStTraining::clear_annotation() {
  _impl_.annotation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LatticeStTraining::annotation() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.annotation)
  return _internal_annotation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LatticeStTraining::set_annotation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.annotation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.annotation)
}
inline std::string* LatticeStTraining::mutable_annotation() {
  std::string* _s = _internal_mutable_annotation();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.LatticeStTraining.annotation)
  return _s;
}
inline const std::string& LatticeStTraining::_internal_annotation() const {
  return _impl_.annotation_.Get();
}
inline void LatticeStTraining::_internal_set_annotation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.annotation_.Set(value, GetArenaForAllocation());
}
inline std::string* LatticeStTraining::_internal_mutable_annotation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.annotation_.Mutable(GetArenaForAllocation());
}
inline std::string* LatticeStTraining::release_annotation() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.LatticeStTraining.annotation)
  if (!_internal_has_annotation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.annotation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.annotation_.IsDefault()) {
    _impl_.annotation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LatticeStTraining::set_allocated_annotation(std::string* annotation) {
  if (annotation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.annotation_.SetAllocated(annotation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.annotation_.IsDefault()) {
    _impl_.annotation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.LatticeStTraining.annotation)
}

// optional uint32 num_s_grids = 4;
inline bool LatticeStTraining::_internal_has_num_s_grids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LatticeStTraining::has_num_s_grids() const {
  return _internal_has_num_s_grids();
}
inline void LatticeStTraining::clear_num_s_grids() {
  _impl_.num_s_grids_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t LatticeStTraining::_internal_num_s_grids() const {
  return _impl_.num_s_grids_;
}
inline uint32_t LatticeStTraining::num_s_grids() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.num_s_grids)
  return _internal_num_s_grids();
}
inline void LatticeStTraining::_internal_set_num_s_grids(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_s_grids_ = value;
}
inline void LatticeStTraining::set_num_s_grids(uint32_t value) {
  _internal_set_num_s_grids(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.num_s_grids)
}

// optional uint32 num_t_grids = 5;
inline bool LatticeStTraining::_internal_has_num_t_grids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LatticeStTraining::has_num_t_grids() const {
  return _internal_has_num_t_grids();
}
inline void LatticeStTraining::clear_num_t_grids() {
  _impl_.num_t_grids_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t LatticeStTraining::_internal_num_t_grids() const {
  return _impl_.num_t_grids_;
}
inline uint32_t LatticeStTraining::num_t_grids() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.num_t_grids)
  return _internal_num_t_grids();
}
inline void LatticeStTraining::_internal_set_num_t_grids(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_t_grids_ = value;
}
inline void LatticeStTraining::set_num_t_grids(uint32_t value) {
  _internal_set_num_t_grids(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.num_t_grids)
}

// optional double s_resolution = 6;
inline bool LatticeStTraining::_internal_has_s_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LatticeStTraining::has_s_resolution() const {
  return _internal_has_s_resolution();
}
inline void LatticeStTraining::clear_s_resolution() {
  _impl_.s_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LatticeStTraining::_internal_s_resolution() const {
  return _impl_.s_resolution_;
}
inline double LatticeStTraining::s_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.s_resolution)
  return _internal_s_resolution();
}
inline void LatticeStTraining::_internal_set_s_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.s_resolution_ = value;
}
inline void LatticeStTraining::set_s_resolution(double value) {
  _internal_set_s_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.s_resolution)
}

// optional double t_resolution = 7;
inline bool LatticeStTraining::_internal_has_t_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LatticeStTraining::has_t_resolution() const {
  return _internal_has_t_resolution();
}
inline void LatticeStTraining::clear_t_resolution() {
  _impl_.t_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LatticeStTraining::_internal_t_resolution() const {
  return _impl_.t_resolution_;
}
inline double LatticeStTraining::t_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.LatticeStTraining.t_resolution)
  return _internal_t_resolution();
}
inline void LatticeStTraining::_internal_set_t_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.t_resolution_ = value;
}
inline void LatticeStTraining::set_t_resolution(double value) {
  _internal_set_t_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.LatticeStTraining.t_resolution)
}

// -------------------------------------------------------------------

// CostComponents

// repeated double cost_component = 1;
inline int CostComponents::_internal_cost_component_size() const {
  return _impl_.cost_component_.size();
}
inline int CostComponents::cost_component_size() const {
  return _internal_cost_component_size();
}
inline void CostComponents::clear_cost_component() {
  _impl_.cost_component_.Clear();
}
inline double CostComponents::_internal_cost_component(int index) const {
  return _impl_.cost_component_.Get(index);
}
inline double CostComponents::cost_component(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CostComponents.cost_component)
  return _internal_cost_component(index);
}
inline void CostComponents::set_cost_component(int index, double value) {
  _impl_.cost_component_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning_internal.CostComponents.cost_component)
}
inline void CostComponents::_internal_add_cost_component(double value) {
  _impl_.cost_component_.Add(value);
}
inline void CostComponents::add_cost_component(double value) {
  _internal_add_cost_component(value);
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CostComponents.cost_component)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CostComponents::_internal_cost_component() const {
  return _impl_.cost_component_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CostComponents::cost_component() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CostComponents.cost_component)
  return _internal_cost_component();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CostComponents::_internal_mutable_cost_component() {
  return &_impl_.cost_component_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CostComponents::mutable_cost_component() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CostComponents.cost_component)
  return _internal_mutable_cost_component();
}

// -------------------------------------------------------------------

// AutoTuningTrainingData

// optional .apollo.planning_internal.CostComponents teacher_component = 1;
inline bool AutoTuningTrainingData::_internal_has_teacher_component() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.teacher_component_ != nullptr);
  return value;
}
inline bool AutoTuningTrainingData::has_teacher_component() const {
  return _internal_has_teacher_component();
}
inline void AutoTuningTrainingData::clear_teacher_component() {
  if (_impl_.teacher_component_ != nullptr) _impl_.teacher_component_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::_internal_teacher_component() const {
  const ::apollo::planning_internal::CostComponents* p = _impl_.teacher_component_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::CostComponents&>(
      ::apollo::planning_internal::_CostComponents_default_instance_);
}
inline const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::teacher_component() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  return _internal_teacher_component();
}
inline void AutoTuningTrainingData::unsafe_arena_set_allocated_teacher_component(
    ::apollo::planning_internal::CostComponents* teacher_component) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teacher_component_);
  }
  _impl_.teacher_component_ = teacher_component;
  if (teacher_component) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::release_teacher_component() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning_internal::CostComponents* temp = _impl_.teacher_component_;
  _impl_.teacher_component_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::unsafe_arena_release_teacher_component() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning_internal::CostComponents* temp = _impl_.teacher_component_;
  _impl_.teacher_component_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::_internal_mutable_teacher_component() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.teacher_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::CostComponents>(GetArenaForAllocation());
    _impl_.teacher_component_ = p;
  }
  return _impl_.teacher_component_;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::mutable_teacher_component() {
  ::apollo::planning_internal::CostComponents* _msg = _internal_mutable_teacher_component();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
  return _msg;
}
inline void AutoTuningTrainingData::set_allocated_teacher_component(::apollo::planning_internal::CostComponents* teacher_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.teacher_component_;
  }
  if (teacher_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teacher_component);
    if (message_arena != submessage_arena) {
      teacher_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teacher_component, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.teacher_component_ = teacher_component;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.AutoTuningTrainingData.teacher_component)
}

// optional .apollo.planning_internal.CostComponents student_component = 2;
inline bool AutoTuningTrainingData::_internal_has_student_component() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.student_component_ != nullptr);
  return value;
}
inline bool AutoTuningTrainingData::has_student_component() const {
  return _internal_has_student_component();
}
inline void AutoTuningTrainingData::clear_student_component() {
  if (_impl_.student_component_ != nullptr) _impl_.student_component_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::_internal_student_component() const {
  const ::apollo::planning_internal::CostComponents* p = _impl_.student_component_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::CostComponents&>(
      ::apollo::planning_internal::_CostComponents_default_instance_);
}
inline const ::apollo::planning_internal::CostComponents& AutoTuningTrainingData::student_component() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.AutoTuningTrainingData.student_component)
  return _internal_student_component();
}
inline void AutoTuningTrainingData::unsafe_arena_set_allocated_student_component(
    ::apollo::planning_internal::CostComponents* student_component) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.student_component_);
  }
  _impl_.student_component_ = student_component;
  if (student_component) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.AutoTuningTrainingData.student_component)
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::release_student_component() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning_internal::CostComponents* temp = _impl_.student_component_;
  _impl_.student_component_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::unsafe_arena_release_student_component() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.AutoTuningTrainingData.student_component)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning_internal::CostComponents* temp = _impl_.student_component_;
  _impl_.student_component_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::_internal_mutable_student_component() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.student_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::CostComponents>(GetArenaForAllocation());
    _impl_.student_component_ = p;
  }
  return _impl_.student_component_;
}
inline ::apollo::planning_internal::CostComponents* AutoTuningTrainingData::mutable_student_component() {
  ::apollo::planning_internal::CostComponents* _msg = _internal_mutable_student_component();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.AutoTuningTrainingData.student_component)
  return _msg;
}
inline void AutoTuningTrainingData::set_allocated_student_component(::apollo::planning_internal::CostComponents* student_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.student_component_;
  }
  if (student_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(student_component);
    if (message_arena != submessage_arena) {
      student_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, student_component, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.student_component_ = student_component;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.AutoTuningTrainingData.student_component)
}

// -------------------------------------------------------------------

// CloudReferenceLineRequest

// repeated .apollo.routing.LaneSegment lane_segment = 1;
inline int CloudReferenceLineRequest::_internal_lane_segment_size() const {
  return _impl_.lane_segment_.size();
}
inline int CloudReferenceLineRequest::lane_segment_size() const {
  return _internal_lane_segment_size();
}
inline ::apollo::routing::LaneSegment* CloudReferenceLineRequest::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return _impl_.lane_segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >*
CloudReferenceLineRequest::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return &_impl_.lane_segment_;
}
inline const ::apollo::routing::LaneSegment& CloudReferenceLineRequest::_internal_lane_segment(int index) const {
  return _impl_.lane_segment_.Get(index);
}
inline const ::apollo::routing::LaneSegment& CloudReferenceLineRequest::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return _internal_lane_segment(index);
}
inline ::apollo::routing::LaneSegment* CloudReferenceLineRequest::_internal_add_lane_segment() {
  return _impl_.lane_segment_.Add();
}
inline ::apollo::routing::LaneSegment* CloudReferenceLineRequest::add_lane_segment() {
  ::apollo::routing::LaneSegment* _add = _internal_add_lane_segment();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::routing::LaneSegment >&
CloudReferenceLineRequest::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CloudReferenceLineRequest.lane_segment)
  return _impl_.lane_segment_;
}

// -------------------------------------------------------------------

// CloudReferenceLineRoutingRequest

// optional .apollo.routing.RoutingResponse routing = 1;
inline bool CloudReferenceLineRoutingRequest::_internal_has_routing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_ != nullptr);
  return value;
}
inline bool CloudReferenceLineRoutingRequest::has_routing() const {
  return _internal_has_routing();
}
inline const ::apollo::routing::RoutingResponse& CloudReferenceLineRoutingRequest::_internal_routing() const {
  const ::apollo::routing::RoutingResponse* p = _impl_.routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingResponse&>(
      ::apollo::routing::_RoutingResponse_default_instance_);
}
inline const ::apollo::routing::RoutingResponse& CloudReferenceLineRoutingRequest::routing() const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return _internal_routing();
}
inline void CloudReferenceLineRoutingRequest::unsafe_arena_set_allocated_routing(
    ::apollo::routing::RoutingResponse* routing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  _impl_.routing_ = routing;
  if (routing) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
}
inline ::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::release_routing() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingResponse* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::unsafe_arena_release_routing() {
  // @@protoc_insertion_point(field_release:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingResponse* temp = _impl_.routing_;
  _impl_.routing_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::_internal_mutable_routing() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routing_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingResponse>(GetArenaForAllocation());
    _impl_.routing_ = p;
  }
  return _impl_.routing_;
}
inline ::apollo::routing::RoutingResponse* CloudReferenceLineRoutingRequest::mutable_routing() {
  ::apollo::routing::RoutingResponse* _msg = _internal_mutable_routing();
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
  return _msg;
}
inline void CloudReferenceLineRoutingRequest::set_allocated_routing(::apollo::routing::RoutingResponse* routing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_);
  }
  if (routing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing));
    if (message_arena != submessage_arena) {
      routing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.routing_ = routing;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning_internal.CloudReferenceLineRoutingRequest.routing)
}

// -------------------------------------------------------------------

// CloudReferenceLineResponse

// repeated .apollo.common.Path segment = 1;
inline int CloudReferenceLineResponse::_internal_segment_size() const {
  return _impl_.segment_.size();
}
inline int CloudReferenceLineResponse::segment_size() const {
  return _internal_segment_size();
}
inline ::apollo::common::Path* CloudReferenceLineResponse::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return _impl_.segment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >*
CloudReferenceLineResponse::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return &_impl_.segment_;
}
inline const ::apollo::common::Path& CloudReferenceLineResponse::_internal_segment(int index) const {
  return _impl_.segment_.Get(index);
}
inline const ::apollo::common::Path& CloudReferenceLineResponse::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return _internal_segment(index);
}
inline ::apollo::common::Path* CloudReferenceLineResponse::_internal_add_segment() {
  return _impl_.segment_.Add();
}
inline ::apollo::common::Path* CloudReferenceLineResponse::add_segment() {
  ::apollo::common::Path* _add = _internal_add_segment();
  // @@protoc_insertion_point(field_add:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Path >&
CloudReferenceLineResponse::segment() const {
  // @@protoc_insertion_point(field_list:apollo.planning_internal.CloudReferenceLineResponse.segment)
  return _impl_.segment_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning_internal
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType>() {
  return ::apollo::planning_internal::StGraphBoundaryDebug_StBoundaryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto
