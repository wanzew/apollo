// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_path_decider_config.proto

#include "modules/planning/proto/navi_path_decider_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR NaviPathDeciderConfig::NaviPathDeciderConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.later_shift_config_table_)*/nullptr
  , /*decltype(_impl_.min_path_length_)*/5u
  , /*decltype(_impl_.min_look_forward_time_)*/2u
  , /*decltype(_impl_.default_min_smooth_init_y_)*/0.1
  , /*decltype(_impl_.default_max_smooth_init_y_)*/0.4
  , /*decltype(_impl_.default_theta_change_ratio_)*/15
  , /*decltype(_impl_.max_lateral_distance_)*/6
  , /*decltype(_impl_.path_l_cost_)*/6.5} {}
struct NaviPathDeciderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NaviPathDeciderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NaviPathDeciderConfigDefaultTypeInternal() {}
  union {
    NaviPathDeciderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
PROTOBUF_CONSTEXPR LateralShiftConfigTable::LateralShiftConfigTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lateral_shift_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LateralShiftConfigTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LateralShiftConfigTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LateralShiftConfigTableDefaultTypeInternal() {}
  union {
    LateralShiftConfigTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LateralShiftConfigTableDefaultTypeInternal _LateralShiftConfigTable_default_instance_;
PROTOBUF_CONSTEXPR ShiftConfig::ShiftConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_speed_)*/4.16
  , /*decltype(_impl_.min_distance_)*/0.1
  , /*decltype(_impl_.max_distance_)*/0.4
  , /*decltype(_impl_.theta_change_ratio_)*/15} {}
struct ShiftConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShiftConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShiftConfigDefaultTypeInternal() {}
  union {
    ShiftConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.min_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.min_look_forward_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.default_min_smooth_init_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.default_max_smooth_init_y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.default_theta_change_ratio_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.max_lateral_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.path_l_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPathDeciderConfig, _impl_.later_shift_config_table_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LateralShiftConfigTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LateralShiftConfigTable, _impl_.lateral_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _impl_.max_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _impl_.min_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _impl_.max_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ShiftConfig, _impl_.theta_change_ratio_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::apollo::planning::NaviPathDeciderConfig)},
  { 22, -1, -1, sizeof(::apollo::planning::LateralShiftConfigTable)},
  { 29, 39, -1, sizeof(::apollo::planning::ShiftConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_NaviPathDeciderConfig_default_instance_._instance,
  &::apollo::planning::_LateralShiftConfigTable_default_instance_._instance,
  &::apollo::planning::_ShiftConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/planning/proto/navi_path_decid"
  "er_config.proto\022\017apollo.planning\"\324\002\n\025Nav"
  "iPathDeciderConfig\022\032\n\017min_path_length\030\001 "
  "\001(\r:\0015\022 \n\025min_look_forward_time\030\002 \001(\r:\0012"
  "\022&\n\031default_min_smooth_init_y\030\003 \001(\001:\0030.1"
  "\022&\n\031default_max_smooth_init_y\030\004 \001(\001:\0030.4"
  "\022&\n\032default_theta_change_ratio\030\005 \001(\001:\00215"
  "\022\037\n\024max_lateral_distance\030\006 \001(\001:\0016\022\030\n\013pat"
  "h_l_cost\030\007 \001(\001:\0036.5\022J\n\030later_shift_confi"
  "g_table\030\010 \001(\0132(.apollo.planning.LateralS"
  "hiftConfigTable\"N\n\027LateralShiftConfigTab"
  "le\0223\n\rlateral_shift\030\001 \003(\0132\034.apollo.plann"
  "ing.ShiftConfig\"|\n\013ShiftConfig\022\027\n\tmax_sp"
  "eed\030\001 \001(\001:\0044.16\022\031\n\014min_distance\030\002 \001(\001:\0030"
  ".1\022\031\n\014max_distance\030\003 \001(\001:\0030.4\022\036\n\022theta_c"
  "hange_ratio\030\004 \001(\001:\00215"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto = {
    false, false, 621, descriptor_table_protodef_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
    "modules/planning/proto/navi_path_decider_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class NaviPathDeciderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviPathDeciderConfig>()._impl_._has_bits_);
  static void set_has_min_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_look_forward_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_default_min_smooth_init_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_max_smooth_init_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_theta_change_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_l_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::planning::LateralShiftConfigTable& later_shift_config_table(const NaviPathDeciderConfig* msg);
  static void set_has_later_shift_config_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::LateralShiftConfigTable&
NaviPathDeciderConfig::_Internal::later_shift_config_table(const NaviPathDeciderConfig* msg) {
  return *msg->_impl_.later_shift_config_table_;
}
NaviPathDeciderConfig::NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviPathDeciderConfig)
}
NaviPathDeciderConfig::NaviPathDeciderConfig(const NaviPathDeciderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.later_shift_config_table_){nullptr}
    , decltype(_impl_.min_path_length_){}
    , decltype(_impl_.min_look_forward_time_){}
    , decltype(_impl_.default_min_smooth_init_y_){}
    , decltype(_impl_.default_max_smooth_init_y_){}
    , decltype(_impl_.default_theta_change_ratio_){}
    , decltype(_impl_.max_lateral_distance_){}
    , decltype(_impl_.path_l_cost_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_later_shift_config_table()) {
    _impl_.later_shift_config_table_ = new ::apollo::planning::LateralShiftConfigTable(*from._impl_.later_shift_config_table_);
  }
  ::memcpy(&_impl_.min_path_length_, &from._impl_.min_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.path_l_cost_) -
    reinterpret_cast<char*>(&_impl_.min_path_length_)) + sizeof(_impl_.path_l_cost_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPathDeciderConfig)
}

inline void NaviPathDeciderConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.later_shift_config_table_){nullptr}
    , decltype(_impl_.min_path_length_){5u}
    , decltype(_impl_.min_look_forward_time_){2u}
    , decltype(_impl_.default_min_smooth_init_y_){0.1}
    , decltype(_impl_.default_max_smooth_init_y_){0.4}
    , decltype(_impl_.default_theta_change_ratio_){15}
    , decltype(_impl_.max_lateral_distance_){6}
    , decltype(_impl_.path_l_cost_){6.5}
  };
}

NaviPathDeciderConfig::~NaviPathDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPathDeciderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NaviPathDeciderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.later_shift_config_table_;
}

void NaviPathDeciderConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NaviPathDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPathDeciderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.later_shift_config_table_ != nullptr);
      _impl_.later_shift_config_table_->Clear();
    }
    _impl_.min_path_length_ = 5u;
    _impl_.min_look_forward_time_ = 2u;
    _impl_.default_min_smooth_init_y_ = 0.1;
    _impl_.default_max_smooth_init_y_ = 0.4;
    _impl_.default_theta_change_ratio_ = 15;
    _impl_.max_lateral_distance_ = 6;
    _impl_.path_l_cost_ = 6.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviPathDeciderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 min_path_length = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_path_length(&has_bits);
          _impl_.min_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_look_forward_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_min_look_forward_time(&has_bits);
          _impl_.min_look_forward_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double default_min_smooth_init_y = 3 [default = 0.1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_default_min_smooth_init_y(&has_bits);
          _impl_.default_min_smooth_init_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_max_smooth_init_y = 4 [default = 0.4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_default_max_smooth_init_y(&has_bits);
          _impl_.default_max_smooth_init_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_theta_change_ratio = 5 [default = 15];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_default_theta_change_ratio(&has_bits);
          _impl_.default_theta_change_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_lateral_distance = 6 [default = 6];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_max_lateral_distance(&has_bits);
          _impl_.max_lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_l_cost = 7 [default = 6.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_path_l_cost(&has_bits);
          _impl_.path_l_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LateralShiftConfigTable later_shift_config_table = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_later_shift_config_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NaviPathDeciderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPathDeciderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 min_path_length = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_path_length(), target);
  }

  // optional uint32 min_look_forward_time = 2 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_min_look_forward_time(), target);
  }

  // optional double default_min_smooth_init_y = 3 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_default_min_smooth_init_y(), target);
  }

  // optional double default_max_smooth_init_y = 4 [default = 0.4];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_default_max_smooth_init_y(), target);
  }

  // optional double default_theta_change_ratio = 5 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_default_theta_change_ratio(), target);
  }

  // optional double max_lateral_distance = 6 [default = 6];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_lateral_distance(), target);
  }

  // optional double path_l_cost = 7 [default = 6.5];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_path_l_cost(), target);
  }

  // optional .apollo.planning.LateralShiftConfigTable later_shift_config_table = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::later_shift_config_table(this),
        _Internal::later_shift_config_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPathDeciderConfig)
  return target;
}

size_t NaviPathDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPathDeciderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.LateralShiftConfigTable later_shift_config_table = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.later_shift_config_table_);
    }

    // optional uint32 min_path_length = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_path_length());
    }

    // optional uint32 min_look_forward_time = 2 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_min_look_forward_time());
    }

    // optional double default_min_smooth_init_y = 3 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double default_max_smooth_init_y = 4 [default = 0.4];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double default_theta_change_ratio = 5 [default = 15];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_lateral_distance = 6 [default = 6];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost = 7 [default = 6.5];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviPathDeciderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviPathDeciderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviPathDeciderConfig::GetClassData() const { return &_class_data_; }

void NaviPathDeciderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviPathDeciderConfig *>(to)->MergeFrom(
      static_cast<const NaviPathDeciderConfig &>(from));
}


void NaviPathDeciderConfig::MergeFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPathDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_later_shift_config_table()->::apollo::planning::LateralShiftConfigTable::MergeFrom(from._internal_later_shift_config_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.min_path_length_ = from._impl_.min_path_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_look_forward_time_ = from._impl_.min_look_forward_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.default_min_smooth_init_y_ = from._impl_.default_min_smooth_init_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.default_max_smooth_init_y_ = from._impl_.default_max_smooth_init_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.default_theta_change_ratio_ = from._impl_.default_theta_change_ratio_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.max_lateral_distance_ = from._impl_.max_lateral_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.path_l_cost_ = from._impl_.path_l_cost_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviPathDeciderConfig::CopyFrom(const NaviPathDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPathDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPathDeciderConfig::IsInitialized() const {
  return true;
}

void NaviPathDeciderConfig::InternalSwap(NaviPathDeciderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.later_shift_config_table_, other->_impl_.later_shift_config_table_);
  swap(_impl_.min_path_length_, other->_impl_.min_path_length_);
  swap(_impl_.min_look_forward_time_, other->_impl_.min_look_forward_time_);
  swap(_impl_.default_min_smooth_init_y_, other->_impl_.default_min_smooth_init_y_);
  swap(_impl_.default_max_smooth_init_y_, other->_impl_.default_max_smooth_init_y_);
  swap(_impl_.default_theta_change_ratio_, other->_impl_.default_theta_change_ratio_);
  swap(_impl_.max_lateral_distance_, other->_impl_.max_lateral_distance_);
  swap(_impl_.path_l_cost_, other->_impl_.path_l_cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviPathDeciderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[0]);
}

// ===================================================================

class LateralShiftConfigTable::_Internal {
 public:
};

LateralShiftConfigTable::LateralShiftConfigTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LateralShiftConfigTable)
}
LateralShiftConfigTable::LateralShiftConfigTable(const LateralShiftConfigTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.lateral_shift_){from._impl_.lateral_shift_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LateralShiftConfigTable)
}

inline void LateralShiftConfigTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lateral_shift_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LateralShiftConfigTable::~LateralShiftConfigTable() {
  // @@protoc_insertion_point(destructor:apollo.planning.LateralShiftConfigTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LateralShiftConfigTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lateral_shift_.~RepeatedPtrField();
}

void LateralShiftConfigTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LateralShiftConfigTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LateralShiftConfigTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lateral_shift_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LateralShiftConfigTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lateral_shift(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LateralShiftConfigTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LateralShiftConfigTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lateral_shift_size()); i < n; i++) {
    const auto& repfield = this->_internal_lateral_shift(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LateralShiftConfigTable)
  return target;
}

size_t LateralShiftConfigTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LateralShiftConfigTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  total_size += 1UL * this->_internal_lateral_shift_size();
  for (const auto& msg : this->_impl_.lateral_shift_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LateralShiftConfigTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LateralShiftConfigTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LateralShiftConfigTable::GetClassData() const { return &_class_data_; }

void LateralShiftConfigTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LateralShiftConfigTable *>(to)->MergeFrom(
      static_cast<const LateralShiftConfigTable &>(from));
}


void LateralShiftConfigTable::MergeFrom(const LateralShiftConfigTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LateralShiftConfigTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lateral_shift_.MergeFrom(from._impl_.lateral_shift_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LateralShiftConfigTable::CopyFrom(const LateralShiftConfigTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LateralShiftConfigTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LateralShiftConfigTable::IsInitialized() const {
  return true;
}

void LateralShiftConfigTable::InternalSwap(LateralShiftConfigTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lateral_shift_.InternalSwap(&other->_impl_.lateral_shift_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LateralShiftConfigTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[1]);
}

// ===================================================================

class ShiftConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftConfig>()._impl_._has_bits_);
  static void set_has_max_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_theta_change_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ShiftConfig::ShiftConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ShiftConfig)
}
ShiftConfig::ShiftConfig(const ShiftConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_speed_){}
    , decltype(_impl_.min_distance_){}
    , decltype(_impl_.max_distance_){}
    , decltype(_impl_.theta_change_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_speed_, &from._impl_.max_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_change_ratio_) -
    reinterpret_cast<char*>(&_impl_.max_speed_)) + sizeof(_impl_.theta_change_ratio_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ShiftConfig)
}

inline void ShiftConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_speed_){4.16}
    , decltype(_impl_.min_distance_){0.1}
    , decltype(_impl_.max_distance_){0.4}
    , decltype(_impl_.theta_change_ratio_){15}
  };
}

ShiftConfig::~ShiftConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ShiftConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShiftConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShiftConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShiftConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ShiftConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.max_speed_ = 4.16;
    _impl_.min_distance_ = 0.1;
    _impl_.max_distance_ = 0.4;
    _impl_.theta_change_ratio_ = 15;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_speed = 1 [default = 4.16];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_speed(&has_bits);
          _impl_.max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_distance = 2 [default = 0.1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_min_distance(&has_bits);
          _impl_.min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_distance = 3 [default = 0.4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_distance(&has_bits);
          _impl_.max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta_change_ratio = 4 [default = 15];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_theta_change_ratio(&has_bits);
          _impl_.theta_change_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShiftConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ShiftConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_speed = 1 [default = 4.16];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_speed(), target);
  }

  // optional double min_distance = 2 [default = 0.1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_distance(), target);
  }

  // optional double max_distance = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_distance(), target);
  }

  // optional double theta_change_ratio = 4 [default = 15];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta_change_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ShiftConfig)
  return target;
}

size_t ShiftConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ShiftConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double max_speed = 1 [default = 4.16];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double min_distance = 2 [default = 0.1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_distance = 3 [default = 0.4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double theta_change_ratio = 4 [default = 15];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShiftConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShiftConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShiftConfig::GetClassData() const { return &_class_data_; }

void ShiftConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShiftConfig *>(to)->MergeFrom(
      static_cast<const ShiftConfig &>(from));
}


void ShiftConfig::MergeFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ShiftConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_speed_ = from._impl_.max_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.min_distance_ = from._impl_.min_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_distance_ = from._impl_.max_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.theta_change_ratio_ = from._impl_.theta_change_ratio_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShiftConfig::CopyFrom(const ShiftConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ShiftConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftConfig::IsInitialized() const {
  return true;
}

void ShiftConfig::InternalSwap(ShiftConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_speed_, other->_impl_.max_speed_);
  swap(_impl_.min_distance_, other->_impl_.min_distance_);
  swap(_impl_.max_distance_, other->_impl_.max_distance_);
  swap(_impl_.theta_change_ratio_, other->_impl_.theta_change_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviPathDeciderConfig*
Arena::CreateMaybeMessage< ::apollo::planning::NaviPathDeciderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviPathDeciderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LateralShiftConfigTable*
Arena::CreateMaybeMessage< ::apollo::planning::LateralShiftConfigTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LateralShiftConfigTable >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ShiftConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ShiftConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ShiftConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
