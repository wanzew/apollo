// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto

#include "modules/planning/proto/auto_tuning_raw_feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
namespace autotuning {
PROTOBUF_CONSTEXPR PathPointRawFeature::PathPointRawFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cartesian_coord_)*/nullptr
  , /*decltype(_impl_.frenet_coord_)*/nullptr} {}
struct PathPointRawFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPointRawFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPointRawFeatureDefaultTypeInternal() {}
  union {
    PathPointRawFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPointRawFeatureDefaultTypeInternal _PathPointRawFeature_default_instance_;
PROTOBUF_CONSTEXPR SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relative_s_)*/0
  , /*decltype(_impl_.relative_l_)*/0
  , /*decltype(_impl_.relative_v_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.id_)*/0} {}
struct SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal() {}
  union {
    SpeedPointRawFeature_ObjectDecisionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
PROTOBUF_CONSTEXPR SpeedPointRawFeature::SpeedPointRawFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.follow_)*/{}
  , /*decltype(_impl_.overtake_)*/{}
  , /*decltype(_impl_.nudge_)*/{}
  , /*decltype(_impl_.virtual_decision_)*/{}
  , /*decltype(_impl_.stop_)*/{}
  , /*decltype(_impl_.collision_)*/{}
  , /*decltype(_impl_.sidepass_front_)*/{}
  , /*decltype(_impl_.sidepass_rear_)*/{}
  , /*decltype(_impl_.keep_clear_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.j_)*/0
  , /*decltype(_impl_.speed_limit_)*/0} {}
struct SpeedPointRawFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPointRawFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPointRawFeatureDefaultTypeInternal() {}
  union {
    SpeedPointRawFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPointRawFeatureDefaultTypeInternal _SpeedPointRawFeature_default_instance_;
PROTOBUF_CONSTEXPR ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_lower_)*/0
  , /*decltype(_impl_.s_upper_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.l_)*/10} {}
struct ObstacleSTRawData_STPointPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleSTRawData_STPointPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleSTRawData_STPointPairDefaultTypeInternal() {}
  union {
    ObstacleSTRawData_STPointPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleSTRawData_STPointPairDefaultTypeInternal _ObstacleSTRawData_STPointPair_default_instance_;
PROTOBUF_CONSTEXPR ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_)*/{}
  , /*decltype(_impl_.distribution_)*/{}
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.is_virtual_)*/false
  , /*decltype(_impl_.probability_)*/0} {}
struct ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal() {}
  union {
    ObstacleSTRawData_ObstacleSTData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal _ObstacleSTRawData_ObstacleSTData_default_instance_;
PROTOBUF_CONSTEXPR ObstacleSTRawData::ObstacleSTRawData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obstacle_st_data_)*/{}
  , /*decltype(_impl_.obstacle_st_nudge_)*/{}
  , /*decltype(_impl_.obstacle_st_sidepass_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleSTRawDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleSTRawDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleSTRawDataDefaultTypeInternal() {}
  union {
    ObstacleSTRawData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleSTRawDataDefaultTypeInternal _ObstacleSTRawData_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryPointRawFeature::TrajectoryPointRawFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_feature_)*/nullptr
  , /*decltype(_impl_.speed_feature_)*/nullptr} {}
struct TrajectoryPointRawFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryPointRawFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryPointRawFeatureDefaultTypeInternal() {}
  union {
    TrajectoryPointRawFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryPointRawFeatureDefaultTypeInternal _TrajectoryPointRawFeature_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryRawFeature::TrajectoryRawFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.point_feature_)*/{}
  , /*decltype(_impl_.st_raw_data_)*/nullptr} {}
struct TrajectoryRawFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryRawFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryRawFeatureDefaultTypeInternal() {}
  union {
    TrajectoryRawFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryRawFeatureDefaultTypeInternal _TrajectoryRawFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _impl_.cartesian_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _impl_.frenet_coord_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_.relative_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_.relative_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_.relative_v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _impl_.speed_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.j_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.follow_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.overtake_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.virtual_decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.collision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.nudge_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.sidepass_front_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.sidepass_rear_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _impl_.keep_clear_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _impl_.s_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _impl_.s_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _impl_.l_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.is_virtual_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _impl_.distribution_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _impl_.obstacle_st_data_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _impl_.obstacle_st_nudge_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _impl_.obstacle_st_sidepass_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _impl_.path_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _impl_.speed_feature_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _impl_.point_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _impl_.st_raw_data_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::planning::autotuning::PathPointRawFeature)},
  { 10, 21, -1, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature)},
  { 26, 47, -1, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature)},
  { 62, 72, -1, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair)},
  { 76, 88, -1, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData)},
  { 94, -1, -1, sizeof(::apollo::planning::autotuning::ObstacleSTRawData)},
  { 103, 111, -1, sizeof(::apollo::planning::autotuning::TrajectoryPointRawFeature)},
  { 113, 121, -1, sizeof(::apollo::planning::autotuning::TrajectoryRawFeature)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::autotuning::_PathPointRawFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_ObstacleSTRawData_STPointPair_default_instance_._instance,
  &::apollo::planning::autotuning::_ObstacleSTRawData_ObstacleSTData_default_instance_._instance,
  &::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_._instance,
  &::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/auto_tuning_raw"
  "_feature.proto\022\032apollo.planning.autotuni"
  "ng\032$modules/common/proto/pnc_point.proto"
  "\"\177\n\023PathPointRawFeature\0221\n\017cartesian_coo"
  "rd\030\001 \001(\0132\030.apollo.common.PathPoint\0225\n\014fr"
  "enet_coord\030\002 \001(\0132\037.apollo.common.FrenetF"
  "ramePoint\"\211\010\n\024SpeedPointRawFeature\022\t\n\001s\030"
  "\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\t"
  "\n\001j\030\005 \001(\001\022\023\n\013speed_limit\030\006 \001(\001\022V\n\006follow"
  "\030\n \003(\0132F.apollo.planning.autotuning.Spee"
  "dPointRawFeature.ObjectDecisionFeature\022X"
  "\n\010overtake\030\013 \003(\0132F.apollo.planning.autot"
  "uning.SpeedPointRawFeature.ObjectDecisio"
  "nFeature\022`\n\020virtual_decision\030\r \003(\0132F.apo"
  "llo.planning.autotuning.SpeedPointRawFea"
  "ture.ObjectDecisionFeature\022T\n\004stop\030\016 \003(\013"
  "2F.apollo.planning.autotuning.SpeedPoint"
  "RawFeature.ObjectDecisionFeature\022Y\n\tcoll"
  "ision\030\017 \003(\0132F.apollo.planning.autotuning"
  ".SpeedPointRawFeature.ObjectDecisionFeat"
  "ure\022U\n\005nudge\030\014 \003(\0132F.apollo.planning.aut"
  "otuning.SpeedPointRawFeature.ObjectDecis"
  "ionFeature\022^\n\016sidepass_front\030\020 \003(\0132F.apo"
  "llo.planning.autotuning.SpeedPointRawFea"
  "ture.ObjectDecisionFeature\022]\n\rsidepass_r"
  "ear\030\021 \003(\0132F.apollo.planning.autotuning.S"
  "peedPointRawFeature.ObjectDecisionFeatur"
  "e\022Z\n\nkeep_clear\030\022 \003(\0132F.apollo.planning."
  "autotuning.SpeedPointRawFeature.ObjectDe"
  "cisionFeature\032n\n\025ObjectDecisionFeature\022\n"
  "\n\002id\030\001 \001(\005\022\022\n\nrelative_s\030\002 \001(\001\022\022\n\nrelati"
  "ve_l\030\003 \001(\001\022\022\n\nrelative_v\030\004 \001(\001\022\r\n\005speed\030"
  "\005 \001(\001\"\337\004\n\021ObstacleSTRawData\022V\n\020obstacle_"
  "st_data\030\001 \003(\0132<.apollo.planning.autotuni"
  "ng.ObstacleSTRawData.ObstacleSTData\022W\n\021o"
  "bstacle_st_nudge\030\002 \003(\0132<.apollo.planning"
  ".autotuning.ObstacleSTRawData.ObstacleST"
  "Data\022Z\n\024obstacle_st_sidepass\030\003 \003(\0132<.apo"
  "llo.planning.autotuning.ObstacleSTRawDat"
  "a.ObstacleSTData\032I\n\013STPointPair\022\017\n\007s_low"
  "er\030\001 \001(\001\022\017\n\007s_upper\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022\r\n\001"
  "l\030\004 \001(\001:\00210\032\361\001\n\016ObstacleSTData\022\n\n\002id\030\001 \001"
  "(\005\022\r\n\005speed\030\002 \001(\001\022\022\n\nis_virtual\030\003 \001(\010\022\023\n"
  "\013probability\030\004 \001(\001\022J\n\007polygon\030\010 \003(\01329.ap"
  "ollo.planning.autotuning.ObstacleSTRawDa"
  "ta.STPointPair\022O\n\014distribution\030\t \003(\01329.a"
  "pollo.planning.autotuning.ObstacleSTRawD"
  "ata.STPointPair\"\253\001\n\031TrajectoryPointRawFe"
  "ature\022E\n\014path_feature\030\001 \001(\0132/.apollo.pla"
  "nning.autotuning.PathPointRawFeature\022G\n\r"
  "speed_feature\030\002 \001(\01320.apollo.planning.au"
  "totuning.SpeedPointRawFeature\"\250\001\n\024Trajec"
  "toryRawFeature\022L\n\rpoint_feature\030\001 \003(\01325."
  "apollo.planning.autotuning.TrajectoryPoi"
  "ntRawFeature\022B\n\013st_raw_data\030\002 \001(\0132-.apol"
  "lo.planning.autotuning.ObstacleSTRawData"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_deps[1] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto = {
    false, false, 2240, descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto,
    "modules/planning/proto/auto_tuning_raw_feature.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto);
namespace apollo {
namespace planning {
namespace autotuning {

// ===================================================================

class PathPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointRawFeature>()._impl_._has_bits_);
  static const ::apollo::common::PathPoint& cartesian_coord(const PathPointRawFeature* msg);
  static void set_has_cartesian_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::FrenetFramePoint& frenet_coord(const PathPointRawFeature* msg);
  static void set_has_frenet_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::PathPoint&
PathPointRawFeature::_Internal::cartesian_coord(const PathPointRawFeature* msg) {
  return *msg->_impl_.cartesian_coord_;
}
const ::apollo::common::FrenetFramePoint&
PathPointRawFeature::_Internal::frenet_coord(const PathPointRawFeature* msg) {
  return *msg->_impl_.frenet_coord_;
}
void PathPointRawFeature::clear_cartesian_coord() {
  if (_impl_.cartesian_coord_ != nullptr) _impl_.cartesian_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PathPointRawFeature::clear_frenet_coord() {
  if (_impl_.frenet_coord_ != nullptr) _impl_.frenet_coord_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PathPointRawFeature::PathPointRawFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.PathPointRawFeature)
}
PathPointRawFeature::PathPointRawFeature(const PathPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cartesian_coord_){nullptr}
    , decltype(_impl_.frenet_coord_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cartesian_coord()) {
    _impl_.cartesian_coord_ = new ::apollo::common::PathPoint(*from._impl_.cartesian_coord_);
  }
  if (from._internal_has_frenet_coord()) {
    _impl_.frenet_coord_ = new ::apollo::common::FrenetFramePoint(*from._impl_.frenet_coord_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointRawFeature)
}

inline void PathPointRawFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cartesian_coord_){nullptr}
    , decltype(_impl_.frenet_coord_){nullptr}
  };
}

PathPointRawFeature::~PathPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointRawFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPointRawFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cartesian_coord_;
  if (this != internal_default_instance()) delete _impl_.frenet_coord_;
}

void PathPointRawFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointRawFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cartesian_coord_ != nullptr);
      _impl_.cartesian_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.frenet_coord_ != nullptr);
      _impl_.frenet_coord_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPointRawFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.PathPoint cartesian_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frenet_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPointRawFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointRawFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cartesian_coord(this),
        _Internal::cartesian_coord(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::frenet_coord(this),
        _Internal::frenet_coord(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointRawFeature)
  return target;
}

size_t PathPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointRawFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.PathPoint cartesian_coord = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cartesian_coord_);
    }

    // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frenet_coord_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPointRawFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathPointRawFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPointRawFeature::GetClassData() const { return &_class_data_; }

void PathPointRawFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathPointRawFeature *>(to)->MergeFrom(
      static_cast<const PathPointRawFeature &>(from));
}


void PathPointRawFeature::MergeFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cartesian_coord()->::apollo::common::PathPoint::MergeFrom(from._internal_cartesian_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_frenet_coord()->::apollo::common::FrenetFramePoint::MergeFrom(from._internal_frenet_coord());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPointRawFeature::CopyFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointRawFeature::IsInitialized() const {
  return true;
}

void PathPointRawFeature::InternalSwap(PathPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPointRawFeature, _impl_.frenet_coord_)
      + sizeof(PathPointRawFeature::_impl_.frenet_coord_)
      - PROTOBUF_FIELD_OFFSET(PathPointRawFeature, _impl_.cartesian_coord_)>(
          reinterpret_cast<char*>(&_impl_.cartesian_coord_),
          reinterpret_cast<char*>(&other->_impl_.cartesian_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointRawFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[0]);
}

// ===================================================================

class SpeedPointRawFeature_ObjectDecisionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointRawFeature_ObjectDecisionFeature>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_relative_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_l(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relative_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}
SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_s_){}
    , decltype(_impl_.relative_l_){}
    , decltype(_impl_.relative_v_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.relative_s_, &from._impl_.relative_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.relative_s_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

inline void SpeedPointRawFeature_ObjectDecisionFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_s_){0}
    , decltype(_impl_.relative_l_){0}
    , decltype(_impl_.relative_v_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.id_){0}
  };
}

SpeedPointRawFeature_ObjectDecisionFeature::~SpeedPointRawFeature_ObjectDecisionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPointRawFeature_ObjectDecisionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedPointRawFeature_ObjectDecisionFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPointRawFeature_ObjectDecisionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.relative_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.relative_s_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPointRawFeature_ObjectDecisionFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_relative_s(&has_bits);
          _impl_.relative_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_relative_l(&has_bits);
          _impl_.relative_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_relative_v(&has_bits);
          _impl_.relative_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPointRawFeature_ObjectDecisionFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_relative_s(), target);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_relative_l(), target);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_v(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return target;
}

size_t SpeedPointRawFeature_ObjectDecisionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double relative_s = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPointRawFeature_ObjectDecisionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPointRawFeature_ObjectDecisionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPointRawFeature_ObjectDecisionFeature::GetClassData() const { return &_class_data_; }

void SpeedPointRawFeature_ObjectDecisionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPointRawFeature_ObjectDecisionFeature *>(to)->MergeFrom(
      static_cast<const SpeedPointRawFeature_ObjectDecisionFeature &>(from));
}


void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.relative_s_ = from._impl_.relative_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.relative_l_ = from._impl_.relative_l_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.relative_v_ = from._impl_.relative_v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.id_ = from._impl_.id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature_ObjectDecisionFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature_ObjectDecisionFeature::InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _impl_.id_)
      + sizeof(SpeedPointRawFeature_ObjectDecisionFeature::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SpeedPointRawFeature_ObjectDecisionFeature, _impl_.relative_s_)>(
          reinterpret_cast<char*>(&_impl_.relative_s_),
          reinterpret_cast<char*>(&other->_impl_.relative_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointRawFeature_ObjectDecisionFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[1]);
}

// ===================================================================

class SpeedPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointRawFeature>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_j(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SpeedPointRawFeature::SpeedPointRawFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}
SpeedPointRawFeature::SpeedPointRawFeature(const SpeedPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.follow_){from._impl_.follow_}
    , decltype(_impl_.overtake_){from._impl_.overtake_}
    , decltype(_impl_.nudge_){from._impl_.nudge_}
    , decltype(_impl_.virtual_decision_){from._impl_.virtual_decision_}
    , decltype(_impl_.stop_){from._impl_.stop_}
    , decltype(_impl_.collision_){from._impl_.collision_}
    , decltype(_impl_.sidepass_front_){from._impl_.sidepass_front_}
    , decltype(_impl_.sidepass_rear_){from._impl_.sidepass_rear_}
    , decltype(_impl_.keep_clear_){from._impl_.keep_clear_}
    , decltype(_impl_.s_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.j_){}
    , decltype(_impl_.speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_limit_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}

inline void SpeedPointRawFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.follow_){arena}
    , decltype(_impl_.overtake_){arena}
    , decltype(_impl_.nudge_){arena}
    , decltype(_impl_.virtual_decision_){arena}
    , decltype(_impl_.stop_){arena}
    , decltype(_impl_.collision_){arena}
    , decltype(_impl_.sidepass_front_){arena}
    , decltype(_impl_.sidepass_rear_){arena}
    , decltype(_impl_.keep_clear_){arena}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.j_){0}
    , decltype(_impl_.speed_limit_){0}
  };
}

SpeedPointRawFeature::~SpeedPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPointRawFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follow_.~RepeatedPtrField();
  _impl_.overtake_.~RepeatedPtrField();
  _impl_.nudge_.~RepeatedPtrField();
  _impl_.virtual_decision_.~RepeatedPtrField();
  _impl_.stop_.~RepeatedPtrField();
  _impl_.collision_.~RepeatedPtrField();
  _impl_.sidepass_front_.~RepeatedPtrField();
  _impl_.sidepass_rear_.~RepeatedPtrField();
  _impl_.keep_clear_.~RepeatedPtrField();
}

void SpeedPointRawFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follow_.Clear();
  _impl_.overtake_.Clear();
  _impl_.nudge_.Clear();
  _impl_.virtual_decision_.Clear();
  _impl_.stop_.Clear();
  _impl_.collision_.Clear();
  _impl_.sidepass_front_.Clear();
  _impl_.sidepass_rear_.Clear();
  _impl_.keep_clear_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.speed_limit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPointRawFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double j = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_j(&has_bits);
          _impl_.j_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_follow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overtake(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nudge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_decision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_front(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_rear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keep_clear(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPointRawFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_j(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_limit(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_follow_size()); i < n; i++) {
    const auto& repfield = this->_internal_follow(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overtake_size()); i < n; i++) {
    const auto& repfield = this->_internal_overtake(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nudge_size()); i < n; i++) {
    const auto& repfield = this->_internal_nudge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_decision_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_decision(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collision_size()); i < n; i++) {
    const auto& repfield = this->_internal_collision(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sidepass_front_size()); i < n; i++) {
    const auto& repfield = this->_internal_sidepass_front(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sidepass_rear_size()); i < n; i++) {
    const auto& repfield = this->_internal_sidepass_rear(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keep_clear_size()); i < n; i++) {
    const auto& repfield = this->_internal_keep_clear(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature)
  return target;
}

size_t SpeedPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  total_size += 1UL * this->_internal_follow_size();
  for (const auto& msg : this->_impl_.follow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  total_size += 1UL * this->_internal_overtake_size();
  for (const auto& msg : this->_impl_.overtake_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  total_size += 1UL * this->_internal_nudge_size();
  for (const auto& msg : this->_impl_.nudge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  total_size += 1UL * this->_internal_virtual_decision_size();
  for (const auto& msg : this->_impl_.virtual_decision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  total_size += 1UL * this->_internal_stop_size();
  for (const auto& msg : this->_impl_.stop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  total_size += 1UL * this->_internal_collision_size();
  for (const auto& msg : this->_impl_.collision_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  total_size += 2UL * this->_internal_sidepass_front_size();
  for (const auto& msg : this->_impl_.sidepass_front_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  total_size += 2UL * this->_internal_sidepass_rear_size();
  for (const auto& msg : this->_impl_.sidepass_rear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  total_size += 2UL * this->_internal_keep_clear_size();
  for (const auto& msg : this->_impl_.keep_clear_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double j = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPointRawFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPointRawFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPointRawFeature::GetClassData() const { return &_class_data_; }

void SpeedPointRawFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPointRawFeature *>(to)->MergeFrom(
      static_cast<const SpeedPointRawFeature &>(from));
}


void SpeedPointRawFeature::MergeFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.follow_.MergeFrom(from._impl_.follow_);
  _impl_.overtake_.MergeFrom(from._impl_.overtake_);
  _impl_.nudge_.MergeFrom(from._impl_.nudge_);
  _impl_.virtual_decision_.MergeFrom(from._impl_.virtual_decision_);
  _impl_.stop_.MergeFrom(from._impl_.stop_);
  _impl_.collision_.MergeFrom(from._impl_.collision_);
  _impl_.sidepass_front_.MergeFrom(from._impl_.sidepass_front_);
  _impl_.sidepass_rear_.MergeFrom(from._impl_.sidepass_rear_);
  _impl_.keep_clear_.MergeFrom(from._impl_.keep_clear_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.v_ = from._impl_.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.j_ = from._impl_.j_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPointRawFeature::CopyFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature::InternalSwap(SpeedPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.follow_.InternalSwap(&other->_impl_.follow_);
  _impl_.overtake_.InternalSwap(&other->_impl_.overtake_);
  _impl_.nudge_.InternalSwap(&other->_impl_.nudge_);
  _impl_.virtual_decision_.InternalSwap(&other->_impl_.virtual_decision_);
  _impl_.stop_.InternalSwap(&other->_impl_.stop_);
  _impl_.collision_.InternalSwap(&other->_impl_.collision_);
  _impl_.sidepass_front_.InternalSwap(&other->_impl_.sidepass_front_);
  _impl_.sidepass_rear_.InternalSwap(&other->_impl_.sidepass_rear_);
  _impl_.keep_clear_.InternalSwap(&other->_impl_.keep_clear_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPointRawFeature, _impl_.speed_limit_)
      + sizeof(SpeedPointRawFeature::_impl_.speed_limit_)
      - PROTOBUF_FIELD_OFFSET(SpeedPointRawFeature, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointRawFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[2]);
}

// ===================================================================

class ObstacleSTRawData_STPointPair::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleSTRawData_STPointPair>()._impl_._has_bits_);
  static void set_has_s_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}
ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_lower_){}
    , decltype(_impl_.s_upper_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.l_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_lower_, &from._impl_.s_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l_) -
    reinterpret_cast<char*>(&_impl_.s_lower_)) + sizeof(_impl_.l_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

inline void ObstacleSTRawData_STPointPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_lower_){0}
    , decltype(_impl_.s_upper_){0}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.l_){10}
  };
}

ObstacleSTRawData_STPointPair::~ObstacleSTRawData_STPointPair() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleSTRawData_STPointPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleSTRawData_STPointPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleSTRawData_STPointPair::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.s_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_) -
        reinterpret_cast<char*>(&_impl_.s_lower_)) + sizeof(_impl_.t_));
    _impl_.l_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleSTRawData_STPointPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s_lower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s_lower(&has_bits);
          _impl_.s_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s_upper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s_upper(&has_bits);
          _impl_.s_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleSTRawData_STPointPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s_lower(), target);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_upper(), target);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_t(), target);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return target;
}

size_t ObstacleSTRawData_STPointPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double s_lower = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double s_upper = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double t = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double l = 4 [default = 10];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleSTRawData_STPointPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleSTRawData_STPointPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleSTRawData_STPointPair::GetClassData() const { return &_class_data_; }

void ObstacleSTRawData_STPointPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleSTRawData_STPointPair *>(to)->MergeFrom(
      static_cast<const ObstacleSTRawData_STPointPair &>(from));
}


void ObstacleSTRawData_STPointPair::MergeFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_lower_ = from._impl_.s_lower_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.s_upper_ = from._impl_.s_upper_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.l_ = from._impl_.l_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_STPointPair::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_STPointPair::InternalSwap(ObstacleSTRawData_STPointPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _impl_.t_)
      + sizeof(ObstacleSTRawData_STPointPair::_impl_.t_)
      - PROTOBUF_FIELD_OFFSET(ObstacleSTRawData_STPointPair, _impl_.s_lower_)>(
          reinterpret_cast<char*>(&_impl_.s_lower_),
          reinterpret_cast<char*>(&other->_impl_.s_lower_));
  swap(_impl_.l_, other->_impl_.l_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData_STPointPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[3]);
}

// ===================================================================

class ObstacleSTRawData_ObstacleSTData::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleSTRawData_ObstacleSTData>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_virtual(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}
ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_){from._impl_.polygon_}
    , decltype(_impl_.distribution_){from._impl_.distribution_}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.is_virtual_){}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.speed_, &from._impl_.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.probability_) -
    reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.probability_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

inline void ObstacleSTRawData_ObstacleSTData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_){arena}
    , decltype(_impl_.distribution_){arena}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.is_virtual_){false}
    , decltype(_impl_.probability_){0}
  };
}

ObstacleSTRawData_ObstacleSTData::~ObstacleSTRawData_ObstacleSTData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleSTRawData_ObstacleSTData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_.~RepeatedPtrField();
  _impl_.distribution_.~RepeatedPtrField();
}

void ObstacleSTRawData_ObstacleSTData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleSTRawData_ObstacleSTData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_.Clear();
  _impl_.distribution_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.probability_) -
        reinterpret_cast<char*>(&_impl_.speed_)) + sizeof(_impl_.probability_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleSTRawData_ObstacleSTData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_virtual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_virtual(&has_bits);
          _impl_.is_virtual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distribution(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleSTRawData_ObstacleSTData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_speed(), target);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_virtual(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_probability(), target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_distribution_size()); i < n; i++) {
    const auto& repfield = this->_internal_distribution(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return target;
}

size_t ObstacleSTRawData_ObstacleSTData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->_impl_.polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  total_size += 1UL * this->_internal_distribution_size();
  for (const auto& msg : this->_impl_.distribution_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double speed = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional bool is_virtual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double probability = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleSTRawData_ObstacleSTData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleSTRawData_ObstacleSTData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleSTRawData_ObstacleSTData::GetClassData() const { return &_class_data_; }

void ObstacleSTRawData_ObstacleSTData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleSTRawData_ObstacleSTData *>(to)->MergeFrom(
      static_cast<const ObstacleSTRawData_ObstacleSTData &>(from));
}


void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_.MergeFrom(from._impl_.polygon_);
  _impl_.distribution_.MergeFrom(from._impl_.distribution_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.is_virtual_ = from._impl_.is_virtual_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.probability_ = from._impl_.probability_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_ObstacleSTData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_ObstacleSTData::InternalSwap(ObstacleSTRawData_ObstacleSTData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polygon_.InternalSwap(&other->_impl_.polygon_);
  _impl_.distribution_.InternalSwap(&other->_impl_.distribution_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _impl_.probability_)
      + sizeof(ObstacleSTRawData_ObstacleSTData::_impl_.probability_)
      - PROTOBUF_FIELD_OFFSET(ObstacleSTRawData_ObstacleSTData, _impl_.speed_)>(
          reinterpret_cast<char*>(&_impl_.speed_),
          reinterpret_cast<char*>(&other->_impl_.speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData_ObstacleSTData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[4]);
}

// ===================================================================

class ObstacleSTRawData::_Internal {
 public:
};

ObstacleSTRawData::ObstacleSTRawData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.ObstacleSTRawData)
}
ObstacleSTRawData::ObstacleSTRawData(const ObstacleSTRawData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.obstacle_st_data_){from._impl_.obstacle_st_data_}
    , decltype(_impl_.obstacle_st_nudge_){from._impl_.obstacle_st_nudge_}
    , decltype(_impl_.obstacle_st_sidepass_){from._impl_.obstacle_st_sidepass_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData)
}

inline void ObstacleSTRawData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obstacle_st_data_){arena}
    , decltype(_impl_.obstacle_st_nudge_){arena}
    , decltype(_impl_.obstacle_st_sidepass_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObstacleSTRawData::~ObstacleSTRawData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleSTRawData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_st_data_.~RepeatedPtrField();
  _impl_.obstacle_st_nudge_.~RepeatedPtrField();
  _impl_.obstacle_st_sidepass_.~RepeatedPtrField();
}

void ObstacleSTRawData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleSTRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacle_st_data_.Clear();
  _impl_.obstacle_st_nudge_.Clear();
  _impl_.obstacle_st_sidepass_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleSTRawData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_nudge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_st_sidepass(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleSTRawData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_st_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_st_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_st_nudge_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_st_nudge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_st_sidepass_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_st_sidepass(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData)
  return target;
}

size_t ObstacleSTRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  total_size += 1UL * this->_internal_obstacle_st_data_size();
  for (const auto& msg : this->_impl_.obstacle_st_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  total_size += 1UL * this->_internal_obstacle_st_nudge_size();
  for (const auto& msg : this->_impl_.obstacle_st_nudge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  total_size += 1UL * this->_internal_obstacle_st_sidepass_size();
  for (const auto& msg : this->_impl_.obstacle_st_sidepass_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleSTRawData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleSTRawData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleSTRawData::GetClassData() const { return &_class_data_; }

void ObstacleSTRawData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleSTRawData *>(to)->MergeFrom(
      static_cast<const ObstacleSTRawData &>(from));
}


void ObstacleSTRawData::MergeFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.obstacle_st_data_.MergeFrom(from._impl_.obstacle_st_data_);
  _impl_.obstacle_st_nudge_.MergeFrom(from._impl_.obstacle_st_nudge_);
  _impl_.obstacle_st_sidepass_.MergeFrom(from._impl_.obstacle_st_sidepass_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleSTRawData::CopyFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData::InternalSwap(ObstacleSTRawData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.obstacle_st_data_.InternalSwap(&other->_impl_.obstacle_st_data_);
  _impl_.obstacle_st_nudge_.InternalSwap(&other->_impl_.obstacle_st_nudge_);
  _impl_.obstacle_st_sidepass_.InternalSwap(&other->_impl_.obstacle_st_sidepass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleSTRawData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[5]);
}

// ===================================================================

class TrajectoryPointRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointRawFeature>()._impl_._has_bits_);
  static const ::apollo::planning::autotuning::PathPointRawFeature& path_feature(const TrajectoryPointRawFeature* msg);
  static void set_has_path_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::SpeedPointRawFeature& speed_feature(const TrajectoryPointRawFeature* msg);
  static void set_has_speed_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointRawFeature&
TrajectoryPointRawFeature::_Internal::path_feature(const TrajectoryPointRawFeature* msg) {
  return *msg->_impl_.path_feature_;
}
const ::apollo::planning::autotuning::SpeedPointRawFeature&
TrajectoryPointRawFeature::_Internal::speed_feature(const TrajectoryPointRawFeature* msg) {
  return *msg->_impl_.speed_feature_;
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_feature_){nullptr}
    , decltype(_impl_.speed_feature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_feature()) {
    _impl_.path_feature_ = new ::apollo::planning::autotuning::PathPointRawFeature(*from._impl_.path_feature_);
  }
  if (from._internal_has_speed_feature()) {
    _impl_.speed_feature_ = new ::apollo::planning::autotuning::SpeedPointRawFeature(*from._impl_.speed_feature_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

inline void TrajectoryPointRawFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_feature_){nullptr}
    , decltype(_impl_.speed_feature_){nullptr}
  };
}

TrajectoryPointRawFeature::~TrajectoryPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryPointRawFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_feature_;
  if (this != internal_default_instance()) delete _impl_.speed_feature_;
}

void TrajectoryPointRawFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_feature_ != nullptr);
      _impl_.path_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.speed_feature_ != nullptr);
      _impl_.speed_feature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPointRawFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryPointRawFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_feature(this),
        _Internal::path_feature(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::speed_feature(this),
        _Internal::speed_feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return target;
}

size_t TrajectoryPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speed_feature_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPointRawFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPointRawFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPointRawFeature::GetClassData() const { return &_class_data_; }

void TrajectoryPointRawFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPointRawFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryPointRawFeature &>(from));
}


void TrajectoryPointRawFeature::MergeFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_feature()->::apollo::planning::autotuning::PathPointRawFeature::MergeFrom(from._internal_path_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_feature()->::apollo::planning::autotuning::SpeedPointRawFeature::MergeFrom(from._internal_speed_feature());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPointRawFeature::CopyFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointRawFeature::InternalSwap(TrajectoryPointRawFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPointRawFeature, _impl_.speed_feature_)
      + sizeof(TrajectoryPointRawFeature::_impl_.speed_feature_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPointRawFeature, _impl_.path_feature_)>(
          reinterpret_cast<char*>(&_impl_.path_feature_),
          reinterpret_cast<char*>(&other->_impl_.path_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointRawFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[6]);
}

// ===================================================================

class TrajectoryRawFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryRawFeature>()._impl_._has_bits_);
  static const ::apollo::planning::autotuning::ObstacleSTRawData& st_raw_data(const TrajectoryRawFeature* msg);
  static void set_has_st_raw_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::autotuning::ObstacleSTRawData&
TrajectoryRawFeature::_Internal::st_raw_data(const TrajectoryRawFeature* msg) {
  return *msg->_impl_.st_raw_data_;
}
TrajectoryRawFeature::TrajectoryRawFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}
TrajectoryRawFeature::TrajectoryRawFeature(const TrajectoryRawFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_feature_){from._impl_.point_feature_}
    , decltype(_impl_.st_raw_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_st_raw_data()) {
    _impl_.st_raw_data_ = new ::apollo::planning::autotuning::ObstacleSTRawData(*from._impl_.st_raw_data_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}

inline void TrajectoryRawFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_feature_){arena}
    , decltype(_impl_.st_raw_data_){nullptr}
  };
}

TrajectoryRawFeature::~TrajectoryRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryRawFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryRawFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_feature_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.st_raw_data_;
}

void TrajectoryRawFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryRawFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_feature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.st_raw_data_ != nullptr);
    _impl_.st_raw_data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryRawFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_raw_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryRawFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryRawFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::st_raw_data(this),
        _Internal::st_raw_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryRawFeature)
  return target;
}

size_t TrajectoryRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryRawFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  total_size += 1UL * this->_internal_point_feature_size();
  for (const auto& msg : this->_impl_.point_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.st_raw_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryRawFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryRawFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryRawFeature::GetClassData() const { return &_class_data_; }

void TrajectoryRawFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryRawFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryRawFeature &>(from));
}


void TrajectoryRawFeature::MergeFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_feature_.MergeFrom(from._impl_.point_feature_);
  if (from._internal_has_st_raw_data()) {
    _internal_mutable_st_raw_data()->::apollo::planning::autotuning::ObstacleSTRawData::MergeFrom(from._internal_st_raw_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryRawFeature::CopyFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryRawFeature::InternalSwap(TrajectoryRawFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.point_feature_.InternalSwap(&other->_impl_.point_feature_);
  swap(_impl_.st_raw_data_, other->_impl_.st_raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryRawFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointRawFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointRawFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::PathPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::SpeedPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::ObstacleSTRawData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryPointRawFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryRawFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryRawFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::TrajectoryRawFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
