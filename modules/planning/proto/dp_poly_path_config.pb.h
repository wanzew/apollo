// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_poly_path_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto;
namespace apollo {
namespace planning {
class DpPolyPathConfig;
struct DpPolyPathConfigDefaultTypeInternal;
extern DpPolyPathConfigDefaultTypeInternal _DpPolyPathConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DpPolyPathConfig* Arena::CreateMaybeMessage<::apollo::planning::DpPolyPathConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class DpPolyPathConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpPolyPathConfig) */ {
 public:
  inline DpPolyPathConfig() : DpPolyPathConfig(nullptr) {}
  ~DpPolyPathConfig() override;
  explicit PROTOBUF_CONSTEXPR DpPolyPathConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpPolyPathConfig(const DpPolyPathConfig& from);
  DpPolyPathConfig(DpPolyPathConfig&& from) noexcept
    : DpPolyPathConfig() {
    *this = ::std::move(from);
  }

  inline DpPolyPathConfig& operator=(const DpPolyPathConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpPolyPathConfig& operator=(DpPolyPathConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DpPolyPathConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpPolyPathConfig* internal_default_instance() {
    return reinterpret_cast<const DpPolyPathConfig*>(
               &_DpPolyPathConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DpPolyPathConfig& a, DpPolyPathConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DpPolyPathConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpPolyPathConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpPolyPathConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpPolyPathConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DpPolyPathConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DpPolyPathConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpPolyPathConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DpPolyPathConfig";
  }
  protected:
  explicit DpPolyPathConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathLCostFieldNumber = 12,
    kPathDlCostFieldNumber = 13,
    kPathDdlCostFieldNumber = 14,
    kPathLCostParamL0FieldNumber = 15,
    kPathLCostParamBFieldNumber = 16,
    kPathLCostParamKFieldNumber = 17,
    kPathOutLaneCostFieldNumber = 18,
    kPathEndLCostFieldNumber = 19,
    kSidepassDistanceFieldNumber = 20,
    kNavigatorSampleNumEachLevelFieldNumber = 21,
    kSamplePointsNumEachLevelFieldNumber = 1,
    kStepLengthMaxFieldNumber = 2,
    kStepLengthMinFieldNumber = 3,
    kLateralSampleOffsetFieldNumber = 4,
    kLateralAdjustCoeffFieldNumber = 5,
    kEvalTimeIntervalFieldNumber = 6,
    kPathResolutionFieldNumber = 7,
    kObstacleIgnoreDistanceFieldNumber = 8,
    kObstacleCollisionDistanceFieldNumber = 9,
    kObstacleRiskDistanceFieldNumber = 10,
    kObstacleCollisionCostFieldNumber = 11,
  };
  // optional double path_l_cost = 12;
  bool has_path_l_cost() const;
  private:
  bool _internal_has_path_l_cost() const;
  public:
  void clear_path_l_cost();
  double path_l_cost() const;
  void set_path_l_cost(double value);
  private:
  double _internal_path_l_cost() const;
  void _internal_set_path_l_cost(double value);
  public:

  // optional double path_dl_cost = 13;
  bool has_path_dl_cost() const;
  private:
  bool _internal_has_path_dl_cost() const;
  public:
  void clear_path_dl_cost();
  double path_dl_cost() const;
  void set_path_dl_cost(double value);
  private:
  double _internal_path_dl_cost() const;
  void _internal_set_path_dl_cost(double value);
  public:

  // optional double path_ddl_cost = 14;
  bool has_path_ddl_cost() const;
  private:
  bool _internal_has_path_ddl_cost() const;
  public:
  void clear_path_ddl_cost();
  double path_ddl_cost() const;
  void set_path_ddl_cost(double value);
  private:
  double _internal_path_ddl_cost() const;
  void _internal_set_path_ddl_cost(double value);
  public:

  // optional double path_l_cost_param_l0 = 15;
  bool has_path_l_cost_param_l0() const;
  private:
  bool _internal_has_path_l_cost_param_l0() const;
  public:
  void clear_path_l_cost_param_l0();
  double path_l_cost_param_l0() const;
  void set_path_l_cost_param_l0(double value);
  private:
  double _internal_path_l_cost_param_l0() const;
  void _internal_set_path_l_cost_param_l0(double value);
  public:

  // optional double path_l_cost_param_b = 16;
  bool has_path_l_cost_param_b() const;
  private:
  bool _internal_has_path_l_cost_param_b() const;
  public:
  void clear_path_l_cost_param_b();
  double path_l_cost_param_b() const;
  void set_path_l_cost_param_b(double value);
  private:
  double _internal_path_l_cost_param_b() const;
  void _internal_set_path_l_cost_param_b(double value);
  public:

  // optional double path_l_cost_param_k = 17;
  bool has_path_l_cost_param_k() const;
  private:
  bool _internal_has_path_l_cost_param_k() const;
  public:
  void clear_path_l_cost_param_k();
  double path_l_cost_param_k() const;
  void set_path_l_cost_param_k(double value);
  private:
  double _internal_path_l_cost_param_k() const;
  void _internal_set_path_l_cost_param_k(double value);
  public:

  // optional double path_out_lane_cost = 18;
  bool has_path_out_lane_cost() const;
  private:
  bool _internal_has_path_out_lane_cost() const;
  public:
  void clear_path_out_lane_cost();
  double path_out_lane_cost() const;
  void set_path_out_lane_cost(double value);
  private:
  double _internal_path_out_lane_cost() const;
  void _internal_set_path_out_lane_cost(double value);
  public:

  // optional double path_end_l_cost = 19;
  bool has_path_end_l_cost() const;
  private:
  bool _internal_has_path_end_l_cost() const;
  public:
  void clear_path_end_l_cost();
  double path_end_l_cost() const;
  void set_path_end_l_cost(double value);
  private:
  double _internal_path_end_l_cost() const;
  void _internal_set_path_end_l_cost(double value);
  public:

  // optional double sidepass_distance = 20;
  bool has_sidepass_distance() const;
  private:
  bool _internal_has_sidepass_distance() const;
  public:
  void clear_sidepass_distance();
  double sidepass_distance() const;
  void set_sidepass_distance(double value);
  private:
  double _internal_sidepass_distance() const;
  void _internal_set_sidepass_distance(double value);
  public:

  // optional uint32 navigator_sample_num_each_level = 21;
  bool has_navigator_sample_num_each_level() const;
  private:
  bool _internal_has_navigator_sample_num_each_level() const;
  public:
  void clear_navigator_sample_num_each_level();
  uint32_t navigator_sample_num_each_level() const;
  void set_navigator_sample_num_each_level(uint32_t value);
  private:
  uint32_t _internal_navigator_sample_num_each_level() const;
  void _internal_set_navigator_sample_num_each_level(uint32_t value);
  public:

  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  bool has_sample_points_num_each_level() const;
  private:
  bool _internal_has_sample_points_num_each_level() const;
  public:
  void clear_sample_points_num_each_level();
  uint32_t sample_points_num_each_level() const;
  void set_sample_points_num_each_level(uint32_t value);
  private:
  uint32_t _internal_sample_points_num_each_level() const;
  void _internal_set_sample_points_num_each_level(uint32_t value);
  public:

  // optional double step_length_max = 2 [default = 15];
  bool has_step_length_max() const;
  private:
  bool _internal_has_step_length_max() const;
  public:
  void clear_step_length_max();
  double step_length_max() const;
  void set_step_length_max(double value);
  private:
  double _internal_step_length_max() const;
  void _internal_set_step_length_max(double value);
  public:

  // optional double step_length_min = 3 [default = 8];
  bool has_step_length_min() const;
  private:
  bool _internal_has_step_length_min() const;
  public:
  void clear_step_length_min();
  double step_length_min() const;
  void set_step_length_min(double value);
  private:
  double _internal_step_length_min() const;
  void _internal_set_step_length_min(double value);
  public:

  // optional double lateral_sample_offset = 4 [default = 0.5];
  bool has_lateral_sample_offset() const;
  private:
  bool _internal_has_lateral_sample_offset() const;
  public:
  void clear_lateral_sample_offset();
  double lateral_sample_offset() const;
  void set_lateral_sample_offset(double value);
  private:
  double _internal_lateral_sample_offset() const;
  void _internal_set_lateral_sample_offset(double value);
  public:

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  bool has_lateral_adjust_coeff() const;
  private:
  bool _internal_has_lateral_adjust_coeff() const;
  public:
  void clear_lateral_adjust_coeff();
  double lateral_adjust_coeff() const;
  void set_lateral_adjust_coeff(double value);
  private:
  double _internal_lateral_adjust_coeff() const;
  void _internal_set_lateral_adjust_coeff(double value);
  public:

  // optional double eval_time_interval = 6 [default = 0.1];
  bool has_eval_time_interval() const;
  private:
  bool _internal_has_eval_time_interval() const;
  public:
  void clear_eval_time_interval();
  double eval_time_interval() const;
  void set_eval_time_interval(double value);
  private:
  double _internal_eval_time_interval() const;
  void _internal_set_eval_time_interval(double value);
  public:

  // optional double path_resolution = 7 [default = 0.1];
  bool has_path_resolution() const;
  private:
  bool _internal_has_path_resolution() const;
  public:
  void clear_path_resolution();
  double path_resolution() const;
  void set_path_resolution(double value);
  private:
  double _internal_path_resolution() const;
  void _internal_set_path_resolution(double value);
  public:

  // optional double obstacle_ignore_distance = 8 [default = 20];
  bool has_obstacle_ignore_distance() const;
  private:
  bool _internal_has_obstacle_ignore_distance() const;
  public:
  void clear_obstacle_ignore_distance();
  double obstacle_ignore_distance() const;
  void set_obstacle_ignore_distance(double value);
  private:
  double _internal_obstacle_ignore_distance() const;
  void _internal_set_obstacle_ignore_distance(double value);
  public:

  // optional double obstacle_collision_distance = 9 [default = 0.2];
  bool has_obstacle_collision_distance() const;
  private:
  bool _internal_has_obstacle_collision_distance() const;
  public:
  void clear_obstacle_collision_distance();
  double obstacle_collision_distance() const;
  void set_obstacle_collision_distance(double value);
  private:
  double _internal_obstacle_collision_distance() const;
  void _internal_set_obstacle_collision_distance(double value);
  public:

  // optional double obstacle_risk_distance = 10 [default = 2];
  bool has_obstacle_risk_distance() const;
  private:
  bool _internal_has_obstacle_risk_distance() const;
  public:
  void clear_obstacle_risk_distance();
  double obstacle_risk_distance() const;
  void set_obstacle_risk_distance(double value);
  private:
  double _internal_obstacle_risk_distance() const;
  void _internal_set_obstacle_risk_distance(double value);
  public:

  // optional double obstacle_collision_cost = 11 [default = 1000];
  bool has_obstacle_collision_cost() const;
  private:
  bool _internal_has_obstacle_collision_cost() const;
  public:
  void clear_obstacle_collision_cost();
  double obstacle_collision_cost() const;
  void set_obstacle_collision_cost(double value);
  private:
  double _internal_obstacle_collision_cost() const;
  void _internal_set_obstacle_collision_cost(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DpPolyPathConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double path_l_cost_;
    double path_dl_cost_;
    double path_ddl_cost_;
    double path_l_cost_param_l0_;
    double path_l_cost_param_b_;
    double path_l_cost_param_k_;
    double path_out_lane_cost_;
    double path_end_l_cost_;
    double sidepass_distance_;
    uint32_t navigator_sample_num_each_level_;
    uint32_t sample_points_num_each_level_;
    double step_length_max_;
    double step_length_min_;
    double lateral_sample_offset_;
    double lateral_adjust_coeff_;
    double eval_time_interval_;
    double path_resolution_;
    double obstacle_ignore_distance_;
    double obstacle_collision_distance_;
    double obstacle_risk_distance_;
    double obstacle_collision_cost_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DpPolyPathConfig

// optional uint32 sample_points_num_each_level = 1 [default = 9];
inline bool DpPolyPathConfig::_internal_has_sample_points_num_each_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_sample_points_num_each_level() const {
  return _internal_has_sample_points_num_each_level();
}
inline void DpPolyPathConfig::clear_sample_points_num_each_level() {
  _impl_.sample_points_num_each_level_ = 9u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t DpPolyPathConfig::_internal_sample_points_num_each_level() const {
  return _impl_.sample_points_num_each_level_;
}
inline uint32_t DpPolyPathConfig::sample_points_num_each_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.sample_points_num_each_level)
  return _internal_sample_points_num_each_level();
}
inline void DpPolyPathConfig::_internal_set_sample_points_num_each_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.sample_points_num_each_level_ = value;
}
inline void DpPolyPathConfig::set_sample_points_num_each_level(uint32_t value) {
  _internal_set_sample_points_num_each_level(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.sample_points_num_each_level)
}

// optional double step_length_max = 2 [default = 15];
inline bool DpPolyPathConfig::_internal_has_step_length_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_step_length_max() const {
  return _internal_has_step_length_max();
}
inline void DpPolyPathConfig::clear_step_length_max() {
  _impl_.step_length_max_ = 15;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double DpPolyPathConfig::_internal_step_length_max() const {
  return _impl_.step_length_max_;
}
inline double DpPolyPathConfig::step_length_max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.step_length_max)
  return _internal_step_length_max();
}
inline void DpPolyPathConfig::_internal_set_step_length_max(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.step_length_max_ = value;
}
inline void DpPolyPathConfig::set_step_length_max(double value) {
  _internal_set_step_length_max(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.step_length_max)
}

// optional double step_length_min = 3 [default = 8];
inline bool DpPolyPathConfig::_internal_has_step_length_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_step_length_min() const {
  return _internal_has_step_length_min();
}
inline void DpPolyPathConfig::clear_step_length_min() {
  _impl_.step_length_min_ = 8;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double DpPolyPathConfig::_internal_step_length_min() const {
  return _impl_.step_length_min_;
}
inline double DpPolyPathConfig::step_length_min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.step_length_min)
  return _internal_step_length_min();
}
inline void DpPolyPathConfig::_internal_set_step_length_min(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.step_length_min_ = value;
}
inline void DpPolyPathConfig::set_step_length_min(double value) {
  _internal_set_step_length_min(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.step_length_min)
}

// optional double lateral_sample_offset = 4 [default = 0.5];
inline bool DpPolyPathConfig::_internal_has_lateral_sample_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_lateral_sample_offset() const {
  return _internal_has_lateral_sample_offset();
}
inline void DpPolyPathConfig::clear_lateral_sample_offset() {
  _impl_.lateral_sample_offset_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double DpPolyPathConfig::_internal_lateral_sample_offset() const {
  return _impl_.lateral_sample_offset_;
}
inline double DpPolyPathConfig::lateral_sample_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.lateral_sample_offset)
  return _internal_lateral_sample_offset();
}
inline void DpPolyPathConfig::_internal_set_lateral_sample_offset(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.lateral_sample_offset_ = value;
}
inline void DpPolyPathConfig::set_lateral_sample_offset(double value) {
  _internal_set_lateral_sample_offset(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.lateral_sample_offset)
}

// optional double lateral_adjust_coeff = 5 [default = 0.5];
inline bool DpPolyPathConfig::_internal_has_lateral_adjust_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_lateral_adjust_coeff() const {
  return _internal_has_lateral_adjust_coeff();
}
inline void DpPolyPathConfig::clear_lateral_adjust_coeff() {
  _impl_.lateral_adjust_coeff_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double DpPolyPathConfig::_internal_lateral_adjust_coeff() const {
  return _impl_.lateral_adjust_coeff_;
}
inline double DpPolyPathConfig::lateral_adjust_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.lateral_adjust_coeff)
  return _internal_lateral_adjust_coeff();
}
inline void DpPolyPathConfig::_internal_set_lateral_adjust_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.lateral_adjust_coeff_ = value;
}
inline void DpPolyPathConfig::set_lateral_adjust_coeff(double value) {
  _internal_set_lateral_adjust_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.lateral_adjust_coeff)
}

// optional double eval_time_interval = 6 [default = 0.1];
inline bool DpPolyPathConfig::_internal_has_eval_time_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_eval_time_interval() const {
  return _internal_has_eval_time_interval();
}
inline void DpPolyPathConfig::clear_eval_time_interval() {
  _impl_.eval_time_interval_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double DpPolyPathConfig::_internal_eval_time_interval() const {
  return _impl_.eval_time_interval_;
}
inline double DpPolyPathConfig::eval_time_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.eval_time_interval)
  return _internal_eval_time_interval();
}
inline void DpPolyPathConfig::_internal_set_eval_time_interval(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.eval_time_interval_ = value;
}
inline void DpPolyPathConfig::set_eval_time_interval(double value) {
  _internal_set_eval_time_interval(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.eval_time_interval)
}

// optional double path_resolution = 7 [default = 0.1];
inline bool DpPolyPathConfig::_internal_has_path_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_resolution() const {
  return _internal_has_path_resolution();
}
inline void DpPolyPathConfig::clear_path_resolution() {
  _impl_.path_resolution_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double DpPolyPathConfig::_internal_path_resolution() const {
  return _impl_.path_resolution_;
}
inline double DpPolyPathConfig::path_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_resolution)
  return _internal_path_resolution();
}
inline void DpPolyPathConfig::_internal_set_path_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.path_resolution_ = value;
}
inline void DpPolyPathConfig::set_path_resolution(double value) {
  _internal_set_path_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_resolution)
}

// optional double obstacle_ignore_distance = 8 [default = 20];
inline bool DpPolyPathConfig::_internal_has_obstacle_ignore_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_obstacle_ignore_distance() const {
  return _internal_has_obstacle_ignore_distance();
}
inline void DpPolyPathConfig::clear_obstacle_ignore_distance() {
  _impl_.obstacle_ignore_distance_ = 20;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double DpPolyPathConfig::_internal_obstacle_ignore_distance() const {
  return _impl_.obstacle_ignore_distance_;
}
inline double DpPolyPathConfig::obstacle_ignore_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
  return _internal_obstacle_ignore_distance();
}
inline void DpPolyPathConfig::_internal_set_obstacle_ignore_distance(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.obstacle_ignore_distance_ = value;
}
inline void DpPolyPathConfig::set_obstacle_ignore_distance(double value) {
  _internal_set_obstacle_ignore_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_ignore_distance)
}

// optional double obstacle_collision_distance = 9 [default = 0.2];
inline bool DpPolyPathConfig::_internal_has_obstacle_collision_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_obstacle_collision_distance() const {
  return _internal_has_obstacle_collision_distance();
}
inline void DpPolyPathConfig::clear_obstacle_collision_distance() {
  _impl_.obstacle_collision_distance_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double DpPolyPathConfig::_internal_obstacle_collision_distance() const {
  return _impl_.obstacle_collision_distance_;
}
inline double DpPolyPathConfig::obstacle_collision_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
  return _internal_obstacle_collision_distance();
}
inline void DpPolyPathConfig::_internal_set_obstacle_collision_distance(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.obstacle_collision_distance_ = value;
}
inline void DpPolyPathConfig::set_obstacle_collision_distance(double value) {
  _internal_set_obstacle_collision_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_distance)
}

// optional double obstacle_risk_distance = 10 [default = 2];
inline bool DpPolyPathConfig::_internal_has_obstacle_risk_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_obstacle_risk_distance() const {
  return _internal_has_obstacle_risk_distance();
}
inline void DpPolyPathConfig::clear_obstacle_risk_distance() {
  _impl_.obstacle_risk_distance_ = 2;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double DpPolyPathConfig::_internal_obstacle_risk_distance() const {
  return _impl_.obstacle_risk_distance_;
}
inline double DpPolyPathConfig::obstacle_risk_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
  return _internal_obstacle_risk_distance();
}
inline void DpPolyPathConfig::_internal_set_obstacle_risk_distance(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.obstacle_risk_distance_ = value;
}
inline void DpPolyPathConfig::set_obstacle_risk_distance(double value) {
  _internal_set_obstacle_risk_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_risk_distance)
}

// optional double obstacle_collision_cost = 11 [default = 1000];
inline bool DpPolyPathConfig::_internal_has_obstacle_collision_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_obstacle_collision_cost() const {
  return _internal_has_obstacle_collision_cost();
}
inline void DpPolyPathConfig::clear_obstacle_collision_cost() {
  _impl_.obstacle_collision_cost_ = 1000;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double DpPolyPathConfig::_internal_obstacle_collision_cost() const {
  return _impl_.obstacle_collision_cost_;
}
inline double DpPolyPathConfig::obstacle_collision_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
  return _internal_obstacle_collision_cost();
}
inline void DpPolyPathConfig::_internal_set_obstacle_collision_cost(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.obstacle_collision_cost_ = value;
}
inline void DpPolyPathConfig::set_obstacle_collision_cost(double value) {
  _internal_set_obstacle_collision_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.obstacle_collision_cost)
}

// optional double path_l_cost = 12;
inline bool DpPolyPathConfig::_internal_has_path_l_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_l_cost() const {
  return _internal_has_path_l_cost();
}
inline void DpPolyPathConfig::clear_path_l_cost() {
  _impl_.path_l_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double DpPolyPathConfig::_internal_path_l_cost() const {
  return _impl_.path_l_cost_;
}
inline double DpPolyPathConfig::path_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost)
  return _internal_path_l_cost();
}
inline void DpPolyPathConfig::_internal_set_path_l_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_l_cost_ = value;
}
inline void DpPolyPathConfig::set_path_l_cost(double value) {
  _internal_set_path_l_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost)
}

// optional double path_dl_cost = 13;
inline bool DpPolyPathConfig::_internal_has_path_dl_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_dl_cost() const {
  return _internal_has_path_dl_cost();
}
inline void DpPolyPathConfig::clear_path_dl_cost() {
  _impl_.path_dl_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DpPolyPathConfig::_internal_path_dl_cost() const {
  return _impl_.path_dl_cost_;
}
inline double DpPolyPathConfig::path_dl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_dl_cost)
  return _internal_path_dl_cost();
}
inline void DpPolyPathConfig::_internal_set_path_dl_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_dl_cost_ = value;
}
inline void DpPolyPathConfig::set_path_dl_cost(double value) {
  _internal_set_path_dl_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_dl_cost)
}

// optional double path_ddl_cost = 14;
inline bool DpPolyPathConfig::_internal_has_path_ddl_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_ddl_cost() const {
  return _internal_has_path_ddl_cost();
}
inline void DpPolyPathConfig::clear_path_ddl_cost() {
  _impl_.path_ddl_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double DpPolyPathConfig::_internal_path_ddl_cost() const {
  return _impl_.path_ddl_cost_;
}
inline double DpPolyPathConfig::path_ddl_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_ddl_cost)
  return _internal_path_ddl_cost();
}
inline void DpPolyPathConfig::_internal_set_path_ddl_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.path_ddl_cost_ = value;
}
inline void DpPolyPathConfig::set_path_ddl_cost(double value) {
  _internal_set_path_ddl_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_ddl_cost)
}

// optional double path_l_cost_param_l0 = 15;
inline bool DpPolyPathConfig::_internal_has_path_l_cost_param_l0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_l_cost_param_l0() const {
  return _internal_has_path_l_cost_param_l0();
}
inline void DpPolyPathConfig::clear_path_l_cost_param_l0() {
  _impl_.path_l_cost_param_l0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double DpPolyPathConfig::_internal_path_l_cost_param_l0() const {
  return _impl_.path_l_cost_param_l0_;
}
inline double DpPolyPathConfig::path_l_cost_param_l0() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
  return _internal_path_l_cost_param_l0();
}
inline void DpPolyPathConfig::_internal_set_path_l_cost_param_l0(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.path_l_cost_param_l0_ = value;
}
inline void DpPolyPathConfig::set_path_l_cost_param_l0(double value) {
  _internal_set_path_l_cost_param_l0(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_l0)
}

// optional double path_l_cost_param_b = 16;
inline bool DpPolyPathConfig::_internal_has_path_l_cost_param_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_l_cost_param_b() const {
  return _internal_has_path_l_cost_param_b();
}
inline void DpPolyPathConfig::clear_path_l_cost_param_b() {
  _impl_.path_l_cost_param_b_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DpPolyPathConfig::_internal_path_l_cost_param_b() const {
  return _impl_.path_l_cost_param_b_;
}
inline double DpPolyPathConfig::path_l_cost_param_b() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
  return _internal_path_l_cost_param_b();
}
inline void DpPolyPathConfig::_internal_set_path_l_cost_param_b(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.path_l_cost_param_b_ = value;
}
inline void DpPolyPathConfig::set_path_l_cost_param_b(double value) {
  _internal_set_path_l_cost_param_b(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_b)
}

// optional double path_l_cost_param_k = 17;
inline bool DpPolyPathConfig::_internal_has_path_l_cost_param_k() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_l_cost_param_k() const {
  return _internal_has_path_l_cost_param_k();
}
inline void DpPolyPathConfig::clear_path_l_cost_param_k() {
  _impl_.path_l_cost_param_k_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double DpPolyPathConfig::_internal_path_l_cost_param_k() const {
  return _impl_.path_l_cost_param_k_;
}
inline double DpPolyPathConfig::path_l_cost_param_k() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
  return _internal_path_l_cost_param_k();
}
inline void DpPolyPathConfig::_internal_set_path_l_cost_param_k(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.path_l_cost_param_k_ = value;
}
inline void DpPolyPathConfig::set_path_l_cost_param_k(double value) {
  _internal_set_path_l_cost_param_k(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_l_cost_param_k)
}

// optional double path_out_lane_cost = 18;
inline bool DpPolyPathConfig::_internal_has_path_out_lane_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_out_lane_cost() const {
  return _internal_has_path_out_lane_cost();
}
inline void DpPolyPathConfig::clear_path_out_lane_cost() {
  _impl_.path_out_lane_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double DpPolyPathConfig::_internal_path_out_lane_cost() const {
  return _impl_.path_out_lane_cost_;
}
inline double DpPolyPathConfig::path_out_lane_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
  return _internal_path_out_lane_cost();
}
inline void DpPolyPathConfig::_internal_set_path_out_lane_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.path_out_lane_cost_ = value;
}
inline void DpPolyPathConfig::set_path_out_lane_cost(double value) {
  _internal_set_path_out_lane_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_out_lane_cost)
}

// optional double path_end_l_cost = 19;
inline bool DpPolyPathConfig::_internal_has_path_end_l_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_path_end_l_cost() const {
  return _internal_has_path_end_l_cost();
}
inline void DpPolyPathConfig::clear_path_end_l_cost() {
  _impl_.path_end_l_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double DpPolyPathConfig::_internal_path_end_l_cost() const {
  return _impl_.path_end_l_cost_;
}
inline double DpPolyPathConfig::path_end_l_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.path_end_l_cost)
  return _internal_path_end_l_cost();
}
inline void DpPolyPathConfig::_internal_set_path_end_l_cost(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.path_end_l_cost_ = value;
}
inline void DpPolyPathConfig::set_path_end_l_cost(double value) {
  _internal_set_path_end_l_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.path_end_l_cost)
}

// optional double sidepass_distance = 20;
inline bool DpPolyPathConfig::_internal_has_sidepass_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_sidepass_distance() const {
  return _internal_has_sidepass_distance();
}
inline void DpPolyPathConfig::clear_sidepass_distance() {
  _impl_.sidepass_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double DpPolyPathConfig::_internal_sidepass_distance() const {
  return _impl_.sidepass_distance_;
}
inline double DpPolyPathConfig::sidepass_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.sidepass_distance)
  return _internal_sidepass_distance();
}
inline void DpPolyPathConfig::_internal_set_sidepass_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.sidepass_distance_ = value;
}
inline void DpPolyPathConfig::set_sidepass_distance(double value) {
  _internal_set_sidepass_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.sidepass_distance)
}

// optional uint32 navigator_sample_num_each_level = 21;
inline bool DpPolyPathConfig::_internal_has_navigator_sample_num_each_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DpPolyPathConfig::has_navigator_sample_num_each_level() const {
  return _internal_has_navigator_sample_num_each_level();
}
inline void DpPolyPathConfig::clear_navigator_sample_num_each_level() {
  _impl_.navigator_sample_num_each_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t DpPolyPathConfig::_internal_navigator_sample_num_each_level() const {
  return _impl_.navigator_sample_num_each_level_;
}
inline uint32_t DpPolyPathConfig::navigator_sample_num_each_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpPolyPathConfig.navigator_sample_num_each_level)
  return _internal_navigator_sample_num_each_level();
}
inline void DpPolyPathConfig::_internal_set_navigator_sample_num_each_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.navigator_sample_num_each_level_ = value;
}
inline void DpPolyPathConfig::set_navigator_sample_num_each_level(uint32_t value) {
  _internal_set_navigator_sample_num_each_level(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpPolyPathConfig.navigator_sample_num_each_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto
