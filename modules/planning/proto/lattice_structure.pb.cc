// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#include "modules/planning/proto/lattice_structure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR StopPoint::StopPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct StopPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPointDefaultTypeInternal() {}
  union {
    StopPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPointDefaultTypeInternal _StopPoint_default_instance_;
PROTOBUF_CONSTEXPR PlanningTarget::PlanningTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.cruise_speed_)*/0} {}
struct PlanningTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningTargetDefaultTypeInternal() {}
  union {
    PlanningTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_.cruise_speed_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::planning::StopPoint)},
  { 10, 18, -1, sizeof(::apollo::planning::PlanningTarget)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_StopPoint_default_instance_._instance,
  &::apollo::planning::_PlanningTarget_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/planning/proto/lattice_structu"
  "re.proto\022\017apollo.planning\"g\n\tStopPoint\022\t"
  "\n\001s\030\001 \001(\001\0223\n\004type\030\002 \001(\0162\037.apollo.plannin"
  "g.StopPoint.Type:\004HARD\"\032\n\004Type\022\010\n\004HARD\020\000"
  "\022\010\n\004SOFT\020\001\"V\n\016PlanningTarget\022.\n\nstop_poi"
  "nt\030\001 \001(\0132\032.apollo.planning.StopPoint\022\024\n\014"
  "cruise_speed\030\002 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = {
    false, false, 258, descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
    "modules/planning/proto/lattice_structure.proto",
    &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopPoint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0];
}
bool StopPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopPoint_Type StopPoint::HARD;
constexpr StopPoint_Type StopPoint::SOFT;
constexpr StopPoint_Type StopPoint::Type_MIN;
constexpr StopPoint_Type StopPoint::Type_MAX;
constexpr int StopPoint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StopPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StopPoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopPoint::StopPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopPoint)
}
StopPoint::StopPoint(const StopPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopPoint)
}

inline void StopPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.type_){0}
  };
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopPoint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::StopPoint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopPoint)
  return target;
}

size_t StopPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPoint::GetClassData() const { return &_class_data_; }

void StopPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopPoint *>(to)->MergeFrom(
      static_cast<const StopPoint &>(from));
}


void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  return true;
}

void StopPoint::InternalSwap(StopPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopPoint, _impl_.type_)
      + sizeof(StopPoint::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(StopPoint, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0]);
}

// ===================================================================

class PlanningTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningTarget>()._impl_._has_bits_);
  static const ::apollo::planning::StopPoint& stop_point(const PlanningTarget* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::StopPoint&
PlanningTarget::_Internal::stop_point(const PlanningTarget* msg) {
  return *msg->_impl_.stop_point_;
}
PlanningTarget::PlanningTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningTarget)
}
PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.cruise_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::planning::StopPoint(*from._impl_.stop_point_);
  }
  _impl_.cruise_speed_ = from._impl_.cruise_speed_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTarget)
}

inline void PlanningTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.cruise_speed_){0}
  };
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void PlanningTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
    _impl_.stop_point_->Clear();
  }
  _impl_.cruise_speed_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.StopPoint stop_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cruise_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_cruise_speed(&has_bits);
          _impl_.cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cruise_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTarget)
  return target;
}

size_t PlanningTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.StopPoint stop_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double cruise_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningTarget::GetClassData() const { return &_class_data_; }

void PlanningTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningTarget *>(to)->MergeFrom(
      static_cast<const PlanningTarget &>(from));
}


void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::planning::StopPoint::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cruise_speed_ = from._impl_.cruise_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {
  return true;
}

void PlanningTarget::InternalSwap(PlanningTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningTarget, _impl_.cruise_speed_)
      + sizeof(PlanningTarget::_impl_.cruise_speed_)
      - PROTOBUF_FIELD_OFFSET(PlanningTarget, _impl_.stop_point_)>(
          reinterpret_cast<char*>(&_impl_.stop_point_),
          reinterpret_cast<char*>(&other->_impl_.stop_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::StopPoint*
Arena::CreateMaybeMessage< ::apollo::planning::StopPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningTarget*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
