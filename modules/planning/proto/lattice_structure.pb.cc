// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#include "modules/planning/proto/lattice_structure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR PathTimePoint::PathTimePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.s_)*/0} {}
struct PathTimePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathTimePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathTimePointDefaultTypeInternal() {}
  union {
    PathTimePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathTimePointDefaultTypeInternal _PathTimePoint_default_instance_;
PROTOBUF_CONSTEXPR SamplePoint::SamplePoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_time_point_)*/nullptr
  , /*decltype(_impl_.ref_v_)*/0} {}
struct SamplePointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SamplePointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SamplePointDefaultTypeInternal() {}
  union {
    SamplePoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SamplePointDefaultTypeInternal _SamplePoint_default_instance_;
PROTOBUF_CONSTEXPR PathTimeObstacle::PathTimeObstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bottom_left_)*/nullptr
  , /*decltype(_impl_.upper_left_)*/nullptr
  , /*decltype(_impl_.upper_right_)*/nullptr
  , /*decltype(_impl_.bottom_right_)*/nullptr
  , /*decltype(_impl_.time_lower_)*/0
  , /*decltype(_impl_.time_upper_)*/0
  , /*decltype(_impl_.path_lower_)*/0
  , /*decltype(_impl_.path_upper_)*/0} {}
struct PathTimeObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathTimeObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathTimeObstacleDefaultTypeInternal() {}
  union {
    PathTimeObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathTimeObstacleDefaultTypeInternal _PathTimeObstacle_default_instance_;
PROTOBUF_CONSTEXPR StopPoint::StopPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct StopPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPointDefaultTypeInternal() {}
  union {
    StopPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPointDefaultTypeInternal _StopPoint_default_instance_;
PROTOBUF_CONSTEXPR PlanningTarget::PlanningTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_point_)*/nullptr
  , /*decltype(_impl_.cruise_speed_)*/0} {}
struct PlanningTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningTargetDefaultTypeInternal() {}
  union {
    PlanningTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimePoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimePoint, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimePoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimePoint, _impl_.obstacle_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SamplePoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SamplePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SamplePoint, _impl_.path_time_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SamplePoint, _impl_.ref_v_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.obstacle_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.bottom_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.upper_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.upper_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.bottom_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.time_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.time_upper_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.path_lower_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PathTimeObstacle, _impl_.path_upper_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopPoint, _impl_.type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_.stop_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTarget, _impl_.cruise_speed_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::planning::PathTimePoint)},
  { 12, 20, -1, sizeof(::apollo::planning::SamplePoint)},
  { 22, 37, -1, sizeof(::apollo::planning::PathTimeObstacle)},
  { 46, 54, -1, sizeof(::apollo::planning::StopPoint)},
  { 56, 64, -1, sizeof(::apollo::planning::PlanningTarget)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_PathTimePoint_default_instance_._instance,
  &::apollo::planning::_SamplePoint_default_instance_._instance,
  &::apollo::planning::_PathTimeObstacle_default_instance_._instance,
  &::apollo::planning::_StopPoint_default_instance_._instance,
  &::apollo::planning::_PlanningTarget_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.modules/planning/proto/lattice_structu"
  "re.proto\022\017apollo.planning\":\n\rPathTimePoi"
  "nt\022\t\n\001t\030\001 \001(\001\022\t\n\001s\030\002 \001(\001\022\023\n\013obstacle_id\030"
  "\004 \001(\t\"U\n\013SamplePoint\0227\n\017path_time_point\030"
  "\001 \001(\0132\036.apollo.planning.PathTimePoint\022\r\n"
  "\005ref_v\030\002 \001(\001\"\313\002\n\020PathTimeObstacle\022\023\n\013obs"
  "tacle_id\030\001 \001(\t\0223\n\013bottom_left\030\002 \001(\0132\036.ap"
  "ollo.planning.PathTimePoint\0222\n\nupper_lef"
  "t\030\003 \001(\0132\036.apollo.planning.PathTimePoint\022"
  "3\n\013upper_right\030\004 \001(\0132\036.apollo.planning.P"
  "athTimePoint\0224\n\014bottom_right\030\005 \001(\0132\036.apo"
  "llo.planning.PathTimePoint\022\022\n\ntime_lower"
  "\030\006 \001(\001\022\022\n\ntime_upper\030\007 \001(\001\022\022\n\npath_lower"
  "\030\010 \001(\001\022\022\n\npath_upper\030\t \001(\001\"g\n\tStopPoint\022"
  "\t\n\001s\030\001 \002(\001\0223\n\004type\030\002 \002(\0162\037.apollo.planni"
  "ng.StopPoint.Type:\004HARD\"\032\n\004Type\022\010\n\004HARD\020"
  "\000\022\010\n\004SOFT\020\001\"V\n\016PlanningTarget\022.\n\nstop_po"
  "int\030\001 \001(\0132\032.apollo.planning.StopPoint\022\024\n"
  "\014cruise_speed\030\002 \001(\001"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto = {
    false, false, 739, descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
    "modules/planning/proto/lattice_structure.proto",
    &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopPoint_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0];
}
bool StopPoint_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StopPoint_Type StopPoint::HARD;
constexpr StopPoint_Type StopPoint::SOFT;
constexpr StopPoint_Type StopPoint::Type_MIN;
constexpr StopPoint_Type StopPoint::Type_MAX;
constexpr int StopPoint::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PathTimePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PathTimePoint>()._impl_._has_bits_);
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathTimePoint::PathTimePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathTimePoint)
}
PathTimePoint::PathTimePoint(const PathTimePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obstacle_id()) {
    _impl_.obstacle_id_.Set(from._internal_obstacle_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.t_, &from._impl_.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.s_) -
    reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathTimePoint)
}

inline void PathTimePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.s_){0}
  };
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathTimePoint::~PathTimePoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathTimePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathTimePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_id_.Destroy();
}

void PathTimePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathTimePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathTimePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.obstacle_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.s_) -
        reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathTimePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string obstacle_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.PathTimePoint.obstacle_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathTimePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathTimePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double t = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  // optional string obstacle_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimePoint.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_obstacle_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathTimePoint)
  return target;
}

size_t PathTimePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathTimePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string obstacle_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional double t = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double s = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathTimePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathTimePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathTimePoint::GetClassData() const { return &_class_data_; }

void PathTimePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathTimePoint *>(to)->MergeFrom(
      static_cast<const PathTimePoint &>(from));
}


void PathTimePoint::MergeFrom(const PathTimePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathTimePoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obstacle_id(from._internal_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.s_ = from._impl_.s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathTimePoint::CopyFrom(const PathTimePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathTimePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTimePoint::IsInitialized() const {
  return true;
}

void PathTimePoint::InternalSwap(PathTimePoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obstacle_id_, lhs_arena,
      &other->_impl_.obstacle_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathTimePoint, _impl_.s_)
      + sizeof(PathTimePoint::_impl_.s_)
      - PROTOBUF_FIELD_OFFSET(PathTimePoint, _impl_.t_)>(
          reinterpret_cast<char*>(&_impl_.t_),
          reinterpret_cast<char*>(&other->_impl_.t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathTimePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[0]);
}

// ===================================================================

class SamplePoint::_Internal {
 public:
  using HasBits = decltype(std::declval<SamplePoint>()._impl_._has_bits_);
  static const ::apollo::planning::PathTimePoint& path_time_point(const SamplePoint* msg);
  static void set_has_path_time_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ref_v(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::PathTimePoint&
SamplePoint::_Internal::path_time_point(const SamplePoint* msg) {
  return *msg->_impl_.path_time_point_;
}
SamplePoint::SamplePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SamplePoint)
}
SamplePoint::SamplePoint(const SamplePoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_time_point_){nullptr}
    , decltype(_impl_.ref_v_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_time_point()) {
    _impl_.path_time_point_ = new ::apollo::planning::PathTimePoint(*from._impl_.path_time_point_);
  }
  _impl_.ref_v_ = from._impl_.ref_v_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SamplePoint)
}

inline void SamplePoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_time_point_){nullptr}
    , decltype(_impl_.ref_v_){0}
  };
}

SamplePoint::~SamplePoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.SamplePoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SamplePoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_time_point_;
}

void SamplePoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SamplePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SamplePoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.path_time_point_ != nullptr);
    _impl_.path_time_point_->Clear();
  }
  _impl_.ref_v_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SamplePoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.PathTimePoint path_time_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_time_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double ref_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ref_v(&has_bits);
          _impl_.ref_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SamplePoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SamplePoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PathTimePoint path_time_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_time_point(this),
        _Internal::path_time_point(this).GetCachedSize(), target, stream);
  }

  // optional double ref_v = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SamplePoint)
  return target;
}

size_t SamplePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SamplePoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.PathTimePoint path_time_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_time_point_);
    }

    // optional double ref_v = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SamplePoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SamplePoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SamplePoint::GetClassData() const { return &_class_data_; }

void SamplePoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SamplePoint *>(to)->MergeFrom(
      static_cast<const SamplePoint &>(from));
}


void SamplePoint::MergeFrom(const SamplePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SamplePoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_time_point()->::apollo::planning::PathTimePoint::MergeFrom(from._internal_path_time_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ref_v_ = from._impl_.ref_v_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SamplePoint::CopyFrom(const SamplePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SamplePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplePoint::IsInitialized() const {
  return true;
}

void SamplePoint::InternalSwap(SamplePoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SamplePoint, _impl_.ref_v_)
      + sizeof(SamplePoint::_impl_.ref_v_)
      - PROTOBUF_FIELD_OFFSET(SamplePoint, _impl_.path_time_point_)>(
          reinterpret_cast<char*>(&_impl_.path_time_point_),
          reinterpret_cast<char*>(&other->_impl_.path_time_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplePoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[1]);
}

// ===================================================================

class PathTimeObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<PathTimeObstacle>()._impl_._has_bits_);
  static void set_has_obstacle_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PathTimePoint& bottom_left(const PathTimeObstacle* msg);
  static void set_has_bottom_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::PathTimePoint& upper_left(const PathTimeObstacle* msg);
  static void set_has_upper_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::PathTimePoint& upper_right(const PathTimeObstacle* msg);
  static void set_has_upper_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::PathTimePoint& bottom_right(const PathTimeObstacle* msg);
  static void set_has_bottom_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_lower(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_path_upper(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::planning::PathTimePoint&
PathTimeObstacle::_Internal::bottom_left(const PathTimeObstacle* msg) {
  return *msg->_impl_.bottom_left_;
}
const ::apollo::planning::PathTimePoint&
PathTimeObstacle::_Internal::upper_left(const PathTimeObstacle* msg) {
  return *msg->_impl_.upper_left_;
}
const ::apollo::planning::PathTimePoint&
PathTimeObstacle::_Internal::upper_right(const PathTimeObstacle* msg) {
  return *msg->_impl_.upper_right_;
}
const ::apollo::planning::PathTimePoint&
PathTimeObstacle::_Internal::bottom_right(const PathTimeObstacle* msg) {
  return *msg->_impl_.bottom_right_;
}
PathTimeObstacle::PathTimeObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PathTimeObstacle)
}
PathTimeObstacle::PathTimeObstacle(const PathTimeObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.bottom_left_){nullptr}
    , decltype(_impl_.upper_left_){nullptr}
    , decltype(_impl_.upper_right_){nullptr}
    , decltype(_impl_.bottom_right_){nullptr}
    , decltype(_impl_.time_lower_){}
    , decltype(_impl_.time_upper_){}
    , decltype(_impl_.path_lower_){}
    , decltype(_impl_.path_upper_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_obstacle_id()) {
    _impl_.obstacle_id_.Set(from._internal_obstacle_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_bottom_left()) {
    _impl_.bottom_left_ = new ::apollo::planning::PathTimePoint(*from._impl_.bottom_left_);
  }
  if (from._internal_has_upper_left()) {
    _impl_.upper_left_ = new ::apollo::planning::PathTimePoint(*from._impl_.upper_left_);
  }
  if (from._internal_has_upper_right()) {
    _impl_.upper_right_ = new ::apollo::planning::PathTimePoint(*from._impl_.upper_right_);
  }
  if (from._internal_has_bottom_right()) {
    _impl_.bottom_right_ = new ::apollo::planning::PathTimePoint(*from._impl_.bottom_right_);
  }
  ::memcpy(&_impl_.time_lower_, &from._impl_.time_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.path_upper_) -
    reinterpret_cast<char*>(&_impl_.time_lower_)) + sizeof(_impl_.path_upper_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PathTimeObstacle)
}

inline void PathTimeObstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_id_){}
    , decltype(_impl_.bottom_left_){nullptr}
    , decltype(_impl_.upper_left_){nullptr}
    , decltype(_impl_.upper_right_){nullptr}
    , decltype(_impl_.bottom_right_){nullptr}
    , decltype(_impl_.time_lower_){0}
    , decltype(_impl_.time_upper_){0}
    , decltype(_impl_.path_lower_){0}
    , decltype(_impl_.path_upper_){0}
  };
  _impl_.obstacle_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathTimeObstacle::~PathTimeObstacle() {
  // @@protoc_insertion_point(destructor:apollo.planning.PathTimeObstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathTimeObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bottom_left_;
  if (this != internal_default_instance()) delete _impl_.upper_left_;
  if (this != internal_default_instance()) delete _impl_.upper_right_;
  if (this != internal_default_instance()) delete _impl_.bottom_right_;
}

void PathTimeObstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathTimeObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PathTimeObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.obstacle_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bottom_left_ != nullptr);
      _impl_.bottom_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.upper_left_ != nullptr);
      _impl_.upper_left_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.upper_right_ != nullptr);
      _impl_.upper_right_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.bottom_right_ != nullptr);
      _impl_.bottom_right_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.time_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.path_lower_) -
        reinterpret_cast<char*>(&_impl_.time_lower_)) + sizeof(_impl_.path_lower_));
  }
  _impl_.path_upper_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathTimeObstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string obstacle_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obstacle_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.PathTimeObstacle.obstacle_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PathTimePoint bottom_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PathTimePoint upper_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PathTimePoint upper_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PathTimePoint bottom_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double time_lower = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_time_lower(&has_bits);
          _impl_.time_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_upper = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_time_upper(&has_bits);
          _impl_.time_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_lower = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_path_lower(&has_bits);
          _impl_.path_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_upper = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_path_upper(&has_bits);
          _impl_.path_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathTimeObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PathTimeObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string obstacle_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_obstacle_id().data(), static_cast<int>(this->_internal_obstacle_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.PathTimeObstacle.obstacle_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_obstacle_id(), target);
  }

  // optional .apollo.planning.PathTimePoint bottom_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bottom_left(this),
        _Internal::bottom_left(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PathTimePoint upper_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::upper_left(this),
        _Internal::upper_left(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PathTimePoint upper_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::upper_right(this),
        _Internal::upper_right(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PathTimePoint bottom_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::bottom_right(this),
        _Internal::bottom_right(this).GetCachedSize(), target, stream);
  }

  // optional double time_lower = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_time_lower(), target);
  }

  // optional double time_upper = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_time_upper(), target);
  }

  // optional double path_lower = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_path_lower(), target);
  }

  // optional double path_upper = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_path_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PathTimeObstacle)
  return target;
}

size_t PathTimeObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PathTimeObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string obstacle_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_obstacle_id());
    }

    // optional .apollo.planning.PathTimePoint bottom_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottom_left_);
    }

    // optional .apollo.planning.PathTimePoint upper_left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upper_left_);
    }

    // optional .apollo.planning.PathTimePoint upper_right = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upper_right_);
    }

    // optional .apollo.planning.PathTimePoint bottom_right = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottom_right_);
    }

    // optional double time_lower = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double time_upper = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double path_lower = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double path_upper = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathTimeObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathTimeObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathTimeObstacle::GetClassData() const { return &_class_data_; }

void PathTimeObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathTimeObstacle *>(to)->MergeFrom(
      static_cast<const PathTimeObstacle &>(from));
}


void PathTimeObstacle::MergeFrom(const PathTimeObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PathTimeObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_obstacle_id(from._internal_obstacle_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bottom_left()->::apollo::planning::PathTimePoint::MergeFrom(from._internal_bottom_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_upper_left()->::apollo::planning::PathTimePoint::MergeFrom(from._internal_upper_left());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_upper_right()->::apollo::planning::PathTimePoint::MergeFrom(from._internal_upper_right());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_bottom_right()->::apollo::planning::PathTimePoint::MergeFrom(from._internal_bottom_right());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.time_lower_ = from._impl_.time_lower_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.time_upper_ = from._impl_.time_upper_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.path_lower_ = from._impl_.path_lower_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_path_upper(from._internal_path_upper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathTimeObstacle::CopyFrom(const PathTimeObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PathTimeObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTimeObstacle::IsInitialized() const {
  return true;
}

void PathTimeObstacle::InternalSwap(PathTimeObstacle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obstacle_id_, lhs_arena,
      &other->_impl_.obstacle_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathTimeObstacle, _impl_.path_upper_)
      + sizeof(PathTimeObstacle::_impl_.path_upper_)
      - PROTOBUF_FIELD_OFFSET(PathTimeObstacle, _impl_.bottom_left_)>(
          reinterpret_cast<char*>(&_impl_.bottom_left_),
          reinterpret_cast<char*>(&other->_impl_.bottom_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathTimeObstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[2]);
}

// ===================================================================

class StopPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<StopPoint>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StopPoint::StopPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopPoint)
}
StopPoint::StopPoint(const StopPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopPoint)
}

inline void StopPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.type_){0}
  };
}

StopPoint::~StopPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::StopPoint_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::planning::StopPoint_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopPoint)
  return target;
}

size_t StopPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:apollo.planning.StopPoint)
  size_t total_size = 0;

  if (_internal_has_s()) {
    // required double s = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_type()) {
    // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t StopPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopPoint)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double s = 1;
    total_size += 1 + 8;

    // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPoint::GetClassData() const { return &_class_data_; }

void StopPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopPoint *>(to)->MergeFrom(
      static_cast<const StopPoint &>(from));
}


void StopPoint::MergeFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPoint::CopyFrom(const StopPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StopPoint::InternalSwap(StopPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopPoint, _impl_.type_)
      + sizeof(StopPoint::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(StopPoint, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[3]);
}

// ===================================================================

class PlanningTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningTarget>()._impl_._has_bits_);
  static const ::apollo::planning::StopPoint& stop_point(const PlanningTarget* msg);
  static void set_has_stop_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::StopPoint&
PlanningTarget::_Internal::stop_point(const PlanningTarget* msg) {
  return *msg->_impl_.stop_point_;
}
PlanningTarget::PlanningTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningTarget)
}
PlanningTarget::PlanningTarget(const PlanningTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.cruise_speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stop_point()) {
    _impl_.stop_point_ = new ::apollo::planning::StopPoint(*from._impl_.stop_point_);
  }
  _impl_.cruise_speed_ = from._impl_.cruise_speed_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTarget)
}

inline void PlanningTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_point_){nullptr}
    , decltype(_impl_.cruise_speed_){0}
  };
}

PlanningTarget::~PlanningTarget() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stop_point_;
}

void PlanningTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stop_point_ != nullptr);
    _impl_.stop_point_->Clear();
  }
  _impl_.cruise_speed_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.StopPoint stop_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cruise_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_cruise_speed(&has_bits);
          _impl_.cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.StopPoint stop_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stop_point(this),
        _Internal::stop_point(this).GetCachedSize(), target, stream);
  }

  // optional double cruise_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cruise_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTarget)
  return target;
}

size_t PlanningTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.StopPoint stop_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_point_);
    }

    // optional double cruise_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningTarget::GetClassData() const { return &_class_data_; }

void PlanningTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningTarget *>(to)->MergeFrom(
      static_cast<const PlanningTarget &>(from));
}


void PlanningTarget::MergeFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_stop_point()->::apollo::planning::StopPoint::MergeFrom(from._internal_stop_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cruise_speed_ = from._impl_.cruise_speed_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningTarget::CopyFrom(const PlanningTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTarget::IsInitialized() const {
  if (_internal_has_stop_point()) {
    if (!_impl_.stop_point_->IsInitialized()) return false;
  }
  return true;
}

void PlanningTarget::InternalSwap(PlanningTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningTarget, _impl_.cruise_speed_)
      + sizeof(PlanningTarget::_impl_.cruise_speed_)
      - PROTOBUF_FIELD_OFFSET(PlanningTarget, _impl_.stop_point_)>(
          reinterpret_cast<char*>(&_impl_.stop_point_),
          reinterpret_cast<char*>(&other->_impl_.stop_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::PathTimePoint*
Arena::CreateMaybeMessage< ::apollo::planning::PathTimePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathTimePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SamplePoint*
Arena::CreateMaybeMessage< ::apollo::planning::SamplePoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SamplePoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PathTimeObstacle*
Arena::CreateMaybeMessage< ::apollo::planning::PathTimeObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PathTimeObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopPoint*
Arena::CreateMaybeMessage< ::apollo::planning::StopPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningTarget*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
