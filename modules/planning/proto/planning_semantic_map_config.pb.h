// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_semantic_map_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto;
namespace apollo {
namespace planning {
class PlanningSemanticMapConfig;
struct PlanningSemanticMapConfigDefaultTypeInternal;
extern PlanningSemanticMapConfigDefaultTypeInternal _PlanningSemanticMapConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::PlanningSemanticMapConfig* Arena::CreateMaybeMessage<::apollo::planning::PlanningSemanticMapConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class PlanningSemanticMapConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningSemanticMapConfig) */ {
 public:
  inline PlanningSemanticMapConfig() : PlanningSemanticMapConfig(nullptr) {}
  ~PlanningSemanticMapConfig() override;
  explicit PROTOBUF_CONSTEXPR PlanningSemanticMapConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningSemanticMapConfig(const PlanningSemanticMapConfig& from);
  PlanningSemanticMapConfig(PlanningSemanticMapConfig&& from) noexcept
    : PlanningSemanticMapConfig() {
    *this = ::std::move(from);
  }

  inline PlanningSemanticMapConfig& operator=(const PlanningSemanticMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningSemanticMapConfig& operator=(PlanningSemanticMapConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningSemanticMapConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanningSemanticMapConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningSemanticMapConfig*>(
               &_PlanningSemanticMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanningSemanticMapConfig& a, PlanningSemanticMapConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningSemanticMapConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningSemanticMapConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningSemanticMapConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningSemanticMapConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningSemanticMapConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningSemanticMapConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningSemanticMapConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningSemanticMapConfig";
  }
  protected:
  explicit PlanningSemanticMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionFieldNumber = 1,
    kHeightFieldNumber = 100,
    kWidthFieldNumber = 101,
    kEgoIdxXFieldNumber = 102,
    kEgoIdxYFieldNumber = 103,
    kMaxRandDeltaPhiFieldNumber = 104,
    kMaxEgoFutureHorizonFieldNumber = 105,
    kMaxEgoPastHorizonFieldNumber = 106,
    kMaxObsFutureHorizonFieldNumber = 107,
    kMaxObsPastHorizonFieldNumber = 108,
    kCityDrivingMaxSpeedFieldNumber = 201,
    kBaseMapPaddingFieldNumber = 200,
  };
  // optional double resolution = 1;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // optional int32 height = 100;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 width = 101;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 ego_idx_x = 102;
  bool has_ego_idx_x() const;
  private:
  bool _internal_has_ego_idx_x() const;
  public:
  void clear_ego_idx_x();
  int32_t ego_idx_x() const;
  void set_ego_idx_x(int32_t value);
  private:
  int32_t _internal_ego_idx_x() const;
  void _internal_set_ego_idx_x(int32_t value);
  public:

  // optional int32 ego_idx_y = 103;
  bool has_ego_idx_y() const;
  private:
  bool _internal_has_ego_idx_y() const;
  public:
  void clear_ego_idx_y();
  int32_t ego_idx_y() const;
  void set_ego_idx_y(int32_t value);
  private:
  int32_t _internal_ego_idx_y() const;
  void _internal_set_ego_idx_y(int32_t value);
  public:

  // optional double max_rand_delta_phi = 104;
  bool has_max_rand_delta_phi() const;
  private:
  bool _internal_has_max_rand_delta_phi() const;
  public:
  void clear_max_rand_delta_phi();
  double max_rand_delta_phi() const;
  void set_max_rand_delta_phi(double value);
  private:
  double _internal_max_rand_delta_phi() const;
  void _internal_set_max_rand_delta_phi(double value);
  public:

  // optional double max_ego_future_horizon = 105;
  bool has_max_ego_future_horizon() const;
  private:
  bool _internal_has_max_ego_future_horizon() const;
  public:
  void clear_max_ego_future_horizon();
  double max_ego_future_horizon() const;
  void set_max_ego_future_horizon(double value);
  private:
  double _internal_max_ego_future_horizon() const;
  void _internal_set_max_ego_future_horizon(double value);
  public:

  // optional double max_ego_past_horizon = 106;
  bool has_max_ego_past_horizon() const;
  private:
  bool _internal_has_max_ego_past_horizon() const;
  public:
  void clear_max_ego_past_horizon();
  double max_ego_past_horizon() const;
  void set_max_ego_past_horizon(double value);
  private:
  double _internal_max_ego_past_horizon() const;
  void _internal_set_max_ego_past_horizon(double value);
  public:

  // optional double max_obs_future_horizon = 107;
  bool has_max_obs_future_horizon() const;
  private:
  bool _internal_has_max_obs_future_horizon() const;
  public:
  void clear_max_obs_future_horizon();
  double max_obs_future_horizon() const;
  void set_max_obs_future_horizon(double value);
  private:
  double _internal_max_obs_future_horizon() const;
  void _internal_set_max_obs_future_horizon(double value);
  public:

  // optional double max_obs_past_horizon = 108;
  bool has_max_obs_past_horizon() const;
  private:
  bool _internal_has_max_obs_past_horizon() const;
  public:
  void clear_max_obs_past_horizon();
  double max_obs_past_horizon() const;
  void set_max_obs_past_horizon(double value);
  private:
  double _internal_max_obs_past_horizon() const;
  void _internal_set_max_obs_past_horizon(double value);
  public:

  // optional double city_driving_max_speed = 201;
  bool has_city_driving_max_speed() const;
  private:
  bool _internal_has_city_driving_max_speed() const;
  public:
  void clear_city_driving_max_speed();
  double city_driving_max_speed() const;
  void set_city_driving_max_speed(double value);
  private:
  double _internal_city_driving_max_speed() const;
  void _internal_set_city_driving_max_speed(double value);
  public:

  // optional int32 base_map_padding = 200;
  bool has_base_map_padding() const;
  private:
  bool _internal_has_base_map_padding() const;
  public:
  void clear_base_map_padding();
  int32_t base_map_padding() const;
  void set_base_map_padding(int32_t value);
  private:
  int32_t _internal_base_map_padding() const;
  void _internal_set_base_map_padding(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningSemanticMapConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double resolution_;
    int32_t height_;
    int32_t width_;
    int32_t ego_idx_x_;
    int32_t ego_idx_y_;
    double max_rand_delta_phi_;
    double max_ego_future_horizon_;
    double max_ego_past_horizon_;
    double max_obs_future_horizon_;
    double max_obs_past_horizon_;
    double city_driving_max_speed_;
    int32_t base_map_padding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanningSemanticMapConfig

// optional double resolution = 1;
inline bool PlanningSemanticMapConfig::_internal_has_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_resolution() const {
  return _internal_has_resolution();
}
inline void PlanningSemanticMapConfig::clear_resolution() {
  _impl_.resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PlanningSemanticMapConfig::_internal_resolution() const {
  return _impl_.resolution_;
}
inline double PlanningSemanticMapConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.resolution)
  return _internal_resolution();
}
inline void PlanningSemanticMapConfig::_internal_set_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.resolution_ = value;
}
inline void PlanningSemanticMapConfig::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.resolution)
}

// optional int32 height = 100;
inline bool PlanningSemanticMapConfig::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_height() const {
  return _internal_has_height();
}
inline void PlanningSemanticMapConfig::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t PlanningSemanticMapConfig::_internal_height() const {
  return _impl_.height_;
}
inline int32_t PlanningSemanticMapConfig::height() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.height)
  return _internal_height();
}
inline void PlanningSemanticMapConfig::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.height_ = value;
}
inline void PlanningSemanticMapConfig::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.height)
}

// optional int32 width = 101;
inline bool PlanningSemanticMapConfig::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_width() const {
  return _internal_has_width();
}
inline void PlanningSemanticMapConfig::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PlanningSemanticMapConfig::_internal_width() const {
  return _impl_.width_;
}
inline int32_t PlanningSemanticMapConfig::width() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.width)
  return _internal_width();
}
inline void PlanningSemanticMapConfig::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void PlanningSemanticMapConfig::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.width)
}

// optional int32 ego_idx_x = 102;
inline bool PlanningSemanticMapConfig::_internal_has_ego_idx_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_ego_idx_x() const {
  return _internal_has_ego_idx_x();
}
inline void PlanningSemanticMapConfig::clear_ego_idx_x() {
  _impl_.ego_idx_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t PlanningSemanticMapConfig::_internal_ego_idx_x() const {
  return _impl_.ego_idx_x_;
}
inline int32_t PlanningSemanticMapConfig::ego_idx_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.ego_idx_x)
  return _internal_ego_idx_x();
}
inline void PlanningSemanticMapConfig::_internal_set_ego_idx_x(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ego_idx_x_ = value;
}
inline void PlanningSemanticMapConfig::set_ego_idx_x(int32_t value) {
  _internal_set_ego_idx_x(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.ego_idx_x)
}

// optional int32 ego_idx_y = 103;
inline bool PlanningSemanticMapConfig::_internal_has_ego_idx_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_ego_idx_y() const {
  return _internal_has_ego_idx_y();
}
inline void PlanningSemanticMapConfig::clear_ego_idx_y() {
  _impl_.ego_idx_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t PlanningSemanticMapConfig::_internal_ego_idx_y() const {
  return _impl_.ego_idx_y_;
}
inline int32_t PlanningSemanticMapConfig::ego_idx_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.ego_idx_y)
  return _internal_ego_idx_y();
}
inline void PlanningSemanticMapConfig::_internal_set_ego_idx_y(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ego_idx_y_ = value;
}
inline void PlanningSemanticMapConfig::set_ego_idx_y(int32_t value) {
  _internal_set_ego_idx_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.ego_idx_y)
}

// optional double max_rand_delta_phi = 104;
inline bool PlanningSemanticMapConfig::_internal_has_max_rand_delta_phi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_max_rand_delta_phi() const {
  return _internal_has_max_rand_delta_phi();
}
inline void PlanningSemanticMapConfig::clear_max_rand_delta_phi() {
  _impl_.max_rand_delta_phi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PlanningSemanticMapConfig::_internal_max_rand_delta_phi() const {
  return _impl_.max_rand_delta_phi_;
}
inline double PlanningSemanticMapConfig::max_rand_delta_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_rand_delta_phi)
  return _internal_max_rand_delta_phi();
}
inline void PlanningSemanticMapConfig::_internal_set_max_rand_delta_phi(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_rand_delta_phi_ = value;
}
inline void PlanningSemanticMapConfig::set_max_rand_delta_phi(double value) {
  _internal_set_max_rand_delta_phi(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_rand_delta_phi)
}

// optional double max_ego_future_horizon = 105;
inline bool PlanningSemanticMapConfig::_internal_has_max_ego_future_horizon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_max_ego_future_horizon() const {
  return _internal_has_max_ego_future_horizon();
}
inline void PlanningSemanticMapConfig::clear_max_ego_future_horizon() {
  _impl_.max_ego_future_horizon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PlanningSemanticMapConfig::_internal_max_ego_future_horizon() const {
  return _impl_.max_ego_future_horizon_;
}
inline double PlanningSemanticMapConfig::max_ego_future_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_ego_future_horizon)
  return _internal_max_ego_future_horizon();
}
inline void PlanningSemanticMapConfig::_internal_set_max_ego_future_horizon(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_ego_future_horizon_ = value;
}
inline void PlanningSemanticMapConfig::set_max_ego_future_horizon(double value) {
  _internal_set_max_ego_future_horizon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_ego_future_horizon)
}

// optional double max_ego_past_horizon = 106;
inline bool PlanningSemanticMapConfig::_internal_has_max_ego_past_horizon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_max_ego_past_horizon() const {
  return _internal_has_max_ego_past_horizon();
}
inline void PlanningSemanticMapConfig::clear_max_ego_past_horizon() {
  _impl_.max_ego_past_horizon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PlanningSemanticMapConfig::_internal_max_ego_past_horizon() const {
  return _impl_.max_ego_past_horizon_;
}
inline double PlanningSemanticMapConfig::max_ego_past_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_ego_past_horizon)
  return _internal_max_ego_past_horizon();
}
inline void PlanningSemanticMapConfig::_internal_set_max_ego_past_horizon(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_ego_past_horizon_ = value;
}
inline void PlanningSemanticMapConfig::set_max_ego_past_horizon(double value) {
  _internal_set_max_ego_past_horizon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_ego_past_horizon)
}

// optional double max_obs_future_horizon = 107;
inline bool PlanningSemanticMapConfig::_internal_has_max_obs_future_horizon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_max_obs_future_horizon() const {
  return _internal_has_max_obs_future_horizon();
}
inline void PlanningSemanticMapConfig::clear_max_obs_future_horizon() {
  _impl_.max_obs_future_horizon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double PlanningSemanticMapConfig::_internal_max_obs_future_horizon() const {
  return _impl_.max_obs_future_horizon_;
}
inline double PlanningSemanticMapConfig::max_obs_future_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_obs_future_horizon)
  return _internal_max_obs_future_horizon();
}
inline void PlanningSemanticMapConfig::_internal_set_max_obs_future_horizon(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_obs_future_horizon_ = value;
}
inline void PlanningSemanticMapConfig::set_max_obs_future_horizon(double value) {
  _internal_set_max_obs_future_horizon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_obs_future_horizon)
}

// optional double max_obs_past_horizon = 108;
inline bool PlanningSemanticMapConfig::_internal_has_max_obs_past_horizon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_max_obs_past_horizon() const {
  return _internal_has_max_obs_past_horizon();
}
inline void PlanningSemanticMapConfig::clear_max_obs_past_horizon() {
  _impl_.max_obs_past_horizon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double PlanningSemanticMapConfig::_internal_max_obs_past_horizon() const {
  return _impl_.max_obs_past_horizon_;
}
inline double PlanningSemanticMapConfig::max_obs_past_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_obs_past_horizon)
  return _internal_max_obs_past_horizon();
}
inline void PlanningSemanticMapConfig::_internal_set_max_obs_past_horizon(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_obs_past_horizon_ = value;
}
inline void PlanningSemanticMapConfig::set_max_obs_past_horizon(double value) {
  _internal_set_max_obs_past_horizon(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_obs_past_horizon)
}

// optional int32 base_map_padding = 200;
inline bool PlanningSemanticMapConfig::_internal_has_base_map_padding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_base_map_padding() const {
  return _internal_has_base_map_padding();
}
inline void PlanningSemanticMapConfig::clear_base_map_padding() {
  _impl_.base_map_padding_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t PlanningSemanticMapConfig::_internal_base_map_padding() const {
  return _impl_.base_map_padding_;
}
inline int32_t PlanningSemanticMapConfig::base_map_padding() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.base_map_padding)
  return _internal_base_map_padding();
}
inline void PlanningSemanticMapConfig::_internal_set_base_map_padding(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.base_map_padding_ = value;
}
inline void PlanningSemanticMapConfig::set_base_map_padding(int32_t value) {
  _internal_set_base_map_padding(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.base_map_padding)
}

// optional double city_driving_max_speed = 201;
inline bool PlanningSemanticMapConfig::_internal_has_city_driving_max_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PlanningSemanticMapConfig::has_city_driving_max_speed() const {
  return _internal_has_city_driving_max_speed();
}
inline void PlanningSemanticMapConfig::clear_city_driving_max_speed() {
  _impl_.city_driving_max_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double PlanningSemanticMapConfig::_internal_city_driving_max_speed() const {
  return _impl_.city_driving_max_speed_;
}
inline double PlanningSemanticMapConfig::city_driving_max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.city_driving_max_speed)
  return _internal_city_driving_max_speed();
}
inline void PlanningSemanticMapConfig::_internal_set_city_driving_max_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.city_driving_max_speed_ = value;
}
inline void PlanningSemanticMapConfig::set_city_driving_max_speed(double value) {
  _internal_set_city_driving_max_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.city_driving_max_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
