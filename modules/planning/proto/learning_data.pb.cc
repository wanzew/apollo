// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/learning_data.proto

#include "modules/planning/proto/learning_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR OverlapFeature::OverlapFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.distance_)*/0} {}
struct OverlapFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OverlapFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OverlapFeatureDefaultTypeInternal() {}
  union {
    OverlapFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OverlapFeatureDefaultTypeInternal _OverlapFeature_default_instance_;
PROTOBUF_CONSTEXPR PlanningTag::PlanningTag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clear_area_)*/nullptr
  , /*decltype(_impl_.crosswalk_)*/nullptr
  , /*decltype(_impl_.pnc_junction_)*/nullptr
  , /*decltype(_impl_.signal_)*/nullptr
  , /*decltype(_impl_.stop_sign_)*/nullptr
  , /*decltype(_impl_.yield_sign_)*/nullptr
  , /*decltype(_impl_.lane_turn_)*/1} {}
struct PlanningTagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningTagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningTagDefaultTypeInternal() {}
  union {
    PlanningTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningTagDefaultTypeInternal _PlanningTag_default_instance_;
PROTOBUF_CONSTEXPR ChassisFeature::ChassisFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_timestamp_sec_)*/0
  , /*decltype(_impl_.speed_mps_)*/0
  , /*decltype(_impl_.throttle_percentage_)*/0
  , /*decltype(_impl_.brake_percentage_)*/0
  , /*decltype(_impl_.steering_percentage_)*/0
  , /*decltype(_impl_.gear_location_)*/0} {}
struct ChassisFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChassisFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChassisFeatureDefaultTypeInternal() {}
  union {
    ChassisFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChassisFeatureDefaultTypeInternal _ChassisFeature_default_instance_;
PROTOBUF_CONSTEXPR LocalizationFeature::LocalizationFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.linear_velocity_)*/nullptr
  , /*decltype(_impl_.linear_acceleration_)*/nullptr
  , /*decltype(_impl_.angular_velocity_)*/nullptr
  , /*decltype(_impl_.message_timestamp_sec_)*/0
  , /*decltype(_impl_.heading_)*/0} {}
struct LocalizationFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizationFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizationFeatureDefaultTypeInternal() {}
  union {
    LocalizationFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizationFeatureDefaultTypeInternal _LocalizationFeature_default_instance_;
PROTOBUF_CONSTEXPR CommonPathPointFeature::CommonPathPointFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.s_)*/0} {}
struct CommonPathPointFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonPathPointFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonPathPointFeatureDefaultTypeInternal() {}
  union {
    CommonPathPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonPathPointFeatureDefaultTypeInternal _CommonPathPointFeature_default_instance_;
PROTOBUF_CONSTEXPR CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_point_)*/nullptr
  , /*decltype(_impl_.gaussian_info_)*/nullptr
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.a_)*/0
  , /*decltype(_impl_.relative_time_)*/0} {}
struct CommonTrajectoryPointFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonTrajectoryPointFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonTrajectoryPointFeatureDefaultTypeInternal() {}
  union {
    CommonTrajectoryPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonTrajectoryPointFeatureDefaultTypeInternal _CommonTrajectoryPointFeature_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryPointFeature::TrajectoryPointFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0} {}
struct TrajectoryPointFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryPointFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryPointFeatureDefaultTypeInternal() {}
  union {
    TrajectoryPointFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryPointFeatureDefaultTypeInternal _TrajectoryPointFeature_default_instance_;
PROTOBUF_CONSTEXPR PerceptionObstacleFeature::PerceptionObstacleFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.polygon_point_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.theta_)*/0} {}
struct PerceptionObstacleFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerceptionObstacleFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerceptionObstacleFeatureDefaultTypeInternal() {}
  union {
    PerceptionObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerceptionObstacleFeatureDefaultTypeInternal _PerceptionObstacleFeature_default_instance_;
PROTOBUF_CONSTEXPR ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.perception_obstacle_history_)*/{}
  , /*decltype(_impl_.evaluated_trajectory_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObstacleTrajectoryFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleTrajectoryFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleTrajectoryFeatureDefaultTypeInternal() {}
  union {
    ObstacleTrajectoryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleTrajectoryFeatureDefaultTypeInternal _ObstacleTrajectoryFeature_default_instance_;
PROTOBUF_CONSTEXPR PredictionTrajectoryFeature::PredictionTrajectoryFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/{}
  , /*decltype(_impl_.probability_)*/0} {}
struct PredictionTrajectoryFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionTrajectoryFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionTrajectoryFeatureDefaultTypeInternal() {}
  union {
    PredictionTrajectoryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionTrajectoryFeatureDefaultTypeInternal _PredictionTrajectoryFeature_default_instance_;
PROTOBUF_CONSTEXPR PredictionObstacleFeature::PredictionObstacleFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trajectory_)*/{}
  , /*decltype(_impl_.intent_)*/nullptr
  , /*decltype(_impl_.priority_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0
  , /*decltype(_impl_.predicted_period_)*/0
  , /*decltype(_impl_.is_static_)*/false} {}
struct PredictionObstacleFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictionObstacleFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictionObstacleFeatureDefaultTypeInternal() {}
  union {
    PredictionObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictionObstacleFeatureDefaultTypeInternal _PredictionObstacleFeature_default_instance_;
PROTOBUF_CONSTEXPR ObstacleFeature::ObstacleFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_trajectory_)*/nullptr
  , /*decltype(_impl_.obstacle_prediction_)*/nullptr
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.height_)*/0} {}
struct ObstacleFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleFeatureDefaultTypeInternal() {}
  union {
    ObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleFeatureDefaultTypeInternal _ObstacleFeature_default_instance_;
PROTOBUF_CONSTEXPR RoutingResponseFeature::RoutingResponseFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.road_)*/{}
  , /*decltype(_impl_.measurement_)*/nullptr} {}
struct RoutingResponseFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingResponseFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingResponseFeatureDefaultTypeInternal() {}
  union {
    RoutingResponseFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingResponseFeatureDefaultTypeInternal _RoutingResponseFeature_default_instance_;
PROTOBUF_CONSTEXPR RoutingFeature::RoutingFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.local_routing_lane_id_)*/{}
  , /*decltype(_impl_.routing_response_)*/nullptr
  , /*decltype(_impl_.local_routing_)*/nullptr} {}
struct RoutingFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingFeatureDefaultTypeInternal() {}
  union {
    RoutingFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingFeatureDefaultTypeInternal _RoutingFeature_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightFeature::TrafficLightFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.blink_)*/false
  , /*decltype(_impl_.tracking_time_)*/0
  , /*decltype(_impl_.remaining_time_)*/0
  , /*decltype(_impl_.confidence_)*/1} {}
struct TrafficLightFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightFeatureDefaultTypeInternal() {}
  union {
    TrafficLightFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightFeatureDefaultTypeInternal _TrafficLightFeature_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightDetectionFeature::TrafficLightDetectionFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.traffic_light_)*/{}
  , /*decltype(_impl_.message_timestamp_sec_)*/0} {}
struct TrafficLightDetectionFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightDetectionFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightDetectionFeatureDefaultTypeInternal() {}
  union {
    TrafficLightDetectionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightDetectionFeatureDefaultTypeInternal _TrafficLightDetectionFeature_default_instance_;
PROTOBUF_CONSTEXPR ADCTrajectoryPoint::ADCTrajectoryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planning_tag_)*/nullptr
  , /*decltype(_impl_.trajectory_point_)*/nullptr
  , /*decltype(_impl_.timestamp_sec_)*/0} {}
struct ADCTrajectoryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectoryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectoryPointDefaultTypeInternal() {}
  union {
    ADCTrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectoryPointDefaultTypeInternal _ADCTrajectoryPoint_default_instance_;
PROTOBUF_CONSTEXPR LearningOutput::LearningOutput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.adc_future_trajectory_point_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LearningOutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LearningOutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LearningOutputDefaultTypeInternal() {}
  union {
    LearningOutput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LearningOutputDefaultTypeInternal _LearningOutput_default_instance_;
PROTOBUF_CONSTEXPR LearningDataFrame::LearningDataFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_)*/{}
  , /*decltype(_impl_.adc_trajectory_point_)*/{}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planning_tag_)*/nullptr
  , /*decltype(_impl_.chassis_)*/nullptr
  , /*decltype(_impl_.localization_)*/nullptr
  , /*decltype(_impl_.routing_)*/nullptr
  , /*decltype(_impl_.traffic_light_detection_)*/nullptr
  , /*decltype(_impl_.output_)*/nullptr
  , /*decltype(_impl_.message_timestamp_sec_)*/0
  , /*decltype(_impl_.frame_num_)*/0u} {}
struct LearningDataFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LearningDataFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LearningDataFrameDefaultTypeInternal() {}
  union {
    LearningDataFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LearningDataFrameDefaultTypeInternal _LearningDataFrame_default_instance_;
PROTOBUF_CONSTEXPR LearningData::LearningData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.learning_data_frame_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LearningDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LearningDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LearningDataDefaultTypeInternal() {}
  union {
    LearningData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LearningDataDefaultTypeInternal _LearningData_default_instance_;
PROTOBUF_CONSTEXPR PlanningLearningData::PlanningLearningData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.learning_data_frame_)*/nullptr} {}
struct PlanningLearningDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningLearningDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningLearningDataDefaultTypeInternal() {}
  union {
    PlanningLearningData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningLearningDataDefaultTypeInternal _PlanningLearningData_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::OverlapFeature, _impl_.distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.lane_turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.pnc_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningTag, _impl_.yield_sign_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.speed_mps_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ChassisFeature, _impl_.gear_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _impl_.angular_velocity_),
  4,
  0,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _impl_.lane_id_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_.path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_.relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _impl_.gaussian_info_),
  0,
  2,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _impl_.trajectory_point_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _impl_.polygon_point_),
  3,
  0,
  4,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _impl_.perception_obstacle_history_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _impl_.evaluated_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _impl_.trajectory_point_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.predicted_period_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.intent_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.is_static_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _impl_.trajectory_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.obstacle_trajectory_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _impl_.obstacle_prediction_),
  4,
  2,
  3,
  6,
  5,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _impl_.road_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _impl_.measurement_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _impl_.routing_response_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _impl_.local_routing_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RoutingFeature, _impl_.local_routing_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.tracking_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.blink_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _impl_.remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _impl_.message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _impl_.traffic_light_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.planning_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.trajectory_point_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningOutput, _impl_.adc_future_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.message_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.frame_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.planning_tag_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.chassis_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.localization_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.routing_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.traffic_light_detection_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.adc_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _impl_.output_),
  7,
  8,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LearningData, _impl_.learning_data_frame_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _impl_.learning_data_frame_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::planning::OverlapFeature)},
  { 10, 23, -1, sizeof(::apollo::planning::PlanningTag)},
  { 30, 42, -1, sizeof(::apollo::planning::ChassisFeature)},
  { 48, 60, -1, sizeof(::apollo::planning::LocalizationFeature)},
  { 66, 78, -1, sizeof(::apollo::planning::CommonPathPointFeature)},
  { 84, 95, -1, sizeof(::apollo::planning::CommonTrajectoryPointFeature)},
  { 100, 108, -1, sizeof(::apollo::planning::TrajectoryPointFeature)},
  { 110, 122, -1, sizeof(::apollo::planning::PerceptionObstacleFeature)},
  { 128, -1, -1, sizeof(::apollo::planning::ObstacleTrajectoryFeature)},
  { 136, 144, -1, sizeof(::apollo::planning::PredictionTrajectoryFeature)},
  { 146, 158, -1, sizeof(::apollo::planning::PredictionObstacleFeature)},
  { 164, 177, -1, sizeof(::apollo::planning::ObstacleFeature)},
  { 184, 192, -1, sizeof(::apollo::planning::RoutingResponseFeature)},
  { 194, 203, -1, sizeof(::apollo::planning::RoutingFeature)},
  { 206, 218, -1, sizeof(::apollo::planning::TrafficLightFeature)},
  { 224, 232, -1, sizeof(::apollo::planning::TrafficLightDetectionFeature)},
  { 234, 243, -1, sizeof(::apollo::planning::ADCTrajectoryPoint)},
  { 246, -1, -1, sizeof(::apollo::planning::LearningOutput)},
  { 253, 270, -1, sizeof(::apollo::planning::LearningDataFrame)},
  { 281, -1, -1, sizeof(::apollo::planning::LearningData)},
  { 288, 296, -1, sizeof(::apollo::planning::PlanningLearningData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_OverlapFeature_default_instance_._instance,
  &::apollo::planning::_PlanningTag_default_instance_._instance,
  &::apollo::planning::_ChassisFeature_default_instance_._instance,
  &::apollo::planning::_LocalizationFeature_default_instance_._instance,
  &::apollo::planning::_CommonPathPointFeature_default_instance_._instance,
  &::apollo::planning::_CommonTrajectoryPointFeature_default_instance_._instance,
  &::apollo::planning::_TrajectoryPointFeature_default_instance_._instance,
  &::apollo::planning::_PerceptionObstacleFeature_default_instance_._instance,
  &::apollo::planning::_ObstacleTrajectoryFeature_default_instance_._instance,
  &::apollo::planning::_PredictionTrajectoryFeature_default_instance_._instance,
  &::apollo::planning::_PredictionObstacleFeature_default_instance_._instance,
  &::apollo::planning::_ObstacleFeature_default_instance_._instance,
  &::apollo::planning::_RoutingResponseFeature_default_instance_._instance,
  &::apollo::planning::_RoutingFeature_default_instance_._instance,
  &::apollo::planning::_TrafficLightFeature_default_instance_._instance,
  &::apollo::planning::_TrafficLightDetectionFeature_default_instance_._instance,
  &::apollo::planning::_ADCTrajectoryPoint_default_instance_._instance,
  &::apollo::planning::_LearningOutput_default_instance_._instance,
  &::apollo::planning::_LearningDataFrame_default_instance_._instance,
  &::apollo::planning::_LearningData_default_instance_._instance,
  &::apollo::planning::_PlanningLearningData_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*modules/planning/proto/learning_data.p"
  "roto\022\017apollo.planning\032\"modules/canbus/pr"
  "oto/chassis.proto\032#modules/common/proto/"
  "geometry.proto\032!modules/common/proto/hea"
  "der.proto\032$modules/common/proto/pnc_poin"
  "t.proto\032 modules/map/proto/map_lane.prot"
  "o\0322modules/perception/proto/perception_o"
  "bstacle.proto\032&modules/prediction/proto/"
  "feature.proto\0322modules/prediction/proto/"
  "prediction_obstacle.proto\0326modules/perce"
  "ption/proto/traffic_light_detection.prot"
  "o\032#modules/routing/proto/routing.proto\"."
  "\n\016OverlapFeature\022\n\n\002id\030\001 \001(\t\022\020\n\010distance"
  "\030\002 \001(\001\"\367\002\n\013PlanningTag\022.\n\tlane_turn\030\001 \001("
  "\0162\033.apollo.hdmap.Lane.LaneTurn\0223\n\nclear_"
  "area\030\002 \001(\0132\037.apollo.planning.OverlapFeat"
  "ure\0222\n\tcrosswalk\030\003 \001(\0132\037.apollo.planning"
  ".OverlapFeature\0225\n\014pnc_junction\030\004 \001(\0132\037."
  "apollo.planning.OverlapFeature\022/\n\006signal"
  "\030\005 \001(\0132\037.apollo.planning.OverlapFeature\022"
  "2\n\tstop_sign\030\006 \001(\0132\037.apollo.planning.Ove"
  "rlapFeature\0223\n\nyield_sign\030\007 \001(\0132\037.apollo"
  ".planning.OverlapFeature\"\322\001\n\016ChassisFeat"
  "ure\022\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tsp"
  "eed_mps\030\002 \001(\002\022\033\n\023throttle_percentage\030\003 \001"
  "(\002\022\030\n\020brake_percentage\030\004 \001(\002\022\033\n\023steering"
  "_percentage\030\005 \001(\002\022:\n\rgear_location\030\006 \001(\016"
  "2#.apollo.canbus.Chassis.GearPosition\"\210\002"
  "\n\023LocalizationFeature\022\035\n\025message_timesta"
  "mp_sec\030\001 \001(\001\022)\n\010position\030\002 \001(\0132\027.apollo."
  "common.PointENU\022\017\n\007heading\030\003 \001(\001\022/\n\017line"
  "ar_velocity\030\004 \001(\0132\026.apollo.common.Point3"
  "D\0223\n\023linear_acceleration\030\005 \001(\0132\026.apollo."
  "common.Point3D\0220\n\020angular_velocity\030\006 \001(\013"
  "2\026.apollo.common.Point3D\"d\n\026CommonPathPo"
  "intFeature\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 "
  "\001(\001\022\r\n\005theta\030\004 \001(\001\022\t\n\001s\030\005 \001(\001\022\017\n\007lane_id"
  "\030\006 \001(\t\"\274\001\n\034CommonTrajectoryPointFeature\022"
  ";\n\npath_point\030\001 \001(\0132\'.apollo.planning.Co"
  "mmonPathPointFeature\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001"
  "(\001\022\025\n\rrelative_time\030\004 \001(\001\0222\n\rgaussian_in"
  "fo\030\005 \001(\0132\033.apollo.common.GaussianInfo\"x\n"
  "\026TrajectoryPointFeature\022\025\n\rtimestamp_sec"
  "\030\001 \001(\001\022G\n\020trajectory_point\030\002 \001(\0132-.apoll"
  "o.planning.CommonTrajectoryPointFeature\""
  "\362\001\n\031PerceptionObstacleFeature\022\025\n\rtimesta"
  "mp_sec\030\001 \001(\001\022(\n\010position\030\002 \001(\0132\026.apollo."
  "common.Point3D\022\r\n\005theta\030\003 \001(\001\022(\n\010velocit"
  "y\030\004 \001(\0132\026.apollo.common.Point3D\022,\n\014accel"
  "eration\030\005 \001(\0132\026.apollo.common.Point3D\022-\n"
  "\rpolygon_point\030\006 \003(\0132\026.apollo.common.Poi"
  "nt3D\"\271\001\n\031ObstacleTrajectoryFeature\022O\n\033pe"
  "rception_obstacle_history\030\001 \003(\0132*.apollo"
  ".planning.PerceptionObstacleFeature\022K\n\032e"
  "valuated_trajectory_point\030\002 \003(\0132\'.apollo"
  ".planning.TrajectoryPointFeature\"u\n\033Pred"
  "ictionTrajectoryFeature\022\023\n\013probability\030\001"
  " \001(\001\022A\n\020trajectory_point\030\002 \003(\0132\'.apollo."
  "planning.TrajectoryPointFeature\"\222\002\n\031Pred"
  "ictionObstacleFeature\022\025\n\rtimestamp_sec\030\001"
  " \001(\001\022\030\n\020predicted_period\030\002 \001(\001\0221\n\006intent"
  "\030\003 \001(\0132!.apollo.prediction.ObstacleInten"
  "t\0225\n\010priority\030\004 \001(\0132#.apollo.prediction."
  "ObstaclePriority\022\030\n\tis_static\030\005 \001(\010:\005fal"
  "se\022@\n\ntrajectory\030\006 \003(\0132,.apollo.planning"
  ".PredictionTrajectoryFeature\"\230\002\n\017Obstacl"
  "eFeature\022\n\n\002id\030\001 \001(\005\022\016\n\006length\030\002 \001(\001\022\r\n\005"
  "width\030\003 \001(\001\022\016\n\006height\030\004 \001(\001\0228\n\004type\030\005 \001("
  "\0162*.apollo.perception.PerceptionObstacle"
  ".Type\022G\n\023obstacle_trajectory\030\006 \001(\0132*.apo"
  "llo.planning.ObstacleTrajectoryFeature\022G"
  "\n\023obstacle_prediction\030\007 \001(\0132*.apollo.pla"
  "nning.PredictionObstacleFeature\"u\n\026Routi"
  "ngResponseFeature\022)\n\004road\030\001 \003(\0132\033.apollo"
  ".routing.RoadSegment\0220\n\013measurement\030\002 \001("
  "\0132\033.apollo.routing.Measurement\"\262\001\n\016Routi"
  "ngFeature\022A\n\020routing_response\030\001 \001(\0132\'.ap"
  "ollo.planning.RoutingResponseFeature\022\035\n\025"
  "local_routing_lane_id\030\002 \003(\t\022>\n\rlocal_rou"
  "ting\030\003 \001(\0132\'.apollo.planning.RoutingResp"
  "onseFeature\"\254\001\n\023TrafficLightFeature\0224\n\005c"
  "olor\030\001 \001(\0162%.apollo.perception.TrafficLi"
  "ght.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfidence\030\003 \001("
  "\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005blink\030\005 \001"
  "(\010\022\026\n\016remaining_time\030\006 \001(\001\"z\n\034TrafficLig"
  "htDetectionFeature\022\035\n\025message_timestamp_"
  "sec\030\001 \001(\001\022;\n\rtraffic_light\030\002 \003(\0132$.apoll"
  "o.planning.TrafficLightFeature\"\250\001\n\022ADCTr"
  "ajectoryPoint\022\025\n\rtimestamp_sec\030\001 \001(\001\0222\n\014"
  "planning_tag\030\002 \001(\0132\034.apollo.planning.Pla"
  "nningTag\022G\n\020trajectory_point\030\003 \001(\0132-.apo"
  "llo.planning.CommonTrajectoryPointFeatur"
  "e\"^\n\016LearningOutput\022L\n\033adc_future_trajec"
  "tory_point\030\001 \003(\0132\'.apollo.planning.Traje"
  "ctoryPointFeature\"\243\004\n\021LearningDataFrame\022"
  "\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tframe_"
  "num\030\002 \001(\r\022\020\n\010map_name\030\003 \001(\t\0222\n\014planning_"
  "tag\030\004 \001(\0132\034.apollo.planning.PlanningTag\022"
  "0\n\007chassis\030\005 \001(\0132\037.apollo.planning.Chass"
  "isFeature\022:\n\014localization\030\006 \001(\0132$.apollo"
  ".planning.LocalizationFeature\0222\n\010obstacl"
  "e\030\007 \003(\0132 .apollo.planning.ObstacleFeatur"
  "e\0220\n\007routing\030\010 \001(\0132\037.apollo.planning.Rou"
  "tingFeature\022N\n\027traffic_light_detection\030\t"
  " \001(\0132-.apollo.planning.TrafficLightDetec"
  "tionFeature\022A\n\024adc_trajectory_point\030\n \003("
  "\0132#.apollo.planning.ADCTrajectoryPoint\022/"
  "\n\006output\030\013 \001(\0132\037.apollo.planning.Learnin"
  "gOutput\"O\n\014LearningData\022\?\n\023learning_data"
  "_frame\030\001 \003(\0132\".apollo.planning.LearningD"
  "ataFrame\"~\n\024PlanningLearningData\022%\n\006head"
  "er\030\001 \001(\0132\025.apollo.common.Header\022\?\n\023learn"
  "ing_data_frame\030\002 \001(\0132\".apollo.planning.L"
  "earningDataFrame"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_deps[10] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2ffeature_2eproto,
  &::descriptor_table_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto = {
    false, false, 4536, descriptor_table_protodef_modules_2fplanning_2fproto_2flearning_5fdata_2eproto,
    "modules/planning/proto/learning_data.proto",
    &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_deps, 10, 21,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2flearning_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flearning_5fdata_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class OverlapFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<OverlapFeature>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OverlapFeature::OverlapFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.OverlapFeature)
}
OverlapFeature::OverlapFeature(const OverlapFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  _impl_.distance_ = from._impl_.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OverlapFeature)
}

inline void OverlapFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.distance_){0}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OverlapFeature::~OverlapFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.OverlapFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OverlapFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void OverlapFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OverlapFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OverlapFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  _impl_.distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OverlapFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.OverlapFeature.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OverlapFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OverlapFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.OverlapFeature.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OverlapFeature)
  return target;
}

size_t OverlapFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OverlapFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional double distance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OverlapFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OverlapFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OverlapFeature::GetClassData() const { return &_class_data_; }

void OverlapFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OverlapFeature *>(to)->MergeFrom(
      static_cast<const OverlapFeature &>(from));
}


void OverlapFeature::MergeFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.distance_ = from._impl_.distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OverlapFeature::CopyFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlapFeature::IsInitialized() const {
  return true;
}

void OverlapFeature::InternalSwap(OverlapFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.distance_, other->_impl_.distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OverlapFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[0]);
}

// ===================================================================

class PlanningTag::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningTag>()._impl_._has_bits_);
  static void set_has_lane_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning::OverlapFeature& clear_area(const PlanningTag* msg);
  static void set_has_clear_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::OverlapFeature& crosswalk(const PlanningTag* msg);
  static void set_has_crosswalk(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::OverlapFeature& pnc_junction(const PlanningTag* msg);
  static void set_has_pnc_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::OverlapFeature& signal(const PlanningTag* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::OverlapFeature& stop_sign(const PlanningTag* msg);
  static void set_has_stop_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::OverlapFeature& yield_sign(const PlanningTag* msg);
  static void set_has_yield_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::clear_area(const PlanningTag* msg) {
  return *msg->_impl_.clear_area_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::crosswalk(const PlanningTag* msg) {
  return *msg->_impl_.crosswalk_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::pnc_junction(const PlanningTag* msg) {
  return *msg->_impl_.pnc_junction_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::signal(const PlanningTag* msg) {
  return *msg->_impl_.signal_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::stop_sign(const PlanningTag* msg) {
  return *msg->_impl_.stop_sign_;
}
const ::apollo::planning::OverlapFeature&
PlanningTag::_Internal::yield_sign(const PlanningTag* msg) {
  return *msg->_impl_.yield_sign_;
}
PlanningTag::PlanningTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningTag)
}
PlanningTag::PlanningTag(const PlanningTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_area_){nullptr}
    , decltype(_impl_.crosswalk_){nullptr}
    , decltype(_impl_.pnc_junction_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.stop_sign_){nullptr}
    , decltype(_impl_.yield_sign_){nullptr}
    , decltype(_impl_.lane_turn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_clear_area()) {
    _impl_.clear_area_ = new ::apollo::planning::OverlapFeature(*from._impl_.clear_area_);
  }
  if (from._internal_has_crosswalk()) {
    _impl_.crosswalk_ = new ::apollo::planning::OverlapFeature(*from._impl_.crosswalk_);
  }
  if (from._internal_has_pnc_junction()) {
    _impl_.pnc_junction_ = new ::apollo::planning::OverlapFeature(*from._impl_.pnc_junction_);
  }
  if (from._internal_has_signal()) {
    _impl_.signal_ = new ::apollo::planning::OverlapFeature(*from._impl_.signal_);
  }
  if (from._internal_has_stop_sign()) {
    _impl_.stop_sign_ = new ::apollo::planning::OverlapFeature(*from._impl_.stop_sign_);
  }
  if (from._internal_has_yield_sign()) {
    _impl_.yield_sign_ = new ::apollo::planning::OverlapFeature(*from._impl_.yield_sign_);
  }
  _impl_.lane_turn_ = from._impl_.lane_turn_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTag)
}

inline void PlanningTag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clear_area_){nullptr}
    , decltype(_impl_.crosswalk_){nullptr}
    , decltype(_impl_.pnc_junction_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.stop_sign_){nullptr}
    , decltype(_impl_.yield_sign_){nullptr}
    , decltype(_impl_.lane_turn_){1}
  };
}

PlanningTag::~PlanningTag() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clear_area_;
  if (this != internal_default_instance()) delete _impl_.crosswalk_;
  if (this != internal_default_instance()) delete _impl_.pnc_junction_;
  if (this != internal_default_instance()) delete _impl_.signal_;
  if (this != internal_default_instance()) delete _impl_.stop_sign_;
  if (this != internal_default_instance()) delete _impl_.yield_sign_;
}

void PlanningTag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.clear_area_ != nullptr);
      _impl_.clear_area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.crosswalk_ != nullptr);
      _impl_.crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pnc_junction_ != nullptr);
      _impl_.pnc_junction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.stop_sign_ != nullptr);
      _impl_.stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.yield_sign_ != nullptr);
      _impl_.yield_sign_->Clear();
    }
    _impl_.lane_turn_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningTag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneTurn_IsValid(val))) {
            _internal_set_lane_turn(static_cast<::apollo::hdmap::Lane_LaneTurn>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature clear_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clear_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature crosswalk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature pnc_junction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pnc_junction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature stop_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.OverlapFeature yield_sign = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_lane_turn(), target);
  }

  // optional .apollo.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::clear_area(this),
        _Internal::clear_area(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::crosswalk(this),
        _Internal::crosswalk(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pnc_junction(this),
        _Internal::pnc_junction(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stop_sign(this),
        _Internal::stop_sign(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::yield_sign(this),
        _Internal::yield_sign(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTag)
  return target;
}

size_t PlanningTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.planning.OverlapFeature clear_area = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.clear_area_);
    }

    // optional .apollo.planning.OverlapFeature crosswalk = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.crosswalk_);
    }

    // optional .apollo.planning.OverlapFeature pnc_junction = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pnc_junction_);
    }

    // optional .apollo.planning.OverlapFeature signal = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_);
    }

    // optional .apollo.planning.OverlapFeature stop_sign = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_sign_);
    }

    // optional .apollo.planning.OverlapFeature yield_sign = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.yield_sign_);
    }

    // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_turn());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningTag::GetClassData() const { return &_class_data_; }

void PlanningTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningTag *>(to)->MergeFrom(
      static_cast<const PlanningTag &>(from));
}


void PlanningTag::MergeFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_clear_area()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_clear_area());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_crosswalk()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_crosswalk());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pnc_junction()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_pnc_junction());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_signal()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_stop_sign()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_stop_sign());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_yield_sign()->::apollo::planning::OverlapFeature::MergeFrom(from._internal_yield_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lane_turn_ = from._impl_.lane_turn_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningTag::CopyFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTag::IsInitialized() const {
  return true;
}

void PlanningTag::InternalSwap(PlanningTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningTag, _impl_.yield_sign_)
      + sizeof(PlanningTag::_impl_.yield_sign_)
      - PROTOBUF_FIELD_OFFSET(PlanningTag, _impl_.clear_area_)>(
          reinterpret_cast<char*>(&_impl_.clear_area_),
          reinterpret_cast<char*>(&other->_impl_.clear_area_));
  swap(_impl_.lane_turn_, other->_impl_.lane_turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningTag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[1]);
}

// ===================================================================

class ChassisFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ChassisFeature>()._impl_._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_throttle_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_brake_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ChassisFeature::ChassisFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ChassisFeature)
}
ChassisFeature::ChassisFeature(const ChassisFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_timestamp_sec_){}
    , decltype(_impl_.speed_mps_){}
    , decltype(_impl_.throttle_percentage_){}
    , decltype(_impl_.brake_percentage_){}
    , decltype(_impl_.steering_percentage_){}
    , decltype(_impl_.gear_location_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.message_timestamp_sec_, &from._impl_.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_location_) -
    reinterpret_cast<char*>(&_impl_.message_timestamp_sec_)) + sizeof(_impl_.gear_location_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChassisFeature)
}

inline void ChassisFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_timestamp_sec_){0}
    , decltype(_impl_.speed_mps_){0}
    , decltype(_impl_.throttle_percentage_){0}
    , decltype(_impl_.brake_percentage_){0}
    , decltype(_impl_.steering_percentage_){0}
    , decltype(_impl_.gear_location_){0}
  };
}

ChassisFeature::~ChassisFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChassisFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChassisFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChassisFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChassisFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChassisFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_location_) -
        reinterpret_cast<char*>(&_impl_.message_timestamp_sec_)) + sizeof(_impl_.gear_location_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChassisFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          _impl_.message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_mps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_speed_mps(&has_bits);
          _impl_.speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float throttle_percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_throttle_percentage(&has_bits);
          _impl_.throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float brake_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_brake_percentage(&has_bits);
          _impl_.brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float steering_percentage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_steering_percentage(&has_bits);
          _impl_.steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChassisFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChassisFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_speed_mps(), target);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_throttle_percentage(), target);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_brake_percentage(), target);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_steering_percentage(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gear_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChassisFeature)
  return target;
}

size_t ChassisFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChassisFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional float speed_mps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChassisFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChassisFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChassisFeature::GetClassData() const { return &_class_data_; }

void ChassisFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChassisFeature *>(to)->MergeFrom(
      static_cast<const ChassisFeature &>(from));
}


void ChassisFeature::MergeFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_timestamp_sec_ = from._impl_.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.speed_mps_ = from._impl_.speed_mps_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.throttle_percentage_ = from._impl_.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.brake_percentage_ = from._impl_.brake_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.steering_percentage_ = from._impl_.steering_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.gear_location_ = from._impl_.gear_location_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChassisFeature::CopyFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeature::IsInitialized() const {
  return true;
}

void ChassisFeature::InternalSwap(ChassisFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChassisFeature, _impl_.gear_location_)
      + sizeof(ChassisFeature::_impl_.gear_location_)
      - PROTOBUF_FIELD_OFFSET(ChassisFeature, _impl_.message_timestamp_sec_)>(
          reinterpret_cast<char*>(&_impl_.message_timestamp_sec_),
          reinterpret_cast<char*>(&other->_impl_.message_timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[2]);
}

// ===================================================================

class LocalizationFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationFeature>()._impl_._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::PointENU& position(const LocalizationFeature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::Point3D& linear_velocity(const LocalizationFeature* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& linear_acceleration(const LocalizationFeature* msg);
  static void set_has_linear_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::Point3D& angular_velocity(const LocalizationFeature* msg);
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::PointENU&
LocalizationFeature::_Internal::position(const LocalizationFeature* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::linear_velocity(const LocalizationFeature* msg) {
  return *msg->_impl_.linear_velocity_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::linear_acceleration(const LocalizationFeature* msg) {
  return *msg->_impl_.linear_acceleration_;
}
const ::apollo::common::Point3D&
LocalizationFeature::_Internal::angular_velocity(const LocalizationFeature* msg) {
  return *msg->_impl_.angular_velocity_;
}
void LocalizationFeature::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LocalizationFeature::clear_linear_velocity() {
  if (_impl_.linear_velocity_ != nullptr) _impl_.linear_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LocalizationFeature::clear_linear_acceleration() {
  if (_impl_.linear_acceleration_ != nullptr) _impl_.linear_acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void LocalizationFeature::clear_angular_velocity() {
  if (_impl_.angular_velocity_ != nullptr) _impl_.angular_velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
LocalizationFeature::LocalizationFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LocalizationFeature)
}
LocalizationFeature::LocalizationFeature(const LocalizationFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.message_timestamp_sec_){}
    , decltype(_impl_.heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::PointENU(*from._impl_.position_);
  }
  if (from._internal_has_linear_velocity()) {
    _impl_.linear_velocity_ = new ::apollo::common::Point3D(*from._impl_.linear_velocity_);
  }
  if (from._internal_has_linear_acceleration()) {
    _impl_.linear_acceleration_ = new ::apollo::common::Point3D(*from._impl_.linear_acceleration_);
  }
  if (from._internal_has_angular_velocity()) {
    _impl_.angular_velocity_ = new ::apollo::common::Point3D(*from._impl_.angular_velocity_);
  }
  ::memcpy(&_impl_.message_timestamp_sec_, &from._impl_.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heading_) -
    reinterpret_cast<char*>(&_impl_.message_timestamp_sec_)) + sizeof(_impl_.heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LocalizationFeature)
}

inline void LocalizationFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.linear_velocity_){nullptr}
    , decltype(_impl_.linear_acceleration_){nullptr}
    , decltype(_impl_.angular_velocity_){nullptr}
    , decltype(_impl_.message_timestamp_sec_){0}
    , decltype(_impl_.heading_){0}
  };
}

LocalizationFeature::~LocalizationFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.LocalizationFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalizationFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.linear_velocity_;
  if (this != internal_default_instance()) delete _impl_.linear_acceleration_;
  if (this != internal_default_instance()) delete _impl_.angular_velocity_;
}

void LocalizationFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalizationFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LocalizationFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.linear_velocity_ != nullptr);
      _impl_.linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.linear_acceleration_ != nullptr);
      _impl_.linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.angular_velocity_ != nullptr);
      _impl_.angular_velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heading_) -
        reinterpret_cast<char*>(&_impl_.message_timestamp_sec_)) + sizeof(_impl_.heading_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          _impl_.message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D linear_acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D angular_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalizationFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LocalizationFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional .apollo.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::linear_velocity(this),
        _Internal::linear_velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::linear_acceleration(this),
        _Internal::linear_acceleration(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::angular_velocity(this),
        _Internal::angular_velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LocalizationFeature)
  return target;
}

size_t LocalizationFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LocalizationFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.common.PointENU position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D linear_velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.linear_acceleration_);
    }

    // optional .apollo.common.Point3D angular_velocity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.angular_velocity_);
    }

    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizationFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalizationFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizationFeature::GetClassData() const { return &_class_data_; }

void LocalizationFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalizationFeature *>(to)->MergeFrom(
      static_cast<const LocalizationFeature &>(from));
}


void LocalizationFeature::MergeFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::PointENU::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_linear_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.message_timestamp_sec_ = from._impl_.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizationFeature::CopyFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationFeature::IsInitialized() const {
  return true;
}

void LocalizationFeature::InternalSwap(LocalizationFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationFeature, _impl_.heading_)
      + sizeof(LocalizationFeature::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(LocalizationFeature, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[3]);
}

// ===================================================================

class CommonPathPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonPathPointFeature>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lane_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CommonPathPointFeature::CommonPathPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CommonPathPointFeature)
}
CommonPathPointFeature::CommonPathPointFeature(const CommonPathPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lane_id()) {
    _impl_.lane_id_.Set(from._internal_lane_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.s_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonPathPointFeature)
}

inline void CommonPathPointFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.s_){0}
  };
  _impl_.lane_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lane_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommonPathPointFeature::~CommonPathPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonPathPointFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonPathPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.Destroy();
}

void CommonPathPointFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonPathPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonPathPointFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lane_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.s_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonPathPointFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_lane_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.CommonPathPointFeature.lane_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonPathPointFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonPathPointFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_s(), target);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lane_id().data(), static_cast<int>(this->_internal_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.CommonPathPointFeature.lane_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonPathPointFeature)
  return target;
}

size_t CommonPathPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonPathPointFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string lane_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lane_id());
    }

    // optional double x = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double s = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonPathPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonPathPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonPathPointFeature::GetClassData() const { return &_class_data_; }

void CommonPathPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonPathPointFeature *>(to)->MergeFrom(
      static_cast<const CommonPathPointFeature &>(from));
}


void CommonPathPointFeature::MergeFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonPathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lane_id(from._internal_lane_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.s_ = from._impl_.s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonPathPointFeature::CopyFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonPathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPathPointFeature::IsInitialized() const {
  return true;
}

void CommonPathPointFeature::InternalSwap(CommonPathPointFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lane_id_, lhs_arena,
      &other->_impl_.lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonPathPointFeature, _impl_.s_)
      + sizeof(CommonPathPointFeature::_impl_.s_)
      - PROTOBUF_FIELD_OFFSET(CommonPathPointFeature, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonPathPointFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[4]);
}

// ===================================================================

class CommonTrajectoryPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonTrajectoryPointFeature>()._impl_._has_bits_);
  static const ::apollo::planning::CommonPathPointFeature& path_point(const CommonTrajectoryPointFeature* msg);
  static void set_has_path_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::GaussianInfo& gaussian_info(const CommonTrajectoryPointFeature* msg);
  static void set_has_gaussian_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::CommonPathPointFeature&
CommonTrajectoryPointFeature::_Internal::path_point(const CommonTrajectoryPointFeature* msg) {
  return *msg->_impl_.path_point_;
}
const ::apollo::common::GaussianInfo&
CommonTrajectoryPointFeature::_Internal::gaussian_info(const CommonTrajectoryPointFeature* msg) {
  return *msg->_impl_.gaussian_info_;
}
void CommonTrajectoryPointFeature::clear_gaussian_info() {
  if (_impl_.gaussian_info_ != nullptr) _impl_.gaussian_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CommonTrajectoryPointFeature)
}
CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(const CommonTrajectoryPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){nullptr}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.v_){}
    , decltype(_impl_.a_){}
    , decltype(_impl_.relative_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    _impl_.path_point_ = new ::apollo::planning::CommonPathPointFeature(*from._impl_.path_point_);
  }
  if (from._internal_has_gaussian_info()) {
    _impl_.gaussian_info_ = new ::apollo::common::GaussianInfo(*from._impl_.gaussian_info_);
  }
  ::memcpy(&_impl_.v_, &from._impl_.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relative_time_) -
    reinterpret_cast<char*>(&_impl_.v_)) + sizeof(_impl_.relative_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonTrajectoryPointFeature)
}

inline void CommonTrajectoryPointFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_point_){nullptr}
    , decltype(_impl_.gaussian_info_){nullptr}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.a_){0}
    , decltype(_impl_.relative_time_){0}
  };
}

CommonTrajectoryPointFeature::~CommonTrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonTrajectoryPointFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonTrajectoryPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_point_;
  if (this != internal_default_instance()) delete _impl_.gaussian_info_;
}

void CommonTrajectoryPointFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonTrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonTrajectoryPointFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_point_ != nullptr);
      _impl_.path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gaussian_info_ != nullptr);
      _impl_.gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.relative_time_) -
        reinterpret_cast<char*>(&_impl_.v_)) + sizeof(_impl_.relative_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonTrajectoryPointFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.CommonPathPointFeature path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_v(&has_bits);
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_a(&has_bits);
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_relative_time(&has_bits);
          _impl_.relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.GaussianInfo gaussian_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_gaussian_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonTrajectoryPointFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonTrajectoryPointFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.CommonPathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_point(this),
        _Internal::path_point(this).GetCachedSize(), target, stream);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative_time(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::gaussian_info(this),
        _Internal::gaussian_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonTrajectoryPointFeature)
  return target;
}

size_t CommonTrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonTrajectoryPointFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.planning.CommonPathPointFeature path_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_point_);
    }

    // optional .apollo.common.GaussianInfo gaussian_info = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gaussian_info_);
    }

    // optional double v = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonTrajectoryPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommonTrajectoryPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonTrajectoryPointFeature::GetClassData() const { return &_class_data_; }

void CommonTrajectoryPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommonTrajectoryPointFeature *>(to)->MergeFrom(
      static_cast<const CommonTrajectoryPointFeature &>(from));
}


void CommonTrajectoryPointFeature::MergeFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonTrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_point()->::apollo::planning::CommonPathPointFeature::MergeFrom(from._internal_path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from._internal_gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.v_ = from._impl_.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.a_ = from._impl_.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.relative_time_ = from._impl_.relative_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonTrajectoryPointFeature::CopyFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonTrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTrajectoryPointFeature::IsInitialized() const {
  return true;
}

void CommonTrajectoryPointFeature::InternalSwap(CommonTrajectoryPointFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonTrajectoryPointFeature, _impl_.relative_time_)
      + sizeof(CommonTrajectoryPointFeature::_impl_.relative_time_)
      - PROTOBUF_FIELD_OFFSET(CommonTrajectoryPointFeature, _impl_.path_point_)>(
          reinterpret_cast<char*>(&_impl_.path_point_),
          reinterpret_cast<char*>(&other->_impl_.path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonTrajectoryPointFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[5]);
}

// ===================================================================

class TrajectoryPointFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointFeature>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::CommonTrajectoryPointFeature& trajectory_point(const TrajectoryPointFeature* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::CommonTrajectoryPointFeature&
TrajectoryPointFeature::_Internal::trajectory_point(const TrajectoryPointFeature* msg) {
  return *msg->_impl_.trajectory_point_;
}
TrajectoryPointFeature::TrajectoryPointFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrajectoryPointFeature)
}
TrajectoryPointFeature::TrajectoryPointFeature(const TrajectoryPointFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trajectory_point()) {
    _impl_.trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from._impl_.trajectory_point_);
  }
  _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPointFeature)
}

inline void TrajectoryPointFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
  };
}

TrajectoryPointFeature::~TrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPointFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryPointFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.trajectory_point_;
}

void TrajectoryPointFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPointFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.trajectory_point_ != nullptr);
    _impl_.trajectory_point_->Clear();
  }
  _impl_.timestamp_sec_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPointFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryPointFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPointFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trajectory_point(this),
        _Internal::trajectory_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPointFeature)
  return target;
}

size_t TrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPointFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPointFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPointFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPointFeature::GetClassData() const { return &_class_data_; }

void TrajectoryPointFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPointFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryPointFeature &>(from));
}


void TrajectoryPointFeature::MergeFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPointFeature::CopyFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointFeature::InternalSwap(TrajectoryPointFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPointFeature, _impl_.timestamp_sec_)
      + sizeof(TrajectoryPointFeature::_impl_.timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPointFeature, _impl_.trajectory_point_)>(
          reinterpret_cast<char*>(&_impl_.trajectory_point_),
          reinterpret_cast<char*>(&other->_impl_.trajectory_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[6]);
}

// ===================================================================

class PerceptionObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PerceptionObstacleFeature>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point3D& position(const PerceptionObstacleFeature* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::common::Point3D& velocity(const PerceptionObstacleFeature* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point3D& acceleration(const PerceptionObstacleFeature* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::position(const PerceptionObstacleFeature* msg) {
  return *msg->_impl_.position_;
}
const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::velocity(const PerceptionObstacleFeature* msg) {
  return *msg->_impl_.velocity_;
}
const ::apollo::common::Point3D&
PerceptionObstacleFeature::_Internal::acceleration(const PerceptionObstacleFeature* msg) {
  return *msg->_impl_.acceleration_;
}
void PerceptionObstacleFeature::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacleFeature::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacleFeature::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacleFeature::clear_polygon_point() {
  _impl_.polygon_point_.Clear();
}
PerceptionObstacleFeature::PerceptionObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PerceptionObstacleFeature)
}
PerceptionObstacleFeature::PerceptionObstacleFeature(const PerceptionObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){from._impl_.polygon_point_}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.theta_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _impl_.position_ = new ::apollo::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _impl_.velocity_ = new ::apollo::common::Point3D(*from._impl_.velocity_);
  }
  if (from._internal_has_acceleration()) {
    _impl_.acceleration_ = new ::apollo::common::Point3D(*from._impl_.acceleration_);
  }
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theta_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.theta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PerceptionObstacleFeature)
}

inline void PerceptionObstacleFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.polygon_point_){arena}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.theta_){0}
  };
}

PerceptionObstacleFeature::~PerceptionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PerceptionObstacleFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerceptionObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.polygon_point_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
}

void PerceptionObstacleFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerceptionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PerceptionObstacleFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.polygon_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theta_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.theta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerceptionObstacleFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Point3D acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D polygon_point = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerceptionObstacleFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PerceptionObstacleFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_theta(), target);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.Point3D polygon_point = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_polygon_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_polygon_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PerceptionObstacleFeature)
  return target;
}

size_t PerceptionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PerceptionObstacleFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D polygon_point = 6;
  total_size += 1UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->_impl_.polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .apollo.common.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double theta = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerceptionObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PerceptionObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerceptionObstacleFeature::GetClassData() const { return &_class_data_; }

void PerceptionObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PerceptionObstacleFeature *>(to)->MergeFrom(
      static_cast<const PerceptionObstacleFeature &>(from));
}


void PerceptionObstacleFeature::MergeFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.polygon_point_.MergeFrom(from._impl_.polygon_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::apollo::common::Point3D::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::apollo::common::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerceptionObstacleFeature::CopyFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacleFeature::IsInitialized() const {
  return true;
}

void PerceptionObstacleFeature::InternalSwap(PerceptionObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.polygon_point_.InternalSwap(&other->_impl_.polygon_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerceptionObstacleFeature, _impl_.theta_)
      + sizeof(PerceptionObstacleFeature::_impl_.theta_)
      - PROTOBUF_FIELD_OFFSET(PerceptionObstacleFeature, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerceptionObstacleFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[7]);
}

// ===================================================================

class ObstacleTrajectoryFeature::_Internal {
 public:
};

ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObstacleTrajectoryFeature)
}
ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(const ObstacleTrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.perception_obstacle_history_){from._impl_.perception_obstacle_history_}
    , decltype(_impl_.evaluated_trajectory_point_){from._impl_.evaluated_trajectory_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleTrajectoryFeature)
}

inline void ObstacleTrajectoryFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.perception_obstacle_history_){arena}
    , decltype(_impl_.evaluated_trajectory_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObstacleTrajectoryFeature::~ObstacleTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleTrajectoryFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleTrajectoryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.perception_obstacle_history_.~RepeatedPtrField();
  _impl_.evaluated_trajectory_point_.~RepeatedPtrField();
}

void ObstacleTrajectoryFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleTrajectoryFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.perception_obstacle_history_.Clear();
  _impl_.evaluated_trajectory_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleTrajectoryFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perception_obstacle_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evaluated_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleTrajectoryFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleTrajectoryFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perception_obstacle_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_perception_obstacle_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_evaluated_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_evaluated_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleTrajectoryFeature)
  return target;
}

size_t ObstacleTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleTrajectoryFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  total_size += 1UL * this->_internal_perception_obstacle_history_size();
  for (const auto& msg : this->_impl_.perception_obstacle_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  total_size += 1UL * this->_internal_evaluated_trajectory_point_size();
  for (const auto& msg : this->_impl_.evaluated_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleTrajectoryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleTrajectoryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleTrajectoryFeature::GetClassData() const { return &_class_data_; }

void ObstacleTrajectoryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleTrajectoryFeature *>(to)->MergeFrom(
      static_cast<const ObstacleTrajectoryFeature &>(from));
}


void ObstacleTrajectoryFeature::MergeFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.perception_obstacle_history_.MergeFrom(from._impl_.perception_obstacle_history_);
  _impl_.evaluated_trajectory_point_.MergeFrom(from._impl_.evaluated_trajectory_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleTrajectoryFeature::CopyFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTrajectoryFeature::IsInitialized() const {
  return true;
}

void ObstacleTrajectoryFeature::InternalSwap(ObstacleTrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.perception_obstacle_history_.InternalSwap(&other->_impl_.perception_obstacle_history_);
  _impl_.evaluated_trajectory_point_.InternalSwap(&other->_impl_.evaluated_trajectory_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleTrajectoryFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[8]);
}

// ===================================================================

class PredictionTrajectoryFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionTrajectoryFeature>()._impl_._has_bits_);
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PredictionTrajectoryFeature::PredictionTrajectoryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PredictionTrajectoryFeature)
}
PredictionTrajectoryFeature::PredictionTrajectoryFeature(const PredictionTrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){from._impl_.trajectory_point_}
    , decltype(_impl_.probability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.probability_ = from._impl_.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionTrajectoryFeature)
}

inline void PredictionTrajectoryFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_point_){arena}
    , decltype(_impl_.probability_){0}
  };
}

PredictionTrajectoryFeature::~PredictionTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionTrajectoryFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionTrajectoryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_point_.~RepeatedPtrField();
}

void PredictionTrajectoryFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionTrajectoryFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_point_.Clear();
  _impl_.probability_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionTrajectoryFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionTrajectoryFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionTrajectoryFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionTrajectoryFeature)
  return target;
}

size_t PredictionTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionTrajectoryFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->_impl_.trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double probability = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionTrajectoryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionTrajectoryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionTrajectoryFeature::GetClassData() const { return &_class_data_; }

void PredictionTrajectoryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionTrajectoryFeature *>(to)->MergeFrom(
      static_cast<const PredictionTrajectoryFeature &>(from));
}


void PredictionTrajectoryFeature::MergeFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_point_.MergeFrom(from._impl_.trajectory_point_);
  if (from._internal_has_probability()) {
    _internal_set_probability(from._internal_probability());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionTrajectoryFeature::CopyFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionTrajectoryFeature::IsInitialized() const {
  return true;
}

void PredictionTrajectoryFeature::InternalSwap(PredictionTrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  swap(_impl_.probability_, other->_impl_.probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionTrajectoryFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[9]);
}

// ===================================================================

class PredictionObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PredictionObstacleFeature>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_predicted_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::prediction::ObstacleIntent& intent(const PredictionObstacleFeature* msg);
  static void set_has_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::prediction::ObstaclePriority& priority(const PredictionObstacleFeature* msg);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_static(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::prediction::ObstacleIntent&
PredictionObstacleFeature::_Internal::intent(const PredictionObstacleFeature* msg) {
  return *msg->_impl_.intent_;
}
const ::apollo::prediction::ObstaclePriority&
PredictionObstacleFeature::_Internal::priority(const PredictionObstacleFeature* msg) {
  return *msg->_impl_.priority_;
}
void PredictionObstacleFeature::clear_intent() {
  if (_impl_.intent_ != nullptr) _impl_.intent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PredictionObstacleFeature::clear_priority() {
  if (_impl_.priority_ != nullptr) _impl_.priority_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PredictionObstacleFeature::PredictionObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PredictionObstacleFeature)
}
PredictionObstacleFeature::PredictionObstacleFeature(const PredictionObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){from._impl_.trajectory_}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.predicted_period_){}
    , decltype(_impl_.is_static_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intent()) {
    _impl_.intent_ = new ::apollo::prediction::ObstacleIntent(*from._impl_.intent_);
  }
  if (from._internal_has_priority()) {
    _impl_.priority_ = new ::apollo::prediction::ObstaclePriority(*from._impl_.priority_);
  }
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_static_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.is_static_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionObstacleFeature)
}

inline void PredictionObstacleFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trajectory_){arena}
    , decltype(_impl_.intent_){nullptr}
    , decltype(_impl_.priority_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
    , decltype(_impl_.predicted_period_){0}
    , decltype(_impl_.is_static_){false}
  };
}

PredictionObstacleFeature::~PredictionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionObstacleFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictionObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trajectory_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.intent_;
  if (this != internal_default_instance()) delete _impl_.priority_;
}

void PredictionObstacleFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionObstacleFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trajectory_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.intent_ != nullptr);
      _impl_.intent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.priority_ != nullptr);
      _impl_.priority_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_static_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.is_static_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacleFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double predicted_period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_predicted_period(&has_bits);
          _impl_.predicted_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstacleIntent intent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.prediction.ObstaclePriority priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_static = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_static(&has_bits);
          _impl_.is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionObstacleFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionObstacleFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_predicted_period(), target);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::intent(this),
        _Internal::intent(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::priority(this),
        _Internal::priority(this).GetCachedSize(), target, stream);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_static(), target);
  }

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionObstacleFeature)
  return target;
}

size_t PredictionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionObstacleFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->_impl_.trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.prediction.ObstacleIntent intent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.intent_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.priority_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacleFeature::GetClassData() const { return &_class_data_; }

void PredictionObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacleFeature *>(to)->MergeFrom(
      static_cast<const PredictionObstacleFeature &>(from));
}


void PredictionObstacleFeature::MergeFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.trajectory_.MergeFrom(from._impl_.trajectory_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from._internal_intent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.predicted_period_ = from._impl_.predicted_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.is_static_ = from._impl_.is_static_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacleFeature::CopyFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacleFeature::IsInitialized() const {
  return true;
}

void PredictionObstacleFeature::InternalSwap(PredictionObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trajectory_.InternalSwap(&other->_impl_.trajectory_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacleFeature, _impl_.is_static_)
      + sizeof(PredictionObstacleFeature::_impl_.is_static_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacleFeature, _impl_.intent_)>(
          reinterpret_cast<char*>(&_impl_.intent_),
          reinterpret_cast<char*>(&other->_impl_.intent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacleFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[10]);
}

// ===================================================================

class ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<ObstacleFeature>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::ObstacleTrajectoryFeature& obstacle_trajectory(const ObstacleFeature* msg);
  static void set_has_obstacle_trajectory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PredictionObstacleFeature& obstacle_prediction(const ObstacleFeature* msg);
  static void set_has_obstacle_prediction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::ObstacleTrajectoryFeature&
ObstacleFeature::_Internal::obstacle_trajectory(const ObstacleFeature* msg) {
  return *msg->_impl_.obstacle_trajectory_;
}
const ::apollo::planning::PredictionObstacleFeature&
ObstacleFeature::_Internal::obstacle_prediction(const ObstacleFeature* msg) {
  return *msg->_impl_.obstacle_prediction_;
}
ObstacleFeature::ObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ObstacleFeature)
}
ObstacleFeature::ObstacleFeature(const ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_trajectory_){nullptr}
    , decltype(_impl_.obstacle_prediction_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle_trajectory()) {
    _impl_.obstacle_trajectory_ = new ::apollo::planning::ObstacleTrajectoryFeature(*from._impl_.obstacle_trajectory_);
  }
  if (from._internal_has_obstacle_prediction()) {
    _impl_.obstacle_prediction_ = new ::apollo::planning::PredictionObstacleFeature(*from._impl_.obstacle_prediction_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleFeature)
}

inline void ObstacleFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_trajectory_){nullptr}
    , decltype(_impl_.obstacle_prediction_){nullptr}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.height_){0}
  };
}

ObstacleFeature::~ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.obstacle_trajectory_;
  if (this != internal_default_instance()) delete _impl_.obstacle_prediction_;
}

void ObstacleFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.obstacle_trajectory_ != nullptr);
      _impl_.obstacle_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.obstacle_prediction_ != nullptr);
      _impl_.obstacle_prediction_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.PerceptionObstacle.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::PerceptionObstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::PerceptionObstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_trajectory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_prediction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_width(), target);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_height(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::obstacle_trajectory(this),
        _Internal::obstacle_trajectory(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::obstacle_prediction(this),
        _Internal::obstacle_prediction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleFeature)
  return target;
}

size_t ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obstacle_trajectory_);
    }

    // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obstacle_prediction_);
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double width = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double height = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleFeature::GetClassData() const { return &_class_data_; }

void ObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleFeature *>(to)->MergeFrom(
      static_cast<const ObstacleFeature &>(from));
}


void ObstacleFeature::MergeFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obstacle_trajectory()->::apollo::planning::ObstacleTrajectoryFeature::MergeFrom(from._internal_obstacle_trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_obstacle_prediction()->::apollo::planning::PredictionObstacleFeature::MergeFrom(from._internal_obstacle_prediction());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.height_ = from._impl_.height_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleFeature::CopyFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleFeature::IsInitialized() const {
  return true;
}

void ObstacleFeature::InternalSwap(ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleFeature, _impl_.height_)
      + sizeof(ObstacleFeature::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ObstacleFeature, _impl_.obstacle_trajectory_)>(
          reinterpret_cast<char*>(&_impl_.obstacle_trajectory_),
          reinterpret_cast<char*>(&other->_impl_.obstacle_trajectory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[11]);
}

// ===================================================================

class RoutingResponseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingResponseFeature>()._impl_._has_bits_);
  static const ::apollo::routing::Measurement& measurement(const RoutingResponseFeature* msg);
  static void set_has_measurement(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::Measurement&
RoutingResponseFeature::_Internal::measurement(const RoutingResponseFeature* msg) {
  return *msg->_impl_.measurement_;
}
void RoutingResponseFeature::clear_road() {
  _impl_.road_.Clear();
}
void RoutingResponseFeature::clear_measurement() {
  if (_impl_.measurement_ != nullptr) _impl_.measurement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoutingResponseFeature::RoutingResponseFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RoutingResponseFeature)
}
RoutingResponseFeature::RoutingResponseFeature(const RoutingResponseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_){from._impl_.road_}
    , decltype(_impl_.measurement_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_measurement()) {
    _impl_.measurement_ = new ::apollo::routing::Measurement(*from._impl_.measurement_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingResponseFeature)
}

inline void RoutingResponseFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_){arena}
    , decltype(_impl_.measurement_){nullptr}
  };
}

RoutingResponseFeature::~RoutingResponseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingResponseFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingResponseFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.measurement_;
}

void RoutingResponseFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingResponseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingResponseFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.measurement_ != nullptr);
    _impl_.measurement_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingResponseFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.routing.RoadSegment road = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.Measurement measurement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingResponseFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingResponseFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_size()); i < n; i++) {
    const auto& repfield = this->_internal_road(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.routing.Measurement measurement = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::measurement(this),
        _Internal::measurement(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingResponseFeature)
  return target;
}

size_t RoutingResponseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingResponseFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->_impl_.road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.routing.Measurement measurement = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.measurement_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingResponseFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingResponseFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingResponseFeature::GetClassData() const { return &_class_data_; }

void RoutingResponseFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingResponseFeature *>(to)->MergeFrom(
      static_cast<const RoutingResponseFeature &>(from));
}


void RoutingResponseFeature::MergeFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingResponseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.road_.MergeFrom(from._impl_.road_);
  if (from._internal_has_measurement()) {
    _internal_mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from._internal_measurement());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingResponseFeature::CopyFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingResponseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponseFeature::IsInitialized() const {
  return true;
}

void RoutingResponseFeature::InternalSwap(RoutingResponseFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  swap(_impl_.measurement_, other->_impl_.measurement_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingResponseFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[12]);
}

// ===================================================================

class RoutingFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<RoutingFeature>()._impl_._has_bits_);
  static const ::apollo::planning::RoutingResponseFeature& routing_response(const RoutingFeature* msg);
  static void set_has_routing_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::RoutingResponseFeature& local_routing(const RoutingFeature* msg);
  static void set_has_local_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::RoutingResponseFeature&
RoutingFeature::_Internal::routing_response(const RoutingFeature* msg) {
  return *msg->_impl_.routing_response_;
}
const ::apollo::planning::RoutingResponseFeature&
RoutingFeature::_Internal::local_routing(const RoutingFeature* msg) {
  return *msg->_impl_.local_routing_;
}
RoutingFeature::RoutingFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RoutingFeature)
}
RoutingFeature::RoutingFeature(const RoutingFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_routing_lane_id_){from._impl_.local_routing_lane_id_}
    , decltype(_impl_.routing_response_){nullptr}
    , decltype(_impl_.local_routing_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_response()) {
    _impl_.routing_response_ = new ::apollo::planning::RoutingResponseFeature(*from._impl_.routing_response_);
  }
  if (from._internal_has_local_routing()) {
    _impl_.local_routing_ = new ::apollo::planning::RoutingResponseFeature(*from._impl_.local_routing_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingFeature)
}

inline void RoutingFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.local_routing_lane_id_){arena}
    , decltype(_impl_.routing_response_){nullptr}
    , decltype(_impl_.local_routing_){nullptr}
  };
}

RoutingFeature::~RoutingFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_routing_lane_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.routing_response_;
  if (this != internal_default_instance()) delete _impl_.local_routing_;
}

void RoutingFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_routing_lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.routing_response_ != nullptr);
      _impl_.routing_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.local_routing_ != nullptr);
      _impl_.local_routing_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string local_routing_lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_local_routing_lane_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.planning.RoutingFeature.local_routing_lane_id");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing_response(this),
        _Internal::routing_response(this).GetCachedSize(), target, stream);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->_internal_local_routing_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_local_routing_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.RoutingFeature.local_routing_lane_id");
    target = stream->WriteString(2, s, target);
  }

  // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::local_routing(this),
        _Internal::local_routing(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingFeature)
  return target;
}

size_t RoutingFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string local_routing_lane_id = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.local_routing_lane_id_.size());
  for (int i = 0, n = _impl_.local_routing_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.local_routing_lane_id_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_response_);
    }

    // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.local_routing_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoutingFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingFeature::GetClassData() const { return &_class_data_; }

void RoutingFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoutingFeature *>(to)->MergeFrom(
      static_cast<const RoutingFeature &>(from));
}


void RoutingFeature::MergeFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.local_routing_lane_id_.MergeFrom(from._impl_.local_routing_lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_response()->::apollo::planning::RoutingResponseFeature::MergeFrom(from._internal_routing_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_local_routing()->::apollo::planning::RoutingResponseFeature::MergeFrom(from._internal_local_routing());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingFeature::CopyFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingFeature::IsInitialized() const {
  return true;
}

void RoutingFeature::InternalSwap(RoutingFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.local_routing_lane_id_.InternalSwap(&other->_impl_.local_routing_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingFeature, _impl_.local_routing_)
      + sizeof(RoutingFeature::_impl_.local_routing_)
      - PROTOBUF_FIELD_OFFSET(RoutingFeature, _impl_.routing_response_)>(
          reinterpret_cast<char*>(&_impl_.routing_response_),
          reinterpret_cast<char*>(&other->_impl_.routing_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[13]);
}

// ===================================================================

class TrafficLightFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightFeature>()._impl_._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tracking_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blink(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaining_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TrafficLightFeature::TrafficLightFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficLightFeature)
}
TrafficLightFeature::TrafficLightFeature(const TrafficLightFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.blink_){}
    , decltype(_impl_.tracking_time_){}
    , decltype(_impl_.remaining_time_){}
    , decltype(_impl_.confidence_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    _impl_.id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.confidence_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightFeature)
}

inline void TrafficLightFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.blink_){false}
    , decltype(_impl_.tracking_time_){0}
    , decltype(_impl_.remaining_time_){0}
    , decltype(_impl_.confidence_){1}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrafficLightFeature::~TrafficLightFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void TrafficLightFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remaining_time_) -
        reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.remaining_time_));
    _impl_.confidence_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::TrafficLight_Color_IsValid(val))) {
            _internal_set_color(static_cast<::apollo::perception::TrafficLight_Color>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TrafficLightFeature.id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tracking_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_tracking_time(&has_bits);
          _impl_.tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool blink = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_blink(&has_bits);
          _impl_.blink_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double remaining_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_remaining_time(&has_bits);
          _impl_.remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightFeature.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightFeature)
  return target;
}

size_t TrafficLightFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
    }

    // optional bool blink = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightFeature::GetClassData() const { return &_class_data_; }

void TrafficLightFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightFeature *>(to)->MergeFrom(
      static_cast<const TrafficLightFeature &>(from));
}


void TrafficLightFeature::MergeFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.blink_ = from._impl_.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.tracking_time_ = from._impl_.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.remaining_time_ = from._impl_.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.confidence_ = from._impl_.confidence_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightFeature::CopyFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightFeature::IsInitialized() const {
  return true;
}

void TrafficLightFeature::InternalSwap(TrafficLightFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLightFeature, _impl_.remaining_time_)
      + sizeof(TrafficLightFeature::_impl_.remaining_time_)
      - PROTOBUF_FIELD_OFFSET(TrafficLightFeature, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
  swap(_impl_.confidence_, other->_impl_.confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[14]);
}

// ===================================================================

class TrafficLightDetectionFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightDetectionFeature>()._impl_._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TrafficLightDetectionFeature::TrafficLightDetectionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficLightDetectionFeature)
}
TrafficLightDetectionFeature::TrafficLightDetectionFeature(const TrafficLightDetectionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_){from._impl_.traffic_light_}
    , decltype(_impl_.message_timestamp_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_timestamp_sec_ = from._impl_.message_timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightDetectionFeature)
}

inline void TrafficLightDetectionFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.traffic_light_){arena}
    , decltype(_impl_.message_timestamp_sec_){0}
  };
}

TrafficLightDetectionFeature::~TrafficLightDetectionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightDetectionFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightDetectionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traffic_light_.~RepeatedPtrField();
}

void TrafficLightDetectionFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightDetectionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightDetectionFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traffic_light_.Clear();
  _impl_.message_timestamp_sec_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightDetectionFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          _impl_.message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightDetectionFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightDetectionFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traffic_light_size()); i < n; i++) {
    const auto& repfield = this->_internal_traffic_light(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightDetectionFeature)
  return target;
}

size_t TrafficLightDetectionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightDetectionFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  total_size += 1UL * this->_internal_traffic_light_size();
  for (const auto& msg : this->_impl_.traffic_light_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double message_timestamp_sec = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightDetectionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightDetectionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightDetectionFeature::GetClassData() const { return &_class_data_; }

void TrafficLightDetectionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightDetectionFeature *>(to)->MergeFrom(
      static_cast<const TrafficLightDetectionFeature &>(from));
}


void TrafficLightDetectionFeature::MergeFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.traffic_light_.MergeFrom(from._impl_.traffic_light_);
  if (from._internal_has_message_timestamp_sec()) {
    _internal_set_message_timestamp_sec(from._internal_message_timestamp_sec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightDetectionFeature::CopyFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetectionFeature::IsInitialized() const {
  return true;
}

void TrafficLightDetectionFeature::InternalSwap(TrafficLightDetectionFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traffic_light_.InternalSwap(&other->_impl_.traffic_light_);
  swap(_impl_.message_timestamp_sec_, other->_impl_.message_timestamp_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightDetectionFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[15]);
}

// ===================================================================

class ADCTrajectoryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCTrajectoryPoint>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::PlanningTag& planning_tag(const ADCTrajectoryPoint* msg);
  static void set_has_planning_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::CommonTrajectoryPointFeature& trajectory_point(const ADCTrajectoryPoint* msg);
  static void set_has_trajectory_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::PlanningTag&
ADCTrajectoryPoint::_Internal::planning_tag(const ADCTrajectoryPoint* msg) {
  return *msg->_impl_.planning_tag_;
}
const ::apollo::planning::CommonTrajectoryPointFeature&
ADCTrajectoryPoint::_Internal::trajectory_point(const ADCTrajectoryPoint* msg) {
  return *msg->_impl_.trajectory_point_;
}
ADCTrajectoryPoint::ADCTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_tag_){nullptr}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning_tag()) {
    _impl_.planning_tag_ = new ::apollo::planning::PlanningTag(*from._impl_.planning_tag_);
  }
  if (from._internal_has_trajectory_point()) {
    _impl_.trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from._impl_.trajectory_point_);
  }
  _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

inline void ADCTrajectoryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planning_tag_){nullptr}
    , decltype(_impl_.trajectory_point_){nullptr}
    , decltype(_impl_.timestamp_sec_){0}
  };
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCTrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.planning_tag_;
  if (this != internal_default_instance()) delete _impl_.trajectory_point_;
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.planning_tag_ != nullptr);
      _impl_.planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.trajectory_point_ != nullptr);
      _impl_.trajectory_point_->Clear();
    }
  }
  _impl_.timestamp_sec_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectoryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlanningTag planning_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCTrajectoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::planning_tag(this),
        _Internal::planning_tag(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trajectory_point(this),
        _Internal::trajectory_point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.PlanningTag planning_tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_tag_);
    }

    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectoryPoint::GetClassData() const { return &_class_data_; }

void ADCTrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectoryPoint *>(to)->MergeFrom(
      static_cast<const ADCTrajectoryPoint &>(from));
}


void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from._internal_planning_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from._internal_trajectory_point());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, _impl_.timestamp_sec_)
      + sizeof(ADCTrajectoryPoint::_impl_.timestamp_sec_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, _impl_.planning_tag_)>(
          reinterpret_cast<char*>(&_impl_.planning_tag_),
          reinterpret_cast<char*>(&other->_impl_.planning_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectoryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[16]);
}

// ===================================================================

class LearningOutput::_Internal {
 public:
};

LearningOutput::LearningOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningOutput)
}
LearningOutput::LearningOutput(const LearningOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.adc_future_trajectory_point_){from._impl_.adc_future_trajectory_point_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningOutput)
}

inline void LearningOutput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.adc_future_trajectory_point_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LearningOutput::~LearningOutput() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningOutput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LearningOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.adc_future_trajectory_point_.~RepeatedPtrField();
}

void LearningOutput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LearningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningOutput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.adc_future_trajectory_point_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningOutput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_future_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LearningOutput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningOutput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_future_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_future_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningOutput)
  return target;
}

size_t LearningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningOutput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  total_size += 1UL * this->_internal_adc_future_trajectory_point_size();
  for (const auto& msg : this->_impl_.adc_future_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningOutput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningOutput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningOutput::GetClassData() const { return &_class_data_; }

void LearningOutput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningOutput *>(to)->MergeFrom(
      static_cast<const LearningOutput &>(from));
}


void LearningOutput::MergeFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.adc_future_trajectory_point_.MergeFrom(from._impl_.adc_future_trajectory_point_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningOutput::CopyFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningOutput::IsInitialized() const {
  return true;
}

void LearningOutput::InternalSwap(LearningOutput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.adc_future_trajectory_point_.InternalSwap(&other->_impl_.adc_future_trajectory_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningOutput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[17]);
}

// ===================================================================

class LearningDataFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<LearningDataFrame>()._impl_._has_bits_);
  static void set_has_message_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_frame_num(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::PlanningTag& planning_tag(const LearningDataFrame* msg);
  static void set_has_planning_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::ChassisFeature& chassis(const LearningDataFrame* msg);
  static void set_has_chassis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::LocalizationFeature& localization(const LearningDataFrame* msg);
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::RoutingFeature& routing(const LearningDataFrame* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::TrafficLightDetectionFeature& traffic_light_detection(const LearningDataFrame* msg);
  static void set_has_traffic_light_detection(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::LearningOutput& output(const LearningDataFrame* msg);
  static void set_has_output(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::planning::PlanningTag&
LearningDataFrame::_Internal::planning_tag(const LearningDataFrame* msg) {
  return *msg->_impl_.planning_tag_;
}
const ::apollo::planning::ChassisFeature&
LearningDataFrame::_Internal::chassis(const LearningDataFrame* msg) {
  return *msg->_impl_.chassis_;
}
const ::apollo::planning::LocalizationFeature&
LearningDataFrame::_Internal::localization(const LearningDataFrame* msg) {
  return *msg->_impl_.localization_;
}
const ::apollo::planning::RoutingFeature&
LearningDataFrame::_Internal::routing(const LearningDataFrame* msg) {
  return *msg->_impl_.routing_;
}
const ::apollo::planning::TrafficLightDetectionFeature&
LearningDataFrame::_Internal::traffic_light_detection(const LearningDataFrame* msg) {
  return *msg->_impl_.traffic_light_detection_;
}
const ::apollo::planning::LearningOutput&
LearningDataFrame::_Internal::output(const LearningDataFrame* msg) {
  return *msg->_impl_.output_;
}
LearningDataFrame::LearningDataFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningDataFrame)
}
LearningDataFrame::LearningDataFrame(const LearningDataFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_){from._impl_.obstacle_}
    , decltype(_impl_.adc_trajectory_point_){from._impl_.adc_trajectory_point_}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.planning_tag_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.localization_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.traffic_light_detection_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.message_timestamp_sec_){}
    , decltype(_impl_.frame_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _impl_.map_name_.Set(from._internal_map_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_planning_tag()) {
    _impl_.planning_tag_ = new ::apollo::planning::PlanningTag(*from._impl_.planning_tag_);
  }
  if (from._internal_has_chassis()) {
    _impl_.chassis_ = new ::apollo::planning::ChassisFeature(*from._impl_.chassis_);
  }
  if (from._internal_has_localization()) {
    _impl_.localization_ = new ::apollo::planning::LocalizationFeature(*from._impl_.localization_);
  }
  if (from._internal_has_routing()) {
    _impl_.routing_ = new ::apollo::planning::RoutingFeature(*from._impl_.routing_);
  }
  if (from._internal_has_traffic_light_detection()) {
    _impl_.traffic_light_detection_ = new ::apollo::planning::TrafficLightDetectionFeature(*from._impl_.traffic_light_detection_);
  }
  if (from._internal_has_output()) {
    _impl_.output_ = new ::apollo::planning::LearningOutput(*from._impl_.output_);
  }
  ::memcpy(&_impl_.message_timestamp_sec_, &from._impl_.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_num_) -
    reinterpret_cast<char*>(&_impl_.message_timestamp_sec_)) + sizeof(_impl_.frame_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningDataFrame)
}

inline void LearningDataFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_){arena}
    , decltype(_impl_.adc_trajectory_point_){arena}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.planning_tag_){nullptr}
    , decltype(_impl_.chassis_){nullptr}
    , decltype(_impl_.localization_){nullptr}
    , decltype(_impl_.routing_){nullptr}
    , decltype(_impl_.traffic_light_detection_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.message_timestamp_sec_){0}
    , decltype(_impl_.frame_num_){0u}
  };
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LearningDataFrame::~LearningDataFrame() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningDataFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LearningDataFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_.~RepeatedPtrField();
  _impl_.adc_trajectory_point_.~RepeatedPtrField();
  _impl_.map_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.planning_tag_;
  if (this != internal_default_instance()) delete _impl_.chassis_;
  if (this != internal_default_instance()) delete _impl_.localization_;
  if (this != internal_default_instance()) delete _impl_.routing_;
  if (this != internal_default_instance()) delete _impl_.traffic_light_detection_;
  if (this != internal_default_instance()) delete _impl_.output_;
}

void LearningDataFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LearningDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningDataFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacle_.Clear();
  _impl_.adc_trajectory_point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.planning_tag_ != nullptr);
      _impl_.planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.chassis_ != nullptr);
      _impl_.chassis_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.localization_ != nullptr);
      _impl_.localization_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.routing_ != nullptr);
      _impl_.routing_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.traffic_light_detection_ != nullptr);
      _impl_.traffic_light_detection_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.output_ != nullptr);
      _impl_.output_->Clear();
    }
  }
  _impl_.message_timestamp_sec_ = 0;
  _impl_.frame_num_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningDataFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double message_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_message_timestamp_sec(&has_bits);
          _impl_.message_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frame_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_num(&has_bits);
          _impl_.frame_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.LearningDataFrame.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlanningTag planning_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ChassisFeature chassis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LocalizationFeature localization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ObstacleFeature obstacle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.RoutingFeature routing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_detection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LearningOutput output = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LearningDataFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningDataFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_message_timestamp_sec(), target);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame_num(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningDataFrame.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::planning_tag(this),
        _Internal::planning_tag(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::chassis(this),
        _Internal::chassis(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::localization(this),
        _Internal::localization(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::routing(this),
        _Internal::routing(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::traffic_light_detection(this),
        _Internal::traffic_light_detection(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningDataFrame)
  return target;
}

size_t LearningDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningDataFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  total_size += 1UL * this->_internal_obstacle_size();
  for (const auto& msg : this->_impl_.obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  total_size += 1UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->_impl_.adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string map_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional .apollo.planning.PlanningTag planning_tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_tag_);
    }

    // optional .apollo.planning.ChassisFeature chassis = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chassis_);
    }

    // optional .apollo.planning.LocalizationFeature localization = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.localization_);
    }

    // optional .apollo.planning.RoutingFeature routing = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_);
    }

    // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.traffic_light_detection_);
    }

    // optional .apollo.planning.LearningOutput output = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.output_);
    }

    // optional double message_timestamp_sec = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningDataFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningDataFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningDataFrame::GetClassData() const { return &_class_data_; }

void LearningDataFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningDataFrame *>(to)->MergeFrom(
      static_cast<const LearningDataFrame &>(from));
}


void LearningDataFrame::MergeFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.obstacle_.MergeFrom(from._impl_.obstacle_);
  _impl_.adc_trajectory_point_.MergeFrom(from._impl_.adc_trajectory_point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from._internal_planning_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_chassis()->::apollo::planning::ChassisFeature::MergeFrom(from._internal_chassis());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_localization()->::apollo::planning::LocalizationFeature::MergeFrom(from._internal_localization());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_routing()->::apollo::planning::RoutingFeature::MergeFrom(from._internal_routing());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_traffic_light_detection()->::apollo::planning::TrafficLightDetectionFeature::MergeFrom(from._internal_traffic_light_detection());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_output()->::apollo::planning::LearningOutput::MergeFrom(from._internal_output());
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.message_timestamp_sec_ = from._impl_.message_timestamp_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_frame_num(from._internal_frame_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningDataFrame::CopyFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningDataFrame::IsInitialized() const {
  return true;
}

void LearningDataFrame::InternalSwap(LearningDataFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obstacle_.InternalSwap(&other->_impl_.obstacle_);
  _impl_.adc_trajectory_point_.InternalSwap(&other->_impl_.adc_trajectory_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LearningDataFrame, _impl_.frame_num_)
      + sizeof(LearningDataFrame::_impl_.frame_num_)
      - PROTOBUF_FIELD_OFFSET(LearningDataFrame, _impl_.planning_tag_)>(
          reinterpret_cast<char*>(&_impl_.planning_tag_),
          reinterpret_cast<char*>(&other->_impl_.planning_tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningDataFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[18]);
}

// ===================================================================

class LearningData::_Internal {
 public:
};

LearningData::LearningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LearningData)
}
LearningData::LearningData(const LearningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.learning_data_frame_){from._impl_.learning_data_frame_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningData)
}

inline void LearningData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.learning_data_frame_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LearningData::~LearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LearningData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.learning_data_frame_.~RepeatedPtrField();
}

void LearningData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.learning_data_frame_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LearningData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_learning_data_frame(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LearningData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_learning_data_frame_size()); i < n; i++) {
    const auto& repfield = this->_internal_learning_data_frame(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningData)
  return target;
}

size_t LearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  total_size += 1UL * this->_internal_learning_data_frame_size();
  for (const auto& msg : this->_impl_.learning_data_frame_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LearningData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LearningData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LearningData::GetClassData() const { return &_class_data_; }

void LearningData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LearningData *>(to)->MergeFrom(
      static_cast<const LearningData &>(from));
}


void LearningData::MergeFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.learning_data_frame_.MergeFrom(from._impl_.learning_data_frame_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LearningData::CopyFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningData::IsInitialized() const {
  return true;
}

void LearningData::InternalSwap(LearningData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.learning_data_frame_.InternalSwap(&other->_impl_.learning_data_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LearningData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[19]);
}

// ===================================================================

class PlanningLearningData::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningLearningData>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const PlanningLearningData* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::LearningDataFrame& learning_data_frame(const PlanningLearningData* msg);
  static void set_has_learning_data_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Header&
PlanningLearningData::_Internal::header(const PlanningLearningData* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::planning::LearningDataFrame&
PlanningLearningData::_Internal::learning_data_frame(const PlanningLearningData* msg) {
  return *msg->_impl_.learning_data_frame_;
}
void PlanningLearningData::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlanningLearningData::PlanningLearningData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningLearningData)
}
PlanningLearningData::PlanningLearningData(const PlanningLearningData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.learning_data_frame_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_learning_data_frame()) {
    _impl_.learning_data_frame_ = new ::apollo::planning::LearningDataFrame(*from._impl_.learning_data_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningLearningData)
}

inline void PlanningLearningData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.learning_data_frame_){nullptr}
  };
}

PlanningLearningData::~PlanningLearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningLearningData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningLearningData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.learning_data_frame_;
}

void PlanningLearningData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningLearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningLearningData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.learning_data_frame_ != nullptr);
      _impl_.learning_data_frame_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningLearningData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_learning_data_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningLearningData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningLearningData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::learning_data_frame(this),
        _Internal::learning_data_frame(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningLearningData)
  return target;
}

size_t PlanningLearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningLearningData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.learning_data_frame_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningLearningData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningLearningData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningLearningData::GetClassData() const { return &_class_data_; }

void PlanningLearningData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningLearningData *>(to)->MergeFrom(
      static_cast<const PlanningLearningData &>(from));
}


void PlanningLearningData::MergeFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningLearningData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_learning_data_frame()->::apollo::planning::LearningDataFrame::MergeFrom(from._internal_learning_data_frame());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningLearningData::CopyFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningLearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningLearningData::IsInitialized() const {
  return true;
}

void PlanningLearningData::InternalSwap(PlanningLearningData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningLearningData, _impl_.learning_data_frame_)
      + sizeof(PlanningLearningData::_impl_.learning_data_frame_)
      - PROTOBUF_FIELD_OFFSET(PlanningLearningData, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningLearningData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flearning_5fdata_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flearning_5fdata_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::OverlapFeature*
Arena::CreateMaybeMessage< ::apollo::planning::OverlapFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::OverlapFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningTag*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningTag >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ChassisFeature*
Arena::CreateMaybeMessage< ::apollo::planning::ChassisFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ChassisFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LocalizationFeature*
Arena::CreateMaybeMessage< ::apollo::planning::LocalizationFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LocalizationFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CommonPathPointFeature*
Arena::CreateMaybeMessage< ::apollo::planning::CommonPathPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CommonPathPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CommonTrajectoryPointFeature*
Arena::CreateMaybeMessage< ::apollo::planning::CommonTrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CommonTrajectoryPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrajectoryPointFeature*
Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrajectoryPointFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PerceptionObstacleFeature*
Arena::CreateMaybeMessage< ::apollo::planning::PerceptionObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PerceptionObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObstacleTrajectoryFeature*
Arena::CreateMaybeMessage< ::apollo::planning::ObstacleTrajectoryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObstacleTrajectoryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PredictionTrajectoryFeature*
Arena::CreateMaybeMessage< ::apollo::planning::PredictionTrajectoryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PredictionTrajectoryFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PredictionObstacleFeature*
Arena::CreateMaybeMessage< ::apollo::planning::PredictionObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PredictionObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ObstacleFeature*
Arena::CreateMaybeMessage< ::apollo::planning::ObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RoutingResponseFeature*
Arena::CreateMaybeMessage< ::apollo::planning::RoutingResponseFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RoutingResponseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RoutingFeature*
Arena::CreateMaybeMessage< ::apollo::planning::RoutingFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RoutingFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightFeature*
Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficLightFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightDetectionFeature*
Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightDetectionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficLightDetectionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCTrajectoryPoint*
Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCTrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningOutput*
Arena::CreateMaybeMessage< ::apollo::planning::LearningOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningDataFrame*
Arena::CreateMaybeMessage< ::apollo::planning::LearningDataFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningDataFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LearningData*
Arena::CreateMaybeMessage< ::apollo::planning::LearningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LearningData >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningLearningData*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningLearningData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningLearningData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
