// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/decision.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecision_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecision_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/vehicle_signal.pb.h"
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fdecision_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto;
namespace apollo {
namespace planning {
class DecisionResult;
struct DecisionResultDefaultTypeInternal;
extern DecisionResultDefaultTypeInternal _DecisionResult_default_instance_;
class EmergencyStopCruiseToStop;
struct EmergencyStopCruiseToStopDefaultTypeInternal;
extern EmergencyStopCruiseToStopDefaultTypeInternal _EmergencyStopCruiseToStop_default_instance_;
class EmergencyStopHardBrake;
struct EmergencyStopHardBrakeDefaultTypeInternal;
extern EmergencyStopHardBrakeDefaultTypeInternal _EmergencyStopHardBrake_default_instance_;
class MainChangeLane;
struct MainChangeLaneDefaultTypeInternal;
extern MainChangeLaneDefaultTypeInternal _MainChangeLane_default_instance_;
class MainCruise;
struct MainCruiseDefaultTypeInternal;
extern MainCruiseDefaultTypeInternal _MainCruise_default_instance_;
class MainDecision;
struct MainDecisionDefaultTypeInternal;
extern MainDecisionDefaultTypeInternal _MainDecision_default_instance_;
class MainEmergencyStop;
struct MainEmergencyStopDefaultTypeInternal;
extern MainEmergencyStopDefaultTypeInternal _MainEmergencyStop_default_instance_;
class MainMissionComplete;
struct MainMissionCompleteDefaultTypeInternal;
extern MainMissionCompleteDefaultTypeInternal _MainMissionComplete_default_instance_;
class MainNotReady;
struct MainNotReadyDefaultTypeInternal;
extern MainNotReadyDefaultTypeInternal _MainNotReady_default_instance_;
class MainParking;
struct MainParkingDefaultTypeInternal;
extern MainParkingDefaultTypeInternal _MainParking_default_instance_;
class MainStop;
struct MainStopDefaultTypeInternal;
extern MainStopDefaultTypeInternal _MainStop_default_instance_;
class ObjectAvoid;
struct ObjectAvoidDefaultTypeInternal;
extern ObjectAvoidDefaultTypeInternal _ObjectAvoid_default_instance_;
class ObjectDecision;
struct ObjectDecisionDefaultTypeInternal;
extern ObjectDecisionDefaultTypeInternal _ObjectDecision_default_instance_;
class ObjectDecisionType;
struct ObjectDecisionTypeDefaultTypeInternal;
extern ObjectDecisionTypeDefaultTypeInternal _ObjectDecisionType_default_instance_;
class ObjectDecisions;
struct ObjectDecisionsDefaultTypeInternal;
extern ObjectDecisionsDefaultTypeInternal _ObjectDecisions_default_instance_;
class ObjectDynamic;
struct ObjectDynamicDefaultTypeInternal;
extern ObjectDynamicDefaultTypeInternal _ObjectDynamic_default_instance_;
class ObjectFollow;
struct ObjectFollowDefaultTypeInternal;
extern ObjectFollowDefaultTypeInternal _ObjectFollow_default_instance_;
class ObjectIgnore;
struct ObjectIgnoreDefaultTypeInternal;
extern ObjectIgnoreDefaultTypeInternal _ObjectIgnore_default_instance_;
class ObjectMotionType;
struct ObjectMotionTypeDefaultTypeInternal;
extern ObjectMotionTypeDefaultTypeInternal _ObjectMotionType_default_instance_;
class ObjectNudge;
struct ObjectNudgeDefaultTypeInternal;
extern ObjectNudgeDefaultTypeInternal _ObjectNudge_default_instance_;
class ObjectOvertake;
struct ObjectOvertakeDefaultTypeInternal;
extern ObjectOvertakeDefaultTypeInternal _ObjectOvertake_default_instance_;
class ObjectSidePass;
struct ObjectSidePassDefaultTypeInternal;
extern ObjectSidePassDefaultTypeInternal _ObjectSidePass_default_instance_;
class ObjectStatic;
struct ObjectStaticDefaultTypeInternal;
extern ObjectStaticDefaultTypeInternal _ObjectStatic_default_instance_;
class ObjectStatus;
struct ObjectStatusDefaultTypeInternal;
extern ObjectStatusDefaultTypeInternal _ObjectStatus_default_instance_;
class ObjectStop;
struct ObjectStopDefaultTypeInternal;
extern ObjectStopDefaultTypeInternal _ObjectStop_default_instance_;
class ObjectYield;
struct ObjectYieldDefaultTypeInternal;
extern ObjectYieldDefaultTypeInternal _ObjectYield_default_instance_;
class TargetLane;
struct TargetLaneDefaultTypeInternal;
extern TargetLaneDefaultTypeInternal _TargetLane_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DecisionResult* Arena::CreateMaybeMessage<::apollo::planning::DecisionResult>(Arena*);
template<> ::apollo::planning::EmergencyStopCruiseToStop* Arena::CreateMaybeMessage<::apollo::planning::EmergencyStopCruiseToStop>(Arena*);
template<> ::apollo::planning::EmergencyStopHardBrake* Arena::CreateMaybeMessage<::apollo::planning::EmergencyStopHardBrake>(Arena*);
template<> ::apollo::planning::MainChangeLane* Arena::CreateMaybeMessage<::apollo::planning::MainChangeLane>(Arena*);
template<> ::apollo::planning::MainCruise* Arena::CreateMaybeMessage<::apollo::planning::MainCruise>(Arena*);
template<> ::apollo::planning::MainDecision* Arena::CreateMaybeMessage<::apollo::planning::MainDecision>(Arena*);
template<> ::apollo::planning::MainEmergencyStop* Arena::CreateMaybeMessage<::apollo::planning::MainEmergencyStop>(Arena*);
template<> ::apollo::planning::MainMissionComplete* Arena::CreateMaybeMessage<::apollo::planning::MainMissionComplete>(Arena*);
template<> ::apollo::planning::MainNotReady* Arena::CreateMaybeMessage<::apollo::planning::MainNotReady>(Arena*);
template<> ::apollo::planning::MainParking* Arena::CreateMaybeMessage<::apollo::planning::MainParking>(Arena*);
template<> ::apollo::planning::MainStop* Arena::CreateMaybeMessage<::apollo::planning::MainStop>(Arena*);
template<> ::apollo::planning::ObjectAvoid* Arena::CreateMaybeMessage<::apollo::planning::ObjectAvoid>(Arena*);
template<> ::apollo::planning::ObjectDecision* Arena::CreateMaybeMessage<::apollo::planning::ObjectDecision>(Arena*);
template<> ::apollo::planning::ObjectDecisionType* Arena::CreateMaybeMessage<::apollo::planning::ObjectDecisionType>(Arena*);
template<> ::apollo::planning::ObjectDecisions* Arena::CreateMaybeMessage<::apollo::planning::ObjectDecisions>(Arena*);
template<> ::apollo::planning::ObjectDynamic* Arena::CreateMaybeMessage<::apollo::planning::ObjectDynamic>(Arena*);
template<> ::apollo::planning::ObjectFollow* Arena::CreateMaybeMessage<::apollo::planning::ObjectFollow>(Arena*);
template<> ::apollo::planning::ObjectIgnore* Arena::CreateMaybeMessage<::apollo::planning::ObjectIgnore>(Arena*);
template<> ::apollo::planning::ObjectMotionType* Arena::CreateMaybeMessage<::apollo::planning::ObjectMotionType>(Arena*);
template<> ::apollo::planning::ObjectNudge* Arena::CreateMaybeMessage<::apollo::planning::ObjectNudge>(Arena*);
template<> ::apollo::planning::ObjectOvertake* Arena::CreateMaybeMessage<::apollo::planning::ObjectOvertake>(Arena*);
template<> ::apollo::planning::ObjectSidePass* Arena::CreateMaybeMessage<::apollo::planning::ObjectSidePass>(Arena*);
template<> ::apollo::planning::ObjectStatic* Arena::CreateMaybeMessage<::apollo::planning::ObjectStatic>(Arena*);
template<> ::apollo::planning::ObjectStatus* Arena::CreateMaybeMessage<::apollo::planning::ObjectStatus>(Arena*);
template<> ::apollo::planning::ObjectStop* Arena::CreateMaybeMessage<::apollo::planning::ObjectStop>(Arena*);
template<> ::apollo::planning::ObjectYield* Arena::CreateMaybeMessage<::apollo::planning::ObjectYield>(Arena*);
template<> ::apollo::planning::TargetLane* Arena::CreateMaybeMessage<::apollo::planning::TargetLane>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum ObjectNudge_Type : int {
  ObjectNudge_Type_LEFT_NUDGE = 1,
  ObjectNudge_Type_RIGHT_NUDGE = 2,
  ObjectNudge_Type_DYNAMIC_LEFT_NUDGE = 3,
  ObjectNudge_Type_DYNAMIC_RIGHT_NUDGE = 4
};
bool ObjectNudge_Type_IsValid(int value);
constexpr ObjectNudge_Type ObjectNudge_Type_Type_MIN = ObjectNudge_Type_LEFT_NUDGE;
constexpr ObjectNudge_Type ObjectNudge_Type_Type_MAX = ObjectNudge_Type_DYNAMIC_RIGHT_NUDGE;
constexpr int ObjectNudge_Type_Type_ARRAYSIZE = ObjectNudge_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectNudge_Type_descriptor();
template<typename T>
inline const std::string& ObjectNudge_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectNudge_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectNudge_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectNudge_Type_descriptor(), enum_t_value);
}
inline bool ObjectNudge_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectNudge_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectNudge_Type>(
    ObjectNudge_Type_descriptor(), name, value);
}
enum ObjectSidePass_Type : int {
  ObjectSidePass_Type_LEFT = 1,
  ObjectSidePass_Type_RIGHT = 2
};
bool ObjectSidePass_Type_IsValid(int value);
constexpr ObjectSidePass_Type ObjectSidePass_Type_Type_MIN = ObjectSidePass_Type_LEFT;
constexpr ObjectSidePass_Type ObjectSidePass_Type_Type_MAX = ObjectSidePass_Type_RIGHT;
constexpr int ObjectSidePass_Type_Type_ARRAYSIZE = ObjectSidePass_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectSidePass_Type_descriptor();
template<typename T>
inline const std::string& ObjectSidePass_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectSidePass_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectSidePass_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectSidePass_Type_descriptor(), enum_t_value);
}
inline bool ObjectSidePass_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectSidePass_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectSidePass_Type>(
    ObjectSidePass_Type_descriptor(), name, value);
}
enum MainEmergencyStop_ReasonCode : int {
  MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR = 1,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION = 2,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH = 3,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION = 4,
  MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR = 5
};
bool MainEmergencyStop_ReasonCode_IsValid(int value);
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MIN = MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
constexpr MainEmergencyStop_ReasonCode MainEmergencyStop_ReasonCode_ReasonCode_MAX = MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
constexpr int MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE = MainEmergencyStop_ReasonCode_ReasonCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainEmergencyStop_ReasonCode_descriptor();
template<typename T>
inline const std::string& MainEmergencyStop_ReasonCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MainEmergencyStop_ReasonCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MainEmergencyStop_ReasonCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MainEmergencyStop_ReasonCode_descriptor(), enum_t_value);
}
inline bool MainEmergencyStop_ReasonCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MainEmergencyStop_ReasonCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MainEmergencyStop_ReasonCode>(
    MainEmergencyStop_ReasonCode_descriptor(), name, value);
}
enum MainChangeLane_Type : int {
  MainChangeLane_Type_LEFT = 1,
  MainChangeLane_Type_RIGHT = 2
};
bool MainChangeLane_Type_IsValid(int value);
constexpr MainChangeLane_Type MainChangeLane_Type_Type_MIN = MainChangeLane_Type_LEFT;
constexpr MainChangeLane_Type MainChangeLane_Type_Type_MAX = MainChangeLane_Type_RIGHT;
constexpr int MainChangeLane_Type_Type_ARRAYSIZE = MainChangeLane_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainChangeLane_Type_descriptor();
template<typename T>
inline const std::string& MainChangeLane_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MainChangeLane_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MainChangeLane_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MainChangeLane_Type_descriptor(), enum_t_value);
}
inline bool MainChangeLane_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MainChangeLane_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MainChangeLane_Type>(
    MainChangeLane_Type_descriptor(), name, value);
}
enum MainParking_ParkingStatus : int {
  MainParking_ParkingStatus_IN_PARKING = 1
};
bool MainParking_ParkingStatus_IsValid(int value);
constexpr MainParking_ParkingStatus MainParking_ParkingStatus_ParkingStatus_MIN = MainParking_ParkingStatus_IN_PARKING;
constexpr MainParking_ParkingStatus MainParking_ParkingStatus_ParkingStatus_MAX = MainParking_ParkingStatus_IN_PARKING;
constexpr int MainParking_ParkingStatus_ParkingStatus_ARRAYSIZE = MainParking_ParkingStatus_ParkingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MainParking_ParkingStatus_descriptor();
template<typename T>
inline const std::string& MainParking_ParkingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MainParking_ParkingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MainParking_ParkingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MainParking_ParkingStatus_descriptor(), enum_t_value);
}
inline bool MainParking_ParkingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MainParking_ParkingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MainParking_ParkingStatus>(
    MainParking_ParkingStatus_descriptor(), name, value);
}
enum StopReasonCode : int {
  STOP_REASON_HEAD_VEHICLE = 1,
  STOP_REASON_DESTINATION = 2,
  STOP_REASON_PEDESTRIAN = 3,
  STOP_REASON_OBSTACLE = 4,
  STOP_REASON_PREPARKING = 5,
  STOP_REASON_SIGNAL = 100,
  STOP_REASON_STOP_SIGN = 101,
  STOP_REASON_YIELD_SIGN = 102,
  STOP_REASON_CLEAR_ZONE = 103,
  STOP_REASON_CROSSWALK = 104,
  STOP_REASON_CREEPER = 105,
  STOP_REASON_REFERENCE_END = 106,
  STOP_REASON_YELLOW_SIGNAL = 107,
  STOP_REASON_PULL_OVER = 108,
  STOP_REASON_SIDEPASS_SAFETY = 109,
  STOP_REASON_PRE_OPEN_SPACE_STOP = 200,
  STOP_REASON_LANE_CHANGE_URGENCY = 201,
  STOP_REASON_EMERGENCY = 202
};
bool StopReasonCode_IsValid(int value);
constexpr StopReasonCode StopReasonCode_MIN = STOP_REASON_HEAD_VEHICLE;
constexpr StopReasonCode StopReasonCode_MAX = STOP_REASON_EMERGENCY;
constexpr int StopReasonCode_ARRAYSIZE = StopReasonCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopReasonCode_descriptor();
template<typename T>
inline const std::string& StopReasonCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopReasonCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopReasonCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopReasonCode_descriptor(), enum_t_value);
}
inline bool StopReasonCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopReasonCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopReasonCode>(
    StopReasonCode_descriptor(), name, value);
}
// ===================================================================

class TargetLane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TargetLane) */ {
 public:
  inline TargetLane() : TargetLane(nullptr) {}
  ~TargetLane() override;
  explicit PROTOBUF_CONSTEXPR TargetLane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetLane(const TargetLane& from);
  TargetLane(TargetLane&& from) noexcept
    : TargetLane() {
    *this = ::std::move(from);
  }

  inline TargetLane& operator=(const TargetLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetLane& operator=(TargetLane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetLane& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetLane* internal_default_instance() {
    return reinterpret_cast<const TargetLane*>(
               &_TargetLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TargetLane& a, TargetLane& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetLane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetLane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetLane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetLane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetLane& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetLane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TargetLane";
  }
  protected:
  explicit TargetLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
    kSpeedLimitFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional double start_s = 2;
  bool has_start_s() const;
  private:
  bool _internal_has_start_s() const;
  public:
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);
  private:
  double _internal_start_s() const;
  void _internal_set_start_s(double value);
  public:

  // optional double end_s = 3;
  bool has_end_s() const;
  private:
  bool _internal_has_end_s() const;
  public:
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);
  private:
  double _internal_end_s() const;
  void _internal_set_end_s(double value);
  public:

  // optional double speed_limit = 4;
  bool has_speed_limit() const;
  private:
  bool _internal_has_speed_limit() const;
  public:
  void clear_speed_limit();
  double speed_limit() const;
  void set_speed_limit(double value);
  private:
  double _internal_speed_limit() const;
  void _internal_set_speed_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.TargetLane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    double start_s_;
    double end_s_;
    double speed_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectIgnore final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectIgnore) */ {
 public:
  inline ObjectIgnore() : ObjectIgnore(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ObjectIgnore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectIgnore(const ObjectIgnore& from);
  ObjectIgnore(ObjectIgnore&& from) noexcept
    : ObjectIgnore() {
    *this = ::std::move(from);
  }

  inline ObjectIgnore& operator=(const ObjectIgnore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIgnore& operator=(ObjectIgnore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectIgnore& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectIgnore* internal_default_instance() {
    return reinterpret_cast<const ObjectIgnore*>(
               &_ObjectIgnore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectIgnore& a, ObjectIgnore& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectIgnore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectIgnore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectIgnore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectIgnore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ObjectIgnore& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ObjectIgnore& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectIgnore";
  }
  protected:
  explicit ObjectIgnore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectIgnore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectStop) */ {
 public:
  inline ObjectStop() : ObjectStop(nullptr) {}
  ~ObjectStop() override;
  explicit PROTOBUF_CONSTEXPR ObjectStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectStop(const ObjectStop& from);
  ObjectStop(ObjectStop&& from) noexcept
    : ObjectStop() {
    *this = ::std::move(from);
  }

  inline ObjectStop& operator=(const ObjectStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectStop& operator=(ObjectStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectStop* internal_default_instance() {
    return reinterpret_cast<const ObjectStop*>(
               &_ObjectStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectStop& a, ObjectStop& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectStop";
  }
  protected:
  explicit ObjectStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitForObstacleFieldNumber = 5,
    kStopPointFieldNumber = 3,
    kDistanceSFieldNumber = 2,
    kStopHeadingFieldNumber = 4,
    kReasonCodeFieldNumber = 1,
  };
  // repeated string wait_for_obstacle = 5;
  int wait_for_obstacle_size() const;
  private:
  int _internal_wait_for_obstacle_size() const;
  public:
  void clear_wait_for_obstacle();
  const std::string& wait_for_obstacle(int index) const;
  std::string* mutable_wait_for_obstacle(int index);
  void set_wait_for_obstacle(int index, const std::string& value);
  void set_wait_for_obstacle(int index, std::string&& value);
  void set_wait_for_obstacle(int index, const char* value);
  void set_wait_for_obstacle(int index, const char* value, size_t size);
  std::string* add_wait_for_obstacle();
  void add_wait_for_obstacle(const std::string& value);
  void add_wait_for_obstacle(std::string&& value);
  void add_wait_for_obstacle(const char* value);
  void add_wait_for_obstacle(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& wait_for_obstacle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_wait_for_obstacle();
  private:
  const std::string& _internal_wait_for_obstacle(int index) const;
  std::string* _internal_add_wait_for_obstacle();
  public:

  // optional .apollo.common.PointENU stop_point = 3;
  bool has_stop_point() const;
  private:
  bool _internal_has_stop_point() const;
  public:
  void clear_stop_point();
  const ::apollo::common::PointENU& stop_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_stop_point();
  ::apollo::common::PointENU* mutable_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);
  private:
  const ::apollo::common::PointENU& _internal_stop_point() const;
  ::apollo::common::PointENU* _internal_mutable_stop_point();
  public:
  void unsafe_arena_set_allocated_stop_point(
      ::apollo::common::PointENU* stop_point);
  ::apollo::common::PointENU* unsafe_arena_release_stop_point();

  // optional double distance_s = 2;
  bool has_distance_s() const;
  private:
  bool _internal_has_distance_s() const;
  public:
  void clear_distance_s();
  double distance_s() const;
  void set_distance_s(double value);
  private:
  double _internal_distance_s() const;
  void _internal_set_distance_s(double value);
  public:

  // optional double stop_heading = 4;
  bool has_stop_heading() const;
  private:
  bool _internal_has_stop_heading() const;
  public:
  void clear_stop_heading();
  double stop_heading() const;
  void set_stop_heading(double value);
  private:
  double _internal_stop_heading() const;
  void _internal_set_stop_heading(double value);
  public:

  // optional .apollo.planning.StopReasonCode reason_code = 1;
  bool has_reason_code() const;
  private:
  bool _internal_has_reason_code() const;
  public:
  void clear_reason_code();
  ::apollo::planning::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::StopReasonCode value);
  private:
  ::apollo::planning::StopReasonCode _internal_reason_code() const;
  void _internal_set_reason_code(::apollo::planning::StopReasonCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> wait_for_obstacle_;
    ::apollo::common::PointENU* stop_point_;
    double distance_s_;
    double stop_heading_;
    int reason_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectNudge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectNudge) */ {
 public:
  inline ObjectNudge() : ObjectNudge(nullptr) {}
  ~ObjectNudge() override;
  explicit PROTOBUF_CONSTEXPR ObjectNudge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectNudge(const ObjectNudge& from);
  ObjectNudge(ObjectNudge&& from) noexcept
    : ObjectNudge() {
    *this = ::std::move(from);
  }

  inline ObjectNudge& operator=(const ObjectNudge& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectNudge& operator=(ObjectNudge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectNudge& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectNudge* internal_default_instance() {
    return reinterpret_cast<const ObjectNudge*>(
               &_ObjectNudge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectNudge& a, ObjectNudge& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectNudge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectNudge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectNudge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectNudge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectNudge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectNudge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectNudge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectNudge";
  }
  protected:
  explicit ObjectNudge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectNudge_Type Type;
  static constexpr Type LEFT_NUDGE =
    ObjectNudge_Type_LEFT_NUDGE;
  static constexpr Type RIGHT_NUDGE =
    ObjectNudge_Type_RIGHT_NUDGE;
  static constexpr Type DYNAMIC_LEFT_NUDGE =
    ObjectNudge_Type_DYNAMIC_LEFT_NUDGE;
  static constexpr Type DYNAMIC_RIGHT_NUDGE =
    ObjectNudge_Type_DYNAMIC_RIGHT_NUDGE;
  static inline bool Type_IsValid(int value) {
    return ObjectNudge_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ObjectNudge_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ObjectNudge_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ObjectNudge_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ObjectNudge_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ObjectNudge_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ObjectNudge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceLFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional double distance_l = 2;
  bool has_distance_l() const;
  private:
  bool _internal_has_distance_l() const;
  public:
  void clear_distance_l();
  double distance_l() const;
  void set_distance_l(double value);
  private:
  double _internal_distance_l() const;
  void _internal_set_distance_l(double value);
  public:

  // optional .apollo.planning.ObjectNudge.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::planning::ObjectNudge_Type type() const;
  void set_type(::apollo::planning::ObjectNudge_Type value);
  private:
  ::apollo::planning::ObjectNudge_Type _internal_type() const;
  void _internal_set_type(::apollo::planning::ObjectNudge_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectNudge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double distance_l_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectYield final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectYield) */ {
 public:
  inline ObjectYield() : ObjectYield(nullptr) {}
  ~ObjectYield() override;
  explicit PROTOBUF_CONSTEXPR ObjectYield(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectYield(const ObjectYield& from);
  ObjectYield(ObjectYield&& from) noexcept
    : ObjectYield() {
    *this = ::std::move(from);
  }

  inline ObjectYield& operator=(const ObjectYield& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectYield& operator=(ObjectYield&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectYield& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectYield* internal_default_instance() {
    return reinterpret_cast<const ObjectYield*>(
               &_ObjectYield_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObjectYield& a, ObjectYield& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectYield* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectYield* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectYield* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectYield>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectYield& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectYield& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectYield* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectYield";
  }
  protected:
  explicit ObjectYield(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFencePointFieldNumber = 2,
    kDistanceSFieldNumber = 1,
    kFenceHeadingFieldNumber = 3,
    kTimeBufferFieldNumber = 4,
  };
  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  private:
  bool _internal_has_fence_point() const;
  public:
  void clear_fence_point();
  const ::apollo::common::PointENU& fence_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_fence_point();
  ::apollo::common::PointENU* mutable_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);
  private:
  const ::apollo::common::PointENU& _internal_fence_point() const;
  ::apollo::common::PointENU* _internal_mutable_fence_point();
  public:
  void unsafe_arena_set_allocated_fence_point(
      ::apollo::common::PointENU* fence_point);
  ::apollo::common::PointENU* unsafe_arena_release_fence_point();

  // optional double distance_s = 1;
  bool has_distance_s() const;
  private:
  bool _internal_has_distance_s() const;
  public:
  void clear_distance_s();
  double distance_s() const;
  void set_distance_s(double value);
  private:
  double _internal_distance_s() const;
  void _internal_set_distance_s(double value);
  public:

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  private:
  bool _internal_has_fence_heading() const;
  public:
  void clear_fence_heading();
  double fence_heading() const;
  void set_fence_heading(double value);
  private:
  double _internal_fence_heading() const;
  void _internal_set_fence_heading(double value);
  public:

  // optional double time_buffer = 4;
  bool has_time_buffer() const;
  private:
  bool _internal_has_time_buffer() const;
  public:
  void clear_time_buffer();
  double time_buffer() const;
  void set_time_buffer(double value);
  private:
  double _internal_time_buffer() const;
  void _internal_set_time_buffer(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectYield)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::PointENU* fence_point_;
    double distance_s_;
    double fence_heading_;
    double time_buffer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectFollow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectFollow) */ {
 public:
  inline ObjectFollow() : ObjectFollow(nullptr) {}
  ~ObjectFollow() override;
  explicit PROTOBUF_CONSTEXPR ObjectFollow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectFollow(const ObjectFollow& from);
  ObjectFollow(ObjectFollow&& from) noexcept
    : ObjectFollow() {
    *this = ::std::move(from);
  }

  inline ObjectFollow& operator=(const ObjectFollow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectFollow& operator=(ObjectFollow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectFollow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectFollow* internal_default_instance() {
    return reinterpret_cast<const ObjectFollow*>(
               &_ObjectFollow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObjectFollow& a, ObjectFollow& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectFollow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectFollow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectFollow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectFollow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectFollow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectFollow& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectFollow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectFollow";
  }
  protected:
  explicit ObjectFollow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFencePointFieldNumber = 2,
    kDistanceSFieldNumber = 1,
    kFenceHeadingFieldNumber = 3,
  };
  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  private:
  bool _internal_has_fence_point() const;
  public:
  void clear_fence_point();
  const ::apollo::common::PointENU& fence_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_fence_point();
  ::apollo::common::PointENU* mutable_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);
  private:
  const ::apollo::common::PointENU& _internal_fence_point() const;
  ::apollo::common::PointENU* _internal_mutable_fence_point();
  public:
  void unsafe_arena_set_allocated_fence_point(
      ::apollo::common::PointENU* fence_point);
  ::apollo::common::PointENU* unsafe_arena_release_fence_point();

  // optional double distance_s = 1;
  bool has_distance_s() const;
  private:
  bool _internal_has_distance_s() const;
  public:
  void clear_distance_s();
  double distance_s() const;
  void set_distance_s(double value);
  private:
  double _internal_distance_s() const;
  void _internal_set_distance_s(double value);
  public:

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  private:
  bool _internal_has_fence_heading() const;
  public:
  void clear_fence_heading();
  double fence_heading() const;
  void set_fence_heading(double value);
  private:
  double _internal_fence_heading() const;
  void _internal_set_fence_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectFollow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::PointENU* fence_point_;
    double distance_s_;
    double fence_heading_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectOvertake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectOvertake) */ {
 public:
  inline ObjectOvertake() : ObjectOvertake(nullptr) {}
  ~ObjectOvertake() override;
  explicit PROTOBUF_CONSTEXPR ObjectOvertake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectOvertake(const ObjectOvertake& from);
  ObjectOvertake(ObjectOvertake&& from) noexcept
    : ObjectOvertake() {
    *this = ::std::move(from);
  }

  inline ObjectOvertake& operator=(const ObjectOvertake& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectOvertake& operator=(ObjectOvertake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectOvertake& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectOvertake* internal_default_instance() {
    return reinterpret_cast<const ObjectOvertake*>(
               &_ObjectOvertake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObjectOvertake& a, ObjectOvertake& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectOvertake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectOvertake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectOvertake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectOvertake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectOvertake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectOvertake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectOvertake* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectOvertake";
  }
  protected:
  explicit ObjectOvertake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFencePointFieldNumber = 2,
    kDistanceSFieldNumber = 1,
    kFenceHeadingFieldNumber = 3,
    kTimeBufferFieldNumber = 4,
  };
  // optional .apollo.common.PointENU fence_point = 2;
  bool has_fence_point() const;
  private:
  bool _internal_has_fence_point() const;
  public:
  void clear_fence_point();
  const ::apollo::common::PointENU& fence_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_fence_point();
  ::apollo::common::PointENU* mutable_fence_point();
  void set_allocated_fence_point(::apollo::common::PointENU* fence_point);
  private:
  const ::apollo::common::PointENU& _internal_fence_point() const;
  ::apollo::common::PointENU* _internal_mutable_fence_point();
  public:
  void unsafe_arena_set_allocated_fence_point(
      ::apollo::common::PointENU* fence_point);
  ::apollo::common::PointENU* unsafe_arena_release_fence_point();

  // optional double distance_s = 1;
  bool has_distance_s() const;
  private:
  bool _internal_has_distance_s() const;
  public:
  void clear_distance_s();
  double distance_s() const;
  void set_distance_s(double value);
  private:
  double _internal_distance_s() const;
  void _internal_set_distance_s(double value);
  public:

  // optional double fence_heading = 3;
  bool has_fence_heading() const;
  private:
  bool _internal_has_fence_heading() const;
  public:
  void clear_fence_heading();
  double fence_heading() const;
  void set_fence_heading(double value);
  private:
  double _internal_fence_heading() const;
  void _internal_set_fence_heading(double value);
  public:

  // optional double time_buffer = 4;
  bool has_time_buffer() const;
  private:
  bool _internal_has_time_buffer() const;
  public:
  void clear_time_buffer();
  double time_buffer() const;
  void set_time_buffer(double value);
  private:
  double _internal_time_buffer() const;
  void _internal_set_time_buffer(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectOvertake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::PointENU* fence_point_;
    double distance_s_;
    double fence_heading_;
    double time_buffer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectSidePass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectSidePass) */ {
 public:
  inline ObjectSidePass() : ObjectSidePass(nullptr) {}
  ~ObjectSidePass() override;
  explicit PROTOBUF_CONSTEXPR ObjectSidePass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectSidePass(const ObjectSidePass& from);
  ObjectSidePass(ObjectSidePass&& from) noexcept
    : ObjectSidePass() {
    *this = ::std::move(from);
  }

  inline ObjectSidePass& operator=(const ObjectSidePass& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectSidePass& operator=(ObjectSidePass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectSidePass& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectSidePass* internal_default_instance() {
    return reinterpret_cast<const ObjectSidePass*>(
               &_ObjectSidePass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ObjectSidePass& a, ObjectSidePass& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectSidePass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectSidePass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectSidePass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectSidePass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectSidePass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectSidePass& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectSidePass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectSidePass";
  }
  protected:
  explicit ObjectSidePass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectSidePass_Type Type;
  static constexpr Type LEFT =
    ObjectSidePass_Type_LEFT;
  static constexpr Type RIGHT =
    ObjectSidePass_Type_RIGHT;
  static inline bool Type_IsValid(int value) {
    return ObjectSidePass_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ObjectSidePass_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ObjectSidePass_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ObjectSidePass_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ObjectSidePass_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ObjectSidePass_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ObjectSidePass_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .apollo.planning.ObjectSidePass.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::planning::ObjectSidePass_Type type() const;
  void set_type(::apollo::planning::ObjectSidePass_Type value);
  private:
  ::apollo::planning::ObjectSidePass_Type _internal_type() const;
  void _internal_set_type(::apollo::planning::ObjectSidePass_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectSidePass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectAvoid final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectAvoid) */ {
 public:
  inline ObjectAvoid() : ObjectAvoid(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ObjectAvoid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectAvoid(const ObjectAvoid& from);
  ObjectAvoid(ObjectAvoid&& from) noexcept
    : ObjectAvoid() {
    *this = ::std::move(from);
  }

  inline ObjectAvoid& operator=(const ObjectAvoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectAvoid& operator=(ObjectAvoid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectAvoid& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectAvoid* internal_default_instance() {
    return reinterpret_cast<const ObjectAvoid*>(
               &_ObjectAvoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ObjectAvoid& a, ObjectAvoid& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectAvoid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectAvoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectAvoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectAvoid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ObjectAvoid& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ObjectAvoid& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectAvoid";
  }
  protected:
  explicit ObjectAvoid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectAvoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectStatus) */ {
 public:
  inline ObjectStatus() : ObjectStatus(nullptr) {}
  ~ObjectStatus() override;
  explicit PROTOBUF_CONSTEXPR ObjectStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectStatus(const ObjectStatus& from);
  ObjectStatus(ObjectStatus&& from) noexcept
    : ObjectStatus() {
    *this = ::std::move(from);
  }

  inline ObjectStatus& operator=(const ObjectStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectStatus& operator=(ObjectStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectStatus* internal_default_instance() {
    return reinterpret_cast<const ObjectStatus*>(
               &_ObjectStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ObjectStatus& a, ObjectStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectStatus";
  }
  protected:
  explicit ObjectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionTypeFieldNumber = 1,
    kDecisionTypeFieldNumber = 2,
  };
  // optional .apollo.planning.ObjectMotionType motion_type = 1;
  bool has_motion_type() const;
  private:
  bool _internal_has_motion_type() const;
  public:
  void clear_motion_type();
  const ::apollo::planning::ObjectMotionType& motion_type() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectMotionType* release_motion_type();
  ::apollo::planning::ObjectMotionType* mutable_motion_type();
  void set_allocated_motion_type(::apollo::planning::ObjectMotionType* motion_type);
  private:
  const ::apollo::planning::ObjectMotionType& _internal_motion_type() const;
  ::apollo::planning::ObjectMotionType* _internal_mutable_motion_type();
  public:
  void unsafe_arena_set_allocated_motion_type(
      ::apollo::planning::ObjectMotionType* motion_type);
  ::apollo::planning::ObjectMotionType* unsafe_arena_release_motion_type();

  // optional .apollo.planning.ObjectDecisionType decision_type = 2;
  bool has_decision_type() const;
  private:
  bool _internal_has_decision_type() const;
  public:
  void clear_decision_type();
  const ::apollo::planning::ObjectDecisionType& decision_type() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectDecisionType* release_decision_type();
  ::apollo::planning::ObjectDecisionType* mutable_decision_type();
  void set_allocated_decision_type(::apollo::planning::ObjectDecisionType* decision_type);
  private:
  const ::apollo::planning::ObjectDecisionType& _internal_decision_type() const;
  ::apollo::planning::ObjectDecisionType* _internal_mutable_decision_type();
  public:
  void unsafe_arena_set_allocated_decision_type(
      ::apollo::planning::ObjectDecisionType* decision_type);
  ::apollo::planning::ObjectDecisionType* unsafe_arena_release_decision_type();

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::ObjectMotionType* motion_type_;
    ::apollo::planning::ObjectDecisionType* decision_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectStatic final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectStatic) */ {
 public:
  inline ObjectStatic() : ObjectStatic(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ObjectStatic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectStatic(const ObjectStatic& from);
  ObjectStatic(ObjectStatic&& from) noexcept
    : ObjectStatic() {
    *this = ::std::move(from);
  }

  inline ObjectStatic& operator=(const ObjectStatic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectStatic& operator=(ObjectStatic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectStatic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectStatic* internal_default_instance() {
    return reinterpret_cast<const ObjectStatic*>(
               &_ObjectStatic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ObjectStatic& a, ObjectStatic& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectStatic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectStatic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectStatic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectStatic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ObjectStatic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ObjectStatic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectStatic";
  }
  protected:
  explicit ObjectStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectStatic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectDynamic final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDynamic) */ {
 public:
  inline ObjectDynamic() : ObjectDynamic(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ObjectDynamic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDynamic(const ObjectDynamic& from);
  ObjectDynamic(ObjectDynamic&& from) noexcept
    : ObjectDynamic() {
    *this = ::std::move(from);
  }

  inline ObjectDynamic& operator=(const ObjectDynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDynamic& operator=(ObjectDynamic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectDynamic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDynamic* internal_default_instance() {
    return reinterpret_cast<const ObjectDynamic*>(
               &_ObjectDynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObjectDynamic& a, ObjectDynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDynamic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectDynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectDynamic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ObjectDynamic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ObjectDynamic& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectDynamic";
  }
  protected:
  explicit ObjectDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectMotionType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectMotionType) */ {
 public:
  inline ObjectMotionType() : ObjectMotionType(nullptr) {}
  ~ObjectMotionType() override;
  explicit PROTOBUF_CONSTEXPR ObjectMotionType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectMotionType(const ObjectMotionType& from);
  ObjectMotionType(ObjectMotionType&& from) noexcept
    : ObjectMotionType() {
    *this = ::std::move(from);
  }

  inline ObjectMotionType& operator=(const ObjectMotionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMotionType& operator=(ObjectMotionType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectMotionType& default_instance() {
    return *internal_default_instance();
  }
  enum MotionTagCase {
    kStatic = 1,
    kDynamic = 2,
    MOTION_TAG_NOT_SET = 0,
  };

  static inline const ObjectMotionType* internal_default_instance() {
    return reinterpret_cast<const ObjectMotionType*>(
               &_ObjectMotionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ObjectMotionType& a, ObjectMotionType& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMotionType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMotionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectMotionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectMotionType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectMotionType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectMotionType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMotionType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectMotionType";
  }
  protected:
  explicit ObjectMotionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticFieldNumber = 1,
    kDynamicFieldNumber = 2,
  };
  // .apollo.planning.ObjectStatic static = 1;
  bool has_static_() const;
  private:
  bool _internal_has_static_() const;
  public:
  void clear_static_();
  const ::apollo::planning::ObjectStatic& static_() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectStatic* release_static_();
  ::apollo::planning::ObjectStatic* mutable_static_();
  void set_allocated_static_(::apollo::planning::ObjectStatic* static_);
  private:
  const ::apollo::planning::ObjectStatic& _internal_static_() const;
  ::apollo::planning::ObjectStatic* _internal_mutable_static_();
  public:
  void unsafe_arena_set_allocated_static_(
      ::apollo::planning::ObjectStatic* static_);
  ::apollo::planning::ObjectStatic* unsafe_arena_release_static_();

  // .apollo.planning.ObjectDynamic dynamic = 2;
  bool has_dynamic() const;
  private:
  bool _internal_has_dynamic() const;
  public:
  void clear_dynamic();
  const ::apollo::planning::ObjectDynamic& dynamic() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectDynamic* release_dynamic();
  ::apollo::planning::ObjectDynamic* mutable_dynamic();
  void set_allocated_dynamic(::apollo::planning::ObjectDynamic* dynamic);
  private:
  const ::apollo::planning::ObjectDynamic& _internal_dynamic() const;
  ::apollo::planning::ObjectDynamic* _internal_mutable_dynamic();
  public:
  void unsafe_arena_set_allocated_dynamic(
      ::apollo::planning::ObjectDynamic* dynamic);
  ::apollo::planning::ObjectDynamic* unsafe_arena_release_dynamic();

  void clear_motion_tag();
  MotionTagCase motion_tag_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectMotionType)
 private:
  class _Internal;
  void set_has_static_();
  void set_has_dynamic();

  inline bool has_motion_tag() const;
  inline void clear_has_motion_tag();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MotionTagUnion {
      constexpr MotionTagUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::ObjectStatic* static__;
      ::apollo::planning::ObjectDynamic* dynamic_;
    } motion_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectDecisionType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecisionType) */ {
 public:
  inline ObjectDecisionType() : ObjectDecisionType(nullptr) {}
  ~ObjectDecisionType() override;
  explicit PROTOBUF_CONSTEXPR ObjectDecisionType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDecisionType(const ObjectDecisionType& from);
  ObjectDecisionType(ObjectDecisionType&& from) noexcept
    : ObjectDecisionType() {
    *this = ::std::move(from);
  }

  inline ObjectDecisionType& operator=(const ObjectDecisionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDecisionType& operator=(ObjectDecisionType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectDecisionType& default_instance() {
    return *internal_default_instance();
  }
  enum ObjectTagCase {
    kIgnore = 1,
    kStop = 2,
    kFollow = 3,
    kYield = 4,
    kOvertake = 5,
    kNudge = 6,
    kAvoid = 7,
    kSidePass = 8,
    OBJECT_TAG_NOT_SET = 0,
  };

  static inline const ObjectDecisionType* internal_default_instance() {
    return reinterpret_cast<const ObjectDecisionType*>(
               &_ObjectDecisionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ObjectDecisionType& a, ObjectDecisionType& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDecisionType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDecisionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectDecisionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectDecisionType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectDecisionType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectDecisionType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDecisionType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectDecisionType";
  }
  protected:
  explicit ObjectDecisionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreFieldNumber = 1,
    kStopFieldNumber = 2,
    kFollowFieldNumber = 3,
    kYieldFieldNumber = 4,
    kOvertakeFieldNumber = 5,
    kNudgeFieldNumber = 6,
    kAvoidFieldNumber = 7,
    kSidePassFieldNumber = 8,
  };
  // .apollo.planning.ObjectIgnore ignore = 1;
  bool has_ignore() const;
  private:
  bool _internal_has_ignore() const;
  public:
  void clear_ignore();
  const ::apollo::planning::ObjectIgnore& ignore() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectIgnore* release_ignore();
  ::apollo::planning::ObjectIgnore* mutable_ignore();
  void set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore);
  private:
  const ::apollo::planning::ObjectIgnore& _internal_ignore() const;
  ::apollo::planning::ObjectIgnore* _internal_mutable_ignore();
  public:
  void unsafe_arena_set_allocated_ignore(
      ::apollo::planning::ObjectIgnore* ignore);
  ::apollo::planning::ObjectIgnore* unsafe_arena_release_ignore();

  // .apollo.planning.ObjectStop stop = 2;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const ::apollo::planning::ObjectStop& stop() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectStop* release_stop();
  ::apollo::planning::ObjectStop* mutable_stop();
  void set_allocated_stop(::apollo::planning::ObjectStop* stop);
  private:
  const ::apollo::planning::ObjectStop& _internal_stop() const;
  ::apollo::planning::ObjectStop* _internal_mutable_stop();
  public:
  void unsafe_arena_set_allocated_stop(
      ::apollo::planning::ObjectStop* stop);
  ::apollo::planning::ObjectStop* unsafe_arena_release_stop();

  // .apollo.planning.ObjectFollow follow = 3;
  bool has_follow() const;
  private:
  bool _internal_has_follow() const;
  public:
  void clear_follow();
  const ::apollo::planning::ObjectFollow& follow() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectFollow* release_follow();
  ::apollo::planning::ObjectFollow* mutable_follow();
  void set_allocated_follow(::apollo::planning::ObjectFollow* follow);
  private:
  const ::apollo::planning::ObjectFollow& _internal_follow() const;
  ::apollo::planning::ObjectFollow* _internal_mutable_follow();
  public:
  void unsafe_arena_set_allocated_follow(
      ::apollo::planning::ObjectFollow* follow);
  ::apollo::planning::ObjectFollow* unsafe_arena_release_follow();

  // .apollo.planning.ObjectYield yield = 4;
  bool has_yield() const;
  private:
  bool _internal_has_yield() const;
  public:
  void clear_yield();
  const ::apollo::planning::ObjectYield& yield() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectYield* release_yield();
  ::apollo::planning::ObjectYield* mutable_yield();
  void set_allocated_yield(::apollo::planning::ObjectYield* yield);
  private:
  const ::apollo::planning::ObjectYield& _internal_yield() const;
  ::apollo::planning::ObjectYield* _internal_mutable_yield();
  public:
  void unsafe_arena_set_allocated_yield(
      ::apollo::planning::ObjectYield* yield);
  ::apollo::planning::ObjectYield* unsafe_arena_release_yield();

  // .apollo.planning.ObjectOvertake overtake = 5;
  bool has_overtake() const;
  private:
  bool _internal_has_overtake() const;
  public:
  void clear_overtake();
  const ::apollo::planning::ObjectOvertake& overtake() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectOvertake* release_overtake();
  ::apollo::planning::ObjectOvertake* mutable_overtake();
  void set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake);
  private:
  const ::apollo::planning::ObjectOvertake& _internal_overtake() const;
  ::apollo::planning::ObjectOvertake* _internal_mutable_overtake();
  public:
  void unsafe_arena_set_allocated_overtake(
      ::apollo::planning::ObjectOvertake* overtake);
  ::apollo::planning::ObjectOvertake* unsafe_arena_release_overtake();

  // .apollo.planning.ObjectNudge nudge = 6;
  bool has_nudge() const;
  private:
  bool _internal_has_nudge() const;
  public:
  void clear_nudge();
  const ::apollo::planning::ObjectNudge& nudge() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectNudge* release_nudge();
  ::apollo::planning::ObjectNudge* mutable_nudge();
  void set_allocated_nudge(::apollo::planning::ObjectNudge* nudge);
  private:
  const ::apollo::planning::ObjectNudge& _internal_nudge() const;
  ::apollo::planning::ObjectNudge* _internal_mutable_nudge();
  public:
  void unsafe_arena_set_allocated_nudge(
      ::apollo::planning::ObjectNudge* nudge);
  ::apollo::planning::ObjectNudge* unsafe_arena_release_nudge();

  // .apollo.planning.ObjectAvoid avoid = 7;
  bool has_avoid() const;
  private:
  bool _internal_has_avoid() const;
  public:
  void clear_avoid();
  const ::apollo::planning::ObjectAvoid& avoid() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectAvoid* release_avoid();
  ::apollo::planning::ObjectAvoid* mutable_avoid();
  void set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid);
  private:
  const ::apollo::planning::ObjectAvoid& _internal_avoid() const;
  ::apollo::planning::ObjectAvoid* _internal_mutable_avoid();
  public:
  void unsafe_arena_set_allocated_avoid(
      ::apollo::planning::ObjectAvoid* avoid);
  ::apollo::planning::ObjectAvoid* unsafe_arena_release_avoid();

  // .apollo.planning.ObjectSidePass side_pass = 8;
  bool has_side_pass() const;
  private:
  bool _internal_has_side_pass() const;
  public:
  void clear_side_pass();
  const ::apollo::planning::ObjectSidePass& side_pass() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectSidePass* release_side_pass();
  ::apollo::planning::ObjectSidePass* mutable_side_pass();
  void set_allocated_side_pass(::apollo::planning::ObjectSidePass* side_pass);
  private:
  const ::apollo::planning::ObjectSidePass& _internal_side_pass() const;
  ::apollo::planning::ObjectSidePass* _internal_mutable_side_pass();
  public:
  void unsafe_arena_set_allocated_side_pass(
      ::apollo::planning::ObjectSidePass* side_pass);
  ::apollo::planning::ObjectSidePass* unsafe_arena_release_side_pass();

  void clear_object_tag();
  ObjectTagCase object_tag_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecisionType)
 private:
  class _Internal;
  void set_has_ignore();
  void set_has_stop();
  void set_has_follow();
  void set_has_yield();
  void set_has_overtake();
  void set_has_nudge();
  void set_has_avoid();
  void set_has_side_pass();

  inline bool has_object_tag() const;
  inline void clear_has_object_tag();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ObjectTagUnion {
      constexpr ObjectTagUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::ObjectIgnore* ignore_;
      ::apollo::planning::ObjectStop* stop_;
      ::apollo::planning::ObjectFollow* follow_;
      ::apollo::planning::ObjectYield* yield_;
      ::apollo::planning::ObjectOvertake* overtake_;
      ::apollo::planning::ObjectNudge* nudge_;
      ::apollo::planning::ObjectAvoid* avoid_;
      ::apollo::planning::ObjectSidePass* side_pass_;
    } object_tag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectDecision final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecision) */ {
 public:
  inline ObjectDecision() : ObjectDecision(nullptr) {}
  ~ObjectDecision() override;
  explicit PROTOBUF_CONSTEXPR ObjectDecision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDecision(const ObjectDecision& from);
  ObjectDecision(ObjectDecision&& from) noexcept
    : ObjectDecision() {
    *this = ::std::move(from);
  }

  inline ObjectDecision& operator=(const ObjectDecision& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDecision& operator=(ObjectDecision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectDecision& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDecision* internal_default_instance() {
    return reinterpret_cast<const ObjectDecision*>(
               &_ObjectDecision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ObjectDecision& a, ObjectDecision& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDecision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDecision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectDecision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectDecision>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectDecision& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectDecision& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDecision* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectDecision";
  }
  protected:
  explicit ObjectDecision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectDecisionFieldNumber = 3,
    kIdFieldNumber = 1,
    kPerceptionIdFieldNumber = 2,
  };
  // repeated .apollo.planning.ObjectDecisionType object_decision = 3;
  int object_decision_size() const;
  private:
  int _internal_object_decision_size() const;
  public:
  void clear_object_decision();
  ::apollo::planning::ObjectDecisionType* mutable_object_decision(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >*
      mutable_object_decision();
  private:
  const ::apollo::planning::ObjectDecisionType& _internal_object_decision(int index) const;
  ::apollo::planning::ObjectDecisionType* _internal_add_object_decision();
  public:
  const ::apollo::planning::ObjectDecisionType& object_decision(int index) const;
  ::apollo::planning::ObjectDecisionType* add_object_decision();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >&
      object_decision() const;

  // optional string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional int32 perception_id = 2;
  bool has_perception_id() const;
  private:
  bool _internal_has_perception_id() const;
  public:
  void clear_perception_id();
  int32_t perception_id() const;
  void set_perception_id(int32_t value);
  private:
  int32_t _internal_perception_id() const;
  void _internal_set_perception_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecisionType > object_decision_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t perception_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class ObjectDecisions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ObjectDecisions) */ {
 public:
  inline ObjectDecisions() : ObjectDecisions(nullptr) {}
  ~ObjectDecisions() override;
  explicit PROTOBUF_CONSTEXPR ObjectDecisions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectDecisions(const ObjectDecisions& from);
  ObjectDecisions(ObjectDecisions&& from) noexcept
    : ObjectDecisions() {
    *this = ::std::move(from);
  }

  inline ObjectDecisions& operator=(const ObjectDecisions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectDecisions& operator=(ObjectDecisions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectDecisions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectDecisions* internal_default_instance() {
    return reinterpret_cast<const ObjectDecisions*>(
               &_ObjectDecisions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ObjectDecisions& a, ObjectDecisions& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectDecisions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectDecisions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectDecisions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectDecisions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectDecisions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectDecisions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectDecisions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ObjectDecisions";
  }
  protected:
  explicit ObjectDecisions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecisionFieldNumber = 1,
  };
  // repeated .apollo.planning.ObjectDecision decision = 1;
  int decision_size() const;
  private:
  int _internal_decision_size() const;
  public:
  void clear_decision();
  ::apollo::planning::ObjectDecision* mutable_decision(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecision >*
      mutable_decision();
  private:
  const ::apollo::planning::ObjectDecision& _internal_decision(int index) const;
  ::apollo::planning::ObjectDecision* _internal_add_decision();
  public:
  const ::apollo::planning::ObjectDecision& decision(int index) const;
  ::apollo::planning::ObjectDecision* add_decision();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecision >&
      decision() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ObjectDecisions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecision > decision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainStop) */ {
 public:
  inline MainStop() : MainStop(nullptr) {}
  ~MainStop() override;
  explicit PROTOBUF_CONSTEXPR MainStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainStop(const MainStop& from);
  MainStop(MainStop&& from) noexcept
    : MainStop() {
    *this = ::std::move(from);
  }

  inline MainStop& operator=(const MainStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainStop& operator=(MainStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainStop* internal_default_instance() {
    return reinterpret_cast<const MainStop*>(
               &_MainStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MainStop& a, MainStop& b) {
    a.Swap(&b);
  }
  inline void Swap(MainStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainStop";
  }
  protected:
  explicit MainStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kStopPointFieldNumber = 3,
    kStopHeadingFieldNumber = 4,
    kChangeLaneTypeFieldNumber = 5,
    kReasonCodeFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional .apollo.common.PointENU stop_point = 3;
  bool has_stop_point() const;
  private:
  bool _internal_has_stop_point() const;
  public:
  void clear_stop_point();
  const ::apollo::common::PointENU& stop_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_stop_point();
  ::apollo::common::PointENU* mutable_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);
  private:
  const ::apollo::common::PointENU& _internal_stop_point() const;
  ::apollo::common::PointENU* _internal_mutable_stop_point();
  public:
  void unsafe_arena_set_allocated_stop_point(
      ::apollo::common::PointENU* stop_point);
  ::apollo::common::PointENU* unsafe_arena_release_stop_point();

  // optional double stop_heading = 4;
  bool has_stop_heading() const;
  private:
  bool _internal_has_stop_heading() const;
  public:
  void clear_stop_heading();
  double stop_heading() const;
  void set_stop_heading(double value);
  private:
  double _internal_stop_heading() const;
  void _internal_set_stop_heading(double value);
  public:

  // optional .apollo.routing.ChangeLaneType change_lane_type = 5;
  bool has_change_lane_type() const;
  private:
  bool _internal_has_change_lane_type() const;
  public:
  void clear_change_lane_type();
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);
  private:
  ::apollo::routing::ChangeLaneType _internal_change_lane_type() const;
  void _internal_set_change_lane_type(::apollo::routing::ChangeLaneType value);
  public:

  // optional .apollo.planning.StopReasonCode reason_code = 1;
  bool has_reason_code() const;
  private:
  bool _internal_has_reason_code() const;
  public:
  void clear_reason_code();
  ::apollo::planning::StopReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::StopReasonCode value);
  private:
  ::apollo::planning::StopReasonCode _internal_reason_code() const;
  void _internal_set_reason_code(::apollo::planning::StopReasonCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::apollo::common::PointENU* stop_point_;
    double stop_heading_;
    int change_lane_type_;
    int reason_code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class EmergencyStopHardBrake final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.EmergencyStopHardBrake) */ {
 public:
  inline EmergencyStopHardBrake() : EmergencyStopHardBrake(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EmergencyStopHardBrake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmergencyStopHardBrake(const EmergencyStopHardBrake& from);
  EmergencyStopHardBrake(EmergencyStopHardBrake&& from) noexcept
    : EmergencyStopHardBrake() {
    *this = ::std::move(from);
  }

  inline EmergencyStopHardBrake& operator=(const EmergencyStopHardBrake& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmergencyStopHardBrake& operator=(EmergencyStopHardBrake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmergencyStopHardBrake& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmergencyStopHardBrake* internal_default_instance() {
    return reinterpret_cast<const EmergencyStopHardBrake*>(
               &_EmergencyStopHardBrake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EmergencyStopHardBrake& a, EmergencyStopHardBrake& b) {
    a.Swap(&b);
  }
  inline void Swap(EmergencyStopHardBrake* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmergencyStopHardBrake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmergencyStopHardBrake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmergencyStopHardBrake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmergencyStopHardBrake& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmergencyStopHardBrake& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.EmergencyStopHardBrake";
  }
  protected:
  explicit EmergencyStopHardBrake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.EmergencyStopHardBrake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class EmergencyStopCruiseToStop final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.EmergencyStopCruiseToStop) */ {
 public:
  inline EmergencyStopCruiseToStop() : EmergencyStopCruiseToStop(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EmergencyStopCruiseToStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmergencyStopCruiseToStop(const EmergencyStopCruiseToStop& from);
  EmergencyStopCruiseToStop(EmergencyStopCruiseToStop&& from) noexcept
    : EmergencyStopCruiseToStop() {
    *this = ::std::move(from);
  }

  inline EmergencyStopCruiseToStop& operator=(const EmergencyStopCruiseToStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmergencyStopCruiseToStop& operator=(EmergencyStopCruiseToStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmergencyStopCruiseToStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmergencyStopCruiseToStop* internal_default_instance() {
    return reinterpret_cast<const EmergencyStopCruiseToStop*>(
               &_EmergencyStopCruiseToStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EmergencyStopCruiseToStop& a, EmergencyStopCruiseToStop& b) {
    a.Swap(&b);
  }
  inline void Swap(EmergencyStopCruiseToStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmergencyStopCruiseToStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmergencyStopCruiseToStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmergencyStopCruiseToStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmergencyStopCruiseToStop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmergencyStopCruiseToStop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.EmergencyStopCruiseToStop";
  }
  protected:
  explicit EmergencyStopCruiseToStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.EmergencyStopCruiseToStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainEmergencyStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainEmergencyStop) */ {
 public:
  inline MainEmergencyStop() : MainEmergencyStop(nullptr) {}
  ~MainEmergencyStop() override;
  explicit PROTOBUF_CONSTEXPR MainEmergencyStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainEmergencyStop(const MainEmergencyStop& from);
  MainEmergencyStop(MainEmergencyStop&& from) noexcept
    : MainEmergencyStop() {
    *this = ::std::move(from);
  }

  inline MainEmergencyStop& operator=(const MainEmergencyStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainEmergencyStop& operator=(MainEmergencyStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainEmergencyStop& default_instance() {
    return *internal_default_instance();
  }
  enum TaskCase {
    kHardBrake = 3,
    kCruiseToStop = 4,
    TASK_NOT_SET = 0,
  };

  static inline const MainEmergencyStop* internal_default_instance() {
    return reinterpret_cast<const MainEmergencyStop*>(
               &_MainEmergencyStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MainEmergencyStop& a, MainEmergencyStop& b) {
    a.Swap(&b);
  }
  inline void Swap(MainEmergencyStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainEmergencyStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainEmergencyStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainEmergencyStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainEmergencyStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainEmergencyStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainEmergencyStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainEmergencyStop";
  }
  protected:
  explicit MainEmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MainEmergencyStop_ReasonCode ReasonCode;
  static constexpr ReasonCode ESTOP_REASON_INTERNAL_ERR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_INTERNAL_ERR;
  static constexpr ReasonCode ESTOP_REASON_COLLISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_COLLISION;
  static constexpr ReasonCode ESTOP_REASON_ST_FIND_PATH =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_FIND_PATH;
  static constexpr ReasonCode ESTOP_REASON_ST_MAKE_DECISION =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_ST_MAKE_DECISION;
  static constexpr ReasonCode ESTOP_REASON_SENSOR_ERROR =
    MainEmergencyStop_ReasonCode_ESTOP_REASON_SENSOR_ERROR;
  static inline bool ReasonCode_IsValid(int value) {
    return MainEmergencyStop_ReasonCode_IsValid(value);
  }
  static constexpr ReasonCode ReasonCode_MIN =
    MainEmergencyStop_ReasonCode_ReasonCode_MIN;
  static constexpr ReasonCode ReasonCode_MAX =
    MainEmergencyStop_ReasonCode_ReasonCode_MAX;
  static constexpr int ReasonCode_ARRAYSIZE =
    MainEmergencyStop_ReasonCode_ReasonCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReasonCode_descriptor() {
    return MainEmergencyStop_ReasonCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ReasonCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReasonCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReasonCode_Name.");
    return MainEmergencyStop_ReasonCode_Name(enum_t_value);
  }
  static inline bool ReasonCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReasonCode* value) {
    return MainEmergencyStop_ReasonCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kReasonCodeFieldNumber = 1,
    kHardBrakeFieldNumber = 3,
    kCruiseToStopFieldNumber = 4,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
  bool has_reason_code() const;
  private:
  bool _internal_has_reason_code() const;
  public:
  void clear_reason_code();
  ::apollo::planning::MainEmergencyStop_ReasonCode reason_code() const;
  void set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value);
  private:
  ::apollo::planning::MainEmergencyStop_ReasonCode _internal_reason_code() const;
  void _internal_set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value);
  public:

  // .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
  bool has_hard_brake() const;
  private:
  bool _internal_has_hard_brake() const;
  public:
  void clear_hard_brake();
  const ::apollo::planning::EmergencyStopHardBrake& hard_brake() const;
  PROTOBUF_NODISCARD ::apollo::planning::EmergencyStopHardBrake* release_hard_brake();
  ::apollo::planning::EmergencyStopHardBrake* mutable_hard_brake();
  void set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake);
  private:
  const ::apollo::planning::EmergencyStopHardBrake& _internal_hard_brake() const;
  ::apollo::planning::EmergencyStopHardBrake* _internal_mutable_hard_brake();
  public:
  void unsafe_arena_set_allocated_hard_brake(
      ::apollo::planning::EmergencyStopHardBrake* hard_brake);
  ::apollo::planning::EmergencyStopHardBrake* unsafe_arena_release_hard_brake();

  // .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
  bool has_cruise_to_stop() const;
  private:
  bool _internal_has_cruise_to_stop() const;
  public:
  void clear_cruise_to_stop();
  const ::apollo::planning::EmergencyStopCruiseToStop& cruise_to_stop() const;
  PROTOBUF_NODISCARD ::apollo::planning::EmergencyStopCruiseToStop* release_cruise_to_stop();
  ::apollo::planning::EmergencyStopCruiseToStop* mutable_cruise_to_stop();
  void set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop);
  private:
  const ::apollo::planning::EmergencyStopCruiseToStop& _internal_cruise_to_stop() const;
  ::apollo::planning::EmergencyStopCruiseToStop* _internal_mutable_cruise_to_stop();
  public:
  void unsafe_arena_set_allocated_cruise_to_stop(
      ::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop);
  ::apollo::planning::EmergencyStopCruiseToStop* unsafe_arena_release_cruise_to_stop();

  void clear_task();
  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.MainEmergencyStop)
 private:
  class _Internal;
  void set_has_hard_brake();
  void set_has_cruise_to_stop();

  inline bool has_task() const;
  inline void clear_has_task();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int reason_code_;
    union TaskUnion {
      constexpr TaskUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::EmergencyStopHardBrake* hard_brake_;
      ::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop_;
    } task_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainCruise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainCruise) */ {
 public:
  inline MainCruise() : MainCruise(nullptr) {}
  ~MainCruise() override;
  explicit PROTOBUF_CONSTEXPR MainCruise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainCruise(const MainCruise& from);
  MainCruise(MainCruise&& from) noexcept
    : MainCruise() {
    *this = ::std::move(from);
  }

  inline MainCruise& operator=(const MainCruise& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainCruise& operator=(MainCruise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainCruise& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainCruise* internal_default_instance() {
    return reinterpret_cast<const MainCruise*>(
               &_MainCruise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MainCruise& a, MainCruise& b) {
    a.Swap(&b);
  }
  inline void Swap(MainCruise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainCruise* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainCruise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainCruise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainCruise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainCruise& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainCruise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainCruise";
  }
  protected:
  explicit MainCruise(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeLaneTypeFieldNumber = 1,
  };
  // optional .apollo.routing.ChangeLaneType change_lane_type = 1;
  bool has_change_lane_type() const;
  private:
  bool _internal_has_change_lane_type() const;
  public:
  void clear_change_lane_type();
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);
  private:
  ::apollo::routing::ChangeLaneType _internal_change_lane_type() const;
  void _internal_set_change_lane_type(::apollo::routing::ChangeLaneType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainCruise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int change_lane_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainChangeLane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainChangeLane) */ {
 public:
  inline MainChangeLane() : MainChangeLane(nullptr) {}
  ~MainChangeLane() override;
  explicit PROTOBUF_CONSTEXPR MainChangeLane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainChangeLane(const MainChangeLane& from);
  MainChangeLane(MainChangeLane&& from) noexcept
    : MainChangeLane() {
    *this = ::std::move(from);
  }

  inline MainChangeLane& operator=(const MainChangeLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainChangeLane& operator=(MainChangeLane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainChangeLane& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainChangeLane* internal_default_instance() {
    return reinterpret_cast<const MainChangeLane*>(
               &_MainChangeLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MainChangeLane& a, MainChangeLane& b) {
    a.Swap(&b);
  }
  inline void Swap(MainChangeLane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainChangeLane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainChangeLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainChangeLane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainChangeLane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainChangeLane& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainChangeLane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainChangeLane";
  }
  protected:
  explicit MainChangeLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MainChangeLane_Type Type;
  static constexpr Type LEFT =
    MainChangeLane_Type_LEFT;
  static constexpr Type RIGHT =
    MainChangeLane_Type_RIGHT;
  static inline bool Type_IsValid(int value) {
    return MainChangeLane_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MainChangeLane_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MainChangeLane_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MainChangeLane_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return MainChangeLane_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MainChangeLane_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return MainChangeLane_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultLaneFieldNumber = 2,
    kDefaultLaneStopFieldNumber = 3,
    kTargetLaneStopFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated .apollo.planning.TargetLane default_lane = 2;
  int default_lane_size() const;
  private:
  int _internal_default_lane_size() const;
  public:
  void clear_default_lane();
  ::apollo::planning::TargetLane* mutable_default_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >*
      mutable_default_lane();
  private:
  const ::apollo::planning::TargetLane& _internal_default_lane(int index) const;
  ::apollo::planning::TargetLane* _internal_add_default_lane();
  public:
  const ::apollo::planning::TargetLane& default_lane(int index) const;
  ::apollo::planning::TargetLane* add_default_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >&
      default_lane() const;

  // optional .apollo.planning.MainStop default_lane_stop = 3;
  bool has_default_lane_stop() const;
  private:
  bool _internal_has_default_lane_stop() const;
  public:
  void clear_default_lane_stop();
  const ::apollo::planning::MainStop& default_lane_stop() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainStop* release_default_lane_stop();
  ::apollo::planning::MainStop* mutable_default_lane_stop();
  void set_allocated_default_lane_stop(::apollo::planning::MainStop* default_lane_stop);
  private:
  const ::apollo::planning::MainStop& _internal_default_lane_stop() const;
  ::apollo::planning::MainStop* _internal_mutable_default_lane_stop();
  public:
  void unsafe_arena_set_allocated_default_lane_stop(
      ::apollo::planning::MainStop* default_lane_stop);
  ::apollo::planning::MainStop* unsafe_arena_release_default_lane_stop();

  // optional .apollo.planning.MainStop target_lane_stop = 4;
  bool has_target_lane_stop() const;
  private:
  bool _internal_has_target_lane_stop() const;
  public:
  void clear_target_lane_stop();
  const ::apollo::planning::MainStop& target_lane_stop() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainStop* release_target_lane_stop();
  ::apollo::planning::MainStop* mutable_target_lane_stop();
  void set_allocated_target_lane_stop(::apollo::planning::MainStop* target_lane_stop);
  private:
  const ::apollo::planning::MainStop& _internal_target_lane_stop() const;
  ::apollo::planning::MainStop* _internal_mutable_target_lane_stop();
  public:
  void unsafe_arena_set_allocated_target_lane_stop(
      ::apollo::planning::MainStop* target_lane_stop);
  ::apollo::planning::MainStop* unsafe_arena_release_target_lane_stop();

  // optional .apollo.planning.MainChangeLane.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::planning::MainChangeLane_Type type() const;
  void set_type(::apollo::planning::MainChangeLane_Type value);
  private:
  ::apollo::planning::MainChangeLane_Type _internal_type() const;
  void _internal_set_type(::apollo::planning::MainChangeLane_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainChangeLane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane > default_lane_;
    ::apollo::planning::MainStop* default_lane_stop_;
    ::apollo::planning::MainStop* target_lane_stop_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainMissionComplete final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainMissionComplete) */ {
 public:
  inline MainMissionComplete() : MainMissionComplete(nullptr) {}
  ~MainMissionComplete() override;
  explicit PROTOBUF_CONSTEXPR MainMissionComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainMissionComplete(const MainMissionComplete& from);
  MainMissionComplete(MainMissionComplete&& from) noexcept
    : MainMissionComplete() {
    *this = ::std::move(from);
  }

  inline MainMissionComplete& operator=(const MainMissionComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainMissionComplete& operator=(MainMissionComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainMissionComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainMissionComplete* internal_default_instance() {
    return reinterpret_cast<const MainMissionComplete*>(
               &_MainMissionComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MainMissionComplete& a, MainMissionComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(MainMissionComplete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainMissionComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainMissionComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainMissionComplete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainMissionComplete& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainMissionComplete& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainMissionComplete* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainMissionComplete";
  }
  protected:
  explicit MainMissionComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopPointFieldNumber = 1,
    kStopHeadingFieldNumber = 2,
  };
  // optional .apollo.common.PointENU stop_point = 1;
  bool has_stop_point() const;
  private:
  bool _internal_has_stop_point() const;
  public:
  void clear_stop_point();
  const ::apollo::common::PointENU& stop_point() const;
  PROTOBUF_NODISCARD ::apollo::common::PointENU* release_stop_point();
  ::apollo::common::PointENU* mutable_stop_point();
  void set_allocated_stop_point(::apollo::common::PointENU* stop_point);
  private:
  const ::apollo::common::PointENU& _internal_stop_point() const;
  ::apollo::common::PointENU* _internal_mutable_stop_point();
  public:
  void unsafe_arena_set_allocated_stop_point(
      ::apollo::common::PointENU* stop_point);
  ::apollo::common::PointENU* unsafe_arena_release_stop_point();

  // optional double stop_heading = 2;
  bool has_stop_heading() const;
  private:
  bool _internal_has_stop_heading() const;
  public:
  void clear_stop_heading();
  double stop_heading() const;
  void set_stop_heading(double value);
  private:
  double _internal_stop_heading() const;
  void _internal_set_stop_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainMissionComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::common::PointENU* stop_point_;
    double stop_heading_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainNotReady final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainNotReady) */ {
 public:
  inline MainNotReady() : MainNotReady(nullptr) {}
  ~MainNotReady() override;
  explicit PROTOBUF_CONSTEXPR MainNotReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainNotReady(const MainNotReady& from);
  MainNotReady(MainNotReady&& from) noexcept
    : MainNotReady() {
    *this = ::std::move(from);
  }

  inline MainNotReady& operator=(const MainNotReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainNotReady& operator=(MainNotReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainNotReady& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainNotReady* internal_default_instance() {
    return reinterpret_cast<const MainNotReady*>(
               &_MainNotReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MainNotReady& a, MainNotReady& b) {
    a.Swap(&b);
  }
  inline void Swap(MainNotReady* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainNotReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainNotReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainNotReady>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainNotReady& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainNotReady& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainNotReady* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainNotReady";
  }
  protected:
  explicit MainNotReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // optional string reason = 1;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainNotReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainParking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainParking) */ {
 public:
  inline MainParking() : MainParking(nullptr) {}
  ~MainParking() override;
  explicit PROTOBUF_CONSTEXPR MainParking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainParking(const MainParking& from);
  MainParking(MainParking&& from) noexcept
    : MainParking() {
    *this = ::std::move(from);
  }

  inline MainParking& operator=(const MainParking& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainParking& operator=(MainParking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainParking& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainParking* internal_default_instance() {
    return reinterpret_cast<const MainParking*>(
               &_MainParking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MainParking& a, MainParking& b) {
    a.Swap(&b);
  }
  inline void Swap(MainParking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainParking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainParking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainParking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainParking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainParking& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainParking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainParking";
  }
  protected:
  explicit MainParking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MainParking_ParkingStatus ParkingStatus;
  static constexpr ParkingStatus IN_PARKING =
    MainParking_ParkingStatus_IN_PARKING;
  static inline bool ParkingStatus_IsValid(int value) {
    return MainParking_ParkingStatus_IsValid(value);
  }
  static constexpr ParkingStatus ParkingStatus_MIN =
    MainParking_ParkingStatus_ParkingStatus_MIN;
  static constexpr ParkingStatus ParkingStatus_MAX =
    MainParking_ParkingStatus_ParkingStatus_MAX;
  static constexpr int ParkingStatus_ARRAYSIZE =
    MainParking_ParkingStatus_ParkingStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParkingStatus_descriptor() {
    return MainParking_ParkingStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ParkingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParkingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParkingStatus_Name.");
    return MainParking_ParkingStatus_Name(enum_t_value);
  }
  static inline bool ParkingStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ParkingStatus* value) {
    return MainParking_ParkingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional .apollo.planning.MainParking.ParkingStatus status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::apollo::planning::MainParking_ParkingStatus status() const;
  void set_status(::apollo::planning::MainParking_ParkingStatus value);
  private:
  ::apollo::planning::MainParking_ParkingStatus _internal_status() const;
  void _internal_set_status(::apollo::planning::MainParking_ParkingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.MainParking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class MainDecision final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MainDecision) */ {
 public:
  inline MainDecision() : MainDecision(nullptr) {}
  ~MainDecision() override;
  explicit PROTOBUF_CONSTEXPR MainDecision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainDecision(const MainDecision& from);
  MainDecision(MainDecision&& from) noexcept
    : MainDecision() {
    *this = ::std::move(from);
  }

  inline MainDecision& operator=(const MainDecision& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainDecision& operator=(MainDecision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainDecision& default_instance() {
    return *internal_default_instance();
  }
  enum TaskCase {
    kCruise = 1,
    kStop = 2,
    kEstop = 3,
    kChangeLane = 4,
    kMissionComplete = 6,
    kNotReady = 7,
    kParking = 8,
    TASK_NOT_SET = 0,
  };

  static inline const MainDecision* internal_default_instance() {
    return reinterpret_cast<const MainDecision*>(
               &_MainDecision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MainDecision& a, MainDecision& b) {
    a.Swap(&b);
  }
  inline void Swap(MainDecision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainDecision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainDecision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainDecision>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainDecision& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MainDecision& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainDecision* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MainDecision";
  }
  protected:
  explicit MainDecision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetLaneFieldNumber = 5,
    kCruiseFieldNumber = 1,
    kStopFieldNumber = 2,
    kEstopFieldNumber = 3,
    kChangeLaneFieldNumber = 4,
    kMissionCompleteFieldNumber = 6,
    kNotReadyFieldNumber = 7,
    kParkingFieldNumber = 8,
  };
  // repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
  PROTOBUF_DEPRECATED int target_lane_size() const;
  private:
  int _internal_target_lane_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_target_lane();
  PROTOBUF_DEPRECATED ::apollo::planning::TargetLane* mutable_target_lane(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >*
      mutable_target_lane();
  private:
  const ::apollo::planning::TargetLane& _internal_target_lane(int index) const;
  ::apollo::planning::TargetLane* _internal_add_target_lane();
  public:
  PROTOBUF_DEPRECATED const ::apollo::planning::TargetLane& target_lane(int index) const;
  PROTOBUF_DEPRECATED ::apollo::planning::TargetLane* add_target_lane();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >&
      target_lane() const;

  // .apollo.planning.MainCruise cruise = 1;
  bool has_cruise() const;
  private:
  bool _internal_has_cruise() const;
  public:
  void clear_cruise();
  const ::apollo::planning::MainCruise& cruise() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainCruise* release_cruise();
  ::apollo::planning::MainCruise* mutable_cruise();
  void set_allocated_cruise(::apollo::planning::MainCruise* cruise);
  private:
  const ::apollo::planning::MainCruise& _internal_cruise() const;
  ::apollo::planning::MainCruise* _internal_mutable_cruise();
  public:
  void unsafe_arena_set_allocated_cruise(
      ::apollo::planning::MainCruise* cruise);
  ::apollo::planning::MainCruise* unsafe_arena_release_cruise();

  // .apollo.planning.MainStop stop = 2;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const ::apollo::planning::MainStop& stop() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainStop* release_stop();
  ::apollo::planning::MainStop* mutable_stop();
  void set_allocated_stop(::apollo::planning::MainStop* stop);
  private:
  const ::apollo::planning::MainStop& _internal_stop() const;
  ::apollo::planning::MainStop* _internal_mutable_stop();
  public:
  void unsafe_arena_set_allocated_stop(
      ::apollo::planning::MainStop* stop);
  ::apollo::planning::MainStop* unsafe_arena_release_stop();

  // .apollo.planning.MainEmergencyStop estop = 3;
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  const ::apollo::planning::MainEmergencyStop& estop() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainEmergencyStop* release_estop();
  ::apollo::planning::MainEmergencyStop* mutable_estop();
  void set_allocated_estop(::apollo::planning::MainEmergencyStop* estop);
  private:
  const ::apollo::planning::MainEmergencyStop& _internal_estop() const;
  ::apollo::planning::MainEmergencyStop* _internal_mutable_estop();
  public:
  void unsafe_arena_set_allocated_estop(
      ::apollo::planning::MainEmergencyStop* estop);
  ::apollo::planning::MainEmergencyStop* unsafe_arena_release_estop();

  // .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_change_lane() const;
  private:
  bool _internal_has_change_lane() const;
  public:
  PROTOBUF_DEPRECATED void clear_change_lane();
  PROTOBUF_DEPRECATED const ::apollo::planning::MainChangeLane& change_lane() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::planning::MainChangeLane* release_change_lane();
  PROTOBUF_DEPRECATED ::apollo::planning::MainChangeLane* mutable_change_lane();
  PROTOBUF_DEPRECATED void set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane);
  private:
  const ::apollo::planning::MainChangeLane& _internal_change_lane() const;
  ::apollo::planning::MainChangeLane* _internal_mutable_change_lane();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_change_lane(
      ::apollo::planning::MainChangeLane* change_lane);
  PROTOBUF_DEPRECATED ::apollo::planning::MainChangeLane* unsafe_arena_release_change_lane();

  // .apollo.planning.MainMissionComplete mission_complete = 6;
  bool has_mission_complete() const;
  private:
  bool _internal_has_mission_complete() const;
  public:
  void clear_mission_complete();
  const ::apollo::planning::MainMissionComplete& mission_complete() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainMissionComplete* release_mission_complete();
  ::apollo::planning::MainMissionComplete* mutable_mission_complete();
  void set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete);
  private:
  const ::apollo::planning::MainMissionComplete& _internal_mission_complete() const;
  ::apollo::planning::MainMissionComplete* _internal_mutable_mission_complete();
  public:
  void unsafe_arena_set_allocated_mission_complete(
      ::apollo::planning::MainMissionComplete* mission_complete);
  ::apollo::planning::MainMissionComplete* unsafe_arena_release_mission_complete();

  // .apollo.planning.MainNotReady not_ready = 7;
  bool has_not_ready() const;
  private:
  bool _internal_has_not_ready() const;
  public:
  void clear_not_ready();
  const ::apollo::planning::MainNotReady& not_ready() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainNotReady* release_not_ready();
  ::apollo::planning::MainNotReady* mutable_not_ready();
  void set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready);
  private:
  const ::apollo::planning::MainNotReady& _internal_not_ready() const;
  ::apollo::planning::MainNotReady* _internal_mutable_not_ready();
  public:
  void unsafe_arena_set_allocated_not_ready(
      ::apollo::planning::MainNotReady* not_ready);
  ::apollo::planning::MainNotReady* unsafe_arena_release_not_ready();

  // .apollo.planning.MainParking parking = 8;
  bool has_parking() const;
  private:
  bool _internal_has_parking() const;
  public:
  void clear_parking();
  const ::apollo::planning::MainParking& parking() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainParking* release_parking();
  ::apollo::planning::MainParking* mutable_parking();
  void set_allocated_parking(::apollo::planning::MainParking* parking);
  private:
  const ::apollo::planning::MainParking& _internal_parking() const;
  ::apollo::planning::MainParking* _internal_mutable_parking();
  public:
  void unsafe_arena_set_allocated_parking(
      ::apollo::planning::MainParking* parking);
  ::apollo::planning::MainParking* unsafe_arena_release_parking();

  void clear_task();
  TaskCase task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.MainDecision)
 private:
  class _Internal;
  void set_has_cruise();
  void set_has_stop();
  void set_has_estop();
  void set_has_change_lane();
  void set_has_mission_complete();
  void set_has_not_ready();
  void set_has_parking();

  inline bool has_task() const;
  inline void clear_has_task();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane > target_lane_;
    union TaskUnion {
      constexpr TaskUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::MainCruise* cruise_;
      ::apollo::planning::MainStop* stop_;
      ::apollo::planning::MainEmergencyStop* estop_;
      ::apollo::planning::MainChangeLane* change_lane_;
      ::apollo::planning::MainMissionComplete* mission_complete_;
      ::apollo::planning::MainNotReady* not_ready_;
      ::apollo::planning::MainParking* parking_;
    } task_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// -------------------------------------------------------------------

class DecisionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DecisionResult) */ {
 public:
  inline DecisionResult() : DecisionResult(nullptr) {}
  ~DecisionResult() override;
  explicit PROTOBUF_CONSTEXPR DecisionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecisionResult(const DecisionResult& from);
  DecisionResult(DecisionResult&& from) noexcept
    : DecisionResult() {
    *this = ::std::move(from);
  }

  inline DecisionResult& operator=(const DecisionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionResult& operator=(DecisionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionResult* internal_default_instance() {
    return reinterpret_cast<const DecisionResult*>(
               &_DecisionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DecisionResult& a, DecisionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecisionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DecisionResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecisionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DecisionResult";
  }
  protected:
  explicit DecisionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainDecisionFieldNumber = 1,
    kObjectDecisionFieldNumber = 2,
    kVehicleSignalFieldNumber = 3,
  };
  // optional .apollo.planning.MainDecision main_decision = 1;
  bool has_main_decision() const;
  private:
  bool _internal_has_main_decision() const;
  public:
  void clear_main_decision();
  const ::apollo::planning::MainDecision& main_decision() const;
  PROTOBUF_NODISCARD ::apollo::planning::MainDecision* release_main_decision();
  ::apollo::planning::MainDecision* mutable_main_decision();
  void set_allocated_main_decision(::apollo::planning::MainDecision* main_decision);
  private:
  const ::apollo::planning::MainDecision& _internal_main_decision() const;
  ::apollo::planning::MainDecision* _internal_mutable_main_decision();
  public:
  void unsafe_arena_set_allocated_main_decision(
      ::apollo::planning::MainDecision* main_decision);
  ::apollo::planning::MainDecision* unsafe_arena_release_main_decision();

  // optional .apollo.planning.ObjectDecisions object_decision = 2;
  bool has_object_decision() const;
  private:
  bool _internal_has_object_decision() const;
  public:
  void clear_object_decision();
  const ::apollo::planning::ObjectDecisions& object_decision() const;
  PROTOBUF_NODISCARD ::apollo::planning::ObjectDecisions* release_object_decision();
  ::apollo::planning::ObjectDecisions* mutable_object_decision();
  void set_allocated_object_decision(::apollo::planning::ObjectDecisions* object_decision);
  private:
  const ::apollo::planning::ObjectDecisions& _internal_object_decision() const;
  ::apollo::planning::ObjectDecisions* _internal_mutable_object_decision();
  public:
  void unsafe_arena_set_allocated_object_decision(
      ::apollo::planning::ObjectDecisions* object_decision);
  ::apollo::planning::ObjectDecisions* unsafe_arena_release_object_decision();

  // optional .apollo.common.VehicleSignal vehicle_signal = 3;
  bool has_vehicle_signal() const;
  private:
  bool _internal_has_vehicle_signal() const;
  public:
  void clear_vehicle_signal();
  const ::apollo::common::VehicleSignal& vehicle_signal() const;
  PROTOBUF_NODISCARD ::apollo::common::VehicleSignal* release_vehicle_signal();
  ::apollo::common::VehicleSignal* mutable_vehicle_signal();
  void set_allocated_vehicle_signal(::apollo::common::VehicleSignal* vehicle_signal);
  private:
  const ::apollo::common::VehicleSignal& _internal_vehicle_signal() const;
  ::apollo::common::VehicleSignal* _internal_mutable_vehicle_signal();
  public:
  void unsafe_arena_set_allocated_vehicle_signal(
      ::apollo::common::VehicleSignal* vehicle_signal);
  ::apollo::common::VehicleSignal* unsafe_arena_release_vehicle_signal();

  // @@protoc_insertion_point(class_scope:apollo.planning.DecisionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::MainDecision* main_decision_;
    ::apollo::planning::ObjectDecisions* object_decision_;
    ::apollo::common::VehicleSignal* vehicle_signal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fdecision_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TargetLane

// optional string id = 1;
inline bool TargetLane::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TargetLane::has_id() const {
  return _internal_has_id();
}
inline void TargetLane::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TargetLane::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TargetLane::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.id)
}
inline std::string* TargetLane::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TargetLane.id)
  return _s;
}
inline const std::string& TargetLane::_internal_id() const {
  return _impl_.id_.Get();
}
inline void TargetLane::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* TargetLane::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* TargetLane::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.TargetLane.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TargetLane::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TargetLane.id)
}

// optional double start_s = 2;
inline bool TargetLane::_internal_has_start_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TargetLane::has_start_s() const {
  return _internal_has_start_s();
}
inline void TargetLane::clear_start_s() {
  _impl_.start_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TargetLane::_internal_start_s() const {
  return _impl_.start_s_;
}
inline double TargetLane::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.start_s)
  return _internal_start_s();
}
inline void TargetLane::_internal_set_start_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_s_ = value;
}
inline void TargetLane::set_start_s(double value) {
  _internal_set_start_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.start_s)
}

// optional double end_s = 3;
inline bool TargetLane::_internal_has_end_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TargetLane::has_end_s() const {
  return _internal_has_end_s();
}
inline void TargetLane::clear_end_s() {
  _impl_.end_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double TargetLane::_internal_end_s() const {
  return _impl_.end_s_;
}
inline double TargetLane::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.end_s)
  return _internal_end_s();
}
inline void TargetLane::_internal_set_end_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_s_ = value;
}
inline void TargetLane::set_end_s(double value) {
  _internal_set_end_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.end_s)
}

// optional double speed_limit = 4;
inline bool TargetLane::_internal_has_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TargetLane::has_speed_limit() const {
  return _internal_has_speed_limit();
}
inline void TargetLane::clear_speed_limit() {
  _impl_.speed_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double TargetLane::_internal_speed_limit() const {
  return _impl_.speed_limit_;
}
inline double TargetLane::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TargetLane.speed_limit)
  return _internal_speed_limit();
}
inline void TargetLane::_internal_set_speed_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.speed_limit_ = value;
}
inline void TargetLane::set_speed_limit(double value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TargetLane.speed_limit)
}

// -------------------------------------------------------------------

// ObjectIgnore

// -------------------------------------------------------------------

// ObjectStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
inline bool ObjectStop::_internal_has_reason_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjectStop::has_reason_code() const {
  return _internal_has_reason_code();
}
inline void ObjectStop::clear_reason_code() {
  _impl_.reason_code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::planning::StopReasonCode ObjectStop::_internal_reason_code() const {
  return static_cast< ::apollo::planning::StopReasonCode >(_impl_.reason_code_);
}
inline ::apollo::planning::StopReasonCode ObjectStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.reason_code)
  return _internal_reason_code();
}
inline void ObjectStop::_internal_set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.reason_code_ = value;
}
inline void ObjectStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  _internal_set_reason_code(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.reason_code)
}

// optional double distance_s = 2;
inline bool ObjectStop::_internal_has_distance_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectStop::has_distance_s() const {
  return _internal_has_distance_s();
}
inline void ObjectStop::clear_distance_s() {
  _impl_.distance_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ObjectStop::_internal_distance_s() const {
  return _impl_.distance_s_;
}
inline double ObjectStop::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.distance_s)
  return _internal_distance_s();
}
inline void ObjectStop::_internal_set_distance_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_s_ = value;
}
inline void ObjectStop::set_distance_s(double value) {
  _internal_set_distance_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.distance_s)
}

// optional .apollo.common.PointENU stop_point = 3;
inline bool ObjectStop::_internal_has_stop_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_point_ != nullptr);
  return value;
}
inline bool ObjectStop::has_stop_point() const {
  return _internal_has_stop_point();
}
inline const ::apollo::common::PointENU& ObjectStop::_internal_stop_point() const {
  const ::apollo::common::PointENU* p = _impl_.stop_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& ObjectStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_point)
  return _internal_stop_point();
}
inline void ObjectStop::unsafe_arena_set_allocated_stop_point(
    ::apollo::common::PointENU* stop_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  _impl_.stop_point_ = stop_point;
  if (stop_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectStop.stop_point)
}
inline ::apollo::common::PointENU* ObjectStop::release_stop_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* ObjectStop::unsafe_arena_release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectStop.stop_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* ObjectStop::_internal_mutable_stop_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stop_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.stop_point_ = p;
  }
  return _impl_.stop_point_;
}
inline ::apollo::common::PointENU* ObjectStop::mutable_stop_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_stop_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.stop_point)
  return _msg;
}
inline void ObjectStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  if (stop_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_point));
    if (message_arena != submessage_arena) {
      stop_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stop_point_ = stop_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectStop.stop_point)
}

// optional double stop_heading = 4;
inline bool ObjectStop::_internal_has_stop_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjectStop::has_stop_heading() const {
  return _internal_has_stop_heading();
}
inline void ObjectStop::clear_stop_heading() {
  _impl_.stop_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ObjectStop::_internal_stop_heading() const {
  return _impl_.stop_heading_;
}
inline double ObjectStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.stop_heading)
  return _internal_stop_heading();
}
inline void ObjectStop::_internal_set_stop_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stop_heading_ = value;
}
inline void ObjectStop::set_stop_heading(double value) {
  _internal_set_stop_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.stop_heading)
}

// repeated string wait_for_obstacle = 5;
inline int ObjectStop::_internal_wait_for_obstacle_size() const {
  return _impl_.wait_for_obstacle_.size();
}
inline int ObjectStop::wait_for_obstacle_size() const {
  return _internal_wait_for_obstacle_size();
}
inline void ObjectStop::clear_wait_for_obstacle() {
  _impl_.wait_for_obstacle_.Clear();
}
inline std::string* ObjectStop::add_wait_for_obstacle() {
  std::string* _s = _internal_add_wait_for_obstacle();
  // @@protoc_insertion_point(field_add_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return _s;
}
inline const std::string& ObjectStop::_internal_wait_for_obstacle(int index) const {
  return _impl_.wait_for_obstacle_.Get(index);
}
inline const std::string& ObjectStop::wait_for_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStop.wait_for_obstacle)
  return _internal_wait_for_obstacle(index);
}
inline std::string* ObjectStop::mutable_wait_for_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStop.wait_for_obstacle)
  return _impl_.wait_for_obstacle_.Mutable(index);
}
inline void ObjectStop::set_wait_for_obstacle(int index, const std::string& value) {
  _impl_.wait_for_obstacle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::set_wait_for_obstacle(int index, std::string&& value) {
  _impl_.wait_for_obstacle_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::set_wait_for_obstacle(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.wait_for_obstacle_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::set_wait_for_obstacle(int index, const char* value, size_t size) {
  _impl_.wait_for_obstacle_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline std::string* ObjectStop::_internal_add_wait_for_obstacle() {
  return _impl_.wait_for_obstacle_.Add();
}
inline void ObjectStop::add_wait_for_obstacle(const std::string& value) {
  _impl_.wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::add_wait_for_obstacle(std::string&& value) {
  _impl_.wait_for_obstacle_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::add_wait_for_obstacle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.wait_for_obstacle_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline void ObjectStop::add_wait_for_obstacle(const char* value, size_t size) {
  _impl_.wait_for_obstacle_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.planning.ObjectStop.wait_for_obstacle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ObjectStop::wait_for_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return _impl_.wait_for_obstacle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ObjectStop::mutable_wait_for_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectStop.wait_for_obstacle)
  return &_impl_.wait_for_obstacle_;
}

// -------------------------------------------------------------------

// ObjectNudge

// optional .apollo.planning.ObjectNudge.Type type = 1;
inline bool ObjectNudge::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectNudge::has_type() const {
  return _internal_has_type();
}
inline void ObjectNudge::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning::ObjectNudge_Type ObjectNudge::_internal_type() const {
  return static_cast< ::apollo::planning::ObjectNudge_Type >(_impl_.type_);
}
inline ::apollo::planning::ObjectNudge_Type ObjectNudge::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.type)
  return _internal_type();
}
inline void ObjectNudge::_internal_set_type(::apollo::planning::ObjectNudge_Type value) {
  assert(::apollo::planning::ObjectNudge_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void ObjectNudge::set_type(::apollo::planning::ObjectNudge_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.type)
}

// optional double distance_l = 2;
inline bool ObjectNudge::_internal_has_distance_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectNudge::has_distance_l() const {
  return _internal_has_distance_l();
}
inline void ObjectNudge::clear_distance_l() {
  _impl_.distance_l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ObjectNudge::_internal_distance_l() const {
  return _impl_.distance_l_;
}
inline double ObjectNudge::distance_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectNudge.distance_l)
  return _internal_distance_l();
}
inline void ObjectNudge::_internal_set_distance_l(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.distance_l_ = value;
}
inline void ObjectNudge::set_distance_l(double value) {
  _internal_set_distance_l(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectNudge.distance_l)
}

// -------------------------------------------------------------------

// ObjectYield

// optional double distance_s = 1;
inline bool ObjectYield::_internal_has_distance_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectYield::has_distance_s() const {
  return _internal_has_distance_s();
}
inline void ObjectYield::clear_distance_s() {
  _impl_.distance_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ObjectYield::_internal_distance_s() const {
  return _impl_.distance_s_;
}
inline double ObjectYield::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.distance_s)
  return _internal_distance_s();
}
inline void ObjectYield::_internal_set_distance_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_s_ = value;
}
inline void ObjectYield::set_distance_s(double value) {
  _internal_set_distance_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectYield::_internal_has_fence_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fence_point_ != nullptr);
  return value;
}
inline bool ObjectYield::has_fence_point() const {
  return _internal_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectYield::_internal_fence_point() const {
  const ::apollo::common::PointENU* p = _impl_.fence_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& ObjectYield::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_point)
  return _internal_fence_point();
}
inline void ObjectYield::unsafe_arena_set_allocated_fence_point(
    ::apollo::common::PointENU* fence_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  _impl_.fence_point_ = fence_point;
  if (fence_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectYield.fence_point)
}
inline ::apollo::common::PointENU* ObjectYield::release_fence_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* ObjectYield::unsafe_arena_release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectYield.fence_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* ObjectYield::_internal_mutable_fence_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fence_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.fence_point_ = p;
  }
  return _impl_.fence_point_;
}
inline ::apollo::common::PointENU* ObjectYield::mutable_fence_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_fence_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectYield.fence_point)
  return _msg;
}
inline void ObjectYield::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  if (fence_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_point));
    if (message_arena != submessage_arena) {
      fence_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fence_point_ = fence_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectYield.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectYield::_internal_has_fence_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjectYield::has_fence_heading() const {
  return _internal_has_fence_heading();
}
inline void ObjectYield::clear_fence_heading() {
  _impl_.fence_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ObjectYield::_internal_fence_heading() const {
  return _impl_.fence_heading_;
}
inline double ObjectYield::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.fence_heading)
  return _internal_fence_heading();
}
inline void ObjectYield::_internal_set_fence_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fence_heading_ = value;
}
inline void ObjectYield::set_fence_heading(double value) {
  _internal_set_fence_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.fence_heading)
}

// optional double time_buffer = 4;
inline bool ObjectYield::_internal_has_time_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjectYield::has_time_buffer() const {
  return _internal_has_time_buffer();
}
inline void ObjectYield::clear_time_buffer() {
  _impl_.time_buffer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ObjectYield::_internal_time_buffer() const {
  return _impl_.time_buffer_;
}
inline double ObjectYield::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectYield.time_buffer)
  return _internal_time_buffer();
}
inline void ObjectYield::_internal_set_time_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_buffer_ = value;
}
inline void ObjectYield::set_time_buffer(double value) {
  _internal_set_time_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectYield.time_buffer)
}

// -------------------------------------------------------------------

// ObjectFollow

// optional double distance_s = 1;
inline bool ObjectFollow::_internal_has_distance_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectFollow::has_distance_s() const {
  return _internal_has_distance_s();
}
inline void ObjectFollow::clear_distance_s() {
  _impl_.distance_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ObjectFollow::_internal_distance_s() const {
  return _impl_.distance_s_;
}
inline double ObjectFollow::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.distance_s)
  return _internal_distance_s();
}
inline void ObjectFollow::_internal_set_distance_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_s_ = value;
}
inline void ObjectFollow::set_distance_s(double value) {
  _internal_set_distance_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectFollow::_internal_has_fence_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fence_point_ != nullptr);
  return value;
}
inline bool ObjectFollow::has_fence_point() const {
  return _internal_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectFollow::_internal_fence_point() const {
  const ::apollo::common::PointENU* p = _impl_.fence_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& ObjectFollow::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_point)
  return _internal_fence_point();
}
inline void ObjectFollow::unsafe_arena_set_allocated_fence_point(
    ::apollo::common::PointENU* fence_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  _impl_.fence_point_ = fence_point;
  if (fence_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectFollow.fence_point)
}
inline ::apollo::common::PointENU* ObjectFollow::release_fence_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* ObjectFollow::unsafe_arena_release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectFollow.fence_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* ObjectFollow::_internal_mutable_fence_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fence_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.fence_point_ = p;
  }
  return _impl_.fence_point_;
}
inline ::apollo::common::PointENU* ObjectFollow::mutable_fence_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_fence_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectFollow.fence_point)
  return _msg;
}
inline void ObjectFollow::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  if (fence_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_point));
    if (message_arena != submessage_arena) {
      fence_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fence_point_ = fence_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectFollow.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectFollow::_internal_has_fence_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjectFollow::has_fence_heading() const {
  return _internal_has_fence_heading();
}
inline void ObjectFollow::clear_fence_heading() {
  _impl_.fence_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ObjectFollow::_internal_fence_heading() const {
  return _impl_.fence_heading_;
}
inline double ObjectFollow::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectFollow.fence_heading)
  return _internal_fence_heading();
}
inline void ObjectFollow::_internal_set_fence_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fence_heading_ = value;
}
inline void ObjectFollow::set_fence_heading(double value) {
  _internal_set_fence_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectFollow.fence_heading)
}

// -------------------------------------------------------------------

// ObjectOvertake

// optional double distance_s = 1;
inline bool ObjectOvertake::_internal_has_distance_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectOvertake::has_distance_s() const {
  return _internal_has_distance_s();
}
inline void ObjectOvertake::clear_distance_s() {
  _impl_.distance_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ObjectOvertake::_internal_distance_s() const {
  return _impl_.distance_s_;
}
inline double ObjectOvertake::distance_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.distance_s)
  return _internal_distance_s();
}
inline void ObjectOvertake::_internal_set_distance_s(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.distance_s_ = value;
}
inline void ObjectOvertake::set_distance_s(double value) {
  _internal_set_distance_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.distance_s)
}

// optional .apollo.common.PointENU fence_point = 2;
inline bool ObjectOvertake::_internal_has_fence_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fence_point_ != nullptr);
  return value;
}
inline bool ObjectOvertake::has_fence_point() const {
  return _internal_has_fence_point();
}
inline const ::apollo::common::PointENU& ObjectOvertake::_internal_fence_point() const {
  const ::apollo::common::PointENU* p = _impl_.fence_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& ObjectOvertake::fence_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_point)
  return _internal_fence_point();
}
inline void ObjectOvertake::unsafe_arena_set_allocated_fence_point(
    ::apollo::common::PointENU* fence_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  _impl_.fence_point_ = fence_point;
  if (fence_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectOvertake.fence_point)
}
inline ::apollo::common::PointENU* ObjectOvertake::release_fence_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* ObjectOvertake::unsafe_arena_release_fence_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectOvertake.fence_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.fence_point_;
  _impl_.fence_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* ObjectOvertake::_internal_mutable_fence_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fence_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.fence_point_ = p;
  }
  return _impl_.fence_point_;
}
inline ::apollo::common::PointENU* ObjectOvertake::mutable_fence_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_fence_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectOvertake.fence_point)
  return _msg;
}
inline void ObjectOvertake::set_allocated_fence_point(::apollo::common::PointENU* fence_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fence_point_);
  }
  if (fence_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fence_point));
    if (message_arena != submessage_arena) {
      fence_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fence_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fence_point_ = fence_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectOvertake.fence_point)
}

// optional double fence_heading = 3;
inline bool ObjectOvertake::_internal_has_fence_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ObjectOvertake::has_fence_heading() const {
  return _internal_has_fence_heading();
}
inline void ObjectOvertake::clear_fence_heading() {
  _impl_.fence_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ObjectOvertake::_internal_fence_heading() const {
  return _impl_.fence_heading_;
}
inline double ObjectOvertake::fence_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.fence_heading)
  return _internal_fence_heading();
}
inline void ObjectOvertake::_internal_set_fence_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fence_heading_ = value;
}
inline void ObjectOvertake::set_fence_heading(double value) {
  _internal_set_fence_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.fence_heading)
}

// optional double time_buffer = 4;
inline bool ObjectOvertake::_internal_has_time_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ObjectOvertake::has_time_buffer() const {
  return _internal_has_time_buffer();
}
inline void ObjectOvertake::clear_time_buffer() {
  _impl_.time_buffer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ObjectOvertake::_internal_time_buffer() const {
  return _impl_.time_buffer_;
}
inline double ObjectOvertake::time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectOvertake.time_buffer)
  return _internal_time_buffer();
}
inline void ObjectOvertake::_internal_set_time_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_buffer_ = value;
}
inline void ObjectOvertake::set_time_buffer(double value) {
  _internal_set_time_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectOvertake.time_buffer)
}

// -------------------------------------------------------------------

// ObjectSidePass

// optional .apollo.planning.ObjectSidePass.Type type = 1;
inline bool ObjectSidePass::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectSidePass::has_type() const {
  return _internal_has_type();
}
inline void ObjectSidePass::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::ObjectSidePass_Type ObjectSidePass::_internal_type() const {
  return static_cast< ::apollo::planning::ObjectSidePass_Type >(_impl_.type_);
}
inline ::apollo::planning::ObjectSidePass_Type ObjectSidePass::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectSidePass.type)
  return _internal_type();
}
inline void ObjectSidePass::_internal_set_type(::apollo::planning::ObjectSidePass_Type value) {
  assert(::apollo::planning::ObjectSidePass_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void ObjectSidePass::set_type(::apollo::planning::ObjectSidePass_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectSidePass.type)
}

// -------------------------------------------------------------------

// ObjectAvoid

// -------------------------------------------------------------------

// ObjectStatus

// optional .apollo.planning.ObjectMotionType motion_type = 1;
inline bool ObjectStatus::_internal_has_motion_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.motion_type_ != nullptr);
  return value;
}
inline bool ObjectStatus::has_motion_type() const {
  return _internal_has_motion_type();
}
inline void ObjectStatus::clear_motion_type() {
  if (_impl_.motion_type_ != nullptr) _impl_.motion_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::ObjectMotionType& ObjectStatus::_internal_motion_type() const {
  const ::apollo::planning::ObjectMotionType* p = _impl_.motion_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::ObjectMotionType&>(
      ::apollo::planning::_ObjectMotionType_default_instance_);
}
inline const ::apollo::planning::ObjectMotionType& ObjectStatus::motion_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStatus.motion_type)
  return _internal_motion_type();
}
inline void ObjectStatus::unsafe_arena_set_allocated_motion_type(
    ::apollo::planning::ObjectMotionType* motion_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_type_);
  }
  _impl_.motion_type_ = motion_type;
  if (motion_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectStatus.motion_type)
}
inline ::apollo::planning::ObjectMotionType* ObjectStatus::release_motion_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::ObjectMotionType* temp = _impl_.motion_type_;
  _impl_.motion_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::ObjectMotionType* ObjectStatus::unsafe_arena_release_motion_type() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectStatus.motion_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::ObjectMotionType* temp = _impl_.motion_type_;
  _impl_.motion_type_ = nullptr;
  return temp;
}
inline ::apollo::planning::ObjectMotionType* ObjectStatus::_internal_mutable_motion_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.motion_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ObjectMotionType>(GetArenaForAllocation());
    _impl_.motion_type_ = p;
  }
  return _impl_.motion_type_;
}
inline ::apollo::planning::ObjectMotionType* ObjectStatus::mutable_motion_type() {
  ::apollo::planning::ObjectMotionType* _msg = _internal_mutable_motion_type();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStatus.motion_type)
  return _msg;
}
inline void ObjectStatus::set_allocated_motion_type(::apollo::planning::ObjectMotionType* motion_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.motion_type_;
  }
  if (motion_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(motion_type);
    if (message_arena != submessage_arena) {
      motion_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.motion_type_ = motion_type;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectStatus.motion_type)
}

// optional .apollo.planning.ObjectDecisionType decision_type = 2;
inline bool ObjectStatus::_internal_has_decision_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_type_ != nullptr);
  return value;
}
inline bool ObjectStatus::has_decision_type() const {
  return _internal_has_decision_type();
}
inline void ObjectStatus::clear_decision_type() {
  if (_impl_.decision_type_ != nullptr) _impl_.decision_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::ObjectDecisionType& ObjectStatus::_internal_decision_type() const {
  const ::apollo::planning::ObjectDecisionType* p = _impl_.decision_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::ObjectDecisionType&>(
      ::apollo::planning::_ObjectDecisionType_default_instance_);
}
inline const ::apollo::planning::ObjectDecisionType& ObjectStatus::decision_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectStatus.decision_type)
  return _internal_decision_type();
}
inline void ObjectStatus::unsafe_arena_set_allocated_decision_type(
    ::apollo::planning::ObjectDecisionType* decision_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_type_);
  }
  _impl_.decision_type_ = decision_type;
  if (decision_type) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectStatus.decision_type)
}
inline ::apollo::planning::ObjectDecisionType* ObjectStatus::release_decision_type() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisionType* temp = _impl_.decision_type_;
  _impl_.decision_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::ObjectDecisionType* ObjectStatus::unsafe_arena_release_decision_type() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectStatus.decision_type)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisionType* temp = _impl_.decision_type_;
  _impl_.decision_type_ = nullptr;
  return temp;
}
inline ::apollo::planning::ObjectDecisionType* ObjectStatus::_internal_mutable_decision_type() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.decision_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ObjectDecisionType>(GetArenaForAllocation());
    _impl_.decision_type_ = p;
  }
  return _impl_.decision_type_;
}
inline ::apollo::planning::ObjectDecisionType* ObjectStatus::mutable_decision_type() {
  ::apollo::planning::ObjectDecisionType* _msg = _internal_mutable_decision_type();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectStatus.decision_type)
  return _msg;
}
inline void ObjectStatus::set_allocated_decision_type(::apollo::planning::ObjectDecisionType* decision_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.decision_type_;
  }
  if (decision_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decision_type);
    if (message_arena != submessage_arena) {
      decision_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.decision_type_ = decision_type;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectStatus.decision_type)
}

// -------------------------------------------------------------------

// ObjectStatic

// -------------------------------------------------------------------

// ObjectDynamic

// -------------------------------------------------------------------

// ObjectMotionType

// .apollo.planning.ObjectStatic static = 1;
inline bool ObjectMotionType::_internal_has_static_() const {
  return motion_tag_case() == kStatic;
}
inline bool ObjectMotionType::has_static_() const {
  return _internal_has_static_();
}
inline void ObjectMotionType::set_has_static_() {
  _impl_._oneof_case_[0] = kStatic;
}
inline void ObjectMotionType::clear_static_() {
  if (_internal_has_static_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.motion_tag_.static__;
    }
    clear_has_motion_tag();
  }
}
inline ::apollo::planning::ObjectStatic* ObjectMotionType::release_static_() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectMotionType.static)
  if (_internal_has_static_()) {
    clear_has_motion_tag();
    ::apollo::planning::ObjectStatic* temp = _impl_.motion_tag_.static__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.motion_tag_.static__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectStatic& ObjectMotionType::_internal_static_() const {
  return _internal_has_static_()
      ? *_impl_.motion_tag_.static__
      : reinterpret_cast< ::apollo::planning::ObjectStatic&>(::apollo::planning::_ObjectStatic_default_instance_);
}
inline const ::apollo::planning::ObjectStatic& ObjectMotionType::static_() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectMotionType.static)
  return _internal_static_();
}
inline ::apollo::planning::ObjectStatic* ObjectMotionType::unsafe_arena_release_static_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectMotionType.static)
  if (_internal_has_static_()) {
    clear_has_motion_tag();
    ::apollo::planning::ObjectStatic* temp = _impl_.motion_tag_.static__;
    _impl_.motion_tag_.static__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectMotionType::unsafe_arena_set_allocated_static_(::apollo::planning::ObjectStatic* static_) {
  clear_motion_tag();
  if (static_) {
    set_has_static_();
    _impl_.motion_tag_.static__ = static_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectMotionType.static)
}
inline ::apollo::planning::ObjectStatic* ObjectMotionType::_internal_mutable_static_() {
  if (!_internal_has_static_()) {
    clear_motion_tag();
    set_has_static_();
    _impl_.motion_tag_.static__ = CreateMaybeMessage< ::apollo::planning::ObjectStatic >(GetArenaForAllocation());
  }
  return _impl_.motion_tag_.static__;
}
inline ::apollo::planning::ObjectStatic* ObjectMotionType::mutable_static_() {
  ::apollo::planning::ObjectStatic* _msg = _internal_mutable_static_();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectMotionType.static)
  return _msg;
}

// .apollo.planning.ObjectDynamic dynamic = 2;
inline bool ObjectMotionType::_internal_has_dynamic() const {
  return motion_tag_case() == kDynamic;
}
inline bool ObjectMotionType::has_dynamic() const {
  return _internal_has_dynamic();
}
inline void ObjectMotionType::set_has_dynamic() {
  _impl_._oneof_case_[0] = kDynamic;
}
inline void ObjectMotionType::clear_dynamic() {
  if (_internal_has_dynamic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.motion_tag_.dynamic_;
    }
    clear_has_motion_tag();
  }
}
inline ::apollo::planning::ObjectDynamic* ObjectMotionType::release_dynamic() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectMotionType.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_motion_tag();
    ::apollo::planning::ObjectDynamic* temp = _impl_.motion_tag_.dynamic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.motion_tag_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectDynamic& ObjectMotionType::_internal_dynamic() const {
  return _internal_has_dynamic()
      ? *_impl_.motion_tag_.dynamic_
      : reinterpret_cast< ::apollo::planning::ObjectDynamic&>(::apollo::planning::_ObjectDynamic_default_instance_);
}
inline const ::apollo::planning::ObjectDynamic& ObjectMotionType::dynamic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectMotionType.dynamic)
  return _internal_dynamic();
}
inline ::apollo::planning::ObjectDynamic* ObjectMotionType::unsafe_arena_release_dynamic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectMotionType.dynamic)
  if (_internal_has_dynamic()) {
    clear_has_motion_tag();
    ::apollo::planning::ObjectDynamic* temp = _impl_.motion_tag_.dynamic_;
    _impl_.motion_tag_.dynamic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectMotionType::unsafe_arena_set_allocated_dynamic(::apollo::planning::ObjectDynamic* dynamic) {
  clear_motion_tag();
  if (dynamic) {
    set_has_dynamic();
    _impl_.motion_tag_.dynamic_ = dynamic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectMotionType.dynamic)
}
inline ::apollo::planning::ObjectDynamic* ObjectMotionType::_internal_mutable_dynamic() {
  if (!_internal_has_dynamic()) {
    clear_motion_tag();
    set_has_dynamic();
    _impl_.motion_tag_.dynamic_ = CreateMaybeMessage< ::apollo::planning::ObjectDynamic >(GetArenaForAllocation());
  }
  return _impl_.motion_tag_.dynamic_;
}
inline ::apollo::planning::ObjectDynamic* ObjectMotionType::mutable_dynamic() {
  ::apollo::planning::ObjectDynamic* _msg = _internal_mutable_dynamic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectMotionType.dynamic)
  return _msg;
}

inline bool ObjectMotionType::has_motion_tag() const {
  return motion_tag_case() != MOTION_TAG_NOT_SET;
}
inline void ObjectMotionType::clear_has_motion_tag() {
  _impl_._oneof_case_[0] = MOTION_TAG_NOT_SET;
}
inline ObjectMotionType::MotionTagCase ObjectMotionType::motion_tag_case() const {
  return ObjectMotionType::MotionTagCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectDecisionType

// .apollo.planning.ObjectIgnore ignore = 1;
inline bool ObjectDecisionType::_internal_has_ignore() const {
  return object_tag_case() == kIgnore;
}
inline bool ObjectDecisionType::has_ignore() const {
  return _internal_has_ignore();
}
inline void ObjectDecisionType::set_has_ignore() {
  _impl_._oneof_case_[0] = kIgnore;
}
inline void ObjectDecisionType::clear_ignore() {
  if (_internal_has_ignore()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.ignore_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::release_ignore() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.ignore)
  if (_internal_has_ignore()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectIgnore* temp = _impl_.object_tag_.ignore_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.ignore_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectIgnore& ObjectDecisionType::_internal_ignore() const {
  return _internal_has_ignore()
      ? *_impl_.object_tag_.ignore_
      : reinterpret_cast< ::apollo::planning::ObjectIgnore&>(::apollo::planning::_ObjectIgnore_default_instance_);
}
inline const ::apollo::planning::ObjectIgnore& ObjectDecisionType::ignore() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.ignore)
  return _internal_ignore();
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::unsafe_arena_release_ignore() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.ignore)
  if (_internal_has_ignore()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectIgnore* temp = _impl_.object_tag_.ignore_;
    _impl_.object_tag_.ignore_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_ignore(::apollo::planning::ObjectIgnore* ignore) {
  clear_object_tag();
  if (ignore) {
    set_has_ignore();
    _impl_.object_tag_.ignore_ = ignore;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.ignore)
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::_internal_mutable_ignore() {
  if (!_internal_has_ignore()) {
    clear_object_tag();
    set_has_ignore();
    _impl_.object_tag_.ignore_ = CreateMaybeMessage< ::apollo::planning::ObjectIgnore >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.ignore_;
}
inline ::apollo::planning::ObjectIgnore* ObjectDecisionType::mutable_ignore() {
  ::apollo::planning::ObjectIgnore* _msg = _internal_mutable_ignore();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.ignore)
  return _msg;
}

// .apollo.planning.ObjectStop stop = 2;
inline bool ObjectDecisionType::_internal_has_stop() const {
  return object_tag_case() == kStop;
}
inline bool ObjectDecisionType::has_stop() const {
  return _internal_has_stop();
}
inline void ObjectDecisionType::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void ObjectDecisionType::clear_stop() {
  if (_internal_has_stop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.stop_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.stop)
  if (_internal_has_stop()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectStop* temp = _impl_.object_tag_.stop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectStop& ObjectDecisionType::_internal_stop() const {
  return _internal_has_stop()
      ? *_impl_.object_tag_.stop_
      : reinterpret_cast< ::apollo::planning::ObjectStop&>(::apollo::planning::_ObjectStop_default_instance_);
}
inline const ::apollo::planning::ObjectStop& ObjectDecisionType::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.stop)
  return _internal_stop();
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.stop)
  if (_internal_has_stop()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectStop* temp = _impl_.object_tag_.stop_;
    _impl_.object_tag_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_stop(::apollo::planning::ObjectStop* stop) {
  clear_object_tag();
  if (stop) {
    set_has_stop();
    _impl_.object_tag_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.stop)
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_object_tag();
    set_has_stop();
    _impl_.object_tag_.stop_ = CreateMaybeMessage< ::apollo::planning::ObjectStop >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.stop_;
}
inline ::apollo::planning::ObjectStop* ObjectDecisionType::mutable_stop() {
  ::apollo::planning::ObjectStop* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.stop)
  return _msg;
}

// .apollo.planning.ObjectFollow follow = 3;
inline bool ObjectDecisionType::_internal_has_follow() const {
  return object_tag_case() == kFollow;
}
inline bool ObjectDecisionType::has_follow() const {
  return _internal_has_follow();
}
inline void ObjectDecisionType::set_has_follow() {
  _impl_._oneof_case_[0] = kFollow;
}
inline void ObjectDecisionType::clear_follow() {
  if (_internal_has_follow()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.follow_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::release_follow() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.follow)
  if (_internal_has_follow()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectFollow* temp = _impl_.object_tag_.follow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.follow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectFollow& ObjectDecisionType::_internal_follow() const {
  return _internal_has_follow()
      ? *_impl_.object_tag_.follow_
      : reinterpret_cast< ::apollo::planning::ObjectFollow&>(::apollo::planning::_ObjectFollow_default_instance_);
}
inline const ::apollo::planning::ObjectFollow& ObjectDecisionType::follow() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.follow)
  return _internal_follow();
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::unsafe_arena_release_follow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.follow)
  if (_internal_has_follow()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectFollow* temp = _impl_.object_tag_.follow_;
    _impl_.object_tag_.follow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_follow(::apollo::planning::ObjectFollow* follow) {
  clear_object_tag();
  if (follow) {
    set_has_follow();
    _impl_.object_tag_.follow_ = follow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.follow)
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::_internal_mutable_follow() {
  if (!_internal_has_follow()) {
    clear_object_tag();
    set_has_follow();
    _impl_.object_tag_.follow_ = CreateMaybeMessage< ::apollo::planning::ObjectFollow >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.follow_;
}
inline ::apollo::planning::ObjectFollow* ObjectDecisionType::mutable_follow() {
  ::apollo::planning::ObjectFollow* _msg = _internal_mutable_follow();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.follow)
  return _msg;
}

// .apollo.planning.ObjectYield yield = 4;
inline bool ObjectDecisionType::_internal_has_yield() const {
  return object_tag_case() == kYield;
}
inline bool ObjectDecisionType::has_yield() const {
  return _internal_has_yield();
}
inline void ObjectDecisionType::set_has_yield() {
  _impl_._oneof_case_[0] = kYield;
}
inline void ObjectDecisionType::clear_yield() {
  if (_internal_has_yield()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.yield_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::release_yield() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.yield)
  if (_internal_has_yield()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectYield* temp = _impl_.object_tag_.yield_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.yield_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectYield& ObjectDecisionType::_internal_yield() const {
  return _internal_has_yield()
      ? *_impl_.object_tag_.yield_
      : reinterpret_cast< ::apollo::planning::ObjectYield&>(::apollo::planning::_ObjectYield_default_instance_);
}
inline const ::apollo::planning::ObjectYield& ObjectDecisionType::yield() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.yield)
  return _internal_yield();
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::unsafe_arena_release_yield() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.yield)
  if (_internal_has_yield()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectYield* temp = _impl_.object_tag_.yield_;
    _impl_.object_tag_.yield_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_yield(::apollo::planning::ObjectYield* yield) {
  clear_object_tag();
  if (yield) {
    set_has_yield();
    _impl_.object_tag_.yield_ = yield;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.yield)
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::_internal_mutable_yield() {
  if (!_internal_has_yield()) {
    clear_object_tag();
    set_has_yield();
    _impl_.object_tag_.yield_ = CreateMaybeMessage< ::apollo::planning::ObjectYield >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.yield_;
}
inline ::apollo::planning::ObjectYield* ObjectDecisionType::mutable_yield() {
  ::apollo::planning::ObjectYield* _msg = _internal_mutable_yield();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.yield)
  return _msg;
}

// .apollo.planning.ObjectOvertake overtake = 5;
inline bool ObjectDecisionType::_internal_has_overtake() const {
  return object_tag_case() == kOvertake;
}
inline bool ObjectDecisionType::has_overtake() const {
  return _internal_has_overtake();
}
inline void ObjectDecisionType::set_has_overtake() {
  _impl_._oneof_case_[0] = kOvertake;
}
inline void ObjectDecisionType::clear_overtake() {
  if (_internal_has_overtake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.overtake_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::release_overtake() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.overtake)
  if (_internal_has_overtake()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectOvertake* temp = _impl_.object_tag_.overtake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.overtake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectOvertake& ObjectDecisionType::_internal_overtake() const {
  return _internal_has_overtake()
      ? *_impl_.object_tag_.overtake_
      : reinterpret_cast< ::apollo::planning::ObjectOvertake&>(::apollo::planning::_ObjectOvertake_default_instance_);
}
inline const ::apollo::planning::ObjectOvertake& ObjectDecisionType::overtake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.overtake)
  return _internal_overtake();
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::unsafe_arena_release_overtake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.overtake)
  if (_internal_has_overtake()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectOvertake* temp = _impl_.object_tag_.overtake_;
    _impl_.object_tag_.overtake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_overtake(::apollo::planning::ObjectOvertake* overtake) {
  clear_object_tag();
  if (overtake) {
    set_has_overtake();
    _impl_.object_tag_.overtake_ = overtake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.overtake)
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::_internal_mutable_overtake() {
  if (!_internal_has_overtake()) {
    clear_object_tag();
    set_has_overtake();
    _impl_.object_tag_.overtake_ = CreateMaybeMessage< ::apollo::planning::ObjectOvertake >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.overtake_;
}
inline ::apollo::planning::ObjectOvertake* ObjectDecisionType::mutable_overtake() {
  ::apollo::planning::ObjectOvertake* _msg = _internal_mutable_overtake();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.overtake)
  return _msg;
}

// .apollo.planning.ObjectNudge nudge = 6;
inline bool ObjectDecisionType::_internal_has_nudge() const {
  return object_tag_case() == kNudge;
}
inline bool ObjectDecisionType::has_nudge() const {
  return _internal_has_nudge();
}
inline void ObjectDecisionType::set_has_nudge() {
  _impl_._oneof_case_[0] = kNudge;
}
inline void ObjectDecisionType::clear_nudge() {
  if (_internal_has_nudge()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.nudge_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::release_nudge() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.nudge)
  if (_internal_has_nudge()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectNudge* temp = _impl_.object_tag_.nudge_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.nudge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectNudge& ObjectDecisionType::_internal_nudge() const {
  return _internal_has_nudge()
      ? *_impl_.object_tag_.nudge_
      : reinterpret_cast< ::apollo::planning::ObjectNudge&>(::apollo::planning::_ObjectNudge_default_instance_);
}
inline const ::apollo::planning::ObjectNudge& ObjectDecisionType::nudge() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.nudge)
  return _internal_nudge();
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::unsafe_arena_release_nudge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.nudge)
  if (_internal_has_nudge()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectNudge* temp = _impl_.object_tag_.nudge_;
    _impl_.object_tag_.nudge_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_nudge(::apollo::planning::ObjectNudge* nudge) {
  clear_object_tag();
  if (nudge) {
    set_has_nudge();
    _impl_.object_tag_.nudge_ = nudge;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.nudge)
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::_internal_mutable_nudge() {
  if (!_internal_has_nudge()) {
    clear_object_tag();
    set_has_nudge();
    _impl_.object_tag_.nudge_ = CreateMaybeMessage< ::apollo::planning::ObjectNudge >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.nudge_;
}
inline ::apollo::planning::ObjectNudge* ObjectDecisionType::mutable_nudge() {
  ::apollo::planning::ObjectNudge* _msg = _internal_mutable_nudge();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.nudge)
  return _msg;
}

// .apollo.planning.ObjectAvoid avoid = 7;
inline bool ObjectDecisionType::_internal_has_avoid() const {
  return object_tag_case() == kAvoid;
}
inline bool ObjectDecisionType::has_avoid() const {
  return _internal_has_avoid();
}
inline void ObjectDecisionType::set_has_avoid() {
  _impl_._oneof_case_[0] = kAvoid;
}
inline void ObjectDecisionType::clear_avoid() {
  if (_internal_has_avoid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.avoid_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::release_avoid() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.avoid)
  if (_internal_has_avoid()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectAvoid* temp = _impl_.object_tag_.avoid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.avoid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectAvoid& ObjectDecisionType::_internal_avoid() const {
  return _internal_has_avoid()
      ? *_impl_.object_tag_.avoid_
      : reinterpret_cast< ::apollo::planning::ObjectAvoid&>(::apollo::planning::_ObjectAvoid_default_instance_);
}
inline const ::apollo::planning::ObjectAvoid& ObjectDecisionType::avoid() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.avoid)
  return _internal_avoid();
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::unsafe_arena_release_avoid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.avoid)
  if (_internal_has_avoid()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectAvoid* temp = _impl_.object_tag_.avoid_;
    _impl_.object_tag_.avoid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_avoid(::apollo::planning::ObjectAvoid* avoid) {
  clear_object_tag();
  if (avoid) {
    set_has_avoid();
    _impl_.object_tag_.avoid_ = avoid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.avoid)
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::_internal_mutable_avoid() {
  if (!_internal_has_avoid()) {
    clear_object_tag();
    set_has_avoid();
    _impl_.object_tag_.avoid_ = CreateMaybeMessage< ::apollo::planning::ObjectAvoid >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.avoid_;
}
inline ::apollo::planning::ObjectAvoid* ObjectDecisionType::mutable_avoid() {
  ::apollo::planning::ObjectAvoid* _msg = _internal_mutable_avoid();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.avoid)
  return _msg;
}

// .apollo.planning.ObjectSidePass side_pass = 8;
inline bool ObjectDecisionType::_internal_has_side_pass() const {
  return object_tag_case() == kSidePass;
}
inline bool ObjectDecisionType::has_side_pass() const {
  return _internal_has_side_pass();
}
inline void ObjectDecisionType::set_has_side_pass() {
  _impl_._oneof_case_[0] = kSidePass;
}
inline void ObjectDecisionType::clear_side_pass() {
  if (_internal_has_side_pass()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.object_tag_.side_pass_;
    }
    clear_has_object_tag();
  }
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::release_side_pass() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecisionType.side_pass)
  if (_internal_has_side_pass()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectSidePass* temp = _impl_.object_tag_.side_pass_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.object_tag_.side_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ObjectSidePass& ObjectDecisionType::_internal_side_pass() const {
  return _internal_has_side_pass()
      ? *_impl_.object_tag_.side_pass_
      : reinterpret_cast< ::apollo::planning::ObjectSidePass&>(::apollo::planning::_ObjectSidePass_default_instance_);
}
inline const ::apollo::planning::ObjectSidePass& ObjectDecisionType::side_pass() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisionType.side_pass)
  return _internal_side_pass();
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::unsafe_arena_release_side_pass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ObjectDecisionType.side_pass)
  if (_internal_has_side_pass()) {
    clear_has_object_tag();
    ::apollo::planning::ObjectSidePass* temp = _impl_.object_tag_.side_pass_;
    _impl_.object_tag_.side_pass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ObjectDecisionType::unsafe_arena_set_allocated_side_pass(::apollo::planning::ObjectSidePass* side_pass) {
  clear_object_tag();
  if (side_pass) {
    set_has_side_pass();
    _impl_.object_tag_.side_pass_ = side_pass;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ObjectDecisionType.side_pass)
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::_internal_mutable_side_pass() {
  if (!_internal_has_side_pass()) {
    clear_object_tag();
    set_has_side_pass();
    _impl_.object_tag_.side_pass_ = CreateMaybeMessage< ::apollo::planning::ObjectSidePass >(GetArenaForAllocation());
  }
  return _impl_.object_tag_.side_pass_;
}
inline ::apollo::planning::ObjectSidePass* ObjectDecisionType::mutable_side_pass() {
  ::apollo::planning::ObjectSidePass* _msg = _internal_mutable_side_pass();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisionType.side_pass)
  return _msg;
}

inline bool ObjectDecisionType::has_object_tag() const {
  return object_tag_case() != OBJECT_TAG_NOT_SET;
}
inline void ObjectDecisionType::clear_has_object_tag() {
  _impl_._oneof_case_[0] = OBJECT_TAG_NOT_SET;
}
inline ObjectDecisionType::ObjectTagCase ObjectDecisionType::object_tag_case() const {
  return ObjectDecisionType::ObjectTagCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectDecision

// optional string id = 1;
inline bool ObjectDecision::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ObjectDecision::has_id() const {
  return _internal_has_id();
}
inline void ObjectDecision::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ObjectDecision::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectDecision::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.id)
}
inline std::string* ObjectDecision::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.id)
  return _s;
}
inline const std::string& ObjectDecision::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ObjectDecision::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectDecision::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectDecision::release_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.ObjectDecision.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ObjectDecision::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ObjectDecision.id)
}

// optional int32 perception_id = 2;
inline bool ObjectDecision::_internal_has_perception_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ObjectDecision::has_perception_id() const {
  return _internal_has_perception_id();
}
inline void ObjectDecision::clear_perception_id() {
  _impl_.perception_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ObjectDecision::_internal_perception_id() const {
  return _impl_.perception_id_;
}
inline int32_t ObjectDecision::perception_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.perception_id)
  return _internal_perception_id();
}
inline void ObjectDecision::_internal_set_perception_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.perception_id_ = value;
}
inline void ObjectDecision::set_perception_id(int32_t value) {
  _internal_set_perception_id(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ObjectDecision.perception_id)
}

// repeated .apollo.planning.ObjectDecisionType object_decision = 3;
inline int ObjectDecision::_internal_object_decision_size() const {
  return _impl_.object_decision_.size();
}
inline int ObjectDecision::object_decision_size() const {
  return _internal_object_decision_size();
}
inline void ObjectDecision::clear_object_decision() {
  _impl_.object_decision_.Clear();
}
inline ::apollo::planning::ObjectDecisionType* ObjectDecision::mutable_object_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecision.object_decision)
  return _impl_.object_decision_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >*
ObjectDecision::mutable_object_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecision.object_decision)
  return &_impl_.object_decision_;
}
inline const ::apollo::planning::ObjectDecisionType& ObjectDecision::_internal_object_decision(int index) const {
  return _impl_.object_decision_.Get(index);
}
inline const ::apollo::planning::ObjectDecisionType& ObjectDecision::object_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecision.object_decision)
  return _internal_object_decision(index);
}
inline ::apollo::planning::ObjectDecisionType* ObjectDecision::_internal_add_object_decision() {
  return _impl_.object_decision_.Add();
}
inline ::apollo::planning::ObjectDecisionType* ObjectDecision::add_object_decision() {
  ::apollo::planning::ObjectDecisionType* _add = _internal_add_object_decision();
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecision.object_decision)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecisionType >&
ObjectDecision::object_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecision.object_decision)
  return _impl_.object_decision_;
}

// -------------------------------------------------------------------

// ObjectDecisions

// repeated .apollo.planning.ObjectDecision decision = 1;
inline int ObjectDecisions::_internal_decision_size() const {
  return _impl_.decision_.size();
}
inline int ObjectDecisions::decision_size() const {
  return _internal_decision_size();
}
inline void ObjectDecisions::clear_decision() {
  _impl_.decision_.Clear();
}
inline ::apollo::planning::ObjectDecision* ObjectDecisions::mutable_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ObjectDecisions.decision)
  return _impl_.decision_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecision >*
ObjectDecisions::mutable_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ObjectDecisions.decision)
  return &_impl_.decision_;
}
inline const ::apollo::planning::ObjectDecision& ObjectDecisions::_internal_decision(int index) const {
  return _impl_.decision_.Get(index);
}
inline const ::apollo::planning::ObjectDecision& ObjectDecisions::decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ObjectDecisions.decision)
  return _internal_decision(index);
}
inline ::apollo::planning::ObjectDecision* ObjectDecisions::_internal_add_decision() {
  return _impl_.decision_.Add();
}
inline ::apollo::planning::ObjectDecision* ObjectDecisions::add_decision() {
  ::apollo::planning::ObjectDecision* _add = _internal_add_decision();
  // @@protoc_insertion_point(field_add:apollo.planning.ObjectDecisions.decision)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ObjectDecision >&
ObjectDecisions::decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ObjectDecisions.decision)
  return _impl_.decision_;
}

// -------------------------------------------------------------------

// MainStop

// optional .apollo.planning.StopReasonCode reason_code = 1;
inline bool MainStop::_internal_has_reason_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MainStop::has_reason_code() const {
  return _internal_has_reason_code();
}
inline void MainStop::clear_reason_code() {
  _impl_.reason_code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::planning::StopReasonCode MainStop::_internal_reason_code() const {
  return static_cast< ::apollo::planning::StopReasonCode >(_impl_.reason_code_);
}
inline ::apollo::planning::StopReasonCode MainStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason_code)
  return _internal_reason_code();
}
inline void MainStop::_internal_set_reason_code(::apollo::planning::StopReasonCode value) {
  assert(::apollo::planning::StopReasonCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.reason_code_ = value;
}
inline void MainStop::set_reason_code(::apollo::planning::StopReasonCode value) {
  _internal_set_reason_code(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason_code)
}

// optional string reason = 2;
inline bool MainStop::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainStop::has_reason() const {
  return _internal_has_reason();
}
inline void MainStop::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MainStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainStop::set_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.reason)
}
inline std::string* MainStop::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.reason)
  return _s;
}
inline const std::string& MainStop::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void MainStop::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* MainStop::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* MainStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainStop::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.reason)
}

// optional .apollo.common.PointENU stop_point = 3;
inline bool MainStop::_internal_has_stop_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_point_ != nullptr);
  return value;
}
inline bool MainStop::has_stop_point() const {
  return _internal_has_stop_point();
}
inline const ::apollo::common::PointENU& MainStop::_internal_stop_point() const {
  const ::apollo::common::PointENU* p = _impl_.stop_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& MainStop::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_point)
  return _internal_stop_point();
}
inline void MainStop::unsafe_arena_set_allocated_stop_point(
    ::apollo::common::PointENU* stop_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  _impl_.stop_point_ = stop_point;
  if (stop_point) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainStop.stop_point)
}
inline ::apollo::common::PointENU* MainStop::release_stop_point() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* MainStop::unsafe_arena_release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainStop.stop_point)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* MainStop::_internal_mutable_stop_point() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stop_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.stop_point_ = p;
  }
  return _impl_.stop_point_;
}
inline ::apollo::common::PointENU* MainStop::mutable_stop_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_stop_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainStop.stop_point)
  return _msg;
}
inline void MainStop::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  if (stop_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_point));
    if (message_arena != submessage_arena) {
      stop_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stop_point_ = stop_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainStop.stop_point)
}

// optional double stop_heading = 4;
inline bool MainStop::_internal_has_stop_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MainStop::has_stop_heading() const {
  return _internal_has_stop_heading();
}
inline void MainStop::clear_stop_heading() {
  _impl_.stop_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double MainStop::_internal_stop_heading() const {
  return _impl_.stop_heading_;
}
inline double MainStop::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.stop_heading)
  return _internal_stop_heading();
}
inline void MainStop::_internal_set_stop_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stop_heading_ = value;
}
inline void MainStop::set_stop_heading(double value) {
  _internal_set_stop_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.stop_heading)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 5;
inline bool MainStop::_internal_has_change_lane_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MainStop::has_change_lane_type() const {
  return _internal_has_change_lane_type();
}
inline void MainStop::clear_change_lane_type() {
  _impl_.change_lane_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::routing::ChangeLaneType MainStop::_internal_change_lane_type() const {
  return static_cast< ::apollo::routing::ChangeLaneType >(_impl_.change_lane_type_);
}
inline ::apollo::routing::ChangeLaneType MainStop::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainStop.change_lane_type)
  return _internal_change_lane_type();
}
inline void MainStop::_internal_set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.change_lane_type_ = value;
}
inline void MainStop::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  _internal_set_change_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainStop.change_lane_type)
}

// -------------------------------------------------------------------

// EmergencyStopHardBrake

// -------------------------------------------------------------------

// EmergencyStopCruiseToStop

// -------------------------------------------------------------------

// MainEmergencyStop

// optional .apollo.planning.MainEmergencyStop.ReasonCode reason_code = 1;
inline bool MainEmergencyStop::_internal_has_reason_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MainEmergencyStop::has_reason_code() const {
  return _internal_has_reason_code();
}
inline void MainEmergencyStop::clear_reason_code() {
  _impl_.reason_code_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning::MainEmergencyStop_ReasonCode MainEmergencyStop::_internal_reason_code() const {
  return static_cast< ::apollo::planning::MainEmergencyStop_ReasonCode >(_impl_.reason_code_);
}
inline ::apollo::planning::MainEmergencyStop_ReasonCode MainEmergencyStop::reason_code() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason_code)
  return _internal_reason_code();
}
inline void MainEmergencyStop::_internal_set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value) {
  assert(::apollo::planning::MainEmergencyStop_ReasonCode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_code_ = value;
}
inline void MainEmergencyStop::set_reason_code(::apollo::planning::MainEmergencyStop_ReasonCode value) {
  _internal_set_reason_code(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason_code)
}

// optional string reason = 2;
inline bool MainEmergencyStop::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainEmergencyStop::has_reason() const {
  return _internal_has_reason();
}
inline void MainEmergencyStop::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MainEmergencyStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainEmergencyStop::set_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.MainEmergencyStop.reason)
}
inline std::string* MainEmergencyStop::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.reason)
  return _s;
}
inline const std::string& MainEmergencyStop::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void MainEmergencyStop::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* MainEmergencyStop::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* MainEmergencyStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainEmergencyStop::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainEmergencyStop.reason)
}

// .apollo.planning.EmergencyStopHardBrake hard_brake = 3;
inline bool MainEmergencyStop::_internal_has_hard_brake() const {
  return task_case() == kHardBrake;
}
inline bool MainEmergencyStop::has_hard_brake() const {
  return _internal_has_hard_brake();
}
inline void MainEmergencyStop::set_has_hard_brake() {
  _impl_._oneof_case_[0] = kHardBrake;
}
inline void MainEmergencyStop::clear_hard_brake() {
  if (_internal_has_hard_brake()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.hard_brake_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::release_hard_brake() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.hard_brake)
  if (_internal_has_hard_brake()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopHardBrake* temp = _impl_.task_.hard_brake_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.hard_brake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::EmergencyStopHardBrake& MainEmergencyStop::_internal_hard_brake() const {
  return _internal_has_hard_brake()
      ? *_impl_.task_.hard_brake_
      : reinterpret_cast< ::apollo::planning::EmergencyStopHardBrake&>(::apollo::planning::_EmergencyStopHardBrake_default_instance_);
}
inline const ::apollo::planning::EmergencyStopHardBrake& MainEmergencyStop::hard_brake() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.hard_brake)
  return _internal_hard_brake();
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::unsafe_arena_release_hard_brake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainEmergencyStop.hard_brake)
  if (_internal_has_hard_brake()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopHardBrake* temp = _impl_.task_.hard_brake_;
    _impl_.task_.hard_brake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainEmergencyStop::unsafe_arena_set_allocated_hard_brake(::apollo::planning::EmergencyStopHardBrake* hard_brake) {
  clear_task();
  if (hard_brake) {
    set_has_hard_brake();
    _impl_.task_.hard_brake_ = hard_brake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainEmergencyStop.hard_brake)
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::_internal_mutable_hard_brake() {
  if (!_internal_has_hard_brake()) {
    clear_task();
    set_has_hard_brake();
    _impl_.task_.hard_brake_ = CreateMaybeMessage< ::apollo::planning::EmergencyStopHardBrake >(GetArenaForAllocation());
  }
  return _impl_.task_.hard_brake_;
}
inline ::apollo::planning::EmergencyStopHardBrake* MainEmergencyStop::mutable_hard_brake() {
  ::apollo::planning::EmergencyStopHardBrake* _msg = _internal_mutable_hard_brake();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.hard_brake)
  return _msg;
}

// .apollo.planning.EmergencyStopCruiseToStop cruise_to_stop = 4;
inline bool MainEmergencyStop::_internal_has_cruise_to_stop() const {
  return task_case() == kCruiseToStop;
}
inline bool MainEmergencyStop::has_cruise_to_stop() const {
  return _internal_has_cruise_to_stop();
}
inline void MainEmergencyStop::set_has_cruise_to_stop() {
  _impl_._oneof_case_[0] = kCruiseToStop;
}
inline void MainEmergencyStop::clear_cruise_to_stop() {
  if (_internal_has_cruise_to_stop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.cruise_to_stop_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::release_cruise_to_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainEmergencyStop.cruise_to_stop)
  if (_internal_has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopCruiseToStop* temp = _impl_.task_.cruise_to_stop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.cruise_to_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::EmergencyStopCruiseToStop& MainEmergencyStop::_internal_cruise_to_stop() const {
  return _internal_has_cruise_to_stop()
      ? *_impl_.task_.cruise_to_stop_
      : reinterpret_cast< ::apollo::planning::EmergencyStopCruiseToStop&>(::apollo::planning::_EmergencyStopCruiseToStop_default_instance_);
}
inline const ::apollo::planning::EmergencyStopCruiseToStop& MainEmergencyStop::cruise_to_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return _internal_cruise_to_stop();
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::unsafe_arena_release_cruise_to_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainEmergencyStop.cruise_to_stop)
  if (_internal_has_cruise_to_stop()) {
    clear_has_task();
    ::apollo::planning::EmergencyStopCruiseToStop* temp = _impl_.task_.cruise_to_stop_;
    _impl_.task_.cruise_to_stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainEmergencyStop::unsafe_arena_set_allocated_cruise_to_stop(::apollo::planning::EmergencyStopCruiseToStop* cruise_to_stop) {
  clear_task();
  if (cruise_to_stop) {
    set_has_cruise_to_stop();
    _impl_.task_.cruise_to_stop_ = cruise_to_stop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainEmergencyStop.cruise_to_stop)
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::_internal_mutable_cruise_to_stop() {
  if (!_internal_has_cruise_to_stop()) {
    clear_task();
    set_has_cruise_to_stop();
    _impl_.task_.cruise_to_stop_ = CreateMaybeMessage< ::apollo::planning::EmergencyStopCruiseToStop >(GetArenaForAllocation());
  }
  return _impl_.task_.cruise_to_stop_;
}
inline ::apollo::planning::EmergencyStopCruiseToStop* MainEmergencyStop::mutable_cruise_to_stop() {
  ::apollo::planning::EmergencyStopCruiseToStop* _msg = _internal_mutable_cruise_to_stop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainEmergencyStop.cruise_to_stop)
  return _msg;
}

inline bool MainEmergencyStop::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainEmergencyStop::clear_has_task() {
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}
inline MainEmergencyStop::TaskCase MainEmergencyStop::task_case() const {
  return MainEmergencyStop::TaskCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MainCruise

// optional .apollo.routing.ChangeLaneType change_lane_type = 1;
inline bool MainCruise::_internal_has_change_lane_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainCruise::has_change_lane_type() const {
  return _internal_has_change_lane_type();
}
inline void MainCruise::clear_change_lane_type() {
  _impl_.change_lane_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::routing::ChangeLaneType MainCruise::_internal_change_lane_type() const {
  return static_cast< ::apollo::routing::ChangeLaneType >(_impl_.change_lane_type_);
}
inline ::apollo::routing::ChangeLaneType MainCruise::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainCruise.change_lane_type)
  return _internal_change_lane_type();
}
inline void MainCruise::_internal_set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.change_lane_type_ = value;
}
inline void MainCruise::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  _internal_set_change_lane_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainCruise.change_lane_type)
}

// -------------------------------------------------------------------

// MainChangeLane

// optional .apollo.planning.MainChangeLane.Type type = 1;
inline bool MainChangeLane::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MainChangeLane::has_type() const {
  return _internal_has_type();
}
inline void MainChangeLane::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::planning::MainChangeLane_Type MainChangeLane::_internal_type() const {
  return static_cast< ::apollo::planning::MainChangeLane_Type >(_impl_.type_);
}
inline ::apollo::planning::MainChangeLane_Type MainChangeLane::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.type)
  return _internal_type();
}
inline void MainChangeLane::_internal_set_type(::apollo::planning::MainChangeLane_Type value) {
  assert(::apollo::planning::MainChangeLane_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void MainChangeLane::set_type(::apollo::planning::MainChangeLane_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainChangeLane.type)
}

// repeated .apollo.planning.TargetLane default_lane = 2;
inline int MainChangeLane::_internal_default_lane_size() const {
  return _impl_.default_lane_.size();
}
inline int MainChangeLane::default_lane_size() const {
  return _internal_default_lane_size();
}
inline void MainChangeLane::clear_default_lane() {
  _impl_.default_lane_.Clear();
}
inline ::apollo::planning::TargetLane* MainChangeLane::mutable_default_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane)
  return _impl_.default_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainChangeLane::mutable_default_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainChangeLane.default_lane)
  return &_impl_.default_lane_;
}
inline const ::apollo::planning::TargetLane& MainChangeLane::_internal_default_lane(int index) const {
  return _impl_.default_lane_.Get(index);
}
inline const ::apollo::planning::TargetLane& MainChangeLane::default_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane)
  return _internal_default_lane(index);
}
inline ::apollo::planning::TargetLane* MainChangeLane::_internal_add_default_lane() {
  return _impl_.default_lane_.Add();
}
inline ::apollo::planning::TargetLane* MainChangeLane::add_default_lane() {
  ::apollo::planning::TargetLane* _add = _internal_add_default_lane();
  // @@protoc_insertion_point(field_add:apollo.planning.MainChangeLane.default_lane)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainChangeLane::default_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainChangeLane.default_lane)
  return _impl_.default_lane_;
}

// optional .apollo.planning.MainStop default_lane_stop = 3;
inline bool MainChangeLane::_internal_has_default_lane_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_lane_stop_ != nullptr);
  return value;
}
inline bool MainChangeLane::has_default_lane_stop() const {
  return _internal_has_default_lane_stop();
}
inline void MainChangeLane::clear_default_lane_stop() {
  if (_impl_.default_lane_stop_ != nullptr) _impl_.default_lane_stop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::MainStop& MainChangeLane::_internal_default_lane_stop() const {
  const ::apollo::planning::MainStop* p = _impl_.default_lane_stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::MainStop&>(
      ::apollo::planning::_MainStop_default_instance_);
}
inline const ::apollo::planning::MainStop& MainChangeLane::default_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.default_lane_stop)
  return _internal_default_lane_stop();
}
inline void MainChangeLane::unsafe_arena_set_allocated_default_lane_stop(
    ::apollo::planning::MainStop* default_lane_stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_lane_stop_);
  }
  _impl_.default_lane_stop_ = default_lane_stop;
  if (default_lane_stop) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainChangeLane.default_lane_stop)
}
inline ::apollo::planning::MainStop* MainChangeLane::release_default_lane_stop() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MainStop* temp = _impl_.default_lane_stop_;
  _impl_.default_lane_stop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::MainStop* MainChangeLane::unsafe_arena_release_default_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.default_lane_stop)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MainStop* temp = _impl_.default_lane_stop_;
  _impl_.default_lane_stop_ = nullptr;
  return temp;
}
inline ::apollo::planning::MainStop* MainChangeLane::_internal_mutable_default_lane_stop() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_lane_stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::MainStop>(GetArenaForAllocation());
    _impl_.default_lane_stop_ = p;
  }
  return _impl_.default_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::mutable_default_lane_stop() {
  ::apollo::planning::MainStop* _msg = _internal_mutable_default_lane_stop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.default_lane_stop)
  return _msg;
}
inline void MainChangeLane::set_allocated_default_lane_stop(::apollo::planning::MainStop* default_lane_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_lane_stop_;
  }
  if (default_lane_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_lane_stop);
    if (message_arena != submessage_arena) {
      default_lane_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_lane_stop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_lane_stop_ = default_lane_stop;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.default_lane_stop)
}

// optional .apollo.planning.MainStop target_lane_stop = 4;
inline bool MainChangeLane::_internal_has_target_lane_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_lane_stop_ != nullptr);
  return value;
}
inline bool MainChangeLane::has_target_lane_stop() const {
  return _internal_has_target_lane_stop();
}
inline void MainChangeLane::clear_target_lane_stop() {
  if (_impl_.target_lane_stop_ != nullptr) _impl_.target_lane_stop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::MainStop& MainChangeLane::_internal_target_lane_stop() const {
  const ::apollo::planning::MainStop* p = _impl_.target_lane_stop_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::MainStop&>(
      ::apollo::planning::_MainStop_default_instance_);
}
inline const ::apollo::planning::MainStop& MainChangeLane::target_lane_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainChangeLane.target_lane_stop)
  return _internal_target_lane_stop();
}
inline void MainChangeLane::unsafe_arena_set_allocated_target_lane_stop(
    ::apollo::planning::MainStop* target_lane_stop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_lane_stop_);
  }
  _impl_.target_lane_stop_ = target_lane_stop;
  if (target_lane_stop) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainChangeLane.target_lane_stop)
}
inline ::apollo::planning::MainStop* MainChangeLane::release_target_lane_stop() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::MainStop* temp = _impl_.target_lane_stop_;
  _impl_.target_lane_stop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::MainStop* MainChangeLane::unsafe_arena_release_target_lane_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainChangeLane.target_lane_stop)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::MainStop* temp = _impl_.target_lane_stop_;
  _impl_.target_lane_stop_ = nullptr;
  return temp;
}
inline ::apollo::planning::MainStop* MainChangeLane::_internal_mutable_target_lane_stop() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.target_lane_stop_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::MainStop>(GetArenaForAllocation());
    _impl_.target_lane_stop_ = p;
  }
  return _impl_.target_lane_stop_;
}
inline ::apollo::planning::MainStop* MainChangeLane::mutable_target_lane_stop() {
  ::apollo::planning::MainStop* _msg = _internal_mutable_target_lane_stop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainChangeLane.target_lane_stop)
  return _msg;
}
inline void MainChangeLane::set_allocated_target_lane_stop(::apollo::planning::MainStop* target_lane_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_lane_stop_;
  }
  if (target_lane_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target_lane_stop);
    if (message_arena != submessage_arena) {
      target_lane_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_lane_stop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.target_lane_stop_ = target_lane_stop;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainChangeLane.target_lane_stop)
}

// -------------------------------------------------------------------

// MainMissionComplete

// optional .apollo.common.PointENU stop_point = 1;
inline bool MainMissionComplete::_internal_has_stop_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_point_ != nullptr);
  return value;
}
inline bool MainMissionComplete::has_stop_point() const {
  return _internal_has_stop_point();
}
inline const ::apollo::common::PointENU& MainMissionComplete::_internal_stop_point() const {
  const ::apollo::common::PointENU* p = _impl_.stop_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::PointENU&>(
      ::apollo::common::_PointENU_default_instance_);
}
inline const ::apollo::common::PointENU& MainMissionComplete::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_point)
  return _internal_stop_point();
}
inline void MainMissionComplete::unsafe_arena_set_allocated_stop_point(
    ::apollo::common::PointENU* stop_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  _impl_.stop_point_ = stop_point;
  if (stop_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainMissionComplete.stop_point)
}
inline ::apollo::common::PointENU* MainMissionComplete::release_stop_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::PointENU* MainMissionComplete::unsafe_arena_release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainMissionComplete.stop_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::PointENU* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
  return temp;
}
inline ::apollo::common::PointENU* MainMissionComplete::_internal_mutable_stop_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stop_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaForAllocation());
    _impl_.stop_point_ = p;
  }
  return _impl_.stop_point_;
}
inline ::apollo::common::PointENU* MainMissionComplete::mutable_stop_point() {
  ::apollo::common::PointENU* _msg = _internal_mutable_stop_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainMissionComplete.stop_point)
  return _msg;
}
inline void MainMissionComplete::set_allocated_stop_point(::apollo::common::PointENU* stop_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  if (stop_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_point));
    if (message_arena != submessage_arena) {
      stop_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stop_point_ = stop_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainMissionComplete.stop_point)
}

// optional double stop_heading = 2;
inline bool MainMissionComplete::_internal_has_stop_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MainMissionComplete::has_stop_heading() const {
  return _internal_has_stop_heading();
}
inline void MainMissionComplete::clear_stop_heading() {
  _impl_.stop_heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double MainMissionComplete::_internal_stop_heading() const {
  return _impl_.stop_heading_;
}
inline double MainMissionComplete::stop_heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainMissionComplete.stop_heading)
  return _internal_stop_heading();
}
inline void MainMissionComplete::_internal_set_stop_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stop_heading_ = value;
}
inline void MainMissionComplete::set_stop_heading(double value) {
  _internal_set_stop_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainMissionComplete.stop_heading)
}

// -------------------------------------------------------------------

// MainNotReady

// optional string reason = 1;
inline bool MainNotReady::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainNotReady::has_reason() const {
  return _internal_has_reason();
}
inline void MainNotReady::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MainNotReady::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainNotReady.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MainNotReady::set_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.MainNotReady.reason)
}
inline std::string* MainNotReady::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainNotReady.reason)
  return _s;
}
inline const std::string& MainNotReady::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void MainNotReady::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* MainNotReady::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* MainNotReady::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainNotReady.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MainNotReady::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.MainNotReady.reason)
}

// -------------------------------------------------------------------

// MainParking

// optional .apollo.planning.MainParking.ParkingStatus status = 1;
inline bool MainParking::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MainParking::has_status() const {
  return _internal_has_status();
}
inline void MainParking::clear_status() {
  _impl_.status_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::MainParking_ParkingStatus MainParking::_internal_status() const {
  return static_cast< ::apollo::planning::MainParking_ParkingStatus >(_impl_.status_);
}
inline ::apollo::planning::MainParking_ParkingStatus MainParking::status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainParking.status)
  return _internal_status();
}
inline void MainParking::_internal_set_status(::apollo::planning::MainParking_ParkingStatus value) {
  assert(::apollo::planning::MainParking_ParkingStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}
inline void MainParking::set_status(::apollo::planning::MainParking_ParkingStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:apollo.planning.MainParking.status)
}

// -------------------------------------------------------------------

// MainDecision

// .apollo.planning.MainCruise cruise = 1;
inline bool MainDecision::_internal_has_cruise() const {
  return task_case() == kCruise;
}
inline bool MainDecision::has_cruise() const {
  return _internal_has_cruise();
}
inline void MainDecision::set_has_cruise() {
  _impl_._oneof_case_[0] = kCruise;
}
inline void MainDecision::clear_cruise() {
  if (_internal_has_cruise()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.cruise_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainCruise* MainDecision::release_cruise() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.cruise)
  if (_internal_has_cruise()) {
    clear_has_task();
    ::apollo::planning::MainCruise* temp = _impl_.task_.cruise_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.cruise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainCruise& MainDecision::_internal_cruise() const {
  return _internal_has_cruise()
      ? *_impl_.task_.cruise_
      : reinterpret_cast< ::apollo::planning::MainCruise&>(::apollo::planning::_MainCruise_default_instance_);
}
inline const ::apollo::planning::MainCruise& MainDecision::cruise() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.cruise)
  return _internal_cruise();
}
inline ::apollo::planning::MainCruise* MainDecision::unsafe_arena_release_cruise() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.cruise)
  if (_internal_has_cruise()) {
    clear_has_task();
    ::apollo::planning::MainCruise* temp = _impl_.task_.cruise_;
    _impl_.task_.cruise_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_cruise(::apollo::planning::MainCruise* cruise) {
  clear_task();
  if (cruise) {
    set_has_cruise();
    _impl_.task_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.cruise)
}
inline ::apollo::planning::MainCruise* MainDecision::_internal_mutable_cruise() {
  if (!_internal_has_cruise()) {
    clear_task();
    set_has_cruise();
    _impl_.task_.cruise_ = CreateMaybeMessage< ::apollo::planning::MainCruise >(GetArenaForAllocation());
  }
  return _impl_.task_.cruise_;
}
inline ::apollo::planning::MainCruise* MainDecision::mutable_cruise() {
  ::apollo::planning::MainCruise* _msg = _internal_mutable_cruise();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.cruise)
  return _msg;
}

// .apollo.planning.MainStop stop = 2;
inline bool MainDecision::_internal_has_stop() const {
  return task_case() == kStop;
}
inline bool MainDecision::has_stop() const {
  return _internal_has_stop();
}
inline void MainDecision::set_has_stop() {
  _impl_._oneof_case_[0] = kStop;
}
inline void MainDecision::clear_stop() {
  if (_internal_has_stop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.stop_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainStop* MainDecision::release_stop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.stop)
  if (_internal_has_stop()) {
    clear_has_task();
    ::apollo::planning::MainStop* temp = _impl_.task_.stop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainStop& MainDecision::_internal_stop() const {
  return _internal_has_stop()
      ? *_impl_.task_.stop_
      : reinterpret_cast< ::apollo::planning::MainStop&>(::apollo::planning::_MainStop_default_instance_);
}
inline const ::apollo::planning::MainStop& MainDecision::stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.stop)
  return _internal_stop();
}
inline ::apollo::planning::MainStop* MainDecision::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.stop)
  if (_internal_has_stop()) {
    clear_has_task();
    ::apollo::planning::MainStop* temp = _impl_.task_.stop_;
    _impl_.task_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_stop(::apollo::planning::MainStop* stop) {
  clear_task();
  if (stop) {
    set_has_stop();
    _impl_.task_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.stop)
}
inline ::apollo::planning::MainStop* MainDecision::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_task();
    set_has_stop();
    _impl_.task_.stop_ = CreateMaybeMessage< ::apollo::planning::MainStop >(GetArenaForAllocation());
  }
  return _impl_.task_.stop_;
}
inline ::apollo::planning::MainStop* MainDecision::mutable_stop() {
  ::apollo::planning::MainStop* _msg = _internal_mutable_stop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.stop)
  return _msg;
}

// .apollo.planning.MainEmergencyStop estop = 3;
inline bool MainDecision::_internal_has_estop() const {
  return task_case() == kEstop;
}
inline bool MainDecision::has_estop() const {
  return _internal_has_estop();
}
inline void MainDecision::set_has_estop() {
  _impl_._oneof_case_[0] = kEstop;
}
inline void MainDecision::clear_estop() {
  if (_internal_has_estop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.estop_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.estop)
  if (_internal_has_estop()) {
    clear_has_task();
    ::apollo::planning::MainEmergencyStop* temp = _impl_.task_.estop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.estop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainEmergencyStop& MainDecision::_internal_estop() const {
  return _internal_has_estop()
      ? *_impl_.task_.estop_
      : reinterpret_cast< ::apollo::planning::MainEmergencyStop&>(::apollo::planning::_MainEmergencyStop_default_instance_);
}
inline const ::apollo::planning::MainEmergencyStop& MainDecision::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.estop)
  return _internal_estop();
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::unsafe_arena_release_estop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.estop)
  if (_internal_has_estop()) {
    clear_has_task();
    ::apollo::planning::MainEmergencyStop* temp = _impl_.task_.estop_;
    _impl_.task_.estop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_estop(::apollo::planning::MainEmergencyStop* estop) {
  clear_task();
  if (estop) {
    set_has_estop();
    _impl_.task_.estop_ = estop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.estop)
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::_internal_mutable_estop() {
  if (!_internal_has_estop()) {
    clear_task();
    set_has_estop();
    _impl_.task_.estop_ = CreateMaybeMessage< ::apollo::planning::MainEmergencyStop >(GetArenaForAllocation());
  }
  return _impl_.task_.estop_;
}
inline ::apollo::planning::MainEmergencyStop* MainDecision::mutable_estop() {
  ::apollo::planning::MainEmergencyStop* _msg = _internal_mutable_estop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.estop)
  return _msg;
}

// .apollo.planning.MainChangeLane change_lane = 4 [deprecated = true];
inline bool MainDecision::_internal_has_change_lane() const {
  return task_case() == kChangeLane;
}
inline bool MainDecision::has_change_lane() const {
  return _internal_has_change_lane();
}
inline void MainDecision::set_has_change_lane() {
  _impl_._oneof_case_[0] = kChangeLane;
}
inline void MainDecision::clear_change_lane() {
  if (_internal_has_change_lane()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.change_lane_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainChangeLane* MainDecision::release_change_lane() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.change_lane)
  if (_internal_has_change_lane()) {
    clear_has_task();
    ::apollo::planning::MainChangeLane* temp = _impl_.task_.change_lane_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.change_lane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainChangeLane& MainDecision::_internal_change_lane() const {
  return _internal_has_change_lane()
      ? *_impl_.task_.change_lane_
      : reinterpret_cast< ::apollo::planning::MainChangeLane&>(::apollo::planning::_MainChangeLane_default_instance_);
}
inline const ::apollo::planning::MainChangeLane& MainDecision::change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.change_lane)
  return _internal_change_lane();
}
inline ::apollo::planning::MainChangeLane* MainDecision::unsafe_arena_release_change_lane() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.change_lane)
  if (_internal_has_change_lane()) {
    clear_has_task();
    ::apollo::planning::MainChangeLane* temp = _impl_.task_.change_lane_;
    _impl_.task_.change_lane_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_change_lane(::apollo::planning::MainChangeLane* change_lane) {
  clear_task();
  if (change_lane) {
    set_has_change_lane();
    _impl_.task_.change_lane_ = change_lane;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.change_lane)
}
inline ::apollo::planning::MainChangeLane* MainDecision::_internal_mutable_change_lane() {
  if (!_internal_has_change_lane()) {
    clear_task();
    set_has_change_lane();
    _impl_.task_.change_lane_ = CreateMaybeMessage< ::apollo::planning::MainChangeLane >(GetArenaForAllocation());
  }
  return _impl_.task_.change_lane_;
}
inline ::apollo::planning::MainChangeLane* MainDecision::mutable_change_lane() {
  ::apollo::planning::MainChangeLane* _msg = _internal_mutable_change_lane();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.change_lane)
  return _msg;
}

// .apollo.planning.MainMissionComplete mission_complete = 6;
inline bool MainDecision::_internal_has_mission_complete() const {
  return task_case() == kMissionComplete;
}
inline bool MainDecision::has_mission_complete() const {
  return _internal_has_mission_complete();
}
inline void MainDecision::set_has_mission_complete() {
  _impl_._oneof_case_[0] = kMissionComplete;
}
inline void MainDecision::clear_mission_complete() {
  if (_internal_has_mission_complete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.mission_complete_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainMissionComplete* MainDecision::release_mission_complete() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.mission_complete)
  if (_internal_has_mission_complete()) {
    clear_has_task();
    ::apollo::planning::MainMissionComplete* temp = _impl_.task_.mission_complete_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.mission_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainMissionComplete& MainDecision::_internal_mission_complete() const {
  return _internal_has_mission_complete()
      ? *_impl_.task_.mission_complete_
      : reinterpret_cast< ::apollo::planning::MainMissionComplete&>(::apollo::planning::_MainMissionComplete_default_instance_);
}
inline const ::apollo::planning::MainMissionComplete& MainDecision::mission_complete() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.mission_complete)
  return _internal_mission_complete();
}
inline ::apollo::planning::MainMissionComplete* MainDecision::unsafe_arena_release_mission_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.mission_complete)
  if (_internal_has_mission_complete()) {
    clear_has_task();
    ::apollo::planning::MainMissionComplete* temp = _impl_.task_.mission_complete_;
    _impl_.task_.mission_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_mission_complete(::apollo::planning::MainMissionComplete* mission_complete) {
  clear_task();
  if (mission_complete) {
    set_has_mission_complete();
    _impl_.task_.mission_complete_ = mission_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.mission_complete)
}
inline ::apollo::planning::MainMissionComplete* MainDecision::_internal_mutable_mission_complete() {
  if (!_internal_has_mission_complete()) {
    clear_task();
    set_has_mission_complete();
    _impl_.task_.mission_complete_ = CreateMaybeMessage< ::apollo::planning::MainMissionComplete >(GetArenaForAllocation());
  }
  return _impl_.task_.mission_complete_;
}
inline ::apollo::planning::MainMissionComplete* MainDecision::mutable_mission_complete() {
  ::apollo::planning::MainMissionComplete* _msg = _internal_mutable_mission_complete();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.mission_complete)
  return _msg;
}

// .apollo.planning.MainNotReady not_ready = 7;
inline bool MainDecision::_internal_has_not_ready() const {
  return task_case() == kNotReady;
}
inline bool MainDecision::has_not_ready() const {
  return _internal_has_not_ready();
}
inline void MainDecision::set_has_not_ready() {
  _impl_._oneof_case_[0] = kNotReady;
}
inline void MainDecision::clear_not_ready() {
  if (_internal_has_not_ready()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.not_ready_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainNotReady* MainDecision::release_not_ready() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.not_ready)
  if (_internal_has_not_ready()) {
    clear_has_task();
    ::apollo::planning::MainNotReady* temp = _impl_.task_.not_ready_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.not_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainNotReady& MainDecision::_internal_not_ready() const {
  return _internal_has_not_ready()
      ? *_impl_.task_.not_ready_
      : reinterpret_cast< ::apollo::planning::MainNotReady&>(::apollo::planning::_MainNotReady_default_instance_);
}
inline const ::apollo::planning::MainNotReady& MainDecision::not_ready() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.not_ready)
  return _internal_not_ready();
}
inline ::apollo::planning::MainNotReady* MainDecision::unsafe_arena_release_not_ready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.not_ready)
  if (_internal_has_not_ready()) {
    clear_has_task();
    ::apollo::planning::MainNotReady* temp = _impl_.task_.not_ready_;
    _impl_.task_.not_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_not_ready(::apollo::planning::MainNotReady* not_ready) {
  clear_task();
  if (not_ready) {
    set_has_not_ready();
    _impl_.task_.not_ready_ = not_ready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.not_ready)
}
inline ::apollo::planning::MainNotReady* MainDecision::_internal_mutable_not_ready() {
  if (!_internal_has_not_ready()) {
    clear_task();
    set_has_not_ready();
    _impl_.task_.not_ready_ = CreateMaybeMessage< ::apollo::planning::MainNotReady >(GetArenaForAllocation());
  }
  return _impl_.task_.not_ready_;
}
inline ::apollo::planning::MainNotReady* MainDecision::mutable_not_ready() {
  ::apollo::planning::MainNotReady* _msg = _internal_mutable_not_ready();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.not_ready)
  return _msg;
}

// .apollo.planning.MainParking parking = 8;
inline bool MainDecision::_internal_has_parking() const {
  return task_case() == kParking;
}
inline bool MainDecision::has_parking() const {
  return _internal_has_parking();
}
inline void MainDecision::set_has_parking() {
  _impl_._oneof_case_[0] = kParking;
}
inline void MainDecision::clear_parking() {
  if (_internal_has_parking()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_.parking_;
    }
    clear_has_task();
  }
}
inline ::apollo::planning::MainParking* MainDecision::release_parking() {
  // @@protoc_insertion_point(field_release:apollo.planning.MainDecision.parking)
  if (_internal_has_parking()) {
    clear_has_task();
    ::apollo::planning::MainParking* temp = _impl_.task_.parking_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_.parking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::MainParking& MainDecision::_internal_parking() const {
  return _internal_has_parking()
      ? *_impl_.task_.parking_
      : reinterpret_cast< ::apollo::planning::MainParking&>(::apollo::planning::_MainParking_default_instance_);
}
inline const ::apollo::planning::MainParking& MainDecision::parking() const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.parking)
  return _internal_parking();
}
inline ::apollo::planning::MainParking* MainDecision::unsafe_arena_release_parking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.MainDecision.parking)
  if (_internal_has_parking()) {
    clear_has_task();
    ::apollo::planning::MainParking* temp = _impl_.task_.parking_;
    _impl_.task_.parking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MainDecision::unsafe_arena_set_allocated_parking(::apollo::planning::MainParking* parking) {
  clear_task();
  if (parking) {
    set_has_parking();
    _impl_.task_.parking_ = parking;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.MainDecision.parking)
}
inline ::apollo::planning::MainParking* MainDecision::_internal_mutable_parking() {
  if (!_internal_has_parking()) {
    clear_task();
    set_has_parking();
    _impl_.task_.parking_ = CreateMaybeMessage< ::apollo::planning::MainParking >(GetArenaForAllocation());
  }
  return _impl_.task_.parking_;
}
inline ::apollo::planning::MainParking* MainDecision::mutable_parking() {
  ::apollo::planning::MainParking* _msg = _internal_mutable_parking();
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.parking)
  return _msg;
}

// repeated .apollo.planning.TargetLane target_lane = 5 [deprecated = true];
inline int MainDecision::_internal_target_lane_size() const {
  return _impl_.target_lane_.size();
}
inline int MainDecision::target_lane_size() const {
  return _internal_target_lane_size();
}
inline void MainDecision::clear_target_lane() {
  _impl_.target_lane_.Clear();
}
inline ::apollo::planning::TargetLane* MainDecision::mutable_target_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MainDecision.target_lane)
  return _impl_.target_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >*
MainDecision::mutable_target_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MainDecision.target_lane)
  return &_impl_.target_lane_;
}
inline const ::apollo::planning::TargetLane& MainDecision::_internal_target_lane(int index) const {
  return _impl_.target_lane_.Get(index);
}
inline const ::apollo::planning::TargetLane& MainDecision::target_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MainDecision.target_lane)
  return _internal_target_lane(index);
}
inline ::apollo::planning::TargetLane* MainDecision::_internal_add_target_lane() {
  return _impl_.target_lane_.Add();
}
inline ::apollo::planning::TargetLane* MainDecision::add_target_lane() {
  ::apollo::planning::TargetLane* _add = _internal_add_target_lane();
  // @@protoc_insertion_point(field_add:apollo.planning.MainDecision.target_lane)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TargetLane >&
MainDecision::target_lane() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MainDecision.target_lane)
  return _impl_.target_lane_;
}

inline bool MainDecision::has_task() const {
  return task_case() != TASK_NOT_SET;
}
inline void MainDecision::clear_has_task() {
  _impl_._oneof_case_[0] = TASK_NOT_SET;
}
inline MainDecision::TaskCase MainDecision::task_case() const {
  return MainDecision::TaskCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DecisionResult

// optional .apollo.planning.MainDecision main_decision = 1;
inline bool DecisionResult::_internal_has_main_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.main_decision_ != nullptr);
  return value;
}
inline bool DecisionResult::has_main_decision() const {
  return _internal_has_main_decision();
}
inline void DecisionResult::clear_main_decision() {
  if (_impl_.main_decision_ != nullptr) _impl_.main_decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::MainDecision& DecisionResult::_internal_main_decision() const {
  const ::apollo::planning::MainDecision* p = _impl_.main_decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::MainDecision&>(
      ::apollo::planning::_MainDecision_default_instance_);
}
inline const ::apollo::planning::MainDecision& DecisionResult::main_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.main_decision)
  return _internal_main_decision();
}
inline void DecisionResult::unsafe_arena_set_allocated_main_decision(
    ::apollo::planning::MainDecision* main_decision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.main_decision_);
  }
  _impl_.main_decision_ = main_decision;
  if (main_decision) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DecisionResult.main_decision)
}
inline ::apollo::planning::MainDecision* DecisionResult::release_main_decision() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MainDecision* temp = _impl_.main_decision_;
  _impl_.main_decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::MainDecision* DecisionResult::unsafe_arena_release_main_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.main_decision)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MainDecision* temp = _impl_.main_decision_;
  _impl_.main_decision_ = nullptr;
  return temp;
}
inline ::apollo::planning::MainDecision* DecisionResult::_internal_mutable_main_decision() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.main_decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::MainDecision>(GetArenaForAllocation());
    _impl_.main_decision_ = p;
  }
  return _impl_.main_decision_;
}
inline ::apollo::planning::MainDecision* DecisionResult::mutable_main_decision() {
  ::apollo::planning::MainDecision* _msg = _internal_mutable_main_decision();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.main_decision)
  return _msg;
}
inline void DecisionResult::set_allocated_main_decision(::apollo::planning::MainDecision* main_decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.main_decision_;
  }
  if (main_decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(main_decision);
    if (message_arena != submessage_arena) {
      main_decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main_decision, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.main_decision_ = main_decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.main_decision)
}

// optional .apollo.planning.ObjectDecisions object_decision = 2;
inline bool DecisionResult::_internal_has_object_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.object_decision_ != nullptr);
  return value;
}
inline bool DecisionResult::has_object_decision() const {
  return _internal_has_object_decision();
}
inline void DecisionResult::clear_object_decision() {
  if (_impl_.object_decision_ != nullptr) _impl_.object_decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::ObjectDecisions& DecisionResult::_internal_object_decision() const {
  const ::apollo::planning::ObjectDecisions* p = _impl_.object_decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::ObjectDecisions&>(
      ::apollo::planning::_ObjectDecisions_default_instance_);
}
inline const ::apollo::planning::ObjectDecisions& DecisionResult::object_decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.object_decision)
  return _internal_object_decision();
}
inline void DecisionResult::unsafe_arena_set_allocated_object_decision(
    ::apollo::planning::ObjectDecisions* object_decision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.object_decision_);
  }
  _impl_.object_decision_ = object_decision;
  if (object_decision) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DecisionResult.object_decision)
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::release_object_decision() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisions* temp = _impl_.object_decision_;
  _impl_.object_decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::unsafe_arena_release_object_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.object_decision)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::ObjectDecisions* temp = _impl_.object_decision_;
  _impl_.object_decision_ = nullptr;
  return temp;
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::_internal_mutable_object_decision() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.object_decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ObjectDecisions>(GetArenaForAllocation());
    _impl_.object_decision_ = p;
  }
  return _impl_.object_decision_;
}
inline ::apollo::planning::ObjectDecisions* DecisionResult::mutable_object_decision() {
  ::apollo::planning::ObjectDecisions* _msg = _internal_mutable_object_decision();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.object_decision)
  return _msg;
}
inline void DecisionResult::set_allocated_object_decision(::apollo::planning::ObjectDecisions* object_decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.object_decision_;
  }
  if (object_decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_decision);
    if (message_arena != submessage_arena) {
      object_decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_decision, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.object_decision_ = object_decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.object_decision)
}

// optional .apollo.common.VehicleSignal vehicle_signal = 3;
inline bool DecisionResult::_internal_has_vehicle_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_signal_ != nullptr);
  return value;
}
inline bool DecisionResult::has_vehicle_signal() const {
  return _internal_has_vehicle_signal();
}
inline const ::apollo::common::VehicleSignal& DecisionResult::_internal_vehicle_signal() const {
  const ::apollo::common::VehicleSignal* p = _impl_.vehicle_signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::VehicleSignal&>(
      ::apollo::common::_VehicleSignal_default_instance_);
}
inline const ::apollo::common::VehicleSignal& DecisionResult::vehicle_signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DecisionResult.vehicle_signal)
  return _internal_vehicle_signal();
}
inline void DecisionResult::unsafe_arena_set_allocated_vehicle_signal(
    ::apollo::common::VehicleSignal* vehicle_signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_signal_);
  }
  _impl_.vehicle_signal_ = vehicle_signal;
  if (vehicle_signal) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DecisionResult.vehicle_signal)
}
inline ::apollo::common::VehicleSignal* DecisionResult::release_vehicle_signal() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::VehicleSignal* temp = _impl_.vehicle_signal_;
  _impl_.vehicle_signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::VehicleSignal* DecisionResult::unsafe_arena_release_vehicle_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.DecisionResult.vehicle_signal)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::common::VehicleSignal* temp = _impl_.vehicle_signal_;
  _impl_.vehicle_signal_ = nullptr;
  return temp;
}
inline ::apollo::common::VehicleSignal* DecisionResult::_internal_mutable_vehicle_signal() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vehicle_signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleSignal>(GetArenaForAllocation());
    _impl_.vehicle_signal_ = p;
  }
  return _impl_.vehicle_signal_;
}
inline ::apollo::common::VehicleSignal* DecisionResult::mutable_vehicle_signal() {
  ::apollo::common::VehicleSignal* _msg = _internal_mutable_vehicle_signal();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DecisionResult.vehicle_signal)
  return _msg;
}
inline void DecisionResult::set_allocated_vehicle_signal(::apollo::common::VehicleSignal* vehicle_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_signal_);
  }
  if (vehicle_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_signal));
    if (message_arena != submessage_arena) {
      vehicle_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vehicle_signal_ = vehicle_signal;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DecisionResult.vehicle_signal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::ObjectNudge_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ObjectNudge_Type>() {
  return ::apollo::planning::ObjectNudge_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ObjectSidePass_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ObjectSidePass_Type>() {
  return ::apollo::planning::ObjectSidePass_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::MainEmergencyStop_ReasonCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::MainEmergencyStop_ReasonCode>() {
  return ::apollo::planning::MainEmergencyStop_ReasonCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::MainChangeLane_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::MainChangeLane_Type>() {
  return ::apollo::planning::MainChangeLane_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::MainParking_ParkingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::MainParking_ParkingStatus>() {
  return ::apollo::planning::MainParking_ParkingStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::StopReasonCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::StopReasonCode>() {
  return ::apollo::planning::StopReasonCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fdecision_2eproto
