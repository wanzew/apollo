// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
namespace apollo {
namespace planning {
class PlanningStats;
struct PlanningStatsDefaultTypeInternal;
extern PlanningStatsDefaultTypeInternal _PlanningStats_default_instance_;
class StatsGroup;
struct StatsGroupDefaultTypeInternal;
extern StatsGroupDefaultTypeInternal _StatsGroup_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::PlanningStats* Arena::CreateMaybeMessage<::apollo::planning::PlanningStats>(Arena*);
template<> ::apollo::planning::StatsGroup* Arena::CreateMaybeMessage<::apollo::planning::StatsGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class StatsGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StatsGroup) */ {
 public:
  inline StatsGroup() : StatsGroup(nullptr) {}
  ~StatsGroup() override;
  explicit PROTOBUF_CONSTEXPR StatsGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsGroup(const StatsGroup& from);
  StatsGroup(StatsGroup&& from) noexcept
    : StatsGroup() {
    *this = ::std::move(from);
  }

  inline StatsGroup& operator=(const StatsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsGroup& operator=(StatsGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsGroup* internal_default_instance() {
    return reinterpret_cast<const StatsGroup*>(
               &_StatsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatsGroup& a, StatsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatsGroup& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.StatsGroup";
  }
  protected:
  explicit StatsGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 1,
    kSumFieldNumber = 3,
    kAvgFieldNumber = 4,
    kNumFieldNumber = 5,
    kMinFieldNumber = 2,
  };
  // optional double max = 1;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // optional double sum = 3;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // optional double avg = 4;
  bool has_avg() const;
  private:
  bool _internal_has_avg() const;
  public:
  void clear_avg();
  double avg() const;
  void set_avg(double value);
  private:
  double _internal_avg() const;
  void _internal_set_avg(double value);
  public:

  // optional int32 num = 5;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // optional double min = 2 [default = 10000000000];
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.StatsGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_;
    double sum_;
    double avg_;
    int32_t num_;
    double min_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
};
// -------------------------------------------------------------------

class PlanningStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningStats) */ {
 public:
  inline PlanningStats() : PlanningStats(nullptr) {}
  ~PlanningStats() override;
  explicit PROTOBUF_CONSTEXPR PlanningStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningStats(const PlanningStats& from);
  PlanningStats(PlanningStats&& from) noexcept
    : PlanningStats() {
    *this = ::std::move(from);
  }

  inline PlanningStats& operator=(const PlanningStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningStats& operator=(PlanningStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanningStats* internal_default_instance() {
    return reinterpret_cast<const PlanningStats*>(
               &_PlanningStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlanningStats& a, PlanningStats& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningStats";
  }
  protected:
  explicit PlanningStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalPathLengthFieldNumber = 1,
    kTotalPathTimeFieldNumber = 2,
    kVFieldNumber = 3,
    kAFieldNumber = 4,
    kKappaFieldNumber = 5,
    kDkappaFieldNumber = 6,
  };
  // optional .apollo.planning.StatsGroup total_path_length = 1;
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  const ::apollo::planning::StatsGroup& total_path_length() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_total_path_length();
  ::apollo::planning::StatsGroup* mutable_total_path_length();
  void set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length);
  private:
  const ::apollo::planning::StatsGroup& _internal_total_path_length() const;
  ::apollo::planning::StatsGroup* _internal_mutable_total_path_length();
  public:
  void unsafe_arena_set_allocated_total_path_length(
      ::apollo::planning::StatsGroup* total_path_length);
  ::apollo::planning::StatsGroup* unsafe_arena_release_total_path_length();

  // optional .apollo.planning.StatsGroup total_path_time = 2;
  bool has_total_path_time() const;
  private:
  bool _internal_has_total_path_time() const;
  public:
  void clear_total_path_time();
  const ::apollo::planning::StatsGroup& total_path_time() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_total_path_time();
  ::apollo::planning::StatsGroup* mutable_total_path_time();
  void set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time);
  private:
  const ::apollo::planning::StatsGroup& _internal_total_path_time() const;
  ::apollo::planning::StatsGroup* _internal_mutable_total_path_time();
  public:
  void unsafe_arena_set_allocated_total_path_time(
      ::apollo::planning::StatsGroup* total_path_time);
  ::apollo::planning::StatsGroup* unsafe_arena_release_total_path_time();

  // optional .apollo.planning.StatsGroup v = 3;
  bool has_v() const;
  private:
  bool _internal_has_v() const;
  public:
  void clear_v();
  const ::apollo::planning::StatsGroup& v() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_v();
  ::apollo::planning::StatsGroup* mutable_v();
  void set_allocated_v(::apollo::planning::StatsGroup* v);
  private:
  const ::apollo::planning::StatsGroup& _internal_v() const;
  ::apollo::planning::StatsGroup* _internal_mutable_v();
  public:
  void unsafe_arena_set_allocated_v(
      ::apollo::planning::StatsGroup* v);
  ::apollo::planning::StatsGroup* unsafe_arena_release_v();

  // optional .apollo.planning.StatsGroup a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  const ::apollo::planning::StatsGroup& a() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_a();
  ::apollo::planning::StatsGroup* mutable_a();
  void set_allocated_a(::apollo::planning::StatsGroup* a);
  private:
  const ::apollo::planning::StatsGroup& _internal_a() const;
  ::apollo::planning::StatsGroup* _internal_mutable_a();
  public:
  void unsafe_arena_set_allocated_a(
      ::apollo::planning::StatsGroup* a);
  ::apollo::planning::StatsGroup* unsafe_arena_release_a();

  // optional .apollo.planning.StatsGroup kappa = 5;
  bool has_kappa() const;
  private:
  bool _internal_has_kappa() const;
  public:
  void clear_kappa();
  const ::apollo::planning::StatsGroup& kappa() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_kappa();
  ::apollo::planning::StatsGroup* mutable_kappa();
  void set_allocated_kappa(::apollo::planning::StatsGroup* kappa);
  private:
  const ::apollo::planning::StatsGroup& _internal_kappa() const;
  ::apollo::planning::StatsGroup* _internal_mutable_kappa();
  public:
  void unsafe_arena_set_allocated_kappa(
      ::apollo::planning::StatsGroup* kappa);
  ::apollo::planning::StatsGroup* unsafe_arena_release_kappa();

  // optional .apollo.planning.StatsGroup dkappa = 6;
  bool has_dkappa() const;
  private:
  bool _internal_has_dkappa() const;
  public:
  void clear_dkappa();
  const ::apollo::planning::StatsGroup& dkappa() const;
  PROTOBUF_NODISCARD ::apollo::planning::StatsGroup* release_dkappa();
  ::apollo::planning::StatsGroup* mutable_dkappa();
  void set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa);
  private:
  const ::apollo::planning::StatsGroup& _internal_dkappa() const;
  ::apollo::planning::StatsGroup* _internal_mutable_dkappa();
  public:
  void unsafe_arena_set_allocated_dkappa(
      ::apollo::planning::StatsGroup* dkappa);
  ::apollo::planning::StatsGroup* unsafe_arena_release_dkappa();

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::StatsGroup* total_path_length_;
    ::apollo::planning::StatsGroup* total_path_time_;
    ::apollo::planning::StatsGroup* v_;
    ::apollo::planning::StatsGroup* a_;
    ::apollo::planning::StatsGroup* kappa_;
    ::apollo::planning::StatsGroup* dkappa_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatsGroup

// optional double max = 1;
inline bool StatsGroup::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StatsGroup::has_max() const {
  return _internal_has_max();
}
inline void StatsGroup::clear_max() {
  _impl_.max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double StatsGroup::_internal_max() const {
  return _impl_.max_;
}
inline double StatsGroup::max() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.max)
  return _internal_max();
}
inline void StatsGroup::_internal_set_max(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_ = value;
}
inline void StatsGroup::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.max)
}

// optional double min = 2 [default = 10000000000];
inline bool StatsGroup::_internal_has_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StatsGroup::has_min() const {
  return _internal_has_min();
}
inline void StatsGroup::clear_min() {
  _impl_.min_ = 10000000000;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double StatsGroup::_internal_min() const {
  return _impl_.min_;
}
inline double StatsGroup::min() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.min)
  return _internal_min();
}
inline void StatsGroup::_internal_set_min(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_ = value;
}
inline void StatsGroup::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.min)
}

// optional double sum = 3;
inline bool StatsGroup::_internal_has_sum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StatsGroup::has_sum() const {
  return _internal_has_sum();
}
inline void StatsGroup::clear_sum() {
  _impl_.sum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double StatsGroup::_internal_sum() const {
  return _impl_.sum_;
}
inline double StatsGroup::sum() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.sum)
  return _internal_sum();
}
inline void StatsGroup::_internal_set_sum(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sum_ = value;
}
inline void StatsGroup::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.sum)
}

// optional double avg = 4;
inline bool StatsGroup::_internal_has_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StatsGroup::has_avg() const {
  return _internal_has_avg();
}
inline void StatsGroup::clear_avg() {
  _impl_.avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double StatsGroup::_internal_avg() const {
  return _impl_.avg_;
}
inline double StatsGroup::avg() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.avg)
  return _internal_avg();
}
inline void StatsGroup::_internal_set_avg(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.avg_ = value;
}
inline void StatsGroup::set_avg(double value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.avg)
}

// optional int32 num = 5;
inline bool StatsGroup::_internal_has_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StatsGroup::has_num() const {
  return _internal_has_num();
}
inline void StatsGroup::clear_num() {
  _impl_.num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t StatsGroup::_internal_num() const {
  return _impl_.num_;
}
inline int32_t StatsGroup::num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StatsGroup.num)
  return _internal_num();
}
inline void StatsGroup::_internal_set_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_ = value;
}
inline void StatsGroup::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StatsGroup.num)
}

// -------------------------------------------------------------------

// PlanningStats

// optional .apollo.planning.StatsGroup total_path_length = 1;
inline bool PlanningStats::_internal_has_total_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_path_length_ != nullptr);
  return value;
}
inline bool PlanningStats::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void PlanningStats::clear_total_path_length() {
  if (_impl_.total_path_length_ != nullptr) _impl_.total_path_length_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_total_path_length() const {
  const ::apollo::planning::StatsGroup* p = _impl_.total_path_length_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_length)
  return _internal_total_path_length();
}
inline void PlanningStats::unsafe_arena_set_allocated_total_path_length(
    ::apollo::planning::StatsGroup* total_path_length) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_path_length_);
  }
  _impl_.total_path_length_ = total_path_length;
  if (total_path_length) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.total_path_length)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_length() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StatsGroup* temp = _impl_.total_path_length_;
  _impl_.total_path_length_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_total_path_length() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_length)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StatsGroup* temp = _impl_.total_path_length_;
  _impl_.total_path_length_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_total_path_length() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.total_path_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.total_path_length_ = p;
  }
  return _impl_.total_path_length_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_length() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_total_path_length();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_length)
  return _msg;
}
inline void PlanningStats::set_allocated_total_path_length(::apollo::planning::StatsGroup* total_path_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_path_length_;
  }
  if (total_path_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_path_length);
    if (message_arena != submessage_arena) {
      total_path_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_path_length, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.total_path_length_ = total_path_length;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_length)
}

// optional .apollo.planning.StatsGroup total_path_time = 2;
inline bool PlanningStats::_internal_has_total_path_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_path_time_ != nullptr);
  return value;
}
inline bool PlanningStats::has_total_path_time() const {
  return _internal_has_total_path_time();
}
inline void PlanningStats::clear_total_path_time() {
  if (_impl_.total_path_time_ != nullptr) _impl_.total_path_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_total_path_time() const {
  const ::apollo::planning::StatsGroup* p = _impl_.total_path_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.total_path_time)
  return _internal_total_path_time();
}
inline void PlanningStats::unsafe_arena_set_allocated_total_path_time(
    ::apollo::planning::StatsGroup* total_path_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_path_time_);
  }
  _impl_.total_path_time_ = total_path_time;
  if (total_path_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.total_path_time)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_total_path_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::StatsGroup* temp = _impl_.total_path_time_;
  _impl_.total_path_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_total_path_time() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.total_path_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::StatsGroup* temp = _impl_.total_path_time_;
  _impl_.total_path_time_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_total_path_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_path_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.total_path_time_ = p;
  }
  return _impl_.total_path_time_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_total_path_time() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_total_path_time();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.total_path_time)
  return _msg;
}
inline void PlanningStats::set_allocated_total_path_time(::apollo::planning::StatsGroup* total_path_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.total_path_time_;
  }
  if (total_path_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(total_path_time);
    if (message_arena != submessage_arena) {
      total_path_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_path_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.total_path_time_ = total_path_time;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.total_path_time)
}

// optional .apollo.planning.StatsGroup v = 3;
inline bool PlanningStats::_internal_has_v() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.v_ != nullptr);
  return value;
}
inline bool PlanningStats::has_v() const {
  return _internal_has_v();
}
inline void PlanningStats::clear_v() {
  if (_impl_.v_ != nullptr) _impl_.v_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_v() const {
  const ::apollo::planning::StatsGroup* p = _impl_.v_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.v)
  return _internal_v();
}
inline void PlanningStats::unsafe_arena_set_allocated_v(
    ::apollo::planning::StatsGroup* v) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.v_);
  }
  _impl_.v_ = v;
  if (v) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.v)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_v() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::StatsGroup* temp = _impl_.v_;
  _impl_.v_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_v() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.v)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::StatsGroup* temp = _impl_.v_;
  _impl_.v_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_v() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.v_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.v_ = p;
  }
  return _impl_.v_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_v() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_v();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.v)
  return _msg;
}
inline void PlanningStats::set_allocated_v(::apollo::planning::StatsGroup* v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.v_;
  }
  if (v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(v);
    if (message_arena != submessage_arena) {
      v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, v, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.v_ = v;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.v)
}

// optional .apollo.planning.StatsGroup a = 4;
inline bool PlanningStats::_internal_has_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.a_ != nullptr);
  return value;
}
inline bool PlanningStats::has_a() const {
  return _internal_has_a();
}
inline void PlanningStats::clear_a() {
  if (_impl_.a_ != nullptr) _impl_.a_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_a() const {
  const ::apollo::planning::StatsGroup* p = _impl_.a_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.a)
  return _internal_a();
}
inline void PlanningStats::unsafe_arena_set_allocated_a(
    ::apollo::planning::StatsGroup* a) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.a_);
  }
  _impl_.a_ = a;
  if (a) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.a)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_a() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::StatsGroup* temp = _impl_.a_;
  _impl_.a_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_a() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.a)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::StatsGroup* temp = _impl_.a_;
  _impl_.a_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_a() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.a_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.a_ = p;
  }
  return _impl_.a_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_a() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.a)
  return _msg;
}
inline void PlanningStats::set_allocated_a(::apollo::planning::StatsGroup* a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.a_;
  }
  if (a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(a);
    if (message_arena != submessage_arena) {
      a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.a_ = a;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.a)
}

// optional .apollo.planning.StatsGroup kappa = 5;
inline bool PlanningStats::_internal_has_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kappa_ != nullptr);
  return value;
}
inline bool PlanningStats::has_kappa() const {
  return _internal_has_kappa();
}
inline void PlanningStats::clear_kappa() {
  if (_impl_.kappa_ != nullptr) _impl_.kappa_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_kappa() const {
  const ::apollo::planning::StatsGroup* p = _impl_.kappa_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.kappa)
  return _internal_kappa();
}
inline void PlanningStats::unsafe_arena_set_allocated_kappa(
    ::apollo::planning::StatsGroup* kappa) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kappa_);
  }
  _impl_.kappa_ = kappa;
  if (kappa) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.kappa)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_kappa() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::StatsGroup* temp = _impl_.kappa_;
  _impl_.kappa_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_kappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.kappa)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::StatsGroup* temp = _impl_.kappa_;
  _impl_.kappa_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_kappa() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.kappa_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.kappa_ = p;
  }
  return _impl_.kappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_kappa() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_kappa();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.kappa)
  return _msg;
}
inline void PlanningStats::set_allocated_kappa(::apollo::planning::StatsGroup* kappa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kappa_;
  }
  if (kappa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kappa);
    if (message_arena != submessage_arena) {
      kappa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kappa, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.kappa_ = kappa;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.kappa)
}

// optional .apollo.planning.StatsGroup dkappa = 6;
inline bool PlanningStats::_internal_has_dkappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dkappa_ != nullptr);
  return value;
}
inline bool PlanningStats::has_dkappa() const {
  return _internal_has_dkappa();
}
inline void PlanningStats::clear_dkappa() {
  if (_impl_.dkappa_ != nullptr) _impl_.dkappa_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::planning::StatsGroup& PlanningStats::_internal_dkappa() const {
  const ::apollo::planning::StatsGroup* p = _impl_.dkappa_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StatsGroup&>(
      ::apollo::planning::_StatsGroup_default_instance_);
}
inline const ::apollo::planning::StatsGroup& PlanningStats::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningStats.dkappa)
  return _internal_dkappa();
}
inline void PlanningStats::unsafe_arena_set_allocated_dkappa(
    ::apollo::planning::StatsGroup* dkappa) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dkappa_);
  }
  _impl_.dkappa_ = dkappa;
  if (dkappa) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningStats.dkappa)
}
inline ::apollo::planning::StatsGroup* PlanningStats::release_dkappa() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::StatsGroup* temp = _impl_.dkappa_;
  _impl_.dkappa_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::unsafe_arena_release_dkappa() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningStats.dkappa)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::StatsGroup* temp = _impl_.dkappa_;
  _impl_.dkappa_ = nullptr;
  return temp;
}
inline ::apollo::planning::StatsGroup* PlanningStats::_internal_mutable_dkappa() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dkappa_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StatsGroup>(GetArenaForAllocation());
    _impl_.dkappa_ = p;
  }
  return _impl_.dkappa_;
}
inline ::apollo::planning::StatsGroup* PlanningStats::mutable_dkappa() {
  ::apollo::planning::StatsGroup* _msg = _internal_mutable_dkappa();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningStats.dkappa)
  return _msg;
}
inline void PlanningStats::set_allocated_dkappa(::apollo::planning::StatsGroup* dkappa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dkappa_;
  }
  if (dkappa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dkappa);
    if (message_arena != submessage_arena) {
      dkappa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dkappa, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dkappa_ = dkappa;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningStats.dkappa)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fstats_2eproto
