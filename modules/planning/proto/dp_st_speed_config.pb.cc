// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_st_speed_config.proto

#include "modules/planning/proto/dp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR DpStSpeedConfig::DpStSpeedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.st_boundary_config_)*/nullptr
  , /*decltype(_impl_.speed_weight_)*/0
  , /*decltype(_impl_.reference_weight_)*/0
  , /*decltype(_impl_.total_path_length_)*/0.1
  , /*decltype(_impl_.total_time_)*/3
  , /*decltype(_impl_.matrix_dimension_s_)*/100
  , /*decltype(_impl_.matrix_dimension_t_)*/10
  , /*decltype(_impl_.accel_weight_)*/10
  , /*decltype(_impl_.jerk_weight_)*/10
  , /*decltype(_impl_.obstacle_weight_)*/1
  , /*decltype(_impl_.go_down_buffer_)*/5
  , /*decltype(_impl_.go_up_buffer_)*/5
  , /*decltype(_impl_.default_obstacle_cost_)*/10000000000
  , /*decltype(_impl_.default_speed_cost_)*/1
  , /*decltype(_impl_.exceed_speed_penalty_)*/10
  , /*decltype(_impl_.low_speed_penalty_)*/2.5
  , /*decltype(_impl_.keep_clear_low_speed_penalty_)*/10
  , /*decltype(_impl_.accel_penalty_)*/2
  , /*decltype(_impl_.decel_penalty_)*/2
  , /*decltype(_impl_.positive_jerk_coeff_)*/1
  , /*decltype(_impl_.negative_jerk_coeff_)*/300
  , /*decltype(_impl_.max_acceleration_)*/4.5
  , /*decltype(_impl_.max_deceleration_)*/-4.5} {}
struct DpStSpeedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DpStSpeedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DpStSpeedConfigDefaultTypeInternal() {}
  union {
    DpStSpeedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DpStSpeedConfigDefaultTypeInternal _DpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.total_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.total_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.matrix_dimension_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.matrix_dimension_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.speed_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.accel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.jerk_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.obstacle_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.reference_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.go_down_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.go_up_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.default_obstacle_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.default_speed_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.exceed_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.keep_clear_low_speed_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.accel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.decel_penalty_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.positive_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.negative_jerk_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpStSpeedConfig, _impl_.st_boundary_config_),
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  9,
  2,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, -1, sizeof(::apollo::planning::DpStSpeedConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_DpStSpeedConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/planning/proto/dp_st_speed_con"
  "fig.proto\022\017apollo.planning\032/modules/plan"
  "ning/proto/st_boundary_config.proto\"\355\005\n\017"
  "DpStSpeedConfig\022\036\n\021total_path_length\030\001 \001"
  "(\001:\0030.1\022\025\n\ntotal_time\030\002 \001(\001:\0013\022\037\n\022matrix"
  "_dimension_s\030\003 \001(\005:\003100\022\036\n\022matrix_dimens"
  "ion_t\030\004 \001(\005:\00210\022\027\n\014speed_weight\030\005 \001(\001:\0010"
  "\022\030\n\014accel_weight\030\006 \001(\001:\00210\022\027\n\013jerk_weigh"
  "t\030\007 \001(\001:\00210\022\032\n\017obstacle_weight\030\010 \001(\001:\0011\022"
  "\033\n\020reference_weight\030\t \001(\001:\0010\022\031\n\016go_down_"
  "buffer\030\n \001(\001:\0015\022\027\n\014go_up_buffer\030\013 \001(\001:\0015"
  "\022*\n\025default_obstacle_cost\030\014 \001(\001:\0131000000"
  "0000\022\035\n\022default_speed_cost\030\r \001(\001:\0011\022 \n\024e"
  "xceed_speed_penalty\030\016 \001(\001:\00210\022\036\n\021low_spe"
  "ed_penalty\030\017 \001(\001:\0032.5\022(\n\034keep_clear_low_"
  "speed_penalty\030\020 \001(\001:\00210\022\030\n\raccel_penalty"
  "\030\024 \001(\001:\0012\022\030\n\rdecel_penalty\030\025 \001(\001:\0012\022\036\n\023p"
  "ositive_jerk_coeff\030\036 \001(\001:\0011\022 \n\023negative_"
  "jerk_coeff\030\037 \001(\001:\003300\022\035\n\020max_acceleratio"
  "n\030( \001(\001:\0034.5\022\036\n\020max_deceleration\030) \001(\001:\004"
  "-4.5\022=\n\022st_boundary_config\0302 \001(\0132!.apoll"
  "o.planning.StBoundaryConfig"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto = {
    false, false, 867, descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
    "modules/planning/proto/dp_st_speed_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class DpStSpeedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DpStSpeedConfig>()._impl_._has_bits_);
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matrix_dimension_s(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_matrix_dimension_t(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speed_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_jerk_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_obstacle_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_reference_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_go_down_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_go_up_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_default_obstacle_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_default_speed_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_exceed_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_keep_clear_low_speed_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_accel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_decel_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_positive_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_negative_jerk_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_max_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::apollo::planning::StBoundaryConfig& st_boundary_config(const DpStSpeedConfig* msg);
  static void set_has_st_boundary_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::StBoundaryConfig&
DpStSpeedConfig::_Internal::st_boundary_config(const DpStSpeedConfig* msg) {
  return *msg->_impl_.st_boundary_config_;
}
void DpStSpeedConfig::clear_st_boundary_config() {
  if (_impl_.st_boundary_config_ != nullptr) _impl_.st_boundary_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DpStSpeedConfig::DpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DpStSpeedConfig)
}
DpStSpeedConfig::DpStSpeedConfig(const DpStSpeedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.speed_weight_){}
    , decltype(_impl_.reference_weight_){}
    , decltype(_impl_.total_path_length_){}
    , decltype(_impl_.total_time_){}
    , decltype(_impl_.matrix_dimension_s_){}
    , decltype(_impl_.matrix_dimension_t_){}
    , decltype(_impl_.accel_weight_){}
    , decltype(_impl_.jerk_weight_){}
    , decltype(_impl_.obstacle_weight_){}
    , decltype(_impl_.go_down_buffer_){}
    , decltype(_impl_.go_up_buffer_){}
    , decltype(_impl_.default_obstacle_cost_){}
    , decltype(_impl_.default_speed_cost_){}
    , decltype(_impl_.exceed_speed_penalty_){}
    , decltype(_impl_.low_speed_penalty_){}
    , decltype(_impl_.keep_clear_low_speed_penalty_){}
    , decltype(_impl_.accel_penalty_){}
    , decltype(_impl_.decel_penalty_){}
    , decltype(_impl_.positive_jerk_coeff_){}
    , decltype(_impl_.negative_jerk_coeff_){}
    , decltype(_impl_.max_acceleration_){}
    , decltype(_impl_.max_deceleration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_st_boundary_config()) {
    _impl_.st_boundary_config_ = new ::apollo::planning::StBoundaryConfig(*from._impl_.st_boundary_config_);
  }
  ::memcpy(&_impl_.speed_weight_, &from._impl_.speed_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_deceleration_) -
    reinterpret_cast<char*>(&_impl_.speed_weight_)) + sizeof(_impl_.max_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpStSpeedConfig)
}

inline void DpStSpeedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.speed_weight_){0}
    , decltype(_impl_.reference_weight_){0}
    , decltype(_impl_.total_path_length_){0.1}
    , decltype(_impl_.total_time_){3}
    , decltype(_impl_.matrix_dimension_s_){100}
    , decltype(_impl_.matrix_dimension_t_){10}
    , decltype(_impl_.accel_weight_){10}
    , decltype(_impl_.jerk_weight_){10}
    , decltype(_impl_.obstacle_weight_){1}
    , decltype(_impl_.go_down_buffer_){5}
    , decltype(_impl_.go_up_buffer_){5}
    , decltype(_impl_.default_obstacle_cost_){10000000000}
    , decltype(_impl_.default_speed_cost_){1}
    , decltype(_impl_.exceed_speed_penalty_){10}
    , decltype(_impl_.low_speed_penalty_){2.5}
    , decltype(_impl_.keep_clear_low_speed_penalty_){10}
    , decltype(_impl_.accel_penalty_){2}
    , decltype(_impl_.decel_penalty_){2}
    , decltype(_impl_.positive_jerk_coeff_){1}
    , decltype(_impl_.negative_jerk_coeff_){300}
    , decltype(_impl_.max_acceleration_){4.5}
    , decltype(_impl_.max_deceleration_){-4.5}
  };
}

DpStSpeedConfig::~DpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpStSpeedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DpStSpeedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.st_boundary_config_;
}

void DpStSpeedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpStSpeedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.st_boundary_config_ != nullptr);
    _impl_.st_boundary_config_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.speed_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reference_weight_) -
        reinterpret_cast<char*>(&_impl_.speed_weight_)) + sizeof(_impl_.reference_weight_));
    _impl_.total_path_length_ = 0.1;
    _impl_.total_time_ = 3;
    _impl_.matrix_dimension_s_ = 100;
    _impl_.matrix_dimension_t_ = 10;
    _impl_.accel_weight_ = 10;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.jerk_weight_ = 10;
    _impl_.obstacle_weight_ = 1;
    _impl_.go_down_buffer_ = 5;
    _impl_.go_up_buffer_ = 5;
    _impl_.default_obstacle_cost_ = 10000000000;
    _impl_.default_speed_cost_ = 1;
    _impl_.exceed_speed_penalty_ = 10;
    _impl_.low_speed_penalty_ = 2.5;
  }
  if (cached_has_bits & 0x007f0000u) {
    _impl_.keep_clear_low_speed_penalty_ = 10;
    _impl_.accel_penalty_ = 2;
    _impl_.decel_penalty_ = 2;
    _impl_.positive_jerk_coeff_ = 1;
    _impl_.negative_jerk_coeff_ = 300;
    _impl_.max_acceleration_ = 4.5;
    _impl_.max_deceleration_ = -4.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DpStSpeedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_path_length = 1 [default = 0.1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_total_path_length(&has_bits);
          _impl_.total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double total_time = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_time(&has_bits);
          _impl_.total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 matrix_dimension_s = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_matrix_dimension_s(&has_bits);
          _impl_.matrix_dimension_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 matrix_dimension_t = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_matrix_dimension_t(&has_bits);
          _impl_.matrix_dimension_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_weight = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_speed_weight(&has_bits);
          _impl_.speed_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_weight = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_accel_weight(&has_bits);
          _impl_.accel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_weight = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_jerk_weight(&has_bits);
          _impl_.jerk_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_weight = 8 [default = 1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_obstacle_weight(&has_bits);
          _impl_.obstacle_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_weight = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_reference_weight(&has_bits);
          _impl_.reference_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double go_down_buffer = 10 [default = 5];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_go_down_buffer(&has_bits);
          _impl_.go_down_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double go_up_buffer = 11 [default = 5];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_go_up_buffer(&has_bits);
          _impl_.go_up_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_obstacle_cost = 12 [default = 10000000000];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_default_obstacle_cost(&has_bits);
          _impl_.default_obstacle_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_speed_cost = 13 [default = 1];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_default_speed_cost(&has_bits);
          _impl_.default_speed_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double exceed_speed_penalty = 14 [default = 10];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_exceed_speed_penalty(&has_bits);
          _impl_.exceed_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double low_speed_penalty = 15 [default = 2.5];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_low_speed_penalty(&has_bits);
          _impl_.low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double keep_clear_low_speed_penalty = 16 [default = 10];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_keep_clear_low_speed_penalty(&has_bits);
          _impl_.keep_clear_low_speed_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_penalty = 20 [default = 2];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_accel_penalty(&has_bits);
          _impl_.accel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double decel_penalty = 21 [default = 2];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _Internal::set_has_decel_penalty(&has_bits);
          _impl_.decel_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double positive_jerk_coeff = 30 [default = 1];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _Internal::set_has_positive_jerk_coeff(&has_bits);
          _impl_.positive_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double negative_jerk_coeff = 31 [default = 300];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _Internal::set_has_negative_jerk_coeff(&has_bits);
          _impl_.negative_jerk_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration = 40 [default = 4.5];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_max_acceleration(&has_bits);
          _impl_.max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_deceleration = 41 [default = -4.5];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_max_deceleration(&has_bits);
          _impl_.max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_boundary_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DpStSpeedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpStSpeedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_path_length = 1 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_path_length(), target);
  }

  // optional double total_time = 2 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_time(), target);
  }

  // optional int32 matrix_dimension_s = 3 [default = 100];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_matrix_dimension_s(), target);
  }

  // optional int32 matrix_dimension_t = 4 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_matrix_dimension_t(), target);
  }

  // optional double speed_weight = 5 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_weight(), target);
  }

  // optional double accel_weight = 6 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_accel_weight(), target);
  }

  // optional double jerk_weight = 7 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_jerk_weight(), target);
  }

  // optional double obstacle_weight = 8 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_obstacle_weight(), target);
  }

  // optional double reference_weight = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_reference_weight(), target);
  }

  // optional double go_down_buffer = 10 [default = 5];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_go_down_buffer(), target);
  }

  // optional double go_up_buffer = 11 [default = 5];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_go_up_buffer(), target);
  }

  // optional double default_obstacle_cost = 12 [default = 10000000000];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_default_obstacle_cost(), target);
  }

  // optional double default_speed_cost = 13 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_default_speed_cost(), target);
  }

  // optional double exceed_speed_penalty = 14 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_exceed_speed_penalty(), target);
  }

  // optional double low_speed_penalty = 15 [default = 2.5];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_low_speed_penalty(), target);
  }

  // optional double keep_clear_low_speed_penalty = 16 [default = 10];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_keep_clear_low_speed_penalty(), target);
  }

  // optional double accel_penalty = 20 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_accel_penalty(), target);
  }

  // optional double decel_penalty = 21 [default = 2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_decel_penalty(), target);
  }

  // optional double positive_jerk_coeff = 30 [default = 1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_positive_jerk_coeff(), target);
  }

  // optional double negative_jerk_coeff = 31 [default = 300];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_negative_jerk_coeff(), target);
  }

  // optional double max_acceleration = 40 [default = 4.5];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(40, this->_internal_max_acceleration(), target);
  }

  // optional double max_deceleration = 41 [default = -4.5];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(41, this->_internal_max_deceleration(), target);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::st_boundary_config(this),
        _Internal::st_boundary_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpStSpeedConfig)
  return target;
}

size_t DpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpStSpeedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 50;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.st_boundary_config_);
    }

    // optional double speed_weight = 5 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reference_weight = 9 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double total_path_length = 1 [default = 0.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 matrix_dimension_s = 3 [default = 100];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matrix_dimension_s());
    }

    // optional int32 matrix_dimension_t = 4 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_matrix_dimension_t());
    }

    // optional double accel_weight = 6 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double jerk_weight = 7 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_weight = 8 [default = 1];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double go_down_buffer = 10 [default = 5];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double go_up_buffer = 11 [default = 5];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double default_obstacle_cost = 12 [default = 10000000000];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double default_speed_cost = 13 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double exceed_speed_penalty = 14 [default = 10];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double low_speed_penalty = 15 [default = 2.5];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional double keep_clear_low_speed_penalty = 16 [default = 10];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double accel_penalty = 20 [default = 2];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double decel_penalty = 21 [default = 2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double positive_jerk_coeff = 30 [default = 1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double negative_jerk_coeff = 31 [default = 300];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration = 40 [default = 4.5];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double max_deceleration = 41 [default = -4.5];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DpStSpeedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DpStSpeedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DpStSpeedConfig::GetClassData() const { return &_class_data_; }

void DpStSpeedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DpStSpeedConfig *>(to)->MergeFrom(
      static_cast<const DpStSpeedConfig &>(from));
}


void DpStSpeedConfig::MergeFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from._internal_st_boundary_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.speed_weight_ = from._impl_.speed_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reference_weight_ = from._impl_.reference_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.total_path_length_ = from._impl_.total_path_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.total_time_ = from._impl_.total_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.matrix_dimension_s_ = from._impl_.matrix_dimension_s_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.matrix_dimension_t_ = from._impl_.matrix_dimension_t_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.accel_weight_ = from._impl_.accel_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.jerk_weight_ = from._impl_.jerk_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.obstacle_weight_ = from._impl_.obstacle_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.go_down_buffer_ = from._impl_.go_down_buffer_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.go_up_buffer_ = from._impl_.go_up_buffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.default_obstacle_cost_ = from._impl_.default_obstacle_cost_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.default_speed_cost_ = from._impl_.default_speed_cost_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.exceed_speed_penalty_ = from._impl_.exceed_speed_penalty_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.low_speed_penalty_ = from._impl_.low_speed_penalty_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.keep_clear_low_speed_penalty_ = from._impl_.keep_clear_low_speed_penalty_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.accel_penalty_ = from._impl_.accel_penalty_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.decel_penalty_ = from._impl_.decel_penalty_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.positive_jerk_coeff_ = from._impl_.positive_jerk_coeff_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.negative_jerk_coeff_ = from._impl_.negative_jerk_coeff_;
    }
    if (cached_has_bits & 0x00200000u) {
      _impl_.max_acceleration_ = from._impl_.max_acceleration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _impl_.max_deceleration_ = from._impl_.max_deceleration_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DpStSpeedConfig::CopyFrom(const DpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpStSpeedConfig::IsInitialized() const {
  return true;
}

void DpStSpeedConfig::InternalSwap(DpStSpeedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DpStSpeedConfig, _impl_.reference_weight_)
      + sizeof(DpStSpeedConfig::_impl_.reference_weight_)
      - PROTOBUF_FIELD_OFFSET(DpStSpeedConfig, _impl_.st_boundary_config_)>(
          reinterpret_cast<char*>(&_impl_.st_boundary_config_),
          reinterpret_cast<char*>(&other->_impl_.st_boundary_config_));
  swap(_impl_.total_path_length_, other->_impl_.total_path_length_);
  swap(_impl_.total_time_, other->_impl_.total_time_);
  swap(_impl_.matrix_dimension_s_, other->_impl_.matrix_dimension_s_);
  swap(_impl_.matrix_dimension_t_, other->_impl_.matrix_dimension_t_);
  swap(_impl_.accel_weight_, other->_impl_.accel_weight_);
  swap(_impl_.jerk_weight_, other->_impl_.jerk_weight_);
  swap(_impl_.obstacle_weight_, other->_impl_.obstacle_weight_);
  swap(_impl_.go_down_buffer_, other->_impl_.go_down_buffer_);
  swap(_impl_.go_up_buffer_, other->_impl_.go_up_buffer_);
  swap(_impl_.default_obstacle_cost_, other->_impl_.default_obstacle_cost_);
  swap(_impl_.default_speed_cost_, other->_impl_.default_speed_cost_);
  swap(_impl_.exceed_speed_penalty_, other->_impl_.exceed_speed_penalty_);
  swap(_impl_.low_speed_penalty_, other->_impl_.low_speed_penalty_);
  swap(_impl_.keep_clear_low_speed_penalty_, other->_impl_.keep_clear_low_speed_penalty_);
  swap(_impl_.accel_penalty_, other->_impl_.accel_penalty_);
  swap(_impl_.decel_penalty_, other->_impl_.decel_penalty_);
  swap(_impl_.positive_jerk_coeff_, other->_impl_.positive_jerk_coeff_);
  swap(_impl_.negative_jerk_coeff_, other->_impl_.negative_jerk_coeff_);
  swap(_impl_.max_acceleration_, other->_impl_.max_acceleration_);
  swap(_impl_.max_deceleration_, other->_impl_.max_deceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpStSpeedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::DpStSpeedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::DpStSpeedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DpStSpeedConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
