// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/navi_speed_decider_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
namespace apollo {
namespace planning {
class NaviSpeedDeciderConfig;
struct NaviSpeedDeciderConfigDefaultTypeInternal;
extern NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class NaviSpeedDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviSpeedDeciderConfig) */ {
 public:
  inline NaviSpeedDeciderConfig() : NaviSpeedDeciderConfig(nullptr) {}
  ~NaviSpeedDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from);
  NaviSpeedDeciderConfig(NaviSpeedDeciderConfig&& from) noexcept
    : NaviSpeedDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviSpeedDeciderConfig& operator=(const NaviSpeedDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviSpeedDeciderConfig& operator=(NaviSpeedDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviSpeedDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviSpeedDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviSpeedDeciderConfig*>(
               &_NaviSpeedDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NaviSpeedDeciderConfig& a, NaviSpeedDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviSpeedDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviSpeedDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviSpeedDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviSpeedDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviSpeedDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviSpeedDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviSpeedDeciderConfig";
  }
  protected:
  explicit NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferredAccelFieldNumber = 1,
    kPreferredDecelFieldNumber = 2,
    kMaxAccelFieldNumber = 3,
    kMaxDecelFieldNumber = 4,
    kObstacleBufferFieldNumber = 5,
    kSafeDistanceBaseFieldNumber = 7,
    kSafeDistanceRatioFieldNumber = 8,
  };
  // optional double preferred_accel = 1 [default = 2];
  bool has_preferred_accel() const;
  private:
  bool _internal_has_preferred_accel() const;
  public:
  void clear_preferred_accel();
  double preferred_accel() const;
  void set_preferred_accel(double value);
  private:
  double _internal_preferred_accel() const;
  void _internal_set_preferred_accel(double value);
  public:

  // optional double preferred_decel = 2 [default = 2];
  bool has_preferred_decel() const;
  private:
  bool _internal_has_preferred_decel() const;
  public:
  void clear_preferred_decel();
  double preferred_decel() const;
  void set_preferred_decel(double value);
  private:
  double _internal_preferred_decel() const;
  void _internal_set_preferred_decel(double value);
  public:

  // optional double max_accel = 3 [default = 4];
  bool has_max_accel() const;
  private:
  bool _internal_has_max_accel() const;
  public:
  void clear_max_accel();
  double max_accel() const;
  void set_max_accel(double value);
  private:
  double _internal_max_accel() const;
  void _internal_set_max_accel(double value);
  public:

  // optional double max_decel = 4 [default = 5];
  bool has_max_decel() const;
  private:
  bool _internal_has_max_decel() const;
  public:
  void clear_max_decel();
  double max_decel() const;
  void set_max_decel(double value);
  private:
  double _internal_max_decel() const;
  void _internal_set_max_decel(double value);
  public:

  // optional double obstacle_buffer = 5 [default = 0.5];
  bool has_obstacle_buffer() const;
  private:
  bool _internal_has_obstacle_buffer() const;
  public:
  void clear_obstacle_buffer();
  double obstacle_buffer() const;
  void set_obstacle_buffer(double value);
  private:
  double _internal_obstacle_buffer() const;
  void _internal_set_obstacle_buffer(double value);
  public:

  // optional double safe_distance_base = 7 [default = 2];
  bool has_safe_distance_base() const;
  private:
  bool _internal_has_safe_distance_base() const;
  public:
  void clear_safe_distance_base();
  double safe_distance_base() const;
  void set_safe_distance_base(double value);
  private:
  double _internal_safe_distance_base() const;
  void _internal_set_safe_distance_base(double value);
  public:

  // optional double safe_distance_ratio = 8 [default = 1];
  bool has_safe_distance_ratio() const;
  private:
  bool _internal_has_safe_distance_ratio() const;
  public:
  void clear_safe_distance_ratio();
  double safe_distance_ratio() const;
  void set_safe_distance_ratio(double value);
  private:
  double _internal_safe_distance_ratio() const;
  void _internal_set_safe_distance_ratio(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviSpeedDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double preferred_accel_;
    double preferred_decel_;
    double max_accel_;
    double max_decel_;
    double obstacle_buffer_;
    double safe_distance_base_;
    double safe_distance_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NaviSpeedDeciderConfig

// optional double preferred_accel = 1 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_accel() const {
  return _internal_has_preferred_accel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_accel() {
  _impl_.preferred_accel_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_accel() const {
  return _impl_.preferred_accel_;
}
inline double NaviSpeedDeciderConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
  return _internal_preferred_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_accel(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.preferred_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_accel(double value) {
  _internal_set_preferred_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
}

// optional double preferred_decel = 2 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_decel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_decel() const {
  return _internal_has_preferred_decel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_decel() {
  _impl_.preferred_decel_ = 2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_decel() const {
  return _impl_.preferred_decel_;
}
inline double NaviSpeedDeciderConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
  return _internal_preferred_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_decel(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.preferred_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_decel(double value) {
  _internal_set_preferred_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
}

// optional double max_accel = 3 [default = 4];
inline bool NaviSpeedDeciderConfig::_internal_has_max_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_accel() const {
  return _internal_has_max_accel();
}
inline void NaviSpeedDeciderConfig::clear_max_accel() {
  _impl_.max_accel_ = 4;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double NaviSpeedDeciderConfig::_internal_max_accel() const {
  return _impl_.max_accel_;
}
inline double NaviSpeedDeciderConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_accel)
  return _internal_max_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_accel(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_accel(double value) {
  _internal_set_max_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_accel)
}

// optional double max_decel = 4 [default = 5];
inline bool NaviSpeedDeciderConfig::_internal_has_max_decel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_decel() const {
  return _internal_has_max_decel();
}
inline void NaviSpeedDeciderConfig::clear_max_decel() {
  _impl_.max_decel_ = 5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double NaviSpeedDeciderConfig::_internal_max_decel() const {
  return _impl_.max_decel_;
}
inline double NaviSpeedDeciderConfig::max_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_decel)
  return _internal_max_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_decel(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_decel(double value) {
  _internal_set_max_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_decel)
}

// optional double obstacle_buffer = 5 [default = 0.5];
inline bool NaviSpeedDeciderConfig::_internal_has_obstacle_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_obstacle_buffer() const {
  return _internal_has_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::clear_obstacle_buffer() {
  _impl_.obstacle_buffer_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double NaviSpeedDeciderConfig::_internal_obstacle_buffer() const {
  return _impl_.obstacle_buffer_;
}
inline double NaviSpeedDeciderConfig::obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
  return _internal_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::_internal_set_obstacle_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.obstacle_buffer_ = value;
}
inline void NaviSpeedDeciderConfig::set_obstacle_buffer(double value) {
  _internal_set_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
}

// optional double safe_distance_base = 7 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_base() const {
  return _internal_has_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_base() {
  _impl_.safe_distance_base_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_base() const {
  return _impl_.safe_distance_base_;
}
inline double NaviSpeedDeciderConfig::safe_distance_base() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
  return _internal_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_base(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.safe_distance_base_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_base(double value) {
  _internal_set_safe_distance_base(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
}

// optional double safe_distance_ratio = 8 [default = 1];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_ratio() const {
  return _internal_has_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_ratio() {
  _impl_.safe_distance_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_ratio() const {
  return _impl_.safe_distance_ratio_;
}
inline double NaviSpeedDeciderConfig::safe_distance_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
  return _internal_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.safe_distance_ratio_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_ratio(double value) {
  _internal_set_safe_distance_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto
