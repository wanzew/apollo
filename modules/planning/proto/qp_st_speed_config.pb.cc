// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_st_speed_config.proto

#include "modules/planning/proto/qp_st_speed_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR QpSplineConfig::QpSplineConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.number_of_discrete_graph_t_)*/0u
  , /*decltype(_impl_.spline_order_)*/0u
  , /*decltype(_impl_.speed_kernel_weight_)*/0
  , /*decltype(_impl_.accel_kernel_weight_)*/0
  , /*decltype(_impl_.jerk_kernel_weight_)*/0
  , /*decltype(_impl_.follow_weight_)*/0
  , /*decltype(_impl_.stop_weight_)*/0
  , /*decltype(_impl_.cruise_weight_)*/0
  , /*decltype(_impl_.follow_drag_distance_)*/0
  , /*decltype(_impl_.dp_st_reference_weight_)*/0
  , /*decltype(_impl_.init_jerk_kernel_weight_)*/0
  , /*decltype(_impl_.yield_weight_)*/0
  , /*decltype(_impl_.yield_drag_distance_)*/0
  , /*decltype(_impl_.regularization_weight_)*/0.1} {}
struct QpSplineConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QpSplineConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QpSplineConfigDefaultTypeInternal() {}
  union {
    QpSplineConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QpSplineConfigDefaultTypeInternal _QpSplineConfig_default_instance_;
PROTOBUF_CONSTEXPR QpPiecewiseConfig::QpPiecewiseConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accel_kernel_weight_)*/0
  , /*decltype(_impl_.jerk_kernel_weight_)*/0
  , /*decltype(_impl_.follow_weight_)*/0
  , /*decltype(_impl_.stop_weight_)*/0
  , /*decltype(_impl_.cruise_weight_)*/0
  , /*decltype(_impl_.follow_drag_distance_)*/0
  , /*decltype(_impl_.number_of_evaluated_graph_t_)*/0u
  , /*decltype(_impl_.regularization_weight_)*/0.1} {}
struct QpPiecewiseConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QpPiecewiseConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QpPiecewiseConfigDefaultTypeInternal() {}
  union {
    QpPiecewiseConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QpPiecewiseConfigDefaultTypeInternal _QpPiecewiseConfig_default_instance_;
PROTOBUF_CONSTEXPR QpStSpeedConfig::QpStSpeedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.qp_spline_config_)*/nullptr
  , /*decltype(_impl_.qp_piecewise_config_)*/nullptr
  , /*decltype(_impl_.st_boundary_config_)*/nullptr
  , /*decltype(_impl_.total_path_length_)*/200
  , /*decltype(_impl_.total_time_)*/6
  , /*decltype(_impl_.preferred_max_acceleration_)*/1.2
  , /*decltype(_impl_.preferred_min_deceleration_)*/-1.8
  , /*decltype(_impl_.max_acceleration_)*/2
  , /*decltype(_impl_.min_deceleration_)*/-4.5} {}
struct QpStSpeedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QpStSpeedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QpStSpeedConfigDefaultTypeInternal() {}
  union {
    QpStSpeedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QpStSpeedConfigDefaultTypeInternal _QpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.number_of_discrete_graph_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.spline_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.speed_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.accel_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.jerk_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.follow_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.stop_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.cruise_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.follow_drag_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.dp_st_reference_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.init_jerk_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.yield_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplineConfig, _impl_.yield_drag_distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.number_of_evaluated_graph_t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.accel_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.jerk_kernel_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.follow_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.stop_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.cruise_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpPiecewiseConfig, _impl_.follow_drag_distance_),
  6,
  0,
  1,
  2,
  3,
  4,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.total_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.total_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.preferred_max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.preferred_min_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.min_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.qp_spline_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.qp_piecewise_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpStSpeedConfig, _impl_.st_boundary_config_),
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::apollo::planning::QpSplineConfig)},
  { 34, 48, -1, sizeof(::apollo::planning::QpPiecewiseConfig)},
  { 56, 71, -1, sizeof(::apollo::planning::QpStSpeedConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_QpSplineConfig_default_instance_._instance,
  &::apollo::planning::_QpPiecewiseConfig_default_instance_._instance,
  &::apollo::planning::_QpStSpeedConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/planning/proto/qp_st_speed_con"
  "fig.proto\022\017apollo.planning\032/modules/plan"
  "ning/proto/st_boundary_config.proto\"\231\003\n\016"
  "QpSplineConfig\022\"\n\032number_of_discrete_gra"
  "ph_t\030\001 \001(\r\022\024\n\014spline_order\030\002 \001(\r\022\033\n\023spee"
  "d_kernel_weight\030\003 \001(\001\022\033\n\023accel_kernel_we"
  "ight\030\004 \001(\001\022\032\n\022jerk_kernel_weight\030\005 \001(\001\022\025"
  "\n\rfollow_weight\030\006 \001(\001\022\023\n\013stop_weight\030\007 \001"
  "(\001\022\025\n\rcruise_weight\030\010 \001(\001\022\"\n\025regularizat"
  "ion_weight\030\t \001(\001:\0030.1\022\034\n\024follow_drag_dis"
  "tance\030\n \001(\001\022\036\n\026dp_st_reference_weight\030\013 "
  "\001(\001\022\037\n\027init_jerk_kernel_weight\030\014 \001(\001\022\024\n\014"
  "yield_weight\030\r \001(\001\022\033\n\023yield_drag_distanc"
  "e\030\016 \001(\001\"\366\001\n\021QpPiecewiseConfig\022#\n\033number_"
  "of_evaluated_graph_t\030\001 \001(\r\022\033\n\023accel_kern"
  "el_weight\030\002 \001(\001\022\032\n\022jerk_kernel_weight\030\003 "
  "\001(\001\022\025\n\rfollow_weight\030\004 \001(\001\022\023\n\013stop_weigh"
  "t\030\005 \001(\001\022\025\n\rcruise_weight\030\006 \001(\001\022\"\n\025regula"
  "rization_weight\030\007 \001(\001:\0030.1\022\034\n\024follow_dra"
  "g_distance\030\010 \001(\001\"\223\003\n\017QpStSpeedConfig\022\036\n\021"
  "total_path_length\030\001 \001(\001:\003200\022\025\n\ntotal_ti"
  "me\030\002 \001(\001:\0016\022\'\n\032preferred_max_acceleratio"
  "n\030\004 \001(\001:\0031.2\022(\n\032preferred_min_decelerati"
  "on\030\005 \001(\001:\004-1.8\022\033\n\020max_acceleration\030\006 \001(\001"
  ":\0012\022\036\n\020min_deceleration\030\007 \001(\001:\004-4.5\0229\n\020q"
  "p_spline_config\030\010 \001(\0132\037.apollo.planning."
  "QpSplineConfig\022\?\n\023qp_piecewise_config\030\t "
  "\001(\0132\".apollo.planning.QpPiecewiseConfig\022"
  "=\n\022st_boundary_config\030\n \001(\0132!.apollo.pla"
  "nning.StBoundaryConfig"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fst_5fboundary_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto = {
    false, false, 1182, descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto,
    "modules/planning/proto/qp_st_speed_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class QpSplineConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpSplineConfig>()._impl_._has_bits_);
  static void set_has_number_of_discrete_graph_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_spline_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_accel_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jerk_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_follow_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stop_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cruise_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_regularization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_follow_drag_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dp_st_reference_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_init_jerk_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_yield_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_yield_drag_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

QpSplineConfig::QpSplineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QpSplineConfig)
}
QpSplineConfig::QpSplineConfig(const QpSplineConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.number_of_discrete_graph_t_){}
    , decltype(_impl_.spline_order_){}
    , decltype(_impl_.speed_kernel_weight_){}
    , decltype(_impl_.accel_kernel_weight_){}
    , decltype(_impl_.jerk_kernel_weight_){}
    , decltype(_impl_.follow_weight_){}
    , decltype(_impl_.stop_weight_){}
    , decltype(_impl_.cruise_weight_){}
    , decltype(_impl_.follow_drag_distance_){}
    , decltype(_impl_.dp_st_reference_weight_){}
    , decltype(_impl_.init_jerk_kernel_weight_){}
    , decltype(_impl_.yield_weight_){}
    , decltype(_impl_.yield_drag_distance_){}
    , decltype(_impl_.regularization_weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.number_of_discrete_graph_t_, &from._impl_.number_of_discrete_graph_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.regularization_weight_) -
    reinterpret_cast<char*>(&_impl_.number_of_discrete_graph_t_)) + sizeof(_impl_.regularization_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplineConfig)
}

inline void QpSplineConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.number_of_discrete_graph_t_){0u}
    , decltype(_impl_.spline_order_){0u}
    , decltype(_impl_.speed_kernel_weight_){0}
    , decltype(_impl_.accel_kernel_weight_){0}
    , decltype(_impl_.jerk_kernel_weight_){0}
    , decltype(_impl_.follow_weight_){0}
    , decltype(_impl_.stop_weight_){0}
    , decltype(_impl_.cruise_weight_){0}
    , decltype(_impl_.follow_drag_distance_){0}
    , decltype(_impl_.dp_st_reference_weight_){0}
    , decltype(_impl_.init_jerk_kernel_weight_){0}
    , decltype(_impl_.yield_weight_){0}
    , decltype(_impl_.yield_drag_distance_){0}
    , decltype(_impl_.regularization_weight_){0.1}
  };
}

QpSplineConfig::~QpSplineConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplineConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QpSplineConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QpSplineConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QpSplineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplineConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.number_of_discrete_graph_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cruise_weight_) -
        reinterpret_cast<char*>(&_impl_.number_of_discrete_graph_t_)) + sizeof(_impl_.cruise_weight_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.follow_drag_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.yield_drag_distance_) -
        reinterpret_cast<char*>(&_impl_.follow_drag_distance_)) + sizeof(_impl_.yield_drag_distance_));
    _impl_.regularization_weight_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpSplineConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 number_of_discrete_graph_t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number_of_discrete_graph_t(&has_bits);
          _impl_.number_of_discrete_graph_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 spline_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_spline_order(&has_bits);
          _impl_.spline_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_kernel_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed_kernel_weight(&has_bits);
          _impl_.speed_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_kernel_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_accel_kernel_weight(&has_bits);
          _impl_.accel_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_kernel_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_jerk_kernel_weight(&has_bits);
          _impl_.jerk_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double follow_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_follow_weight(&has_bits);
          _impl_.follow_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_stop_weight(&has_bits);
          _impl_.stop_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cruise_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_cruise_weight(&has_bits);
          _impl_.cruise_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double regularization_weight = 9 [default = 0.1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_regularization_weight(&has_bits);
          _impl_.regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double follow_drag_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_follow_drag_distance(&has_bits);
          _impl_.follow_drag_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dp_st_reference_weight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_dp_st_reference_weight(&has_bits);
          _impl_.dp_st_reference_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double init_jerk_kernel_weight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_init_jerk_kernel_weight(&has_bits);
          _impl_.init_jerk_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double yield_weight = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_yield_weight(&has_bits);
          _impl_.yield_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double yield_drag_distance = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_yield_drag_distance(&has_bits);
          _impl_.yield_drag_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpSplineConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplineConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 number_of_discrete_graph_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number_of_discrete_graph_t(), target);
  }

  // optional uint32 spline_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_spline_order(), target);
  }

  // optional double speed_kernel_weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed_kernel_weight(), target);
  }

  // optional double accel_kernel_weight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_accel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_follow_weight(), target);
  }

  // optional double stop_weight = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_stop_weight(), target);
  }

  // optional double cruise_weight = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_cruise_weight(), target);
  }

  // optional double regularization_weight = 9 [default = 0.1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_regularization_weight(), target);
  }

  // optional double follow_drag_distance = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_follow_drag_distance(), target);
  }

  // optional double dp_st_reference_weight = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_dp_st_reference_weight(), target);
  }

  // optional double init_jerk_kernel_weight = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_init_jerk_kernel_weight(), target);
  }

  // optional double yield_weight = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_yield_weight(), target);
  }

  // optional double yield_drag_distance = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_yield_drag_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplineConfig)
  return target;
}

size_t QpSplineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplineConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 number_of_discrete_graph_t = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_discrete_graph_t());
    }

    // optional uint32 spline_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spline_order());
    }

    // optional double speed_kernel_weight = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double accel_kernel_weight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double cruise_weight = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double follow_drag_distance = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double dp_st_reference_weight = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double init_jerk_kernel_weight = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double yield_weight = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double yield_drag_distance = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 9 [default = 0.1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpSplineConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpSplineConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpSplineConfig::GetClassData() const { return &_class_data_; }

void QpSplineConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpSplineConfig *>(to)->MergeFrom(
      static_cast<const QpSplineConfig &>(from));
}


void QpSplineConfig::MergeFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.number_of_discrete_graph_t_ = from._impl_.number_of_discrete_graph_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.spline_order_ = from._impl_.spline_order_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.speed_kernel_weight_ = from._impl_.speed_kernel_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.accel_kernel_weight_ = from._impl_.accel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.jerk_kernel_weight_ = from._impl_.jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.follow_weight_ = from._impl_.follow_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.stop_weight_ = from._impl_.stop_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.cruise_weight_ = from._impl_.cruise_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.follow_drag_distance_ = from._impl_.follow_drag_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.dp_st_reference_weight_ = from._impl_.dp_st_reference_weight_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.init_jerk_kernel_weight_ = from._impl_.init_jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.yield_weight_ = from._impl_.yield_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.yield_drag_distance_ = from._impl_.yield_drag_distance_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.regularization_weight_ = from._impl_.regularization_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpSplineConfig::CopyFrom(const QpSplineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineConfig::IsInitialized() const {
  return true;
}

void QpSplineConfig::InternalSwap(QpSplineConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QpSplineConfig, _impl_.yield_drag_distance_)
      + sizeof(QpSplineConfig::_impl_.yield_drag_distance_)
      - PROTOBUF_FIELD_OFFSET(QpSplineConfig, _impl_.number_of_discrete_graph_t_)>(
          reinterpret_cast<char*>(&_impl_.number_of_discrete_graph_t_),
          reinterpret_cast<char*>(&other->_impl_.number_of_discrete_graph_t_));
  swap(_impl_.regularization_weight_, other->_impl_.regularization_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpSplineConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto[0]);
}

// ===================================================================

class QpPiecewiseConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpPiecewiseConfig>()._impl_._has_bits_);
  static void set_has_number_of_evaluated_graph_t(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_accel_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_jerk_kernel_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_follow_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cruise_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_regularization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_follow_drag_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

QpPiecewiseConfig::QpPiecewiseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QpPiecewiseConfig)
}
QpPiecewiseConfig::QpPiecewiseConfig(const QpPiecewiseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_kernel_weight_){}
    , decltype(_impl_.jerk_kernel_weight_){}
    , decltype(_impl_.follow_weight_){}
    , decltype(_impl_.stop_weight_){}
    , decltype(_impl_.cruise_weight_){}
    , decltype(_impl_.follow_drag_distance_){}
    , decltype(_impl_.number_of_evaluated_graph_t_){}
    , decltype(_impl_.regularization_weight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accel_kernel_weight_, &from._impl_.accel_kernel_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.regularization_weight_) -
    reinterpret_cast<char*>(&_impl_.accel_kernel_weight_)) + sizeof(_impl_.regularization_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpPiecewiseConfig)
}

inline void QpPiecewiseConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accel_kernel_weight_){0}
    , decltype(_impl_.jerk_kernel_weight_){0}
    , decltype(_impl_.follow_weight_){0}
    , decltype(_impl_.stop_weight_){0}
    , decltype(_impl_.cruise_weight_){0}
    , decltype(_impl_.follow_drag_distance_){0}
    , decltype(_impl_.number_of_evaluated_graph_t_){0u}
    , decltype(_impl_.regularization_weight_){0.1}
  };
}

QpPiecewiseConfig::~QpPiecewiseConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpPiecewiseConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QpPiecewiseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QpPiecewiseConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QpPiecewiseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpPiecewiseConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.accel_kernel_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.number_of_evaluated_graph_t_) -
        reinterpret_cast<char*>(&_impl_.accel_kernel_weight_)) + sizeof(_impl_.number_of_evaluated_graph_t_));
    _impl_.regularization_weight_ = 0.1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpPiecewiseConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 number_of_evaluated_graph_t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number_of_evaluated_graph_t(&has_bits);
          _impl_.number_of_evaluated_graph_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double accel_kernel_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_accel_kernel_weight(&has_bits);
          _impl_.accel_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk_kernel_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_jerk_kernel_weight(&has_bits);
          _impl_.jerk_kernel_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double follow_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_follow_weight(&has_bits);
          _impl_.follow_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_stop_weight(&has_bits);
          _impl_.stop_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cruise_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_cruise_weight(&has_bits);
          _impl_.cruise_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double regularization_weight = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_regularization_weight(&has_bits);
          _impl_.regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double follow_drag_distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_follow_drag_distance(&has_bits);
          _impl_.follow_drag_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpPiecewiseConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpPiecewiseConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 number_of_evaluated_graph_t = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number_of_evaluated_graph_t(), target);
  }

  // optional double accel_kernel_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_accel_kernel_weight(), target);
  }

  // optional double jerk_kernel_weight = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_jerk_kernel_weight(), target);
  }

  // optional double follow_weight = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_follow_weight(), target);
  }

  // optional double stop_weight = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_stop_weight(), target);
  }

  // optional double cruise_weight = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_cruise_weight(), target);
  }

  // optional double regularization_weight = 7 [default = 0.1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_regularization_weight(), target);
  }

  // optional double follow_drag_distance = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_follow_drag_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpPiecewiseConfig)
  return target;
}

size_t QpPiecewiseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpPiecewiseConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double accel_kernel_weight = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double jerk_kernel_weight = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double follow_weight = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double stop_weight = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double cruise_weight = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double follow_drag_distance = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 number_of_evaluated_graph_t = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_evaluated_graph_t());
    }

    // optional double regularization_weight = 7 [default = 0.1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpPiecewiseConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpPiecewiseConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpPiecewiseConfig::GetClassData() const { return &_class_data_; }

void QpPiecewiseConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpPiecewiseConfig *>(to)->MergeFrom(
      static_cast<const QpPiecewiseConfig &>(from));
}


void QpPiecewiseConfig::MergeFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpPiecewiseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.accel_kernel_weight_ = from._impl_.accel_kernel_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.jerk_kernel_weight_ = from._impl_.jerk_kernel_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.follow_weight_ = from._impl_.follow_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.stop_weight_ = from._impl_.stop_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.cruise_weight_ = from._impl_.cruise_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.follow_drag_distance_ = from._impl_.follow_drag_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.number_of_evaluated_graph_t_ = from._impl_.number_of_evaluated_graph_t_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.regularization_weight_ = from._impl_.regularization_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpPiecewiseConfig::CopyFrom(const QpPiecewiseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpPiecewiseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpPiecewiseConfig::IsInitialized() const {
  return true;
}

void QpPiecewiseConfig::InternalSwap(QpPiecewiseConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QpPiecewiseConfig, _impl_.number_of_evaluated_graph_t_)
      + sizeof(QpPiecewiseConfig::_impl_.number_of_evaluated_graph_t_)
      - PROTOBUF_FIELD_OFFSET(QpPiecewiseConfig, _impl_.accel_kernel_weight_)>(
          reinterpret_cast<char*>(&_impl_.accel_kernel_weight_),
          reinterpret_cast<char*>(&other->_impl_.accel_kernel_weight_));
  swap(_impl_.regularization_weight_, other->_impl_.regularization_weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpPiecewiseConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto[1]);
}

// ===================================================================

class QpStSpeedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpStSpeedConfig>()._impl_._has_bits_);
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preferred_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_preferred_min_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_min_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::apollo::planning::QpSplineConfig& qp_spline_config(const QpStSpeedConfig* msg);
  static void set_has_qp_spline_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::QpPiecewiseConfig& qp_piecewise_config(const QpStSpeedConfig* msg);
  static void set_has_qp_piecewise_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::StBoundaryConfig& st_boundary_config(const QpStSpeedConfig* msg);
  static void set_has_st_boundary_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::QpSplineConfig&
QpStSpeedConfig::_Internal::qp_spline_config(const QpStSpeedConfig* msg) {
  return *msg->_impl_.qp_spline_config_;
}
const ::apollo::planning::QpPiecewiseConfig&
QpStSpeedConfig::_Internal::qp_piecewise_config(const QpStSpeedConfig* msg) {
  return *msg->_impl_.qp_piecewise_config_;
}
const ::apollo::planning::StBoundaryConfig&
QpStSpeedConfig::_Internal::st_boundary_config(const QpStSpeedConfig* msg) {
  return *msg->_impl_.st_boundary_config_;
}
void QpStSpeedConfig::clear_st_boundary_config() {
  if (_impl_.st_boundary_config_ != nullptr) _impl_.st_boundary_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
QpStSpeedConfig::QpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QpStSpeedConfig)
}
QpStSpeedConfig::QpStSpeedConfig(const QpStSpeedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qp_spline_config_){nullptr}
    , decltype(_impl_.qp_piecewise_config_){nullptr}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.total_path_length_){}
    , decltype(_impl_.total_time_){}
    , decltype(_impl_.preferred_max_acceleration_){}
    , decltype(_impl_.preferred_min_deceleration_){}
    , decltype(_impl_.max_acceleration_){}
    , decltype(_impl_.min_deceleration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qp_spline_config()) {
    _impl_.qp_spline_config_ = new ::apollo::planning::QpSplineConfig(*from._impl_.qp_spline_config_);
  }
  if (from._internal_has_qp_piecewise_config()) {
    _impl_.qp_piecewise_config_ = new ::apollo::planning::QpPiecewiseConfig(*from._impl_.qp_piecewise_config_);
  }
  if (from._internal_has_st_boundary_config()) {
    _impl_.st_boundary_config_ = new ::apollo::planning::StBoundaryConfig(*from._impl_.st_boundary_config_);
  }
  ::memcpy(&_impl_.total_path_length_, &from._impl_.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_deceleration_) -
    reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.min_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpStSpeedConfig)
}

inline void QpStSpeedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.qp_spline_config_){nullptr}
    , decltype(_impl_.qp_piecewise_config_){nullptr}
    , decltype(_impl_.st_boundary_config_){nullptr}
    , decltype(_impl_.total_path_length_){200}
    , decltype(_impl_.total_time_){6}
    , decltype(_impl_.preferred_max_acceleration_){1.2}
    , decltype(_impl_.preferred_min_deceleration_){-1.8}
    , decltype(_impl_.max_acceleration_){2}
    , decltype(_impl_.min_deceleration_){-4.5}
  };
}

QpStSpeedConfig::~QpStSpeedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpStSpeedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QpStSpeedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.qp_spline_config_;
  if (this != internal_default_instance()) delete _impl_.qp_piecewise_config_;
  if (this != internal_default_instance()) delete _impl_.st_boundary_config_;
}

void QpStSpeedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QpStSpeedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpStSpeedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.qp_spline_config_ != nullptr);
      _impl_.qp_spline_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.qp_piecewise_config_ != nullptr);
      _impl_.qp_piecewise_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.st_boundary_config_ != nullptr);
      _impl_.st_boundary_config_->Clear();
    }
    _impl_.total_path_length_ = 200;
    _impl_.total_time_ = 6;
    _impl_.preferred_max_acceleration_ = 1.2;
    _impl_.preferred_min_deceleration_ = -1.8;
    _impl_.max_acceleration_ = 2;
  }
  _impl_.min_deceleration_ = -4.5;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpStSpeedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_path_length = 1 [default = 200];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_total_path_length(&has_bits);
          _impl_.total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double total_time = 2 [default = 6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_time(&has_bits);
          _impl_.total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_max_acceleration = 4 [default = 1.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_preferred_max_acceleration(&has_bits);
          _impl_.preferred_max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double preferred_min_deceleration = 5 [default = -1.8];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_preferred_min_deceleration(&has_bits);
          _impl_.preferred_min_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_acceleration = 6 [default = 2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_max_acceleration(&has_bits);
          _impl_.max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_deceleration = 7 [default = -4.5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_min_deceleration(&has_bits);
          _impl_.min_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_piecewise_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_boundary_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpStSpeedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpStSpeedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_path_length = 1 [default = 200];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_path_length(), target);
  }

  // optional double total_time = 2 [default = 6];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_time(), target);
  }

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_preferred_max_acceleration(), target);
  }

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_preferred_min_deceleration(), target);
  }

  // optional double max_acceleration = 6 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_acceleration(), target);
  }

  // optional double min_deceleration = 7 [default = -4.5];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_min_deceleration(), target);
  }

  // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::qp_spline_config(this),
        _Internal::qp_spline_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::qp_piecewise_config(this),
        _Internal::qp_piecewise_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::st_boundary_config(this),
        _Internal::st_boundary_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpStSpeedConfig)
  return target;
}

size_t QpStSpeedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpStSpeedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qp_spline_config_);
    }

    // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qp_piecewise_config_);
    }

    // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.st_boundary_config_);
    }

    // optional double total_path_length = 1 [default = 200];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double total_time = 2 [default = 6];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double preferred_max_acceleration = 4 [default = 1.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double preferred_min_deceleration = 5 [default = -1.8];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration = 6 [default = 2];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional double min_deceleration = 7 [default = -4.5];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpStSpeedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpStSpeedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpStSpeedConfig::GetClassData() const { return &_class_data_; }

void QpStSpeedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpStSpeedConfig *>(to)->MergeFrom(
      static_cast<const QpStSpeedConfig &>(from));
}


void QpStSpeedConfig::MergeFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpStSpeedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_qp_spline_config()->::apollo::planning::QpSplineConfig::MergeFrom(from._internal_qp_spline_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_qp_piecewise_config()->::apollo::planning::QpPiecewiseConfig::MergeFrom(from._internal_qp_piecewise_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_st_boundary_config()->::apollo::planning::StBoundaryConfig::MergeFrom(from._internal_st_boundary_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.total_path_length_ = from._impl_.total_path_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.total_time_ = from._impl_.total_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.preferred_max_acceleration_ = from._impl_.preferred_max_acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.preferred_min_deceleration_ = from._impl_.preferred_min_deceleration_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.max_acceleration_ = from._impl_.max_acceleration_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_min_deceleration(from._internal_min_deceleration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpStSpeedConfig::CopyFrom(const QpStSpeedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpStSpeedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpStSpeedConfig::IsInitialized() const {
  return true;
}

void QpStSpeedConfig::InternalSwap(QpStSpeedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QpStSpeedConfig, _impl_.st_boundary_config_)
      + sizeof(QpStSpeedConfig::_impl_.st_boundary_config_)
      - PROTOBUF_FIELD_OFFSET(QpStSpeedConfig, _impl_.qp_spline_config_)>(
          reinterpret_cast<char*>(&_impl_.qp_spline_config_),
          reinterpret_cast<char*>(&other->_impl_.qp_spline_config_));
  swap(_impl_.total_path_length_, other->_impl_.total_path_length_);
  swap(_impl_.total_time_, other->_impl_.total_time_);
  swap(_impl_.preferred_max_acceleration_, other->_impl_.preferred_max_acceleration_);
  swap(_impl_.preferred_min_deceleration_, other->_impl_.preferred_min_deceleration_);
  swap(_impl_.max_acceleration_, other->_impl_.max_acceleration_);
  swap(_impl_.min_deceleration_, other->_impl_.min_deceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpStSpeedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QpSplineConfig*
Arena::CreateMaybeMessage< ::apollo::planning::QpSplineConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QpSplineConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QpPiecewiseConfig*
Arena::CreateMaybeMessage< ::apollo::planning::QpPiecewiseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QpPiecewiseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::QpStSpeedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::QpStSpeedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QpStSpeedConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
