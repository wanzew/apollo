// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_st_speed_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/st_boundary_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto;
namespace apollo {
namespace planning {
class QpPiecewiseConfig;
struct QpPiecewiseConfigDefaultTypeInternal;
extern QpPiecewiseConfigDefaultTypeInternal _QpPiecewiseConfig_default_instance_;
class QpSplineConfig;
struct QpSplineConfigDefaultTypeInternal;
extern QpSplineConfigDefaultTypeInternal _QpSplineConfig_default_instance_;
class QpStSpeedConfig;
struct QpStSpeedConfigDefaultTypeInternal;
extern QpStSpeedConfigDefaultTypeInternal _QpStSpeedConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::QpPiecewiseConfig* Arena::CreateMaybeMessage<::apollo::planning::QpPiecewiseConfig>(Arena*);
template<> ::apollo::planning::QpSplineConfig* Arena::CreateMaybeMessage<::apollo::planning::QpSplineConfig>(Arena*);
template<> ::apollo::planning::QpStSpeedConfig* Arena::CreateMaybeMessage<::apollo::planning::QpStSpeedConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class QpSplineConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplineConfig) */ {
 public:
  inline QpSplineConfig() : QpSplineConfig(nullptr) {}
  ~QpSplineConfig() override;
  explicit PROTOBUF_CONSTEXPR QpSplineConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QpSplineConfig(const QpSplineConfig& from);
  QpSplineConfig(QpSplineConfig&& from) noexcept
    : QpSplineConfig() {
    *this = ::std::move(from);
  }

  inline QpSplineConfig& operator=(const QpSplineConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QpSplineConfig& operator=(QpSplineConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QpSplineConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const QpSplineConfig* internal_default_instance() {
    return reinterpret_cast<const QpSplineConfig*>(
               &_QpSplineConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QpSplineConfig& a, QpSplineConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QpSplineConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QpSplineConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QpSplineConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QpSplineConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QpSplineConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QpSplineConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpSplineConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QpSplineConfig";
  }
  protected:
  explicit QpSplineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberOfDiscreteGraphTFieldNumber = 1,
    kSplineOrderFieldNumber = 2,
    kSpeedKernelWeightFieldNumber = 3,
    kAccelKernelWeightFieldNumber = 4,
    kJerkKernelWeightFieldNumber = 5,
    kFollowWeightFieldNumber = 6,
    kStopWeightFieldNumber = 7,
    kCruiseWeightFieldNumber = 8,
    kFollowDragDistanceFieldNumber = 10,
    kDpStReferenceWeightFieldNumber = 11,
    kInitJerkKernelWeightFieldNumber = 12,
    kYieldWeightFieldNumber = 13,
    kYieldDragDistanceFieldNumber = 14,
    kRegularizationWeightFieldNumber = 9,
  };
  // optional uint32 number_of_discrete_graph_t = 1;
  bool has_number_of_discrete_graph_t() const;
  private:
  bool _internal_has_number_of_discrete_graph_t() const;
  public:
  void clear_number_of_discrete_graph_t();
  uint32_t number_of_discrete_graph_t() const;
  void set_number_of_discrete_graph_t(uint32_t value);
  private:
  uint32_t _internal_number_of_discrete_graph_t() const;
  void _internal_set_number_of_discrete_graph_t(uint32_t value);
  public:

  // optional uint32 spline_order = 2;
  bool has_spline_order() const;
  private:
  bool _internal_has_spline_order() const;
  public:
  void clear_spline_order();
  uint32_t spline_order() const;
  void set_spline_order(uint32_t value);
  private:
  uint32_t _internal_spline_order() const;
  void _internal_set_spline_order(uint32_t value);
  public:

  // optional double speed_kernel_weight = 3;
  bool has_speed_kernel_weight() const;
  private:
  bool _internal_has_speed_kernel_weight() const;
  public:
  void clear_speed_kernel_weight();
  double speed_kernel_weight() const;
  void set_speed_kernel_weight(double value);
  private:
  double _internal_speed_kernel_weight() const;
  void _internal_set_speed_kernel_weight(double value);
  public:

  // optional double accel_kernel_weight = 4;
  bool has_accel_kernel_weight() const;
  private:
  bool _internal_has_accel_kernel_weight() const;
  public:
  void clear_accel_kernel_weight();
  double accel_kernel_weight() const;
  void set_accel_kernel_weight(double value);
  private:
  double _internal_accel_kernel_weight() const;
  void _internal_set_accel_kernel_weight(double value);
  public:

  // optional double jerk_kernel_weight = 5;
  bool has_jerk_kernel_weight() const;
  private:
  bool _internal_has_jerk_kernel_weight() const;
  public:
  void clear_jerk_kernel_weight();
  double jerk_kernel_weight() const;
  void set_jerk_kernel_weight(double value);
  private:
  double _internal_jerk_kernel_weight() const;
  void _internal_set_jerk_kernel_weight(double value);
  public:

  // optional double follow_weight = 6;
  bool has_follow_weight() const;
  private:
  bool _internal_has_follow_weight() const;
  public:
  void clear_follow_weight();
  double follow_weight() const;
  void set_follow_weight(double value);
  private:
  double _internal_follow_weight() const;
  void _internal_set_follow_weight(double value);
  public:

  // optional double stop_weight = 7;
  bool has_stop_weight() const;
  private:
  bool _internal_has_stop_weight() const;
  public:
  void clear_stop_weight();
  double stop_weight() const;
  void set_stop_weight(double value);
  private:
  double _internal_stop_weight() const;
  void _internal_set_stop_weight(double value);
  public:

  // optional double cruise_weight = 8;
  bool has_cruise_weight() const;
  private:
  bool _internal_has_cruise_weight() const;
  public:
  void clear_cruise_weight();
  double cruise_weight() const;
  void set_cruise_weight(double value);
  private:
  double _internal_cruise_weight() const;
  void _internal_set_cruise_weight(double value);
  public:

  // optional double follow_drag_distance = 10;
  bool has_follow_drag_distance() const;
  private:
  bool _internal_has_follow_drag_distance() const;
  public:
  void clear_follow_drag_distance();
  double follow_drag_distance() const;
  void set_follow_drag_distance(double value);
  private:
  double _internal_follow_drag_distance() const;
  void _internal_set_follow_drag_distance(double value);
  public:

  // optional double dp_st_reference_weight = 11;
  bool has_dp_st_reference_weight() const;
  private:
  bool _internal_has_dp_st_reference_weight() const;
  public:
  void clear_dp_st_reference_weight();
  double dp_st_reference_weight() const;
  void set_dp_st_reference_weight(double value);
  private:
  double _internal_dp_st_reference_weight() const;
  void _internal_set_dp_st_reference_weight(double value);
  public:

  // optional double init_jerk_kernel_weight = 12;
  bool has_init_jerk_kernel_weight() const;
  private:
  bool _internal_has_init_jerk_kernel_weight() const;
  public:
  void clear_init_jerk_kernel_weight();
  double init_jerk_kernel_weight() const;
  void set_init_jerk_kernel_weight(double value);
  private:
  double _internal_init_jerk_kernel_weight() const;
  void _internal_set_init_jerk_kernel_weight(double value);
  public:

  // optional double yield_weight = 13;
  bool has_yield_weight() const;
  private:
  bool _internal_has_yield_weight() const;
  public:
  void clear_yield_weight();
  double yield_weight() const;
  void set_yield_weight(double value);
  private:
  double _internal_yield_weight() const;
  void _internal_set_yield_weight(double value);
  public:

  // optional double yield_drag_distance = 14;
  bool has_yield_drag_distance() const;
  private:
  bool _internal_has_yield_drag_distance() const;
  public:
  void clear_yield_drag_distance();
  double yield_drag_distance() const;
  void set_yield_drag_distance(double value);
  private:
  double _internal_yield_drag_distance() const;
  void _internal_set_yield_drag_distance(double value);
  public:

  // optional double regularization_weight = 9 [default = 0.1];
  bool has_regularization_weight() const;
  private:
  bool _internal_has_regularization_weight() const;
  public:
  void clear_regularization_weight();
  double regularization_weight() const;
  void set_regularization_weight(double value);
  private:
  double _internal_regularization_weight() const;
  void _internal_set_regularization_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplineConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t number_of_discrete_graph_t_;
    uint32_t spline_order_;
    double speed_kernel_weight_;
    double accel_kernel_weight_;
    double jerk_kernel_weight_;
    double follow_weight_;
    double stop_weight_;
    double cruise_weight_;
    double follow_drag_distance_;
    double dp_st_reference_weight_;
    double init_jerk_kernel_weight_;
    double yield_weight_;
    double yield_drag_distance_;
    double regularization_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class QpPiecewiseConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpPiecewiseConfig) */ {
 public:
  inline QpPiecewiseConfig() : QpPiecewiseConfig(nullptr) {}
  ~QpPiecewiseConfig() override;
  explicit PROTOBUF_CONSTEXPR QpPiecewiseConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QpPiecewiseConfig(const QpPiecewiseConfig& from);
  QpPiecewiseConfig(QpPiecewiseConfig&& from) noexcept
    : QpPiecewiseConfig() {
    *this = ::std::move(from);
  }

  inline QpPiecewiseConfig& operator=(const QpPiecewiseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QpPiecewiseConfig& operator=(QpPiecewiseConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QpPiecewiseConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const QpPiecewiseConfig* internal_default_instance() {
    return reinterpret_cast<const QpPiecewiseConfig*>(
               &_QpPiecewiseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QpPiecewiseConfig& a, QpPiecewiseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QpPiecewiseConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QpPiecewiseConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QpPiecewiseConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QpPiecewiseConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QpPiecewiseConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QpPiecewiseConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpPiecewiseConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QpPiecewiseConfig";
  }
  protected:
  explicit QpPiecewiseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelKernelWeightFieldNumber = 2,
    kJerkKernelWeightFieldNumber = 3,
    kFollowWeightFieldNumber = 4,
    kStopWeightFieldNumber = 5,
    kCruiseWeightFieldNumber = 6,
    kFollowDragDistanceFieldNumber = 8,
    kNumberOfEvaluatedGraphTFieldNumber = 1,
    kRegularizationWeightFieldNumber = 7,
  };
  // optional double accel_kernel_weight = 2;
  bool has_accel_kernel_weight() const;
  private:
  bool _internal_has_accel_kernel_weight() const;
  public:
  void clear_accel_kernel_weight();
  double accel_kernel_weight() const;
  void set_accel_kernel_weight(double value);
  private:
  double _internal_accel_kernel_weight() const;
  void _internal_set_accel_kernel_weight(double value);
  public:

  // optional double jerk_kernel_weight = 3;
  bool has_jerk_kernel_weight() const;
  private:
  bool _internal_has_jerk_kernel_weight() const;
  public:
  void clear_jerk_kernel_weight();
  double jerk_kernel_weight() const;
  void set_jerk_kernel_weight(double value);
  private:
  double _internal_jerk_kernel_weight() const;
  void _internal_set_jerk_kernel_weight(double value);
  public:

  // optional double follow_weight = 4;
  bool has_follow_weight() const;
  private:
  bool _internal_has_follow_weight() const;
  public:
  void clear_follow_weight();
  double follow_weight() const;
  void set_follow_weight(double value);
  private:
  double _internal_follow_weight() const;
  void _internal_set_follow_weight(double value);
  public:

  // optional double stop_weight = 5;
  bool has_stop_weight() const;
  private:
  bool _internal_has_stop_weight() const;
  public:
  void clear_stop_weight();
  double stop_weight() const;
  void set_stop_weight(double value);
  private:
  double _internal_stop_weight() const;
  void _internal_set_stop_weight(double value);
  public:

  // optional double cruise_weight = 6;
  bool has_cruise_weight() const;
  private:
  bool _internal_has_cruise_weight() const;
  public:
  void clear_cruise_weight();
  double cruise_weight() const;
  void set_cruise_weight(double value);
  private:
  double _internal_cruise_weight() const;
  void _internal_set_cruise_weight(double value);
  public:

  // optional double follow_drag_distance = 8;
  bool has_follow_drag_distance() const;
  private:
  bool _internal_has_follow_drag_distance() const;
  public:
  void clear_follow_drag_distance();
  double follow_drag_distance() const;
  void set_follow_drag_distance(double value);
  private:
  double _internal_follow_drag_distance() const;
  void _internal_set_follow_drag_distance(double value);
  public:

  // optional uint32 number_of_evaluated_graph_t = 1;
  bool has_number_of_evaluated_graph_t() const;
  private:
  bool _internal_has_number_of_evaluated_graph_t() const;
  public:
  void clear_number_of_evaluated_graph_t();
  uint32_t number_of_evaluated_graph_t() const;
  void set_number_of_evaluated_graph_t(uint32_t value);
  private:
  uint32_t _internal_number_of_evaluated_graph_t() const;
  void _internal_set_number_of_evaluated_graph_t(uint32_t value);
  public:

  // optional double regularization_weight = 7 [default = 0.1];
  bool has_regularization_weight() const;
  private:
  bool _internal_has_regularization_weight() const;
  public:
  void clear_regularization_weight();
  double regularization_weight() const;
  void set_regularization_weight(double value);
  private:
  double _internal_regularization_weight() const;
  void _internal_set_regularization_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QpPiecewiseConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double accel_kernel_weight_;
    double jerk_kernel_weight_;
    double follow_weight_;
    double stop_weight_;
    double cruise_weight_;
    double follow_drag_distance_;
    uint32_t number_of_evaluated_graph_t_;
    double regularization_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class QpStSpeedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpStSpeedConfig) */ {
 public:
  inline QpStSpeedConfig() : QpStSpeedConfig(nullptr) {}
  ~QpStSpeedConfig() override;
  explicit PROTOBUF_CONSTEXPR QpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QpStSpeedConfig(const QpStSpeedConfig& from);
  QpStSpeedConfig(QpStSpeedConfig&& from) noexcept
    : QpStSpeedConfig() {
    *this = ::std::move(from);
  }

  inline QpStSpeedConfig& operator=(const QpStSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QpStSpeedConfig& operator=(QpStSpeedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QpStSpeedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const QpStSpeedConfig* internal_default_instance() {
    return reinterpret_cast<const QpStSpeedConfig*>(
               &_QpStSpeedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QpStSpeedConfig& a, QpStSpeedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QpStSpeedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QpStSpeedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QpStSpeedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QpStSpeedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QpStSpeedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QpStSpeedConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpStSpeedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QpStSpeedConfig";
  }
  protected:
  explicit QpStSpeedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQpSplineConfigFieldNumber = 8,
    kQpPiecewiseConfigFieldNumber = 9,
    kStBoundaryConfigFieldNumber = 10,
    kTotalPathLengthFieldNumber = 1,
    kTotalTimeFieldNumber = 2,
    kPreferredMaxAccelerationFieldNumber = 4,
    kPreferredMinDecelerationFieldNumber = 5,
    kMaxAccelerationFieldNumber = 6,
    kMinDecelerationFieldNumber = 7,
  };
  // optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
  bool has_qp_spline_config() const;
  private:
  bool _internal_has_qp_spline_config() const;
  public:
  void clear_qp_spline_config();
  const ::apollo::planning::QpSplineConfig& qp_spline_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::QpSplineConfig* release_qp_spline_config();
  ::apollo::planning::QpSplineConfig* mutable_qp_spline_config();
  void set_allocated_qp_spline_config(::apollo::planning::QpSplineConfig* qp_spline_config);
  private:
  const ::apollo::planning::QpSplineConfig& _internal_qp_spline_config() const;
  ::apollo::planning::QpSplineConfig* _internal_mutable_qp_spline_config();
  public:
  void unsafe_arena_set_allocated_qp_spline_config(
      ::apollo::planning::QpSplineConfig* qp_spline_config);
  ::apollo::planning::QpSplineConfig* unsafe_arena_release_qp_spline_config();

  // optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
  bool has_qp_piecewise_config() const;
  private:
  bool _internal_has_qp_piecewise_config() const;
  public:
  void clear_qp_piecewise_config();
  const ::apollo::planning::QpPiecewiseConfig& qp_piecewise_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::QpPiecewiseConfig* release_qp_piecewise_config();
  ::apollo::planning::QpPiecewiseConfig* mutable_qp_piecewise_config();
  void set_allocated_qp_piecewise_config(::apollo::planning::QpPiecewiseConfig* qp_piecewise_config);
  private:
  const ::apollo::planning::QpPiecewiseConfig& _internal_qp_piecewise_config() const;
  ::apollo::planning::QpPiecewiseConfig* _internal_mutable_qp_piecewise_config();
  public:
  void unsafe_arena_set_allocated_qp_piecewise_config(
      ::apollo::planning::QpPiecewiseConfig* qp_piecewise_config);
  ::apollo::planning::QpPiecewiseConfig* unsafe_arena_release_qp_piecewise_config();

  // optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
  bool has_st_boundary_config() const;
  private:
  bool _internal_has_st_boundary_config() const;
  public:
  void clear_st_boundary_config();
  const ::apollo::planning::StBoundaryConfig& st_boundary_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::StBoundaryConfig* release_st_boundary_config();
  ::apollo::planning::StBoundaryConfig* mutable_st_boundary_config();
  void set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config);
  private:
  const ::apollo::planning::StBoundaryConfig& _internal_st_boundary_config() const;
  ::apollo::planning::StBoundaryConfig* _internal_mutable_st_boundary_config();
  public:
  void unsafe_arena_set_allocated_st_boundary_config(
      ::apollo::planning::StBoundaryConfig* st_boundary_config);
  ::apollo::planning::StBoundaryConfig* unsafe_arena_release_st_boundary_config();

  // optional double total_path_length = 1 [default = 200];
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  double total_path_length() const;
  void set_total_path_length(double value);
  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);
  public:

  // optional double total_time = 2 [default = 6];
  bool has_total_time() const;
  private:
  bool _internal_has_total_time() const;
  public:
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // optional double preferred_max_acceleration = 4 [default = 1.2];
  bool has_preferred_max_acceleration() const;
  private:
  bool _internal_has_preferred_max_acceleration() const;
  public:
  void clear_preferred_max_acceleration();
  double preferred_max_acceleration() const;
  void set_preferred_max_acceleration(double value);
  private:
  double _internal_preferred_max_acceleration() const;
  void _internal_set_preferred_max_acceleration(double value);
  public:

  // optional double preferred_min_deceleration = 5 [default = -1.8];
  bool has_preferred_min_deceleration() const;
  private:
  bool _internal_has_preferred_min_deceleration() const;
  public:
  void clear_preferred_min_deceleration();
  double preferred_min_deceleration() const;
  void set_preferred_min_deceleration(double value);
  private:
  double _internal_preferred_min_deceleration() const;
  void _internal_set_preferred_min_deceleration(double value);
  public:

  // optional double max_acceleration = 6 [default = 2];
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double min_deceleration = 7 [default = -4.5];
  bool has_min_deceleration() const;
  private:
  bool _internal_has_min_deceleration() const;
  public:
  void clear_min_deceleration();
  double min_deceleration() const;
  void set_min_deceleration(double value);
  private:
  double _internal_min_deceleration() const;
  void _internal_set_min_deceleration(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QpStSpeedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::QpSplineConfig* qp_spline_config_;
    ::apollo::planning::QpPiecewiseConfig* qp_piecewise_config_;
    ::apollo::planning::StBoundaryConfig* st_boundary_config_;
    double total_path_length_;
    double total_time_;
    double preferred_max_acceleration_;
    double preferred_min_deceleration_;
    double max_acceleration_;
    double min_deceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QpSplineConfig

// optional uint32 number_of_discrete_graph_t = 1;
inline bool QpSplineConfig::_internal_has_number_of_discrete_graph_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QpSplineConfig::has_number_of_discrete_graph_t() const {
  return _internal_has_number_of_discrete_graph_t();
}
inline void QpSplineConfig::clear_number_of_discrete_graph_t() {
  _impl_.number_of_discrete_graph_t_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t QpSplineConfig::_internal_number_of_discrete_graph_t() const {
  return _impl_.number_of_discrete_graph_t_;
}
inline uint32_t QpSplineConfig::number_of_discrete_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
  return _internal_number_of_discrete_graph_t();
}
inline void QpSplineConfig::_internal_set_number_of_discrete_graph_t(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.number_of_discrete_graph_t_ = value;
}
inline void QpSplineConfig::set_number_of_discrete_graph_t(uint32_t value) {
  _internal_set_number_of_discrete_graph_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.number_of_discrete_graph_t)
}

// optional uint32 spline_order = 2;
inline bool QpSplineConfig::_internal_has_spline_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QpSplineConfig::has_spline_order() const {
  return _internal_has_spline_order();
}
inline void QpSplineConfig::clear_spline_order() {
  _impl_.spline_order_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t QpSplineConfig::_internal_spline_order() const {
  return _impl_.spline_order_;
}
inline uint32_t QpSplineConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.spline_order)
  return _internal_spline_order();
}
inline void QpSplineConfig::_internal_set_spline_order(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.spline_order_ = value;
}
inline void QpSplineConfig::set_spline_order(uint32_t value) {
  _internal_set_spline_order(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.spline_order)
}

// optional double speed_kernel_weight = 3;
inline bool QpSplineConfig::_internal_has_speed_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QpSplineConfig::has_speed_kernel_weight() const {
  return _internal_has_speed_kernel_weight();
}
inline void QpSplineConfig::clear_speed_kernel_weight() {
  _impl_.speed_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QpSplineConfig::_internal_speed_kernel_weight() const {
  return _impl_.speed_kernel_weight_;
}
inline double QpSplineConfig::speed_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.speed_kernel_weight)
  return _internal_speed_kernel_weight();
}
inline void QpSplineConfig::_internal_set_speed_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.speed_kernel_weight_ = value;
}
inline void QpSplineConfig::set_speed_kernel_weight(double value) {
  _internal_set_speed_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.speed_kernel_weight)
}

// optional double accel_kernel_weight = 4;
inline bool QpSplineConfig::_internal_has_accel_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QpSplineConfig::has_accel_kernel_weight() const {
  return _internal_has_accel_kernel_weight();
}
inline void QpSplineConfig::clear_accel_kernel_weight() {
  _impl_.accel_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QpSplineConfig::_internal_accel_kernel_weight() const {
  return _impl_.accel_kernel_weight_;
}
inline double QpSplineConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.accel_kernel_weight)
  return _internal_accel_kernel_weight();
}
inline void QpSplineConfig::_internal_set_accel_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.accel_kernel_weight_ = value;
}
inline void QpSplineConfig::set_accel_kernel_weight(double value) {
  _internal_set_accel_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 5;
inline bool QpSplineConfig::_internal_has_jerk_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QpSplineConfig::has_jerk_kernel_weight() const {
  return _internal_has_jerk_kernel_weight();
}
inline void QpSplineConfig::clear_jerk_kernel_weight() {
  _impl_.jerk_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double QpSplineConfig::_internal_jerk_kernel_weight() const {
  return _impl_.jerk_kernel_weight_;
}
inline double QpSplineConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.jerk_kernel_weight)
  return _internal_jerk_kernel_weight();
}
inline void QpSplineConfig::_internal_set_jerk_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.jerk_kernel_weight_ = value;
}
inline void QpSplineConfig::set_jerk_kernel_weight(double value) {
  _internal_set_jerk_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.jerk_kernel_weight)
}

// optional double follow_weight = 6;
inline bool QpSplineConfig::_internal_has_follow_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QpSplineConfig::has_follow_weight() const {
  return _internal_has_follow_weight();
}
inline void QpSplineConfig::clear_follow_weight() {
  _impl_.follow_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QpSplineConfig::_internal_follow_weight() const {
  return _impl_.follow_weight_;
}
inline double QpSplineConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_weight)
  return _internal_follow_weight();
}
inline void QpSplineConfig::_internal_set_follow_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.follow_weight_ = value;
}
inline void QpSplineConfig::set_follow_weight(double value) {
  _internal_set_follow_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_weight)
}

// optional double stop_weight = 7;
inline bool QpSplineConfig::_internal_has_stop_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QpSplineConfig::has_stop_weight() const {
  return _internal_has_stop_weight();
}
inline void QpSplineConfig::clear_stop_weight() {
  _impl_.stop_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double QpSplineConfig::_internal_stop_weight() const {
  return _impl_.stop_weight_;
}
inline double QpSplineConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.stop_weight)
  return _internal_stop_weight();
}
inline void QpSplineConfig::_internal_set_stop_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.stop_weight_ = value;
}
inline void QpSplineConfig::set_stop_weight(double value) {
  _internal_set_stop_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.stop_weight)
}

// optional double cruise_weight = 8;
inline bool QpSplineConfig::_internal_has_cruise_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QpSplineConfig::has_cruise_weight() const {
  return _internal_has_cruise_weight();
}
inline void QpSplineConfig::clear_cruise_weight() {
  _impl_.cruise_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QpSplineConfig::_internal_cruise_weight() const {
  return _impl_.cruise_weight_;
}
inline double QpSplineConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.cruise_weight)
  return _internal_cruise_weight();
}
inline void QpSplineConfig::_internal_set_cruise_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cruise_weight_ = value;
}
inline void QpSplineConfig::set_cruise_weight(double value) {
  _internal_set_cruise_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.cruise_weight)
}

// optional double regularization_weight = 9 [default = 0.1];
inline bool QpSplineConfig::_internal_has_regularization_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool QpSplineConfig::has_regularization_weight() const {
  return _internal_has_regularization_weight();
}
inline void QpSplineConfig::clear_regularization_weight() {
  _impl_.regularization_weight_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double QpSplineConfig::_internal_regularization_weight() const {
  return _impl_.regularization_weight_;
}
inline double QpSplineConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.regularization_weight)
  return _internal_regularization_weight();
}
inline void QpSplineConfig::_internal_set_regularization_weight(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.regularization_weight_ = value;
}
inline void QpSplineConfig::set_regularization_weight(double value) {
  _internal_set_regularization_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.regularization_weight)
}

// optional double follow_drag_distance = 10;
inline bool QpSplineConfig::_internal_has_follow_drag_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool QpSplineConfig::has_follow_drag_distance() const {
  return _internal_has_follow_drag_distance();
}
inline void QpSplineConfig::clear_follow_drag_distance() {
  _impl_.follow_drag_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double QpSplineConfig::_internal_follow_drag_distance() const {
  return _impl_.follow_drag_distance_;
}
inline double QpSplineConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.follow_drag_distance)
  return _internal_follow_drag_distance();
}
inline void QpSplineConfig::_internal_set_follow_drag_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.follow_drag_distance_ = value;
}
inline void QpSplineConfig::set_follow_drag_distance(double value) {
  _internal_set_follow_drag_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.follow_drag_distance)
}

// optional double dp_st_reference_weight = 11;
inline bool QpSplineConfig::_internal_has_dp_st_reference_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool QpSplineConfig::has_dp_st_reference_weight() const {
  return _internal_has_dp_st_reference_weight();
}
inline void QpSplineConfig::clear_dp_st_reference_weight() {
  _impl_.dp_st_reference_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double QpSplineConfig::_internal_dp_st_reference_weight() const {
  return _impl_.dp_st_reference_weight_;
}
inline double QpSplineConfig::dp_st_reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.dp_st_reference_weight)
  return _internal_dp_st_reference_weight();
}
inline void QpSplineConfig::_internal_set_dp_st_reference_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.dp_st_reference_weight_ = value;
}
inline void QpSplineConfig::set_dp_st_reference_weight(double value) {
  _internal_set_dp_st_reference_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.dp_st_reference_weight)
}

// optional double init_jerk_kernel_weight = 12;
inline bool QpSplineConfig::_internal_has_init_jerk_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool QpSplineConfig::has_init_jerk_kernel_weight() const {
  return _internal_has_init_jerk_kernel_weight();
}
inline void QpSplineConfig::clear_init_jerk_kernel_weight() {
  _impl_.init_jerk_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double QpSplineConfig::_internal_init_jerk_kernel_weight() const {
  return _impl_.init_jerk_kernel_weight_;
}
inline double QpSplineConfig::init_jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
  return _internal_init_jerk_kernel_weight();
}
inline void QpSplineConfig::_internal_set_init_jerk_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.init_jerk_kernel_weight_ = value;
}
inline void QpSplineConfig::set_init_jerk_kernel_weight(double value) {
  _internal_set_init_jerk_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.init_jerk_kernel_weight)
}

// optional double yield_weight = 13;
inline bool QpSplineConfig::_internal_has_yield_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool QpSplineConfig::has_yield_weight() const {
  return _internal_has_yield_weight();
}
inline void QpSplineConfig::clear_yield_weight() {
  _impl_.yield_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double QpSplineConfig::_internal_yield_weight() const {
  return _impl_.yield_weight_;
}
inline double QpSplineConfig::yield_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_weight)
  return _internal_yield_weight();
}
inline void QpSplineConfig::_internal_set_yield_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.yield_weight_ = value;
}
inline void QpSplineConfig::set_yield_weight(double value) {
  _internal_set_yield_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_weight)
}

// optional double yield_drag_distance = 14;
inline bool QpSplineConfig::_internal_has_yield_drag_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool QpSplineConfig::has_yield_drag_distance() const {
  return _internal_has_yield_drag_distance();
}
inline void QpSplineConfig::clear_yield_drag_distance() {
  _impl_.yield_drag_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double QpSplineConfig::_internal_yield_drag_distance() const {
  return _impl_.yield_drag_distance_;
}
inline double QpSplineConfig::yield_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineConfig.yield_drag_distance)
  return _internal_yield_drag_distance();
}
inline void QpSplineConfig::_internal_set_yield_drag_distance(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.yield_drag_distance_ = value;
}
inline void QpSplineConfig::set_yield_drag_distance(double value) {
  _internal_set_yield_drag_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineConfig.yield_drag_distance)
}

// -------------------------------------------------------------------

// QpPiecewiseConfig

// optional uint32 number_of_evaluated_graph_t = 1;
inline bool QpPiecewiseConfig::_internal_has_number_of_evaluated_graph_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_number_of_evaluated_graph_t() const {
  return _internal_has_number_of_evaluated_graph_t();
}
inline void QpPiecewiseConfig::clear_number_of_evaluated_graph_t() {
  _impl_.number_of_evaluated_graph_t_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t QpPiecewiseConfig::_internal_number_of_evaluated_graph_t() const {
  return _impl_.number_of_evaluated_graph_t_;
}
inline uint32_t QpPiecewiseConfig::number_of_evaluated_graph_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
  return _internal_number_of_evaluated_graph_t();
}
inline void QpPiecewiseConfig::_internal_set_number_of_evaluated_graph_t(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.number_of_evaluated_graph_t_ = value;
}
inline void QpPiecewiseConfig::set_number_of_evaluated_graph_t(uint32_t value) {
  _internal_set_number_of_evaluated_graph_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.number_of_evaluated_graph_t)
}

// optional double accel_kernel_weight = 2;
inline bool QpPiecewiseConfig::_internal_has_accel_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_accel_kernel_weight() const {
  return _internal_has_accel_kernel_weight();
}
inline void QpPiecewiseConfig::clear_accel_kernel_weight() {
  _impl_.accel_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double QpPiecewiseConfig::_internal_accel_kernel_weight() const {
  return _impl_.accel_kernel_weight_;
}
inline double QpPiecewiseConfig::accel_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
  return _internal_accel_kernel_weight();
}
inline void QpPiecewiseConfig::_internal_set_accel_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accel_kernel_weight_ = value;
}
inline void QpPiecewiseConfig::set_accel_kernel_weight(double value) {
  _internal_set_accel_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.accel_kernel_weight)
}

// optional double jerk_kernel_weight = 3;
inline bool QpPiecewiseConfig::_internal_has_jerk_kernel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_jerk_kernel_weight() const {
  return _internal_has_jerk_kernel_weight();
}
inline void QpPiecewiseConfig::clear_jerk_kernel_weight() {
  _impl_.jerk_kernel_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double QpPiecewiseConfig::_internal_jerk_kernel_weight() const {
  return _impl_.jerk_kernel_weight_;
}
inline double QpPiecewiseConfig::jerk_kernel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
  return _internal_jerk_kernel_weight();
}
inline void QpPiecewiseConfig::_internal_set_jerk_kernel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.jerk_kernel_weight_ = value;
}
inline void QpPiecewiseConfig::set_jerk_kernel_weight(double value) {
  _internal_set_jerk_kernel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.jerk_kernel_weight)
}

// optional double follow_weight = 4;
inline bool QpPiecewiseConfig::_internal_has_follow_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_follow_weight() const {
  return _internal_has_follow_weight();
}
inline void QpPiecewiseConfig::clear_follow_weight() {
  _impl_.follow_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QpPiecewiseConfig::_internal_follow_weight() const {
  return _impl_.follow_weight_;
}
inline double QpPiecewiseConfig::follow_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_weight)
  return _internal_follow_weight();
}
inline void QpPiecewiseConfig::_internal_set_follow_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.follow_weight_ = value;
}
inline void QpPiecewiseConfig::set_follow_weight(double value) {
  _internal_set_follow_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_weight)
}

// optional double stop_weight = 5;
inline bool QpPiecewiseConfig::_internal_has_stop_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_stop_weight() const {
  return _internal_has_stop_weight();
}
inline void QpPiecewiseConfig::clear_stop_weight() {
  _impl_.stop_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QpPiecewiseConfig::_internal_stop_weight() const {
  return _impl_.stop_weight_;
}
inline double QpPiecewiseConfig::stop_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.stop_weight)
  return _internal_stop_weight();
}
inline void QpPiecewiseConfig::_internal_set_stop_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stop_weight_ = value;
}
inline void QpPiecewiseConfig::set_stop_weight(double value) {
  _internal_set_stop_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.stop_weight)
}

// optional double cruise_weight = 6;
inline bool QpPiecewiseConfig::_internal_has_cruise_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_cruise_weight() const {
  return _internal_has_cruise_weight();
}
inline void QpPiecewiseConfig::clear_cruise_weight() {
  _impl_.cruise_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double QpPiecewiseConfig::_internal_cruise_weight() const {
  return _impl_.cruise_weight_;
}
inline double QpPiecewiseConfig::cruise_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.cruise_weight)
  return _internal_cruise_weight();
}
inline void QpPiecewiseConfig::_internal_set_cruise_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cruise_weight_ = value;
}
inline void QpPiecewiseConfig::set_cruise_weight(double value) {
  _internal_set_cruise_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.cruise_weight)
}

// optional double regularization_weight = 7 [default = 0.1];
inline bool QpPiecewiseConfig::_internal_has_regularization_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_regularization_weight() const {
  return _internal_has_regularization_weight();
}
inline void QpPiecewiseConfig::clear_regularization_weight() {
  _impl_.regularization_weight_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QpPiecewiseConfig::_internal_regularization_weight() const {
  return _impl_.regularization_weight_;
}
inline double QpPiecewiseConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.regularization_weight)
  return _internal_regularization_weight();
}
inline void QpPiecewiseConfig::_internal_set_regularization_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.regularization_weight_ = value;
}
inline void QpPiecewiseConfig::set_regularization_weight(double value) {
  _internal_set_regularization_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.regularization_weight)
}

// optional double follow_drag_distance = 8;
inline bool QpPiecewiseConfig::_internal_has_follow_drag_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QpPiecewiseConfig::has_follow_drag_distance() const {
  return _internal_has_follow_drag_distance();
}
inline void QpPiecewiseConfig::clear_follow_drag_distance() {
  _impl_.follow_drag_distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QpPiecewiseConfig::_internal_follow_drag_distance() const {
  return _impl_.follow_drag_distance_;
}
inline double QpPiecewiseConfig::follow_drag_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
  return _internal_follow_drag_distance();
}
inline void QpPiecewiseConfig::_internal_set_follow_drag_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.follow_drag_distance_ = value;
}
inline void QpPiecewiseConfig::set_follow_drag_distance(double value) {
  _internal_set_follow_drag_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpPiecewiseConfig.follow_drag_distance)
}

// -------------------------------------------------------------------

// QpStSpeedConfig

// optional double total_path_length = 1 [default = 200];
inline bool QpStSpeedConfig::_internal_has_total_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void QpStSpeedConfig::clear_total_path_length() {
  _impl_.total_path_length_ = 200;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QpStSpeedConfig::_internal_total_path_length() const {
  return _impl_.total_path_length_;
}
inline double QpStSpeedConfig::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_path_length)
  return _internal_total_path_length();
}
inline void QpStSpeedConfig::_internal_set_total_path_length(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.total_path_length_ = value;
}
inline void QpStSpeedConfig::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_path_length)
}

// optional double total_time = 2 [default = 6];
inline bool QpStSpeedConfig::_internal_has_total_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_total_time() const {
  return _internal_has_total_time();
}
inline void QpStSpeedConfig::clear_total_time() {
  _impl_.total_time_ = 6;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double QpStSpeedConfig::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double QpStSpeedConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.total_time)
  return _internal_total_time();
}
inline void QpStSpeedConfig::_internal_set_total_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.total_time_ = value;
}
inline void QpStSpeedConfig::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.total_time)
}

// optional double preferred_max_acceleration = 4 [default = 1.2];
inline bool QpStSpeedConfig::_internal_has_preferred_max_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_preferred_max_acceleration() const {
  return _internal_has_preferred_max_acceleration();
}
inline void QpStSpeedConfig::clear_preferred_max_acceleration() {
  _impl_.preferred_max_acceleration_ = 1.2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QpStSpeedConfig::_internal_preferred_max_acceleration() const {
  return _impl_.preferred_max_acceleration_;
}
inline double QpStSpeedConfig::preferred_max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
  return _internal_preferred_max_acceleration();
}
inline void QpStSpeedConfig::_internal_set_preferred_max_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.preferred_max_acceleration_ = value;
}
inline void QpStSpeedConfig::set_preferred_max_acceleration(double value) {
  _internal_set_preferred_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_max_acceleration)
}

// optional double preferred_min_deceleration = 5 [default = -1.8];
inline bool QpStSpeedConfig::_internal_has_preferred_min_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_preferred_min_deceleration() const {
  return _internal_has_preferred_min_deceleration();
}
inline void QpStSpeedConfig::clear_preferred_min_deceleration() {
  _impl_.preferred_min_deceleration_ = -1.8;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double QpStSpeedConfig::_internal_preferred_min_deceleration() const {
  return _impl_.preferred_min_deceleration_;
}
inline double QpStSpeedConfig::preferred_min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
  return _internal_preferred_min_deceleration();
}
inline void QpStSpeedConfig::_internal_set_preferred_min_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preferred_min_deceleration_ = value;
}
inline void QpStSpeedConfig::set_preferred_min_deceleration(double value) {
  _internal_set_preferred_min_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.preferred_min_deceleration)
}

// optional double max_acceleration = 6 [default = 2];
inline bool QpStSpeedConfig::_internal_has_max_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void QpStSpeedConfig::clear_max_acceleration() {
  _impl_.max_acceleration_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QpStSpeedConfig::_internal_max_acceleration() const {
  return _impl_.max_acceleration_;
}
inline double QpStSpeedConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.max_acceleration)
  return _internal_max_acceleration();
}
inline void QpStSpeedConfig::_internal_set_max_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_acceleration_ = value;
}
inline void QpStSpeedConfig::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.max_acceleration)
}

// optional double min_deceleration = 7 [default = -4.5];
inline bool QpStSpeedConfig::_internal_has_min_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool QpStSpeedConfig::has_min_deceleration() const {
  return _internal_has_min_deceleration();
}
inline void QpStSpeedConfig::clear_min_deceleration() {
  _impl_.min_deceleration_ = -4.5;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double QpStSpeedConfig::_internal_min_deceleration() const {
  return _impl_.min_deceleration_;
}
inline double QpStSpeedConfig::min_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.min_deceleration)
  return _internal_min_deceleration();
}
inline void QpStSpeedConfig::_internal_set_min_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.min_deceleration_ = value;
}
inline void QpStSpeedConfig::set_min_deceleration(double value) {
  _internal_set_min_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpStSpeedConfig.min_deceleration)
}

// optional .apollo.planning.QpSplineConfig qp_spline_config = 8;
inline bool QpStSpeedConfig::_internal_has_qp_spline_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qp_spline_config_ != nullptr);
  return value;
}
inline bool QpStSpeedConfig::has_qp_spline_config() const {
  return _internal_has_qp_spline_config();
}
inline void QpStSpeedConfig::clear_qp_spline_config() {
  if (_impl_.qp_spline_config_ != nullptr) _impl_.qp_spline_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::QpSplineConfig& QpStSpeedConfig::_internal_qp_spline_config() const {
  const ::apollo::planning::QpSplineConfig* p = _impl_.qp_spline_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::QpSplineConfig&>(
      ::apollo::planning::_QpSplineConfig_default_instance_);
}
inline const ::apollo::planning::QpSplineConfig& QpStSpeedConfig::qp_spline_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return _internal_qp_spline_config();
}
inline void QpStSpeedConfig::unsafe_arena_set_allocated_qp_spline_config(
    ::apollo::planning::QpSplineConfig* qp_spline_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_spline_config_);
  }
  _impl_.qp_spline_config_ = qp_spline_config;
  if (qp_spline_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.QpStSpeedConfig.qp_spline_config)
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::release_qp_spline_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::QpSplineConfig* temp = _impl_.qp_spline_config_;
  _impl_.qp_spline_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::unsafe_arena_release_qp_spline_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_spline_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::QpSplineConfig* temp = _impl_.qp_spline_config_;
  _impl_.qp_spline_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::_internal_mutable_qp_spline_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.qp_spline_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QpSplineConfig>(GetArenaForAllocation());
    _impl_.qp_spline_config_ = p;
  }
  return _impl_.qp_spline_config_;
}
inline ::apollo::planning::QpSplineConfig* QpStSpeedConfig::mutable_qp_spline_config() {
  ::apollo::planning::QpSplineConfig* _msg = _internal_mutable_qp_spline_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_spline_config)
  return _msg;
}
inline void QpStSpeedConfig::set_allocated_qp_spline_config(::apollo::planning::QpSplineConfig* qp_spline_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.qp_spline_config_;
  }
  if (qp_spline_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qp_spline_config);
    if (message_arena != submessage_arena) {
      qp_spline_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.qp_spline_config_ = qp_spline_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_spline_config)
}

// optional .apollo.planning.QpPiecewiseConfig qp_piecewise_config = 9;
inline bool QpStSpeedConfig::_internal_has_qp_piecewise_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qp_piecewise_config_ != nullptr);
  return value;
}
inline bool QpStSpeedConfig::has_qp_piecewise_config() const {
  return _internal_has_qp_piecewise_config();
}
inline void QpStSpeedConfig::clear_qp_piecewise_config() {
  if (_impl_.qp_piecewise_config_ != nullptr) _impl_.qp_piecewise_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::QpPiecewiseConfig& QpStSpeedConfig::_internal_qp_piecewise_config() const {
  const ::apollo::planning::QpPiecewiseConfig* p = _impl_.qp_piecewise_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::QpPiecewiseConfig&>(
      ::apollo::planning::_QpPiecewiseConfig_default_instance_);
}
inline const ::apollo::planning::QpPiecewiseConfig& QpStSpeedConfig::qp_piecewise_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return _internal_qp_piecewise_config();
}
inline void QpStSpeedConfig::unsafe_arena_set_allocated_qp_piecewise_config(
    ::apollo::planning::QpPiecewiseConfig* qp_piecewise_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_piecewise_config_);
  }
  _impl_.qp_piecewise_config_ = qp_piecewise_config;
  if (qp_piecewise_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::release_qp_piecewise_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::QpPiecewiseConfig* temp = _impl_.qp_piecewise_config_;
  _impl_.qp_piecewise_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::unsafe_arena_release_qp_piecewise_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::QpPiecewiseConfig* temp = _impl_.qp_piecewise_config_;
  _impl_.qp_piecewise_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::_internal_mutable_qp_piecewise_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.qp_piecewise_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QpPiecewiseConfig>(GetArenaForAllocation());
    _impl_.qp_piecewise_config_ = p;
  }
  return _impl_.qp_piecewise_config_;
}
inline ::apollo::planning::QpPiecewiseConfig* QpStSpeedConfig::mutable_qp_piecewise_config() {
  ::apollo::planning::QpPiecewiseConfig* _msg = _internal_mutable_qp_piecewise_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
  return _msg;
}
inline void QpStSpeedConfig::set_allocated_qp_piecewise_config(::apollo::planning::QpPiecewiseConfig* qp_piecewise_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.qp_piecewise_config_;
  }
  if (qp_piecewise_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(qp_piecewise_config);
    if (message_arena != submessage_arena) {
      qp_piecewise_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_piecewise_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.qp_piecewise_config_ = qp_piecewise_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.qp_piecewise_config)
}

// optional .apollo.planning.StBoundaryConfig st_boundary_config = 10;
inline bool QpStSpeedConfig::_internal_has_st_boundary_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.st_boundary_config_ != nullptr);
  return value;
}
inline bool QpStSpeedConfig::has_st_boundary_config() const {
  return _internal_has_st_boundary_config();
}
inline const ::apollo::planning::StBoundaryConfig& QpStSpeedConfig::_internal_st_boundary_config() const {
  const ::apollo::planning::StBoundaryConfig* p = _impl_.st_boundary_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StBoundaryConfig&>(
      ::apollo::planning::_StBoundaryConfig_default_instance_);
}
inline const ::apollo::planning::StBoundaryConfig& QpStSpeedConfig::st_boundary_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return _internal_st_boundary_config();
}
inline void QpStSpeedConfig::unsafe_arena_set_allocated_st_boundary_config(
    ::apollo::planning::StBoundaryConfig* st_boundary_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.st_boundary_config_);
  }
  _impl_.st_boundary_config_ = st_boundary_config;
  if (st_boundary_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.QpStSpeedConfig.st_boundary_config)
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::release_st_boundary_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::StBoundaryConfig* temp = _impl_.st_boundary_config_;
  _impl_.st_boundary_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::unsafe_arena_release_st_boundary_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.QpStSpeedConfig.st_boundary_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::StBoundaryConfig* temp = _impl_.st_boundary_config_;
  _impl_.st_boundary_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::_internal_mutable_st_boundary_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.st_boundary_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StBoundaryConfig>(GetArenaForAllocation());
    _impl_.st_boundary_config_ = p;
  }
  return _impl_.st_boundary_config_;
}
inline ::apollo::planning::StBoundaryConfig* QpStSpeedConfig::mutable_st_boundary_config() {
  ::apollo::planning::StBoundaryConfig* _msg = _internal_mutable_st_boundary_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.QpStSpeedConfig.st_boundary_config)
  return _msg;
}
inline void QpStSpeedConfig::set_allocated_st_boundary_config(::apollo::planning::StBoundaryConfig* st_boundary_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.st_boundary_config_);
  }
  if (st_boundary_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(st_boundary_config));
    if (message_arena != submessage_arena) {
      st_boundary_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, st_boundary_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.st_boundary_config_ = st_boundary_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QpStSpeedConfig.st_boundary_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto
