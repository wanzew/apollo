// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#include "modules/planning/proto/planning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR ADCTrajectoryPoint::ADCTrajectoryPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.acceleration_s_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_.curvature_change_rate_)*/0
  , /*decltype(_impl_.relative_time_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.accumulated_s_)*/0} {}
struct ADCTrajectoryPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectoryPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectoryPointDefaultTypeInternal() {}
  union {
    ADCTrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectoryPointDefaultTypeInternal _ADCTrajectoryPoint_default_instance_;
PROTOBUF_CONSTEXPR ADCPathPoint::ADCPathPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_.heading_)*/0} {}
struct ADCPathPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCPathPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCPathPointDefaultTypeInternal() {}
  union {
    ADCPathPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCPathPointDefaultTypeInternal _ADCPathPoint_default_instance_;
PROTOBUF_CONSTEXPR ADCSignals::ADCSignals(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signal_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADCSignalsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCSignalsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCSignalsDefaultTypeInternal() {}
  union {
    ADCSignals _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCSignalsDefaultTypeInternal _ADCSignals_default_instance_;
PROTOBUF_CONSTEXPR EStop::EStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_estop_)*/false} {}
struct EStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EStopDefaultTypeInternal() {}
  union {
    EStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EStopDefaultTypeInternal _EStop_default_instance_;
PROTOBUF_CONSTEXPR TaskStats::TaskStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_ms_)*/0} {}
struct TaskStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskStatsDefaultTypeInternal() {}
  union {
    TaskStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
PROTOBUF_CONSTEXPR LatencyStats::LatencyStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_stats_)*/{}
  , /*decltype(_impl_.total_time_ms_)*/0
  , /*decltype(_impl_.init_frame_time_ms_)*/0} {}
struct LatencyStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyStatsDefaultTypeInternal() {}
  union {
    LatencyStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ADCTrajectory_CriticalRegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectory_CriticalRegionDefaultTypeInternal() {}
  union {
    ADCTrajectory_CriticalRegion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectory_CriticalRegionDefaultTypeInternal _ADCTrajectory_CriticalRegion_default_instance_;
PROTOBUF_CONSTEXPR ADCTrajectory::ADCTrajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.adc_trajectory_point_)*/{}
  , /*decltype(_impl_.adc_path_point_)*/{}
  , /*decltype(_impl_.trajectory_point_)*/{}
  , /*decltype(_impl_.path_point_)*/{}
  , /*decltype(_impl_.lane_id_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.estop_)*/nullptr
  , /*decltype(_impl_.debug_)*/nullptr
  , /*decltype(_impl_.signal_)*/nullptr
  , /*decltype(_impl_.decision_)*/nullptr
  , /*decltype(_impl_.latency_stats_)*/nullptr
  , /*decltype(_impl_.routing_header_)*/nullptr
  , /*decltype(_impl_.engage_advice_)*/nullptr
  , /*decltype(_impl_.critical_region_)*/nullptr
  , /*decltype(_impl_.total_path_length_)*/0
  , /*decltype(_impl_.total_path_time_)*/0
  , /*decltype(_impl_.is_replan_)*/false
  , /*decltype(_impl_.gear_)*/0
  , /*decltype(_impl_.right_of_way_status_)*/0} {}
struct ADCTrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ADCTrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ADCTrajectoryDefaultTypeInternal() {}
  union {
    ADCTrajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.acceleration_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.curvature_change_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.relative_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.accumulated_s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _impl_.l_),
  0,
  1,
  2,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_.curvature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCPathPoint, _impl_.heading_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCSignals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCSignals, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EStop, _impl_.is_estop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EStop, _impl_.reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskStats, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskStats, _impl_.time_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatencyStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatencyStats, _impl_.total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatencyStats, _impl_.task_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatencyStats, _impl_.init_frame_time_ms_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory_CriticalRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory_CriticalRegion, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.total_path_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.total_path_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.estop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.is_replan_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.gear_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.decision_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.latency_stats_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.routing_header_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.debug_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.adc_path_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.adc_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.right_of_way_status_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.engage_advice_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _impl_.critical_region_),
  0,
  9,
  10,
  ~0u,
  1,
  ~0u,
  11,
  12,
  4,
  5,
  6,
  2,
  ~0u,
  ~0u,
  3,
  13,
  ~0u,
  7,
  8,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::apollo::planning::ADCTrajectoryPoint)},
  { 30, 41, -1, sizeof(::apollo::planning::ADCPathPoint)},
  { 46, -1, -1, sizeof(::apollo::planning::ADCSignals)},
  { 53, 61, -1, sizeof(::apollo::planning::EStop)},
  { 63, 71, -1, sizeof(::apollo::planning::TaskStats)},
  { 73, 82, -1, sizeof(::apollo::planning::LatencyStats)},
  { 85, -1, -1, sizeof(::apollo::planning::ADCTrajectory_CriticalRegion)},
  { 92, 117, -1, sizeof(::apollo::planning::ADCTrajectory)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_ADCTrajectoryPoint_default_instance_._instance,
  &::apollo::planning::_ADCPathPoint_default_instance_._instance,
  &::apollo::planning::_ADCSignals_default_instance_._instance,
  &::apollo::planning::_EStop_default_instance_._instance,
  &::apollo::planning::_TaskStats_default_instance_._instance,
  &::apollo::planning::_LatencyStats_default_instance_._instance,
  &::apollo::planning::_ADCTrajectory_CriticalRegion_default_instance_._instance,
  &::apollo::planning::_ADCTrajectory_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%modules/planning/proto/planning.proto\022"
  "\017apollo.planning\032\"modules/canbus/proto/c"
  "hassis.proto\032&modules/common/proto/drive"
  "_state.proto\032#modules/common/proto/geome"
  "try.proto\032!modules/common/proto/header.p"
  "roto\032$modules/common/proto/pnc_point.pro"
  "to\032)modules/common/proto/vehicle_signal."
  "proto\032\036modules/map/proto/map_id.proto\032%m"
  "odules/planning/proto/decision.proto\032.mo"
  "dules/planning/proto/planning_internal.p"
  "roto\"\351\001\n\022ADCTrajectoryPoint\022\t\n\001x\030\001 \001(\001\022\t"
  "\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\r\n\005speed\030\006 \001(\001\022\026\n\016a"
  "cceleration_s\030\007 \001(\001\022\021\n\tcurvature\030\010 \001(\001\022\035"
  "\n\025curvature_change_rate\030\t \001(\001\022\025\n\rrelativ"
  "e_time\030\n \001(\001\022\r\n\005theta\030\013 \001(\001\022\025\n\raccumulat"
  "ed_s\030\014 \001(\001\022\r\n\001s\030\004 \001(\001B\002\030\001\022\r\n\001l\030\005 \001(\001B\002\030\001"
  "\"S\n\014ADCPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t"
  "\n\001z\030\003 \001(\001\022\021\n\tcurvature\030\004 \001(\001\022\017\n\007heading\030"
  "\005 \001(\001\"\276\001\n\nADCSignals\0226\n\006signal\030\001 \003(\0162&.a"
  "pollo.planning.ADCSignals.SignalType\"x\n\n"
  "SignalType\022\r\n\tLEFT_TURN\020\001\022\016\n\nRIGHT_TURN\020"
  "\002\022\022\n\016LOW_BEAM_LIGHT\020\003\022\023\n\017HIGH_BEAM_LIGHT"
  "\020\004\022\r\n\tFOG_LIGHT\020\005\022\023\n\017EMERGENCY_LIGHT\020\006\")"
  "\n\005EStop\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002 \001("
  "\t\"*\n\tTaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_ms\030"
  "\002 \001(\001\"q\n\014LatencyStats\022\025\n\rtotal_time_ms\030\001"
  " \001(\001\022.\n\ntask_stats\030\002 \003(\0132\032.apollo.planni"
  "ng.TaskStats\022\032\n\022init_frame_time_ms\030\003 \001(\001"
  "\"\235\010\n\rADCTrajectory\022%\n\006header\030\001 \001(\0132\025.apo"
  "llo.common.Header\022\031\n\021total_path_length\030\002"
  " \001(\001\022\027\n\017total_path_time\030\003 \001(\001\0228\n\020traject"
  "ory_point\030\014 \003(\0132\036.apollo.common.Trajecto"
  "ryPoint\022%\n\005estop\030\006 \001(\0132\026.apollo.planning"
  ".EStop\022,\n\npath_point\030\r \003(\0132\030.apollo.comm"
  "on.PathPoint\022\030\n\tis_replan\030\t \001(\010:\005false\0221"
  "\n\004gear\030\n \001(\0162#.apollo.canbus.Chassis.Gea"
  "rPosition\0221\n\010decision\030\016 \001(\0132\037.apollo.pla"
  "nning.DecisionResult\0224\n\rlatency_stats\030\017 "
  "\001(\0132\035.apollo.planning.LatencyStats\022-\n\016ro"
  "uting_header\030\020 \001(\0132\025.apollo.common.Heade"
  "r\022.\n\005debug\030\010 \001(\0132\037.apollo.planning_inter"
  "nal.Debug\0229\n\016adc_path_point\030\007 \003(\0132\035.apol"
  "lo.planning.ADCPathPointB\002\030\001\022E\n\024adc_traj"
  "ectory_point\030\004 \003(\0132#.apollo.planning.ADC"
  "TrajectoryPointB\002\030\001\0220\n\006signal\030\013 \001(\0132\034.ap"
  "ollo.common.VehicleSignalB\002\030\001\022L\n\023right_o"
  "f_way_status\030\021 \001(\0162/.apollo.planning.ADC"
  "Trajectory.RightOfWayStatus\022!\n\007lane_id\030\022"
  " \003(\0132\020.apollo.hdmap.Id\0222\n\rengage_advice\030"
  "\023 \001(\0132\033.apollo.common.EngageAdvice\022F\n\017cr"
  "itical_region\030\024 \001(\0132-.apollo.planning.AD"
  "CTrajectory.CriticalRegion\0328\n\016CriticalRe"
  "gion\022&\n\006region\030\001 \003(\0132\026.apollo.common.Pol"
  "ygon\"2\n\020RightOfWayStatus\022\017\n\013UNPROTECTED\020"
  "\000\022\r\n\tPROTECTED\020\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_deps[9] = {
  &::descriptor_table_modules_2fcanbus_2fproto_2fchassis_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdecision_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto = {
    false, false, 2176, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_2eproto,
    "modules/planning/proto/planning.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_deps, 9, 8,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCSignals_SignalType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto[0];
}
bool ADCSignals_SignalType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ADCSignals_SignalType ADCSignals::LEFT_TURN;
constexpr ADCSignals_SignalType ADCSignals::RIGHT_TURN;
constexpr ADCSignals_SignalType ADCSignals::LOW_BEAM_LIGHT;
constexpr ADCSignals_SignalType ADCSignals::HIGH_BEAM_LIGHT;
constexpr ADCSignals_SignalType ADCSignals::FOG_LIGHT;
constexpr ADCSignals_SignalType ADCSignals::EMERGENCY_LIGHT;
constexpr ADCSignals_SignalType ADCSignals::SignalType_MIN;
constexpr ADCSignals_SignalType ADCSignals::SignalType_MAX;
constexpr int ADCSignals::SignalType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_2eproto[1];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
constexpr int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ADCTrajectoryPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCTrajectoryPoint>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_acceleration_s(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_curvature_change_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_relative_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_accumulated_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ADCTrajectoryPoint::ADCTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.s_){}
    , decltype(_impl_.l_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.acceleration_s_){}
    , decltype(_impl_.curvature_){}
    , decltype(_impl_.curvature_change_rate_){}
    , decltype(_impl_.relative_time_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.accumulated_s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accumulated_s_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.accumulated_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

inline void ADCTrajectoryPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.acceleration_s_){0}
    , decltype(_impl_.curvature_){0}
    , decltype(_impl_.curvature_change_rate_){0}
    , decltype(_impl_.relative_time_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.accumulated_s_){0}
  };
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCTrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.curvature_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.curvature_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.curvature_change_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accumulated_s_) -
        reinterpret_cast<char*>(&_impl_.curvature_change_rate_)) + sizeof(_impl_.accumulated_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectoryPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double l = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_acceleration_s(&has_bits);
          _impl_.acceleration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_curvature(&has_bits);
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature_change_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_curvature_change_rate(&has_bits);
          _impl_.curvature_change_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_relative_time(&has_bits);
          _impl_.relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double theta = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double accumulated_s = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_accumulated_s(&has_bits);
          _impl_.accumulated_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCTrajectoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double s = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_s(), target);
  }

  // optional double l = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_l(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // optional double acceleration_s = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_acceleration_s(), target);
  }

  // optional double curvature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_curvature(), target);
  }

  // optional double curvature_change_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_curvature_change_rate(), target);
  }

  // optional double relative_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_relative_time(), target);
  }

  // optional double theta = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_theta(), target);
  }

  // optional double accumulated_s = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_accumulated_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double s = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double l = 5 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double acceleration_s = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double curvature_change_rate = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double theta = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double accumulated_s = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectoryPoint::GetClassData() const { return &_class_data_; }

void ADCTrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectoryPoint *>(to)->MergeFrom(
      static_cast<const ADCTrajectoryPoint &>(from));
}


void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.l_ = from._impl_.l_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.acceleration_s_ = from._impl_.acceleration_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.curvature_ = from._impl_.curvature_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.curvature_change_rate_ = from._impl_.curvature_change_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.relative_time_ = from._impl_.relative_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.accumulated_s_ = from._impl_.accumulated_s_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, _impl_.accumulated_s_)
      + sizeof(ADCTrajectoryPoint::_impl_.accumulated_s_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectoryPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectoryPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[0]);
}

// ===================================================================

class ADCPathPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCPathPoint>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ADCPathPoint::ADCPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCPathPoint)
}
ADCPathPoint::ADCPathPoint(const ADCPathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.curvature_){}
    , decltype(_impl_.heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.heading_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCPathPoint)
}

inline void ADCPathPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.curvature_){0}
    , decltype(_impl_.heading_){0}
  };
}

ADCPathPoint::~ADCPathPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCPathPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCPathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ADCPathPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCPathPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.heading_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.heading_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCPathPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double curvature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_curvature(&has_bits);
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCPathPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCPathPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // optional double curvature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_curvature(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCPathPoint)
  return target;
}

size_t ADCPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCPathPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double curvature = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCPathPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCPathPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCPathPoint::GetClassData() const { return &_class_data_; }

void ADCPathPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCPathPoint *>(to)->MergeFrom(
      static_cast<const ADCPathPoint &>(from));
}


void ADCPathPoint::MergeFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.heading_ = from._impl_.heading_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCPathPoint::CopyFrom(const ADCPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCPathPoint::IsInitialized() const {
  return true;
}

void ADCPathPoint::InternalSwap(ADCPathPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCPathPoint, _impl_.heading_)
      + sizeof(ADCPathPoint::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(ADCPathPoint, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCPathPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[1]);
}

// ===================================================================

class ADCSignals::_Internal {
 public:
};

ADCSignals::ADCSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCSignals)
}
ADCSignals::ADCSignals(const ADCSignals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){from._impl_.signal_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCSignals)
}

inline void ADCSignals::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signal_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADCSignals::~ADCSignals() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCSignals)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCSignals::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_.~RepeatedField();
}

void ADCSignals::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCSignals::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCSignals)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCSignals::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ADCSignals_SignalType_IsValid(val))) {
              _internal_add_signal(static_cast<::apollo::planning::ADCSignals_SignalType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_signal(), ptr, ctx, ::apollo::planning::ADCSignals_SignalType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCSignals::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCSignals)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  for (int i = 0, n = this->_internal_signal_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_signal(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCSignals)
  return target;
}

size_t ADCSignals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCSignals)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_signal_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_signal(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCSignals::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCSignals::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCSignals::GetClassData() const { return &_class_data_; }

void ADCSignals::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCSignals *>(to)->MergeFrom(
      static_cast<const ADCSignals &>(from));
}


void ADCSignals::MergeFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCSignals)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.signal_.MergeFrom(from._impl_.signal_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCSignals::CopyFrom(const ADCSignals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCSignals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCSignals::IsInitialized() const {
  return true;
}

void ADCSignals::InternalSwap(ADCSignals* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signal_.InternalSwap(&other->_impl_.signal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCSignals::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[2]);
}

// ===================================================================

class EStop::_Internal {
 public:
  using HasBits = decltype(std::declval<EStop>()._impl_._has_bits_);
  static void set_has_is_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EStop::EStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.is_estop_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _impl_.reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  _impl_.is_estop_ = from._impl_.is_estop_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EStop)
}

inline void EStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.is_estop_){false}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void EStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.is_estop_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_estop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_estop(&has_bits);
          _impl_.is_estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.EStop.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string reason = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
    }

    // optional bool is_estop = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EStop::GetClassData() const { return &_class_data_; }

void EStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EStop *>(to)->MergeFrom(
      static_cast<const EStop &>(from));
}


void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_estop_ = from._impl_.is_estop_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::InternalSwap(EStop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.is_estop_, other->_impl_.is_estop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[3]);
}

// ===================================================================

class TaskStats::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskStats>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TaskStats::TaskStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.time_ms_ = from._impl_.time_ms_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskStats)
}

inline void TaskStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.time_ms_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TaskStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_.time_ms_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TaskStats.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_time_ms(&has_bits);
          _impl_.time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double time_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskStats::GetClassData() const { return &_class_data_; }

void TaskStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskStats *>(to)->MergeFrom(
      static_cast<const TaskStats &>(from));
}


void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_ms_ = from._impl_.time_ms_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::InternalSwap(TaskStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.time_ms_, other->_impl_.time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[4]);
}

// ===================================================================

class LatencyStats::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyStats>()._impl_._has_bits_);
  static void set_has_total_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_init_frame_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LatencyStats::LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_stats_){from._impl_.task_stats_}
    , decltype(_impl_.total_time_ms_){}
    , decltype(_impl_.init_frame_time_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_time_ms_, &from._impl_.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.init_frame_time_ms_) -
    reinterpret_cast<char*>(&_impl_.total_time_ms_)) + sizeof(_impl_.init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatencyStats)
}

inline void LatencyStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_stats_){arena}
    , decltype(_impl_.total_time_ms_){0}
    , decltype(_impl_.init_frame_time_ms_){0}
  };
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatencyStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_stats_.~RepeatedPtrField();
}

void LatencyStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatencyStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.init_frame_time_ms_) -
        reinterpret_cast<char*>(&_impl_.total_time_ms_)) + sizeof(_impl_.init_frame_time_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_total_time_ms(&has_bits);
          _impl_.total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskStats task_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double init_frame_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_init_frame_time_ms(&has_bits);
          _impl_.init_frame_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatencyStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_init_frame_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatencyStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskStats task_stats = 2;
  total_size += 1UL * this->_internal_task_stats_size();
  for (const auto& msg : this->_impl_.task_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double total_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyStats::GetClassData() const { return &_class_data_; }

void LatencyStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyStats *>(to)->MergeFrom(
      static_cast<const LatencyStats &>(from));
}


void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.task_stats_.MergeFrom(from._impl_.task_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.total_time_ms_ = from._impl_.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.init_frame_time_ms_ = from._impl_.init_frame_time_ms_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_stats_.InternalSwap(&other->_impl_.task_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.init_frame_time_ms_)
      + sizeof(LatencyStats::_impl_.init_frame_time_ms_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, _impl_.total_time_ms_)>(
          reinterpret_cast<char*>(&_impl_.total_time_ms_),
          reinterpret_cast<char*>(&other->_impl_.total_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[5]);
}

// ===================================================================

class ADCTrajectory_CriticalRegion::_Internal {
 public:
};

void ADCTrajectory_CriticalRegion::clear_region() {
  _impl_.region_.Clear();
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.region_){from._impl_.region_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}

inline void ADCTrajectory_CriticalRegion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory.CriticalRegion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCTrajectory_CriticalRegion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.~RepeatedPtrField();
}

void ADCTrajectory_CriticalRegion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory.CriticalRegion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectory_CriticalRegion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.common.Polygon region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCTrajectory_CriticalRegion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory.CriticalRegion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Polygon region = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_region_size()); i < n; i++) {
    const auto& repfield = this->_internal_region(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory.CriticalRegion)
  return target;
}

size_t ADCTrajectory_CriticalRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory.CriticalRegion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Polygon region = 1;
  total_size += 1UL * this->_internal_region_size();
  for (const auto& msg : this->_impl_.region_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectory_CriticalRegion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectory_CriticalRegion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectory_CriticalRegion::GetClassData() const { return &_class_data_; }

void ADCTrajectory_CriticalRegion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectory_CriticalRegion *>(to)->MergeFrom(
      static_cast<const ADCTrajectory_CriticalRegion &>(from));
}


void ADCTrajectory_CriticalRegion::MergeFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.region_.MergeFrom(from._impl_.region_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory_CriticalRegion::IsInitialized() const {
  return true;
}

void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.region_.InternalSwap(&other->_impl_.region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[6]);
}

// ===================================================================

class ADCTrajectory::_Internal {
 public:
  using HasBits = decltype(std::declval<ADCTrajectory>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const ADCTrajectory* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_path_length(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_path_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::apollo::planning::EStop& estop(const ADCTrajectory* msg);
  static void set_has_estop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_replan(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gear(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::apollo::planning::DecisionResult& decision(const ADCTrajectory* msg);
  static void set_has_decision(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::apollo::planning::LatencyStats& latency_stats(const ADCTrajectory* msg);
  static void set_has_latency_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::common::Header& routing_header(const ADCTrajectory* msg);
  static void set_has_routing_header(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::planning_internal::Debug& debug(const ADCTrajectory* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::VehicleSignal& signal(const ADCTrajectory* msg);
  static void set_has_signal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_right_of_way_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::apollo::common::EngageAdvice& engage_advice(const ADCTrajectory* msg);
  static void set_has_engage_advice(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::apollo::planning::ADCTrajectory_CriticalRegion& critical_region(const ADCTrajectory* msg);
  static void set_has_critical_region(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::apollo::common::Header&
ADCTrajectory::_Internal::header(const ADCTrajectory* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::planning::EStop&
ADCTrajectory::_Internal::estop(const ADCTrajectory* msg) {
  return *msg->_impl_.estop_;
}
const ::apollo::planning::DecisionResult&
ADCTrajectory::_Internal::decision(const ADCTrajectory* msg) {
  return *msg->_impl_.decision_;
}
const ::apollo::planning::LatencyStats&
ADCTrajectory::_Internal::latency_stats(const ADCTrajectory* msg) {
  return *msg->_impl_.latency_stats_;
}
const ::apollo::common::Header&
ADCTrajectory::_Internal::routing_header(const ADCTrajectory* msg) {
  return *msg->_impl_.routing_header_;
}
const ::apollo::planning_internal::Debug&
ADCTrajectory::_Internal::debug(const ADCTrajectory* msg) {
  return *msg->_impl_.debug_;
}
const ::apollo::common::VehicleSignal&
ADCTrajectory::_Internal::signal(const ADCTrajectory* msg) {
  return *msg->_impl_.signal_;
}
const ::apollo::common::EngageAdvice&
ADCTrajectory::_Internal::engage_advice(const ADCTrajectory* msg) {
  return *msg->_impl_.engage_advice_;
}
const ::apollo::planning::ADCTrajectory_CriticalRegion&
ADCTrajectory::_Internal::critical_region(const ADCTrajectory* msg) {
  return *msg->_impl_.critical_region_;
}
void ADCTrajectory::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ADCTrajectory::clear_trajectory_point() {
  _impl_.trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  _impl_.path_point_.Clear();
}
void ADCTrajectory::clear_decision() {
  if (_impl_.decision_ != nullptr) _impl_.decision_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ADCTrajectory::clear_routing_header() {
  if (_impl_.routing_header_ != nullptr) _impl_.routing_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ADCTrajectory::clear_debug() {
  if (_impl_.debug_ != nullptr) _impl_.debug_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ADCTrajectory::clear_signal() {
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ADCTrajectory::clear_lane_id() {
  _impl_.lane_id_.Clear();
}
void ADCTrajectory::clear_engage_advice() {
  if (_impl_.engage_advice_ != nullptr) _impl_.engage_advice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ADCTrajectory::ADCTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adc_trajectory_point_){from._impl_.adc_trajectory_point_}
    , decltype(_impl_.adc_path_point_){from._impl_.adc_path_point_}
    , decltype(_impl_.trajectory_point_){from._impl_.trajectory_point_}
    , decltype(_impl_.path_point_){from._impl_.path_point_}
    , decltype(_impl_.lane_id_){from._impl_.lane_id_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.estop_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.decision_){nullptr}
    , decltype(_impl_.latency_stats_){nullptr}
    , decltype(_impl_.routing_header_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.critical_region_){nullptr}
    , decltype(_impl_.total_path_length_){}
    , decltype(_impl_.total_path_time_){}
    , decltype(_impl_.is_replan_){}
    , decltype(_impl_.gear_){}
    , decltype(_impl_.right_of_way_status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_estop()) {
    _impl_.estop_ = new ::apollo::planning::EStop(*from._impl_.estop_);
  }
  if (from._internal_has_debug()) {
    _impl_.debug_ = new ::apollo::planning_internal::Debug(*from._impl_.debug_);
  }
  if (from._internal_has_signal()) {
    _impl_.signal_ = new ::apollo::common::VehicleSignal(*from._impl_.signal_);
  }
  if (from._internal_has_decision()) {
    _impl_.decision_ = new ::apollo::planning::DecisionResult(*from._impl_.decision_);
  }
  if (from._internal_has_latency_stats()) {
    _impl_.latency_stats_ = new ::apollo::planning::LatencyStats(*from._impl_.latency_stats_);
  }
  if (from._internal_has_routing_header()) {
    _impl_.routing_header_ = new ::apollo::common::Header(*from._impl_.routing_header_);
  }
  if (from._internal_has_engage_advice()) {
    _impl_.engage_advice_ = new ::apollo::common::EngageAdvice(*from._impl_.engage_advice_);
  }
  if (from._internal_has_critical_region()) {
    _impl_.critical_region_ = new ::apollo::planning::ADCTrajectory_CriticalRegion(*from._impl_.critical_region_);
  }
  ::memcpy(&_impl_.total_path_length_, &from._impl_.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.right_of_way_status_) -
    reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.right_of_way_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory)
}

inline void ADCTrajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.adc_trajectory_point_){arena}
    , decltype(_impl_.adc_path_point_){arena}
    , decltype(_impl_.trajectory_point_){arena}
    , decltype(_impl_.path_point_){arena}
    , decltype(_impl_.lane_id_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.estop_){nullptr}
    , decltype(_impl_.debug_){nullptr}
    , decltype(_impl_.signal_){nullptr}
    , decltype(_impl_.decision_){nullptr}
    , decltype(_impl_.latency_stats_){nullptr}
    , decltype(_impl_.routing_header_){nullptr}
    , decltype(_impl_.engage_advice_){nullptr}
    , decltype(_impl_.critical_region_){nullptr}
    , decltype(_impl_.total_path_length_){0}
    , decltype(_impl_.total_path_time_){0}
    , decltype(_impl_.is_replan_){false}
    , decltype(_impl_.gear_){0}
    , decltype(_impl_.right_of_way_status_){0}
  };
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ADCTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.adc_trajectory_point_.~RepeatedPtrField();
  _impl_.adc_path_point_.~RepeatedPtrField();
  _impl_.trajectory_point_.~RepeatedPtrField();
  _impl_.path_point_.~RepeatedPtrField();
  _impl_.lane_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.estop_;
  if (this != internal_default_instance()) delete _impl_.debug_;
  if (this != internal_default_instance()) delete _impl_.signal_;
  if (this != internal_default_instance()) delete _impl_.decision_;
  if (this != internal_default_instance()) delete _impl_.latency_stats_;
  if (this != internal_default_instance()) delete _impl_.routing_header_;
  if (this != internal_default_instance()) delete _impl_.engage_advice_;
  if (this != internal_default_instance()) delete _impl_.critical_region_;
}

void ADCTrajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.adc_trajectory_point_.Clear();
  _impl_.adc_path_point_.Clear();
  _impl_.trajectory_point_.Clear();
  _impl_.path_point_.Clear();
  _impl_.lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.estop_ != nullptr);
      _impl_.estop_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.debug_ != nullptr);
      _impl_.debug_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.signal_ != nullptr);
      _impl_.signal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.decision_ != nullptr);
      _impl_.decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.latency_stats_ != nullptr);
      _impl_.latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.routing_header_ != nullptr);
      _impl_.routing_header_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.engage_advice_ != nullptr);
      _impl_.engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.critical_region_ != nullptr);
    _impl_.critical_region_->Clear();
  }
  if (cached_has_bits & 0x00003e00u) {
    ::memset(&_impl_.total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.right_of_way_status_) -
        reinterpret_cast<char*>(&_impl_.total_path_length_)) + sizeof(_impl_.right_of_way_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double total_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_total_path_length(&has_bits);
          _impl_.total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double total_path_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_total_path_time(&has_bits);
          _impl_.total_path_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.EStop estop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_estop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adc_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning_internal.Debug debug = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_replan = 9 [default = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_replan(&has_bits);
          _impl_.is_replan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.canbus.Chassis.GearPosition gear = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::canbus::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear(static_cast<::apollo::canbus::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.common.PathPoint path_point = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DecisionResult decision = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LatencyStats latency_stats = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.Header routing_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(val))) {
            _internal_set_right_of_way_status(static_cast<::apollo::planning::ADCTrajectory_RightOfWayStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id lane_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.EngageAdvice engage_advice = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_engage_advice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_critical_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCTrajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_path_time(), target);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::estop(this),
        _Internal::estop(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adc_path_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_adc_path_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::debug(this),
        _Internal::debug(this).GetCachedSize(), target, stream);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_replan(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_gear(), target);
  }

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::signal(this),
        _Internal::signal(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trajectory_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_trajectory_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_path_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_path_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::decision(this),
        _Internal::decision(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::latency_stats(this),
        _Internal::latency_stats(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::routing_header(this),
        _Internal::routing_header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_right_of_way_status(), target);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::engage_advice(this),
        _Internal::engage_advice(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::critical_region(this),
        _Internal::critical_region(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  total_size += 1UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->_impl_.adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  total_size += 1UL * this->_internal_adc_path_point_size();
  for (const auto& msg : this->_impl_.adc_path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->_impl_.trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->_impl_.path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  total_size += 2UL * this->_internal_lane_id_size();
  for (const auto& msg : this->_impl_.lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.planning.EStop estop = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.estop_);
    }

    // optional .apollo.planning_internal.Debug debug = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.debug_);
    }

    // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signal_);
    }

    // optional .apollo.planning.DecisionResult decision = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decision_);
    }

    // optional .apollo.planning.LatencyStats latency_stats = 15;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latency_stats_);
    }

    // optional .apollo.common.Header routing_header = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_header_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.engage_advice_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.critical_region_);
    }

    // optional double total_path_length = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional bool is_replan = 9 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear());
    }

    // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_right_of_way_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectory::GetClassData() const { return &_class_data_; }

void ADCTrajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectory *>(to)->MergeFrom(
      static_cast<const ADCTrajectory &>(from));
}


void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.adc_trajectory_point_.MergeFrom(from._impl_.adc_trajectory_point_);
  _impl_.adc_path_point_.MergeFrom(from._impl_.adc_path_point_);
  _impl_.trajectory_point_.MergeFrom(from._impl_.trajectory_point_);
  _impl_.path_point_.MergeFrom(from._impl_.path_point_);
  _impl_.lane_id_.MergeFrom(from._impl_.lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_estop()->::apollo::planning::EStop::MergeFrom(from._internal_estop());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_debug()->::apollo::planning_internal::Debug::MergeFrom(from._internal_debug());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_signal()->::apollo::common::VehicleSignal::MergeFrom(from._internal_signal());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_decision()->::apollo::planning::DecisionResult::MergeFrom(from._internal_decision());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_latency_stats()->::apollo::planning::LatencyStats::MergeFrom(from._internal_latency_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_routing_header()->::apollo::common::Header::MergeFrom(from._internal_routing_header());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from._internal_engage_advice());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_critical_region()->::apollo::planning::ADCTrajectory_CriticalRegion::MergeFrom(from._internal_critical_region());
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.total_path_length_ = from._impl_.total_path_length_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.total_path_time_ = from._impl_.total_path_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.is_replan_ = from._impl_.is_replan_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.gear_ = from._impl_.gear_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.right_of_way_status_ = from._impl_.right_of_way_status_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.adc_trajectory_point_.InternalSwap(&other->_impl_.adc_trajectory_point_);
  _impl_.adc_path_point_.InternalSwap(&other->_impl_.adc_path_point_);
  _impl_.trajectory_point_.InternalSwap(&other->_impl_.trajectory_point_);
  _impl_.path_point_.InternalSwap(&other->_impl_.path_point_);
  _impl_.lane_id_.InternalSwap(&other->_impl_.lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.right_of_way_status_)
      + sizeof(ADCTrajectory::_impl_.right_of_way_status_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectory, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCTrajectoryPoint*
Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCTrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCPathPoint*
Arena::CreateMaybeMessage< ::apollo::planning::ADCPathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCPathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCSignals*
Arena::CreateMaybeMessage< ::apollo::planning::ADCSignals >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCSignals >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::EStop*
Arena::CreateMaybeMessage< ::apollo::planning::EStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::EStop >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TaskStats*
Arena::CreateMaybeMessage< ::apollo::planning::TaskStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TaskStats >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatencyStats*
Arena::CreateMaybeMessage< ::apollo::planning::LatencyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCTrajectory_CriticalRegion*
Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectory_CriticalRegion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCTrajectory_CriticalRegion >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ADCTrajectory*
Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ADCTrajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
