// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/traffic_rule_config.proto

#include "modules/planning/proto/traffic_rule_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR BacksideVehicleConfig::BacksideVehicleConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.backside_lane_width_)*/4} {}
struct BacksideVehicleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BacksideVehicleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BacksideVehicleConfigDefaultTypeInternal() {}
  union {
    BacksideVehicleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BacksideVehicleConfigDefaultTypeInternal _BacksideVehicleConfig_default_instance_;
PROTOBUF_CONSTEXPR CrosswalkConfig::CrosswalkConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_distance_)*/1
  , /*decltype(_impl_.max_stop_deceleration_)*/4
  , /*decltype(_impl_.min_pass_s_distance_)*/1
  , /*decltype(_impl_.max_valid_stop_distance_)*/3
  , /*decltype(_impl_.expand_s_distance_)*/2
  , /*decltype(_impl_.stop_strict_l_distance_)*/4
  , /*decltype(_impl_.stop_loose_l_distance_)*/5
  , /*decltype(_impl_.stop_timeout_)*/10} {}
struct CrosswalkConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrosswalkConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrosswalkConfigDefaultTypeInternal() {}
  union {
    CrosswalkConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrosswalkConfigDefaultTypeInternal _CrosswalkConfig_default_instance_;
PROTOBUF_CONSTEXPR DestinationConfig::DestinationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_distance_)*/0.5} {}
struct DestinationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestinationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestinationConfigDefaultTypeInternal() {}
  union {
    DestinationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestinationConfigDefaultTypeInternal _DestinationConfig_default_instance_;
PROTOBUF_CONSTEXPR KeepClearConfig::KeepClearConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_keep_clear_zone_)*/true
  , /*decltype(_impl_.enable_junction_)*/true
  , /*decltype(_impl_.min_pass_s_distance_)*/2
  , /*decltype(_impl_.align_with_traffic_sign_tolerance_)*/4.5} {}
struct KeepClearConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepClearConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepClearConfigDefaultTypeInternal() {}
  union {
    KeepClearConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepClearConfigDefaultTypeInternal _KeepClearConfig_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineEndConfig::ReferenceLineEndConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_distance_)*/0.5
  , /*decltype(_impl_.min_reference_line_remain_length_)*/50} {}
struct ReferenceLineEndConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineEndConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineEndConfigDefaultTypeInternal() {}
  union {
    ReferenceLineEndConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineEndConfigDefaultTypeInternal _ReferenceLineEndConfig_default_instance_;
PROTOBUF_CONSTEXPR ReroutingConfig::ReroutingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cooldown_time_)*/3
  , /*decltype(_impl_.prepare_rerouting_time_)*/2} {}
struct ReroutingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReroutingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReroutingConfigDefaultTypeInternal() {}
  union {
    ReroutingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReroutingConfigDefaultTypeInternal _ReroutingConfig_default_instance_;
PROTOBUF_CONSTEXPR StopSignConfig::StopSignConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/true
  , /*decltype(_impl_.stop_distance_)*/1} {}
struct StopSignConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopSignConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopSignConfigDefaultTypeInternal() {}
  union {
    StopSignConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopSignConfigDefaultTypeInternal _StopSignConfig_default_instance_;
PROTOBUF_CONSTEXPR TrafficLightConfig::TrafficLightConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/true
  , /*decltype(_impl_.stop_distance_)*/1
  , /*decltype(_impl_.max_stop_deceleration_)*/4} {}
struct TrafficLightConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficLightConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficLightConfigDefaultTypeInternal() {}
  union {
    TrafficLightConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficLightConfigDefaultTypeInternal _TrafficLightConfig_default_instance_;
PROTOBUF_CONSTEXPR YieldSignConfig::YieldSignConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/true
  , /*decltype(_impl_.stop_distance_)*/1
  , /*decltype(_impl_.start_watch_distance_)*/2} {}
struct YieldSignConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR YieldSignConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~YieldSignConfigDefaultTypeInternal() {}
  union {
    YieldSignConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 YieldSignConfigDefaultTypeInternal _YieldSignConfig_default_instance_;
PROTOBUF_CONSTEXPR TrafficRuleConfig::TrafficRuleConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.rule_id_)*/1
  , /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TrafficRuleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficRuleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficRuleConfigDefaultTypeInternal() {}
  union {
    TrafficRuleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficRuleConfigDefaultTypeInternal _TrafficRuleConfig_default_instance_;
PROTOBUF_CONSTEXPR TrafficRuleConfigs::TrafficRuleConfigs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrafficRuleConfigsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrafficRuleConfigsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrafficRuleConfigsDefaultTypeInternal() {}
  union {
    TrafficRuleConfigs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrafficRuleConfigsDefaultTypeInternal _TrafficRuleConfigs_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _impl_.backside_lane_width_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.max_stop_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.expand_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.stop_strict_l_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.stop_loose_l_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _impl_.stop_timeout_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DestinationConfig, _impl_.stop_distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _impl_.enable_keep_clear_zone_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _impl_.enable_junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _impl_.align_with_traffic_sign_tolerance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _impl_.stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _impl_.min_reference_line_remain_length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _impl_.cooldown_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _impl_.prepare_rerouting_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StopSignConfig, _impl_.stop_distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _impl_.stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _impl_.max_stop_deceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _impl_.stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _impl_.start_watch_distance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _impl_.rule_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _impl_.enabled_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _impl_.config_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _impl_.config_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::planning::BacksideVehicleConfig)},
  { 8, 22, -1, sizeof(::apollo::planning::CrosswalkConfig)},
  { 30, 37, -1, sizeof(::apollo::planning::DestinationConfig)},
  { 38, 48, -1, sizeof(::apollo::planning::KeepClearConfig)},
  { 52, 60, -1, sizeof(::apollo::planning::ReferenceLineEndConfig)},
  { 62, 70, -1, sizeof(::apollo::planning::ReroutingConfig)},
  { 72, 80, -1, sizeof(::apollo::planning::StopSignConfig)},
  { 82, 91, -1, sizeof(::apollo::planning::TrafficLightConfig)},
  { 94, 103, -1, sizeof(::apollo::planning::YieldSignConfig)},
  { 106, 124, -1, sizeof(::apollo::planning::TrafficRuleConfig)},
  { 135, -1, -1, sizeof(::apollo::planning::TrafficRuleConfigs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_BacksideVehicleConfig_default_instance_._instance,
  &::apollo::planning::_CrosswalkConfig_default_instance_._instance,
  &::apollo::planning::_DestinationConfig_default_instance_._instance,
  &::apollo::planning::_KeepClearConfig_default_instance_._instance,
  &::apollo::planning::_ReferenceLineEndConfig_default_instance_._instance,
  &::apollo::planning::_ReroutingConfig_default_instance_._instance,
  &::apollo::planning::_StopSignConfig_default_instance_._instance,
  &::apollo::planning::_TrafficLightConfig_default_instance_._instance,
  &::apollo::planning::_YieldSignConfig_default_instance_._instance,
  &::apollo::planning::_TrafficRuleConfig_default_instance_._instance,
  &::apollo::planning::_TrafficRuleConfigs_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/planning/proto/traffic_rule_co"
  "nfig.proto\022\017apollo.planning\"7\n\025BacksideV"
  "ehicleConfig\022\036\n\023backside_lane_width\030\001 \001("
  "\001:\0014\"\216\002\n\017CrosswalkConfig\022\030\n\rstop_distanc"
  "e\030\001 \001(\001:\0011\022 \n\025max_stop_deceleration\030\002 \001("
  "\001:\0014\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0011\022\"\n\027"
  "max_valid_stop_distance\030\004 \001(\001:\0013\022\034\n\021expa"
  "nd_s_distance\030\005 \001(\001:\0012\022!\n\026stop_strict_l_"
  "distance\030\006 \001(\001:\0014\022 \n\025stop_loose_l_distan"
  "ce\030\007 \001(\001:\0015\022\030\n\014stop_timeout\030\010 \001(\001:\00210\"/\n"
  "\021DestinationConfig\022\032\n\rstop_distance\030\001 \001("
  "\001:\0030.5\"\246\001\n\017KeepClearConfig\022$\n\026enable_kee"
  "p_clear_zone\030\001 \001(\010:\004true\022\035\n\017enable_junct"
  "ion\030\002 \001(\010:\004true\022\036\n\023min_pass_s_distance\030\003"
  " \001(\001:\0012\022.\n!align_with_traffic_sign_toler"
  "ance\030\004 \001(\001:\0034.5\"b\n\026ReferenceLineEndConfi"
  "g\022\032\n\rstop_distance\030\001 \001(\001:\0030.5\022,\n min_ref"
  "erence_line_remain_length\030\002 \001(\001:\00250\"N\n\017R"
  "eroutingConfig\022\030\n\rcooldown_time\030\001 \001(\001:\0013"
  "\022!\n\026prepare_rerouting_time\030\002 \001(\001:\0012\"A\n\016S"
  "topSignConfig\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\r"
  "stop_distance\030\002 \001(\001:\0011\"g\n\022TrafficLightCo"
  "nfig\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\rstop_dist"
  "ance\030\002 \001(\001:\0011\022 \n\025max_stop_deceleration\030\003"
  " \001(\001:\0014\"c\n\017YieldSignConfig\022\025\n\007enabled\030\001 "
  "\001(\010:\004true\022\030\n\rstop_distance\030\002 \001(\001:\0011\022\037\n\024s"
  "tart_watch_distance\030\003 \001(\001:\0012\"\254\006\n\021Traffic"
  "RuleConfig\022:\n\007rule_id\030\001 \001(\0162).apollo.pla"
  "nning.TrafficRuleConfig.RuleId\022\017\n\007enable"
  "d\030\002 \001(\010\022B\n\020backside_vehicle\030\003 \001(\0132&.apol"
  "lo.planning.BacksideVehicleConfigH\000\0225\n\tc"
  "rosswalk\030\004 \001(\0132 .apollo.planning.Crosswa"
  "lkConfigH\000\0229\n\013destination\030\005 \001(\0132\".apollo"
  ".planning.DestinationConfigH\000\0226\n\nkeep_cl"
  "ear\030\006 \001(\0132 .apollo.planning.KeepClearCon"
  "figH\000\022E\n\022reference_line_end\030\007 \001(\0132\'.apol"
  "lo.planning.ReferenceLineEndConfigH\000\0225\n\t"
  "rerouting\030\010 \001(\0132 .apollo.planning.Rerout"
  "ingConfigH\000\0224\n\tstop_sign\030\t \001(\0132\037.apollo."
  "planning.StopSignConfigH\000\022<\n\rtraffic_lig"
  "ht\030\n \001(\0132#.apollo.planning.TrafficLightC"
  "onfigH\000\0226\n\nyield_sign\030\013 \001(\0132 .apollo.pla"
  "nning.YieldSignConfigH\000\"\247\001\n\006RuleId\022\024\n\020BA"
  "CKSIDE_VEHICLE\020\001\022\r\n\tCROSSWALK\020\002\022\017\n\013DESTI"
  "NATION\020\003\022\016\n\nKEEP_CLEAR\020\004\022\026\n\022REFERENCE_LI"
  "NE_END\020\005\022\r\n\tREROUTING\020\006\022\r\n\tSTOP_SIGN\020\007\022\021"
  "\n\rTRAFFIC_LIGHT\020\010\022\016\n\nYIELD_SIGN\020\tB\010\n\006con"
  "fig\"H\n\022TrafficRuleConfigs\0222\n\006config\030\001 \003("
  "\0132\".apollo.planning.TrafficRuleConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto = {
    false, false, 1957, descriptor_table_protodef_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto,
    "modules/planning/proto/traffic_rule_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[0];
}
bool TrafficRuleConfig_RuleId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::BACKSIDE_VEHICLE;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::CROSSWALK;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::DESTINATION;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::KEEP_CLEAR;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::REFERENCE_LINE_END;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::REROUTING;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::STOP_SIGN;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::TRAFFIC_LIGHT;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::YIELD_SIGN;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MIN;
constexpr TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MAX;
constexpr int TrafficRuleConfig::RuleId_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class BacksideVehicleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<BacksideVehicleConfig>()._impl_._has_bits_);
  static void set_has_backside_lane_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BacksideVehicleConfig::BacksideVehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.BacksideVehicleConfig)
}
BacksideVehicleConfig::BacksideVehicleConfig(const BacksideVehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.backside_lane_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.backside_lane_width_ = from._impl_.backside_lane_width_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BacksideVehicleConfig)
}

inline void BacksideVehicleConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.backside_lane_width_){4}
  };
}

BacksideVehicleConfig::~BacksideVehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.BacksideVehicleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BacksideVehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BacksideVehicleConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BacksideVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BacksideVehicleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.backside_lane_width_ = 4;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BacksideVehicleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double backside_lane_width = 1 [default = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_backside_lane_width(&has_bits);
          _impl_.backside_lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BacksideVehicleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BacksideVehicleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_backside_lane_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BacksideVehicleConfig)
  return target;
}

size_t BacksideVehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BacksideVehicleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double backside_lane_width = 1 [default = 4];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BacksideVehicleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BacksideVehicleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BacksideVehicleConfig::GetClassData() const { return &_class_data_; }

void BacksideVehicleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BacksideVehicleConfig *>(to)->MergeFrom(
      static_cast<const BacksideVehicleConfig &>(from));
}


void BacksideVehicleConfig::MergeFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_backside_lane_width()) {
    _internal_set_backside_lane_width(from._internal_backside_lane_width());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BacksideVehicleConfig::CopyFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacksideVehicleConfig::IsInitialized() const {
  return true;
}

void BacksideVehicleConfig::InternalSwap(BacksideVehicleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.backside_lane_width_, other->_impl_.backside_lane_width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BacksideVehicleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[0]);
}

// ===================================================================

class CrosswalkConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CrosswalkConfig>()._impl_._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_expand_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_strict_l_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stop_loose_l_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_stop_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CrosswalkConfig::CrosswalkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.CrosswalkConfig)
}
CrosswalkConfig::CrosswalkConfig(const CrosswalkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){}
    , decltype(_impl_.max_stop_deceleration_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.expand_s_distance_){}
    , decltype(_impl_.stop_strict_l_distance_){}
    , decltype(_impl_.stop_loose_l_distance_){}
    , decltype(_impl_.stop_timeout_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_distance_, &from._impl_.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_timeout_) -
    reinterpret_cast<char*>(&_impl_.stop_distance_)) + sizeof(_impl_.stop_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkConfig)
}

inline void CrosswalkConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){1}
    , decltype(_impl_.max_stop_deceleration_){4}
    , decltype(_impl_.min_pass_s_distance_){1}
    , decltype(_impl_.max_valid_stop_distance_){3}
    , decltype(_impl_.expand_s_distance_){2}
    , decltype(_impl_.stop_strict_l_distance_){4}
    , decltype(_impl_.stop_loose_l_distance_){5}
    , decltype(_impl_.stop_timeout_){10}
  };
}

CrosswalkConfig::~CrosswalkConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrosswalkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CrosswalkConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrosswalkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.stop_distance_ = 1;
    _impl_.max_stop_deceleration_ = 4;
    _impl_.min_pass_s_distance_ = 1;
    _impl_.max_valid_stop_distance_ = 3;
    _impl_.expand_s_distance_ = 2;
    _impl_.stop_strict_l_distance_ = 4;
    _impl_.stop_loose_l_distance_ = 5;
    _impl_.stop_timeout_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrosswalkConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_stop_deceleration = 2 [default = 4];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          _impl_.max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 4 [default = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double expand_s_distance = 5 [default = 2];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_expand_s_distance(&has_bits);
          _impl_.expand_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_strict_l_distance = 6 [default = 4];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_stop_strict_l_distance(&has_bits);
          _impl_.stop_strict_l_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_loose_l_distance = 7 [default = 5];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_stop_loose_l_distance(&has_bits);
          _impl_.stop_loose_l_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_timeout = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_stop_timeout(&has_bits);
          _impl_.stop_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrosswalkConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double expand_s_distance = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_expand_s_distance(), target);
  }

  // optional double stop_strict_l_distance = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_stop_strict_l_distance(), target);
  }

  // optional double stop_loose_l_distance = 7 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_stop_loose_l_distance(), target);
  }

  // optional double stop_timeout = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_stop_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkConfig)
  return target;
}

size_t CrosswalkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double stop_distance = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 4 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double expand_s_distance = 5 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double stop_strict_l_distance = 6 [default = 4];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double stop_loose_l_distance = 7 [default = 5];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double stop_timeout = 8 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrosswalkConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CrosswalkConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrosswalkConfig::GetClassData() const { return &_class_data_; }

void CrosswalkConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CrosswalkConfig *>(to)->MergeFrom(
      static_cast<const CrosswalkConfig &>(from));
}


void CrosswalkConfig::MergeFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_stop_deceleration_ = from._impl_.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.expand_s_distance_ = from._impl_.expand_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.stop_strict_l_distance_ = from._impl_.stop_strict_l_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.stop_loose_l_distance_ = from._impl_.stop_loose_l_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.stop_timeout_ = from._impl_.stop_timeout_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrosswalkConfig::CopyFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkConfig::IsInitialized() const {
  return true;
}

void CrosswalkConfig::InternalSwap(CrosswalkConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
  swap(_impl_.max_stop_deceleration_, other->_impl_.max_stop_deceleration_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.expand_s_distance_, other->_impl_.expand_s_distance_);
  swap(_impl_.stop_strict_l_distance_, other->_impl_.stop_strict_l_distance_);
  swap(_impl_.stop_loose_l_distance_, other->_impl_.stop_loose_l_distance_);
  swap(_impl_.stop_timeout_, other->_impl_.stop_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrosswalkConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[1]);
}

// ===================================================================

class DestinationConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DestinationConfig>()._impl_._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestinationConfig::DestinationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DestinationConfig)
}
DestinationConfig::DestinationConfig(const DestinationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_distance_ = from._impl_.stop_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationConfig)
}

inline void DestinationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){0.5}
  };
}

DestinationConfig::~DestinationConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestinationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestinationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestinationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_distance_ = 0.5;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestinationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DestinationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationConfig)
  return target;
}

size_t DestinationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double stop_distance = 1 [default = 0.5];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestinationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DestinationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestinationConfig::GetClassData() const { return &_class_data_; }

void DestinationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DestinationConfig *>(to)->MergeFrom(
      static_cast<const DestinationConfig &>(from));
}


void DestinationConfig::MergeFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stop_distance()) {
    _internal_set_stop_distance(from._internal_stop_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestinationConfig::CopyFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationConfig::IsInitialized() const {
  return true;
}

void DestinationConfig::InternalSwap(DestinationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestinationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[2]);
}

// ===================================================================

class KeepClearConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<KeepClearConfig>()._impl_._has_bits_);
  static void set_has_enable_keep_clear_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enable_junction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_align_with_traffic_sign_tolerance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

KeepClearConfig::KeepClearConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.KeepClearConfig)
}
KeepClearConfig::KeepClearConfig(const KeepClearConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_keep_clear_zone_){}
    , decltype(_impl_.enable_junction_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.align_with_traffic_sign_tolerance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enable_keep_clear_zone_, &from._impl_.enable_keep_clear_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.align_with_traffic_sign_tolerance_) -
    reinterpret_cast<char*>(&_impl_.enable_keep_clear_zone_)) + sizeof(_impl_.align_with_traffic_sign_tolerance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.KeepClearConfig)
}

inline void KeepClearConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_keep_clear_zone_){true}
    , decltype(_impl_.enable_junction_){true}
    , decltype(_impl_.min_pass_s_distance_){2}
    , decltype(_impl_.align_with_traffic_sign_tolerance_){4.5}
  };
}

KeepClearConfig::~KeepClearConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.KeepClearConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepClearConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepClearConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepClearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.KeepClearConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.enable_keep_clear_zone_ = true;
    _impl_.enable_junction_ = true;
    _impl_.min_pass_s_distance_ = 2;
    _impl_.align_with_traffic_sign_tolerance_ = 4.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepClearConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable_keep_clear_zone = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable_keep_clear_zone(&has_bits);
          _impl_.enable_keep_clear_zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_junction = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_junction(&has_bits);
          _impl_.enable_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_align_with_traffic_sign_tolerance(&has_bits);
          _impl_.align_with_traffic_sign_tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepClearConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.KeepClearConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_keep_clear_zone(), target);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_junction(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_align_with_traffic_sign_tolerance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.KeepClearConfig)
  return target;
}

size_t KeepClearConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.KeepClearConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool enable_keep_clear_zone = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool enable_junction = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional double min_pass_s_distance = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepClearConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeepClearConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepClearConfig::GetClassData() const { return &_class_data_; }

void KeepClearConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeepClearConfig *>(to)->MergeFrom(
      static_cast<const KeepClearConfig &>(from));
}


void KeepClearConfig::MergeFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enable_keep_clear_zone_ = from._impl_.enable_keep_clear_zone_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enable_junction_ = from._impl_.enable_junction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.align_with_traffic_sign_tolerance_ = from._impl_.align_with_traffic_sign_tolerance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepClearConfig::CopyFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClearConfig::IsInitialized() const {
  return true;
}

void KeepClearConfig::InternalSwap(KeepClearConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_keep_clear_zone_, other->_impl_.enable_keep_clear_zone_);
  swap(_impl_.enable_junction_, other->_impl_.enable_junction_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.align_with_traffic_sign_tolerance_, other->_impl_.align_with_traffic_sign_tolerance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepClearConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[3]);
}

// ===================================================================

class ReferenceLineEndConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineEndConfig>()._impl_._has_bits_);
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_reference_line_remain_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReferenceLineEndConfig::ReferenceLineEndConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ReferenceLineEndConfig)
}
ReferenceLineEndConfig::ReferenceLineEndConfig(const ReferenceLineEndConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){}
    , decltype(_impl_.min_reference_line_remain_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_distance_, &from._impl_.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_reference_line_remain_length_) -
    reinterpret_cast<char*>(&_impl_.stop_distance_)) + sizeof(_impl_.min_reference_line_remain_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineEndConfig)
}

inline void ReferenceLineEndConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_distance_){0.5}
    , decltype(_impl_.min_reference_line_remain_length_){50}
  };
}

ReferenceLineEndConfig::~ReferenceLineEndConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineEndConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineEndConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReferenceLineEndConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineEndConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineEndConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.stop_distance_ = 0.5;
    _impl_.min_reference_line_remain_length_ = 50;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineEndConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_reference_line_remain_length = 2 [default = 50];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_min_reference_line_remain_length(&has_bits);
          _impl_.min_reference_line_remain_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineEndConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineEndConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_stop_distance(), target);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_reference_line_remain_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineEndConfig)
  return target;
}

size_t ReferenceLineEndConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineEndConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double min_reference_line_remain_length = 2 [default = 50];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineEndConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineEndConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineEndConfig::GetClassData() const { return &_class_data_; }

void ReferenceLineEndConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReferenceLineEndConfig *>(to)->MergeFrom(
      static_cast<const ReferenceLineEndConfig &>(from));
}


void ReferenceLineEndConfig::MergeFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.min_reference_line_remain_length_ = from._impl_.min_reference_line_remain_length_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineEndConfig::CopyFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineEndConfig::IsInitialized() const {
  return true;
}

void ReferenceLineEndConfig::InternalSwap(ReferenceLineEndConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
  swap(_impl_.min_reference_line_remain_length_, other->_impl_.min_reference_line_remain_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineEndConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[4]);
}

// ===================================================================

class ReroutingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ReroutingConfig>()._impl_._has_bits_);
  static void set_has_cooldown_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prepare_rerouting_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ReroutingConfig::ReroutingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ReroutingConfig)
}
ReroutingConfig::ReroutingConfig(const ReroutingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_time_){}
    , decltype(_impl_.prepare_rerouting_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cooldown_time_, &from._impl_.cooldown_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prepare_rerouting_time_) -
    reinterpret_cast<char*>(&_impl_.cooldown_time_)) + sizeof(_impl_.prepare_rerouting_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingConfig)
}

inline void ReroutingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cooldown_time_){3}
    , decltype(_impl_.prepare_rerouting_time_){2}
  };
}

ReroutingConfig::~ReroutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReroutingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReroutingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReroutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.cooldown_time_ = 3;
    _impl_.prepare_rerouting_time_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReroutingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double cooldown_time = 1 [default = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_cooldown_time(&has_bits);
          _impl_.cooldown_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double prepare_rerouting_time = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_prepare_rerouting_time(&has_bits);
          _impl_.prepare_rerouting_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReroutingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_cooldown_time(), target);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_prepare_rerouting_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingConfig)
  return target;
}

size_t ReroutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double cooldown_time = 1 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double prepare_rerouting_time = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReroutingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReroutingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReroutingConfig::GetClassData() const { return &_class_data_; }

void ReroutingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReroutingConfig *>(to)->MergeFrom(
      static_cast<const ReroutingConfig &>(from));
}


void ReroutingConfig::MergeFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cooldown_time_ = from._impl_.cooldown_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.prepare_rerouting_time_ = from._impl_.prepare_rerouting_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReroutingConfig::CopyFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingConfig::IsInitialized() const {
  return true;
}

void ReroutingConfig::InternalSwap(ReroutingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cooldown_time_, other->_impl_.cooldown_time_);
  swap(_impl_.prepare_rerouting_time_, other->_impl_.prepare_rerouting_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReroutingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[5]);
}

// ===================================================================

class StopSignConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StopSignConfig>()._impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StopSignConfig::StopSignConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StopSignConfig)
}
StopSignConfig::StopSignConfig(const StopSignConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_distance_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignConfig)
}

inline void StopSignConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){true}
    , decltype(_impl_.stop_distance_){1}
  };
}

StopSignConfig::~StopSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopSignConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopSignConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.enabled_ = true;
    _impl_.stop_distance_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopSignConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopSignConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignConfig)
  return target;
}

size_t StopSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopSignConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopSignConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopSignConfig::GetClassData() const { return &_class_data_; }

void StopSignConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopSignConfig *>(to)->MergeFrom(
      static_cast<const StopSignConfig &>(from));
}


void StopSignConfig::MergeFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopSignConfig::CopyFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignConfig::IsInitialized() const {
  return true;
}

void StopSignConfig::InternalSwap(StopSignConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enabled_, other->_impl_.enabled_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopSignConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[6]);
}

// ===================================================================

class TrafficLightConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficLightConfig>()._impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TrafficLightConfig::TrafficLightConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficLightConfig)
}
TrafficLightConfig::TrafficLightConfig(const TrafficLightConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.stop_distance_){}
    , decltype(_impl_.max_stop_deceleration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_stop_deceleration_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.max_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightConfig)
}

inline void TrafficLightConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){true}
    , decltype(_impl_.stop_distance_){1}
    , decltype(_impl_.max_stop_deceleration_){4}
  };
}

TrafficLightConfig::~TrafficLightConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficLightConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficLightConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficLightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.enabled_ = true;
    _impl_.stop_distance_ = 1;
    _impl_.max_stop_deceleration_ = 4;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLightConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_stop_deceleration = 3 [default = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          _impl_.max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficLightConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_stop_deceleration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightConfig)
  return target;
}

size_t TrafficLightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool enabled = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 3 [default = 4];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLightConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLightConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLightConfig::GetClassData() const { return &_class_data_; }

void TrafficLightConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficLightConfig *>(to)->MergeFrom(
      static_cast<const TrafficLightConfig &>(from));
}


void TrafficLightConfig::MergeFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_stop_deceleration_ = from._impl_.max_stop_deceleration_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLightConfig::CopyFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightConfig::IsInitialized() const {
  return true;
}

void TrafficLightConfig::InternalSwap(TrafficLightConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enabled_, other->_impl_.enabled_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
  swap(_impl_.max_stop_deceleration_, other->_impl_.max_stop_deceleration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLightConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[7]);
}

// ===================================================================

class YieldSignConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<YieldSignConfig>()._impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_watch_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

YieldSignConfig::YieldSignConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.YieldSignConfig)
}
YieldSignConfig::YieldSignConfig(const YieldSignConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.stop_distance_){}
    , decltype(_impl_.start_watch_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_watch_distance_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.start_watch_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.YieldSignConfig)
}

inline void YieldSignConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){true}
    , decltype(_impl_.stop_distance_){1}
    , decltype(_impl_.start_watch_distance_){2}
  };
}

YieldSignConfig::~YieldSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.YieldSignConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void YieldSignConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YieldSignConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void YieldSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.YieldSignConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.enabled_ = true;
    _impl_.stop_distance_ = 1;
    _impl_.start_watch_distance_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YieldSignConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double start_watch_distance = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_start_watch_distance(&has_bits);
          _impl_.start_watch_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YieldSignConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.YieldSignConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  // optional double start_watch_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_watch_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.YieldSignConfig)
  return target;
}

size_t YieldSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.YieldSignConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool enabled = 1 [default = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double start_watch_distance = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YieldSignConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YieldSignConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YieldSignConfig::GetClassData() const { return &_class_data_; }

void YieldSignConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YieldSignConfig *>(to)->MergeFrom(
      static_cast<const YieldSignConfig &>(from));
}


void YieldSignConfig::MergeFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.YieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.start_watch_distance_ = from._impl_.start_watch_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YieldSignConfig::CopyFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.YieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldSignConfig::IsInitialized() const {
  return true;
}

void YieldSignConfig::InternalSwap(YieldSignConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enabled_, other->_impl_.enabled_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
  swap(_impl_.start_watch_distance_, other->_impl_.start_watch_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata YieldSignConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[8]);
}

// ===================================================================

class TrafficRuleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrafficRuleConfig>()._impl_._has_bits_);
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::BacksideVehicleConfig& backside_vehicle(const TrafficRuleConfig* msg);
  static const ::apollo::planning::CrosswalkConfig& crosswalk(const TrafficRuleConfig* msg);
  static const ::apollo::planning::DestinationConfig& destination(const TrafficRuleConfig* msg);
  static const ::apollo::planning::KeepClearConfig& keep_clear(const TrafficRuleConfig* msg);
  static const ::apollo::planning::ReferenceLineEndConfig& reference_line_end(const TrafficRuleConfig* msg);
  static const ::apollo::planning::ReroutingConfig& rerouting(const TrafficRuleConfig* msg);
  static const ::apollo::planning::StopSignConfig& stop_sign(const TrafficRuleConfig* msg);
  static const ::apollo::planning::TrafficLightConfig& traffic_light(const TrafficRuleConfig* msg);
  static const ::apollo::planning::YieldSignConfig& yield_sign(const TrafficRuleConfig* msg);
};

const ::apollo::planning::BacksideVehicleConfig&
TrafficRuleConfig::_Internal::backside_vehicle(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.backside_vehicle_;
}
const ::apollo::planning::CrosswalkConfig&
TrafficRuleConfig::_Internal::crosswalk(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.crosswalk_;
}
const ::apollo::planning::DestinationConfig&
TrafficRuleConfig::_Internal::destination(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.destination_;
}
const ::apollo::planning::KeepClearConfig&
TrafficRuleConfig::_Internal::keep_clear(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.keep_clear_;
}
const ::apollo::planning::ReferenceLineEndConfig&
TrafficRuleConfig::_Internal::reference_line_end(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.reference_line_end_;
}
const ::apollo::planning::ReroutingConfig&
TrafficRuleConfig::_Internal::rerouting(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.rerouting_;
}
const ::apollo::planning::StopSignConfig&
TrafficRuleConfig::_Internal::stop_sign(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.stop_sign_;
}
const ::apollo::planning::TrafficLightConfig&
TrafficRuleConfig::_Internal::traffic_light(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.traffic_light_;
}
const ::apollo::planning::YieldSignConfig&
TrafficRuleConfig::_Internal::yield_sign(const TrafficRuleConfig* msg) {
  return *msg->_impl_.config_.yield_sign_;
}
void TrafficRuleConfig::set_allocated_backside_vehicle(::apollo::planning::BacksideVehicleConfig* backside_vehicle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (backside_vehicle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(backside_vehicle);
    if (message_arena != submessage_arena) {
      backside_vehicle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backside_vehicle, submessage_arena);
    }
    set_has_backside_vehicle();
    _impl_.config_.backside_vehicle_ = backside_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.backside_vehicle)
}
void TrafficRuleConfig::set_allocated_crosswalk(::apollo::planning::CrosswalkConfig* crosswalk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (crosswalk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(crosswalk);
    if (message_arena != submessage_arena) {
      crosswalk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crosswalk, submessage_arena);
    }
    set_has_crosswalk();
    _impl_.config_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.crosswalk)
}
void TrafficRuleConfig::set_allocated_destination(::apollo::planning::DestinationConfig* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    set_has_destination();
    _impl_.config_.destination_ = destination;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.destination)
}
void TrafficRuleConfig::set_allocated_keep_clear(::apollo::planning::KeepClearConfig* keep_clear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (keep_clear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keep_clear);
    if (message_arena != submessage_arena) {
      keep_clear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keep_clear, submessage_arena);
    }
    set_has_keep_clear();
    _impl_.config_.keep_clear_ = keep_clear;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.keep_clear)
}
void TrafficRuleConfig::set_allocated_reference_line_end(::apollo::planning::ReferenceLineEndConfig* reference_line_end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (reference_line_end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(reference_line_end);
    if (message_arena != submessage_arena) {
      reference_line_end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_end, submessage_arena);
    }
    set_has_reference_line_end();
    _impl_.config_.reference_line_end_ = reference_line_end;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.reference_line_end)
}
void TrafficRuleConfig::set_allocated_rerouting(::apollo::planning::ReroutingConfig* rerouting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (rerouting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rerouting);
    if (message_arena != submessage_arena) {
      rerouting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rerouting, submessage_arena);
    }
    set_has_rerouting();
    _impl_.config_.rerouting_ = rerouting;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.rerouting)
}
void TrafficRuleConfig::set_allocated_stop_sign(::apollo::planning::StopSignConfig* stop_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (stop_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_sign);
    if (message_arena != submessage_arena) {
      stop_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign, submessage_arena);
    }
    set_has_stop_sign();
    _impl_.config_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.stop_sign)
}
void TrafficRuleConfig::set_allocated_traffic_light(::apollo::planning::TrafficLightConfig* traffic_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (traffic_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_light);
    if (message_arena != submessage_arena) {
      traffic_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    set_has_traffic_light();
    _impl_.config_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.traffic_light)
}
void TrafficRuleConfig::set_allocated_yield_sign(::apollo::planning::YieldSignConfig* yield_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_config();
  if (yield_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yield_sign);
    if (message_arena != submessage_arena) {
      yield_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_sign, submessage_arena);
    }
    set_has_yield_sign();
    _impl_.config_.yield_sign_ = yield_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.yield_sign)
}
TrafficRuleConfig::TrafficRuleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficRuleConfig)
}
TrafficRuleConfig::TrafficRuleConfig(const TrafficRuleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.rule_id_){}
    , decltype(_impl_.config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rule_id_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.rule_id_));
  clear_has_config();
  switch (from.config_case()) {
    case kBacksideVehicle: {
      _internal_mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from._internal_backside_vehicle());
      break;
    }
    case kCrosswalk: {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from._internal_crosswalk());
      break;
    }
    case kDestination: {
      _internal_mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from._internal_destination());
      break;
    }
    case kKeepClear: {
      _internal_mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from._internal_keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      _internal_mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from._internal_reference_line_end());
      break;
    }
    case kRerouting: {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from._internal_rerouting());
      break;
    }
    case kStopSign: {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from._internal_stop_sign());
      break;
    }
    case kTrafficLight: {
      _internal_mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from._internal_traffic_light());
      break;
    }
    case kYieldSign: {
      _internal_mutable_yield_sign()->::apollo::planning::YieldSignConfig::MergeFrom(from._internal_yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfig)
}

inline void TrafficRuleConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enabled_){false}
    , decltype(_impl_.rule_id_){1}
    , decltype(_impl_.config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_config();
}

TrafficRuleConfig::~TrafficRuleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficRuleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_config()) {
    clear_config();
  }
}

void TrafficRuleConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficRuleConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TrafficRuleConfig)
  switch (config_case()) {
    case kBacksideVehicle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.backside_vehicle_;
      }
      break;
    }
    case kCrosswalk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.crosswalk_;
      }
      break;
    }
    case kDestination: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.destination_;
      }
      break;
    }
    case kKeepClear: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.keep_clear_;
      }
      break;
    }
    case kReferenceLineEnd: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.reference_line_end_;
      }
      break;
    }
    case kRerouting: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.rerouting_;
      }
      break;
    }
    case kStopSign: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.stop_sign_;
      }
      break;
    }
    case kTrafficLight: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.traffic_light_;
      }
      break;
    }
    case kYieldSign: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.config_.yield_sign_;
      }
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONFIG_NOT_SET;
}


void TrafficRuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.enabled_ = false;
    _impl_.rule_id_ = 1;
  }
  clear_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficRuleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TrafficRuleConfig_RuleId_IsValid(val))) {
            _internal_set_rule_id(static_cast<::apollo::planning::TrafficRuleConfig_RuleId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_backside_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.CrosswalkConfig crosswalk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_crosswalk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.DestinationConfig destination = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.KeepClearConfig keep_clear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_keep_clear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ReferenceLineEndConfig reference_line_end = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_line_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ReroutingConfig rerouting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rerouting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.StopSignConfig stop_sign = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.TrafficLightConfig traffic_light = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.YieldSignConfig yield_sign = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_sign(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficRuleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rule_id(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  switch (config_case()) {
    case kBacksideVehicle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::backside_vehicle(this),
          _Internal::backside_vehicle(this).GetCachedSize(), target, stream);
      break;
    }
    case kCrosswalk: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::crosswalk(this),
          _Internal::crosswalk(this).GetCachedSize(), target, stream);
      break;
    }
    case kDestination: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::destination(this),
          _Internal::destination(this).GetCachedSize(), target, stream);
      break;
    }
    case kKeepClear: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::keep_clear(this),
          _Internal::keep_clear(this).GetCachedSize(), target, stream);
      break;
    }
    case kReferenceLineEnd: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::reference_line_end(this),
          _Internal::reference_line_end(this).GetCachedSize(), target, stream);
      break;
    }
    case kRerouting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::rerouting(this),
          _Internal::rerouting(this).GetCachedSize(), target, stream);
      break;
    }
    case kStopSign: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::stop_sign(this),
          _Internal::stop_sign(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrafficLight: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::traffic_light(this),
          _Internal::traffic_light(this).GetCachedSize(), target, stream);
      break;
    }
    case kYieldSign: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::yield_sign(this),
          _Internal::yield_sign(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfig)
  return target;
}

size_t TrafficRuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool enabled = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_rule_id());
    }

  }
  switch (config_case()) {
    // .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
    case kBacksideVehicle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.backside_vehicle_);
      break;
    }
    // .apollo.planning.CrosswalkConfig crosswalk = 4;
    case kCrosswalk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.crosswalk_);
      break;
    }
    // .apollo.planning.DestinationConfig destination = 5;
    case kDestination: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.destination_);
      break;
    }
    // .apollo.planning.KeepClearConfig keep_clear = 6;
    case kKeepClear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.keep_clear_);
      break;
    }
    // .apollo.planning.ReferenceLineEndConfig reference_line_end = 7;
    case kReferenceLineEnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.reference_line_end_);
      break;
    }
    // .apollo.planning.ReroutingConfig rerouting = 8;
    case kRerouting: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.rerouting_);
      break;
    }
    // .apollo.planning.StopSignConfig stop_sign = 9;
    case kStopSign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.stop_sign_);
      break;
    }
    // .apollo.planning.TrafficLightConfig traffic_light = 10;
    case kTrafficLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.traffic_light_);
      break;
    }
    // .apollo.planning.YieldSignConfig yield_sign = 11;
    case kYieldSign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.config_.yield_sign_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficRuleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficRuleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficRuleConfig::GetClassData() const { return &_class_data_; }

void TrafficRuleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficRuleConfig *>(to)->MergeFrom(
      static_cast<const TrafficRuleConfig &>(from));
}


void TrafficRuleConfig::MergeFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.rule_id_ = from._impl_.rule_id_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.config_case()) {
    case kBacksideVehicle: {
      _internal_mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from._internal_backside_vehicle());
      break;
    }
    case kCrosswalk: {
      _internal_mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from._internal_crosswalk());
      break;
    }
    case kDestination: {
      _internal_mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from._internal_destination());
      break;
    }
    case kKeepClear: {
      _internal_mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from._internal_keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      _internal_mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from._internal_reference_line_end());
      break;
    }
    case kRerouting: {
      _internal_mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from._internal_rerouting());
      break;
    }
    case kStopSign: {
      _internal_mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from._internal_stop_sign());
      break;
    }
    case kTrafficLight: {
      _internal_mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from._internal_traffic_light());
      break;
    }
    case kYieldSign: {
      _internal_mutable_yield_sign()->::apollo::planning::YieldSignConfig::MergeFrom(from._internal_yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficRuleConfig::CopyFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfig::IsInitialized() const {
  return true;
}

void TrafficRuleConfig::InternalSwap(TrafficRuleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enabled_, other->_impl_.enabled_);
  swap(_impl_.rule_id_, other->_impl_.rule_id_);
  swap(_impl_.config_, other->_impl_.config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRuleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[9]);
}

// ===================================================================

class TrafficRuleConfigs::_Internal {
 public:
};

TrafficRuleConfigs::TrafficRuleConfigs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TrafficRuleConfigs)
}
TrafficRuleConfigs::TrafficRuleConfigs(const TrafficRuleConfigs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.config_){from._impl_.config_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfigs)
}

inline void TrafficRuleConfigs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrafficRuleConfigs::~TrafficRuleConfigs() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfigs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrafficRuleConfigs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_.~RepeatedPtrField();
}

void TrafficRuleConfigs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrafficRuleConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfigs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.config_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficRuleConfigs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TrafficRuleConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrafficRuleConfigs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfigs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfigs)
  return target;
}

size_t TrafficRuleConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfigs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  total_size += 1UL * this->_internal_config_size();
  for (const auto& msg : this->_impl_.config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficRuleConfigs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficRuleConfigs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficRuleConfigs::GetClassData() const { return &_class_data_; }

void TrafficRuleConfigs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrafficRuleConfigs *>(to)->MergeFrom(
      static_cast<const TrafficRuleConfigs &>(from));
}


void TrafficRuleConfigs::MergeFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.config_.MergeFrom(from._impl_.config_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficRuleConfigs::CopyFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfigs::IsInitialized() const {
  return true;
}

void TrafficRuleConfigs::InternalSwap(TrafficRuleConfigs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.config_.InternalSwap(&other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRuleConfigs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::BacksideVehicleConfig*
Arena::CreateMaybeMessage< ::apollo::planning::BacksideVehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::BacksideVehicleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::CrosswalkConfig*
Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::CrosswalkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::DestinationConfig*
Arena::CreateMaybeMessage< ::apollo::planning::DestinationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DestinationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::KeepClearConfig*
Arena::CreateMaybeMessage< ::apollo::planning::KeepClearConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::KeepClearConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReferenceLineEndConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ReferenceLineEndConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ReferenceLineEndConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ReroutingConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ReroutingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ReroutingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StopSignConfig*
Arena::CreateMaybeMessage< ::apollo::planning::StopSignConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StopSignConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficLightConfig*
Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficLightConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::YieldSignConfig*
Arena::CreateMaybeMessage< ::apollo::planning::YieldSignConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::YieldSignConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficRuleConfig*
Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficRuleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TrafficRuleConfigs*
Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfigs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TrafficRuleConfigs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
