// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/dp_poly_path_config.proto

#include "modules/planning/proto/dp_poly_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR DpPolyPathConfig::DpPolyPathConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_l_cost_)*/0
  , /*decltype(_impl_.path_dl_cost_)*/0
  , /*decltype(_impl_.path_ddl_cost_)*/0
  , /*decltype(_impl_.path_l_cost_param_l0_)*/0
  , /*decltype(_impl_.path_l_cost_param_b_)*/0
  , /*decltype(_impl_.path_l_cost_param_k_)*/0
  , /*decltype(_impl_.path_out_lane_cost_)*/0
  , /*decltype(_impl_.path_end_l_cost_)*/0
  , /*decltype(_impl_.sidepass_distance_)*/0
  , /*decltype(_impl_.navigator_sample_num_each_level_)*/0u
  , /*decltype(_impl_.sample_points_num_each_level_)*/9u
  , /*decltype(_impl_.step_length_max_)*/15
  , /*decltype(_impl_.step_length_min_)*/8
  , /*decltype(_impl_.lateral_sample_offset_)*/0.5
  , /*decltype(_impl_.lateral_adjust_coeff_)*/0.5
  , /*decltype(_impl_.eval_time_interval_)*/0.1
  , /*decltype(_impl_.path_resolution_)*/0.1
  , /*decltype(_impl_.obstacle_ignore_distance_)*/20
  , /*decltype(_impl_.obstacle_collision_distance_)*/0.2
  , /*decltype(_impl_.obstacle_risk_distance_)*/2
  , /*decltype(_impl_.obstacle_collision_cost_)*/1000} {}
struct DpPolyPathConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DpPolyPathConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DpPolyPathConfigDefaultTypeInternal() {}
  union {
    DpPolyPathConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DpPolyPathConfigDefaultTypeInternal _DpPolyPathConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.sample_points_num_each_level_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.step_length_max_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.step_length_min_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.lateral_sample_offset_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.lateral_adjust_coeff_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.eval_time_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.obstacle_ignore_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.obstacle_collision_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.obstacle_risk_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.obstacle_collision_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_l_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_dl_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_ddl_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_l_cost_param_l0_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_l_cost_param_b_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_l_cost_param_k_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_out_lane_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.path_end_l_cost_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.sidepass_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::DpPolyPathConfig, _impl_.navigator_sample_num_each_level_),
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, -1, sizeof(::apollo::planning::DpPolyPathConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_DpPolyPathConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/planning/proto/dp_poly_path_co"
  "nfig.proto\022\017apollo.planning\"\247\005\n\020DpPolyPa"
  "thConfig\022\'\n\034sample_points_num_each_level"
  "\030\001 \001(\r:\0019\022\033\n\017step_length_max\030\002 \001(\001:\00215\022\032"
  "\n\017step_length_min\030\003 \001(\001:\0018\022\"\n\025lateral_sa"
  "mple_offset\030\004 \001(\001:\0030.5\022!\n\024lateral_adjust"
  "_coeff\030\005 \001(\001:\0030.5\022\037\n\022eval_time_interval\030"
  "\006 \001(\001:\0030.1\022\034\n\017path_resolution\030\007 \001(\001:\0030.1"
  "\022$\n\030obstacle_ignore_distance\030\010 \001(\001:\00220\022("
  "\n\033obstacle_collision_distance\030\t \001(\001:\0030.2"
  "\022!\n\026obstacle_risk_distance\030\n \001(\001:\0012\022%\n\027o"
  "bstacle_collision_cost\030\013 \001(\001:\0041000\022\023\n\013pa"
  "th_l_cost\030\014 \001(\001\022\024\n\014path_dl_cost\030\r \001(\001\022\025\n"
  "\rpath_ddl_cost\030\016 \001(\001\022\034\n\024path_l_cost_para"
  "m_l0\030\017 \001(\001\022\033\n\023path_l_cost_param_b\030\020 \001(\001\022"
  "\033\n\023path_l_cost_param_k\030\021 \001(\001\022\032\n\022path_out"
  "_lane_cost\030\022 \001(\001\022\027\n\017path_end_l_cost\030\023 \001("
  "\001\022\031\n\021sidepass_distance\030\024 \001(\001\022\'\n\037navigato"
  "r_sample_num_each_level\030\025 \001(\r"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto = {
    false, false, 749, descriptor_table_protodef_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto,
    "modules/planning/proto/dp_poly_path_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class DpPolyPathConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DpPolyPathConfig>()._impl_._has_bits_);
  static void set_has_sample_points_num_each_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_step_length_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_step_length_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lateral_sample_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lateral_adjust_coeff(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_eval_time_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_path_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_obstacle_ignore_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_obstacle_collision_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_obstacle_risk_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_obstacle_collision_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_path_l_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_dl_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_path_ddl_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_path_l_cost_param_l0(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_path_l_cost_param_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_path_l_cost_param_k(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_path_out_lane_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_end_l_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sidepass_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_navigator_sample_num_each_level(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

DpPolyPathConfig::DpPolyPathConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.DpPolyPathConfig)
}
DpPolyPathConfig::DpPolyPathConfig(const DpPolyPathConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_l_cost_){}
    , decltype(_impl_.path_dl_cost_){}
    , decltype(_impl_.path_ddl_cost_){}
    , decltype(_impl_.path_l_cost_param_l0_){}
    , decltype(_impl_.path_l_cost_param_b_){}
    , decltype(_impl_.path_l_cost_param_k_){}
    , decltype(_impl_.path_out_lane_cost_){}
    , decltype(_impl_.path_end_l_cost_){}
    , decltype(_impl_.sidepass_distance_){}
    , decltype(_impl_.navigator_sample_num_each_level_){}
    , decltype(_impl_.sample_points_num_each_level_){}
    , decltype(_impl_.step_length_max_){}
    , decltype(_impl_.step_length_min_){}
    , decltype(_impl_.lateral_sample_offset_){}
    , decltype(_impl_.lateral_adjust_coeff_){}
    , decltype(_impl_.eval_time_interval_){}
    , decltype(_impl_.path_resolution_){}
    , decltype(_impl_.obstacle_ignore_distance_){}
    , decltype(_impl_.obstacle_collision_distance_){}
    , decltype(_impl_.obstacle_risk_distance_){}
    , decltype(_impl_.obstacle_collision_cost_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.path_l_cost_, &from._impl_.path_l_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.obstacle_collision_cost_) -
    reinterpret_cast<char*>(&_impl_.path_l_cost_)) + sizeof(_impl_.obstacle_collision_cost_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DpPolyPathConfig)
}

inline void DpPolyPathConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_l_cost_){0}
    , decltype(_impl_.path_dl_cost_){0}
    , decltype(_impl_.path_ddl_cost_){0}
    , decltype(_impl_.path_l_cost_param_l0_){0}
    , decltype(_impl_.path_l_cost_param_b_){0}
    , decltype(_impl_.path_l_cost_param_k_){0}
    , decltype(_impl_.path_out_lane_cost_){0}
    , decltype(_impl_.path_end_l_cost_){0}
    , decltype(_impl_.sidepass_distance_){0}
    , decltype(_impl_.navigator_sample_num_each_level_){0u}
    , decltype(_impl_.sample_points_num_each_level_){9u}
    , decltype(_impl_.step_length_max_){15}
    , decltype(_impl_.step_length_min_){8}
    , decltype(_impl_.lateral_sample_offset_){0.5}
    , decltype(_impl_.lateral_adjust_coeff_){0.5}
    , decltype(_impl_.eval_time_interval_){0.1}
    , decltype(_impl_.path_resolution_){0.1}
    , decltype(_impl_.obstacle_ignore_distance_){20}
    , decltype(_impl_.obstacle_collision_distance_){0.2}
    , decltype(_impl_.obstacle_risk_distance_){2}
    , decltype(_impl_.obstacle_collision_cost_){1000}
  };
}

DpPolyPathConfig::~DpPolyPathConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DpPolyPathConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DpPolyPathConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DpPolyPathConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DpPolyPathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DpPolyPathConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.path_l_cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.path_end_l_cost_) -
        reinterpret_cast<char*>(&_impl_.path_l_cost_)) + sizeof(_impl_.path_end_l_cost_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.sidepass_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.navigator_sample_num_each_level_) -
        reinterpret_cast<char*>(&_impl_.sidepass_distance_)) + sizeof(_impl_.navigator_sample_num_each_level_));
    _impl_.sample_points_num_each_level_ = 9u;
    _impl_.step_length_max_ = 15;
    _impl_.step_length_min_ = 8;
    _impl_.lateral_sample_offset_ = 0.5;
    _impl_.lateral_adjust_coeff_ = 0.5;
    _impl_.eval_time_interval_ = 0.1;
  }
  if (cached_has_bits & 0x001f0000u) {
    _impl_.path_resolution_ = 0.1;
    _impl_.obstacle_ignore_distance_ = 20;
    _impl_.obstacle_collision_distance_ = 0.2;
    _impl_.obstacle_risk_distance_ = 2;
    _impl_.obstacle_collision_cost_ = 1000;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DpPolyPathConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 sample_points_num_each_level = 1 [default = 9];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_sample_points_num_each_level(&has_bits);
          _impl_.sample_points_num_each_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double step_length_max = 2 [default = 15];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_step_length_max(&has_bits);
          _impl_.step_length_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double step_length_min = 3 [default = 8];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_step_length_min(&has_bits);
          _impl_.step_length_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_sample_offset = 4 [default = 0.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_lateral_sample_offset(&has_bits);
          _impl_.lateral_sample_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_adjust_coeff = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_lateral_adjust_coeff(&has_bits);
          _impl_.lateral_adjust_coeff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double eval_time_interval = 6 [default = 0.1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_eval_time_interval(&has_bits);
          _impl_.eval_time_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_resolution = 7 [default = 0.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_path_resolution(&has_bits);
          _impl_.path_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_ignore_distance = 8 [default = 20];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_obstacle_ignore_distance(&has_bits);
          _impl_.obstacle_ignore_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_collision_distance = 9 [default = 0.2];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_obstacle_collision_distance(&has_bits);
          _impl_.obstacle_collision_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_risk_distance = 10 [default = 2];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_obstacle_risk_distance(&has_bits);
          _impl_.obstacle_risk_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_collision_cost = 11 [default = 1000];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_obstacle_collision_cost(&has_bits);
          _impl_.obstacle_collision_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_l_cost = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_path_l_cost(&has_bits);
          _impl_.path_l_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_dl_cost = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_path_dl_cost(&has_bits);
          _impl_.path_dl_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_ddl_cost = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_path_ddl_cost(&has_bits);
          _impl_.path_ddl_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_l_cost_param_l0 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_path_l_cost_param_l0(&has_bits);
          _impl_.path_l_cost_param_l0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_l_cost_param_b = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_path_l_cost_param_b(&has_bits);
          _impl_.path_l_cost_param_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_l_cost_param_k = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_path_l_cost_param_k(&has_bits);
          _impl_.path_l_cost_param_k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_out_lane_cost = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_path_out_lane_cost(&has_bits);
          _impl_.path_out_lane_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_end_l_cost = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _Internal::set_has_path_end_l_cost(&has_bits);
          _impl_.path_end_l_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double sidepass_distance = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_sidepass_distance(&has_bits);
          _impl_.sidepass_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 navigator_sample_num_each_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_navigator_sample_num_each_level(&has_bits);
          _impl_.navigator_sample_num_each_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DpPolyPathConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DpPolyPathConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 sample_points_num_each_level = 1 [default = 9];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sample_points_num_each_level(), target);
  }

  // optional double step_length_max = 2 [default = 15];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_step_length_max(), target);
  }

  // optional double step_length_min = 3 [default = 8];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_step_length_min(), target);
  }

  // optional double lateral_sample_offset = 4 [default = 0.5];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_lateral_sample_offset(), target);
  }

  // optional double lateral_adjust_coeff = 5 [default = 0.5];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_lateral_adjust_coeff(), target);
  }

  // optional double eval_time_interval = 6 [default = 0.1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_eval_time_interval(), target);
  }

  // optional double path_resolution = 7 [default = 0.1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_path_resolution(), target);
  }

  // optional double obstacle_ignore_distance = 8 [default = 20];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_obstacle_ignore_distance(), target);
  }

  // optional double obstacle_collision_distance = 9 [default = 0.2];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_obstacle_collision_distance(), target);
  }

  // optional double obstacle_risk_distance = 10 [default = 2];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_obstacle_risk_distance(), target);
  }

  // optional double obstacle_collision_cost = 11 [default = 1000];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_obstacle_collision_cost(), target);
  }

  // optional double path_l_cost = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_path_l_cost(), target);
  }

  // optional double path_dl_cost = 13;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_path_dl_cost(), target);
  }

  // optional double path_ddl_cost = 14;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_path_ddl_cost(), target);
  }

  // optional double path_l_cost_param_l0 = 15;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_path_l_cost_param_l0(), target);
  }

  // optional double path_l_cost_param_b = 16;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_path_l_cost_param_b(), target);
  }

  // optional double path_l_cost_param_k = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_path_l_cost_param_k(), target);
  }

  // optional double path_out_lane_cost = 18;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_path_out_lane_cost(), target);
  }

  // optional double path_end_l_cost = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_path_end_l_cost(), target);
  }

  // optional double sidepass_distance = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_sidepass_distance(), target);
  }

  // optional uint32 navigator_sample_num_each_level = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_navigator_sample_num_each_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DpPolyPathConfig)
  return target;
}

size_t DpPolyPathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DpPolyPathConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double path_l_cost = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double path_dl_cost = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double path_ddl_cost = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_l0 = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double path_l_cost_param_b = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional double path_l_cost_param_k = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 8;
    }

    // optional double path_out_lane_cost = 18;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 8;
    }

    // optional double path_end_l_cost = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double sidepass_distance = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 8;
    }

    // optional uint32 navigator_sample_num_each_level = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_navigator_sample_num_each_level());
    }

    // optional uint32 sample_points_num_each_level = 1 [default = 9];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_points_num_each_level());
    }

    // optional double step_length_max = 2 [default = 15];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double step_length_min = 3 [default = 8];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double lateral_sample_offset = 4 [default = 0.5];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double lateral_adjust_coeff = 5 [default = 0.5];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double eval_time_interval = 6 [default = 0.1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional double path_resolution = 7 [default = 0.1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_ignore_distance = 8 [default = 20];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_distance = 9 [default = 0.2];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_risk_distance = 10 [default = 2];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_collision_cost = 11 [default = 1000];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DpPolyPathConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DpPolyPathConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DpPolyPathConfig::GetClassData() const { return &_class_data_; }

void DpPolyPathConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DpPolyPathConfig *>(to)->MergeFrom(
      static_cast<const DpPolyPathConfig &>(from));
}


void DpPolyPathConfig::MergeFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DpPolyPathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.path_l_cost_ = from._impl_.path_l_cost_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_dl_cost_ = from._impl_.path_dl_cost_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.path_ddl_cost_ = from._impl_.path_ddl_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.path_l_cost_param_l0_ = from._impl_.path_l_cost_param_l0_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.path_l_cost_param_b_ = from._impl_.path_l_cost_param_b_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.path_l_cost_param_k_ = from._impl_.path_l_cost_param_k_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.path_out_lane_cost_ = from._impl_.path_out_lane_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.path_end_l_cost_ = from._impl_.path_end_l_cost_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.sidepass_distance_ = from._impl_.sidepass_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.navigator_sample_num_each_level_ = from._impl_.navigator_sample_num_each_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.sample_points_num_each_level_ = from._impl_.sample_points_num_each_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.step_length_max_ = from._impl_.step_length_max_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.step_length_min_ = from._impl_.step_length_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.lateral_sample_offset_ = from._impl_.lateral_sample_offset_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.lateral_adjust_coeff_ = from._impl_.lateral_adjust_coeff_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.eval_time_interval_ = from._impl_.eval_time_interval_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.path_resolution_ = from._impl_.path_resolution_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.obstacle_ignore_distance_ = from._impl_.obstacle_ignore_distance_;
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.obstacle_collision_distance_ = from._impl_.obstacle_collision_distance_;
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.obstacle_risk_distance_ = from._impl_.obstacle_risk_distance_;
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.obstacle_collision_cost_ = from._impl_.obstacle_collision_cost_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DpPolyPathConfig::CopyFrom(const DpPolyPathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DpPolyPathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DpPolyPathConfig::IsInitialized() const {
  return true;
}

void DpPolyPathConfig::InternalSwap(DpPolyPathConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DpPolyPathConfig, _impl_.navigator_sample_num_each_level_)
      + sizeof(DpPolyPathConfig::_impl_.navigator_sample_num_each_level_)
      - PROTOBUF_FIELD_OFFSET(DpPolyPathConfig, _impl_.path_l_cost_)>(
          reinterpret_cast<char*>(&_impl_.path_l_cost_),
          reinterpret_cast<char*>(&other->_impl_.path_l_cost_));
  swap(_impl_.sample_points_num_each_level_, other->_impl_.sample_points_num_each_level_);
  swap(_impl_.step_length_max_, other->_impl_.step_length_max_);
  swap(_impl_.step_length_min_, other->_impl_.step_length_min_);
  swap(_impl_.lateral_sample_offset_, other->_impl_.lateral_sample_offset_);
  swap(_impl_.lateral_adjust_coeff_, other->_impl_.lateral_adjust_coeff_);
  swap(_impl_.eval_time_interval_, other->_impl_.eval_time_interval_);
  swap(_impl_.path_resolution_, other->_impl_.path_resolution_);
  swap(_impl_.obstacle_ignore_distance_, other->_impl_.obstacle_ignore_distance_);
  swap(_impl_.obstacle_collision_distance_, other->_impl_.obstacle_collision_distance_);
  swap(_impl_.obstacle_risk_distance_, other->_impl_.obstacle_risk_distance_);
  swap(_impl_.obstacle_collision_cost_, other->_impl_.obstacle_collision_cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DpPolyPathConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::DpPolyPathConfig*
Arena::CreateMaybeMessage< ::apollo::planning::DpPolyPathConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::DpPolyPathConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
