// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_spline_path_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto;
namespace apollo {
namespace planning {
class QpSplinePathConfig;
struct QpSplinePathConfigDefaultTypeInternal;
extern QpSplinePathConfigDefaultTypeInternal _QpSplinePathConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::QpSplinePathConfig* Arena::CreateMaybeMessage<::apollo::planning::QpSplinePathConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class QpSplinePathConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplinePathConfig) */ {
 public:
  inline QpSplinePathConfig() : QpSplinePathConfig(nullptr) {}
  ~QpSplinePathConfig() override;
  explicit PROTOBUF_CONSTEXPR QpSplinePathConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QpSplinePathConfig(const QpSplinePathConfig& from);
  QpSplinePathConfig(QpSplinePathConfig&& from) noexcept
    : QpSplinePathConfig() {
    *this = ::std::move(from);
  }

  inline QpSplinePathConfig& operator=(const QpSplinePathConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QpSplinePathConfig& operator=(QpSplinePathConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QpSplinePathConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const QpSplinePathConfig* internal_default_instance() {
    return reinterpret_cast<const QpSplinePathConfig*>(
               &_QpSplinePathConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QpSplinePathConfig& a, QpSplinePathConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QpSplinePathConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QpSplinePathConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QpSplinePathConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QpSplinePathConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QpSplinePathConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QpSplinePathConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpSplinePathConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QpSplinePathConfig";
  }
  protected:
  explicit QpSplinePathConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDerivativeWeightFieldNumber = 7,
    kSecondDerivativeWeightFieldNumber = 8,
    kReferenceLineWeightFieldNumber = 10,
    kHistoryPathWeightFieldNumber = 14,
    kMaxSplineLengthFieldNumber = 2,
    kMaxConstraintIntervalFieldNumber = 3,
    kTimeResolutionFieldNumber = 4,
    kRegularizationWeightFieldNumber = 5,
    kFirstSplineWeightFactorFieldNumber = 6,
    kSplineOrderFieldNumber = 1,
    kNumOutputFieldNumber = 11,
    kThirdDerivativeWeightFieldNumber = 9,
    kCrossLaneLateralExtensionFieldNumber = 12,
    kCrossLaneLongitudinalExtensionFieldNumber = 13,
    kLaneChangeMidLFieldNumber = 15,
    kPointConstraintSPositionFieldNumber = 16,
    kLaneChangeLateralShiftFieldNumber = 17,
    kUturnSpeedLimitFieldNumber = 18,
  };
  // optional double derivative_weight = 7 [default = 0];
  bool has_derivative_weight() const;
  private:
  bool _internal_has_derivative_weight() const;
  public:
  void clear_derivative_weight();
  double derivative_weight() const;
  void set_derivative_weight(double value);
  private:
  double _internal_derivative_weight() const;
  void _internal_set_derivative_weight(double value);
  public:

  // optional double second_derivative_weight = 8 [default = 0];
  bool has_second_derivative_weight() const;
  private:
  bool _internal_has_second_derivative_weight() const;
  public:
  void clear_second_derivative_weight();
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);
  private:
  double _internal_second_derivative_weight() const;
  void _internal_set_second_derivative_weight(double value);
  public:

  // optional double reference_line_weight = 10 [default = 0];
  bool has_reference_line_weight() const;
  private:
  bool _internal_has_reference_line_weight() const;
  public:
  void clear_reference_line_weight();
  double reference_line_weight() const;
  void set_reference_line_weight(double value);
  private:
  double _internal_reference_line_weight() const;
  void _internal_set_reference_line_weight(double value);
  public:

  // optional double history_path_weight = 14 [default = 0];
  bool has_history_path_weight() const;
  private:
  bool _internal_has_history_path_weight() const;
  public:
  void clear_history_path_weight();
  double history_path_weight() const;
  void set_history_path_weight(double value);
  private:
  double _internal_history_path_weight() const;
  void _internal_set_history_path_weight(double value);
  public:

  // optional double max_spline_length = 2 [default = 15];
  bool has_max_spline_length() const;
  private:
  bool _internal_has_max_spline_length() const;
  public:
  void clear_max_spline_length();
  double max_spline_length() const;
  void set_max_spline_length(double value);
  private:
  double _internal_max_spline_length() const;
  void _internal_set_max_spline_length(double value);
  public:

  // optional double max_constraint_interval = 3 [default = 15];
  bool has_max_constraint_interval() const;
  private:
  bool _internal_has_max_constraint_interval() const;
  public:
  void clear_max_constraint_interval();
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);
  private:
  double _internal_max_constraint_interval() const;
  void _internal_set_max_constraint_interval(double value);
  public:

  // optional double time_resolution = 4 [default = 0.1];
  bool has_time_resolution() const;
  private:
  bool _internal_has_time_resolution() const;
  public:
  void clear_time_resolution();
  double time_resolution() const;
  void set_time_resolution(double value);
  private:
  double _internal_time_resolution() const;
  void _internal_set_time_resolution(double value);
  public:

  // optional double regularization_weight = 5 [default = 0.001];
  bool has_regularization_weight() const;
  private:
  bool _internal_has_regularization_weight() const;
  public:
  void clear_regularization_weight();
  double regularization_weight() const;
  void set_regularization_weight(double value);
  private:
  double _internal_regularization_weight() const;
  void _internal_set_regularization_weight(double value);
  public:

  // optional double first_spline_weight_factor = 6 [default = 10];
  bool has_first_spline_weight_factor() const;
  private:
  bool _internal_has_first_spline_weight_factor() const;
  public:
  void clear_first_spline_weight_factor();
  double first_spline_weight_factor() const;
  void set_first_spline_weight_factor(double value);
  private:
  double _internal_first_spline_weight_factor() const;
  void _internal_set_first_spline_weight_factor(double value);
  public:

  // optional uint32 spline_order = 1 [default = 6];
  bool has_spline_order() const;
  private:
  bool _internal_has_spline_order() const;
  public:
  void clear_spline_order();
  uint32_t spline_order() const;
  void set_spline_order(uint32_t value);
  private:
  uint32_t _internal_spline_order() const;
  void _internal_set_spline_order(uint32_t value);
  public:

  // optional uint32 num_output = 11 [default = 100];
  bool has_num_output() const;
  private:
  bool _internal_has_num_output() const;
  public:
  void clear_num_output();
  uint32_t num_output() const;
  void set_num_output(uint32_t value);
  private:
  uint32_t _internal_num_output() const;
  void _internal_set_num_output(uint32_t value);
  public:

  // optional double third_derivative_weight = 9 [default = 100];
  bool has_third_derivative_weight() const;
  private:
  bool _internal_has_third_derivative_weight() const;
  public:
  void clear_third_derivative_weight();
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);
  private:
  double _internal_third_derivative_weight() const;
  void _internal_set_third_derivative_weight(double value);
  public:

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  bool has_cross_lane_lateral_extension() const;
  private:
  bool _internal_has_cross_lane_lateral_extension() const;
  public:
  void clear_cross_lane_lateral_extension();
  double cross_lane_lateral_extension() const;
  void set_cross_lane_lateral_extension(double value);
  private:
  double _internal_cross_lane_lateral_extension() const;
  void _internal_set_cross_lane_lateral_extension(double value);
  public:

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  bool has_cross_lane_longitudinal_extension() const;
  private:
  bool _internal_has_cross_lane_longitudinal_extension() const;
  public:
  void clear_cross_lane_longitudinal_extension();
  double cross_lane_longitudinal_extension() const;
  void set_cross_lane_longitudinal_extension(double value);
  private:
  double _internal_cross_lane_longitudinal_extension() const;
  void _internal_set_cross_lane_longitudinal_extension(double value);
  public:

  // optional double lane_change_mid_l = 15 [default = 0.6];
  bool has_lane_change_mid_l() const;
  private:
  bool _internal_has_lane_change_mid_l() const;
  public:
  void clear_lane_change_mid_l();
  double lane_change_mid_l() const;
  void set_lane_change_mid_l(double value);
  private:
  double _internal_lane_change_mid_l() const;
  void _internal_set_lane_change_mid_l(double value);
  public:

  // optional double point_constraint_s_position = 16 [default = 110];
  bool has_point_constraint_s_position() const;
  private:
  bool _internal_has_point_constraint_s_position() const;
  public:
  void clear_point_constraint_s_position();
  double point_constraint_s_position() const;
  void set_point_constraint_s_position(double value);
  private:
  double _internal_point_constraint_s_position() const;
  void _internal_set_point_constraint_s_position(double value);
  public:

  // optional double lane_change_lateral_shift = 17 [default = 1];
  bool has_lane_change_lateral_shift() const;
  private:
  bool _internal_has_lane_change_lateral_shift() const;
  public:
  void clear_lane_change_lateral_shift();
  double lane_change_lateral_shift() const;
  void set_lane_change_lateral_shift(double value);
  private:
  double _internal_lane_change_lateral_shift() const;
  void _internal_set_lane_change_lateral_shift(double value);
  public:

  // optional double uturn_speed_limit = 18 [default = 5];
  bool has_uturn_speed_limit() const;
  private:
  bool _internal_has_uturn_speed_limit() const;
  public:
  void clear_uturn_speed_limit();
  double uturn_speed_limit() const;
  void set_uturn_speed_limit(double value);
  private:
  double _internal_uturn_speed_limit() const;
  void _internal_set_uturn_speed_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplinePathConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double derivative_weight_;
    double second_derivative_weight_;
    double reference_line_weight_;
    double history_path_weight_;
    double max_spline_length_;
    double max_constraint_interval_;
    double time_resolution_;
    double regularization_weight_;
    double first_spline_weight_factor_;
    uint32_t spline_order_;
    uint32_t num_output_;
    double third_derivative_weight_;
    double cross_lane_lateral_extension_;
    double cross_lane_longitudinal_extension_;
    double lane_change_mid_l_;
    double point_constraint_s_position_;
    double lane_change_lateral_shift_;
    double uturn_speed_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QpSplinePathConfig

// optional uint32 spline_order = 1 [default = 6];
inline bool QpSplinePathConfig::_internal_has_spline_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_spline_order() const {
  return _internal_has_spline_order();
}
inline void QpSplinePathConfig::clear_spline_order() {
  _impl_.spline_order_ = 6u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t QpSplinePathConfig::_internal_spline_order() const {
  return _impl_.spline_order_;
}
inline uint32_t QpSplinePathConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.spline_order)
  return _internal_spline_order();
}
inline void QpSplinePathConfig::_internal_set_spline_order(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.spline_order_ = value;
}
inline void QpSplinePathConfig::set_spline_order(uint32_t value) {
  _internal_set_spline_order(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 15];
inline bool QpSplinePathConfig::_internal_has_max_spline_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_max_spline_length() const {
  return _internal_has_max_spline_length();
}
inline void QpSplinePathConfig::clear_max_spline_length() {
  _impl_.max_spline_length_ = 15;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double QpSplinePathConfig::_internal_max_spline_length() const {
  return _impl_.max_spline_length_;
}
inline double QpSplinePathConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_spline_length)
  return _internal_max_spline_length();
}
inline void QpSplinePathConfig::_internal_set_max_spline_length(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_spline_length_ = value;
}
inline void QpSplinePathConfig::set_max_spline_length(double value) {
  _internal_set_max_spline_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_spline_length)
}

// optional double max_constraint_interval = 3 [default = 15];
inline bool QpSplinePathConfig::_internal_has_max_constraint_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_max_constraint_interval() const {
  return _internal_has_max_constraint_interval();
}
inline void QpSplinePathConfig::clear_max_constraint_interval() {
  _impl_.max_constraint_interval_ = 15;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QpSplinePathConfig::_internal_max_constraint_interval() const {
  return _impl_.max_constraint_interval_;
}
inline double QpSplinePathConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.max_constraint_interval)
  return _internal_max_constraint_interval();
}
inline void QpSplinePathConfig::_internal_set_max_constraint_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_constraint_interval_ = value;
}
inline void QpSplinePathConfig::set_max_constraint_interval(double value) {
  _internal_set_max_constraint_interval(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.max_constraint_interval)
}

// optional double time_resolution = 4 [default = 0.1];
inline bool QpSplinePathConfig::_internal_has_time_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_time_resolution() const {
  return _internal_has_time_resolution();
}
inline void QpSplinePathConfig::clear_time_resolution() {
  _impl_.time_resolution_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double QpSplinePathConfig::_internal_time_resolution() const {
  return _impl_.time_resolution_;
}
inline double QpSplinePathConfig::time_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.time_resolution)
  return _internal_time_resolution();
}
inline void QpSplinePathConfig::_internal_set_time_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.time_resolution_ = value;
}
inline void QpSplinePathConfig::set_time_resolution(double value) {
  _internal_set_time_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.time_resolution)
}

// optional double regularization_weight = 5 [default = 0.001];
inline bool QpSplinePathConfig::_internal_has_regularization_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_regularization_weight() const {
  return _internal_has_regularization_weight();
}
inline void QpSplinePathConfig::clear_regularization_weight() {
  _impl_.regularization_weight_ = 0.001;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QpSplinePathConfig::_internal_regularization_weight() const {
  return _impl_.regularization_weight_;
}
inline double QpSplinePathConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.regularization_weight)
  return _internal_regularization_weight();
}
inline void QpSplinePathConfig::_internal_set_regularization_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.regularization_weight_ = value;
}
inline void QpSplinePathConfig::set_regularization_weight(double value) {
  _internal_set_regularization_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.regularization_weight)
}

// optional double first_spline_weight_factor = 6 [default = 10];
inline bool QpSplinePathConfig::_internal_has_first_spline_weight_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_first_spline_weight_factor() const {
  return _internal_has_first_spline_weight_factor();
}
inline void QpSplinePathConfig::clear_first_spline_weight_factor() {
  _impl_.first_spline_weight_factor_ = 10;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double QpSplinePathConfig::_internal_first_spline_weight_factor() const {
  return _impl_.first_spline_weight_factor_;
}
inline double QpSplinePathConfig::first_spline_weight_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
  return _internal_first_spline_weight_factor();
}
inline void QpSplinePathConfig::_internal_set_first_spline_weight_factor(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.first_spline_weight_factor_ = value;
}
inline void QpSplinePathConfig::set_first_spline_weight_factor(double value) {
  _internal_set_first_spline_weight_factor(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.first_spline_weight_factor)
}

// optional double derivative_weight = 7 [default = 0];
inline bool QpSplinePathConfig::_internal_has_derivative_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_derivative_weight() const {
  return _internal_has_derivative_weight();
}
inline void QpSplinePathConfig::clear_derivative_weight() {
  _impl_.derivative_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double QpSplinePathConfig::_internal_derivative_weight() const {
  return _impl_.derivative_weight_;
}
inline double QpSplinePathConfig::derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.derivative_weight)
  return _internal_derivative_weight();
}
inline void QpSplinePathConfig::_internal_set_derivative_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.derivative_weight_ = value;
}
inline void QpSplinePathConfig::set_derivative_weight(double value) {
  _internal_set_derivative_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.derivative_weight)
}

// optional double second_derivative_weight = 8 [default = 0];
inline bool QpSplinePathConfig::_internal_has_second_derivative_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_second_derivative_weight() const {
  return _internal_has_second_derivative_weight();
}
inline void QpSplinePathConfig::clear_second_derivative_weight() {
  _impl_.second_derivative_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double QpSplinePathConfig::_internal_second_derivative_weight() const {
  return _impl_.second_derivative_weight_;
}
inline double QpSplinePathConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.second_derivative_weight)
  return _internal_second_derivative_weight();
}
inline void QpSplinePathConfig::_internal_set_second_derivative_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.second_derivative_weight_ = value;
}
inline void QpSplinePathConfig::set_second_derivative_weight(double value) {
  _internal_set_second_derivative_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 9 [default = 100];
inline bool QpSplinePathConfig::_internal_has_third_derivative_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_third_derivative_weight() const {
  return _internal_has_third_derivative_weight();
}
inline void QpSplinePathConfig::clear_third_derivative_weight() {
  _impl_.third_derivative_weight_ = 100;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double QpSplinePathConfig::_internal_third_derivative_weight() const {
  return _impl_.third_derivative_weight_;
}
inline double QpSplinePathConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.third_derivative_weight)
  return _internal_third_derivative_weight();
}
inline void QpSplinePathConfig::_internal_set_third_derivative_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.third_derivative_weight_ = value;
}
inline void QpSplinePathConfig::set_third_derivative_weight(double value) {
  _internal_set_third_derivative_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.third_derivative_weight)
}

// optional double reference_line_weight = 10 [default = 0];
inline bool QpSplinePathConfig::_internal_has_reference_line_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_reference_line_weight() const {
  return _internal_has_reference_line_weight();
}
inline void QpSplinePathConfig::clear_reference_line_weight() {
  _impl_.reference_line_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QpSplinePathConfig::_internal_reference_line_weight() const {
  return _impl_.reference_line_weight_;
}
inline double QpSplinePathConfig::reference_line_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.reference_line_weight)
  return _internal_reference_line_weight();
}
inline void QpSplinePathConfig::_internal_set_reference_line_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.reference_line_weight_ = value;
}
inline void QpSplinePathConfig::set_reference_line_weight(double value) {
  _internal_set_reference_line_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.reference_line_weight)
}

// optional uint32 num_output = 11 [default = 100];
inline bool QpSplinePathConfig::_internal_has_num_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_num_output() const {
  return _internal_has_num_output();
}
inline void QpSplinePathConfig::clear_num_output() {
  _impl_.num_output_ = 100u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t QpSplinePathConfig::_internal_num_output() const {
  return _impl_.num_output_;
}
inline uint32_t QpSplinePathConfig::num_output() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.num_output)
  return _internal_num_output();
}
inline void QpSplinePathConfig::_internal_set_num_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.num_output_ = value;
}
inline void QpSplinePathConfig::set_num_output(uint32_t value) {
  _internal_set_num_output(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.num_output)
}

// optional double cross_lane_lateral_extension = 12 [default = 1.2];
inline bool QpSplinePathConfig::_internal_has_cross_lane_lateral_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_cross_lane_lateral_extension() const {
  return _internal_has_cross_lane_lateral_extension();
}
inline void QpSplinePathConfig::clear_cross_lane_lateral_extension() {
  _impl_.cross_lane_lateral_extension_ = 1.2;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double QpSplinePathConfig::_internal_cross_lane_lateral_extension() const {
  return _impl_.cross_lane_lateral_extension_;
}
inline double QpSplinePathConfig::cross_lane_lateral_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
  return _internal_cross_lane_lateral_extension();
}
inline void QpSplinePathConfig::_internal_set_cross_lane_lateral_extension(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.cross_lane_lateral_extension_ = value;
}
inline void QpSplinePathConfig::set_cross_lane_lateral_extension(double value) {
  _internal_set_cross_lane_lateral_extension(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_lateral_extension)
}

// optional double cross_lane_longitudinal_extension = 13 [default = 50];
inline bool QpSplinePathConfig::_internal_has_cross_lane_longitudinal_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_cross_lane_longitudinal_extension() const {
  return _internal_has_cross_lane_longitudinal_extension();
}
inline void QpSplinePathConfig::clear_cross_lane_longitudinal_extension() {
  _impl_.cross_lane_longitudinal_extension_ = 50;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double QpSplinePathConfig::_internal_cross_lane_longitudinal_extension() const {
  return _impl_.cross_lane_longitudinal_extension_;
}
inline double QpSplinePathConfig::cross_lane_longitudinal_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
  return _internal_cross_lane_longitudinal_extension();
}
inline void QpSplinePathConfig::_internal_set_cross_lane_longitudinal_extension(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.cross_lane_longitudinal_extension_ = value;
}
inline void QpSplinePathConfig::set_cross_lane_longitudinal_extension(double value) {
  _internal_set_cross_lane_longitudinal_extension(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.cross_lane_longitudinal_extension)
}

// optional double history_path_weight = 14 [default = 0];
inline bool QpSplinePathConfig::_internal_has_history_path_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_history_path_weight() const {
  return _internal_has_history_path_weight();
}
inline void QpSplinePathConfig::clear_history_path_weight() {
  _impl_.history_path_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QpSplinePathConfig::_internal_history_path_weight() const {
  return _impl_.history_path_weight_;
}
inline double QpSplinePathConfig::history_path_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.history_path_weight)
  return _internal_history_path_weight();
}
inline void QpSplinePathConfig::_internal_set_history_path_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.history_path_weight_ = value;
}
inline void QpSplinePathConfig::set_history_path_weight(double value) {
  _internal_set_history_path_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.history_path_weight)
}

// optional double lane_change_mid_l = 15 [default = 0.6];
inline bool QpSplinePathConfig::_internal_has_lane_change_mid_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_lane_change_mid_l() const {
  return _internal_has_lane_change_mid_l();
}
inline void QpSplinePathConfig::clear_lane_change_mid_l() {
  _impl_.lane_change_mid_l_ = 0.6;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double QpSplinePathConfig::_internal_lane_change_mid_l() const {
  return _impl_.lane_change_mid_l_;
}
inline double QpSplinePathConfig::lane_change_mid_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
  return _internal_lane_change_mid_l();
}
inline void QpSplinePathConfig::_internal_set_lane_change_mid_l(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.lane_change_mid_l_ = value;
}
inline void QpSplinePathConfig::set_lane_change_mid_l(double value) {
  _internal_set_lane_change_mid_l(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_mid_l)
}

// optional double point_constraint_s_position = 16 [default = 110];
inline bool QpSplinePathConfig::_internal_has_point_constraint_s_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_point_constraint_s_position() const {
  return _internal_has_point_constraint_s_position();
}
inline void QpSplinePathConfig::clear_point_constraint_s_position() {
  _impl_.point_constraint_s_position_ = 110;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double QpSplinePathConfig::_internal_point_constraint_s_position() const {
  return _impl_.point_constraint_s_position_;
}
inline double QpSplinePathConfig::point_constraint_s_position() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
  return _internal_point_constraint_s_position();
}
inline void QpSplinePathConfig::_internal_set_point_constraint_s_position(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.point_constraint_s_position_ = value;
}
inline void QpSplinePathConfig::set_point_constraint_s_position(double value) {
  _internal_set_point_constraint_s_position(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.point_constraint_s_position)
}

// optional double lane_change_lateral_shift = 17 [default = 1];
inline bool QpSplinePathConfig::_internal_has_lane_change_lateral_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_lane_change_lateral_shift() const {
  return _internal_has_lane_change_lateral_shift();
}
inline void QpSplinePathConfig::clear_lane_change_lateral_shift() {
  _impl_.lane_change_lateral_shift_ = 1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double QpSplinePathConfig::_internal_lane_change_lateral_shift() const {
  return _impl_.lane_change_lateral_shift_;
}
inline double QpSplinePathConfig::lane_change_lateral_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
  return _internal_lane_change_lateral_shift();
}
inline void QpSplinePathConfig::_internal_set_lane_change_lateral_shift(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.lane_change_lateral_shift_ = value;
}
inline void QpSplinePathConfig::set_lane_change_lateral_shift(double value) {
  _internal_set_lane_change_lateral_shift(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.lane_change_lateral_shift)
}

// optional double uturn_speed_limit = 18 [default = 5];
inline bool QpSplinePathConfig::_internal_has_uturn_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool QpSplinePathConfig::has_uturn_speed_limit() const {
  return _internal_has_uturn_speed_limit();
}
inline void QpSplinePathConfig::clear_uturn_speed_limit() {
  _impl_.uturn_speed_limit_ = 5;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double QpSplinePathConfig::_internal_uturn_speed_limit() const {
  return _impl_.uturn_speed_limit_;
}
inline double QpSplinePathConfig::uturn_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
  return _internal_uturn_speed_limit();
}
inline void QpSplinePathConfig::_internal_set_uturn_speed_limit(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.uturn_speed_limit_ = value;
}
inline void QpSplinePathConfig::set_uturn_speed_limit(double value) {
  _internal_set_uturn_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplinePathConfig.uturn_speed_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto
