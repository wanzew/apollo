// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/canbus/proto/chassis.pb.h"
#include "modules/common/proto/drive_state.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/common/proto/vehicle_signal.pb.h"
#include "modules/map/proto/map_id.pb.h"
#include "modules/planning/proto/decision.pb.h"
#include "modules/planning/proto/planning_internal.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_2eproto;
namespace apollo {
namespace planning {
class ADCPathPoint;
struct ADCPathPointDefaultTypeInternal;
extern ADCPathPointDefaultTypeInternal _ADCPathPoint_default_instance_;
class ADCSignals;
struct ADCSignalsDefaultTypeInternal;
extern ADCSignalsDefaultTypeInternal _ADCSignals_default_instance_;
class ADCTrajectory;
struct ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
class ADCTrajectoryPoint;
struct ADCTrajectoryPointDefaultTypeInternal;
extern ADCTrajectoryPointDefaultTypeInternal _ADCTrajectoryPoint_default_instance_;
class ADCTrajectory_CriticalRegion;
struct ADCTrajectory_CriticalRegionDefaultTypeInternal;
extern ADCTrajectory_CriticalRegionDefaultTypeInternal _ADCTrajectory_CriticalRegion_default_instance_;
class EStop;
struct EStopDefaultTypeInternal;
extern EStopDefaultTypeInternal _EStop_default_instance_;
class LatencyStats;
struct LatencyStatsDefaultTypeInternal;
extern LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
class TaskStats;
struct TaskStatsDefaultTypeInternal;
extern TaskStatsDefaultTypeInternal _TaskStats_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::ADCPathPoint* Arena::CreateMaybeMessage<::apollo::planning::ADCPathPoint>(Arena*);
template<> ::apollo::planning::ADCSignals* Arena::CreateMaybeMessage<::apollo::planning::ADCSignals>(Arena*);
template<> ::apollo::planning::ADCTrajectory* Arena::CreateMaybeMessage<::apollo::planning::ADCTrajectory>(Arena*);
template<> ::apollo::planning::ADCTrajectoryPoint* Arena::CreateMaybeMessage<::apollo::planning::ADCTrajectoryPoint>(Arena*);
template<> ::apollo::planning::ADCTrajectory_CriticalRegion* Arena::CreateMaybeMessage<::apollo::planning::ADCTrajectory_CriticalRegion>(Arena*);
template<> ::apollo::planning::EStop* Arena::CreateMaybeMessage<::apollo::planning::EStop>(Arena*);
template<> ::apollo::planning::LatencyStats* Arena::CreateMaybeMessage<::apollo::planning::LatencyStats>(Arena*);
template<> ::apollo::planning::TaskStats* Arena::CreateMaybeMessage<::apollo::planning::TaskStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum ADCSignals_SignalType : int {
  ADCSignals_SignalType_LEFT_TURN = 1,
  ADCSignals_SignalType_RIGHT_TURN = 2,
  ADCSignals_SignalType_LOW_BEAM_LIGHT = 3,
  ADCSignals_SignalType_HIGH_BEAM_LIGHT = 4,
  ADCSignals_SignalType_FOG_LIGHT = 5,
  ADCSignals_SignalType_EMERGENCY_LIGHT = 6
};
bool ADCSignals_SignalType_IsValid(int value);
constexpr ADCSignals_SignalType ADCSignals_SignalType_SignalType_MIN = ADCSignals_SignalType_LEFT_TURN;
constexpr ADCSignals_SignalType ADCSignals_SignalType_SignalType_MAX = ADCSignals_SignalType_EMERGENCY_LIGHT;
constexpr int ADCSignals_SignalType_SignalType_ARRAYSIZE = ADCSignals_SignalType_SignalType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCSignals_SignalType_descriptor();
template<typename T>
inline const std::string& ADCSignals_SignalType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCSignals_SignalType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCSignals_SignalType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCSignals_SignalType_descriptor(), enum_t_value);
}
inline bool ADCSignals_SignalType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADCSignals_SignalType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCSignals_SignalType>(
    ADCSignals_SignalType_descriptor(), name, value);
}
enum ADCTrajectory_RightOfWayStatus : int {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
constexpr int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
template<typename T>
inline const std::string& ADCTrajectory_RightOfWayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCTrajectory_RightOfWayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCTrajectory_RightOfWayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), enum_t_value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADCTrajectory_RightOfWayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
// ===================================================================

class ADCTrajectoryPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectoryPoint) */ {
 public:
  inline ADCTrajectoryPoint() : ADCTrajectoryPoint(nullptr) {}
  ~ADCTrajectoryPoint() override;
  explicit PROTOBUF_CONSTEXPR ADCTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCTrajectoryPoint(const ADCTrajectoryPoint& from);
  ADCTrajectoryPoint(ADCTrajectoryPoint&& from) noexcept
    : ADCTrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline ADCTrajectoryPoint& operator=(const ADCTrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectoryPoint& operator=(ADCTrajectoryPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectoryPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectoryPoint*>(
               &_ADCTrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADCTrajectoryPoint& a, ADCTrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectoryPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCTrajectoryPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCTrajectoryPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCTrajectoryPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectoryPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCTrajectoryPoint";
  }
  protected:
  explicit ADCTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kSFieldNumber = 4,
    kLFieldNumber = 5,
    kSpeedFieldNumber = 6,
    kAccelerationSFieldNumber = 7,
    kCurvatureFieldNumber = 8,
    kCurvatureChangeRateFieldNumber = 9,
    kRelativeTimeFieldNumber = 10,
    kThetaFieldNumber = 11,
    kAccumulatedSFieldNumber = 12,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double s = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  PROTOBUF_DEPRECATED void clear_s();
  PROTOBUF_DEPRECATED double s() const;
  PROTOBUF_DEPRECATED void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double l = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  PROTOBUF_DEPRECATED void clear_l();
  PROTOBUF_DEPRECATED double l() const;
  PROTOBUF_DEPRECATED void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // optional double speed = 6;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // optional double acceleration_s = 7;
  bool has_acceleration_s() const;
  private:
  bool _internal_has_acceleration_s() const;
  public:
  void clear_acceleration_s();
  double acceleration_s() const;
  void set_acceleration_s(double value);
  private:
  double _internal_acceleration_s() const;
  void _internal_set_acceleration_s(double value);
  public:

  // optional double curvature = 8;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double curvature_change_rate = 9;
  bool has_curvature_change_rate() const;
  private:
  bool _internal_has_curvature_change_rate() const;
  public:
  void clear_curvature_change_rate();
  double curvature_change_rate() const;
  void set_curvature_change_rate(double value);
  private:
  double _internal_curvature_change_rate() const;
  void _internal_set_curvature_change_rate(double value);
  public:

  // optional double relative_time = 10;
  bool has_relative_time() const;
  private:
  bool _internal_has_relative_time() const;
  public:
  void clear_relative_time();
  double relative_time() const;
  void set_relative_time(double value);
  private:
  double _internal_relative_time() const;
  void _internal_set_relative_time(double value);
  public:

  // optional double theta = 11;
  bool has_theta() const;
  private:
  bool _internal_has_theta() const;
  public:
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // optional double accumulated_s = 12;
  bool has_accumulated_s() const;
  private:
  bool _internal_has_accumulated_s() const;
  public:
  void clear_accumulated_s();
  double accumulated_s() const;
  void set_accumulated_s(double value);
  private:
  double _internal_accumulated_s() const;
  void _internal_set_accumulated_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
    double s_;
    double l_;
    double speed_;
    double acceleration_s_;
    double curvature_;
    double curvature_change_rate_;
    double relative_time_;
    double theta_;
    double accumulated_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCPathPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCPathPoint) */ {
 public:
  inline ADCPathPoint() : ADCPathPoint(nullptr) {}
  ~ADCPathPoint() override;
  explicit PROTOBUF_CONSTEXPR ADCPathPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCPathPoint(const ADCPathPoint& from);
  ADCPathPoint(ADCPathPoint&& from) noexcept
    : ADCPathPoint() {
    *this = ::std::move(from);
  }

  inline ADCPathPoint& operator=(const ADCPathPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCPathPoint& operator=(ADCPathPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCPathPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCPathPoint* internal_default_instance() {
    return reinterpret_cast<const ADCPathPoint*>(
               &_ADCPathPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ADCPathPoint& a, ADCPathPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCPathPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCPathPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCPathPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCPathPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCPathPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCPathPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCPathPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCPathPoint";
  }
  protected:
  explicit ADCPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kCurvatureFieldNumber = 4,
    kHeadingFieldNumber = 5,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // optional double curvature = 4;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // optional double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCPathPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
    double curvature_;
    double heading_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCSignals final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCSignals) */ {
 public:
  inline ADCSignals() : ADCSignals(nullptr) {}
  ~ADCSignals() override;
  explicit PROTOBUF_CONSTEXPR ADCSignals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCSignals(const ADCSignals& from);
  ADCSignals(ADCSignals&& from) noexcept
    : ADCSignals() {
    *this = ::std::move(from);
  }

  inline ADCSignals& operator=(const ADCSignals& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCSignals& operator=(ADCSignals&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCSignals& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCSignals* internal_default_instance() {
    return reinterpret_cast<const ADCSignals*>(
               &_ADCSignals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ADCSignals& a, ADCSignals& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCSignals* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCSignals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCSignals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCSignals>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCSignals& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCSignals& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCSignals* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCSignals";
  }
  protected:
  explicit ADCSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ADCSignals_SignalType SignalType;
  static constexpr SignalType LEFT_TURN =
    ADCSignals_SignalType_LEFT_TURN;
  static constexpr SignalType RIGHT_TURN =
    ADCSignals_SignalType_RIGHT_TURN;
  static constexpr SignalType LOW_BEAM_LIGHT =
    ADCSignals_SignalType_LOW_BEAM_LIGHT;
  static constexpr SignalType HIGH_BEAM_LIGHT =
    ADCSignals_SignalType_HIGH_BEAM_LIGHT;
  static constexpr SignalType FOG_LIGHT =
    ADCSignals_SignalType_FOG_LIGHT;
  static constexpr SignalType EMERGENCY_LIGHT =
    ADCSignals_SignalType_EMERGENCY_LIGHT;
  static inline bool SignalType_IsValid(int value) {
    return ADCSignals_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN =
    ADCSignals_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX =
    ADCSignals_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE =
    ADCSignals_SignalType_SignalType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SignalType_descriptor() {
    return ADCSignals_SignalType_descriptor();
  }
  template<typename T>
  static inline const std::string& SignalType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SignalType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SignalType_Name.");
    return ADCSignals_SignalType_Name(enum_t_value);
  }
  static inline bool SignalType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SignalType* value) {
    return ADCSignals_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalFieldNumber = 1,
  };
  // repeated .apollo.planning.ADCSignals.SignalType signal = 1;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  private:
  ::apollo::planning::ADCSignals_SignalType _internal_signal(int index) const;
  void _internal_add_signal(::apollo::planning::ADCSignals_SignalType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_signal();
  public:
  ::apollo::planning::ADCSignals_SignalType signal(int index) const;
  void set_signal(int index, ::apollo::planning::ADCSignals_SignalType value);
  void add_signal(::apollo::planning::ADCSignals_SignalType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& signal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_signal();

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCSignals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> signal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class EStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EStop) */ {
 public:
  inline EStop() : EStop(nullptr) {}
  ~EStop() override;
  explicit PROTOBUF_CONSTEXPR EStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EStop(const EStop& from);
  EStop(EStop&& from) noexcept
    : EStop() {
    *this = ::std::move(from);
  }

  inline EStop& operator=(const EStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline EStop& operator=(EStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const EStop* internal_default_instance() {
    return reinterpret_cast<const EStop*>(
               &_EStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EStop& a, EStop& b) {
    a.Swap(&b);
  }
  inline void Swap(EStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EStop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.EStop";
  }
  protected:
  explicit EStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kIsEstopFieldNumber = 1,
  };
  // optional string reason = 2;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // optional bool is_estop = 1;
  bool has_is_estop() const;
  private:
  bool _internal_has_is_estop() const;
  public:
  void clear_is_estop();
  bool is_estop() const;
  void set_is_estop(bool value);
  private:
  bool _internal_is_estop() const;
  void _internal_set_is_estop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.EStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    bool is_estop_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class TaskStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TaskStats) */ {
 public:
  inline TaskStats() : TaskStats(nullptr) {}
  ~TaskStats() override;
  explicit PROTOBUF_CONSTEXPR TaskStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskStats(const TaskStats& from);
  TaskStats(TaskStats&& from) noexcept
    : TaskStats() {
    *this = ::std::move(from);
  }

  inline TaskStats& operator=(const TaskStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskStats& operator=(TaskStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskStats* internal_default_instance() {
    return reinterpret_cast<const TaskStats*>(
               &_TaskStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TaskStats& a, TaskStats& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TaskStats";
  }
  protected:
  explicit TaskStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeMsFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double time_ms = 2;
  bool has_time_ms() const;
  private:
  bool _internal_has_time_ms() const;
  public:
  void clear_time_ms();
  double time_ms() const;
  void set_time_ms(double value);
  private:
  double _internal_time_ms() const;
  void _internal_set_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.TaskStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double time_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class LatencyStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatencyStats) */ {
 public:
  inline LatencyStats() : LatencyStats(nullptr) {}
  ~LatencyStats() override;
  explicit PROTOBUF_CONSTEXPR LatencyStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyStats(const LatencyStats& from);
  LatencyStats(LatencyStats&& from) noexcept
    : LatencyStats() {
    *this = ::std::move(from);
  }

  inline LatencyStats& operator=(const LatencyStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyStats& operator=(LatencyStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyStats* internal_default_instance() {
    return reinterpret_cast<const LatencyStats*>(
               &_LatencyStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LatencyStats& a, LatencyStats& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatencyStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatencyStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatencyStats& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LatencyStats";
  }
  protected:
  explicit LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskStatsFieldNumber = 2,
    kTotalTimeMsFieldNumber = 1,
    kInitFrameTimeMsFieldNumber = 3,
  };
  // repeated .apollo.planning.TaskStats task_stats = 2;
  int task_stats_size() const;
  private:
  int _internal_task_stats_size() const;
  public:
  void clear_task_stats();
  ::apollo::planning::TaskStats* mutable_task_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >*
      mutable_task_stats();
  private:
  const ::apollo::planning::TaskStats& _internal_task_stats(int index) const;
  ::apollo::planning::TaskStats* _internal_add_task_stats();
  public:
  const ::apollo::planning::TaskStats& task_stats(int index) const;
  ::apollo::planning::TaskStats* add_task_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >&
      task_stats() const;

  // optional double total_time_ms = 1;
  bool has_total_time_ms() const;
  private:
  bool _internal_has_total_time_ms() const;
  public:
  void clear_total_time_ms();
  double total_time_ms() const;
  void set_total_time_ms(double value);
  private:
  double _internal_total_time_ms() const;
  void _internal_set_total_time_ms(double value);
  public:

  // optional double init_frame_time_ms = 3;
  bool has_init_frame_time_ms() const;
  private:
  bool _internal_has_init_frame_time_ms() const;
  public:
  void clear_init_frame_time_ms();
  double init_frame_time_ms() const;
  void set_init_frame_time_ms(double value);
  private:
  double _internal_init_frame_time_ms() const;
  void _internal_set_init_frame_time_ms(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LatencyStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats > task_stats_;
    double total_time_ms_;
    double init_frame_time_ms_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory_CriticalRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory.CriticalRegion) */ {
 public:
  inline ADCTrajectory_CriticalRegion() : ADCTrajectory_CriticalRegion(nullptr) {}
  ~ADCTrajectory_CriticalRegion() override;
  explicit PROTOBUF_CONSTEXPR ADCTrajectory_CriticalRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from);
  ADCTrajectory_CriticalRegion(ADCTrajectory_CriticalRegion&& from) noexcept
    : ADCTrajectory_CriticalRegion() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory_CriticalRegion& operator=(const ADCTrajectory_CriticalRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory_CriticalRegion& operator=(ADCTrajectory_CriticalRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectory_CriticalRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectory_CriticalRegion* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory_CriticalRegion*>(
               &_ADCTrajectory_CriticalRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ADCTrajectory_CriticalRegion& a, ADCTrajectory_CriticalRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectory_CriticalRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectory_CriticalRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectory_CriticalRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCTrajectory_CriticalRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCTrajectory_CriticalRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCTrajectory_CriticalRegion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory_CriticalRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCTrajectory.CriticalRegion";
  }
  protected:
  explicit ADCTrajectory_CriticalRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
  };
  // repeated .apollo.common.Polygon region = 1;
  int region_size() const;
  private:
  int _internal_region_size() const;
  public:
  void clear_region();
  ::apollo::common::Polygon* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >*
      mutable_region();
  private:
  const ::apollo::common::Polygon& _internal_region(int index) const;
  ::apollo::common::Polygon* _internal_add_region();
  public:
  const ::apollo::common::Polygon& region(int index) const;
  ::apollo::common::Polygon* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >&
      region() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory.CriticalRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon > region_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// -------------------------------------------------------------------

class ADCTrajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ADCTrajectory) */ {
 public:
  inline ADCTrajectory() : ADCTrajectory(nullptr) {}
  ~ADCTrajectory() override;
  explicit PROTOBUF_CONSTEXPR ADCTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCTrajectory(const ADCTrajectory& from);
  ADCTrajectory(ADCTrajectory&& from) noexcept
    : ADCTrajectory() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
               &_ADCTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ADCTrajectory& a, ADCTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCTrajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCTrajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCTrajectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ADCTrajectory";
  }
  protected:
  explicit ADCTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_CriticalRegion CriticalRegion;

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static constexpr RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static constexpr RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static constexpr RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static constexpr RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static constexpr int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& RightOfWayStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RightOfWayStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RightOfWayStatus_Name.");
    return ADCTrajectory_RightOfWayStatus_Name(enum_t_value);
  }
  static inline bool RightOfWayStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAdcTrajectoryPointFieldNumber = 4,
    kAdcPathPointFieldNumber = 7,
    kTrajectoryPointFieldNumber = 12,
    kPathPointFieldNumber = 13,
    kLaneIdFieldNumber = 18,
    kHeaderFieldNumber = 1,
    kEstopFieldNumber = 6,
    kDebugFieldNumber = 8,
    kSignalFieldNumber = 11,
    kDecisionFieldNumber = 14,
    kLatencyStatsFieldNumber = 15,
    kRoutingHeaderFieldNumber = 16,
    kEngageAdviceFieldNumber = 19,
    kCriticalRegionFieldNumber = 20,
    kTotalPathLengthFieldNumber = 2,
    kTotalPathTimeFieldNumber = 3,
    kIsReplanFieldNumber = 9,
    kGearFieldNumber = 10,
    kRightOfWayStatusFieldNumber = 17,
  };
  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
  PROTOBUF_DEPRECATED int adc_trajectory_point_size() const;
  private:
  int _internal_adc_trajectory_point_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_adc_trajectory_point();
  PROTOBUF_DEPRECATED ::apollo::planning::ADCTrajectoryPoint* mutable_adc_trajectory_point(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
      mutable_adc_trajectory_point();
  private:
  const ::apollo::planning::ADCTrajectoryPoint& _internal_adc_trajectory_point(int index) const;
  ::apollo::planning::ADCTrajectoryPoint* _internal_add_adc_trajectory_point();
  public:
  PROTOBUF_DEPRECATED const ::apollo::planning::ADCTrajectoryPoint& adc_trajectory_point(int index) const;
  PROTOBUF_DEPRECATED ::apollo::planning::ADCTrajectoryPoint* add_adc_trajectory_point();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
      adc_trajectory_point() const;

  // repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
  PROTOBUF_DEPRECATED int adc_path_point_size() const;
  private:
  int _internal_adc_path_point_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_adc_path_point();
  PROTOBUF_DEPRECATED ::apollo::planning::ADCPathPoint* mutable_adc_path_point(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
      mutable_adc_path_point();
  private:
  const ::apollo::planning::ADCPathPoint& _internal_adc_path_point(int index) const;
  ::apollo::planning::ADCPathPoint* _internal_add_adc_path_point();
  public:
  PROTOBUF_DEPRECATED const ::apollo::planning::ADCPathPoint& adc_path_point(int index) const;
  PROTOBUF_DEPRECATED ::apollo::planning::ADCPathPoint* add_adc_path_point();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
      adc_path_point() const;

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::apollo::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
      mutable_trajectory_point();
  private:
  const ::apollo::common::TrajectoryPoint& _internal_trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* _internal_add_trajectory_point();
  public:
  const ::apollo::common::TrajectoryPoint& trajectory_point(int index) const;
  ::apollo::common::TrajectoryPoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
      trajectory_point() const;

  // repeated .apollo.common.PathPoint path_point = 13;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  private:
  const ::apollo::common::PathPoint& _internal_path_point(int index) const;
  ::apollo::common::PathPoint* _internal_add_path_point();
  public:
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // repeated .apollo.hdmap.Id lane_id = 18;
  int lane_id_size() const;
  private:
  int _internal_lane_id_size() const;
  public:
  void clear_lane_id();
  ::apollo::hdmap::Id* mutable_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_lane_id();
  private:
  const ::apollo::hdmap::Id& _internal_lane_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_lane_id();
  public:
  const ::apollo::hdmap::Id& lane_id(int index) const;
  ::apollo::hdmap::Id* add_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      lane_id() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.planning.EStop estop = 6;
  bool has_estop() const;
  private:
  bool _internal_has_estop() const;
  public:
  void clear_estop();
  const ::apollo::planning::EStop& estop() const;
  PROTOBUF_NODISCARD ::apollo::planning::EStop* release_estop();
  ::apollo::planning::EStop* mutable_estop();
  void set_allocated_estop(::apollo::planning::EStop* estop);
  private:
  const ::apollo::planning::EStop& _internal_estop() const;
  ::apollo::planning::EStop* _internal_mutable_estop();
  public:
  void unsafe_arena_set_allocated_estop(
      ::apollo::planning::EStop* estop);
  ::apollo::planning::EStop* unsafe_arena_release_estop();

  // optional .apollo.planning_internal.Debug debug = 8;
  bool has_debug() const;
  private:
  bool _internal_has_debug() const;
  public:
  void clear_debug();
  const ::apollo::planning_internal::Debug& debug() const;
  PROTOBUF_NODISCARD ::apollo::planning_internal::Debug* release_debug();
  ::apollo::planning_internal::Debug* mutable_debug();
  void set_allocated_debug(::apollo::planning_internal::Debug* debug);
  private:
  const ::apollo::planning_internal::Debug& _internal_debug() const;
  ::apollo::planning_internal::Debug* _internal_mutable_debug();
  public:
  void unsafe_arena_set_allocated_debug(
      ::apollo::planning_internal::Debug* debug);
  ::apollo::planning_internal::Debug* unsafe_arena_release_debug();

  // optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  PROTOBUF_DEPRECATED void clear_signal();
  PROTOBUF_DEPRECATED const ::apollo::common::VehicleSignal& signal() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::apollo::common::VehicleSignal* release_signal();
  PROTOBUF_DEPRECATED ::apollo::common::VehicleSignal* mutable_signal();
  PROTOBUF_DEPRECATED void set_allocated_signal(::apollo::common::VehicleSignal* signal);
  private:
  const ::apollo::common::VehicleSignal& _internal_signal() const;
  ::apollo::common::VehicleSignal* _internal_mutable_signal();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_signal(
      ::apollo::common::VehicleSignal* signal);
  PROTOBUF_DEPRECATED ::apollo::common::VehicleSignal* unsafe_arena_release_signal();

  // optional .apollo.planning.DecisionResult decision = 14;
  bool has_decision() const;
  private:
  bool _internal_has_decision() const;
  public:
  void clear_decision();
  const ::apollo::planning::DecisionResult& decision() const;
  PROTOBUF_NODISCARD ::apollo::planning::DecisionResult* release_decision();
  ::apollo::planning::DecisionResult* mutable_decision();
  void set_allocated_decision(::apollo::planning::DecisionResult* decision);
  private:
  const ::apollo::planning::DecisionResult& _internal_decision() const;
  ::apollo::planning::DecisionResult* _internal_mutable_decision();
  public:
  void unsafe_arena_set_allocated_decision(
      ::apollo::planning::DecisionResult* decision);
  ::apollo::planning::DecisionResult* unsafe_arena_release_decision();

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  bool has_latency_stats() const;
  private:
  bool _internal_has_latency_stats() const;
  public:
  void clear_latency_stats();
  const ::apollo::planning::LatencyStats& latency_stats() const;
  PROTOBUF_NODISCARD ::apollo::planning::LatencyStats* release_latency_stats();
  ::apollo::planning::LatencyStats* mutable_latency_stats();
  void set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats);
  private:
  const ::apollo::planning::LatencyStats& _internal_latency_stats() const;
  ::apollo::planning::LatencyStats* _internal_mutable_latency_stats();
  public:
  void unsafe_arena_set_allocated_latency_stats(
      ::apollo::planning::LatencyStats* latency_stats);
  ::apollo::planning::LatencyStats* unsafe_arena_release_latency_stats();

  // optional .apollo.common.Header routing_header = 16;
  bool has_routing_header() const;
  private:
  bool _internal_has_routing_header() const;
  public:
  void clear_routing_header();
  const ::apollo::common::Header& routing_header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_routing_header();
  ::apollo::common::Header* mutable_routing_header();
  void set_allocated_routing_header(::apollo::common::Header* routing_header);
  private:
  const ::apollo::common::Header& _internal_routing_header() const;
  ::apollo::common::Header* _internal_mutable_routing_header();
  public:
  void unsafe_arena_set_allocated_routing_header(
      ::apollo::common::Header* routing_header);
  ::apollo::common::Header* unsafe_arena_release_routing_header();

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  bool has_engage_advice() const;
  private:
  bool _internal_has_engage_advice() const;
  public:
  void clear_engage_advice();
  const ::apollo::common::EngageAdvice& engage_advice() const;
  PROTOBUF_NODISCARD ::apollo::common::EngageAdvice* release_engage_advice();
  ::apollo::common::EngageAdvice* mutable_engage_advice();
  void set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice);
  private:
  const ::apollo::common::EngageAdvice& _internal_engage_advice() const;
  ::apollo::common::EngageAdvice* _internal_mutable_engage_advice();
  public:
  void unsafe_arena_set_allocated_engage_advice(
      ::apollo::common::EngageAdvice* engage_advice);
  ::apollo::common::EngageAdvice* unsafe_arena_release_engage_advice();

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  bool has_critical_region() const;
  private:
  bool _internal_has_critical_region() const;
  public:
  void clear_critical_region();
  const ::apollo::planning::ADCTrajectory_CriticalRegion& critical_region() const;
  PROTOBUF_NODISCARD ::apollo::planning::ADCTrajectory_CriticalRegion* release_critical_region();
  ::apollo::planning::ADCTrajectory_CriticalRegion* mutable_critical_region();
  void set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region);
  private:
  const ::apollo::planning::ADCTrajectory_CriticalRegion& _internal_critical_region() const;
  ::apollo::planning::ADCTrajectory_CriticalRegion* _internal_mutable_critical_region();
  public:
  void unsafe_arena_set_allocated_critical_region(
      ::apollo::planning::ADCTrajectory_CriticalRegion* critical_region);
  ::apollo::planning::ADCTrajectory_CriticalRegion* unsafe_arena_release_critical_region();

  // optional double total_path_length = 2;
  bool has_total_path_length() const;
  private:
  bool _internal_has_total_path_length() const;
  public:
  void clear_total_path_length();
  double total_path_length() const;
  void set_total_path_length(double value);
  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);
  public:

  // optional double total_path_time = 3;
  bool has_total_path_time() const;
  private:
  bool _internal_has_total_path_time() const;
  public:
  void clear_total_path_time();
  double total_path_time() const;
  void set_total_path_time(double value);
  private:
  double _internal_total_path_time() const;
  void _internal_set_total_path_time(double value);
  public:

  // optional bool is_replan = 9 [default = false];
  bool has_is_replan() const;
  private:
  bool _internal_has_is_replan() const;
  public:
  void clear_is_replan();
  bool is_replan() const;
  void set_is_replan(bool value);
  private:
  bool _internal_is_replan() const;
  void _internal_set_is_replan(bool value);
  public:

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  bool has_gear() const;
  private:
  bool _internal_has_gear() const;
  public:
  void clear_gear();
  ::apollo::canbus::Chassis_GearPosition gear() const;
  void set_gear(::apollo::canbus::Chassis_GearPosition value);
  private:
  ::apollo::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::apollo::canbus::Chassis_GearPosition value);
  public:

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  bool has_right_of_way_status() const;
  private:
  bool _internal_has_right_of_way_status() const;
  public:
  void clear_right_of_way_status();
  ::apollo::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value);
  private:
  ::apollo::planning::ADCTrajectory_RightOfWayStatus _internal_right_of_way_status() const;
  void _internal_set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ADCTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint > adc_trajectory_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCPathPoint > adc_path_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint > trajectory_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > lane_id_;
    ::apollo::common::Header* header_;
    ::apollo::planning::EStop* estop_;
    ::apollo::planning_internal::Debug* debug_;
    ::apollo::common::VehicleSignal* signal_;
    ::apollo::planning::DecisionResult* decision_;
    ::apollo::planning::LatencyStats* latency_stats_;
    ::apollo::common::Header* routing_header_;
    ::apollo::common::EngageAdvice* engage_advice_;
    ::apollo::planning::ADCTrajectory_CriticalRegion* critical_region_;
    double total_path_length_;
    double total_path_time_;
    bool is_replan_;
    int gear_;
    int right_of_way_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADCTrajectoryPoint

// optional double x = 1;
inline bool ADCTrajectoryPoint::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_x() const {
  return _internal_has_x();
}
inline void ADCTrajectoryPoint::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ADCTrajectoryPoint::_internal_x() const {
  return _impl_.x_;
}
inline double ADCTrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.x)
  return _internal_x();
}
inline void ADCTrajectoryPoint::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void ADCTrajectoryPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.x)
}

// optional double y = 2;
inline bool ADCTrajectoryPoint::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_y() const {
  return _internal_has_y();
}
inline void ADCTrajectoryPoint::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ADCTrajectoryPoint::_internal_y() const {
  return _impl_.y_;
}
inline double ADCTrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.y)
  return _internal_y();
}
inline void ADCTrajectoryPoint::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void ADCTrajectoryPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.y)
}

// optional double z = 3;
inline bool ADCTrajectoryPoint::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_z() const {
  return _internal_has_z();
}
inline void ADCTrajectoryPoint::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ADCTrajectoryPoint::_internal_z() const {
  return _impl_.z_;
}
inline double ADCTrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.z)
  return _internal_z();
}
inline void ADCTrajectoryPoint::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void ADCTrajectoryPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.z)
}

// optional double speed = 6;
inline bool ADCTrajectoryPoint::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_speed() const {
  return _internal_has_speed();
}
inline void ADCTrajectoryPoint::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ADCTrajectoryPoint::_internal_speed() const {
  return _impl_.speed_;
}
inline double ADCTrajectoryPoint::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.speed)
  return _internal_speed();
}
inline void ADCTrajectoryPoint::_internal_set_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.speed_ = value;
}
inline void ADCTrajectoryPoint::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.speed)
}

// optional double acceleration_s = 7;
inline bool ADCTrajectoryPoint::_internal_has_acceleration_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_acceleration_s() const {
  return _internal_has_acceleration_s();
}
inline void ADCTrajectoryPoint::clear_acceleration_s() {
  _impl_.acceleration_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ADCTrajectoryPoint::_internal_acceleration_s() const {
  return _impl_.acceleration_s_;
}
inline double ADCTrajectoryPoint::acceleration_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.acceleration_s)
  return _internal_acceleration_s();
}
inline void ADCTrajectoryPoint::_internal_set_acceleration_s(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.acceleration_s_ = value;
}
inline void ADCTrajectoryPoint::set_acceleration_s(double value) {
  _internal_set_acceleration_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.acceleration_s)
}

// optional double curvature = 8;
inline bool ADCTrajectoryPoint::_internal_has_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_curvature() const {
  return _internal_has_curvature();
}
inline void ADCTrajectoryPoint::clear_curvature() {
  _impl_.curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ADCTrajectoryPoint::_internal_curvature() const {
  return _impl_.curvature_;
}
inline double ADCTrajectoryPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature)
  return _internal_curvature();
}
inline void ADCTrajectoryPoint::_internal_set_curvature(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.curvature_ = value;
}
inline void ADCTrajectoryPoint::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature)
}

// optional double curvature_change_rate = 9;
inline bool ADCTrajectoryPoint::_internal_has_curvature_change_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_curvature_change_rate() const {
  return _internal_has_curvature_change_rate();
}
inline void ADCTrajectoryPoint::clear_curvature_change_rate() {
  _impl_.curvature_change_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ADCTrajectoryPoint::_internal_curvature_change_rate() const {
  return _impl_.curvature_change_rate_;
}
inline double ADCTrajectoryPoint::curvature_change_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
  return _internal_curvature_change_rate();
}
inline void ADCTrajectoryPoint::_internal_set_curvature_change_rate(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.curvature_change_rate_ = value;
}
inline void ADCTrajectoryPoint::set_curvature_change_rate(double value) {
  _internal_set_curvature_change_rate(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.curvature_change_rate)
}

// optional double relative_time = 10;
inline bool ADCTrajectoryPoint::_internal_has_relative_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_relative_time() const {
  return _internal_has_relative_time();
}
inline void ADCTrajectoryPoint::clear_relative_time() {
  _impl_.relative_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ADCTrajectoryPoint::_internal_relative_time() const {
  return _impl_.relative_time_;
}
inline double ADCTrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.relative_time)
  return _internal_relative_time();
}
inline void ADCTrajectoryPoint::_internal_set_relative_time(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.relative_time_ = value;
}
inline void ADCTrajectoryPoint::set_relative_time(double value) {
  _internal_set_relative_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.relative_time)
}

// optional double theta = 11;
inline bool ADCTrajectoryPoint::_internal_has_theta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_theta() const {
  return _internal_has_theta();
}
inline void ADCTrajectoryPoint::clear_theta() {
  _impl_.theta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ADCTrajectoryPoint::_internal_theta() const {
  return _impl_.theta_;
}
inline double ADCTrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.theta)
  return _internal_theta();
}
inline void ADCTrajectoryPoint::_internal_set_theta(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theta_ = value;
}
inline void ADCTrajectoryPoint::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.theta)
}

// optional double accumulated_s = 12;
inline bool ADCTrajectoryPoint::_internal_has_accumulated_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_accumulated_s() const {
  return _internal_has_accumulated_s();
}
inline void ADCTrajectoryPoint::clear_accumulated_s() {
  _impl_.accumulated_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ADCTrajectoryPoint::_internal_accumulated_s() const {
  return _impl_.accumulated_s_;
}
inline double ADCTrajectoryPoint::accumulated_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.accumulated_s)
  return _internal_accumulated_s();
}
inline void ADCTrajectoryPoint::_internal_set_accumulated_s(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.accumulated_s_ = value;
}
inline void ADCTrajectoryPoint::set_accumulated_s(double value) {
  _internal_set_accumulated_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.accumulated_s)
}

// optional double s = 4 [deprecated = true];
inline bool ADCTrajectoryPoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_s() const {
  return _internal_has_s();
}
inline void ADCTrajectoryPoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ADCTrajectoryPoint::_internal_s() const {
  return _impl_.s_;
}
inline double ADCTrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.s)
  return _internal_s();
}
inline void ADCTrajectoryPoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.s_ = value;
}
inline void ADCTrajectoryPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.s)
}

// optional double l = 5 [deprecated = true];
inline bool ADCTrajectoryPoint::_internal_has_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ADCTrajectoryPoint::has_l() const {
  return _internal_has_l();
}
inline void ADCTrajectoryPoint::clear_l() {
  _impl_.l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ADCTrajectoryPoint::_internal_l() const {
  return _impl_.l_;
}
inline double ADCTrajectoryPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectoryPoint.l)
  return _internal_l();
}
inline void ADCTrajectoryPoint::_internal_set_l(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.l_ = value;
}
inline void ADCTrajectoryPoint::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectoryPoint.l)
}

// -------------------------------------------------------------------

// ADCPathPoint

// optional double x = 1;
inline bool ADCPathPoint::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ADCPathPoint::has_x() const {
  return _internal_has_x();
}
inline void ADCPathPoint::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ADCPathPoint::_internal_x() const {
  return _impl_.x_;
}
inline double ADCPathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.x)
  return _internal_x();
}
inline void ADCPathPoint::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void ADCPathPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.x)
}

// optional double y = 2;
inline bool ADCPathPoint::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ADCPathPoint::has_y() const {
  return _internal_has_y();
}
inline void ADCPathPoint::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ADCPathPoint::_internal_y() const {
  return _impl_.y_;
}
inline double ADCPathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.y)
  return _internal_y();
}
inline void ADCPathPoint::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void ADCPathPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.y)
}

// optional double z = 3;
inline bool ADCPathPoint::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ADCPathPoint::has_z() const {
  return _internal_has_z();
}
inline void ADCPathPoint::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ADCPathPoint::_internal_z() const {
  return _impl_.z_;
}
inline double ADCPathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.z)
  return _internal_z();
}
inline void ADCPathPoint::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void ADCPathPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.z)
}

// optional double curvature = 4;
inline bool ADCPathPoint::_internal_has_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ADCPathPoint::has_curvature() const {
  return _internal_has_curvature();
}
inline void ADCPathPoint::clear_curvature() {
  _impl_.curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ADCPathPoint::_internal_curvature() const {
  return _impl_.curvature_;
}
inline double ADCPathPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.curvature)
  return _internal_curvature();
}
inline void ADCPathPoint::_internal_set_curvature(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.curvature_ = value;
}
inline void ADCPathPoint::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.curvature)
}

// optional double heading = 5;
inline bool ADCPathPoint::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ADCPathPoint::has_heading() const {
  return _internal_has_heading();
}
inline void ADCPathPoint::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ADCPathPoint::_internal_heading() const {
  return _impl_.heading_;
}
inline double ADCPathPoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCPathPoint.heading)
  return _internal_heading();
}
inline void ADCPathPoint::_internal_set_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.heading_ = value;
}
inline void ADCPathPoint::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCPathPoint.heading)
}

// -------------------------------------------------------------------

// ADCSignals

// repeated .apollo.planning.ADCSignals.SignalType signal = 1;
inline int ADCSignals::_internal_signal_size() const {
  return _impl_.signal_.size();
}
inline int ADCSignals::signal_size() const {
  return _internal_signal_size();
}
inline void ADCSignals::clear_signal() {
  _impl_.signal_.Clear();
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::_internal_signal(int index) const {
  return static_cast< ::apollo::planning::ADCSignals_SignalType >(_impl_.signal_.Get(index));
}
inline ::apollo::planning::ADCSignals_SignalType ADCSignals::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCSignals.signal)
  return _internal_signal(index);
}
inline void ADCSignals::set_signal(int index, ::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  _impl_.signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCSignals.signal)
}
inline void ADCSignals::_internal_add_signal(::apollo::planning::ADCSignals_SignalType value) {
  assert(::apollo::planning::ADCSignals_SignalType_IsValid(value));
  _impl_.signal_.Add(value);
}
inline void ADCSignals::add_signal(::apollo::planning::ADCSignals_SignalType value) {
  _internal_add_signal(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ADCSignals.signal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ADCSignals::signal() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCSignals.signal)
  return _impl_.signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ADCSignals::_internal_mutable_signal() {
  return &_impl_.signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ADCSignals::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCSignals.signal)
  return _internal_mutable_signal();
}

// -------------------------------------------------------------------

// EStop

// optional bool is_estop = 1;
inline bool EStop::_internal_has_is_estop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EStop::has_is_estop() const {
  return _internal_has_is_estop();
}
inline void EStop::clear_is_estop() {
  _impl_.is_estop_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool EStop::_internal_is_estop() const {
  return _impl_.is_estop_;
}
inline bool EStop::is_estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.is_estop)
  return _internal_is_estop();
}
inline void EStop::_internal_set_is_estop(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_estop_ = value;
}
inline void EStop::set_is_estop(bool value) {
  _internal_set_is_estop(value);
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.is_estop)
}

// optional string reason = 2;
inline bool EStop::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EStop::has_reason() const {
  return _internal_has_reason();
}
inline void EStop::clear_reason() {
  _impl_.reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EStop::reason() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EStop.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EStop::set_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.EStop.reason)
}
inline std::string* EStop::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EStop.reason)
  return _s;
}
inline const std::string& EStop::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void EStop::_internal_set_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* EStop::_internal_mutable_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* EStop::release_reason() {
  // @@protoc_insertion_point(field_release:apollo.planning.EStop.reason)
  if (!_internal_has_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EStop::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EStop.reason)
}

// -------------------------------------------------------------------

// TaskStats

// optional string name = 1;
inline bool TaskStats::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskStats::has_name() const {
  return _internal_has_name();
}
inline void TaskStats::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskStats::name() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskStats::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.name)
}
inline std::string* TaskStats::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskStats.name)
  return _s;
}
inline const std::string& TaskStats::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TaskStats::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TaskStats::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TaskStats::release_name() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskStats.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TaskStats::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskStats.name)
}

// optional double time_ms = 2;
inline bool TaskStats::_internal_has_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskStats::has_time_ms() const {
  return _internal_has_time_ms();
}
inline void TaskStats::clear_time_ms() {
  _impl_.time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TaskStats::_internal_time_ms() const {
  return _impl_.time_ms_;
}
inline double TaskStats::time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskStats.time_ms)
  return _internal_time_ms();
}
inline void TaskStats::_internal_set_time_ms(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_ms_ = value;
}
inline void TaskStats::set_time_ms(double value) {
  _internal_set_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskStats.time_ms)
}

// -------------------------------------------------------------------

// LatencyStats

// optional double total_time_ms = 1;
inline bool LatencyStats::_internal_has_total_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatencyStats::has_total_time_ms() const {
  return _internal_has_total_time_ms();
}
inline void LatencyStats::clear_total_time_ms() {
  _impl_.total_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LatencyStats::_internal_total_time_ms() const {
  return _impl_.total_time_ms_;
}
inline double LatencyStats::total_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.total_time_ms)
  return _internal_total_time_ms();
}
inline void LatencyStats::_internal_set_total_time_ms(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_time_ms_ = value;
}
inline void LatencyStats::set_total_time_ms(double value) {
  _internal_set_total_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.total_time_ms)
}

// repeated .apollo.planning.TaskStats task_stats = 2;
inline int LatencyStats::_internal_task_stats_size() const {
  return _impl_.task_stats_.size();
}
inline int LatencyStats::task_stats_size() const {
  return _internal_task_stats_size();
}
inline void LatencyStats::clear_task_stats() {
  _impl_.task_stats_.Clear();
}
inline ::apollo::planning::TaskStats* LatencyStats::mutable_task_stats(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatencyStats.task_stats)
  return _impl_.task_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >*
LatencyStats::mutable_task_stats() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.LatencyStats.task_stats)
  return &_impl_.task_stats_;
}
inline const ::apollo::planning::TaskStats& LatencyStats::_internal_task_stats(int index) const {
  return _impl_.task_stats_.Get(index);
}
inline const ::apollo::planning::TaskStats& LatencyStats::task_stats(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.task_stats)
  return _internal_task_stats(index);
}
inline ::apollo::planning::TaskStats* LatencyStats::_internal_add_task_stats() {
  return _impl_.task_stats_.Add();
}
inline ::apollo::planning::TaskStats* LatencyStats::add_task_stats() {
  ::apollo::planning::TaskStats* _add = _internal_add_task_stats();
  // @@protoc_insertion_point(field_add:apollo.planning.LatencyStats.task_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskStats >&
LatencyStats::task_stats() const {
  // @@protoc_insertion_point(field_list:apollo.planning.LatencyStats.task_stats)
  return _impl_.task_stats_;
}

// optional double init_frame_time_ms = 3;
inline bool LatencyStats::_internal_has_init_frame_time_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatencyStats::has_init_frame_time_ms() const {
  return _internal_has_init_frame_time_ms();
}
inline void LatencyStats::clear_init_frame_time_ms() {
  _impl_.init_frame_time_ms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LatencyStats::_internal_init_frame_time_ms() const {
  return _impl_.init_frame_time_ms_;
}
inline double LatencyStats::init_frame_time_ms() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatencyStats.init_frame_time_ms)
  return _internal_init_frame_time_ms();
}
inline void LatencyStats::_internal_set_init_frame_time_ms(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.init_frame_time_ms_ = value;
}
inline void LatencyStats::set_init_frame_time_ms(double value) {
  _internal_set_init_frame_time_ms(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatencyStats.init_frame_time_ms)
}

// -------------------------------------------------------------------

// ADCTrajectory_CriticalRegion

// repeated .apollo.common.Polygon region = 1;
inline int ADCTrajectory_CriticalRegion::_internal_region_size() const {
  return _impl_.region_.size();
}
inline int ADCTrajectory_CriticalRegion::region_size() const {
  return _internal_region_size();
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _impl_.region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >*
ADCTrajectory_CriticalRegion::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return &_impl_.region_;
}
inline const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::_internal_region(int index) const {
  return _impl_.region_.Get(index);
}
inline const ::apollo::common::Polygon& ADCTrajectory_CriticalRegion::region(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _internal_region(index);
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::_internal_add_region() {
  return _impl_.region_.Add();
}
inline ::apollo::common::Polygon* ADCTrajectory_CriticalRegion::add_region() {
  ::apollo::common::Polygon* _add = _internal_add_region();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::Polygon >&
ADCTrajectory_CriticalRegion::region() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.CriticalRegion.region)
  return _impl_.region_;
}

// -------------------------------------------------------------------

// ADCTrajectory

// optional .apollo.common.Header header = 1;
inline bool ADCTrajectory::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& ADCTrajectory::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.header)
  return _internal_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.header)
}
inline ::apollo::common::Header* ADCTrajectory::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.header)
}

// optional double total_path_length = 2;
inline bool ADCTrajectory::_internal_has_total_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ADCTrajectory::has_total_path_length() const {
  return _internal_has_total_path_length();
}
inline void ADCTrajectory::clear_total_path_length() {
  _impl_.total_path_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ADCTrajectory::_internal_total_path_length() const {
  return _impl_.total_path_length_;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_length)
  return _internal_total_path_length();
}
inline void ADCTrajectory::_internal_set_total_path_length(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.total_path_length_ = value;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_length)
}

// optional double total_path_time = 3;
inline bool ADCTrajectory::_internal_has_total_path_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ADCTrajectory::has_total_path_time() const {
  return _internal_has_total_path_time();
}
inline void ADCTrajectory::clear_total_path_time() {
  _impl_.total_path_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ADCTrajectory::_internal_total_path_time() const {
  return _impl_.total_path_time_;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.total_path_time)
  return _internal_total_path_time();
}
inline void ADCTrajectory::_internal_set_total_path_time(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.total_path_time_ = value;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  _internal_set_total_path_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.total_path_time)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::_internal_trajectory_point_size() const {
  return _impl_.trajectory_point_.size();
}
inline int ADCTrajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.trajectory_point)
  return _impl_.trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.trajectory_point)
  return &_impl_.trajectory_point_;
}
inline const ::apollo::common::TrajectoryPoint& ADCTrajectory::_internal_trajectory_point(int index) const {
  return _impl_.trajectory_point_.Get(index);
}
inline const ::apollo::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::_internal_add_trajectory_point() {
  return _impl_.trajectory_point_.Add();
}
inline ::apollo::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  ::apollo::common::TrajectoryPoint* _add = _internal_add_trajectory_point();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.trajectory_point)
  return _impl_.trajectory_point_;
}

// optional .apollo.planning.EStop estop = 6;
inline bool ADCTrajectory::_internal_has_estop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.estop_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_estop() const {
  return _internal_has_estop();
}
inline void ADCTrajectory::clear_estop() {
  if (_impl_.estop_ != nullptr) _impl_.estop_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::EStop& ADCTrajectory::_internal_estop() const {
  const ::apollo::planning::EStop* p = _impl_.estop_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::EStop&>(
      ::apollo::planning::_EStop_default_instance_);
}
inline const ::apollo::planning::EStop& ADCTrajectory::estop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.estop)
  return _internal_estop();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_estop(
    ::apollo::planning::EStop* estop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.estop_);
  }
  _impl_.estop_ = estop;
  if (estop) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.estop)
}
inline ::apollo::planning::EStop* ADCTrajectory::release_estop() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::EStop* temp = _impl_.estop_;
  _impl_.estop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::EStop* ADCTrajectory::unsafe_arena_release_estop() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.estop)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::EStop* temp = _impl_.estop_;
  _impl_.estop_ = nullptr;
  return temp;
}
inline ::apollo::planning::EStop* ADCTrajectory::_internal_mutable_estop() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.estop_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::EStop>(GetArenaForAllocation());
    _impl_.estop_ = p;
  }
  return _impl_.estop_;
}
inline ::apollo::planning::EStop* ADCTrajectory::mutable_estop() {
  ::apollo::planning::EStop* _msg = _internal_mutable_estop();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.estop)
  return _msg;
}
inline void ADCTrajectory::set_allocated_estop(::apollo::planning::EStop* estop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.estop_;
  }
  if (estop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(estop);
    if (message_arena != submessage_arena) {
      estop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, estop, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.estop_ = estop;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.estop)
}

// repeated .apollo.common.PathPoint path_point = 13;
inline int ADCTrajectory::_internal_path_point_size() const {
  return _impl_.path_point_.size();
}
inline int ADCTrajectory::path_point_size() const {
  return _internal_path_point_size();
}
inline ::apollo::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.path_point)
  return _impl_.path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.path_point)
  return &_impl_.path_point_;
}
inline const ::apollo::common::PathPoint& ADCTrajectory::_internal_path_point(int index) const {
  return _impl_.path_point_.Get(index);
}
inline const ::apollo::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.path_point)
  return _internal_path_point(index);
}
inline ::apollo::common::PathPoint* ADCTrajectory::_internal_add_path_point() {
  return _impl_.path_point_.Add();
}
inline ::apollo::common::PathPoint* ADCTrajectory::add_path_point() {
  ::apollo::common::PathPoint* _add = _internal_add_path_point();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.path_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.path_point)
  return _impl_.path_point_;
}

// optional bool is_replan = 9 [default = false];
inline bool ADCTrajectory::_internal_has_is_replan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ADCTrajectory::has_is_replan() const {
  return _internal_has_is_replan();
}
inline void ADCTrajectory::clear_is_replan() {
  _impl_.is_replan_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool ADCTrajectory::_internal_is_replan() const {
  return _impl_.is_replan_;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.is_replan)
  return _internal_is_replan();
}
inline void ADCTrajectory::_internal_set_is_replan(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_replan_ = value;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  _internal_set_is_replan(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.is_replan)
}

// optional .apollo.canbus.Chassis.GearPosition gear = 10;
inline bool ADCTrajectory::_internal_has_gear() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_gear() const {
  return _internal_has_gear();
}
inline void ADCTrajectory::clear_gear() {
  _impl_.gear_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::_internal_gear() const {
  return static_cast< ::apollo::canbus::Chassis_GearPosition >(_impl_.gear_);
}
inline ::apollo::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.gear)
  return _internal_gear();
}
inline void ADCTrajectory::_internal_set_gear(::apollo::canbus::Chassis_GearPosition value) {
  assert(::apollo::canbus::Chassis_GearPosition_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.gear_ = value;
}
inline void ADCTrajectory::set_gear(::apollo::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.gear)
}

// optional .apollo.planning.DecisionResult decision = 14;
inline bool ADCTrajectory::_internal_has_decision() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_decision() const {
  return _internal_has_decision();
}
inline const ::apollo::planning::DecisionResult& ADCTrajectory::_internal_decision() const {
  const ::apollo::planning::DecisionResult* p = _impl_.decision_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::DecisionResult&>(
      ::apollo::planning::_DecisionResult_default_instance_);
}
inline const ::apollo::planning::DecisionResult& ADCTrajectory::decision() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.decision)
  return _internal_decision();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_decision(
    ::apollo::planning::DecisionResult* decision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_);
  }
  _impl_.decision_ = decision;
  if (decision) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.decision)
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::release_decision() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::DecisionResult* temp = _impl_.decision_;
  _impl_.decision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::unsafe_arena_release_decision() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.decision)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::DecisionResult* temp = _impl_.decision_;
  _impl_.decision_ = nullptr;
  return temp;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::_internal_mutable_decision() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.decision_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DecisionResult>(GetArenaForAllocation());
    _impl_.decision_ = p;
  }
  return _impl_.decision_;
}
inline ::apollo::planning::DecisionResult* ADCTrajectory::mutable_decision() {
  ::apollo::planning::DecisionResult* _msg = _internal_mutable_decision();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.decision)
  return _msg;
}
inline void ADCTrajectory::set_allocated_decision(::apollo::planning::DecisionResult* decision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_);
  }
  if (decision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision));
    if (message_arena != submessage_arena) {
      decision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.decision_ = decision;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.decision)
}

// optional .apollo.planning.LatencyStats latency_stats = 15;
inline bool ADCTrajectory::_internal_has_latency_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.latency_stats_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_latency_stats() const {
  return _internal_has_latency_stats();
}
inline void ADCTrajectory::clear_latency_stats() {
  if (_impl_.latency_stats_ != nullptr) _impl_.latency_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::planning::LatencyStats& ADCTrajectory::_internal_latency_stats() const {
  const ::apollo::planning::LatencyStats* p = _impl_.latency_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LatencyStats&>(
      ::apollo::planning::_LatencyStats_default_instance_);
}
inline const ::apollo::planning::LatencyStats& ADCTrajectory::latency_stats() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.latency_stats)
  return _internal_latency_stats();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_latency_stats(
    ::apollo::planning::LatencyStats* latency_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latency_stats_);
  }
  _impl_.latency_stats_ = latency_stats;
  if (latency_stats) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::release_latency_stats() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::LatencyStats* temp = _impl_.latency_stats_;
  _impl_.latency_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::unsafe_arena_release_latency_stats() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.latency_stats)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::apollo::planning::LatencyStats* temp = _impl_.latency_stats_;
  _impl_.latency_stats_ = nullptr;
  return temp;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::_internal_mutable_latency_stats() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.latency_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LatencyStats>(GetArenaForAllocation());
    _impl_.latency_stats_ = p;
  }
  return _impl_.latency_stats_;
}
inline ::apollo::planning::LatencyStats* ADCTrajectory::mutable_latency_stats() {
  ::apollo::planning::LatencyStats* _msg = _internal_mutable_latency_stats();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.latency_stats)
  return _msg;
}
inline void ADCTrajectory::set_allocated_latency_stats(::apollo::planning::LatencyStats* latency_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.latency_stats_;
  }
  if (latency_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(latency_stats);
    if (message_arena != submessage_arena) {
      latency_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.latency_stats_ = latency_stats;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.latency_stats)
}

// optional .apollo.common.Header routing_header = 16;
inline bool ADCTrajectory::_internal_has_routing_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_header_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_routing_header() const {
  return _internal_has_routing_header();
}
inline const ::apollo::common::Header& ADCTrajectory::_internal_routing_header() const {
  const ::apollo::common::Header* p = _impl_.routing_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.routing_header)
  return _internal_routing_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_routing_header(
    ::apollo::common::Header* routing_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_header_);
  }
  _impl_.routing_header_ = routing_header;
  if (routing_header) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}
inline ::apollo::common::Header* ADCTrajectory::release_routing_header() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Header* temp = _impl_.routing_header_;
  _impl_.routing_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::unsafe_arena_release_routing_header() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.routing_header)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::apollo::common::Header* temp = _impl_.routing_header_;
  _impl_.routing_header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* ADCTrajectory::_internal_mutable_routing_header() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.routing_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.routing_header_ = p;
  }
  return _impl_.routing_header_;
}
inline ::apollo::common::Header* ADCTrajectory::mutable_routing_header() {
  ::apollo::common::Header* _msg = _internal_mutable_routing_header();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.routing_header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_routing_header(::apollo::common::Header* routing_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_header_);
  }
  if (routing_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_header));
    if (message_arena != submessage_arena) {
      routing_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.routing_header_ = routing_header;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.routing_header)
}

// optional .apollo.planning_internal.Debug debug = 8;
inline bool ADCTrajectory::_internal_has_debug() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.debug_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_debug() const {
  return _internal_has_debug();
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::_internal_debug() const {
  const ::apollo::planning_internal::Debug* p = _impl_.debug_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning_internal::Debug&>(
      ::apollo::planning_internal::_Debug_default_instance_);
}
inline const ::apollo::planning_internal::Debug& ADCTrajectory::debug() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.debug)
  return _internal_debug();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_debug(
    ::apollo::planning_internal::Debug* debug) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  _impl_.debug_ = debug;
  if (debug) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.debug)
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::release_debug() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning_internal::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.debug)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning_internal::Debug* temp = _impl_.debug_;
  _impl_.debug_ = nullptr;
  return temp;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::_internal_mutable_debug() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.debug_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning_internal::Debug>(GetArenaForAllocation());
    _impl_.debug_ = p;
  }
  return _impl_.debug_;
}
inline ::apollo::planning_internal::Debug* ADCTrajectory::mutable_debug() {
  ::apollo::planning_internal::Debug* _msg = _internal_mutable_debug();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.debug)
  return _msg;
}
inline void ADCTrajectory::set_allocated_debug(::apollo::planning_internal::Debug* debug) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debug_);
  }
  if (debug) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debug));
    if (message_arena != submessage_arena) {
      debug = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.debug)
}

// repeated .apollo.planning.ADCPathPoint adc_path_point = 7 [deprecated = true];
inline int ADCTrajectory::_internal_adc_path_point_size() const {
  return _impl_.adc_path_point_.size();
}
inline int ADCTrajectory::adc_path_point_size() const {
  return _internal_adc_path_point_size();
}
inline void ADCTrajectory::clear_adc_path_point() {
  _impl_.adc_path_point_.Clear();
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::mutable_adc_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_path_point)
  return _impl_.adc_path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCPathPoint >*
ADCTrajectory::mutable_adc_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_path_point)
  return &_impl_.adc_path_point_;
}
inline const ::apollo::planning::ADCPathPoint& ADCTrajectory::_internal_adc_path_point(int index) const {
  return _impl_.adc_path_point_.Get(index);
}
inline const ::apollo::planning::ADCPathPoint& ADCTrajectory::adc_path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_path_point)
  return _internal_adc_path_point(index);
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::_internal_add_adc_path_point() {
  return _impl_.adc_path_point_.Add();
}
inline ::apollo::planning::ADCPathPoint* ADCTrajectory::add_adc_path_point() {
  ::apollo::planning::ADCPathPoint* _add = _internal_add_adc_path_point();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_path_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCPathPoint >&
ADCTrajectory::adc_path_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_path_point)
  return _impl_.adc_path_point_;
}

// repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 4 [deprecated = true];
inline int ADCTrajectory::_internal_adc_trajectory_point_size() const {
  return _impl_.adc_trajectory_point_.size();
}
inline int ADCTrajectory::adc_trajectory_point_size() const {
  return _internal_adc_trajectory_point_size();
}
inline void ADCTrajectory::clear_adc_trajectory_point() {
  _impl_.adc_trajectory_point_.Clear();
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::mutable_adc_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return _impl_.adc_trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >*
ADCTrajectory::mutable_adc_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return &_impl_.adc_trajectory_point_;
}
inline const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::_internal_adc_trajectory_point(int index) const {
  return _impl_.adc_trajectory_point_.Get(index);
}
inline const ::apollo::planning::ADCTrajectoryPoint& ADCTrajectory::adc_trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return _internal_adc_trajectory_point(index);
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::_internal_add_adc_trajectory_point() {
  return _impl_.adc_trajectory_point_.Add();
}
inline ::apollo::planning::ADCTrajectoryPoint* ADCTrajectory::add_adc_trajectory_point() {
  ::apollo::planning::ADCTrajectoryPoint* _add = _internal_add_adc_trajectory_point();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ADCTrajectoryPoint >&
ADCTrajectory::adc_trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.adc_trajectory_point)
  return _impl_.adc_trajectory_point_;
}

// optional .apollo.common.VehicleSignal signal = 11 [deprecated = true];
inline bool ADCTrajectory::_internal_has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_signal() const {
  return _internal_has_signal();
}
inline const ::apollo::common::VehicleSignal& ADCTrajectory::_internal_signal() const {
  const ::apollo::common::VehicleSignal* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::VehicleSignal&>(
      ::apollo::common::_VehicleSignal_default_instance_);
}
inline const ::apollo::common::VehicleSignal& ADCTrajectory::signal() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.signal)
  return _internal_signal();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_signal(
    ::apollo::common::VehicleSignal* signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = signal;
  if (signal) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.signal)
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::release_signal() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::VehicleSignal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.signal)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::common::VehicleSignal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::_internal_mutable_signal() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::VehicleSignal>(GetArenaForAllocation());
    _impl_.signal_ = p;
  }
  return _impl_.signal_;
}
inline ::apollo::common::VehicleSignal* ADCTrajectory::mutable_signal() {
  ::apollo::common::VehicleSignal* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.signal)
  return _msg;
}
inline void ADCTrajectory::set_allocated_signal(::apollo::common::VehicleSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal));
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.signal)
}

// optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline bool ADCTrajectory::_internal_has_right_of_way_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ADCTrajectory::has_right_of_way_status() const {
  return _internal_has_right_of_way_status();
}
inline void ADCTrajectory::clear_right_of_way_status() {
  _impl_.right_of_way_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::_internal_right_of_way_status() const {
  return static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(_impl_.right_of_way_status_);
}
inline ::apollo::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.right_of_way_status)
  return _internal_right_of_way_status();
}
inline void ADCTrajectory::_internal_set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  assert(::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.right_of_way_status_ = value;
}
inline void ADCTrajectory::set_right_of_way_status(::apollo::planning::ADCTrajectory_RightOfWayStatus value) {
  _internal_set_right_of_way_status(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ADCTrajectory.right_of_way_status)
}

// repeated .apollo.hdmap.Id lane_id = 18;
inline int ADCTrajectory::_internal_lane_id_size() const {
  return _impl_.lane_id_.size();
}
inline int ADCTrajectory::lane_id_size() const {
  return _internal_lane_id_size();
}
inline ::apollo::hdmap::Id* ADCTrajectory::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.lane_id)
  return _impl_.lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
ADCTrajectory::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ADCTrajectory.lane_id)
  return &_impl_.lane_id_;
}
inline const ::apollo::hdmap::Id& ADCTrajectory::_internal_lane_id(int index) const {
  return _impl_.lane_id_.Get(index);
}
inline const ::apollo::hdmap::Id& ADCTrajectory::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.lane_id)
  return _internal_lane_id(index);
}
inline ::apollo::hdmap::Id* ADCTrajectory::_internal_add_lane_id() {
  return _impl_.lane_id_.Add();
}
inline ::apollo::hdmap::Id* ADCTrajectory::add_lane_id() {
  ::apollo::hdmap::Id* _add = _internal_add_lane_id();
  // @@protoc_insertion_point(field_add:apollo.planning.ADCTrajectory.lane_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
ADCTrajectory::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ADCTrajectory.lane_id)
  return _impl_.lane_id_;
}

// optional .apollo.common.EngageAdvice engage_advice = 19;
inline bool ADCTrajectory::_internal_has_engage_advice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.engage_advice_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_engage_advice() const {
  return _internal_has_engage_advice();
}
inline const ::apollo::common::EngageAdvice& ADCTrajectory::_internal_engage_advice() const {
  const ::apollo::common::EngageAdvice* p = _impl_.engage_advice_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::EngageAdvice&>(
      ::apollo::common::_EngageAdvice_default_instance_);
}
inline const ::apollo::common::EngageAdvice& ADCTrajectory::engage_advice() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.engage_advice)
  return _internal_engage_advice();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_engage_advice(
    ::apollo::common::EngageAdvice* engage_advice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.engage_advice_);
  }
  _impl_.engage_advice_ = engage_advice;
  if (engage_advice) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.engage_advice)
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::release_engage_advice() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::unsafe_arena_release_engage_advice() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.engage_advice)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::common::EngageAdvice* temp = _impl_.engage_advice_;
  _impl_.engage_advice_ = nullptr;
  return temp;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::_internal_mutable_engage_advice() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.engage_advice_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::EngageAdvice>(GetArenaForAllocation());
    _impl_.engage_advice_ = p;
  }
  return _impl_.engage_advice_;
}
inline ::apollo::common::EngageAdvice* ADCTrajectory::mutable_engage_advice() {
  ::apollo::common::EngageAdvice* _msg = _internal_mutable_engage_advice();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.engage_advice)
  return _msg;
}
inline void ADCTrajectory::set_allocated_engage_advice(::apollo::common::EngageAdvice* engage_advice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.engage_advice_);
  }
  if (engage_advice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(engage_advice));
    if (message_arena != submessage_arena) {
      engage_advice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, engage_advice, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.engage_advice_ = engage_advice;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.engage_advice)
}

// optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
inline bool ADCTrajectory::_internal_has_critical_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.critical_region_ != nullptr);
  return value;
}
inline bool ADCTrajectory::has_critical_region() const {
  return _internal_has_critical_region();
}
inline void ADCTrajectory::clear_critical_region() {
  if (_impl_.critical_region_ != nullptr) _impl_.critical_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::_internal_critical_region() const {
  const ::apollo::planning::ADCTrajectory_CriticalRegion* p = _impl_.critical_region_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::ADCTrajectory_CriticalRegion&>(
      ::apollo::planning::_ADCTrajectory_CriticalRegion_default_instance_);
}
inline const ::apollo::planning::ADCTrajectory_CriticalRegion& ADCTrajectory::critical_region() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ADCTrajectory.critical_region)
  return _internal_critical_region();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_critical_region(
    ::apollo::planning::ADCTrajectory_CriticalRegion* critical_region) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.critical_region_);
  }
  _impl_.critical_region_ = critical_region;
  if (critical_region) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ADCTrajectory.critical_region)
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::release_critical_region() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::planning::ADCTrajectory_CriticalRegion* temp = _impl_.critical_region_;
  _impl_.critical_region_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::unsafe_arena_release_critical_region() {
  // @@protoc_insertion_point(field_release:apollo.planning.ADCTrajectory.critical_region)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::apollo::planning::ADCTrajectory_CriticalRegion* temp = _impl_.critical_region_;
  _impl_.critical_region_ = nullptr;
  return temp;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::_internal_mutable_critical_region() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.critical_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::ADCTrajectory_CriticalRegion>(GetArenaForAllocation());
    _impl_.critical_region_ = p;
  }
  return _impl_.critical_region_;
}
inline ::apollo::planning::ADCTrajectory_CriticalRegion* ADCTrajectory::mutable_critical_region() {
  ::apollo::planning::ADCTrajectory_CriticalRegion* _msg = _internal_mutable_critical_region();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ADCTrajectory.critical_region)
  return _msg;
}
inline void ADCTrajectory::set_allocated_critical_region(::apollo::planning::ADCTrajectory_CriticalRegion* critical_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.critical_region_;
  }
  if (critical_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(critical_region);
    if (message_arena != submessage_arena) {
      critical_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, critical_region, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.critical_region_ = critical_region;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ADCTrajectory.critical_region)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::ADCSignals_SignalType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCSignals_SignalType>() {
  return ::apollo::planning::ADCSignals_SignalType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ADCTrajectory_RightOfWayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::apollo::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_2eproto
