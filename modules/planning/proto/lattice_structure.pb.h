// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_structure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
namespace apollo {
namespace planning {
class PathTimeObstacle;
struct PathTimeObstacleDefaultTypeInternal;
extern PathTimeObstacleDefaultTypeInternal _PathTimeObstacle_default_instance_;
class PathTimePoint;
struct PathTimePointDefaultTypeInternal;
extern PathTimePointDefaultTypeInternal _PathTimePoint_default_instance_;
class PlanningTarget;
struct PlanningTargetDefaultTypeInternal;
extern PlanningTargetDefaultTypeInternal _PlanningTarget_default_instance_;
class SamplePoint;
struct SamplePointDefaultTypeInternal;
extern SamplePointDefaultTypeInternal _SamplePoint_default_instance_;
class StopPoint;
struct StopPointDefaultTypeInternal;
extern StopPointDefaultTypeInternal _StopPoint_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::PathTimeObstacle* Arena::CreateMaybeMessage<::apollo::planning::PathTimeObstacle>(Arena*);
template<> ::apollo::planning::PathTimePoint* Arena::CreateMaybeMessage<::apollo::planning::PathTimePoint>(Arena*);
template<> ::apollo::planning::PlanningTarget* Arena::CreateMaybeMessage<::apollo::planning::PlanningTarget>(Arena*);
template<> ::apollo::planning::SamplePoint* Arena::CreateMaybeMessage<::apollo::planning::SamplePoint>(Arena*);
template<> ::apollo::planning::StopPoint* Arena::CreateMaybeMessage<::apollo::planning::StopPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum StopPoint_Type : int {
  StopPoint_Type_HARD = 0,
  StopPoint_Type_SOFT = 1
};
bool StopPoint_Type_IsValid(int value);
constexpr StopPoint_Type StopPoint_Type_Type_MIN = StopPoint_Type_HARD;
constexpr StopPoint_Type StopPoint_Type_Type_MAX = StopPoint_Type_SOFT;
constexpr int StopPoint_Type_Type_ARRAYSIZE = StopPoint_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopPoint_Type_descriptor();
template<typename T>
inline const std::string& StopPoint_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StopPoint_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StopPoint_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StopPoint_Type_descriptor(), enum_t_value);
}
inline bool StopPoint_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StopPoint_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StopPoint_Type>(
    StopPoint_Type_descriptor(), name, value);
}
// ===================================================================

class PathTimePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathTimePoint) */ {
 public:
  inline PathTimePoint() : PathTimePoint(nullptr) {}
  ~PathTimePoint() override;
  explicit PROTOBUF_CONSTEXPR PathTimePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathTimePoint(const PathTimePoint& from);
  PathTimePoint(PathTimePoint&& from) noexcept
    : PathTimePoint() {
    *this = ::std::move(from);
  }

  inline PathTimePoint& operator=(const PathTimePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathTimePoint& operator=(PathTimePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathTimePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathTimePoint* internal_default_instance() {
    return reinterpret_cast<const PathTimePoint*>(
               &_PathTimePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathTimePoint& a, PathTimePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PathTimePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathTimePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathTimePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathTimePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathTimePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathTimePoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathTimePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathTimePoint";
  }
  protected:
  explicit PathTimePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleIdFieldNumber = 4,
    kTFieldNumber = 1,
    kSFieldNumber = 2,
  };
  // optional string obstacle_id = 4;
  bool has_obstacle_id() const;
  private:
  bool _internal_has_obstacle_id() const;
  public:
  void clear_obstacle_id();
  const std::string& obstacle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obstacle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obstacle_id();
  PROTOBUF_NODISCARD std::string* release_obstacle_id();
  void set_allocated_obstacle_id(std::string* obstacle_id);
  private:
  const std::string& _internal_obstacle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obstacle_id(const std::string& value);
  std::string* _internal_mutable_obstacle_id();
  public:

  // optional double t = 1;
  bool has_t() const;
  private:
  bool _internal_has_t() const;
  public:
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // optional double s = 2;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathTimePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obstacle_id_;
    double t_;
    double s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class SamplePoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SamplePoint) */ {
 public:
  inline SamplePoint() : SamplePoint(nullptr) {}
  ~SamplePoint() override;
  explicit PROTOBUF_CONSTEXPR SamplePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SamplePoint(const SamplePoint& from);
  SamplePoint(SamplePoint&& from) noexcept
    : SamplePoint() {
    *this = ::std::move(from);
  }

  inline SamplePoint& operator=(const SamplePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplePoint& operator=(SamplePoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SamplePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SamplePoint* internal_default_instance() {
    return reinterpret_cast<const SamplePoint*>(
               &_SamplePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SamplePoint& a, SamplePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplePoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SamplePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SamplePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SamplePoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SamplePoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SamplePoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplePoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SamplePoint";
  }
  protected:
  explicit SamplePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathTimePointFieldNumber = 1,
    kRefVFieldNumber = 2,
  };
  // optional .apollo.planning.PathTimePoint path_time_point = 1;
  bool has_path_time_point() const;
  private:
  bool _internal_has_path_time_point() const;
  public:
  void clear_path_time_point();
  const ::apollo::planning::PathTimePoint& path_time_point() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathTimePoint* release_path_time_point();
  ::apollo::planning::PathTimePoint* mutable_path_time_point();
  void set_allocated_path_time_point(::apollo::planning::PathTimePoint* path_time_point);
  private:
  const ::apollo::planning::PathTimePoint& _internal_path_time_point() const;
  ::apollo::planning::PathTimePoint* _internal_mutable_path_time_point();
  public:
  void unsafe_arena_set_allocated_path_time_point(
      ::apollo::planning::PathTimePoint* path_time_point);
  ::apollo::planning::PathTimePoint* unsafe_arena_release_path_time_point();

  // optional double ref_v = 2;
  bool has_ref_v() const;
  private:
  bool _internal_has_ref_v() const;
  public:
  void clear_ref_v();
  double ref_v() const;
  void set_ref_v(double value);
  private:
  double _internal_ref_v() const;
  void _internal_set_ref_v(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SamplePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::PathTimePoint* path_time_point_;
    double ref_v_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class PathTimeObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathTimeObstacle) */ {
 public:
  inline PathTimeObstacle() : PathTimeObstacle(nullptr) {}
  ~PathTimeObstacle() override;
  explicit PROTOBUF_CONSTEXPR PathTimeObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathTimeObstacle(const PathTimeObstacle& from);
  PathTimeObstacle(PathTimeObstacle&& from) noexcept
    : PathTimeObstacle() {
    *this = ::std::move(from);
  }

  inline PathTimeObstacle& operator=(const PathTimeObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathTimeObstacle& operator=(PathTimeObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathTimeObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathTimeObstacle* internal_default_instance() {
    return reinterpret_cast<const PathTimeObstacle*>(
               &_PathTimeObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PathTimeObstacle& a, PathTimeObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(PathTimeObstacle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathTimeObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathTimeObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathTimeObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathTimeObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathTimeObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathTimeObstacle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathTimeObstacle";
  }
  protected:
  explicit PathTimeObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstacleIdFieldNumber = 1,
    kBottomLeftFieldNumber = 2,
    kUpperLeftFieldNumber = 3,
    kUpperRightFieldNumber = 4,
    kBottomRightFieldNumber = 5,
    kTimeLowerFieldNumber = 6,
    kTimeUpperFieldNumber = 7,
    kPathLowerFieldNumber = 8,
    kPathUpperFieldNumber = 9,
  };
  // optional string obstacle_id = 1;
  bool has_obstacle_id() const;
  private:
  bool _internal_has_obstacle_id() const;
  public:
  void clear_obstacle_id();
  const std::string& obstacle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obstacle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obstacle_id();
  PROTOBUF_NODISCARD std::string* release_obstacle_id();
  void set_allocated_obstacle_id(std::string* obstacle_id);
  private:
  const std::string& _internal_obstacle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obstacle_id(const std::string& value);
  std::string* _internal_mutable_obstacle_id();
  public:

  // optional .apollo.planning.PathTimePoint bottom_left = 2;
  bool has_bottom_left() const;
  private:
  bool _internal_has_bottom_left() const;
  public:
  void clear_bottom_left();
  const ::apollo::planning::PathTimePoint& bottom_left() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathTimePoint* release_bottom_left();
  ::apollo::planning::PathTimePoint* mutable_bottom_left();
  void set_allocated_bottom_left(::apollo::planning::PathTimePoint* bottom_left);
  private:
  const ::apollo::planning::PathTimePoint& _internal_bottom_left() const;
  ::apollo::planning::PathTimePoint* _internal_mutable_bottom_left();
  public:
  void unsafe_arena_set_allocated_bottom_left(
      ::apollo::planning::PathTimePoint* bottom_left);
  ::apollo::planning::PathTimePoint* unsafe_arena_release_bottom_left();

  // optional .apollo.planning.PathTimePoint upper_left = 3;
  bool has_upper_left() const;
  private:
  bool _internal_has_upper_left() const;
  public:
  void clear_upper_left();
  const ::apollo::planning::PathTimePoint& upper_left() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathTimePoint* release_upper_left();
  ::apollo::planning::PathTimePoint* mutable_upper_left();
  void set_allocated_upper_left(::apollo::planning::PathTimePoint* upper_left);
  private:
  const ::apollo::planning::PathTimePoint& _internal_upper_left() const;
  ::apollo::planning::PathTimePoint* _internal_mutable_upper_left();
  public:
  void unsafe_arena_set_allocated_upper_left(
      ::apollo::planning::PathTimePoint* upper_left);
  ::apollo::planning::PathTimePoint* unsafe_arena_release_upper_left();

  // optional .apollo.planning.PathTimePoint upper_right = 4;
  bool has_upper_right() const;
  private:
  bool _internal_has_upper_right() const;
  public:
  void clear_upper_right();
  const ::apollo::planning::PathTimePoint& upper_right() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathTimePoint* release_upper_right();
  ::apollo::planning::PathTimePoint* mutable_upper_right();
  void set_allocated_upper_right(::apollo::planning::PathTimePoint* upper_right);
  private:
  const ::apollo::planning::PathTimePoint& _internal_upper_right() const;
  ::apollo::planning::PathTimePoint* _internal_mutable_upper_right();
  public:
  void unsafe_arena_set_allocated_upper_right(
      ::apollo::planning::PathTimePoint* upper_right);
  ::apollo::planning::PathTimePoint* unsafe_arena_release_upper_right();

  // optional .apollo.planning.PathTimePoint bottom_right = 5;
  bool has_bottom_right() const;
  private:
  bool _internal_has_bottom_right() const;
  public:
  void clear_bottom_right();
  const ::apollo::planning::PathTimePoint& bottom_right() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathTimePoint* release_bottom_right();
  ::apollo::planning::PathTimePoint* mutable_bottom_right();
  void set_allocated_bottom_right(::apollo::planning::PathTimePoint* bottom_right);
  private:
  const ::apollo::planning::PathTimePoint& _internal_bottom_right() const;
  ::apollo::planning::PathTimePoint* _internal_mutable_bottom_right();
  public:
  void unsafe_arena_set_allocated_bottom_right(
      ::apollo::planning::PathTimePoint* bottom_right);
  ::apollo::planning::PathTimePoint* unsafe_arena_release_bottom_right();

  // optional double time_lower = 6;
  bool has_time_lower() const;
  private:
  bool _internal_has_time_lower() const;
  public:
  void clear_time_lower();
  double time_lower() const;
  void set_time_lower(double value);
  private:
  double _internal_time_lower() const;
  void _internal_set_time_lower(double value);
  public:

  // optional double time_upper = 7;
  bool has_time_upper() const;
  private:
  bool _internal_has_time_upper() const;
  public:
  void clear_time_upper();
  double time_upper() const;
  void set_time_upper(double value);
  private:
  double _internal_time_upper() const;
  void _internal_set_time_upper(double value);
  public:

  // optional double path_lower = 8;
  bool has_path_lower() const;
  private:
  bool _internal_has_path_lower() const;
  public:
  void clear_path_lower();
  double path_lower() const;
  void set_path_lower(double value);
  private:
  double _internal_path_lower() const;
  void _internal_set_path_lower(double value);
  public:

  // optional double path_upper = 9;
  bool has_path_upper() const;
  private:
  bool _internal_has_path_upper() const;
  public:
  void clear_path_upper();
  double path_upper() const;
  void set_path_upper(double value);
  private:
  double _internal_path_upper() const;
  void _internal_set_path_upper(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathTimeObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obstacle_id_;
    ::apollo::planning::PathTimePoint* bottom_left_;
    ::apollo::planning::PathTimePoint* upper_left_;
    ::apollo::planning::PathTimePoint* upper_right_;
    ::apollo::planning::PathTimePoint* bottom_right_;
    double time_lower_;
    double time_upper_;
    double path_lower_;
    double path_upper_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class StopPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StopPoint) */ {
 public:
  inline StopPoint() : StopPoint(nullptr) {}
  ~StopPoint() override;
  explicit PROTOBUF_CONSTEXPR StopPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopPoint(const StopPoint& from);
  StopPoint(StopPoint&& from) noexcept
    : StopPoint() {
    *this = ::std::move(from);
  }

  inline StopPoint& operator=(const StopPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPoint& operator=(StopPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopPoint* internal_default_instance() {
    return reinterpret_cast<const StopPoint*>(
               &_StopPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopPoint& a, StopPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.StopPoint";
  }
  protected:
  explicit StopPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StopPoint_Type Type;
  static constexpr Type HARD =
    StopPoint_Type_HARD;
  static constexpr Type SOFT =
    StopPoint_Type_SOFT;
  static inline bool Type_IsValid(int value) {
    return StopPoint_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    StopPoint_Type_Type_MIN;
  static constexpr Type Type_MAX =
    StopPoint_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    StopPoint_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return StopPoint_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return StopPoint_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return StopPoint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // required double s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::planning::StopPoint_Type type() const;
  void set_type(::apollo::planning::StopPoint_Type value);
  private:
  ::apollo::planning::StopPoint_Type _internal_type() const;
  void _internal_set_type(::apollo::planning::StopPoint_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.StopPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double s_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
};
// -------------------------------------------------------------------

class PlanningTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningTarget) */ {
 public:
  inline PlanningTarget() : PlanningTarget(nullptr) {}
  ~PlanningTarget() override;
  explicit PROTOBUF_CONSTEXPR PlanningTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningTarget(const PlanningTarget& from);
  PlanningTarget(PlanningTarget&& from) noexcept
    : PlanningTarget() {
    *this = ::std::move(from);
  }

  inline PlanningTarget& operator=(const PlanningTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningTarget& operator=(PlanningTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanningTarget* internal_default_instance() {
    return reinterpret_cast<const PlanningTarget*>(
               &_PlanningTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlanningTarget& a, PlanningTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningTarget";
  }
  protected:
  explicit PlanningTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopPointFieldNumber = 1,
    kCruiseSpeedFieldNumber = 2,
  };
  // optional .apollo.planning.StopPoint stop_point = 1;
  bool has_stop_point() const;
  private:
  bool _internal_has_stop_point() const;
  public:
  void clear_stop_point();
  const ::apollo::planning::StopPoint& stop_point() const;
  PROTOBUF_NODISCARD ::apollo::planning::StopPoint* release_stop_point();
  ::apollo::planning::StopPoint* mutable_stop_point();
  void set_allocated_stop_point(::apollo::planning::StopPoint* stop_point);
  private:
  const ::apollo::planning::StopPoint& _internal_stop_point() const;
  ::apollo::planning::StopPoint* _internal_mutable_stop_point();
  public:
  void unsafe_arena_set_allocated_stop_point(
      ::apollo::planning::StopPoint* stop_point);
  ::apollo::planning::StopPoint* unsafe_arena_release_stop_point();

  // optional double cruise_speed = 2;
  bool has_cruise_speed() const;
  private:
  bool _internal_has_cruise_speed() const;
  public:
  void clear_cruise_speed();
  double cruise_speed() const;
  void set_cruise_speed(double value);
  private:
  double _internal_cruise_speed() const;
  void _internal_set_cruise_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::StopPoint* stop_point_;
    double cruise_speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathTimePoint

// optional double t = 1;
inline bool PathTimePoint::_internal_has_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PathTimePoint::has_t() const {
  return _internal_has_t();
}
inline void PathTimePoint::clear_t() {
  _impl_.t_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PathTimePoint::_internal_t() const {
  return _impl_.t_;
}
inline double PathTimePoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.t)
  return _internal_t();
}
inline void PathTimePoint::_internal_set_t(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.t_ = value;
}
inline void PathTimePoint::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.t)
}

// optional double s = 2;
inline bool PathTimePoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PathTimePoint::has_s() const {
  return _internal_has_s();
}
inline void PathTimePoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PathTimePoint::_internal_s() const {
  return _impl_.s_;
}
inline double PathTimePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.s)
  return _internal_s();
}
inline void PathTimePoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.s_ = value;
}
inline void PathTimePoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.s)
}

// optional string obstacle_id = 4;
inline bool PathTimePoint::_internal_has_obstacle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathTimePoint::has_obstacle_id() const {
  return _internal_has_obstacle_id();
}
inline void PathTimePoint::clear_obstacle_id() {
  _impl_.obstacle_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PathTimePoint::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimePoint.obstacle_id)
  return _internal_obstacle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathTimePoint::set_obstacle_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.obstacle_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimePoint.obstacle_id)
}
inline std::string* PathTimePoint::mutable_obstacle_id() {
  std::string* _s = _internal_mutable_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimePoint.obstacle_id)
  return _s;
}
inline const std::string& PathTimePoint::_internal_obstacle_id() const {
  return _impl_.obstacle_id_.Get();
}
inline void PathTimePoint::_internal_set_obstacle_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.obstacle_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PathTimePoint::_internal_mutable_obstacle_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.obstacle_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PathTimePoint::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimePoint.obstacle_id)
  if (!_internal_has_obstacle_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.obstacle_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obstacle_id_.IsDefault()) {
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PathTimePoint::set_allocated_obstacle_id(std::string* obstacle_id) {
  if (obstacle_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.obstacle_id_.SetAllocated(obstacle_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obstacle_id_.IsDefault()) {
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimePoint.obstacle_id)
}

// -------------------------------------------------------------------

// SamplePoint

// optional .apollo.planning.PathTimePoint path_time_point = 1;
inline bool SamplePoint::_internal_has_path_time_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_time_point_ != nullptr);
  return value;
}
inline bool SamplePoint::has_path_time_point() const {
  return _internal_has_path_time_point();
}
inline void SamplePoint::clear_path_time_point() {
  if (_impl_.path_time_point_ != nullptr) _impl_.path_time_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PathTimePoint& SamplePoint::_internal_path_time_point() const {
  const ::apollo::planning::PathTimePoint* p = _impl_.path_time_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PathTimePoint&>(
      ::apollo::planning::_PathTimePoint_default_instance_);
}
inline const ::apollo::planning::PathTimePoint& SamplePoint::path_time_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.path_time_point)
  return _internal_path_time_point();
}
inline void SamplePoint::unsafe_arena_set_allocated_path_time_point(
    ::apollo::planning::PathTimePoint* path_time_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_time_point_);
  }
  _impl_.path_time_point_ = path_time_point;
  if (path_time_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.SamplePoint.path_time_point)
}
inline ::apollo::planning::PathTimePoint* SamplePoint::release_path_time_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PathTimePoint* temp = _impl_.path_time_point_;
  _impl_.path_time_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PathTimePoint* SamplePoint::unsafe_arena_release_path_time_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.SamplePoint.path_time_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PathTimePoint* temp = _impl_.path_time_point_;
  _impl_.path_time_point_ = nullptr;
  return temp;
}
inline ::apollo::planning::PathTimePoint* SamplePoint::_internal_mutable_path_time_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.path_time_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PathTimePoint>(GetArenaForAllocation());
    _impl_.path_time_point_ = p;
  }
  return _impl_.path_time_point_;
}
inline ::apollo::planning::PathTimePoint* SamplePoint::mutable_path_time_point() {
  ::apollo::planning::PathTimePoint* _msg = _internal_mutable_path_time_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.SamplePoint.path_time_point)
  return _msg;
}
inline void SamplePoint::set_allocated_path_time_point(::apollo::planning::PathTimePoint* path_time_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_time_point_;
  }
  if (path_time_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path_time_point);
    if (message_arena != submessage_arena) {
      path_time_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_time_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_time_point_ = path_time_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SamplePoint.path_time_point)
}

// optional double ref_v = 2;
inline bool SamplePoint::_internal_has_ref_v() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SamplePoint::has_ref_v() const {
  return _internal_has_ref_v();
}
inline void SamplePoint::clear_ref_v() {
  _impl_.ref_v_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SamplePoint::_internal_ref_v() const {
  return _impl_.ref_v_;
}
inline double SamplePoint::ref_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SamplePoint.ref_v)
  return _internal_ref_v();
}
inline void SamplePoint::_internal_set_ref_v(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ref_v_ = value;
}
inline void SamplePoint::set_ref_v(double value) {
  _internal_set_ref_v(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SamplePoint.ref_v)
}

// -------------------------------------------------------------------

// PathTimeObstacle

// optional string obstacle_id = 1;
inline bool PathTimeObstacle::_internal_has_obstacle_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathTimeObstacle::has_obstacle_id() const {
  return _internal_has_obstacle_id();
}
inline void PathTimeObstacle::clear_obstacle_id() {
  _impl_.obstacle_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PathTimeObstacle::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.obstacle_id)
  return _internal_obstacle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathTimeObstacle::set_obstacle_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.obstacle_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.obstacle_id)
}
inline std::string* PathTimeObstacle::mutable_obstacle_id() {
  std::string* _s = _internal_mutable_obstacle_id();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.obstacle_id)
  return _s;
}
inline const std::string& PathTimeObstacle::_internal_obstacle_id() const {
  return _impl_.obstacle_id_.Get();
}
inline void PathTimeObstacle::_internal_set_obstacle_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.obstacle_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PathTimeObstacle::_internal_mutable_obstacle_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.obstacle_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PathTimeObstacle::release_obstacle_id() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.obstacle_id)
  if (!_internal_has_obstacle_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.obstacle_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obstacle_id_.IsDefault()) {
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PathTimeObstacle::set_allocated_obstacle_id(std::string* obstacle_id) {
  if (obstacle_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.obstacle_id_.SetAllocated(obstacle_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.obstacle_id_.IsDefault()) {
    _impl_.obstacle_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.obstacle_id)
}

// optional .apollo.planning.PathTimePoint bottom_left = 2;
inline bool PathTimeObstacle::_internal_has_bottom_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottom_left_ != nullptr);
  return value;
}
inline bool PathTimeObstacle::has_bottom_left() const {
  return _internal_has_bottom_left();
}
inline void PathTimeObstacle::clear_bottom_left() {
  if (_impl_.bottom_left_ != nullptr) _impl_.bottom_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::_internal_bottom_left() const {
  const ::apollo::planning::PathTimePoint* p = _impl_.bottom_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PathTimePoint&>(
      ::apollo::planning::_PathTimePoint_default_instance_);
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_left)
  return _internal_bottom_left();
}
inline void PathTimeObstacle::unsafe_arena_set_allocated_bottom_left(
    ::apollo::planning::PathTimePoint* bottom_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottom_left_);
  }
  _impl_.bottom_left_ = bottom_left;
  if (bottom_left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PathTimeObstacle.bottom_left)
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::PathTimePoint* temp = _impl_.bottom_left_;
  _impl_.bottom_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::unsafe_arena_release_bottom_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::PathTimePoint* temp = _impl_.bottom_left_;
  _impl_.bottom_left_ = nullptr;
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::_internal_mutable_bottom_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bottom_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PathTimePoint>(GetArenaForAllocation());
    _impl_.bottom_left_ = p;
  }
  return _impl_.bottom_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_left() {
  ::apollo::planning::PathTimePoint* _msg = _internal_mutable_bottom_left();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_left)
  return _msg;
}
inline void PathTimeObstacle::set_allocated_bottom_left(::apollo::planning::PathTimePoint* bottom_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottom_left_;
  }
  if (bottom_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_left);
    if (message_arena != submessage_arena) {
      bottom_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bottom_left_ = bottom_left;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_left)
}

// optional .apollo.planning.PathTimePoint upper_left = 3;
inline bool PathTimeObstacle::_internal_has_upper_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_left_ != nullptr);
  return value;
}
inline bool PathTimeObstacle::has_upper_left() const {
  return _internal_has_upper_left();
}
inline void PathTimeObstacle::clear_upper_left() {
  if (_impl_.upper_left_ != nullptr) _impl_.upper_left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::_internal_upper_left() const {
  const ::apollo::planning::PathTimePoint* p = _impl_.upper_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PathTimePoint&>(
      ::apollo::planning::_PathTimePoint_default_instance_);
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_left() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_left)
  return _internal_upper_left();
}
inline void PathTimeObstacle::unsafe_arena_set_allocated_upper_left(
    ::apollo::planning::PathTimePoint* upper_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_left_);
  }
  _impl_.upper_left_ = upper_left;
  if (upper_left) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PathTimeObstacle.upper_left)
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_left() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::PathTimePoint* temp = _impl_.upper_left_;
  _impl_.upper_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::unsafe_arena_release_upper_left() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_left)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::PathTimePoint* temp = _impl_.upper_left_;
  _impl_.upper_left_ = nullptr;
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::_internal_mutable_upper_left() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.upper_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PathTimePoint>(GetArenaForAllocation());
    _impl_.upper_left_ = p;
  }
  return _impl_.upper_left_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_left() {
  ::apollo::planning::PathTimePoint* _msg = _internal_mutable_upper_left();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_left)
  return _msg;
}
inline void PathTimeObstacle::set_allocated_upper_left(::apollo::planning::PathTimePoint* upper_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_left_;
  }
  if (upper_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_left);
    if (message_arena != submessage_arena) {
      upper_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.upper_left_ = upper_left;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_left)
}

// optional .apollo.planning.PathTimePoint upper_right = 4;
inline bool PathTimeObstacle::_internal_has_upper_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_right_ != nullptr);
  return value;
}
inline bool PathTimeObstacle::has_upper_right() const {
  return _internal_has_upper_right();
}
inline void PathTimeObstacle::clear_upper_right() {
  if (_impl_.upper_right_ != nullptr) _impl_.upper_right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::_internal_upper_right() const {
  const ::apollo::planning::PathTimePoint* p = _impl_.upper_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PathTimePoint&>(
      ::apollo::planning::_PathTimePoint_default_instance_);
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::upper_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.upper_right)
  return _internal_upper_right();
}
inline void PathTimeObstacle::unsafe_arena_set_allocated_upper_right(
    ::apollo::planning::PathTimePoint* upper_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_right_);
  }
  _impl_.upper_right_ = upper_right;
  if (upper_right) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PathTimeObstacle.upper_right)
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_upper_right() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::PathTimePoint* temp = _impl_.upper_right_;
  _impl_.upper_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::unsafe_arena_release_upper_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.upper_right)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::PathTimePoint* temp = _impl_.upper_right_;
  _impl_.upper_right_ = nullptr;
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::_internal_mutable_upper_right() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.upper_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PathTimePoint>(GetArenaForAllocation());
    _impl_.upper_right_ = p;
  }
  return _impl_.upper_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_upper_right() {
  ::apollo::planning::PathTimePoint* _msg = _internal_mutable_upper_right();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.upper_right)
  return _msg;
}
inline void PathTimeObstacle::set_allocated_upper_right(::apollo::planning::PathTimePoint* upper_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_right_;
  }
  if (upper_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_right);
    if (message_arena != submessage_arena) {
      upper_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.upper_right_ = upper_right;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.upper_right)
}

// optional .apollo.planning.PathTimePoint bottom_right = 5;
inline bool PathTimeObstacle::_internal_has_bottom_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottom_right_ != nullptr);
  return value;
}
inline bool PathTimeObstacle::has_bottom_right() const {
  return _internal_has_bottom_right();
}
inline void PathTimeObstacle::clear_bottom_right() {
  if (_impl_.bottom_right_ != nullptr) _impl_.bottom_right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::_internal_bottom_right() const {
  const ::apollo::planning::PathTimePoint* p = _impl_.bottom_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PathTimePoint&>(
      ::apollo::planning::_PathTimePoint_default_instance_);
}
inline const ::apollo::planning::PathTimePoint& PathTimeObstacle::bottom_right() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.bottom_right)
  return _internal_bottom_right();
}
inline void PathTimeObstacle::unsafe_arena_set_allocated_bottom_right(
    ::apollo::planning::PathTimePoint* bottom_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottom_right_);
  }
  _impl_.bottom_right_ = bottom_right;
  if (bottom_right) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PathTimeObstacle.bottom_right)
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::release_bottom_right() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::PathTimePoint* temp = _impl_.bottom_right_;
  _impl_.bottom_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::unsafe_arena_release_bottom_right() {
  // @@protoc_insertion_point(field_release:apollo.planning.PathTimeObstacle.bottom_right)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::PathTimePoint* temp = _impl_.bottom_right_;
  _impl_.bottom_right_ = nullptr;
  return temp;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::_internal_mutable_bottom_right() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.bottom_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PathTimePoint>(GetArenaForAllocation());
    _impl_.bottom_right_ = p;
  }
  return _impl_.bottom_right_;
}
inline ::apollo::planning::PathTimePoint* PathTimeObstacle::mutable_bottom_right() {
  ::apollo::planning::PathTimePoint* _msg = _internal_mutable_bottom_right();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PathTimeObstacle.bottom_right)
  return _msg;
}
inline void PathTimeObstacle::set_allocated_bottom_right(::apollo::planning::PathTimePoint* bottom_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bottom_right_;
  }
  if (bottom_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bottom_right);
    if (message_arena != submessage_arena) {
      bottom_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bottom_right_ = bottom_right;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PathTimeObstacle.bottom_right)
}

// optional double time_lower = 6;
inline bool PathTimeObstacle::_internal_has_time_lower() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PathTimeObstacle::has_time_lower() const {
  return _internal_has_time_lower();
}
inline void PathTimeObstacle::clear_time_lower() {
  _impl_.time_lower_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PathTimeObstacle::_internal_time_lower() const {
  return _impl_.time_lower_;
}
inline double PathTimeObstacle::time_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_lower)
  return _internal_time_lower();
}
inline void PathTimeObstacle::_internal_set_time_lower(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.time_lower_ = value;
}
inline void PathTimeObstacle::set_time_lower(double value) {
  _internal_set_time_lower(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_lower)
}

// optional double time_upper = 7;
inline bool PathTimeObstacle::_internal_has_time_upper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PathTimeObstacle::has_time_upper() const {
  return _internal_has_time_upper();
}
inline void PathTimeObstacle::clear_time_upper() {
  _impl_.time_upper_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PathTimeObstacle::_internal_time_upper() const {
  return _impl_.time_upper_;
}
inline double PathTimeObstacle::time_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.time_upper)
  return _internal_time_upper();
}
inline void PathTimeObstacle::_internal_set_time_upper(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.time_upper_ = value;
}
inline void PathTimeObstacle::set_time_upper(double value) {
  _internal_set_time_upper(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.time_upper)
}

// optional double path_lower = 8;
inline bool PathTimeObstacle::_internal_has_path_lower() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PathTimeObstacle::has_path_lower() const {
  return _internal_has_path_lower();
}
inline void PathTimeObstacle::clear_path_lower() {
  _impl_.path_lower_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PathTimeObstacle::_internal_path_lower() const {
  return _impl_.path_lower_;
}
inline double PathTimeObstacle::path_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_lower)
  return _internal_path_lower();
}
inline void PathTimeObstacle::_internal_set_path_lower(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.path_lower_ = value;
}
inline void PathTimeObstacle::set_path_lower(double value) {
  _internal_set_path_lower(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_lower)
}

// optional double path_upper = 9;
inline bool PathTimeObstacle::_internal_has_path_upper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PathTimeObstacle::has_path_upper() const {
  return _internal_has_path_upper();
}
inline void PathTimeObstacle::clear_path_upper() {
  _impl_.path_upper_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double PathTimeObstacle::_internal_path_upper() const {
  return _impl_.path_upper_;
}
inline double PathTimeObstacle::path_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathTimeObstacle.path_upper)
  return _internal_path_upper();
}
inline void PathTimeObstacle::_internal_set_path_upper(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.path_upper_ = value;
}
inline void PathTimeObstacle::set_path_upper(double value) {
  _internal_set_path_upper(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathTimeObstacle.path_upper)
}

// -------------------------------------------------------------------

// StopPoint

// required double s = 1;
inline bool StopPoint::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopPoint::has_s() const {
  return _internal_has_s();
}
inline void StopPoint::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double StopPoint::_internal_s() const {
  return _impl_.s_;
}
inline double StopPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.s)
  return _internal_s();
}
inline void StopPoint::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void StopPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.s)
}

// required .apollo.planning.StopPoint.Type type = 2 [default = HARD];
inline bool StopPoint::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StopPoint::has_type() const {
  return _internal_has_type();
}
inline void StopPoint::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning::StopPoint_Type StopPoint::_internal_type() const {
  return static_cast< ::apollo::planning::StopPoint_Type >(_impl_.type_);
}
inline ::apollo::planning::StopPoint_Type StopPoint::type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StopPoint.type)
  return _internal_type();
}
inline void StopPoint::_internal_set_type(::apollo::planning::StopPoint_Type value) {
  assert(::apollo::planning::StopPoint_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void StopPoint::set_type(::apollo::planning::StopPoint_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.StopPoint.type)
}

// -------------------------------------------------------------------

// PlanningTarget

// optional .apollo.planning.StopPoint stop_point = 1;
inline bool PlanningTarget::_internal_has_stop_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_point_ != nullptr);
  return value;
}
inline bool PlanningTarget::has_stop_point() const {
  return _internal_has_stop_point();
}
inline void PlanningTarget::clear_stop_point() {
  if (_impl_.stop_point_ != nullptr) _impl_.stop_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::StopPoint& PlanningTarget::_internal_stop_point() const {
  const ::apollo::planning::StopPoint* p = _impl_.stop_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::StopPoint&>(
      ::apollo::planning::_StopPoint_default_instance_);
}
inline const ::apollo::planning::StopPoint& PlanningTarget::stop_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.stop_point)
  return _internal_stop_point();
}
inline void PlanningTarget::unsafe_arena_set_allocated_stop_point(
    ::apollo::planning::StopPoint* stop_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_point_);
  }
  _impl_.stop_point_ = stop_point;
  if (stop_point) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningTarget.stop_point)
}
inline ::apollo::planning::StopPoint* PlanningTarget::release_stop_point() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StopPoint* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::StopPoint* PlanningTarget::unsafe_arena_release_stop_point() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningTarget.stop_point)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::StopPoint* temp = _impl_.stop_point_;
  _impl_.stop_point_ = nullptr;
  return temp;
}
inline ::apollo::planning::StopPoint* PlanningTarget::_internal_mutable_stop_point() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stop_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::StopPoint>(GetArenaForAllocation());
    _impl_.stop_point_ = p;
  }
  return _impl_.stop_point_;
}
inline ::apollo::planning::StopPoint* PlanningTarget::mutable_stop_point() {
  ::apollo::planning::StopPoint* _msg = _internal_mutable_stop_point();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningTarget.stop_point)
  return _msg;
}
inline void PlanningTarget::set_allocated_stop_point(::apollo::planning::StopPoint* stop_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_point_;
  }
  if (stop_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_point);
    if (message_arena != submessage_arena) {
      stop_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stop_point_ = stop_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningTarget.stop_point)
}

// optional double cruise_speed = 2;
inline bool PlanningTarget::_internal_has_cruise_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlanningTarget::has_cruise_speed() const {
  return _internal_has_cruise_speed();
}
inline void PlanningTarget::clear_cruise_speed() {
  _impl_.cruise_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PlanningTarget::_internal_cruise_speed() const {
  return _impl_.cruise_speed_;
}
inline double PlanningTarget::cruise_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningTarget.cruise_speed)
  return _internal_cruise_speed();
}
inline void PlanningTarget::_internal_set_cruise_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cruise_speed_ = value;
}
inline void PlanningTarget::set_cruise_speed(double value) {
  _internal_set_cruise_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningTarget.cruise_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::StopPoint_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::StopPoint_Type>() {
  return ::apollo::planning::StopPoint_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fstructure_2eproto
