// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_sampling_config.proto

#include "modules/planning/proto/lattice_sampling_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR LonCondition::LonCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.ds_)*/0
  , /*decltype(_impl_.dds_)*/0} {}
struct LonConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LonConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LonConditionDefaultTypeInternal() {}
  union {
    LonCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LonConditionDefaultTypeInternal _LonCondition_default_instance_;
PROTOBUF_CONSTEXPR LatCondition::LatCondition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.dl_)*/0
  , /*decltype(_impl_.ddl_)*/0} {}
struct LatConditionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatConditionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatConditionDefaultTypeInternal() {}
  union {
    LatCondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatConditionDefaultTypeInternal _LatCondition_default_instance_;
PROTOBUF_CONSTEXPR TStrategy::TStrategy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.t_markers_)*/{}
  , /*decltype(_impl_.strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.t_step_)*/0.5} {}
struct TStrategyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TStrategyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TStrategyDefaultTypeInternal() {}
  union {
    TStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TStrategyDefaultTypeInternal _TStrategy_default_instance_;
PROTOBUF_CONSTEXPR SStrategy::SStrategy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_markers_)*/{}
  , /*decltype(_impl_.strategy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.s_step_)*/0.5} {}
struct SStrategyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SStrategyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SStrategyDefaultTypeInternal() {}
  union {
    SStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SStrategyDefaultTypeInternal _SStrategy_default_instance_;
PROTOBUF_CONSTEXPR LonSampleConfig::LonSampleConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lon_end_condition_)*/nullptr
  , /*decltype(_impl_.t_strategy_)*/nullptr} {}
struct LonSampleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LonSampleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LonSampleConfigDefaultTypeInternal() {}
  union {
    LonSampleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LonSampleConfigDefaultTypeInternal _LonSampleConfig_default_instance_;
PROTOBUF_CONSTEXPR LatSampleConfig::LatSampleConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lat_end_condition_)*/nullptr
  , /*decltype(_impl_.s_strategy_)*/nullptr} {}
struct LatSampleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatSampleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatSampleConfigDefaultTypeInternal() {}
  union {
    LatSampleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatSampleConfigDefaultTypeInternal _LatSampleConfig_default_instance_;
PROTOBUF_CONSTEXPR LatticeSamplingConfig::LatticeSamplingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lon_sample_config_)*/nullptr
  , /*decltype(_impl_.lat_sample_config_)*/nullptr} {}
struct LatticeSamplingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatticeSamplingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatticeSamplingConfigDefaultTypeInternal() {}
  union {
    LatticeSamplingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatticeSamplingConfigDefaultTypeInternal _LatticeSamplingConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _impl_.ds_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonCondition, _impl_.dds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _impl_.dl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatCondition, _impl_.ddl_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _impl_.t_markers_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _impl_.t_step_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TStrategy, _impl_.strategy_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _impl_.s_markers_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _impl_.s_step_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::SStrategy, _impl_.strategy_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _impl_.lon_end_condition_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LonSampleConfig, _impl_.t_strategy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _impl_.lat_end_condition_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatSampleConfig, _impl_.s_strategy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _impl_.lon_sample_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::LatticeSamplingConfig, _impl_.lat_sample_config_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::planning::LonCondition)},
  { 12, 21, -1, sizeof(::apollo::planning::LatCondition)},
  { 24, 33, -1, sizeof(::apollo::planning::TStrategy)},
  { 36, 45, -1, sizeof(::apollo::planning::SStrategy)},
  { 48, 56, -1, sizeof(::apollo::planning::LonSampleConfig)},
  { 58, 66, -1, sizeof(::apollo::planning::LatSampleConfig)},
  { 68, 76, -1, sizeof(::apollo::planning::LatticeSamplingConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_LonCondition_default_instance_._instance,
  &::apollo::planning::_LatCondition_default_instance_._instance,
  &::apollo::planning::_TStrategy_default_instance_._instance,
  &::apollo::planning::_SStrategy_default_instance_._instance,
  &::apollo::planning::_LonSampleConfig_default_instance_._instance,
  &::apollo::planning::_LatSampleConfig_default_instance_._instance,
  &::apollo::planning::_LatticeSamplingConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/lattice_samplin"
  "g_config.proto\022\017apollo.planning\";\n\014LonCo"
  "ndition\022\014\n\001s\030\001 \001(\001:\0010\022\r\n\002ds\030\002 \001(\001:\0010\022\016\n\003"
  "dds\030\003 \001(\001:\0010\";\n\014LatCondition\022\014\n\001l\030\001 \001(\001:"
  "\0010\022\r\n\002dl\030\002 \001(\001:\0010\022\016\n\003ddl\030\003 \001(\001:\0010\"E\n\tTSt"
  "rategy\022\021\n\tt_markers\030\001 \003(\001\022\023\n\006t_step\030\002 \001("
  "\001:\0030.5\022\020\n\010strategy\030\003 \001(\t\"E\n\tSStrategy\022\021\n"
  "\ts_markers\030\001 \003(\001\022\023\n\006s_step\030\002 \001(\001:\0030.5\022\020\n"
  "\010strategy\030\003 \001(\t\"{\n\017LonSampleConfig\0228\n\021lo"
  "n_end_condition\030\001 \001(\0132\035.apollo.planning."
  "LonCondition\022.\n\nt_strategy\030\002 \001(\0132\032.apoll"
  "o.planning.TStrategy\"{\n\017LatSampleConfig\022"
  "8\n\021lat_end_condition\030\001 \001(\0132\035.apollo.plan"
  "ning.LatCondition\022.\n\ns_strategy\030\002 \001(\0132\032."
  "apollo.planning.SStrategy\"\221\001\n\025LatticeSam"
  "plingConfig\022;\n\021lon_sample_config\030\001 \001(\0132 "
  ".apollo.planning.LonSampleConfig\022;\n\021lat_"
  "sample_config\030\002 \001(\0132 .apollo.planning.La"
  "tSampleConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto = {
    false, false, 733, descriptor_table_protodef_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto,
    "modules/planning/proto/lattice_sampling_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class LonCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LonCondition>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LonCondition::LonCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LonCondition)
}
LonCondition::LonCondition(const LonCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.ds_){}
    , decltype(_impl_.dds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dds_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.dds_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LonCondition)
}

inline void LonCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.ds_){0}
    , decltype(_impl_.dds_){0}
  };
}

LonCondition::~LonCondition() {
  // @@protoc_insertion_point(destructor:apollo.planning.LonCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LonCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LonCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LonCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LonCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dds_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.dds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LonCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ds = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ds(&has_bits);
          _impl_.ds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dds = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_dds(&has_bits);
          _impl_.dds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LonCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LonCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double ds = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ds(), target);
  }

  // optional double dds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_dds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LonCondition)
  return target;
}

size_t LonCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LonCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double s = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double ds = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double dds = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LonCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LonCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LonCondition::GetClassData() const { return &_class_data_; }

void LonCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LonCondition *>(to)->MergeFrom(
      static_cast<const LonCondition &>(from));
}


void LonCondition::MergeFrom(const LonCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LonCondition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ds_ = from._impl_.ds_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.dds_ = from._impl_.dds_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LonCondition::CopyFrom(const LonCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LonCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonCondition::IsInitialized() const {
  return true;
}

void LonCondition::InternalSwap(LonCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LonCondition, _impl_.dds_)
      + sizeof(LonCondition::_impl_.dds_)
      - PROTOBUF_FIELD_OFFSET(LonCondition, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LonCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[0]);
}

// ===================================================================

class LatCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<LatCondition>()._impl_._has_bits_);
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LatCondition::LatCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LatCondition)
}
LatCondition::LatCondition(const LatCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){}
    , decltype(_impl_.dl_){}
    , decltype(_impl_.ddl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.l_, &from._impl_.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ddl_) -
    reinterpret_cast<char*>(&_impl_.l_)) + sizeof(_impl_.ddl_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatCondition)
}

inline void LatCondition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.dl_){0}
    , decltype(_impl_.ddl_){0}
  };
}

LatCondition::~LatCondition() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatCondition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatCondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatCondition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatCondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.l_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ddl_) -
        reinterpret_cast<char*>(&_impl_.l_)) + sizeof(_impl_.ddl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatCondition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double l = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dl = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_dl(&has_bits);
          _impl_.dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ddl = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_ddl(&has_bits);
          _impl_.ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatCondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatCondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double l = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_l(), target);
  }

  // optional double dl = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dl(), target);
  }

  // optional double ddl = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_ddl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatCondition)
  return target;
}

size_t LatCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatCondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double l = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double dl = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatCondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatCondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatCondition::GetClassData() const { return &_class_data_; }

void LatCondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatCondition *>(to)->MergeFrom(
      static_cast<const LatCondition &>(from));
}


void LatCondition::MergeFrom(const LatCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatCondition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.l_ = from._impl_.l_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.dl_ = from._impl_.dl_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ddl_ = from._impl_.ddl_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatCondition::CopyFrom(const LatCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatCondition::IsInitialized() const {
  return true;
}

void LatCondition::InternalSwap(LatCondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatCondition, _impl_.ddl_)
      + sizeof(LatCondition::_impl_.ddl_)
      - PROTOBUF_FIELD_OFFSET(LatCondition, _impl_.l_)>(
          reinterpret_cast<char*>(&_impl_.l_),
          reinterpret_cast<char*>(&other->_impl_.l_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatCondition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[1]);
}

// ===================================================================

class TStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<TStrategy>()._impl_._has_bits_);
  static void set_has_t_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TStrategy::TStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TStrategy)
}
TStrategy::TStrategy(const TStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.t_markers_){from._impl_.t_markers_}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.t_step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strategy()) {
    _impl_.strategy_.Set(from._internal_strategy(), 
      GetArenaForAllocation());
  }
  _impl_.t_step_ = from._impl_.t_step_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TStrategy)
}

inline void TStrategy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.t_markers_){arena}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.t_step_){0.5}
  };
  _impl_.strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TStrategy::~TStrategy() {
  // @@protoc_insertion_point(destructor:apollo.planning.TStrategy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.t_markers_.~RepeatedField();
  _impl_.strategy_.Destroy();
}

void TStrategy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TStrategy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.t_markers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.strategy_.ClearNonDefaultToEmpty();
    }
    _impl_.t_step_ = 0.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TStrategy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double t_markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_t_markers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_t_markers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double t_step = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_t_step(&has_bits);
          _impl_.t_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TStrategy.strategy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TStrategy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TStrategy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double t_markers = 1;
  for (int i = 0, n = this->_internal_t_markers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_t_markers(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double t_step = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t_step(), target);
  }

  // optional string strategy = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TStrategy.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TStrategy)
  return target;
}

size_t TStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TStrategy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double t_markers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_t_markers_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_t_markers_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strategy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strategy());
    }

    // optional double t_step = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TStrategy::GetClassData() const { return &_class_data_; }

void TStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TStrategy *>(to)->MergeFrom(
      static_cast<const TStrategy &>(from));
}


void TStrategy::MergeFrom(const TStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.t_markers_.MergeFrom(from._impl_.t_markers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strategy(from._internal_strategy());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_step_ = from._impl_.t_step_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TStrategy::CopyFrom(const TStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TStrategy::IsInitialized() const {
  return true;
}

void TStrategy::InternalSwap(TStrategy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.t_markers_.InternalSwap(&other->_impl_.t_markers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strategy_, lhs_arena,
      &other->_impl_.strategy_, rhs_arena
  );
  swap(_impl_.t_step_, other->_impl_.t_step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStrategy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[2]);
}

// ===================================================================

class SStrategy::_Internal {
 public:
  using HasBits = decltype(std::declval<SStrategy>()._impl_._has_bits_);
  static void set_has_s_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SStrategy::SStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.SStrategy)
}
SStrategy::SStrategy(const SStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_markers_){from._impl_.s_markers_}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.s_step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_strategy()) {
    _impl_.strategy_.Set(from._internal_strategy(), 
      GetArenaForAllocation());
  }
  _impl_.s_step_ = from._impl_.s_step_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.SStrategy)
}

inline void SStrategy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_markers_){arena}
    , decltype(_impl_.strategy_){}
    , decltype(_impl_.s_step_){0.5}
  };
  _impl_.strategy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strategy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SStrategy::~SStrategy() {
  // @@protoc_insertion_point(destructor:apollo.planning.SStrategy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_markers_.~RepeatedField();
  _impl_.strategy_.Destroy();
}

void SStrategy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.SStrategy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_markers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.strategy_.ClearNonDefaultToEmpty();
    }
    _impl_.s_step_ = 0.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SStrategy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double s_markers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_s_markers(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_s_markers(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double s_step = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_s_step(&has_bits);
          _impl_.s_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string strategy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strategy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.SStrategy.strategy");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SStrategy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.SStrategy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double s_markers = 1;
  for (int i = 0, n = this->_internal_s_markers_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s_markers(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s_step = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_step(), target);
  }

  // optional string strategy = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strategy().data(), static_cast<int>(this->_internal_strategy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.SStrategy.strategy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strategy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.SStrategy)
  return target;
}

size_t SStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.SStrategy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double s_markers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_s_markers_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_s_markers_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strategy = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_strategy());
    }

    // optional double s_step = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SStrategy::GetClassData() const { return &_class_data_; }

void SStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SStrategy *>(to)->MergeFrom(
      static_cast<const SStrategy &>(from));
}


void SStrategy::MergeFrom(const SStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.SStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.s_markers_.MergeFrom(from._impl_.s_markers_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_strategy(from._internal_strategy());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.s_step_ = from._impl_.s_step_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SStrategy::CopyFrom(const SStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.SStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SStrategy::IsInitialized() const {
  return true;
}

void SStrategy::InternalSwap(SStrategy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.s_markers_.InternalSwap(&other->_impl_.s_markers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strategy_, lhs_arena,
      &other->_impl_.strategy_, rhs_arena
  );
  swap(_impl_.s_step_, other->_impl_.s_step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SStrategy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[3]);
}

// ===================================================================

class LonSampleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LonSampleConfig>()._impl_._has_bits_);
  static const ::apollo::planning::LonCondition& lon_end_condition(const LonSampleConfig* msg);
  static void set_has_lon_end_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::TStrategy& t_strategy(const LonSampleConfig* msg);
  static void set_has_t_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LonCondition&
LonSampleConfig::_Internal::lon_end_condition(const LonSampleConfig* msg) {
  return *msg->_impl_.lon_end_condition_;
}
const ::apollo::planning::TStrategy&
LonSampleConfig::_Internal::t_strategy(const LonSampleConfig* msg) {
  return *msg->_impl_.t_strategy_;
}
LonSampleConfig::LonSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LonSampleConfig)
}
LonSampleConfig::LonSampleConfig(const LonSampleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lon_end_condition_){nullptr}
    , decltype(_impl_.t_strategy_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lon_end_condition()) {
    _impl_.lon_end_condition_ = new ::apollo::planning::LonCondition(*from._impl_.lon_end_condition_);
  }
  if (from._internal_has_t_strategy()) {
    _impl_.t_strategy_ = new ::apollo::planning::TStrategy(*from._impl_.t_strategy_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LonSampleConfig)
}

inline void LonSampleConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lon_end_condition_){nullptr}
    , decltype(_impl_.t_strategy_){nullptr}
  };
}

LonSampleConfig::~LonSampleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LonSampleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LonSampleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lon_end_condition_;
  if (this != internal_default_instance()) delete _impl_.t_strategy_;
}

void LonSampleConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LonSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LonSampleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lon_end_condition_ != nullptr);
      _impl_.lon_end_condition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.t_strategy_ != nullptr);
      _impl_.t_strategy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LonSampleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.LonCondition lon_end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_end_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.TStrategy t_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_strategy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LonSampleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LonSampleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.LonCondition lon_end_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lon_end_condition(this),
        _Internal::lon_end_condition(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.TStrategy t_strategy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::t_strategy(this),
        _Internal::t_strategy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LonSampleConfig)
  return target;
}

size_t LonSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LonSampleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LonCondition lon_end_condition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lon_end_condition_);
    }

    // optional .apollo.planning.TStrategy t_strategy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.t_strategy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LonSampleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LonSampleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LonSampleConfig::GetClassData() const { return &_class_data_; }

void LonSampleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LonSampleConfig *>(to)->MergeFrom(
      static_cast<const LonSampleConfig &>(from));
}


void LonSampleConfig::MergeFrom(const LonSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LonSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lon_end_condition()->::apollo::planning::LonCondition::MergeFrom(from._internal_lon_end_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_t_strategy()->::apollo::planning::TStrategy::MergeFrom(from._internal_t_strategy());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LonSampleConfig::CopyFrom(const LonSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LonSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LonSampleConfig::IsInitialized() const {
  return true;
}

void LonSampleConfig::InternalSwap(LonSampleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LonSampleConfig, _impl_.t_strategy_)
      + sizeof(LonSampleConfig::_impl_.t_strategy_)
      - PROTOBUF_FIELD_OFFSET(LonSampleConfig, _impl_.lon_end_condition_)>(
          reinterpret_cast<char*>(&_impl_.lon_end_condition_),
          reinterpret_cast<char*>(&other->_impl_.lon_end_condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LonSampleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[4]);
}

// ===================================================================

class LatSampleConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LatSampleConfig>()._impl_._has_bits_);
  static const ::apollo::planning::LatCondition& lat_end_condition(const LatSampleConfig* msg);
  static void set_has_lat_end_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::SStrategy& s_strategy(const LatSampleConfig* msg);
  static void set_has_s_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LatCondition&
LatSampleConfig::_Internal::lat_end_condition(const LatSampleConfig* msg) {
  return *msg->_impl_.lat_end_condition_;
}
const ::apollo::planning::SStrategy&
LatSampleConfig::_Internal::s_strategy(const LatSampleConfig* msg) {
  return *msg->_impl_.s_strategy_;
}
LatSampleConfig::LatSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LatSampleConfig)
}
LatSampleConfig::LatSampleConfig(const LatSampleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lat_end_condition_){nullptr}
    , decltype(_impl_.s_strategy_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_end_condition()) {
    _impl_.lat_end_condition_ = new ::apollo::planning::LatCondition(*from._impl_.lat_end_condition_);
  }
  if (from._internal_has_s_strategy()) {
    _impl_.s_strategy_ = new ::apollo::planning::SStrategy(*from._impl_.s_strategy_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatSampleConfig)
}

inline void LatSampleConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lat_end_condition_){nullptr}
    , decltype(_impl_.s_strategy_){nullptr}
  };
}

LatSampleConfig::~LatSampleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatSampleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatSampleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lat_end_condition_;
  if (this != internal_default_instance()) delete _impl_.s_strategy_;
}

void LatSampleConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatSampleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lat_end_condition_ != nullptr);
      _impl_.lat_end_condition_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.s_strategy_ != nullptr);
      _impl_.s_strategy_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatSampleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.LatCondition lat_end_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_end_condition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.SStrategy s_strategy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_strategy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatSampleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatSampleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.LatCondition lat_end_condition = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lat_end_condition(this),
        _Internal::lat_end_condition(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.SStrategy s_strategy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::s_strategy(this),
        _Internal::s_strategy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatSampleConfig)
  return target;
}

size_t LatSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatSampleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LatCondition lat_end_condition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lat_end_condition_);
    }

    // optional .apollo.planning.SStrategy s_strategy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.s_strategy_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatSampleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatSampleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatSampleConfig::GetClassData() const { return &_class_data_; }

void LatSampleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatSampleConfig *>(to)->MergeFrom(
      static_cast<const LatSampleConfig &>(from));
}


void LatSampleConfig::MergeFrom(const LatSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lat_end_condition()->::apollo::planning::LatCondition::MergeFrom(from._internal_lat_end_condition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_s_strategy()->::apollo::planning::SStrategy::MergeFrom(from._internal_s_strategy());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatSampleConfig::CopyFrom(const LatSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatSampleConfig::IsInitialized() const {
  return true;
}

void LatSampleConfig::InternalSwap(LatSampleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatSampleConfig, _impl_.s_strategy_)
      + sizeof(LatSampleConfig::_impl_.s_strategy_)
      - PROTOBUF_FIELD_OFFSET(LatSampleConfig, _impl_.lat_end_condition_)>(
          reinterpret_cast<char*>(&_impl_.lat_end_condition_),
          reinterpret_cast<char*>(&other->_impl_.lat_end_condition_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatSampleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[5]);
}

// ===================================================================

class LatticeSamplingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LatticeSamplingConfig>()._impl_._has_bits_);
  static const ::apollo::planning::LonSampleConfig& lon_sample_config(const LatticeSamplingConfig* msg);
  static void set_has_lon_sample_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::LatSampleConfig& lat_sample_config(const LatticeSamplingConfig* msg);
  static void set_has_lat_sample_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::LonSampleConfig&
LatticeSamplingConfig::_Internal::lon_sample_config(const LatticeSamplingConfig* msg) {
  return *msg->_impl_.lon_sample_config_;
}
const ::apollo::planning::LatSampleConfig&
LatticeSamplingConfig::_Internal::lat_sample_config(const LatticeSamplingConfig* msg) {
  return *msg->_impl_.lat_sample_config_;
}
LatticeSamplingConfig::LatticeSamplingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.LatticeSamplingConfig)
}
LatticeSamplingConfig::LatticeSamplingConfig(const LatticeSamplingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lon_sample_config_){nullptr}
    , decltype(_impl_.lat_sample_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lon_sample_config()) {
    _impl_.lon_sample_config_ = new ::apollo::planning::LonSampleConfig(*from._impl_.lon_sample_config_);
  }
  if (from._internal_has_lat_sample_config()) {
    _impl_.lat_sample_config_ = new ::apollo::planning::LatSampleConfig(*from._impl_.lat_sample_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatticeSamplingConfig)
}

inline void LatticeSamplingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lon_sample_config_){nullptr}
    , decltype(_impl_.lat_sample_config_){nullptr}
  };
}

LatticeSamplingConfig::~LatticeSamplingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatticeSamplingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatticeSamplingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.lon_sample_config_;
  if (this != internal_default_instance()) delete _impl_.lat_sample_config_;
}

void LatticeSamplingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatticeSamplingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatticeSamplingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lon_sample_config_ != nullptr);
      _impl_.lon_sample_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.lat_sample_config_ != nullptr);
      _impl_.lat_sample_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatticeSamplingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_sample_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_sample_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatticeSamplingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatticeSamplingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lon_sample_config(this),
        _Internal::lon_sample_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lat_sample_config(this),
        _Internal::lat_sample_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatticeSamplingConfig)
  return target;
}

size_t LatticeSamplingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatticeSamplingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lon_sample_config_);
    }

    // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lat_sample_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatticeSamplingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatticeSamplingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatticeSamplingConfig::GetClassData() const { return &_class_data_; }

void LatticeSamplingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatticeSamplingConfig *>(to)->MergeFrom(
      static_cast<const LatticeSamplingConfig &>(from));
}


void LatticeSamplingConfig::MergeFrom(const LatticeSamplingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatticeSamplingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_lon_sample_config()->::apollo::planning::LonSampleConfig::MergeFrom(from._internal_lon_sample_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lat_sample_config()->::apollo::planning::LatSampleConfig::MergeFrom(from._internal_lat_sample_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatticeSamplingConfig::CopyFrom(const LatticeSamplingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatticeSamplingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatticeSamplingConfig::IsInitialized() const {
  return true;
}

void LatticeSamplingConfig::InternalSwap(LatticeSamplingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatticeSamplingConfig, _impl_.lat_sample_config_)
      + sizeof(LatticeSamplingConfig::_impl_.lat_sample_config_)
      - PROTOBUF_FIELD_OFFSET(LatticeSamplingConfig, _impl_.lon_sample_config_)>(
          reinterpret_cast<char*>(&_impl_.lon_sample_config_),
          reinterpret_cast<char*>(&other->_impl_.lon_sample_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatticeSamplingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::LonCondition*
Arena::CreateMaybeMessage< ::apollo::planning::LonCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LonCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatCondition*
Arena::CreateMaybeMessage< ::apollo::planning::LatCondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LatCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TStrategy*
Arena::CreateMaybeMessage< ::apollo::planning::TStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::SStrategy*
Arena::CreateMaybeMessage< ::apollo::planning::SStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::SStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LonSampleConfig*
Arena::CreateMaybeMessage< ::apollo::planning::LonSampleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LonSampleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatSampleConfig*
Arena::CreateMaybeMessage< ::apollo::planning::LatSampleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LatSampleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::LatticeSamplingConfig*
Arena::CreateMaybeMessage< ::apollo::planning::LatticeSamplingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::LatticeSamplingConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
