// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#include "modules/planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR TaskConfig::TaskConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_type_)*/1
  , /*decltype(_impl_.task_config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TaskConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskConfigDefaultTypeInternal() {}
  union {
    TaskConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskConfigDefaultTypeInternal _TaskConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_explicit_stop_)*/false
  , /*decltype(_impl_.start_bare_intersection_scenario_distance_)*/25
  , /*decltype(_impl_.min_pass_s_distance_)*/3
  , /*decltype(_impl_.approach_cruise_speed_)*/6.7056
  , /*decltype(_impl_.stop_distance_)*/0.5
  , /*decltype(_impl_.stop_timeout_sec_)*/8
  , /*decltype(_impl_.creep_timeout_sec_)*/10} {}
struct ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal() {}
  union {
    ScenarioBareIntersectionUnprotectedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal _ScenarioBareIntersectionUnprotectedConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioEmergencyPullOverConfig::ScenarioEmergencyPullOverConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_stop_deceleration_)*/3
  , /*decltype(_impl_.slow_down_deceleration_time_)*/3
  , /*decltype(_impl_.target_slow_down_speed_)*/2.5
  , /*decltype(_impl_.stop_distance_)*/1.5} {}
struct ScenarioEmergencyPullOverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioEmergencyPullOverConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioEmergencyPullOverConfigDefaultTypeInternal() {}
  union {
    ScenarioEmergencyPullOverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioEmergencyPullOverConfigDefaultTypeInternal _ScenarioEmergencyPullOverConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioEmergencyStopConfig::ScenarioEmergencyStopConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_stop_deceleration_)*/6
  , /*decltype(_impl_.stop_distance_)*/1} {}
struct ScenarioEmergencyStopConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioEmergencyStopConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioEmergencyStopConfigDefaultTypeInternal() {}
  union {
    ScenarioEmergencyStopConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioEmergencyStopConfigDefaultTypeInternal _ScenarioEmergencyStopConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioLaneFollowConfig::ScenarioLaneFollowConfig(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ScenarioLaneFollowConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioLaneFollowConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioLaneFollowConfigDefaultTypeInternal() {}
  union {
    ScenarioLaneFollowConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioLaneFollowConfigDefaultTypeInternal _ScenarioLaneFollowConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioLearningModelSampleConfig::ScenarioLearningModelSampleConfig(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ScenarioLearningModelSampleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioLearningModelSampleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioLearningModelSampleConfigDefaultTypeInternal() {}
  union {
    ScenarioLearningModelSampleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioLearningModelSampleConfigDefaultTypeInternal _ScenarioLearningModelSampleConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct ScenarioNarrowStreetUTurnConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioNarrowStreetUTurnConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioNarrowStreetUTurnConfigDefaultTypeInternal() {}
  union {
    ScenarioNarrowStreetUTurnConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioNarrowStreetUTurnConfigDefaultTypeInternal _ScenarioNarrowStreetUTurnConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioParkAndGoConfig::ScenarioParkAndGoConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.front_obstacle_buffer_)*/4
  , /*decltype(_impl_.heading_buffer_)*/0.5
  , /*decltype(_impl_.min_dist_to_dest_)*/25
  , /*decltype(_impl_.max_steering_percentage_when_cruise_)*/90} {}
struct ScenarioParkAndGoConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioParkAndGoConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioParkAndGoConfigDefaultTypeInternal() {}
  union {
    ScenarioParkAndGoConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioParkAndGoConfigDefaultTypeInternal _ScenarioParkAndGoConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioPullOverConfig::ScenarioPullOverConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_pull_over_scenario_distance_)*/50
  , /*decltype(_impl_.pull_over_min_distance_buffer_)*/10
  , /*decltype(_impl_.max_distance_stop_search_)*/25
  , /*decltype(_impl_.max_s_error_to_end_point_)*/0.2
  , /*decltype(_impl_.max_l_error_to_end_point_)*/0.5
  , /*decltype(_impl_.max_theta_error_to_end_point_)*/0.2
  , /*decltype(_impl_.max_distance_error_to_end_point_)*/0.2
  , /*decltype(_impl_.pass_destination_threshold_)*/10
  , /*decltype(_impl_.max_valid_stop_distance_)*/1
  , /*decltype(_impl_.s_distance_to_stop_for_open_space_parking_)*/7} {}
struct ScenarioPullOverConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioPullOverConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioPullOverConfigDefaultTypeInternal() {}
  union {
    ScenarioPullOverConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioPullOverConfigDefaultTypeInternal _ScenarioPullOverConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creep_timeout_sec_)*/10
  , /*decltype(_impl_.start_stop_sign_scenario_distance_)*/5
  , /*decltype(_impl_.watch_vehicle_max_valid_stop_distance_)*/5
  , /*decltype(_impl_.max_valid_stop_distance_)*/3.5
  , /*decltype(_impl_.min_pass_s_distance_)*/3
  , /*decltype(_impl_.stop_duration_sec_)*/1
  , /*decltype(_impl_.stop_timeout_sec_)*/8} {}
struct ScenarioStopSignUnprotectedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioStopSignUnprotectedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioStopSignUnprotectedConfigDefaultTypeInternal() {}
  union {
    ScenarioStopSignUnprotectedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioStopSignUnprotectedConfigDefaultTypeInternal _ScenarioStopSignUnprotectedConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_traffic_light_scenario_distance_)*/5
  , /*decltype(_impl_.max_valid_stop_distance_)*/2
  , /*decltype(_impl_.min_pass_s_distance_)*/3} {}
struct ScenarioTrafficLightProtectedConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioTrafficLightProtectedConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioTrafficLightProtectedConfigDefaultTypeInternal() {}
  union {
    ScenarioTrafficLightProtectedConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioTrafficLightProtectedConfigDefaultTypeInternal _ScenarioTrafficLightProtectedConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creep_timeout_sec_)*/10
  , /*decltype(_impl_.start_traffic_light_scenario_distance_)*/5
  , /*decltype(_impl_.approach_cruise_speed_)*/2.78
  , /*decltype(_impl_.max_valid_stop_distance_)*/3.5
  , /*decltype(_impl_.min_pass_s_distance_)*/3
  , /*decltype(_impl_.max_adc_speed_before_creep_)*/5.56} {}
struct ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal() {}
  union {
    ScenarioTrafficLightUnprotectedLeftTurnConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_right_turn_on_red_)*/false
  , /*decltype(_impl_.start_traffic_light_scenario_distance_)*/5
  , /*decltype(_impl_.max_valid_stop_distance_)*/3.5
  , /*decltype(_impl_.min_pass_s_distance_)*/3
  , /*decltype(_impl_.red_light_right_turn_stop_duration_sec_)*/3
  , /*decltype(_impl_.creep_timeout_sec_)*/10
  , /*decltype(_impl_.max_adc_speed_before_creep_)*/3} {}
struct ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal() {}
  union {
    ScenarioTrafficLightUnprotectedRightTurnConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioValetParkingConfig::ScenarioValetParkingConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.parking_spot_range_to_start_)*/20
  , /*decltype(_impl_.max_valid_stop_distance_)*/1} {}
struct ScenarioValetParkingConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioValetParkingConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioValetParkingConfigDefaultTypeInternal() {}
  union {
    ScenarioValetParkingConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioValetParkingConfigDefaultTypeInternal _ScenarioValetParkingConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioDeadEndTurnAroundConfig::ScenarioDeadEndTurnAroundConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dead_end_start_range_)*/20
  , /*decltype(_impl_.max_valid_stop_distance_)*/1} {}
struct ScenarioDeadEndTurnAroundConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioDeadEndTurnAroundConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioDeadEndTurnAroundConfigDefaultTypeInternal() {}
  union {
    ScenarioDeadEndTurnAroundConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioDeadEndTurnAroundConfigDefaultTypeInternal _ScenarioDeadEndTurnAroundConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioYieldSignConfig::ScenarioYieldSignConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.creep_timeout_sec_)*/10
  , /*decltype(_impl_.start_yield_sign_scenario_distance_)*/10
  , /*decltype(_impl_.max_valid_stop_distance_)*/4.5
  , /*decltype(_impl_.min_pass_s_distance_)*/3} {}
struct ScenarioYieldSignConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioYieldSignConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioYieldSignConfigDefaultTypeInternal() {}
  union {
    ScenarioYieldSignConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioYieldSignConfigDefaultTypeInternal _ScenarioYieldSignConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioConfig_StageConfig::ScenarioConfig_StageConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_type_)*/{}
  , /*decltype(_impl_.task_config_)*/{}
  , /*decltype(_impl_.stage_type_)*/0
  , /*decltype(_impl_.enabled_)*/true} {}
struct ScenarioConfig_StageConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioConfig_StageConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioConfig_StageConfigDefaultTypeInternal() {}
  union {
    ScenarioConfig_StageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioConfig_StageConfigDefaultTypeInternal _ScenarioConfig_StageConfig_default_instance_;
PROTOBUF_CONSTEXPR ScenarioConfig::ScenarioConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stage_type_)*/{}
  , /*decltype(_impl_.stage_config_)*/{}
  , /*decltype(_impl_.scenario_type_)*/0
  , /*decltype(_impl_.scenario_config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ScenarioConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScenarioConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScenarioConfigDefaultTypeInternal() {}
  union {
    ScenarioConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScenarioConfigDefaultTypeInternal _ScenarioConfig_default_instance_;
PROTOBUF_CONSTEXPR PlannerPublicRoadConfig::PlannerPublicRoadConfig(
    ::_pbi::ConstantInitialized): _impl_{} {}
struct PlannerPublicRoadConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlannerPublicRoadConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlannerPublicRoadConfigDefaultTypeInternal() {}
  union {
    PlannerPublicRoadConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlannerPublicRoadConfigDefaultTypeInternal _PlannerPublicRoadConfig_default_instance_;
PROTOBUF_CONSTEXPR PlannerNaviConfig::PlannerNaviConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_.navi_path_decider_config_)*/nullptr
  , /*decltype(_impl_.navi_speed_decider_config_)*/nullptr
  , /*decltype(_impl_.navi_obstacle_decider_config_)*/nullptr} {}
struct PlannerNaviConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlannerNaviConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlannerNaviConfigDefaultTypeInternal() {}
  union {
    PlannerNaviConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlannerNaviConfigDefaultTypeInternal _PlannerNaviConfig_default_instance_;
PROTOBUF_CONSTEXPR RtkPlanningConfig::RtkPlanningConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planner_type_)*/0} {}
struct RtkPlanningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtkPlanningConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtkPlanningConfigDefaultTypeInternal() {}
  union {
    RtkPlanningConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtkPlanningConfigDefaultTypeInternal _RtkPlanningConfig_default_instance_;
PROTOBUF_CONSTEXPR StandardPlanningConfig::StandardPlanningConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planner_type_)*/{}
  , /*decltype(_impl_.planner_public_road_config_)*/nullptr} {}
struct StandardPlanningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StandardPlanningConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StandardPlanningConfigDefaultTypeInternal() {}
  union {
    StandardPlanningConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StandardPlanningConfigDefaultTypeInternal _StandardPlanningConfig_default_instance_;
PROTOBUF_CONSTEXPR NavigationPlanningConfig::NavigationPlanningConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.planner_type_)*/{}
  , /*decltype(_impl_.planner_navi_config_)*/nullptr} {}
struct NavigationPlanningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationPlanningConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationPlanningConfigDefaultTypeInternal() {}
  union {
    NavigationPlanningConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationPlanningConfigDefaultTypeInternal _NavigationPlanningConfig_default_instance_;
PROTOBUF_CONSTEXPR TopicConfig::TopicConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chassis_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hmi_status_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localization_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planning_pad_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planning_trajectory_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prediction_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.relative_map_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_request_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_response_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.story_telling_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.traffic_light_detection_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planning_learning_data_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TopicConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicConfigDefaultTypeInternal() {}
  union {
    TopicConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicConfigDefaultTypeInternal _TopicConfig_default_instance_;
PROTOBUF_CONSTEXPR PlanningConfig::PlanningConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default_task_config_)*/{}
  , /*decltype(_impl_.topic_config_)*/nullptr
  , /*decltype(_impl_.learning_mode_)*/0
  , /*decltype(_impl_.planning_config_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PlanningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningConfigDefaultTypeInternal() {}
  union {
    PlanningConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _impl_.task_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TaskConfig, _impl_.task_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.start_bare_intersection_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.enable_explicit_stop_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.approach_cruise_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.stop_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _impl_.creep_timeout_sec_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _impl_.max_stop_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _impl_.slow_down_deceleration_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _impl_.target_slow_down_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _impl_.stop_distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _impl_.max_stop_deceleration_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _impl_.stop_distance_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioLaneFollowConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioLearningModelSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioNarrowStreetUTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _impl_.front_obstacle_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _impl_.heading_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _impl_.min_dist_to_dest_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _impl_.max_steering_percentage_when_cruise_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.start_pull_over_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.pull_over_min_distance_buffer_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_distance_stop_search_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_s_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_l_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_theta_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_distance_error_to_end_point_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.pass_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _impl_.s_distance_to_stop_for_open_space_parking_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.start_stop_sign_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.watch_vehicle_max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.stop_duration_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.stop_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _impl_.creep_timeout_sec_),
  1,
  2,
  3,
  5,
  4,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _impl_.start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _impl_.min_pass_s_distance_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.approach_cruise_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.creep_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _impl_.max_adc_speed_before_creep_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.start_traffic_light_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.enable_right_turn_on_red_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.red_light_right_turn_stop_duration_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.creep_timeout_sec_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _impl_.max_adc_speed_before_creep_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _impl_.parking_spot_range_to_start_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _impl_.max_valid_stop_distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _impl_.dead_end_start_range_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _impl_.max_valid_stop_distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _impl_.start_yield_sign_scenario_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _impl_.max_valid_stop_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _impl_.min_pass_s_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _impl_.creep_timeout_sec_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _impl_.stage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _impl_.task_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _impl_.task_config_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_.scenario_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_.stage_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_.stage_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _impl_.scenario_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _impl_.navi_path_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _impl_.navi_speed_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _impl_.navi_obstacle_decider_config_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _impl_.planner_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _impl_.planner_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _impl_.planner_public_road_config_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _impl_.planner_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _impl_.planner_navi_config_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.chassis_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.hmi_status_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.localization_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.planning_pad_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.planning_trajectory_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.prediction_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.relative_map_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.routing_request_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.routing_response_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.story_telling_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.traffic_light_detection_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::TopicConfig, _impl_.planning_learning_data_topic_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.topic_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.learning_mode_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.default_task_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.planning_config_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, -1, sizeof(::apollo::planning::TaskConfig)},
  { 53, 66, -1, sizeof(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig)},
  { 73, 83, -1, sizeof(::apollo::planning::ScenarioEmergencyPullOverConfig)},
  { 87, 95, -1, sizeof(::apollo::planning::ScenarioEmergencyStopConfig)},
  { 97, -1, -1, sizeof(::apollo::planning::ScenarioLaneFollowConfig)},
  { 103, -1, -1, sizeof(::apollo::planning::ScenarioLearningModelSampleConfig)},
  { 109, -1, -1, sizeof(::apollo::planning::ScenarioNarrowStreetUTurnConfig)},
  { 115, 125, -1, sizeof(::apollo::planning::ScenarioParkAndGoConfig)},
  { 129, 145, -1, sizeof(::apollo::planning::ScenarioPullOverConfig)},
  { 155, 168, -1, sizeof(::apollo::planning::ScenarioStopSignUnprotectedConfig)},
  { 175, 184, -1, sizeof(::apollo::planning::ScenarioTrafficLightProtectedConfig)},
  { 187, 199, -1, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig)},
  { 205, 218, -1, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig)},
  { 225, 233, -1, sizeof(::apollo::planning::ScenarioValetParkingConfig)},
  { 235, 243, -1, sizeof(::apollo::planning::ScenarioDeadEndTurnAroundConfig)},
  { 245, 255, -1, sizeof(::apollo::planning::ScenarioYieldSignConfig)},
  { 259, 269, -1, sizeof(::apollo::planning::ScenarioConfig_StageConfig)},
  { 273, 298, -1, sizeof(::apollo::planning::ScenarioConfig)},
  { 316, -1, -1, sizeof(::apollo::planning::PlannerPublicRoadConfig)},
  { 322, 332, -1, sizeof(::apollo::planning::PlannerNaviConfig)},
  { 336, 343, -1, sizeof(::apollo::planning::RtkPlanningConfig)},
  { 344, 352, -1, sizeof(::apollo::planning::StandardPlanningConfig)},
  { 354, 362, -1, sizeof(::apollo::planning::NavigationPlanningConfig)},
  { 364, 382, -1, sizeof(::apollo::planning::TopicConfig)},
  { 394, 407, -1, sizeof(::apollo::planning::PlanningConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_TaskConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioEmergencyPullOverConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioEmergencyStopConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioLaneFollowConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioLearningModelSampleConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioParkAndGoConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioPullOverConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioValetParkingConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioDeadEndTurnAroundConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioYieldSignConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioConfig_StageConfig_default_instance_._instance,
  &::apollo::planning::_ScenarioConfig_default_instance_._instance,
  &::apollo::planning::_PlannerPublicRoadConfig_default_instance_._instance,
  &::apollo::planning::_PlannerNaviConfig_default_instance_._instance,
  &::apollo::planning::_RtkPlanningConfig_default_instance_._instance,
  &::apollo::planning::_StandardPlanningConfig_default_instance_._instance,
  &::apollo::planning::_NavigationPlanningConfig_default_instance_._instance,
  &::apollo::planning::_TopicConfig_default_instance_._instance,
  &::apollo::planning::_PlanningConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/planning_config"
  ".proto\022\017apollo.planning\0323modules/plannin"
  "g/proto/open_space_task_config.proto\032(mo"
  "dules/planning/proto/task_config.proto\"\335"
  "\026\n\nTaskConfig\0227\n\ttask_type\030\001 \001(\0162$.apoll"
  "o.planning.TaskConfig.TaskType\022C\n\024creep_"
  "decider_config\030\002 \001(\0132#.apollo.planning.C"
  "reepDeciderConfigH\000\022N\n\032lane_change_decid"
  "er_config\030\003 \001(\0132(.apollo.planning.LaneCh"
  "angeDeciderConfigH\000\022]\n\"open_space_fallba"
  "ck_decider_config\030\004 \001(\0132/.apollo.plannin"
  "g.OpenSpaceFallBackDeciderConfigH\000\022\\\n\"op"
  "en_space_pre_stop_decider_config\030\005 \001(\0132."
  ".apollo.planning.OpenSpacePreStopDecider"
  "ConfigH\000\022S\n\035open_space_roi_decider_confi"
  "g\030\006 \001(\0132*.apollo.planning.OpenSpaceRoiDe"
  "ciderConfigH\000\022V\n\036path_assessment_decider"
  "_config\030\007 \001(\0132,.apollo.planning.PathAsse"
  "ssmentDeciderConfigH\000\022N\n\032path_bounds_dec"
  "ider_config\030\010 \001(\0132(.apollo.planning.Path"
  "BoundsDeciderConfigH\000\022A\n\023path_decider_co"
  "nfig\030\t \001(\0132\".apollo.planning.PathDecider"
  "ConfigH\000\022W\n\037path_lane_borrow_decider_con"
  "fig\030\n \001(\0132,.apollo.planning.PathLaneBorr"
  "owDeciderConfigH\000\022T\n\035path_reference_deci"
  "der_config\030\013 \001(\0132+.apollo.planning.PathR"
  "eferenceDeciderConfigH\000\022L\n\031path_reuse_de"
  "cider_config\030\014 \001(\0132\'.apollo.planning.Pat"
  "hReuseDeciderConfigH\000\022U\n\036rule_based_stop"
  "_decider_config\030\r \001(\0132+.apollo.planning."
  "RuleBasedStopDeciderConfigH\000\022P\n\033speed_bo"
  "unds_decider_config\030\016 \001(\0132).apollo.plann"
  "ing.SpeedBoundsDeciderConfigH\000\022J\n\030st_bou"
  "nds_decider_config\030\017 \001(\0132&.apollo.planni"
  "ng.STBoundsDeciderConfigH\000\022e\n&open_space"
  "_trajectory_partition_config\030\020 \001(\01323.apo"
  "llo.planning.OpenSpaceTrajectoryPartitio"
  "nConfigH\000\022c\n%open_space_trajectory_provi"
  "der_config\030\021 \001(\01322.apollo.planning.OpenS"
  "paceTrajectoryProviderConfigH\000\022v\n/piecew"
  "ise_jerk_nonlinear_speed_optimizer_confi"
  "g\030\022 \001(\0132;.apollo.planning.PiecewiseJerkN"
  "onlinearSpeedOptimizerConfigH\000\022a\n$piecew"
  "ise_jerk_path_optimizer_config\030\023 \001(\01321.a"
  "pollo.planning.PiecewiseJerkPathOptimize"
  "rConfigH\000\022c\n%piecewise_jerk_speed_optimi"
  "zer_config\030\024 \001(\01322.apollo.planning.Piece"
  "wiseJerkSpeedOptimizerConfigH\000\022Z\n speed_"
  "heuristic_optimizer_config\030\025 \001(\0132..apoll"
  "o.planning.SpeedHeuristicOptimizerConfig"
  "H\000\022a\n$learning_model_inference_task_conf"
  "ig\030\026 \001(\01321.apollo.planning.LearningModel"
  "InferenceTaskConfigH\000\022v\n/learning_model_"
  "inference_trajectory_task_config\030\027 \001(\0132;"
  ".apollo.planning.LearningModelInferenceT"
  "rajectoryTaskConfigH\000\"\277\006\n\010TaskType\022\021\n\rCR"
  "EEP_DECIDER\020\001\022\027\n\023LANE_CHANGE_DECIDER\020\002\022\031"
  "\n\025NAVI_OBSTACLE_DECIDER\020\003\022\025\n\021NAVI_PATH_D"
  "ECIDER\020\004\022\026\n\022NAVI_SPEED_DECIDER\020\005\022\037\n\033OPEN"
  "_SPACE_FALLBACK_DECIDER\020\006\022\037\n\033OPEN_SPACE_"
  "PRE_STOP_DECIDER\020\007\022\032\n\026OPEN_SPACE_ROI_DEC"
  "IDER\020\010\022\033\n\027PATH_ASSESSMENT_DECIDER\020\t\022\027\n\023P"
  "ATH_BOUNDS_DECIDER\020\n\022\020\n\014PATH_DECIDER\020\013\022\034"
  "\n\030PATH_LANE_BORROW_DECIDER\020\014\022\032\n\026PATH_REF"
  "ERENCE_DECIDER\020\r\022\026\n\022PATH_REUSE_DECIDER\020\016"
  "\022\017\n\013RSS_DECIDER\020\017\022\033\n\027RULE_BASED_STOP_DEC"
  "IDER\020\020\022\037\n\033SPEED_BOUNDS_PRIORI_DECIDER\020\021\022"
  "\036\n\032SPEED_BOUNDS_FINAL_DECIDER\020\022\022\021\n\rSPEED"
  "_DECIDER\020\023\022\025\n\021ST_BOUNDS_DECIDER\020\024\022#\n\037OPE"
  "N_SPACE_TRAJECTORY_PARTITION\020\025\022\"\n\036OPEN_S"
  "PACE_TRAJECTORY_PROVIDER\020\026\022,\n(PIECEWISE_"
  "JERK_NONLINEAR_SPEED_OPTIMIZER\020\027\022!\n\035PIEC"
  "EWISE_JERK_PATH_OPTIMIZER\020\030\022\"\n\036PIECEWISE"
  "_JERK_SPEED_OPTIMIZER\020\031\022\035\n\031SPEED_HEURIST"
  "IC_OPTIMIZER\020\032\022!\n\035LEARNING_MODEL_INFEREN"
  "CE_TASK\020\033\022,\n(LEARNING_MODEL_INFERENCE_TR"
  "AJECTORY_TASK\020\034B\r\n\013task_config\"\246\002\n)Scena"
  "rioBareIntersectionUnprotectedConfig\0225\n)"
  "start_bare_intersection_scenario_distanc"
  "e\030\001 \001(\001:\00225\022#\n\024enable_explicit_stop\030\002 \001("
  "\010:\005false\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0013"
  "\022%\n\025approach_cruise_speed\030\004 \001(\001:\0066.7056\022"
  "\032\n\rstop_distance\030\005 \001(\001:\0030.5\022\033\n\020stop_time"
  "out_sec\030\006 \001(\002:\0018\022\035\n\021creep_timeout_sec\030\007 "
  "\001(\002:\00210\"\254\001\n\037ScenarioEmergencyPullOverCon"
  "fig\022 \n\025max_stop_deceleration\030\001 \001(\001:\0013\022&\n"
  "\033slow_down_deceleration_time\030\002 \001(\001:\0013\022#\n"
  "\026target_slow_down_speed\030\003 \001(\001:\0032.5\022\032\n\rst"
  "op_distance\030\004 \001(\001:\0031.5\"Y\n\033ScenarioEmerge"
  "ncyStopConfig\022 \n\025max_stop_deceleration\030\001"
  " \001(\001:\0016\022\030\n\rstop_distance\030\002 \001(\001:\0011\"\032\n\030Sce"
  "narioLaneFollowConfig\"#\n!ScenarioLearnin"
  "gModelSampleConfig\"!\n\037ScenarioNarrowStre"
  "etUTurnConfig\"\247\001\n\027ScenarioParkAndGoConfi"
  "g\022 \n\025front_obstacle_buffer\030\001 \001(\001:\0014\022\033\n\016h"
  "eading_buffer\030\002 \001(\001:\0030.5\022\034\n\020min_dist_to_"
  "dest\030\003 \001(\001:\00225\022/\n#max_steering_percentag"
  "e_when_cruise\030\004 \001(\001:\00290\"\301\003\n\026ScenarioPull"
  "OverConfig\022-\n!start_pull_over_scenario_d"
  "istance\030\001 \001(\001:\00250\022)\n\035pull_over_min_dista"
  "nce_buffer\030\002 \001(\001:\00210\022$\n\030max_distance_sto"
  "p_search\030\003 \001(\001:\00225\022%\n\030max_s_error_to_end"
  "_point\030\004 \001(\001:\0030.2\022%\n\030max_l_error_to_end_"
  "point\030\005 \001(\001:\0030.5\022)\n\034max_theta_error_to_e"
  "nd_point\030\006 \001(\001:\0030.2\022,\n\037max_distance_erro"
  "r_to_end_point\030\007 \001(\001:\0030.2\022&\n\032pass_destin"
  "ation_threshold\030\010 \001(\001:\00210\022\"\n\027max_valid_s"
  "top_distance\030\t \001(\001:\0011\0224\n)s_distance_to_s"
  "top_for_open_space_parking\030\n \001(\001:\0017\"\243\002\n!"
  "ScenarioStopSignUnprotectedConfig\022,\n!sta"
  "rt_stop_sign_scenario_distance\030\001 \001(\001:\0015\022"
  "0\n%watch_vehicle_max_valid_stop_distance"
  "\030\002 \001(\001:\0015\022$\n\027max_valid_stop_distance\030\003 \001"
  "(\001:\0033.5\022\034\n\021stop_duration_sec\030\004 \001(\002:\0011\022\036\n"
  "\023min_pass_s_distance\030\005 \001(\001:\0013\022\033\n\020stop_ti"
  "meout_sec\030\006 \001(\002:\0018\022\035\n\021creep_timeout_sec\030"
  "\007 \001(\002:\00210\"\233\001\n#ScenarioTrafficLightProtec"
  "tedConfig\0220\n%start_traffic_light_scenari"
  "o_distance\030\001 \001(\001:\0015\022\"\n\027max_valid_stop_di"
  "stance\030\002 \001(\001:\0012\022\036\n\023min_pass_s_distance\030\003"
  " \001(\001:\0013\"\225\002\n-ScenarioTrafficLightUnprotec"
  "tedLeftTurnConfig\0220\n%start_traffic_light"
  "_scenario_distance\030\001 \001(\001:\0015\022#\n\025approach_"
  "cruise_speed\030\002 \001(\001:\0042.78\022$\n\027max_valid_st"
  "op_distance\030\003 \001(\001:\0033.5\022\036\n\023min_pass_s_dis"
  "tance\030\004 \001(\001:\0013\022\035\n\021creep_timeout_sec\030\005 \001("
  "\002:\00210\022(\n\032max_adc_speed_before_creep\030\006 \001("
  "\001:\0045.56\"\312\002\n.ScenarioTrafficLightUnprotec"
  "tedRightTurnConfig\0220\n%start_traffic_ligh"
  "t_scenario_distance\030\001 \001(\001:\0015\022\'\n\030enable_r"
  "ight_turn_on_red\030\002 \001(\010:\005false\022$\n\027max_val"
  "id_stop_distance\030\003 \001(\001:\0033.5\022\036\n\023min_pass_"
  "s_distance\030\004 \001(\001:\0013\0221\n&red_light_right_t"
  "urn_stop_duration_sec\030\005 \001(\002:\0013\022\035\n\021creep_"
  "timeout_sec\030\006 \001(\002:\00210\022%\n\032max_adc_speed_b"
  "efore_creep\030\007 \001(\001:\0013\"i\n\032ScenarioValetPar"
  "kingConfig\022\'\n\033parking_spot_range_to_star"
  "t\030\001 \001(\001:\00220\022\"\n\027max_valid_stop_distance\030\002"
  " \001(\001:\0011\"g\n\037ScenarioDeadEndTurnAroundConf"
  "ig\022 \n\024dead_end_start_range\030\001 \001(\001:\00220\022\"\n\027"
  "max_valid_stop_distance\030\002 \001(\001:\0011\"\256\001\n\027Sce"
  "narioYieldSignConfig\022.\n\"start_yield_sign"
  "_scenario_distance\030\001 \001(\001:\00210\022$\n\027max_vali"
  "d_stop_distance\030\002 \001(\001:\0034.5\022\036\n\023min_pass_s"
  "_distance\030\003 \001(\001:\0013\022\035\n\021creep_timeout_sec\030"
  "\004 \001(\002:\00210\"\266\033\n\016ScenarioConfig\022C\n\rscenario"
  "_type\030\001 \001(\0162,.apollo.planning.ScenarioCo"
  "nfig.ScenarioType\022G\n\022lane_follow_config\030"
  "\002 \001(\0132).apollo.planning.ScenarioLaneFoll"
  "owConfigH\000\022j\n$bare_intersection_unprotec"
  "ted_config\030\003 \001(\0132:.apollo.planning.Scena"
  "rioBareIntersectionUnprotectedConfigH\000\022V"
  "\n\032emergency_pull_over_config\030\004 \001(\01320.apo"
  "llo.planning.ScenarioEmergencyPullOverCo"
  "nfigH\000\022M\n\025emergency_stop_config\030\005 \001(\0132,."
  "apollo.planning.ScenarioEmergencyStopCon"
  "figH\000\022Z\n\034learning_model_sample_config\030\006 "
  "\001(\01322.apollo.planning.ScenarioLearningMo"
  "delSampleConfigH\000\022W\n\033narrow_street_u_tur"
  "n_config\030\007 \001(\01320.apollo.planning.Scenari"
  "oNarrowStreetUTurnConfigH\000\022F\n\022park_and_g"
  "o_config\030\010 \001(\0132(.apollo.planning.Scenari"
  "oParkAndGoConfigH\000\022C\n\020pull_over_config\030\t"
  " \001(\0132\'.apollo.planning.ScenarioPullOverC"
  "onfigH\000\022Z\n\034stop_sign_unprotected_config\030"
  "\n \001(\01322.apollo.planning.ScenarioStopSign"
  "UnprotectedConfigH\000\022^\n\036traffic_light_pro"
  "tected_config\030\013 \001(\01324.apollo.planning.Sc"
  "enarioTrafficLightProtectedConfigH\000\022t\n*t"
  "raffic_light_unprotected_left_turn_confi"
  "g\030\014 \001(\0132>.apollo.planning.ScenarioTraffi"
  "cLightUnprotectedLeftTurnConfigH\000\022v\n+tra"
  "ffic_light_unprotected_right_turn_config"
  "\030\r \001(\0132\?.apollo.planning.ScenarioTraffic"
  "LightUnprotectedRightTurnConfigH\000\022K\n\024val"
  "et_parking_config\030\016 \001(\0132+.apollo.plannin"
  "g.ScenarioValetParkingConfigH\000\022E\n\021yield_"
  "sign_config\030\017 \001(\0132(.apollo.planning.Scen"
  "arioYieldSignConfigH\000\022U\n\031deadend_turnaro"
  "und_config\030\022 \001(\01320.apollo.planning.Scena"
  "rioDeadEndTurnAroundConfigH\000\022=\n\nstage_ty"
  "pe\030\020 \003(\0162).apollo.planning.ScenarioConfi"
  "g.StageType\022A\n\014stage_config\030\021 \003(\0132+.apol"
  "lo.planning.ScenarioConfig.StageConfig\032\316"
  "\001\n\013StageConfig\022=\n\nstage_type\030\001 \001(\0162).apo"
  "llo.planning.ScenarioConfig.StageType\022\025\n"
  "\007enabled\030\002 \001(\010:\004true\0227\n\ttask_type\030\003 \003(\0162"
  "$.apollo.planning.TaskConfig.TaskType\0220\n"
  "\013task_config\030\004 \003(\0132\033.apollo.planning.Tas"
  "kConfig\"\243\003\n\014ScenarioType\022\017\n\013LANE_FOLLOW\020"
  "\000\022!\n\035BARE_INTERSECTION_UNPROTECTED\020\002\022\027\n\023"
  "STOP_SIGN_PROTECTED\020\003\022\031\n\025STOP_SIGN_UNPRO"
  "TECTED\020\004\022\033\n\027TRAFFIC_LIGHT_PROTECTED\020\005\022\'\n"
  "#TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN\020\006\022("
  "\n$TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN\020\007"
  "\022\016\n\nYIELD_SIGN\020\010\022\r\n\tPULL_OVER\020\t\022\021\n\rVALET"
  "_PARKING\020\n\022\027\n\023EMERGENCY_PULL_OVER\020\013\022\022\n\016E"
  "MERGENCY_STOP\020\014\022\030\n\024NARROW_STREET_U_TURN\020"
  "\r\022\017\n\013PARK_AND_GO\020\016\022\031\n\025LEARNING_MODEL_SAM"
  "PLE\020\017\022\026\n\022DEADEND_TURNAROUND\020\020\"\237\n\n\tStageT"
  "ype\022\014\n\010NO_STAGE\020\000\022\035\n\031LANE_FOLLOW_DEFAULT"
  "_STAGE\020\001\022+\n&BARE_INTERSECTION_UNPROTECTE"
  "D_APPROACH\020\310\001\0226\n1BARE_INTERSECTION_UNPRO"
  "TECTED_INTERSECTION_CRUISE\020\311\001\022#\n\036STOP_SI"
  "GN_UNPROTECTED_PRE_STOP\020\254\002\022\037\n\032STOP_SIGN_"
  "UNPROTECTED_STOP\020\255\002\022 \n\033STOP_SIGN_UNPROTE"
  "CTED_CREEP\020\256\002\022.\n)STOP_SIGN_UNPROTECTED_I"
  "NTERSECTION_CRUISE\020\257\002\022%\n TRAFFIC_LIGHT_P"
  "ROTECTED_APPROACH\020\220\003\0220\n+TRAFFIC_LIGHT_PR"
  "OTECTED_INTERSECTION_CRUISE\020\221\003\0221\n,TRAFFI"
  "C_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH\020\232"
  "\003\022.\n)TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN"
  "_CREEP\020\233\003\022<\n7TRAFFIC_LIGHT_UNPROTECTED_L"
  "EFT_TURN_INTERSECTION_CRUISE\020\234\003\022.\n)TRAFF"
  "IC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP\020\244\003\022"
  "/\n*TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_"
  "CREEP\020\245\003\022=\n8TRAFFIC_LIGHT_UNPROTECTED_RI"
  "GHT_TURN_INTERSECTION_CRUISE\020\246\003\022\027\n\022PULL_"
  "OVER_APPROACH\020\364\003\022%\n PULL_OVER_RETRY_APPR"
  "OACH_PARKING\020\365\003\022\034\n\027PULL_OVER_RETRY_PARKI"
  "NG\020\366\003\022\"\n\035EMERGENCY_PULL_OVER_SLOW_DOWN\020\330"
  "\004\022!\n\034EMERGENCY_PULL_OVER_APPROACH\020\331\004\022 \n\033"
  "EMERGENCY_PULL_OVER_STANDBY\020\332\004\022\034\n\027EMERGE"
  "NCY_STOP_APPROACH\020\342\004\022\033\n\026EMERGENCY_STOP_S"
  "TANDBY\020\343\004\022+\n&VALET_PARKING_APPROACHING_P"
  "ARKING_SPOT\020\274\005\022\032\n\025VALET_PARKING_PARKING\020"
  "\275\005\0221\n,DEADEND_TURNAROUND_APPROACHING_TUR"
  "NING_POINT\020\314\010\022\037\n\032DEADEND_TURNAROUND_TURN"
  "ING\020\315\010\022\026\n\021PARK_AND_GO_CHECK\020\240\006\022\027\n\022PARK_A"
  "ND_GO_CRUISE\020\241\006\022\027\n\022PARK_AND_GO_ADJUST\020\242\006"
  "\022\033\n\026PARK_AND_GO_PRE_CRUISE\020\243\006\022\030\n\023YIELD_S"
  "IGN_APPROACH\020\204\007\022\025\n\020YIELD_SIGN_CREEP\020\205\007\022\027"
  "\n\022LEARNING_MODEL_RUN\020\350\007B\021\n\017scenario_conf"
  "ig\"\031\n\027PlannerPublicRoadConfig\"\257\002\n\021Planne"
  "rNaviConfig\0222\n\004task\030\001 \003(\0162$.apollo.plann"
  "ing.TaskConfig.TaskType\022H\n\030navi_path_dec"
  "ider_config\030\002 \001(\0132&.apollo.planning.Navi"
  "PathDeciderConfig\022J\n\031navi_speed_decider_"
  "config\030\003 \001(\0132\'.apollo.planning.NaviSpeed"
  "DeciderConfig\022P\n\034navi_obstacle_decider_c"
  "onfig\030\004 \001(\0132*.apollo.planning.NaviObstac"
  "leDeciderConfig\"G\n\021RtkPlanningConfig\0222\n\014"
  "planner_type\030\001 \001(\0162\034.apollo.planning.Pla"
  "nnerType\"\232\001\n\026StandardPlanningConfig\0222\n\014p"
  "lanner_type\030\001 \003(\0162\034.apollo.planning.Plan"
  "nerType\022L\n\032planner_public_road_config\030\002 "
  "\001(\0132(.apollo.planning.PlannerPublicRoadC"
  "onfig\"\217\001\n\030NavigationPlanningConfig\0222\n\014pl"
  "anner_type\030\001 \003(\0162\034.apollo.planning.Plann"
  "erType\022\?\n\023planner_navi_config\030\004 \001(\0132\".ap"
  "ollo.planning.PlannerNaviConfig\"\370\002\n\013Topi"
  "cConfig\022\025\n\rchassis_topic\030\001 \001(\t\022\030\n\020hmi_st"
  "atus_topic\030\002 \001(\t\022\032\n\022localization_topic\030\003"
  " \001(\t\022\032\n\022planning_pad_topic\030\004 \001(\t\022!\n\031plan"
  "ning_trajectory_topic\030\005 \001(\t\022\030\n\020predictio"
  "n_topic\030\006 \001(\t\022\032\n\022relative_map_topic\030\007 \001("
  "\t\022\035\n\025routing_request_topic\030\010 \001(\t\022\036\n\026rout"
  "ing_response_topic\030\t \001(\t\022\033\n\023story_tellin"
  "g_topic\030\n \001(\t\022%\n\035traffic_light_detection"
  "_topic\030\013 \001(\t\022$\n\034planning_learning_data_t"
  "opic\030\014 \001(\t\"\251\004\n\016PlanningConfig\0222\n\014topic_c"
  "onfig\030\001 \001(\0132\034.apollo.planning.TopicConfi"
  "g\022K\n\rlearning_mode\030\002 \001(\01624.apollo.planni"
  "ng.PlanningConfig.PlanningLearningMode\022A"
  "\n\023rtk_planning_config\030\003 \001(\0132\".apollo.pla"
  "nning.RtkPlanningConfigH\000\022K\n\030standard_pl"
  "anning_config\030\004 \001(\0132\'.apollo.planning.St"
  "andardPlanningConfigH\000\022O\n\032navigation_pla"
  "nning_config\030\005 \001(\0132).apollo.planning.Nav"
  "igationPlanningConfigH\000\0228\n\023default_task_"
  "config\030\006 \003(\0132\033.apollo.planning.TaskConfi"
  "g\"h\n\024PlanningLearningMode\022\017\n\013NO_LEARNING"
  "\020\000\022\007\n\003E2E\020\001\022\n\n\006HYBRID\020\002\022\013\n\007RL_TEST\020\003\022\014\n\010"
  "E2E_TEST\020\004\022\017\n\013HYBRID_TEST\020\005B\021\n\017planning_"
  "config*>\n\013PlannerType\022\007\n\003RTK\020\000\022\017\n\013PUBLIC"
  "_ROAD\020\001\022\010\n\004NAVI\020\002\022\013\n\007LATTICE\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = {
    false, false, 11030, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
    "modules/planning/proto/planning_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps, 2, 25,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskConfig_TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[0];
}
bool TaskConfig_TaskType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TaskConfig_TaskType TaskConfig::CREEP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::LANE_CHANGE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_OBSTACLE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_PATH_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::NAVI_SPEED_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_FALLBACK_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_PRE_STOP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_ROI_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_ASSESSMENT_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_BOUNDS_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_LANE_BORROW_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_REFERENCE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::PATH_REUSE_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::RSS_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::RULE_BASED_STOP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_PRIORI_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_FINAL_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::ST_BOUNDS_DECIDER;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PARTITION;
constexpr TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PROVIDER;
constexpr TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_PATH_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_SPEED_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::SPEED_HEURISTIC_OPTIMIZER;
constexpr TaskConfig_TaskType TaskConfig::LEARNING_MODEL_INFERENCE_TASK;
constexpr TaskConfig_TaskType TaskConfig::LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK;
constexpr TaskConfig_TaskType TaskConfig::TaskType_MIN;
constexpr TaskConfig_TaskType TaskConfig::TaskType_MAX;
constexpr int TaskConfig::TaskType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[1];
}
bool ScenarioConfig_ScenarioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ScenarioConfig_ScenarioType ScenarioConfig::LANE_FOLLOW;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_PROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_UNPROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::YIELD_SIGN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::PULL_OVER;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::VALET_PARKING;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::EMERGENCY_PULL_OVER;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::EMERGENCY_STOP;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::NARROW_STREET_U_TURN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::PARK_AND_GO;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::LEARNING_MODEL_SAMPLE;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::DEADEND_TURNAROUND;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MIN;
constexpr ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MAX;
constexpr int ScenarioConfig::ScenarioType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_StageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[2];
}
bool ScenarioConfig_StageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 200:
    case 201:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
    case 401:
    case 410:
    case 411:
    case 412:
    case 420:
    case 421:
    case 422:
    case 500:
    case 501:
    case 502:
    case 600:
    case 601:
    case 602:
    case 610:
    case 611:
    case 700:
    case 701:
    case 800:
    case 801:
    case 802:
    case 803:
    case 900:
    case 901:
    case 1000:
    case 1100:
    case 1101:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ScenarioConfig_StageType ScenarioConfig::NO_STAGE;
constexpr ScenarioConfig_StageType ScenarioConfig::LANE_FOLLOW_DEFAULT_STAGE;
constexpr ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_PRE_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_APPROACH_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_SLOW_DOWN;
constexpr ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_STANDBY;
constexpr ScenarioConfig_StageType ScenarioConfig::EMERGENCY_STOP_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::EMERGENCY_STOP_STANDBY;
constexpr ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_APPROACHING_PARKING_SPOT;
constexpr ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_PARKING;
constexpr ScenarioConfig_StageType ScenarioConfig::DEADEND_TURNAROUND_APPROACHING_TURNING_POINT;
constexpr ScenarioConfig_StageType ScenarioConfig::DEADEND_TURNAROUND_TURNING;
constexpr ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_CHECK;
constexpr ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_ADJUST;
constexpr ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_PRE_CRUISE;
constexpr ScenarioConfig_StageType ScenarioConfig::YIELD_SIGN_APPROACH;
constexpr ScenarioConfig_StageType ScenarioConfig::YIELD_SIGN_CREEP;
constexpr ScenarioConfig_StageType ScenarioConfig::LEARNING_MODEL_RUN;
constexpr ScenarioConfig_StageType ScenarioConfig::StageType_MIN;
constexpr ScenarioConfig_StageType ScenarioConfig::StageType_MAX;
constexpr int ScenarioConfig::StageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningConfig_PlanningLearningMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[3];
}
bool PlanningConfig_PlanningLearningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::NO_LEARNING;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::E2E;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::HYBRID;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::RL_TEST;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::E2E_TEST;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::HYBRID_TEST;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::PlanningLearningMode_MIN;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig::PlanningLearningMode_MAX;
constexpr int PlanningConfig::PlanningLearningMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlannerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[4];
}
bool PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TaskConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskConfig>()._impl_._has_bits_);
  static void set_has_task_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::CreepDeciderConfig& creep_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::LaneChangeDeciderConfig& lane_change_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceFallBackDeciderConfig& open_space_fallback_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpacePreStopDeciderConfig& open_space_pre_stop_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceRoiDeciderConfig& open_space_roi_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathAssessmentDeciderConfig& path_assessment_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathBoundsDeciderConfig& path_bounds_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathDeciderConfig& path_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathLaneBorrowDeciderConfig& path_lane_borrow_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathReferenceDeciderConfig& path_reference_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::PathReuseDeciderConfig& path_reuse_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::RuleBasedStopDeciderConfig& rule_based_stop_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::SpeedBoundsDeciderConfig& speed_bounds_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::STBoundsDeciderConfig& st_bounds_decider_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& open_space_trajectory_partition_config(const TaskConfig* msg);
  static const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& open_space_trajectory_provider_config(const TaskConfig* msg);
  static const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig& piecewise_jerk_nonlinear_speed_optimizer_config(const TaskConfig* msg);
  static const ::apollo::planning::PiecewiseJerkPathOptimizerConfig& piecewise_jerk_path_optimizer_config(const TaskConfig* msg);
  static const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& piecewise_jerk_speed_optimizer_config(const TaskConfig* msg);
  static const ::apollo::planning::SpeedHeuristicOptimizerConfig& speed_heuristic_optimizer_config(const TaskConfig* msg);
  static const ::apollo::planning::LearningModelInferenceTaskConfig& learning_model_inference_task_config(const TaskConfig* msg);
  static const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig& learning_model_inference_trajectory_task_config(const TaskConfig* msg);
};

const ::apollo::planning::CreepDeciderConfig&
TaskConfig::_Internal::creep_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.creep_decider_config_;
}
const ::apollo::planning::LaneChangeDeciderConfig&
TaskConfig::_Internal::lane_change_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.lane_change_decider_config_;
}
const ::apollo::planning::OpenSpaceFallBackDeciderConfig&
TaskConfig::_Internal::open_space_fallback_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.open_space_fallback_decider_config_;
}
const ::apollo::planning::OpenSpacePreStopDeciderConfig&
TaskConfig::_Internal::open_space_pre_stop_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.open_space_pre_stop_decider_config_;
}
const ::apollo::planning::OpenSpaceRoiDeciderConfig&
TaskConfig::_Internal::open_space_roi_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.open_space_roi_decider_config_;
}
const ::apollo::planning::PathAssessmentDeciderConfig&
TaskConfig::_Internal::path_assessment_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_assessment_decider_config_;
}
const ::apollo::planning::PathBoundsDeciderConfig&
TaskConfig::_Internal::path_bounds_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_bounds_decider_config_;
}
const ::apollo::planning::PathDeciderConfig&
TaskConfig::_Internal::path_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_decider_config_;
}
const ::apollo::planning::PathLaneBorrowDeciderConfig&
TaskConfig::_Internal::path_lane_borrow_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_lane_borrow_decider_config_;
}
const ::apollo::planning::PathReferenceDeciderConfig&
TaskConfig::_Internal::path_reference_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_reference_decider_config_;
}
const ::apollo::planning::PathReuseDeciderConfig&
TaskConfig::_Internal::path_reuse_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.path_reuse_decider_config_;
}
const ::apollo::planning::RuleBasedStopDeciderConfig&
TaskConfig::_Internal::rule_based_stop_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.rule_based_stop_decider_config_;
}
const ::apollo::planning::SpeedBoundsDeciderConfig&
TaskConfig::_Internal::speed_bounds_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.speed_bounds_decider_config_;
}
const ::apollo::planning::STBoundsDeciderConfig&
TaskConfig::_Internal::st_bounds_decider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.st_bounds_decider_config_;
}
const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig&
TaskConfig::_Internal::open_space_trajectory_partition_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.open_space_trajectory_partition_config_;
}
const ::apollo::planning::OpenSpaceTrajectoryProviderConfig&
TaskConfig::_Internal::open_space_trajectory_provider_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.open_space_trajectory_provider_config_;
}
const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig&
TaskConfig::_Internal::piecewise_jerk_nonlinear_speed_optimizer_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
}
const ::apollo::planning::PiecewiseJerkPathOptimizerConfig&
TaskConfig::_Internal::piecewise_jerk_path_optimizer_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.piecewise_jerk_path_optimizer_config_;
}
const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig&
TaskConfig::_Internal::piecewise_jerk_speed_optimizer_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
}
const ::apollo::planning::SpeedHeuristicOptimizerConfig&
TaskConfig::_Internal::speed_heuristic_optimizer_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.speed_heuristic_optimizer_config_;
}
const ::apollo::planning::LearningModelInferenceTaskConfig&
TaskConfig::_Internal::learning_model_inference_task_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.learning_model_inference_task_config_;
}
const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig&
TaskConfig::_Internal::learning_model_inference_trajectory_task_config(const TaskConfig* msg) {
  return *msg->_impl_.task_config_.learning_model_inference_trajectory_task_config_;
}
void TaskConfig::set_allocated_creep_decider_config(::apollo::planning::CreepDeciderConfig* creep_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (creep_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creep_decider_config));
    if (message_arena != submessage_arena) {
      creep_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creep_decider_config, submessage_arena);
    }
    set_has_creep_decider_config();
    _impl_.task_config_.creep_decider_config_ = creep_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.creep_decider_config)
}
void TaskConfig::clear_creep_decider_config() {
  if (_internal_has_creep_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.creep_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_lane_change_decider_config(::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (lane_change_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lane_change_decider_config));
    if (message_arena != submessage_arena) {
      lane_change_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_decider_config, submessage_arena);
    }
    set_has_lane_change_decider_config();
    _impl_.task_config_.lane_change_decider_config_ = lane_change_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.lane_change_decider_config)
}
void TaskConfig::clear_lane_change_decider_config() {
  if (_internal_has_lane_change_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.lane_change_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_fallback_decider_config(::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (open_space_fallback_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_space_fallback_decider_config));
    if (message_arena != submessage_arena) {
      open_space_fallback_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_fallback_decider_config, submessage_arena);
    }
    set_has_open_space_fallback_decider_config();
    _impl_.task_config_.open_space_fallback_decider_config_ = open_space_fallback_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_fallback_decider_config)
}
void TaskConfig::clear_open_space_fallback_decider_config() {
  if (_internal_has_open_space_fallback_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.open_space_fallback_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_pre_stop_decider_config(::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (open_space_pre_stop_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_space_pre_stop_decider_config));
    if (message_arena != submessage_arena) {
      open_space_pre_stop_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_pre_stop_decider_config, submessage_arena);
    }
    set_has_open_space_pre_stop_decider_config();
    _impl_.task_config_.open_space_pre_stop_decider_config_ = open_space_pre_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
}
void TaskConfig::clear_open_space_pre_stop_decider_config() {
  if (_internal_has_open_space_pre_stop_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.open_space_pre_stop_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_roi_decider_config(::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (open_space_roi_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_space_roi_decider_config));
    if (message_arena != submessage_arena) {
      open_space_roi_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_roi_decider_config, submessage_arena);
    }
    set_has_open_space_roi_decider_config();
    _impl_.task_config_.open_space_roi_decider_config_ = open_space_roi_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_roi_decider_config)
}
void TaskConfig::clear_open_space_roi_decider_config() {
  if (_internal_has_open_space_roi_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.open_space_roi_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_assessment_decider_config(::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_assessment_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_assessment_decider_config));
    if (message_arena != submessage_arena) {
      path_assessment_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_assessment_decider_config, submessage_arena);
    }
    set_has_path_assessment_decider_config();
    _impl_.task_config_.path_assessment_decider_config_ = path_assessment_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_assessment_decider_config)
}
void TaskConfig::clear_path_assessment_decider_config() {
  if (_internal_has_path_assessment_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_assessment_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_bounds_decider_config(::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_bounds_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_bounds_decider_config));
    if (message_arena != submessage_arena) {
      path_bounds_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_bounds_decider_config, submessage_arena);
    }
    set_has_path_bounds_decider_config();
    _impl_.task_config_.path_bounds_decider_config_ = path_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_bounds_decider_config)
}
void TaskConfig::clear_path_bounds_decider_config() {
  if (_internal_has_path_bounds_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_bounds_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_decider_config));
    if (message_arena != submessage_arena) {
      path_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_decider_config, submessage_arena);
    }
    set_has_path_decider_config();
    _impl_.task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_decider_config)
}
void TaskConfig::clear_path_decider_config() {
  if (_internal_has_path_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_lane_borrow_decider_config(::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_lane_borrow_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_lane_borrow_decider_config));
    if (message_arena != submessage_arena) {
      path_lane_borrow_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_lane_borrow_decider_config, submessage_arena);
    }
    set_has_path_lane_borrow_decider_config();
    _impl_.task_config_.path_lane_borrow_decider_config_ = path_lane_borrow_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
}
void TaskConfig::clear_path_lane_borrow_decider_config() {
  if (_internal_has_path_lane_borrow_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_lane_borrow_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_reference_decider_config(::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_reference_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_reference_decider_config));
    if (message_arena != submessage_arena) {
      path_reference_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_reference_decider_config, submessage_arena);
    }
    set_has_path_reference_decider_config();
    _impl_.task_config_.path_reference_decider_config_ = path_reference_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_reference_decider_config)
}
void TaskConfig::clear_path_reference_decider_config() {
  if (_internal_has_path_reference_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_reference_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_reuse_decider_config(::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (path_reuse_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_reuse_decider_config));
    if (message_arena != submessage_arena) {
      path_reuse_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_reuse_decider_config, submessage_arena);
    }
    set_has_path_reuse_decider_config();
    _impl_.task_config_.path_reuse_decider_config_ = path_reuse_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_reuse_decider_config)
}
void TaskConfig::clear_path_reuse_decider_config() {
  if (_internal_has_path_reuse_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.path_reuse_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_rule_based_stop_decider_config(::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (rule_based_stop_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_based_stop_decider_config));
    if (message_arena != submessage_arena) {
      rule_based_stop_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule_based_stop_decider_config, submessage_arena);
    }
    set_has_rule_based_stop_decider_config();
    _impl_.task_config_.rule_based_stop_decider_config_ = rule_based_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.rule_based_stop_decider_config)
}
void TaskConfig::clear_rule_based_stop_decider_config() {
  if (_internal_has_rule_based_stop_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.rule_based_stop_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_speed_bounds_decider_config(::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (speed_bounds_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_bounds_decider_config));
    if (message_arena != submessage_arena) {
      speed_bounds_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_bounds_decider_config, submessage_arena);
    }
    set_has_speed_bounds_decider_config();
    _impl_.task_config_.speed_bounds_decider_config_ = speed_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.speed_bounds_decider_config)
}
void TaskConfig::clear_speed_bounds_decider_config() {
  if (_internal_has_speed_bounds_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.speed_bounds_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_st_bounds_decider_config(::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (st_bounds_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(st_bounds_decider_config));
    if (message_arena != submessage_arena) {
      st_bounds_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, st_bounds_decider_config, submessage_arena);
    }
    set_has_st_bounds_decider_config();
    _impl_.task_config_.st_bounds_decider_config_ = st_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.st_bounds_decider_config)
}
void TaskConfig::clear_st_bounds_decider_config() {
  if (_internal_has_st_bounds_decider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.st_bounds_decider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_partition_config(::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (open_space_trajectory_partition_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_space_trajectory_partition_config));
    if (message_arena != submessage_arena) {
      open_space_trajectory_partition_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_partition_config, submessage_arena);
    }
    set_has_open_space_trajectory_partition_config();
    _impl_.task_config_.open_space_trajectory_partition_config_ = open_space_trajectory_partition_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
}
void TaskConfig::clear_open_space_trajectory_partition_config() {
  if (_internal_has_open_space_trajectory_partition_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.open_space_trajectory_partition_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_provider_config(::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (open_space_trajectory_provider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_space_trajectory_provider_config));
    if (message_arena != submessage_arena) {
      open_space_trajectory_provider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_provider_config, submessage_arena);
    }
    set_has_open_space_trajectory_provider_config();
    _impl_.task_config_.open_space_trajectory_provider_config_ = open_space_trajectory_provider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
}
void TaskConfig::clear_open_space_trajectory_provider_config() {
  if (_internal_has_open_space_trajectory_provider_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.open_space_trajectory_provider_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_nonlinear_speed_optimizer_config(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (piecewise_jerk_nonlinear_speed_optimizer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piecewise_jerk_nonlinear_speed_optimizer_config));
    if (message_arena != submessage_arena) {
      piecewise_jerk_nonlinear_speed_optimizer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_nonlinear_speed_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_nonlinear_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = piecewise_jerk_nonlinear_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_nonlinear_speed_optimizer_config() {
  if (_internal_has_piecewise_jerk_nonlinear_speed_optimizer_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_path_optimizer_config(::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (piecewise_jerk_path_optimizer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piecewise_jerk_path_optimizer_config));
    if (message_arena != submessage_arena) {
      piecewise_jerk_path_optimizer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_path_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_path_optimizer_config();
    _impl_.task_config_.piecewise_jerk_path_optimizer_config_ = piecewise_jerk_path_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_path_optimizer_config() {
  if (_internal_has_piecewise_jerk_path_optimizer_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.piecewise_jerk_path_optimizer_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_speed_optimizer_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (piecewise_jerk_speed_optimizer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(piecewise_jerk_speed_optimizer_config));
    if (message_arena != submessage_arena) {
      piecewise_jerk_speed_optimizer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_speed_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_speed_optimizer_config_ = piecewise_jerk_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_speed_optimizer_config() {
  if (_internal_has_piecewise_jerk_speed_optimizer_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_speed_heuristic_optimizer_config(::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (speed_heuristic_optimizer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_heuristic_optimizer_config));
    if (message_arena != submessage_arena) {
      speed_heuristic_optimizer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_heuristic_optimizer_config, submessage_arena);
    }
    set_has_speed_heuristic_optimizer_config();
    _impl_.task_config_.speed_heuristic_optimizer_config_ = speed_heuristic_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
}
void TaskConfig::clear_speed_heuristic_optimizer_config() {
  if (_internal_has_speed_heuristic_optimizer_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.speed_heuristic_optimizer_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_learning_model_inference_task_config(::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (learning_model_inference_task_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(learning_model_inference_task_config));
    if (message_arena != submessage_arena) {
      learning_model_inference_task_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, learning_model_inference_task_config, submessage_arena);
    }
    set_has_learning_model_inference_task_config();
    _impl_.task_config_.learning_model_inference_task_config_ = learning_model_inference_task_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.learning_model_inference_task_config)
}
void TaskConfig::clear_learning_model_inference_task_config() {
  if (_internal_has_learning_model_inference_task_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.learning_model_inference_task_config_;
    }
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_learning_model_inference_trajectory_task_config(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_task_config();
  if (learning_model_inference_trajectory_task_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(learning_model_inference_trajectory_task_config));
    if (message_arena != submessage_arena) {
      learning_model_inference_trajectory_task_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, learning_model_inference_trajectory_task_config, submessage_arena);
    }
    set_has_learning_model_inference_trajectory_task_config();
    _impl_.task_config_.learning_model_inference_trajectory_task_config_ = learning_model_inference_trajectory_task_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
}
void TaskConfig::clear_learning_model_inference_trajectory_task_config() {
  if (_internal_has_learning_model_inference_trajectory_task_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.task_config_.learning_model_inference_trajectory_task_config_;
    }
    clear_has_task_config();
  }
}
TaskConfig::TaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TaskConfig)
}
TaskConfig::TaskConfig(const TaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_type_){}
    , decltype(_impl_.task_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_type_ = from._impl_.task_type_;
  clear_has_task_config();
  switch (from.task_config_case()) {
    case kCreepDeciderConfig: {
      _internal_mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from._internal_creep_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      _internal_mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from._internal_lane_change_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      _internal_mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from._internal_open_space_fallback_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      _internal_mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from._internal_open_space_pre_stop_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      _internal_mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from._internal_open_space_roi_decider_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      _internal_mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from._internal_path_assessment_decider_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      _internal_mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from._internal_path_bounds_decider_config());
      break;
    }
    case kPathDeciderConfig: {
      _internal_mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from._internal_path_decider_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      _internal_mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from._internal_path_lane_borrow_decider_config());
      break;
    }
    case kPathReferenceDeciderConfig: {
      _internal_mutable_path_reference_decider_config()->::apollo::planning::PathReferenceDeciderConfig::MergeFrom(from._internal_path_reference_decider_config());
      break;
    }
    case kPathReuseDeciderConfig: {
      _internal_mutable_path_reuse_decider_config()->::apollo::planning::PathReuseDeciderConfig::MergeFrom(from._internal_path_reuse_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      _internal_mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from._internal_rule_based_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      _internal_mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from._internal_speed_bounds_decider_config());
      break;
    }
    case kStBoundsDeciderConfig: {
      _internal_mutable_st_bounds_decider_config()->::apollo::planning::STBoundsDeciderConfig::MergeFrom(from._internal_st_bounds_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      _internal_mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from._internal_open_space_trajectory_partition_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      _internal_mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from._internal_open_space_trajectory_provider_config());
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      _internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config()->::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_nonlinear_speed_optimizer_config());
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      _internal_mutable_piecewise_jerk_path_optimizer_config()->::apollo::planning::PiecewiseJerkPathOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_path_optimizer_config());
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      _internal_mutable_piecewise_jerk_speed_optimizer_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_speed_optimizer_config());
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      _internal_mutable_speed_heuristic_optimizer_config()->::apollo::planning::SpeedHeuristicOptimizerConfig::MergeFrom(from._internal_speed_heuristic_optimizer_config());
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      _internal_mutable_learning_model_inference_task_config()->::apollo::planning::LearningModelInferenceTaskConfig::MergeFrom(from._internal_learning_model_inference_task_config());
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      _internal_mutable_learning_model_inference_trajectory_task_config()->::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::MergeFrom(from._internal_learning_model_inference_trajectory_task_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskConfig)
}

inline void TaskConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_type_){1}
    , decltype(_impl_.task_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_task_config();
}

TaskConfig::~TaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_task_config()) {
    clear_task_config();
  }
}

void TaskConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskConfig::clear_task_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TaskConfig)
  switch (task_config_case()) {
    case kCreepDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.creep_decider_config_;
      }
      break;
    }
    case kLaneChangeDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.lane_change_decider_config_;
      }
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.open_space_fallback_decider_config_;
      }
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.open_space_pre_stop_decider_config_;
      }
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.open_space_roi_decider_config_;
      }
      break;
    }
    case kPathAssessmentDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_assessment_decider_config_;
      }
      break;
    }
    case kPathBoundsDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_bounds_decider_config_;
      }
      break;
    }
    case kPathDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_decider_config_;
      }
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_lane_borrow_decider_config_;
      }
      break;
    }
    case kPathReferenceDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_reference_decider_config_;
      }
      break;
    }
    case kPathReuseDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.path_reuse_decider_config_;
      }
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.rule_based_stop_decider_config_;
      }
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.speed_bounds_decider_config_;
      }
      break;
    }
    case kStBoundsDeciderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.st_bounds_decider_config_;
      }
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.open_space_trajectory_partition_config_;
      }
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.open_space_trajectory_provider_config_;
      }
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
      }
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.piecewise_jerk_path_optimizer_config_;
      }
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
      }
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.speed_heuristic_optimizer_config_;
      }
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.learning_model_inference_task_config_;
      }
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.task_config_.learning_model_inference_trajectory_task_config_;
      }
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TASK_CONFIG_NOT_SET;
}


void TaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_type_ = 1;
  clear_task_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
            _internal_set_task_type(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creep_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_change_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_fallback_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_pre_stop_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_roi_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_assessment_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_bounds_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathDeciderConfig path_decider_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_lane_borrow_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_reference_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_reuse_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule_based_stop_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_bounds_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_st_bounds_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_partition_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_space_trajectory_provider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_piecewise_jerk_path_optimizer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_piecewise_jerk_speed_optimizer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_heuristic_optimizer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_learning_model_inference_task_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_learning_model_inference_trajectory_task_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_task_type(), target);
  }

  switch (task_config_case()) {
    case kCreepDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::creep_decider_config(this),
          _Internal::creep_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kLaneChangeDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::lane_change_decider_config(this),
          _Internal::lane_change_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::open_space_fallback_decider_config(this),
          _Internal::open_space_fallback_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::open_space_pre_stop_decider_config(this),
          _Internal::open_space_pre_stop_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::open_space_roi_decider_config(this),
          _Internal::open_space_roi_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathAssessmentDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::path_assessment_decider_config(this),
          _Internal::path_assessment_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathBoundsDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::path_bounds_decider_config(this),
          _Internal::path_bounds_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::path_decider_config(this),
          _Internal::path_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::path_lane_borrow_decider_config(this),
          _Internal::path_lane_borrow_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathReferenceDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::path_reference_decider_config(this),
          _Internal::path_reference_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPathReuseDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::path_reuse_decider_config(this),
          _Internal::path_reuse_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::rule_based_stop_decider_config(this),
          _Internal::rule_based_stop_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::speed_bounds_decider_config(this),
          _Internal::speed_bounds_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kStBoundsDeciderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::st_bounds_decider_config(this),
          _Internal::st_bounds_decider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::open_space_trajectory_partition_config(this),
          _Internal::open_space_trajectory_partition_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::open_space_trajectory_provider_config(this),
          _Internal::open_space_trajectory_provider_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::piecewise_jerk_nonlinear_speed_optimizer_config(this),
          _Internal::piecewise_jerk_nonlinear_speed_optimizer_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::piecewise_jerk_path_optimizer_config(this),
          _Internal::piecewise_jerk_path_optimizer_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::piecewise_jerk_speed_optimizer_config(this),
          _Internal::piecewise_jerk_speed_optimizer_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::speed_heuristic_optimizer_config(this),
          _Internal::speed_heuristic_optimizer_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::learning_model_inference_task_config(this),
          _Internal::learning_model_inference_task_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::learning_model_inference_trajectory_task_config(this),
          _Internal::learning_model_inference_trajectory_task_config(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskConfig)
  return target;
}

size_t TaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_task_type());
  }

  switch (task_config_case()) {
    // .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
    case kCreepDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.creep_decider_config_);
      break;
    }
    // .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
    case kLaneChangeDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.lane_change_decider_config_);
      break;
    }
    // .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
    case kOpenSpaceFallbackDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.open_space_fallback_decider_config_);
      break;
    }
    // .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
    case kOpenSpacePreStopDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.open_space_pre_stop_decider_config_);
      break;
    }
    // .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
    case kOpenSpaceRoiDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.open_space_roi_decider_config_);
      break;
    }
    // .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
    case kPathAssessmentDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_assessment_decider_config_);
      break;
    }
    // .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
    case kPathBoundsDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_bounds_decider_config_);
      break;
    }
    // .apollo.planning.PathDeciderConfig path_decider_config = 9;
    case kPathDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_decider_config_);
      break;
    }
    // .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
    case kPathLaneBorrowDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_lane_borrow_decider_config_);
      break;
    }
    // .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
    case kPathReferenceDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_reference_decider_config_);
      break;
    }
    // .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
    case kPathReuseDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.path_reuse_decider_config_);
      break;
    }
    // .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
    case kRuleBasedStopDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.rule_based_stop_decider_config_);
      break;
    }
    // .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
    case kSpeedBoundsDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.speed_bounds_decider_config_);
      break;
    }
    // .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
    case kStBoundsDeciderConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.st_bounds_decider_config_);
      break;
    }
    // .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
    case kOpenSpaceTrajectoryPartitionConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.open_space_trajectory_partition_config_);
      break;
    }
    // .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
    case kOpenSpaceTrajectoryProviderConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.open_space_trajectory_provider_config_);
      break;
    }
    // .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_);
      break;
    }
    // .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
    case kPiecewiseJerkPathOptimizerConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.piecewise_jerk_path_optimizer_config_);
      break;
    }
    // .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
    case kPiecewiseJerkSpeedOptimizerConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.piecewise_jerk_speed_optimizer_config_);
      break;
    }
    // .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
    case kSpeedHeuristicOptimizerConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.speed_heuristic_optimizer_config_);
      break;
    }
    // .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
    case kLearningModelInferenceTaskConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.learning_model_inference_task_config_);
      break;
    }
    // .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
    case kLearningModelInferenceTrajectoryTaskConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.task_config_.learning_model_inference_trajectory_task_config_);
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskConfig::GetClassData() const { return &_class_data_; }

void TaskConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskConfig *>(to)->MergeFrom(
      static_cast<const TaskConfig &>(from));
}


void TaskConfig::MergeFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_task_type()) {
    _internal_set_task_type(from._internal_task_type());
  }
  switch (from.task_config_case()) {
    case kCreepDeciderConfig: {
      _internal_mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from._internal_creep_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      _internal_mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from._internal_lane_change_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      _internal_mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from._internal_open_space_fallback_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      _internal_mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from._internal_open_space_pre_stop_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      _internal_mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from._internal_open_space_roi_decider_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      _internal_mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from._internal_path_assessment_decider_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      _internal_mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from._internal_path_bounds_decider_config());
      break;
    }
    case kPathDeciderConfig: {
      _internal_mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from._internal_path_decider_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      _internal_mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from._internal_path_lane_borrow_decider_config());
      break;
    }
    case kPathReferenceDeciderConfig: {
      _internal_mutable_path_reference_decider_config()->::apollo::planning::PathReferenceDeciderConfig::MergeFrom(from._internal_path_reference_decider_config());
      break;
    }
    case kPathReuseDeciderConfig: {
      _internal_mutable_path_reuse_decider_config()->::apollo::planning::PathReuseDeciderConfig::MergeFrom(from._internal_path_reuse_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      _internal_mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from._internal_rule_based_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      _internal_mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from._internal_speed_bounds_decider_config());
      break;
    }
    case kStBoundsDeciderConfig: {
      _internal_mutable_st_bounds_decider_config()->::apollo::planning::STBoundsDeciderConfig::MergeFrom(from._internal_st_bounds_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      _internal_mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from._internal_open_space_trajectory_partition_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      _internal_mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from._internal_open_space_trajectory_provider_config());
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      _internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config()->::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_nonlinear_speed_optimizer_config());
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      _internal_mutable_piecewise_jerk_path_optimizer_config()->::apollo::planning::PiecewiseJerkPathOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_path_optimizer_config());
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      _internal_mutable_piecewise_jerk_speed_optimizer_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from._internal_piecewise_jerk_speed_optimizer_config());
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      _internal_mutable_speed_heuristic_optimizer_config()->::apollo::planning::SpeedHeuristicOptimizerConfig::MergeFrom(from._internal_speed_heuristic_optimizer_config());
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      _internal_mutable_learning_model_inference_task_config()->::apollo::planning::LearningModelInferenceTaskConfig::MergeFrom(from._internal_learning_model_inference_task_config());
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      _internal_mutable_learning_model_inference_trajectory_task_config()->::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::MergeFrom(from._internal_learning_model_inference_trajectory_task_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskConfig::CopyFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConfig::IsInitialized() const {
  return true;
}

void TaskConfig::InternalSwap(TaskConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.task_type_, other->_impl_.task_type_);
  swap(_impl_.task_config_, other->_impl_.task_config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[0]);
}

// ===================================================================

class ScenarioBareIntersectionUnprotectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioBareIntersectionUnprotectedConfig>()._impl_._has_bits_);
  static void set_has_start_bare_intersection_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_explicit_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_approach_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}
ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig(const ScenarioBareIntersectionUnprotectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_explicit_stop_){}
    , decltype(_impl_.start_bare_intersection_scenario_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.approach_cruise_speed_){}
    , decltype(_impl_.stop_distance_){}
    , decltype(_impl_.stop_timeout_sec_){}
    , decltype(_impl_.creep_timeout_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enable_explicit_stop_, &from._impl_.enable_explicit_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creep_timeout_sec_) -
    reinterpret_cast<char*>(&_impl_.enable_explicit_stop_)) + sizeof(_impl_.creep_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}

inline void ScenarioBareIntersectionUnprotectedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_explicit_stop_){false}
    , decltype(_impl_.start_bare_intersection_scenario_distance_){25}
    , decltype(_impl_.min_pass_s_distance_){3}
    , decltype(_impl_.approach_cruise_speed_){6.7056}
    , decltype(_impl_.stop_distance_){0.5}
    , decltype(_impl_.stop_timeout_sec_){8}
    , decltype(_impl_.creep_timeout_sec_){10}
  };
}

ScenarioBareIntersectionUnprotectedConfig::~ScenarioBareIntersectionUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioBareIntersectionUnprotectedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioBareIntersectionUnprotectedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioBareIntersectionUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    _impl_.enable_explicit_stop_ = false;
    _impl_.start_bare_intersection_scenario_distance_ = 25;
    _impl_.min_pass_s_distance_ = 3;
    _impl_.approach_cruise_speed_ = 6.7056;
    _impl_.stop_distance_ = 0.5;
    _impl_.stop_timeout_sec_ = 8;
    _impl_.creep_timeout_sec_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioBareIntersectionUnprotectedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_bare_intersection_scenario_distance(&has_bits);
          _impl_.start_bare_intersection_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_explicit_stop = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_explicit_stop(&has_bits);
          _impl_.enable_explicit_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double approach_cruise_speed = 4 [default = 6.7056];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_approach_cruise_speed(&has_bits);
          _impl_.approach_cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_timeout_sec = 6 [default = 8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_stop_timeout_sec(&has_bits);
          _impl_.stop_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          _impl_.creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioBareIntersectionUnprotectedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_bare_intersection_scenario_distance(), target);
  }

  // optional bool enable_explicit_stop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_explicit_stop(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional double approach_cruise_speed = 4 [default = 6.7056];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_approach_cruise_speed(), target);
  }

  // optional double stop_distance = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_stop_distance(), target);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  return target;
}

size_t ScenarioBareIntersectionUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool enable_explicit_stop = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double approach_cruise_speed = 4 [default = 6.7056];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float stop_timeout_sec = 6 [default = 8];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 7 [default = 10];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioBareIntersectionUnprotectedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioBareIntersectionUnprotectedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioBareIntersectionUnprotectedConfig::GetClassData() const { return &_class_data_; }

void ScenarioBareIntersectionUnprotectedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioBareIntersectionUnprotectedConfig *>(to)->MergeFrom(
      static_cast<const ScenarioBareIntersectionUnprotectedConfig &>(from));
}


void ScenarioBareIntersectionUnprotectedConfig::MergeFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enable_explicit_stop_ = from._impl_.enable_explicit_stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_bare_intersection_scenario_distance_ = from._impl_.start_bare_intersection_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.approach_cruise_speed_ = from._impl_.approach_cruise_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.stop_timeout_sec_ = from._impl_.stop_timeout_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.creep_timeout_sec_ = from._impl_.creep_timeout_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioBareIntersectionUnprotectedConfig::CopyFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioBareIntersectionUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioBareIntersectionUnprotectedConfig::InternalSwap(ScenarioBareIntersectionUnprotectedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_explicit_stop_, other->_impl_.enable_explicit_stop_);
  swap(_impl_.start_bare_intersection_scenario_distance_, other->_impl_.start_bare_intersection_scenario_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.approach_cruise_speed_, other->_impl_.approach_cruise_speed_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
  swap(_impl_.stop_timeout_sec_, other->_impl_.stop_timeout_sec_);
  swap(_impl_.creep_timeout_sec_, other->_impl_.creep_timeout_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioBareIntersectionUnprotectedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[1]);
}

// ===================================================================

class ScenarioEmergencyPullOverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioEmergencyPullOverConfig>()._impl_._has_bits_);
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slow_down_deceleration_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_slow_down_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScenarioEmergencyPullOverConfig::ScenarioEmergencyPullOverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioEmergencyPullOverConfig)
}
ScenarioEmergencyPullOverConfig::ScenarioEmergencyPullOverConfig(const ScenarioEmergencyPullOverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_stop_deceleration_){}
    , decltype(_impl_.slow_down_deceleration_time_){}
    , decltype(_impl_.target_slow_down_speed_){}
    , decltype(_impl_.stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_stop_deceleration_, &from._impl_.max_stop_deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_distance_) -
    reinterpret_cast<char*>(&_impl_.max_stop_deceleration_)) + sizeof(_impl_.stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioEmergencyPullOverConfig)
}

inline void ScenarioEmergencyPullOverConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_stop_deceleration_){3}
    , decltype(_impl_.slow_down_deceleration_time_){3}
    , decltype(_impl_.target_slow_down_speed_){2.5}
    , decltype(_impl_.stop_distance_){1.5}
  };
}

ScenarioEmergencyPullOverConfig::~ScenarioEmergencyPullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioEmergencyPullOverConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioEmergencyPullOverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioEmergencyPullOverConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioEmergencyPullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.max_stop_deceleration_ = 3;
    _impl_.slow_down_deceleration_time_ = 3;
    _impl_.target_slow_down_speed_ = 2.5;
    _impl_.stop_distance_ = 1.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioEmergencyPullOverConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_stop_deceleration = 1 [default = 3];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          _impl_.max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double slow_down_deceleration_time = 2 [default = 3];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_slow_down_deceleration_time(&has_bits);
          _impl_.slow_down_deceleration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double target_slow_down_speed = 3 [default = 2.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_target_slow_down_speed(&has_bits);
          _impl_.target_slow_down_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 4 [default = 1.5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioEmergencyPullOverConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_stop_deceleration(), target);
  }

  // optional double slow_down_deceleration_time = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_slow_down_deceleration_time(), target);
  }

  // optional double target_slow_down_speed = 3 [default = 2.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_target_slow_down_speed(), target);
  }

  // optional double stop_distance = 4 [default = 1.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioEmergencyPullOverConfig)
  return target;
}

size_t ScenarioEmergencyPullOverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double max_stop_deceleration = 1 [default = 3];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double slow_down_deceleration_time = 2 [default = 3];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double target_slow_down_speed = 3 [default = 2.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 4 [default = 1.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioEmergencyPullOverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioEmergencyPullOverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioEmergencyPullOverConfig::GetClassData() const { return &_class_data_; }

void ScenarioEmergencyPullOverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioEmergencyPullOverConfig *>(to)->MergeFrom(
      static_cast<const ScenarioEmergencyPullOverConfig &>(from));
}


void ScenarioEmergencyPullOverConfig::MergeFrom(const ScenarioEmergencyPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_stop_deceleration_ = from._impl_.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.slow_down_deceleration_time_ = from._impl_.slow_down_deceleration_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.target_slow_down_speed_ = from._impl_.target_slow_down_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioEmergencyPullOverConfig::CopyFrom(const ScenarioEmergencyPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioEmergencyPullOverConfig::IsInitialized() const {
  return true;
}

void ScenarioEmergencyPullOverConfig::InternalSwap(ScenarioEmergencyPullOverConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_stop_deceleration_, other->_impl_.max_stop_deceleration_);
  swap(_impl_.slow_down_deceleration_time_, other->_impl_.slow_down_deceleration_time_);
  swap(_impl_.target_slow_down_speed_, other->_impl_.target_slow_down_speed_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioEmergencyPullOverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[2]);
}

// ===================================================================

class ScenarioEmergencyStopConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioEmergencyStopConfig>()._impl_._has_bits_);
  static void set_has_max_stop_deceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioEmergencyStopConfig::ScenarioEmergencyStopConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioEmergencyStopConfig)
}
ScenarioEmergencyStopConfig::ScenarioEmergencyStopConfig(const ScenarioEmergencyStopConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_stop_deceleration_){}
    , decltype(_impl_.stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_stop_deceleration_, &from._impl_.max_stop_deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_distance_) -
    reinterpret_cast<char*>(&_impl_.max_stop_deceleration_)) + sizeof(_impl_.stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioEmergencyStopConfig)
}

inline void ScenarioEmergencyStopConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_stop_deceleration_){6}
    , decltype(_impl_.stop_distance_){1}
  };
}

ScenarioEmergencyStopConfig::~ScenarioEmergencyStopConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioEmergencyStopConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioEmergencyStopConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioEmergencyStopConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioEmergencyStopConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioEmergencyStopConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.max_stop_deceleration_ = 6;
    _impl_.stop_distance_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioEmergencyStopConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double max_stop_deceleration = 1 [default = 6];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_max_stop_deceleration(&has_bits);
          _impl_.max_stop_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_stop_distance(&has_bits);
          _impl_.stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioEmergencyStopConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioEmergencyStopConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_stop_deceleration(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioEmergencyStopConfig)
  return target;
}

size_t ScenarioEmergencyStopConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioEmergencyStopConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double max_stop_deceleration = 1 [default = 6];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioEmergencyStopConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioEmergencyStopConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioEmergencyStopConfig::GetClassData() const { return &_class_data_; }

void ScenarioEmergencyStopConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioEmergencyStopConfig *>(to)->MergeFrom(
      static_cast<const ScenarioEmergencyStopConfig &>(from));
}


void ScenarioEmergencyStopConfig::MergeFrom(const ScenarioEmergencyStopConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.max_stop_deceleration_ = from._impl_.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stop_distance_ = from._impl_.stop_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioEmergencyStopConfig::CopyFrom(const ScenarioEmergencyStopConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioEmergencyStopConfig::IsInitialized() const {
  return true;
}

void ScenarioEmergencyStopConfig::InternalSwap(ScenarioEmergencyStopConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_stop_deceleration_, other->_impl_.max_stop_deceleration_);
  swap(_impl_.stop_distance_, other->_impl_.stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioEmergencyStopConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[3]);
}

// ===================================================================

class ScenarioLaneFollowConfig::_Internal {
 public:
};

ScenarioLaneFollowConfig::ScenarioLaneFollowConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioLaneFollowConfig)
}
ScenarioLaneFollowConfig::ScenarioLaneFollowConfig(const ScenarioLaneFollowConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioLaneFollowConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioLaneFollowConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioLaneFollowConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ScenarioLaneFollowConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[4]);
}

// ===================================================================

class ScenarioLearningModelSampleConfig::_Internal {
 public:
};

ScenarioLearningModelSampleConfig::ScenarioLearningModelSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioLearningModelSampleConfig)
}
ScenarioLearningModelSampleConfig::ScenarioLearningModelSampleConfig(const ScenarioLearningModelSampleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioLearningModelSampleConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioLearningModelSampleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioLearningModelSampleConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ScenarioLearningModelSampleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[5]);
}

// ===================================================================

class ScenarioNarrowStreetUTurnConfig::_Internal {
 public:
};

ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}
ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig(const ScenarioNarrowStreetUTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioNarrowStreetUTurnConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioNarrowStreetUTurnConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ScenarioNarrowStreetUTurnConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[6]);
}

// ===================================================================

class ScenarioParkAndGoConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioParkAndGoConfig>()._impl_._has_bits_);
  static void set_has_front_obstacle_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_dist_to_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_steering_percentage_when_cruise(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ScenarioParkAndGoConfig::ScenarioParkAndGoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioParkAndGoConfig)
}
ScenarioParkAndGoConfig::ScenarioParkAndGoConfig(const ScenarioParkAndGoConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_obstacle_buffer_){}
    , decltype(_impl_.heading_buffer_){}
    , decltype(_impl_.min_dist_to_dest_){}
    , decltype(_impl_.max_steering_percentage_when_cruise_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.front_obstacle_buffer_, &from._impl_.front_obstacle_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_steering_percentage_when_cruise_) -
    reinterpret_cast<char*>(&_impl_.front_obstacle_buffer_)) + sizeof(_impl_.max_steering_percentage_when_cruise_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioParkAndGoConfig)
}

inline void ScenarioParkAndGoConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.front_obstacle_buffer_){4}
    , decltype(_impl_.heading_buffer_){0.5}
    , decltype(_impl_.min_dist_to_dest_){25}
    , decltype(_impl_.max_steering_percentage_when_cruise_){90}
  };
}

ScenarioParkAndGoConfig::~ScenarioParkAndGoConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioParkAndGoConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioParkAndGoConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioParkAndGoConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioParkAndGoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioParkAndGoConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.front_obstacle_buffer_ = 4;
    _impl_.heading_buffer_ = 0.5;
    _impl_.min_dist_to_dest_ = 25;
    _impl_.max_steering_percentage_when_cruise_ = 90;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioParkAndGoConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double front_obstacle_buffer = 1 [default = 4];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_front_obstacle_buffer(&has_bits);
          _impl_.front_obstacle_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_buffer = 2 [default = 0.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_heading_buffer(&has_bits);
          _impl_.heading_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_dist_to_dest = 3 [default = 25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_dist_to_dest(&has_bits);
          _impl_.min_dist_to_dest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_steering_percentage_when_cruise = 4 [default = 90];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_steering_percentage_when_cruise(&has_bits);
          _impl_.max_steering_percentage_when_cruise_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioParkAndGoConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioParkAndGoConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double front_obstacle_buffer = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_front_obstacle_buffer(), target);
  }

  // optional double heading_buffer = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_heading_buffer(), target);
  }

  // optional double min_dist_to_dest = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_dist_to_dest(), target);
  }

  // optional double max_steering_percentage_when_cruise = 4 [default = 90];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_steering_percentage_when_cruise(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioParkAndGoConfig)
  return target;
}

size_t ScenarioParkAndGoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioParkAndGoConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double front_obstacle_buffer = 1 [default = 4];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double heading_buffer = 2 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_dist_to_dest = 3 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_steering_percentage_when_cruise = 4 [default = 90];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioParkAndGoConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioParkAndGoConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioParkAndGoConfig::GetClassData() const { return &_class_data_; }

void ScenarioParkAndGoConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioParkAndGoConfig *>(to)->MergeFrom(
      static_cast<const ScenarioParkAndGoConfig &>(from));
}


void ScenarioParkAndGoConfig::MergeFrom(const ScenarioParkAndGoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioParkAndGoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.front_obstacle_buffer_ = from._impl_.front_obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.heading_buffer_ = from._impl_.heading_buffer_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_dist_to_dest_ = from._impl_.min_dist_to_dest_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_steering_percentage_when_cruise_ = from._impl_.max_steering_percentage_when_cruise_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioParkAndGoConfig::CopyFrom(const ScenarioParkAndGoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioParkAndGoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioParkAndGoConfig::IsInitialized() const {
  return true;
}

void ScenarioParkAndGoConfig::InternalSwap(ScenarioParkAndGoConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.front_obstacle_buffer_, other->_impl_.front_obstacle_buffer_);
  swap(_impl_.heading_buffer_, other->_impl_.heading_buffer_);
  swap(_impl_.min_dist_to_dest_, other->_impl_.min_dist_to_dest_);
  swap(_impl_.max_steering_percentage_when_cruise_, other->_impl_.max_steering_percentage_when_cruise_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioParkAndGoConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[7]);
}

// ===================================================================

class ScenarioPullOverConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioPullOverConfig>()._impl_._has_bits_);
  static void set_has_start_pull_over_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pull_over_min_distance_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_distance_stop_search(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_s_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_l_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_theta_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_distance_error_to_end_point(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pass_destination_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_s_distance_to_stop_for_open_space_parking(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

ScenarioPullOverConfig::ScenarioPullOverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioPullOverConfig)
}
ScenarioPullOverConfig::ScenarioPullOverConfig(const ScenarioPullOverConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_pull_over_scenario_distance_){}
    , decltype(_impl_.pull_over_min_distance_buffer_){}
    , decltype(_impl_.max_distance_stop_search_){}
    , decltype(_impl_.max_s_error_to_end_point_){}
    , decltype(_impl_.max_l_error_to_end_point_){}
    , decltype(_impl_.max_theta_error_to_end_point_){}
    , decltype(_impl_.max_distance_error_to_end_point_){}
    , decltype(_impl_.pass_destination_threshold_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.s_distance_to_stop_for_open_space_parking_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_pull_over_scenario_distance_, &from._impl_.start_pull_over_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.s_distance_to_stop_for_open_space_parking_) -
    reinterpret_cast<char*>(&_impl_.start_pull_over_scenario_distance_)) + sizeof(_impl_.s_distance_to_stop_for_open_space_parking_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioPullOverConfig)
}

inline void ScenarioPullOverConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_pull_over_scenario_distance_){50}
    , decltype(_impl_.pull_over_min_distance_buffer_){10}
    , decltype(_impl_.max_distance_stop_search_){25}
    , decltype(_impl_.max_s_error_to_end_point_){0.2}
    , decltype(_impl_.max_l_error_to_end_point_){0.5}
    , decltype(_impl_.max_theta_error_to_end_point_){0.2}
    , decltype(_impl_.max_distance_error_to_end_point_){0.2}
    , decltype(_impl_.pass_destination_threshold_){10}
    , decltype(_impl_.max_valid_stop_distance_){1}
    , decltype(_impl_.s_distance_to_stop_for_open_space_parking_){7}
  };
}

ScenarioPullOverConfig::~ScenarioPullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioPullOverConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioPullOverConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioPullOverConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioPullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioPullOverConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    _impl_.start_pull_over_scenario_distance_ = 50;
    _impl_.pull_over_min_distance_buffer_ = 10;
    _impl_.max_distance_stop_search_ = 25;
    _impl_.max_s_error_to_end_point_ = 0.2;
    _impl_.max_l_error_to_end_point_ = 0.5;
    _impl_.max_theta_error_to_end_point_ = 0.2;
    _impl_.max_distance_error_to_end_point_ = 0.2;
    _impl_.pass_destination_threshold_ = 10;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.max_valid_stop_distance_ = 1;
    _impl_.s_distance_to_stop_for_open_space_parking_ = 7;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioPullOverConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_pull_over_scenario_distance = 1 [default = 50];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_pull_over_scenario_distance(&has_bits);
          _impl_.start_pull_over_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pull_over_min_distance_buffer = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_pull_over_min_distance_buffer(&has_bits);
          _impl_.pull_over_min_distance_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_distance_stop_search = 3 [default = 25];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_distance_stop_search(&has_bits);
          _impl_.max_distance_stop_search_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_s_error_to_end_point = 4 [default = 0.2];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_max_s_error_to_end_point(&has_bits);
          _impl_.max_s_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_l_error_to_end_point = 5 [default = 0.5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_max_l_error_to_end_point(&has_bits);
          _impl_.max_l_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_theta_error_to_end_point = 6 [default = 0.2];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_max_theta_error_to_end_point(&has_bits);
          _impl_.max_theta_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_distance_error_to_end_point = 7 [default = 0.2];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_max_distance_error_to_end_point(&has_bits);
          _impl_.max_distance_error_to_end_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double pass_destination_threshold = 8 [default = 10];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_pass_destination_threshold(&has_bits);
          _impl_.pass_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 9 [default = 1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_s_distance_to_stop_for_open_space_parking(&has_bits);
          _impl_.s_distance_to_stop_for_open_space_parking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioPullOverConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioPullOverConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_pull_over_scenario_distance = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_pull_over_scenario_distance(), target);
  }

  // optional double pull_over_min_distance_buffer = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_pull_over_min_distance_buffer(), target);
  }

  // optional double max_distance_stop_search = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_distance_stop_search(), target);
  }

  // optional double max_s_error_to_end_point = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_s_error_to_end_point(), target);
  }

  // optional double max_l_error_to_end_point = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_l_error_to_end_point(), target);
  }

  // optional double max_theta_error_to_end_point = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_theta_error_to_end_point(), target);
  }

  // optional double max_distance_error_to_end_point = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_distance_error_to_end_point(), target);
  }

  // optional double pass_destination_threshold = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_pass_destination_threshold(), target);
  }

  // optional double max_valid_stop_distance = 9 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_s_distance_to_stop_for_open_space_parking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioPullOverConfig)
  return target;
}

size_t ScenarioPullOverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioPullOverConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double start_pull_over_scenario_distance = 1 [default = 50];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double pull_over_min_distance_buffer = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_distance_stop_search = 3 [default = 25];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_s_error_to_end_point = 4 [default = 0.2];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_l_error_to_end_point = 5 [default = 0.5];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double max_theta_error_to_end_point = 6 [default = 0.2];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double max_distance_error_to_end_point = 7 [default = 0.2];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double pass_destination_threshold = 8 [default = 10];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional double max_valid_stop_distance = 9 [default = 1];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioPullOverConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioPullOverConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioPullOverConfig::GetClassData() const { return &_class_data_; }

void ScenarioPullOverConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioPullOverConfig *>(to)->MergeFrom(
      static_cast<const ScenarioPullOverConfig &>(from));
}


void ScenarioPullOverConfig::MergeFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_pull_over_scenario_distance_ = from._impl_.start_pull_over_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pull_over_min_distance_buffer_ = from._impl_.pull_over_min_distance_buffer_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_distance_stop_search_ = from._impl_.max_distance_stop_search_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_s_error_to_end_point_ = from._impl_.max_s_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.max_l_error_to_end_point_ = from._impl_.max_l_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_theta_error_to_end_point_ = from._impl_.max_theta_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.max_distance_error_to_end_point_ = from._impl_.max_distance_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.pass_destination_threshold_ = from._impl_.pass_destination_threshold_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.s_distance_to_stop_for_open_space_parking_ = from._impl_.s_distance_to_stop_for_open_space_parking_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioPullOverConfig::CopyFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioPullOverConfig::IsInitialized() const {
  return true;
}

void ScenarioPullOverConfig::InternalSwap(ScenarioPullOverConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.start_pull_over_scenario_distance_, other->_impl_.start_pull_over_scenario_distance_);
  swap(_impl_.pull_over_min_distance_buffer_, other->_impl_.pull_over_min_distance_buffer_);
  swap(_impl_.max_distance_stop_search_, other->_impl_.max_distance_stop_search_);
  swap(_impl_.max_s_error_to_end_point_, other->_impl_.max_s_error_to_end_point_);
  swap(_impl_.max_l_error_to_end_point_, other->_impl_.max_l_error_to_end_point_);
  swap(_impl_.max_theta_error_to_end_point_, other->_impl_.max_theta_error_to_end_point_);
  swap(_impl_.max_distance_error_to_end_point_, other->_impl_.max_distance_error_to_end_point_);
  swap(_impl_.pass_destination_threshold_, other->_impl_.pass_destination_threshold_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.s_distance_to_stop_for_open_space_parking_, other->_impl_.s_distance_to_stop_for_open_space_parking_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioPullOverConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[8]);
}

// ===================================================================

class ScenarioStopSignUnprotectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioStopSignUnprotectedConfig>()._impl_._has_bits_);
  static void set_has_start_stop_sign_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_watch_vehicle_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stop_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}
ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig(const ScenarioStopSignUnprotectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){}
    , decltype(_impl_.start_stop_sign_scenario_distance_){}
    , decltype(_impl_.watch_vehicle_max_valid_stop_distance_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.stop_duration_sec_){}
    , decltype(_impl_.stop_timeout_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.creep_timeout_sec_, &from._impl_.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_timeout_sec_) -
    reinterpret_cast<char*>(&_impl_.creep_timeout_sec_)) + sizeof(_impl_.stop_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}

inline void ScenarioStopSignUnprotectedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){10}
    , decltype(_impl_.start_stop_sign_scenario_distance_){5}
    , decltype(_impl_.watch_vehicle_max_valid_stop_distance_){5}
    , decltype(_impl_.max_valid_stop_distance_){3.5}
    , decltype(_impl_.min_pass_s_distance_){3}
    , decltype(_impl_.stop_duration_sec_){1}
    , decltype(_impl_.stop_timeout_sec_){8}
  };
}

ScenarioStopSignUnprotectedConfig::~ScenarioStopSignUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioStopSignUnprotectedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioStopSignUnprotectedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioStopSignUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    _impl_.creep_timeout_sec_ = 10;
    _impl_.start_stop_sign_scenario_distance_ = 5;
    _impl_.watch_vehicle_max_valid_stop_distance_ = 5;
    _impl_.max_valid_stop_distance_ = 3.5;
    _impl_.min_pass_s_distance_ = 3;
    _impl_.stop_duration_sec_ = 1;
    _impl_.stop_timeout_sec_ = 8;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioStopSignUnprotectedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_stop_sign_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_stop_sign_scenario_distance(&has_bits);
          _impl_.start_stop_sign_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_watch_vehicle_max_valid_stop_distance(&has_bits);
          _impl_.watch_vehicle_max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_duration_sec = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_stop_duration_sec(&has_bits);
          _impl_.stop_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_timeout_sec = 6 [default = 8];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_stop_timeout_sec(&has_bits);
          _impl_.stop_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 7 [default = 10];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          _impl_.creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioStopSignUnprotectedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_stop_sign_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_stop_sign_scenario_distance(), target);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_watch_vehicle_max_valid_stop_distance(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional float stop_duration_sec = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_stop_duration_sec(), target);
  }

  // optional double min_pass_s_distance = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_min_pass_s_distance(), target);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioStopSignUnprotectedConfig)
  return target;
}

size_t ScenarioStopSignUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional float creep_timeout_sec = 7 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional double start_stop_sign_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional float stop_duration_sec = 4 [default = 1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float stop_timeout_sec = 6 [default = 8];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioStopSignUnprotectedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioStopSignUnprotectedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioStopSignUnprotectedConfig::GetClassData() const { return &_class_data_; }

void ScenarioStopSignUnprotectedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioStopSignUnprotectedConfig *>(to)->MergeFrom(
      static_cast<const ScenarioStopSignUnprotectedConfig &>(from));
}


void ScenarioStopSignUnprotectedConfig::MergeFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.creep_timeout_sec_ = from._impl_.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_stop_sign_scenario_distance_ = from._impl_.start_stop_sign_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.watch_vehicle_max_valid_stop_distance_ = from._impl_.watch_vehicle_max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.stop_duration_sec_ = from._impl_.stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.stop_timeout_sec_ = from._impl_.stop_timeout_sec_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioStopSignUnprotectedConfig::CopyFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioStopSignUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioStopSignUnprotectedConfig::InternalSwap(ScenarioStopSignUnprotectedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.creep_timeout_sec_, other->_impl_.creep_timeout_sec_);
  swap(_impl_.start_stop_sign_scenario_distance_, other->_impl_.start_stop_sign_scenario_distance_);
  swap(_impl_.watch_vehicle_max_valid_stop_distance_, other->_impl_.watch_vehicle_max_valid_stop_distance_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.stop_duration_sec_, other->_impl_.stop_duration_sec_);
  swap(_impl_.stop_timeout_sec_, other->_impl_.stop_timeout_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioStopSignUnprotectedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[9]);
}

// ===================================================================

class ScenarioTrafficLightProtectedConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightProtectedConfig>()._impl_._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}
ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig(const ScenarioTrafficLightProtectedConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_traffic_light_scenario_distance_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_traffic_light_scenario_distance_, &from._impl_.start_traffic_light_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_pass_s_distance_) -
    reinterpret_cast<char*>(&_impl_.start_traffic_light_scenario_distance_)) + sizeof(_impl_.min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}

inline void ScenarioTrafficLightProtectedConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_traffic_light_scenario_distance_){5}
    , decltype(_impl_.max_valid_stop_distance_){2}
    , decltype(_impl_.min_pass_s_distance_){3}
  };
}

ScenarioTrafficLightProtectedConfig::~ScenarioTrafficLightProtectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioTrafficLightProtectedConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioTrafficLightProtectedConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioTrafficLightProtectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.start_traffic_light_scenario_distance_ = 5;
    _impl_.max_valid_stop_distance_ = 2;
    _impl_.min_pass_s_distance_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioTrafficLightProtectedConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          _impl_.start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 2];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioTrafficLightProtectedConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightProtectedConfig)
  return target;
}

size_t ScenarioTrafficLightProtectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioTrafficLightProtectedConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioTrafficLightProtectedConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioTrafficLightProtectedConfig::GetClassData() const { return &_class_data_; }

void ScenarioTrafficLightProtectedConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioTrafficLightProtectedConfig *>(to)->MergeFrom(
      static_cast<const ScenarioTrafficLightProtectedConfig &>(from));
}


void ScenarioTrafficLightProtectedConfig::MergeFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_traffic_light_scenario_distance_ = from._impl_.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioTrafficLightProtectedConfig::CopyFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightProtectedConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightProtectedConfig::InternalSwap(ScenarioTrafficLightProtectedConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.start_traffic_light_scenario_distance_, other->_impl_.start_traffic_light_scenario_distance_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightProtectedConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[10]);
}

// ===================================================================

class ScenarioTrafficLightUnprotectedLeftTurnConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightUnprotectedLeftTurnConfig>()._impl_._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_approach_cruise_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_adc_speed_before_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}
ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){}
    , decltype(_impl_.start_traffic_light_scenario_distance_){}
    , decltype(_impl_.approach_cruise_speed_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.max_adc_speed_before_creep_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.creep_timeout_sec_, &from._impl_.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_adc_speed_before_creep_) -
    reinterpret_cast<char*>(&_impl_.creep_timeout_sec_)) + sizeof(_impl_.max_adc_speed_before_creep_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}

inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){10}
    , decltype(_impl_.start_traffic_light_scenario_distance_){5}
    , decltype(_impl_.approach_cruise_speed_){2.78}
    , decltype(_impl_.max_valid_stop_distance_){3.5}
    , decltype(_impl_.min_pass_s_distance_){3}
    , decltype(_impl_.max_adc_speed_before_creep_){5.56}
  };
}

ScenarioTrafficLightUnprotectedLeftTurnConfig::~ScenarioTrafficLightUnprotectedLeftTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    _impl_.creep_timeout_sec_ = 10;
    _impl_.start_traffic_light_scenario_distance_ = 5;
    _impl_.approach_cruise_speed_ = 2.78;
    _impl_.max_valid_stop_distance_ = 3.5;
    _impl_.min_pass_s_distance_ = 3;
    _impl_.max_adc_speed_before_creep_ = 5.56;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioTrafficLightUnprotectedLeftTurnConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          _impl_.start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double approach_cruise_speed = 2 [default = 2.78];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_approach_cruise_speed(&has_bits);
          _impl_.approach_cruise_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 4 [default = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 5 [default = 10];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          _impl_.creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double max_adc_speed_before_creep = 6 [default = 5.56];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_max_adc_speed_before_creep(&has_bits);
          _impl_.max_adc_speed_before_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioTrafficLightUnprotectedLeftTurnConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional double approach_cruise_speed = 2 [default = 2.78];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_approach_cruise_speed(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_pass_s_distance(), target);
  }

  // optional float creep_timeout_sec = 5 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_creep_timeout_sec(), target);
  }

  // optional double max_adc_speed_before_creep = 6 [default = 5.56];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_adc_speed_before_creep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedLeftTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float creep_timeout_sec = 5 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double approach_cruise_speed = 2 [default = 2.78];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double max_adc_speed_before_creep = 6 [default = 5.56];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioTrafficLightUnprotectedLeftTurnConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioTrafficLightUnprotectedLeftTurnConfig::GetClassData() const { return &_class_data_; }

void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioTrafficLightUnprotectedLeftTurnConfig *>(to)->MergeFrom(
      static_cast<const ScenarioTrafficLightUnprotectedLeftTurnConfig &>(from));
}


void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.creep_timeout_sec_ = from._impl_.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_traffic_light_scenario_distance_ = from._impl_.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.approach_cruise_speed_ = from._impl_.approach_cruise_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_adc_speed_before_creep_ = from._impl_.max_adc_speed_before_creep_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedLeftTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.creep_timeout_sec_, other->_impl_.creep_timeout_sec_);
  swap(_impl_.start_traffic_light_scenario_distance_, other->_impl_.start_traffic_light_scenario_distance_);
  swap(_impl_.approach_cruise_speed_, other->_impl_.approach_cruise_speed_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.max_adc_speed_before_creep_, other->_impl_.max_adc_speed_before_creep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightUnprotectedLeftTurnConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[11]);
}

// ===================================================================

class ScenarioTrafficLightUnprotectedRightTurnConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioTrafficLightUnprotectedRightTurnConfig>()._impl_._has_bits_);
  static void set_has_start_traffic_light_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enable_right_turn_on_red(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_red_light_right_turn_stop_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_adc_speed_before_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}
ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig(const ScenarioTrafficLightUnprotectedRightTurnConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_right_turn_on_red_){}
    , decltype(_impl_.start_traffic_light_scenario_distance_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}
    , decltype(_impl_.red_light_right_turn_stop_duration_sec_){}
    , decltype(_impl_.creep_timeout_sec_){}
    , decltype(_impl_.max_adc_speed_before_creep_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enable_right_turn_on_red_, &from._impl_.enable_right_turn_on_red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_adc_speed_before_creep_) -
    reinterpret_cast<char*>(&_impl_.enable_right_turn_on_red_)) + sizeof(_impl_.max_adc_speed_before_creep_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}

inline void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_right_turn_on_red_){false}
    , decltype(_impl_.start_traffic_light_scenario_distance_){5}
    , decltype(_impl_.max_valid_stop_distance_){3.5}
    , decltype(_impl_.min_pass_s_distance_){3}
    , decltype(_impl_.red_light_right_turn_stop_duration_sec_){3}
    , decltype(_impl_.creep_timeout_sec_){10}
    , decltype(_impl_.max_adc_speed_before_creep_){3}
  };
}

ScenarioTrafficLightUnprotectedRightTurnConfig::~ScenarioTrafficLightUnprotectedRightTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    _impl_.enable_right_turn_on_red_ = false;
    _impl_.start_traffic_light_scenario_distance_ = 5;
    _impl_.max_valid_stop_distance_ = 3.5;
    _impl_.min_pass_s_distance_ = 3;
    _impl_.red_light_right_turn_stop_duration_sec_ = 3;
    _impl_.creep_timeout_sec_ = 10;
    _impl_.max_adc_speed_before_creep_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioTrafficLightUnprotectedRightTurnConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_traffic_light_scenario_distance(&has_bits);
          _impl_.start_traffic_light_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool enable_right_turn_on_red = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enable_right_turn_on_red(&has_bits);
          _impl_.enable_right_turn_on_red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 4 [default = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_red_light_right_turn_stop_duration_sec(&has_bits);
          _impl_.red_light_right_turn_stop_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          _impl_.creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double max_adc_speed_before_creep = 7 [default = 3];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_max_adc_speed_before_creep(&has_bits);
          _impl_.max_adc_speed_before_creep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioTrafficLightUnprotectedRightTurnConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_traffic_light_scenario_distance(), target);
  }

  // optional bool enable_right_turn_on_red = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_right_turn_on_red(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_pass_s_distance(), target);
  }

  // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_red_light_right_turn_stop_duration_sec(), target);
  }

  // optional float creep_timeout_sec = 6 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_creep_timeout_sec(), target);
  }

  // optional double max_adc_speed_before_creep = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_max_adc_speed_before_creep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedRightTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bool enable_right_turn_on_red = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 6 [default = 10];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional double max_adc_speed_before_creep = 7 [default = 3];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioTrafficLightUnprotectedRightTurnConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioTrafficLightUnprotectedRightTurnConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioTrafficLightUnprotectedRightTurnConfig::GetClassData() const { return &_class_data_; }

void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioTrafficLightUnprotectedRightTurnConfig *>(to)->MergeFrom(
      static_cast<const ScenarioTrafficLightUnprotectedRightTurnConfig &>(from));
}


void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.enable_right_turn_on_red_ = from._impl_.enable_right_turn_on_red_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_traffic_light_scenario_distance_ = from._impl_.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.red_light_right_turn_stop_duration_sec_ = from._impl_.red_light_right_turn_stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.creep_timeout_sec_ = from._impl_.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.max_adc_speed_before_creep_ = from._impl_.max_adc_speed_before_creep_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedRightTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_right_turn_on_red_, other->_impl_.enable_right_turn_on_red_);
  swap(_impl_.start_traffic_light_scenario_distance_, other->_impl_.start_traffic_light_scenario_distance_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
  swap(_impl_.red_light_right_turn_stop_duration_sec_, other->_impl_.red_light_right_turn_stop_duration_sec_);
  swap(_impl_.creep_timeout_sec_, other->_impl_.creep_timeout_sec_);
  swap(_impl_.max_adc_speed_before_creep_, other->_impl_.max_adc_speed_before_creep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioTrafficLightUnprotectedRightTurnConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[12]);
}

// ===================================================================

class ScenarioValetParkingConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioValetParkingConfig>()._impl_._has_bits_);
  static void set_has_parking_spot_range_to_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioValetParkingConfig::ScenarioValetParkingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioValetParkingConfig)
}
ScenarioValetParkingConfig::ScenarioValetParkingConfig(const ScenarioValetParkingConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_spot_range_to_start_){}
    , decltype(_impl_.max_valid_stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.parking_spot_range_to_start_, &from._impl_.parking_spot_range_to_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_valid_stop_distance_) -
    reinterpret_cast<char*>(&_impl_.parking_spot_range_to_start_)) + sizeof(_impl_.max_valid_stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioValetParkingConfig)
}

inline void ScenarioValetParkingConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.parking_spot_range_to_start_){20}
    , decltype(_impl_.max_valid_stop_distance_){1}
  };
}

ScenarioValetParkingConfig::~ScenarioValetParkingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioValetParkingConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioValetParkingConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioValetParkingConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioValetParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioValetParkingConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.parking_spot_range_to_start_ = 20;
    _impl_.max_valid_stop_distance_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioValetParkingConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double parking_spot_range_to_start = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_parking_spot_range_to_start(&has_bits);
          _impl_.parking_spot_range_to_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioValetParkingConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioValetParkingConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double parking_spot_range_to_start = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_parking_spot_range_to_start(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioValetParkingConfig)
  return target;
}

size_t ScenarioValetParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioValetParkingConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double parking_spot_range_to_start = 1 [default = 20];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioValetParkingConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioValetParkingConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioValetParkingConfig::GetClassData() const { return &_class_data_; }

void ScenarioValetParkingConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioValetParkingConfig *>(to)->MergeFrom(
      static_cast<const ScenarioValetParkingConfig &>(from));
}


void ScenarioValetParkingConfig::MergeFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioValetParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.parking_spot_range_to_start_ = from._impl_.parking_spot_range_to_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioValetParkingConfig::CopyFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioValetParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioValetParkingConfig::IsInitialized() const {
  return true;
}

void ScenarioValetParkingConfig::InternalSwap(ScenarioValetParkingConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.parking_spot_range_to_start_, other->_impl_.parking_spot_range_to_start_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioValetParkingConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[13]);
}

// ===================================================================

class ScenarioDeadEndTurnAroundConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioDeadEndTurnAroundConfig>()._impl_._has_bits_);
  static void set_has_dead_end_start_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioDeadEndTurnAroundConfig::ScenarioDeadEndTurnAroundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
}
ScenarioDeadEndTurnAroundConfig::ScenarioDeadEndTurnAroundConfig(const ScenarioDeadEndTurnAroundConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dead_end_start_range_){}
    , decltype(_impl_.max_valid_stop_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dead_end_start_range_, &from._impl_.dead_end_start_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_valid_stop_distance_) -
    reinterpret_cast<char*>(&_impl_.dead_end_start_range_)) + sizeof(_impl_.max_valid_stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
}

inline void ScenarioDeadEndTurnAroundConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dead_end_start_range_){20}
    , decltype(_impl_.max_valid_stop_distance_){1}
  };
}

ScenarioDeadEndTurnAroundConfig::~ScenarioDeadEndTurnAroundConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioDeadEndTurnAroundConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioDeadEndTurnAroundConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioDeadEndTurnAroundConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.dead_end_start_range_ = 20;
    _impl_.max_valid_stop_distance_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioDeadEndTurnAroundConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double dead_end_start_range = 1 [default = 20];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_dead_end_start_range(&has_bits);
          _impl_.dead_end_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioDeadEndTurnAroundConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double dead_end_start_range = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_dead_end_start_range(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  return target;
}

size_t ScenarioDeadEndTurnAroundConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double dead_end_start_range = 1 [default = 20];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioDeadEndTurnAroundConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioDeadEndTurnAroundConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioDeadEndTurnAroundConfig::GetClassData() const { return &_class_data_; }

void ScenarioDeadEndTurnAroundConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioDeadEndTurnAroundConfig *>(to)->MergeFrom(
      static_cast<const ScenarioDeadEndTurnAroundConfig &>(from));
}


void ScenarioDeadEndTurnAroundConfig::MergeFrom(const ScenarioDeadEndTurnAroundConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.dead_end_start_range_ = from._impl_.dead_end_start_range_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioDeadEndTurnAroundConfig::CopyFrom(const ScenarioDeadEndTurnAroundConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioDeadEndTurnAroundConfig::IsInitialized() const {
  return true;
}

void ScenarioDeadEndTurnAroundConfig::InternalSwap(ScenarioDeadEndTurnAroundConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dead_end_start_range_, other->_impl_.dead_end_start_range_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioDeadEndTurnAroundConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[14]);
}

// ===================================================================

class ScenarioYieldSignConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioYieldSignConfig>()._impl_._has_bits_);
  static void set_has_start_yield_sign_scenario_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_valid_stop_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_pass_s_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creep_timeout_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ScenarioYieldSignConfig::ScenarioYieldSignConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioYieldSignConfig)
}
ScenarioYieldSignConfig::ScenarioYieldSignConfig(const ScenarioYieldSignConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){}
    , decltype(_impl_.start_yield_sign_scenario_distance_){}
    , decltype(_impl_.max_valid_stop_distance_){}
    , decltype(_impl_.min_pass_s_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.creep_timeout_sec_, &from._impl_.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_pass_s_distance_) -
    reinterpret_cast<char*>(&_impl_.creep_timeout_sec_)) + sizeof(_impl_.min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioYieldSignConfig)
}

inline void ScenarioYieldSignConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.creep_timeout_sec_){10}
    , decltype(_impl_.start_yield_sign_scenario_distance_){10}
    , decltype(_impl_.max_valid_stop_distance_){4.5}
    , decltype(_impl_.min_pass_s_distance_){3}
  };
}

ScenarioYieldSignConfig::~ScenarioYieldSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioYieldSignConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioYieldSignConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScenarioYieldSignConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioYieldSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioYieldSignConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    _impl_.creep_timeout_sec_ = 10;
    _impl_.start_yield_sign_scenario_distance_ = 10;
    _impl_.max_valid_stop_distance_ = 4.5;
    _impl_.min_pass_s_distance_ = 3;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioYieldSignConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_yield_sign_scenario_distance = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_yield_sign_scenario_distance(&has_bits);
          _impl_.start_yield_sign_scenario_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_valid_stop_distance = 2 [default = 4.5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_valid_stop_distance(&has_bits);
          _impl_.max_valid_stop_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double min_pass_s_distance = 3 [default = 3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_min_pass_s_distance(&has_bits);
          _impl_.min_pass_s_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional float creep_timeout_sec = 4 [default = 10];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_creep_timeout_sec(&has_bits);
          _impl_.creep_timeout_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioYieldSignConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioYieldSignConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_yield_sign_scenario_distance = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_yield_sign_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 4.5];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_min_pass_s_distance(), target);
  }

  // optional float creep_timeout_sec = 4 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_creep_timeout_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioYieldSignConfig)
  return target;
}

size_t ScenarioYieldSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioYieldSignConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float creep_timeout_sec = 4 [default = 10];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional double start_yield_sign_scenario_distance = 1 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 4.5];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioYieldSignConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioYieldSignConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioYieldSignConfig::GetClassData() const { return &_class_data_; }

void ScenarioYieldSignConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioYieldSignConfig *>(to)->MergeFrom(
      static_cast<const ScenarioYieldSignConfig &>(from));
}


void ScenarioYieldSignConfig::MergeFrom(const ScenarioYieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioYieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.creep_timeout_sec_ = from._impl_.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.start_yield_sign_scenario_distance_ = from._impl_.start_yield_sign_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.max_valid_stop_distance_ = from._impl_.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.min_pass_s_distance_ = from._impl_.min_pass_s_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioYieldSignConfig::CopyFrom(const ScenarioYieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioYieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioYieldSignConfig::IsInitialized() const {
  return true;
}

void ScenarioYieldSignConfig::InternalSwap(ScenarioYieldSignConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.creep_timeout_sec_, other->_impl_.creep_timeout_sec_);
  swap(_impl_.start_yield_sign_scenario_distance_, other->_impl_.start_yield_sign_scenario_distance_);
  swap(_impl_.max_valid_stop_distance_, other->_impl_.max_valid_stop_distance_);
  swap(_impl_.min_pass_s_distance_, other->_impl_.min_pass_s_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioYieldSignConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[15]);
}

// ===================================================================

class ScenarioConfig_StageConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioConfig_StageConfig>()._impl_._has_bits_);
  static void set_has_stage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ScenarioConfig_StageConfig::ScenarioConfig_StageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioConfig.StageConfig)
}
ScenarioConfig_StageConfig::ScenarioConfig_StageConfig(const ScenarioConfig_StageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_type_){from._impl_.task_type_}
    , decltype(_impl_.task_config_){from._impl_.task_config_}
    , decltype(_impl_.stage_type_){}
    , decltype(_impl_.enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stage_type_, &from._impl_.stage_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enabled_) -
    reinterpret_cast<char*>(&_impl_.stage_type_)) + sizeof(_impl_.enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig.StageConfig)
}

inline void ScenarioConfig_StageConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_type_){arena}
    , decltype(_impl_.task_config_){arena}
    , decltype(_impl_.stage_type_){0}
    , decltype(_impl_.enabled_){true}
  };
}

ScenarioConfig_StageConfig::~ScenarioConfig_StageConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig.StageConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioConfig_StageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_type_.~RepeatedField();
  _impl_.task_config_.~RepeatedPtrField();
}

void ScenarioConfig_StageConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioConfig_StageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig.StageConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_type_.Clear();
  _impl_.task_config_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.stage_type_ = 0;
    _impl_.enabled_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioConfig_StageConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
            _internal_set_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool enabled = 2 [default = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
              _internal_add_task_type(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_task_type(), ptr, ctx, ::apollo::planning::TaskConfig_TaskType_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig task_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioConfig_StageConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig.StageConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage_type(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enabled(), target);
  }

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  for (int i = 0, n = this->_internal_task_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_task_type(i), target);
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig.StageConfig)
  return target;
}

size_t ScenarioConfig_StageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig.StageConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_task_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  total_size += 1UL * this->_internal_task_config_size();
  for (const auto& msg : this->_impl_.task_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stage_type());
    }

    // optional bool enabled = 2 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioConfig_StageConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioConfig_StageConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioConfig_StageConfig::GetClassData() const { return &_class_data_; }

void ScenarioConfig_StageConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioConfig_StageConfig *>(to)->MergeFrom(
      static_cast<const ScenarioConfig_StageConfig &>(from));
}


void ScenarioConfig_StageConfig::MergeFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig.StageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.task_type_.MergeFrom(from._impl_.task_type_);
  _impl_.task_config_.MergeFrom(from._impl_.task_config_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stage_type_ = from._impl_.stage_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.enabled_ = from._impl_.enabled_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioConfig_StageConfig::CopyFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig_StageConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig_StageConfig::InternalSwap(ScenarioConfig_StageConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_type_.InternalSwap(&other->_impl_.task_type_);
  _impl_.task_config_.InternalSwap(&other->_impl_.task_config_);
  swap(_impl_.stage_type_, other->_impl_.stage_type_);
  swap(_impl_.enabled_, other->_impl_.enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioConfig_StageConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[16]);
}

// ===================================================================

class ScenarioConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ScenarioConfig>()._impl_._has_bits_);
  static void set_has_scenario_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::ScenarioLaneFollowConfig& lane_follow_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& bare_intersection_unprotected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioEmergencyPullOverConfig& emergency_pull_over_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioEmergencyStopConfig& emergency_stop_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioLearningModelSampleConfig& learning_model_sample_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& narrow_street_u_turn_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioParkAndGoConfig& park_and_go_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioPullOverConfig& pull_over_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioStopSignUnprotectedConfig& stop_sign_unprotected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightProtectedConfig& traffic_light_protected_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& traffic_light_unprotected_left_turn_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& traffic_light_unprotected_right_turn_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioValetParkingConfig& valet_parking_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioYieldSignConfig& yield_sign_config(const ScenarioConfig* msg);
  static const ::apollo::planning::ScenarioDeadEndTurnAroundConfig& deadend_turnaround_config(const ScenarioConfig* msg);
};

const ::apollo::planning::ScenarioLaneFollowConfig&
ScenarioConfig::_Internal::lane_follow_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.lane_follow_config_;
}
const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig&
ScenarioConfig::_Internal::bare_intersection_unprotected_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.bare_intersection_unprotected_config_;
}
const ::apollo::planning::ScenarioEmergencyPullOverConfig&
ScenarioConfig::_Internal::emergency_pull_over_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.emergency_pull_over_config_;
}
const ::apollo::planning::ScenarioEmergencyStopConfig&
ScenarioConfig::_Internal::emergency_stop_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.emergency_stop_config_;
}
const ::apollo::planning::ScenarioLearningModelSampleConfig&
ScenarioConfig::_Internal::learning_model_sample_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.learning_model_sample_config_;
}
const ::apollo::planning::ScenarioNarrowStreetUTurnConfig&
ScenarioConfig::_Internal::narrow_street_u_turn_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.narrow_street_u_turn_config_;
}
const ::apollo::planning::ScenarioParkAndGoConfig&
ScenarioConfig::_Internal::park_and_go_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.park_and_go_config_;
}
const ::apollo::planning::ScenarioPullOverConfig&
ScenarioConfig::_Internal::pull_over_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.pull_over_config_;
}
const ::apollo::planning::ScenarioStopSignUnprotectedConfig&
ScenarioConfig::_Internal::stop_sign_unprotected_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.stop_sign_unprotected_config_;
}
const ::apollo::planning::ScenarioTrafficLightProtectedConfig&
ScenarioConfig::_Internal::traffic_light_protected_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.traffic_light_protected_config_;
}
const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig&
ScenarioConfig::_Internal::traffic_light_unprotected_left_turn_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
}
const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig&
ScenarioConfig::_Internal::traffic_light_unprotected_right_turn_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
}
const ::apollo::planning::ScenarioValetParkingConfig&
ScenarioConfig::_Internal::valet_parking_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.valet_parking_config_;
}
const ::apollo::planning::ScenarioYieldSignConfig&
ScenarioConfig::_Internal::yield_sign_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.yield_sign_config_;
}
const ::apollo::planning::ScenarioDeadEndTurnAroundConfig&
ScenarioConfig::_Internal::deadend_turnaround_config(const ScenarioConfig* msg) {
  return *msg->_impl_.scenario_config_.deadend_turnaround_config_;
}
void ScenarioConfig::set_allocated_lane_follow_config(::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (lane_follow_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_follow_config);
    if (message_arena != submessage_arena) {
      lane_follow_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_follow_config, submessage_arena);
    }
    set_has_lane_follow_config();
    _impl_.scenario_config_.lane_follow_config_ = lane_follow_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.lane_follow_config)
}
void ScenarioConfig::set_allocated_bare_intersection_unprotected_config(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (bare_intersection_unprotected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bare_intersection_unprotected_config);
    if (message_arena != submessage_arena) {
      bare_intersection_unprotected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bare_intersection_unprotected_config, submessage_arena);
    }
    set_has_bare_intersection_unprotected_config();
    _impl_.scenario_config_.bare_intersection_unprotected_config_ = bare_intersection_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
}
void ScenarioConfig::set_allocated_emergency_pull_over_config(::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (emergency_pull_over_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emergency_pull_over_config);
    if (message_arena != submessage_arena) {
      emergency_pull_over_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_pull_over_config, submessage_arena);
    }
    set_has_emergency_pull_over_config();
    _impl_.scenario_config_.emergency_pull_over_config_ = emergency_pull_over_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.emergency_pull_over_config)
}
void ScenarioConfig::set_allocated_emergency_stop_config(::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (emergency_stop_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emergency_stop_config);
    if (message_arena != submessage_arena) {
      emergency_stop_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_stop_config, submessage_arena);
    }
    set_has_emergency_stop_config();
    _impl_.scenario_config_.emergency_stop_config_ = emergency_stop_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.emergency_stop_config)
}
void ScenarioConfig::set_allocated_learning_model_sample_config(::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (learning_model_sample_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(learning_model_sample_config);
    if (message_arena != submessage_arena) {
      learning_model_sample_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, learning_model_sample_config, submessage_arena);
    }
    set_has_learning_model_sample_config();
    _impl_.scenario_config_.learning_model_sample_config_ = learning_model_sample_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.learning_model_sample_config)
}
void ScenarioConfig::set_allocated_narrow_street_u_turn_config(::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (narrow_street_u_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(narrow_street_u_turn_config);
    if (message_arena != submessage_arena) {
      narrow_street_u_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narrow_street_u_turn_config, submessage_arena);
    }
    set_has_narrow_street_u_turn_config();
    _impl_.scenario_config_.narrow_street_u_turn_config_ = narrow_street_u_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
}
void ScenarioConfig::set_allocated_park_and_go_config(::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (park_and_go_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(park_and_go_config);
    if (message_arena != submessage_arena) {
      park_and_go_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, park_and_go_config, submessage_arena);
    }
    set_has_park_and_go_config();
    _impl_.scenario_config_.park_and_go_config_ = park_and_go_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.park_and_go_config)
}
void ScenarioConfig::set_allocated_pull_over_config(::apollo::planning::ScenarioPullOverConfig* pull_over_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (pull_over_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pull_over_config);
    if (message_arena != submessage_arena) {
      pull_over_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pull_over_config, submessage_arena);
    }
    set_has_pull_over_config();
    _impl_.scenario_config_.pull_over_config_ = pull_over_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.pull_over_config)
}
void ScenarioConfig::set_allocated_stop_sign_unprotected_config(::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (stop_sign_unprotected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_sign_unprotected_config);
    if (message_arena != submessage_arena) {
      stop_sign_unprotected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_sign_unprotected_config, submessage_arena);
    }
    set_has_stop_sign_unprotected_config();
    _impl_.scenario_config_.stop_sign_unprotected_config_ = stop_sign_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
}
void ScenarioConfig::set_allocated_traffic_light_protected_config(::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (traffic_light_protected_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_light_protected_config);
    if (message_arena != submessage_arena) {
      traffic_light_protected_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_protected_config, submessage_arena);
    }
    set_has_traffic_light_protected_config();
    _impl_.scenario_config_.traffic_light_protected_config_ = traffic_light_protected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_protected_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_left_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (traffic_light_unprotected_left_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_light_unprotected_left_turn_config);
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_left_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_left_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_left_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_ = traffic_light_unprotected_left_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_right_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (traffic_light_unprotected_right_turn_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(traffic_light_unprotected_right_turn_config);
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_right_turn_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_right_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_right_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_ = traffic_light_unprotected_right_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
}
void ScenarioConfig::set_allocated_valet_parking_config(::apollo::planning::ScenarioValetParkingConfig* valet_parking_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (valet_parking_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(valet_parking_config);
    if (message_arena != submessage_arena) {
      valet_parking_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valet_parking_config, submessage_arena);
    }
    set_has_valet_parking_config();
    _impl_.scenario_config_.valet_parking_config_ = valet_parking_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.valet_parking_config)
}
void ScenarioConfig::set_allocated_yield_sign_config(::apollo::planning::ScenarioYieldSignConfig* yield_sign_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (yield_sign_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yield_sign_config);
    if (message_arena != submessage_arena) {
      yield_sign_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yield_sign_config, submessage_arena);
    }
    set_has_yield_sign_config();
    _impl_.scenario_config_.yield_sign_config_ = yield_sign_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.yield_sign_config)
}
void ScenarioConfig::set_allocated_deadend_turnaround_config(::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_scenario_config();
  if (deadend_turnaround_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deadend_turnaround_config);
    if (message_arena != submessage_arena) {
      deadend_turnaround_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deadend_turnaround_config, submessage_arena);
    }
    set_has_deadend_turnaround_config();
    _impl_.scenario_config_.deadend_turnaround_config_ = deadend_turnaround_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.deadend_turnaround_config)
}
ScenarioConfig::ScenarioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.ScenarioConfig)
}
ScenarioConfig::ScenarioConfig(const ScenarioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_type_){from._impl_.stage_type_}
    , decltype(_impl_.stage_config_){from._impl_.stage_config_}
    , decltype(_impl_.scenario_type_){}
    , decltype(_impl_.scenario_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.scenario_type_ = from._impl_.scenario_type_;
  clear_has_scenario_config();
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      _internal_mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from._internal_lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      _internal_mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from._internal_bare_intersection_unprotected_config());
      break;
    }
    case kEmergencyPullOverConfig: {
      _internal_mutable_emergency_pull_over_config()->::apollo::planning::ScenarioEmergencyPullOverConfig::MergeFrom(from._internal_emergency_pull_over_config());
      break;
    }
    case kEmergencyStopConfig: {
      _internal_mutable_emergency_stop_config()->::apollo::planning::ScenarioEmergencyStopConfig::MergeFrom(from._internal_emergency_stop_config());
      break;
    }
    case kLearningModelSampleConfig: {
      _internal_mutable_learning_model_sample_config()->::apollo::planning::ScenarioLearningModelSampleConfig::MergeFrom(from._internal_learning_model_sample_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      _internal_mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from._internal_narrow_street_u_turn_config());
      break;
    }
    case kParkAndGoConfig: {
      _internal_mutable_park_and_go_config()->::apollo::planning::ScenarioParkAndGoConfig::MergeFrom(from._internal_park_and_go_config());
      break;
    }
    case kPullOverConfig: {
      _internal_mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from._internal_pull_over_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      _internal_mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from._internal_stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      _internal_mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from._internal_traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      _internal_mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_left_turn_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      _internal_mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_right_turn_config());
      break;
    }
    case kValetParkingConfig: {
      _internal_mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from._internal_valet_parking_config());
      break;
    }
    case kYieldSignConfig: {
      _internal_mutable_yield_sign_config()->::apollo::planning::ScenarioYieldSignConfig::MergeFrom(from._internal_yield_sign_config());
      break;
    }
    case kDeadendTurnaroundConfig: {
      _internal_mutable_deadend_turnaround_config()->::apollo::planning::ScenarioDeadEndTurnAroundConfig::MergeFrom(from._internal_deadend_turnaround_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig)
}

inline void ScenarioConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stage_type_){arena}
    , decltype(_impl_.stage_config_){arena}
    , decltype(_impl_.scenario_type_){0}
    , decltype(_impl_.scenario_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_scenario_config();
}

ScenarioConfig::~ScenarioConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScenarioConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stage_type_.~RepeatedField();
  _impl_.stage_config_.~RepeatedPtrField();
  if (has_scenario_config()) {
    clear_scenario_config();
  }
}

void ScenarioConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScenarioConfig::clear_scenario_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ScenarioConfig)
  switch (scenario_config_case()) {
    case kLaneFollowConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.lane_follow_config_;
      }
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.bare_intersection_unprotected_config_;
      }
      break;
    }
    case kEmergencyPullOverConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.emergency_pull_over_config_;
      }
      break;
    }
    case kEmergencyStopConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.emergency_stop_config_;
      }
      break;
    }
    case kLearningModelSampleConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.learning_model_sample_config_;
      }
      break;
    }
    case kNarrowStreetUTurnConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.narrow_street_u_turn_config_;
      }
      break;
    }
    case kParkAndGoConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.park_and_go_config_;
      }
      break;
    }
    case kPullOverConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.pull_over_config_;
      }
      break;
    }
    case kStopSignUnprotectedConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.stop_sign_unprotected_config_;
      }
      break;
    }
    case kTrafficLightProtectedConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.traffic_light_protected_config_;
      }
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
      }
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
      }
      break;
    }
    case kValetParkingConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.valet_parking_config_;
      }
      break;
    }
    case kYieldSignConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.yield_sign_config_;
      }
      break;
    }
    case kDeadendTurnaroundConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.scenario_config_.deadend_turnaround_config_;
      }
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SCENARIO_CONFIG_NOT_SET;
}


void ScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stage_type_.Clear();
  _impl_.stage_config_.Clear();
  _impl_.scenario_type_ = 0;
  clear_scenario_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScenarioConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(val))) {
            _internal_set_scenario_type(static_cast<::apollo::planning::ScenarioConfig_ScenarioType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_follow_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bare_intersection_unprotected_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_emergency_pull_over_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_emergency_stop_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_learning_model_sample_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_narrow_street_u_turn_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_park_and_go_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull_over_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_sign_unprotected_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_protected_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_unprotected_left_turn_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light_unprotected_right_turn_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_valet_parking_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_yield_sign_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::ScenarioConfig_StageType_IsValid(val))) {
              _internal_add_stage_type(static_cast<::apollo::planning::ScenarioConfig_StageType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_stage_type(), ptr, ctx, ::apollo::planning::ScenarioConfig_StageType_IsValid, &_internal_metadata_, 16);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_stage_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_deadend_turnaround_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScenarioConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scenario_type(), target);
  }

  switch (scenario_config_case()) {
    case kLaneFollowConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::lane_follow_config(this),
          _Internal::lane_follow_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::bare_intersection_unprotected_config(this),
          _Internal::bare_intersection_unprotected_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmergencyPullOverConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::emergency_pull_over_config(this),
          _Internal::emergency_pull_over_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmergencyStopConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::emergency_stop_config(this),
          _Internal::emergency_stop_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kLearningModelSampleConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::learning_model_sample_config(this),
          _Internal::learning_model_sample_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kNarrowStreetUTurnConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::narrow_street_u_turn_config(this),
          _Internal::narrow_street_u_turn_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kParkAndGoConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::park_and_go_config(this),
          _Internal::park_and_go_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kPullOverConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::pull_over_config(this),
          _Internal::pull_over_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kStopSignUnprotectedConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::stop_sign_unprotected_config(this),
          _Internal::stop_sign_unprotected_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrafficLightProtectedConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::traffic_light_protected_config(this),
          _Internal::traffic_light_protected_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::traffic_light_unprotected_left_turn_config(this),
          _Internal::traffic_light_unprotected_left_turn_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::traffic_light_unprotected_right_turn_config(this),
          _Internal::traffic_light_unprotected_right_turn_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kValetParkingConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::valet_parking_config(this),
          _Internal::valet_parking_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kYieldSignConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::yield_sign_config(this),
          _Internal::yield_sign_config(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  for (int i = 0, n = this->_internal_stage_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        16, this->_internal_stage_type(i), target);
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stage_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_stage_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
  if (_internal_has_deadend_turnaround_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::deadend_turnaround_config(this),
        _Internal::deadend_turnaround_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig)
  return target;
}

size_t ScenarioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_stage_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_stage_type(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  total_size += 2UL * this->_internal_stage_config_size();
  for (const auto& msg : this->_impl_.stage_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_scenario_type());
  }

  switch (scenario_config_case()) {
    // .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
    case kLaneFollowConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.lane_follow_config_);
      break;
    }
    // .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
    case kBareIntersectionUnprotectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.bare_intersection_unprotected_config_);
      break;
    }
    // .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
    case kEmergencyPullOverConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.emergency_pull_over_config_);
      break;
    }
    // .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
    case kEmergencyStopConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.emergency_stop_config_);
      break;
    }
    // .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
    case kLearningModelSampleConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.learning_model_sample_config_);
      break;
    }
    // .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
    case kNarrowStreetUTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.narrow_street_u_turn_config_);
      break;
    }
    // .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
    case kParkAndGoConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.park_and_go_config_);
      break;
    }
    // .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
    case kPullOverConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.pull_over_config_);
      break;
    }
    // .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
    case kStopSignUnprotectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.stop_sign_unprotected_config_);
      break;
    }
    // .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
    case kTrafficLightProtectedConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.traffic_light_protected_config_);
      break;
    }
    // .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
    case kTrafficLightUnprotectedLeftTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.traffic_light_unprotected_left_turn_config_);
      break;
    }
    // .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
    case kTrafficLightUnprotectedRightTurnConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.traffic_light_unprotected_right_turn_config_);
      break;
    }
    // .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
    case kValetParkingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.valet_parking_config_);
      break;
    }
    // .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
    case kYieldSignConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.yield_sign_config_);
      break;
    }
    // .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
    case kDeadendTurnaroundConfig: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_config_.deadend_turnaround_config_);
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScenarioConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScenarioConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScenarioConfig::GetClassData() const { return &_class_data_; }

void ScenarioConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScenarioConfig *>(to)->MergeFrom(
      static_cast<const ScenarioConfig &>(from));
}


void ScenarioConfig::MergeFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.stage_type_.MergeFrom(from._impl_.stage_type_);
  _impl_.stage_config_.MergeFrom(from._impl_.stage_config_);
  if (from._internal_has_scenario_type()) {
    _internal_set_scenario_type(from._internal_scenario_type());
  }
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      _internal_mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from._internal_lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      _internal_mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from._internal_bare_intersection_unprotected_config());
      break;
    }
    case kEmergencyPullOverConfig: {
      _internal_mutable_emergency_pull_over_config()->::apollo::planning::ScenarioEmergencyPullOverConfig::MergeFrom(from._internal_emergency_pull_over_config());
      break;
    }
    case kEmergencyStopConfig: {
      _internal_mutable_emergency_stop_config()->::apollo::planning::ScenarioEmergencyStopConfig::MergeFrom(from._internal_emergency_stop_config());
      break;
    }
    case kLearningModelSampleConfig: {
      _internal_mutable_learning_model_sample_config()->::apollo::planning::ScenarioLearningModelSampleConfig::MergeFrom(from._internal_learning_model_sample_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      _internal_mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from._internal_narrow_street_u_turn_config());
      break;
    }
    case kParkAndGoConfig: {
      _internal_mutable_park_and_go_config()->::apollo::planning::ScenarioParkAndGoConfig::MergeFrom(from._internal_park_and_go_config());
      break;
    }
    case kPullOverConfig: {
      _internal_mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from._internal_pull_over_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      _internal_mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from._internal_stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      _internal_mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from._internal_traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      _internal_mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_left_turn_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      _internal_mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from._internal_traffic_light_unprotected_right_turn_config());
      break;
    }
    case kValetParkingConfig: {
      _internal_mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from._internal_valet_parking_config());
      break;
    }
    case kYieldSignConfig: {
      _internal_mutable_yield_sign_config()->::apollo::planning::ScenarioYieldSignConfig::MergeFrom(from._internal_yield_sign_config());
      break;
    }
    case kDeadendTurnaroundConfig: {
      _internal_mutable_deadend_turnaround_config()->::apollo::planning::ScenarioDeadEndTurnAroundConfig::MergeFrom(from._internal_deadend_turnaround_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScenarioConfig::CopyFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig::InternalSwap(ScenarioConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stage_type_.InternalSwap(&other->_impl_.stage_type_);
  _impl_.stage_config_.InternalSwap(&other->_impl_.stage_config_);
  swap(_impl_.scenario_type_, other->_impl_.scenario_type_);
  swap(_impl_.scenario_config_, other->_impl_.scenario_config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScenarioConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[17]);
}

// ===================================================================

class PlannerPublicRoadConfig::_Internal {
 public:
};

PlannerPublicRoadConfig::PlannerPublicRoadConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlannerPublicRoadConfig)
}
PlannerPublicRoadConfig::PlannerPublicRoadConfig(const PlannerPublicRoadConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  new (&_impl_) Impl_{};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerPublicRoadConfig)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlannerPublicRoadConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlannerPublicRoadConfig::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PlannerPublicRoadConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[18]);
}

// ===================================================================

class PlannerNaviConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlannerNaviConfig>()._impl_._has_bits_);
  static const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_path_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_speed_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::NaviObstacleDeciderConfig& navi_obstacle_decider_config(const PlannerNaviConfig* msg);
  static void set_has_navi_obstacle_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::planning::NaviPathDeciderConfig&
PlannerNaviConfig::_Internal::navi_path_decider_config(const PlannerNaviConfig* msg) {
  return *msg->_impl_.navi_path_decider_config_;
}
const ::apollo::planning::NaviSpeedDeciderConfig&
PlannerNaviConfig::_Internal::navi_speed_decider_config(const PlannerNaviConfig* msg) {
  return *msg->_impl_.navi_speed_decider_config_;
}
const ::apollo::planning::NaviObstacleDeciderConfig&
PlannerNaviConfig::_Internal::navi_obstacle_decider_config(const PlannerNaviConfig* msg) {
  return *msg->_impl_.navi_obstacle_decider_config_;
}
void PlannerNaviConfig::clear_navi_path_decider_config() {
  if (_impl_.navi_path_decider_config_ != nullptr) _impl_.navi_path_decider_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlannerNaviConfig::clear_navi_speed_decider_config() {
  if (_impl_.navi_speed_decider_config_ != nullptr) _impl_.navi_speed_decider_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PlannerNaviConfig::clear_navi_obstacle_decider_config() {
  if (_impl_.navi_obstacle_decider_config_ != nullptr) _impl_.navi_obstacle_decider_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PlannerNaviConfig::PlannerNaviConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlannerNaviConfig)
}
PlannerNaviConfig::PlannerNaviConfig(const PlannerNaviConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){from._impl_.task_}
    , decltype(_impl_.navi_path_decider_config_){nullptr}
    , decltype(_impl_.navi_speed_decider_config_){nullptr}
    , decltype(_impl_.navi_obstacle_decider_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navi_path_decider_config()) {
    _impl_.navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig(*from._impl_.navi_path_decider_config_);
  }
  if (from._internal_has_navi_speed_decider_config()) {
    _impl_.navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig(*from._impl_.navi_speed_decider_config_);
  }
  if (from._internal_has_navi_obstacle_decider_config()) {
    _impl_.navi_obstacle_decider_config_ = new ::apollo::planning::NaviObstacleDeciderConfig(*from._impl_.navi_obstacle_decider_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerNaviConfig)
}

inline void PlannerNaviConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){arena}
    , decltype(_impl_.navi_path_decider_config_){nullptr}
    , decltype(_impl_.navi_speed_decider_config_){nullptr}
    , decltype(_impl_.navi_obstacle_decider_config_){nullptr}
  };
}

PlannerNaviConfig::~PlannerNaviConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerNaviConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlannerNaviConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.navi_path_decider_config_;
  if (this != internal_default_instance()) delete _impl_.navi_speed_decider_config_;
  if (this != internal_default_instance()) delete _impl_.navi_obstacle_decider_config_;
}

void PlannerNaviConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlannerNaviConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerNaviConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.navi_path_decider_config_ != nullptr);
      _impl_.navi_path_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.navi_speed_decider_config_ != nullptr);
      _impl_.navi_speed_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.navi_obstacle_decider_config_ != nullptr);
      _impl_.navi_obstacle_decider_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlannerNaviConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TaskConfig.TaskType task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskConfig_TaskType_IsValid(val))) {
              _internal_add_task(static_cast<::apollo::planning::TaskConfig_TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_task(), ptr, ctx, ::apollo::planning::TaskConfig_TaskType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_path_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_speed_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_obstacle_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlannerNaviConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerNaviConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  for (int i = 0, n = this->_internal_task_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_task(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::navi_path_decider_config(this),
        _Internal::navi_path_decider_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::navi_speed_decider_config(this),
        _Internal::navi_speed_decider_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::navi_obstacle_decider_config(this),
        _Internal::navi_obstacle_decider_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerNaviConfig)
  return target;
}

size_t PlannerNaviConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerNaviConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_path_decider_config_);
    }

    // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_speed_decider_config_);
    }

    // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_obstacle_decider_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlannerNaviConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlannerNaviConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlannerNaviConfig::GetClassData() const { return &_class_data_; }

void PlannerNaviConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlannerNaviConfig *>(to)->MergeFrom(
      static_cast<const PlannerNaviConfig &>(from));
}


void PlannerNaviConfig::MergeFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerNaviConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.task_.MergeFrom(from._impl_.task_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_navi_path_decider_config()->::apollo::planning::NaviPathDeciderConfig::MergeFrom(from._internal_navi_path_decider_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navi_speed_decider_config()->::apollo::planning::NaviSpeedDeciderConfig::MergeFrom(from._internal_navi_speed_decider_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_navi_obstacle_decider_config()->::apollo::planning::NaviObstacleDeciderConfig::MergeFrom(from._internal_navi_obstacle_decider_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlannerNaviConfig::CopyFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerNaviConfig::IsInitialized() const {
  return true;
}

void PlannerNaviConfig::InternalSwap(PlannerNaviConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_.InternalSwap(&other->_impl_.task_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlannerNaviConfig, _impl_.navi_obstacle_decider_config_)
      + sizeof(PlannerNaviConfig::_impl_.navi_obstacle_decider_config_)
      - PROTOBUF_FIELD_OFFSET(PlannerNaviConfig, _impl_.navi_path_decider_config_)>(
          reinterpret_cast<char*>(&_impl_.navi_path_decider_config_),
          reinterpret_cast<char*>(&other->_impl_.navi_path_decider_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerNaviConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[19]);
}

// ===================================================================

class RtkPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RtkPlanningConfig>()._impl_._has_bits_);
  static void set_has_planner_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RtkPlanningConfig::RtkPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.RtkPlanningConfig)
}
RtkPlanningConfig::RtkPlanningConfig(const RtkPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.planner_type_ = from._impl_.planner_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RtkPlanningConfig)
}

inline void RtkPlanningConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){0}
  };
}

RtkPlanningConfig::~RtkPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RtkPlanningConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtkPlanningConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RtkPlanningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RtkPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RtkPlanningConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.planner_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtkPlanningConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
            _internal_set_planner_type(static_cast<::apollo::planning::PlannerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtkPlanningConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RtkPlanningConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_planner_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RtkPlanningConfig)
  return target;
}

size_t RtkPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RtkPlanningConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.planning.PlannerType planner_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_planner_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtkPlanningConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RtkPlanningConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtkPlanningConfig::GetClassData() const { return &_class_data_; }

void RtkPlanningConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RtkPlanningConfig *>(to)->MergeFrom(
      static_cast<const RtkPlanningConfig &>(from));
}


void RtkPlanningConfig::MergeFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RtkPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_planner_type()) {
    _internal_set_planner_type(from._internal_planner_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtkPlanningConfig::CopyFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtkPlanningConfig::IsInitialized() const {
  return true;
}

void RtkPlanningConfig::InternalSwap(RtkPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.planner_type_, other->_impl_.planner_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtkPlanningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[20]);
}

// ===================================================================

class StandardPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StandardPlanningConfig>()._impl_._has_bits_);
  static const ::apollo::planning::PlannerPublicRoadConfig& planner_public_road_config(const StandardPlanningConfig* msg);
  static void set_has_planner_public_road_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PlannerPublicRoadConfig&
StandardPlanningConfig::_Internal::planner_public_road_config(const StandardPlanningConfig* msg) {
  return *msg->_impl_.planner_public_road_config_;
}
StandardPlanningConfig::StandardPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.StandardPlanningConfig)
}
StandardPlanningConfig::StandardPlanningConfig(const StandardPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){from._impl_.planner_type_}
    , decltype(_impl_.planner_public_road_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planner_public_road_config()) {
    _impl_.planner_public_road_config_ = new ::apollo::planning::PlannerPublicRoadConfig(*from._impl_.planner_public_road_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StandardPlanningConfig)
}

inline void StandardPlanningConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){arena}
    , decltype(_impl_.planner_public_road_config_){nullptr}
  };
}

StandardPlanningConfig::~StandardPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StandardPlanningConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StandardPlanningConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.planner_type_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.planner_public_road_config_;
}

void StandardPlanningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StandardPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StandardPlanningConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.planner_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.planner_public_road_config_ != nullptr);
    _impl_.planner_public_road_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StandardPlanningConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
              _internal_add_planner_type(static_cast<::apollo::planning::PlannerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_planner_type(), ptr, ctx, ::apollo::planning::PlannerType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_public_road_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StandardPlanningConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StandardPlanningConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->_internal_planner_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_planner_type(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::planner_public_road_config(this),
        _Internal::planner_public_road_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StandardPlanningConfig)
  return target;
}

size_t StandardPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StandardPlanningConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.planner_public_road_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StandardPlanningConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StandardPlanningConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StandardPlanningConfig::GetClassData() const { return &_class_data_; }

void StandardPlanningConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StandardPlanningConfig *>(to)->MergeFrom(
      static_cast<const StandardPlanningConfig &>(from));
}


void StandardPlanningConfig::MergeFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StandardPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.planner_type_.MergeFrom(from._impl_.planner_type_);
  if (from._internal_has_planner_public_road_config()) {
    _internal_mutable_planner_public_road_config()->::apollo::planning::PlannerPublicRoadConfig::MergeFrom(from._internal_planner_public_road_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StandardPlanningConfig::CopyFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardPlanningConfig::IsInitialized() const {
  return true;
}

void StandardPlanningConfig::InternalSwap(StandardPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.planner_type_.InternalSwap(&other->_impl_.planner_type_);
  swap(_impl_.planner_public_road_config_, other->_impl_.planner_public_road_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StandardPlanningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[21]);
}

// ===================================================================

class NavigationPlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationPlanningConfig>()._impl_._has_bits_);
  static const ::apollo::planning::PlannerNaviConfig& planner_navi_config(const NavigationPlanningConfig* msg);
  static void set_has_planner_navi_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::planning::PlannerNaviConfig&
NavigationPlanningConfig::_Internal::planner_navi_config(const NavigationPlanningConfig* msg) {
  return *msg->_impl_.planner_navi_config_;
}
NavigationPlanningConfig::NavigationPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NavigationPlanningConfig)
}
NavigationPlanningConfig::NavigationPlanningConfig(const NavigationPlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){from._impl_.planner_type_}
    , decltype(_impl_.planner_navi_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planner_navi_config()) {
    _impl_.planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig(*from._impl_.planner_navi_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NavigationPlanningConfig)
}

inline void NavigationPlanningConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.planner_type_){arena}
    , decltype(_impl_.planner_navi_config_){nullptr}
  };
}

NavigationPlanningConfig::~NavigationPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NavigationPlanningConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationPlanningConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.planner_type_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.planner_navi_config_;
}

void NavigationPlanningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NavigationPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NavigationPlanningConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.planner_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.planner_navi_config_ != nullptr);
    _impl_.planner_navi_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationPlanningConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlannerType_IsValid(val))) {
              _internal_add_planner_type(static_cast<::apollo::planning::PlannerType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_planner_type(), ptr, ctx, ::apollo::planning::PlannerType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_planner_navi_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationPlanningConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NavigationPlanningConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->_internal_planner_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_planner_type(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::planner_navi_config(this),
        _Internal::planner_navi_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NavigationPlanningConfig)
  return target;
}

size_t NavigationPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NavigationPlanningConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.planner_navi_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationPlanningConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationPlanningConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationPlanningConfig::GetClassData() const { return &_class_data_; }

void NavigationPlanningConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NavigationPlanningConfig *>(to)->MergeFrom(
      static_cast<const NavigationPlanningConfig &>(from));
}


void NavigationPlanningConfig::MergeFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NavigationPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.planner_type_.MergeFrom(from._impl_.planner_type_);
  if (from._internal_has_planner_navi_config()) {
    _internal_mutable_planner_navi_config()->::apollo::planning::PlannerNaviConfig::MergeFrom(from._internal_planner_navi_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationPlanningConfig::CopyFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPlanningConfig::IsInitialized() const {
  return true;
}

void NavigationPlanningConfig::InternalSwap(NavigationPlanningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.planner_type_.InternalSwap(&other->_impl_.planner_type_);
  swap(_impl_.planner_navi_config_, other->_impl_.planner_navi_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationPlanningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[22]);
}

// ===================================================================

class TopicConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicConfig>()._impl_._has_bits_);
  static void set_has_chassis_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hmi_status_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localization_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_planning_pad_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_planning_trajectory_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prediction_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_relative_map_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_routing_request_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_routing_response_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_story_telling_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_traffic_light_detection_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_planning_learning_data_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

TopicConfig::TopicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.TopicConfig)
}
TopicConfig::TopicConfig(const TopicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chassis_topic_){}
    , decltype(_impl_.hmi_status_topic_){}
    , decltype(_impl_.localization_topic_){}
    , decltype(_impl_.planning_pad_topic_){}
    , decltype(_impl_.planning_trajectory_topic_){}
    , decltype(_impl_.prediction_topic_){}
    , decltype(_impl_.relative_map_topic_){}
    , decltype(_impl_.routing_request_topic_){}
    , decltype(_impl_.routing_response_topic_){}
    , decltype(_impl_.story_telling_topic_){}
    , decltype(_impl_.traffic_light_detection_topic_){}
    , decltype(_impl_.planning_learning_data_topic_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chassis_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chassis_topic()) {
    _impl_.chassis_topic_.Set(from._internal_chassis_topic(), 
      GetArenaForAllocation());
  }
  _impl_.hmi_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmi_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hmi_status_topic()) {
    _impl_.hmi_status_topic_.Set(from._internal_hmi_status_topic(), 
      GetArenaForAllocation());
  }
  _impl_.localization_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_topic()) {
    _impl_.localization_topic_.Set(from._internal_localization_topic(), 
      GetArenaForAllocation());
  }
  _impl_.planning_pad_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_pad_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_planning_pad_topic()) {
    _impl_.planning_pad_topic_.Set(from._internal_planning_pad_topic(), 
      GetArenaForAllocation());
  }
  _impl_.planning_trajectory_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_planning_trajectory_topic()) {
    _impl_.planning_trajectory_topic_.Set(from._internal_planning_trajectory_topic(), 
      GetArenaForAllocation());
  }
  _impl_.prediction_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prediction_topic()) {
    _impl_.prediction_topic_.Set(from._internal_prediction_topic(), 
      GetArenaForAllocation());
  }
  _impl_.relative_map_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relative_map_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_relative_map_topic()) {
    _impl_.relative_map_topic_.Set(from._internal_relative_map_topic(), 
      GetArenaForAllocation());
  }
  _impl_.routing_request_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_routing_request_topic()) {
    _impl_.routing_request_topic_.Set(from._internal_routing_request_topic(), 
      GetArenaForAllocation());
  }
  _impl_.routing_response_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_routing_response_topic()) {
    _impl_.routing_response_topic_.Set(from._internal_routing_response_topic(), 
      GetArenaForAllocation());
  }
  _impl_.story_telling_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.story_telling_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_story_telling_topic()) {
    _impl_.story_telling_topic_.Set(from._internal_story_telling_topic(), 
      GetArenaForAllocation());
  }
  _impl_.traffic_light_detection_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traffic_light_detection_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_traffic_light_detection_topic()) {
    _impl_.traffic_light_detection_topic_.Set(from._internal_traffic_light_detection_topic(), 
      GetArenaForAllocation());
  }
  _impl_.planning_learning_data_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_learning_data_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_planning_learning_data_topic()) {
    _impl_.planning_learning_data_topic_.Set(from._internal_planning_learning_data_topic(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TopicConfig)
}

inline void TopicConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chassis_topic_){}
    , decltype(_impl_.hmi_status_topic_){}
    , decltype(_impl_.localization_topic_){}
    , decltype(_impl_.planning_pad_topic_){}
    , decltype(_impl_.planning_trajectory_topic_){}
    , decltype(_impl_.prediction_topic_){}
    , decltype(_impl_.relative_map_topic_){}
    , decltype(_impl_.routing_request_topic_){}
    , decltype(_impl_.routing_response_topic_){}
    , decltype(_impl_.story_telling_topic_){}
    , decltype(_impl_.traffic_light_detection_topic_){}
    , decltype(_impl_.planning_learning_data_topic_){}
  };
  _impl_.chassis_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chassis_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hmi_status_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmi_status_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localization_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.planning_pad_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_pad_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.planning_trajectory_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prediction_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relative_map_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.relative_map_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_request_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_response_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.story_telling_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.story_telling_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.traffic_light_detection_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.traffic_light_detection_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.planning_learning_data_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_learning_data_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TopicConfig::~TopicConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TopicConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chassis_topic_.Destroy();
  _impl_.hmi_status_topic_.Destroy();
  _impl_.localization_topic_.Destroy();
  _impl_.planning_pad_topic_.Destroy();
  _impl_.planning_trajectory_topic_.Destroy();
  _impl_.prediction_topic_.Destroy();
  _impl_.relative_map_topic_.Destroy();
  _impl_.routing_request_topic_.Destroy();
  _impl_.routing_response_topic_.Destroy();
  _impl_.story_telling_topic_.Destroy();
  _impl_.traffic_light_detection_topic_.Destroy();
  _impl_.planning_learning_data_topic_.Destroy();
}

void TopicConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TopicConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chassis_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hmi_status_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.localization_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.planning_pad_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.planning_trajectory_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.prediction_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.relative_map_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.routing_request_topic_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.routing_response_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.story_telling_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.traffic_light_detection_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.planning_learning_data_topic_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string chassis_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chassis_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.chassis_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hmi_status_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hmi_status_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.hmi_status_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string localization_topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_localization_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.localization_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string planning_pad_topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_planning_pad_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.planning_pad_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string planning_trajectory_topic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_planning_trajectory_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.planning_trajectory_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string prediction_topic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_prediction_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.prediction_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string relative_map_topic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_relative_map_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.relative_map_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string routing_request_topic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_routing_request_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.routing_request_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string routing_response_topic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_routing_response_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.routing_response_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string story_telling_topic = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_story_telling_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.story_telling_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string traffic_light_detection_topic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_traffic_light_detection_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.traffic_light_detection_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string planning_learning_data_topic = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_planning_learning_data_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.planning.TopicConfig.planning_learning_data_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TopicConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string chassis_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chassis_topic().data(), static_cast<int>(this->_internal_chassis_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.chassis_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chassis_topic(), target);
  }

  // optional string hmi_status_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hmi_status_topic().data(), static_cast<int>(this->_internal_hmi_status_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.hmi_status_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hmi_status_topic(), target);
  }

  // optional string localization_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_topic().data(), static_cast<int>(this->_internal_localization_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.localization_topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_localization_topic(), target);
  }

  // optional string planning_pad_topic = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_planning_pad_topic().data(), static_cast<int>(this->_internal_planning_pad_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_pad_topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_planning_pad_topic(), target);
  }

  // optional string planning_trajectory_topic = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_planning_trajectory_topic().data(), static_cast<int>(this->_internal_planning_trajectory_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_trajectory_topic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_planning_trajectory_topic(), target);
  }

  // optional string prediction_topic = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prediction_topic().data(), static_cast<int>(this->_internal_prediction_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.prediction_topic");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_prediction_topic(), target);
  }

  // optional string relative_map_topic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_relative_map_topic().data(), static_cast<int>(this->_internal_relative_map_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.relative_map_topic");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_relative_map_topic(), target);
  }

  // optional string routing_request_topic = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_routing_request_topic().data(), static_cast<int>(this->_internal_routing_request_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_request_topic");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_routing_request_topic(), target);
  }

  // optional string routing_response_topic = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_routing_response_topic().data(), static_cast<int>(this->_internal_routing_response_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_response_topic");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_routing_response_topic(), target);
  }

  // optional string story_telling_topic = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_story_telling_topic().data(), static_cast<int>(this->_internal_story_telling_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.story_telling_topic");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_story_telling_topic(), target);
  }

  // optional string traffic_light_detection_topic = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_traffic_light_detection_topic().data(), static_cast<int>(this->_internal_traffic_light_detection_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.traffic_light_detection_topic");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_traffic_light_detection_topic(), target);
  }

  // optional string planning_learning_data_topic = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_planning_learning_data_topic().data(), static_cast<int>(this->_internal_planning_learning_data_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_learning_data_topic");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_planning_learning_data_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TopicConfig)
  return target;
}

size_t TopicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TopicConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string chassis_topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chassis_topic());
    }

    // optional string hmi_status_topic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hmi_status_topic());
    }

    // optional string localization_topic = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_topic());
    }

    // optional string planning_pad_topic = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_planning_pad_topic());
    }

    // optional string planning_trajectory_topic = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_planning_trajectory_topic());
    }

    // optional string prediction_topic = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_prediction_topic());
    }

    // optional string relative_map_topic = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_relative_map_topic());
    }

    // optional string routing_request_topic = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_routing_request_topic());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string routing_response_topic = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_routing_response_topic());
    }

    // optional string story_telling_topic = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_story_telling_topic());
    }

    // optional string traffic_light_detection_topic = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_traffic_light_detection_topic());
    }

    // optional string planning_learning_data_topic = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_planning_learning_data_topic());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicConfig::GetClassData() const { return &_class_data_; }

void TopicConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicConfig *>(to)->MergeFrom(
      static_cast<const TopicConfig &>(from));
}


void TopicConfig::MergeFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_chassis_topic(from._internal_chassis_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_hmi_status_topic(from._internal_hmi_status_topic());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_localization_topic(from._internal_localization_topic());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_planning_pad_topic(from._internal_planning_pad_topic());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_planning_trajectory_topic(from._internal_planning_trajectory_topic());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_prediction_topic(from._internal_prediction_topic());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_relative_map_topic(from._internal_relative_map_topic());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_routing_request_topic(from._internal_routing_request_topic());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_routing_response_topic(from._internal_routing_response_topic());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_story_telling_topic(from._internal_story_telling_topic());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_traffic_light_detection_topic(from._internal_traffic_light_detection_topic());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_planning_learning_data_topic(from._internal_planning_learning_data_topic());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicConfig::CopyFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConfig::IsInitialized() const {
  return true;
}

void TopicConfig::InternalSwap(TopicConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chassis_topic_, lhs_arena,
      &other->_impl_.chassis_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmi_status_topic_, lhs_arena,
      &other->_impl_.hmi_status_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_topic_, lhs_arena,
      &other->_impl_.localization_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.planning_pad_topic_, lhs_arena,
      &other->_impl_.planning_pad_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.planning_trajectory_topic_, lhs_arena,
      &other->_impl_.planning_trajectory_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prediction_topic_, lhs_arena,
      &other->_impl_.prediction_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.relative_map_topic_, lhs_arena,
      &other->_impl_.relative_map_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_request_topic_, lhs_arena,
      &other->_impl_.routing_request_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_response_topic_, lhs_arena,
      &other->_impl_.routing_response_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.story_telling_topic_, lhs_arena,
      &other->_impl_.story_telling_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.traffic_light_detection_topic_, lhs_arena,
      &other->_impl_.traffic_light_detection_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.planning_learning_data_topic_, lhs_arena,
      &other->_impl_.planning_learning_data_topic_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[23]);
}

// ===================================================================

class PlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningConfig>()._impl_._has_bits_);
  static const ::apollo::planning::TopicConfig& topic_config(const PlanningConfig* msg);
  static void set_has_topic_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_learning_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::RtkPlanningConfig& rtk_planning_config(const PlanningConfig* msg);
  static const ::apollo::planning::StandardPlanningConfig& standard_planning_config(const PlanningConfig* msg);
  static const ::apollo::planning::NavigationPlanningConfig& navigation_planning_config(const PlanningConfig* msg);
};

const ::apollo::planning::TopicConfig&
PlanningConfig::_Internal::topic_config(const PlanningConfig* msg) {
  return *msg->_impl_.topic_config_;
}
const ::apollo::planning::RtkPlanningConfig&
PlanningConfig::_Internal::rtk_planning_config(const PlanningConfig* msg) {
  return *msg->_impl_.planning_config_.rtk_planning_config_;
}
const ::apollo::planning::StandardPlanningConfig&
PlanningConfig::_Internal::standard_planning_config(const PlanningConfig* msg) {
  return *msg->_impl_.planning_config_.standard_planning_config_;
}
const ::apollo::planning::NavigationPlanningConfig&
PlanningConfig::_Internal::navigation_planning_config(const PlanningConfig* msg) {
  return *msg->_impl_.planning_config_.navigation_planning_config_;
}
void PlanningConfig::set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_planning_config();
  if (rtk_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rtk_planning_config);
    if (message_arena != submessage_arena) {
      rtk_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtk_planning_config, submessage_arena);
    }
    set_has_rtk_planning_config();
    _impl_.planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}
void PlanningConfig::set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_planning_config();
  if (standard_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(standard_planning_config);
    if (message_arena != submessage_arena) {
      standard_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standard_planning_config, submessage_arena);
    }
    set_has_standard_planning_config();
    _impl_.planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}
void PlanningConfig::set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_planning_config();
  if (navigation_planning_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navigation_planning_config);
    if (message_arena != submessage_arena) {
      navigation_planning_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_planning_config, submessage_arena);
    }
    set_has_navigation_planning_config();
    _impl_.planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}
PlanningConfig::PlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_task_config_){from._impl_.default_task_config_}
    , decltype(_impl_.topic_config_){nullptr}
    , decltype(_impl_.learning_mode_){}
    , decltype(_impl_.planning_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic_config()) {
    _impl_.topic_config_ = new ::apollo::planning::TopicConfig(*from._impl_.topic_config_);
  }
  _impl_.learning_mode_ = from._impl_.learning_mode_;
  clear_has_planning_config();
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      _internal_mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from._internal_rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      _internal_mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from._internal_standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      _internal_mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from._internal_navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

inline void PlanningConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_task_config_){arena}
    , decltype(_impl_.topic_config_){nullptr}
    , decltype(_impl_.learning_mode_){0}
    , decltype(_impl_.planning_config_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_planning_config();
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_task_config_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.topic_config_;
  if (has_planning_config()) {
    clear_planning_config();
  }
}

void PlanningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningConfig::clear_planning_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningConfig)
  switch (planning_config_case()) {
    case kRtkPlanningConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.planning_config_.rtk_planning_config_;
      }
      break;
    }
    case kStandardPlanningConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.planning_config_.standard_planning_config_;
      }
      break;
    }
    case kNavigationPlanningConfig: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.planning_config_.navigation_planning_config_;
      }
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_task_config_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.topic_config_ != nullptr);
    _impl_.topic_config_->Clear();
  }
  _impl_.learning_mode_ = 0;
  clear_planning_config();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.TopicConfig topic_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlanningConfig_PlanningLearningMode_IsValid(val))) {
            _internal_set_learning_mode(static_cast<::apollo::planning::PlanningConfig_PlanningLearningMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtk_planning_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_standard_planning_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_planning_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.TaskConfig default_task_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_default_task_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.TopicConfig topic_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic_config(this),
        _Internal::topic_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_learning_mode(), target);
  }

  switch (planning_config_case()) {
    case kRtkPlanningConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::rtk_planning_config(this),
          _Internal::rtk_planning_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kStandardPlanningConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::standard_planning_config(this),
          _Internal::standard_planning_config(this).GetCachedSize(), target, stream);
      break;
    }
    case kNavigationPlanningConfig: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::navigation_planning_config(this),
          _Internal::navigation_planning_config(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_default_task_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_default_task_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  total_size += 1UL * this->_internal_default_task_config_size();
  for (const auto& msg : this->_impl_.default_task_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.TopicConfig topic_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.topic_config_);
    }

    // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_learning_mode());
    }

  }
  switch (planning_config_case()) {
    // .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
    case kRtkPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_config_.rtk_planning_config_);
      break;
    }
    // .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
    case kStandardPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_config_.standard_planning_config_);
      break;
    }
    // .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
    case kNavigationPlanningConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.planning_config_.navigation_planning_config_);
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningConfig::GetClassData() const { return &_class_data_; }

void PlanningConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningConfig *>(to)->MergeFrom(
      static_cast<const PlanningConfig &>(from));
}


void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.default_task_config_.MergeFrom(from._impl_.default_task_config_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_topic_config()->::apollo::planning::TopicConfig::MergeFrom(from._internal_topic_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.learning_mode_ = from._impl_.learning_mode_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      _internal_mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from._internal_rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      _internal_mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from._internal_standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      _internal_mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from._internal_navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.default_task_config_.InternalSwap(&other->_impl_.default_task_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningConfig, _impl_.learning_mode_)
      + sizeof(PlanningConfig::_impl_.learning_mode_)
      - PROTOBUF_FIELD_OFFSET(PlanningConfig, _impl_.topic_config_)>(
          reinterpret_cast<char*>(&_impl_.topic_config_),
          reinterpret_cast<char*>(&other->_impl_.topic_config_));
  swap(_impl_.planning_config_, other->_impl_.planning_config_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::TaskConfig*
Arena::CreateMaybeMessage< ::apollo::planning::TaskConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioEmergencyPullOverConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyPullOverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioEmergencyPullOverConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioEmergencyStopConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyStopConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioEmergencyStopConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioLaneFollowConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioLaneFollowConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioLaneFollowConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioLearningModelSampleConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioLearningModelSampleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioLearningModelSampleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioNarrowStreetUTurnConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioParkAndGoConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioParkAndGoConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioParkAndGoConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioPullOverConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioPullOverConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioPullOverConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioStopSignUnprotectedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightProtectedConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioValetParkingConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioValetParkingConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioValetParkingConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioDeadEndTurnAroundConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioDeadEndTurnAroundConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioDeadEndTurnAroundConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioYieldSignConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioYieldSignConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioYieldSignConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioConfig_StageConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig_StageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioConfig_StageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::ScenarioConfig*
Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::ScenarioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerPublicRoadConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PlannerPublicRoadConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlannerPublicRoadConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlannerNaviConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PlannerNaviConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlannerNaviConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::RtkPlanningConfig*
Arena::CreateMaybeMessage< ::apollo::planning::RtkPlanningConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::RtkPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::StandardPlanningConfig*
Arena::CreateMaybeMessage< ::apollo::planning::StandardPlanningConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::StandardPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NavigationPlanningConfig*
Arena::CreateMaybeMessage< ::apollo::planning::NavigationPlanningConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NavigationPlanningConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::TopicConfig*
Arena::CreateMaybeMessage< ::apollo::planning::TopicConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::TopicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
