// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#include "modules/planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR EMPlannerConfig::EMPlannerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_.dp_poly_path_config_)*/nullptr
  , /*decltype(_impl_.dp_st_speed_config_)*/nullptr
  , /*decltype(_impl_.qp_spline_path_config_)*/nullptr
  , /*decltype(_impl_.qp_st_speed_config_)*/nullptr
  , /*decltype(_impl_.poly_st_speed_config_)*/nullptr} {}
struct EMPlannerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EMPlannerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EMPlannerConfigDefaultTypeInternal() {}
  union {
    EMPlannerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EMPlannerConfigDefaultTypeInternal _EMPlannerConfig_default_instance_;
PROTOBUF_CONSTEXPR NaviPlannerConfig::NaviPlannerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_)*/{}
  , /*decltype(_impl_.navi_path_decider_config_)*/nullptr
  , /*decltype(_impl_.navi_speed_decider_config_)*/nullptr} {}
struct NaviPlannerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NaviPlannerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NaviPlannerConfigDefaultTypeInternal() {}
  union {
    NaviPlannerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NaviPlannerConfigDefaultTypeInternal _NaviPlannerConfig_default_instance_;
PROTOBUF_CONSTEXPR PlanningConfig::PlanningConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.em_planner_config_)*/nullptr
  , /*decltype(_impl_.navi_planner_config_)*/nullptr
  , /*decltype(_impl_.planner_type_)*/1} {}
struct PlanningConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanningConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanningConfigDefaultTypeInternal() {}
  union {
    PlanningConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.dp_poly_path_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.dp_st_speed_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.qp_spline_path_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.qp_st_speed_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::EMPlannerConfig, _impl_.poly_st_speed_config_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPlannerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPlannerConfig, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPlannerConfig, _impl_.navi_path_decider_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::NaviPlannerConfig, _impl_.navi_speed_decider_config_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.planner_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.em_planner_config_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::PlanningConfig, _impl_.navi_planner_config_),
  2,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::planning::EMPlannerConfig)},
  { 18, 27, -1, sizeof(::apollo::planning::NaviPlannerConfig)},
  { 30, 39, -1, sizeof(::apollo::planning::PlanningConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_EMPlannerConfig_default_instance_._instance,
  &::apollo::planning::_NaviPlannerConfig_default_instance_._instance,
  &::apollo::planning::_PlanningConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,modules/planning/proto/planning_config"
  ".proto\022\017apollo.planning\0320modules/plannin"
  "g/proto/dp_poly_path_config.proto\032/modul"
  "es/planning/proto/dp_st_speed_config.pro"
  "to\0322modules/planning/proto/qp_spline_pat"
  "h_config.proto\032/modules/planning/proto/q"
  "p_st_speed_config.proto\0321modules/plannin"
  "g/proto/poly_st_speed_config.proto\0325modu"
  "les/planning/proto/navi_path_decider_con"
  "fig.proto\0326modules/planning/proto/navi_s"
  "peed_decider_config.proto\"\374\002\n\017EMPlannerC"
  "onfig\022\'\n\004task\030\001 \003(\0162\031.apollo.planning.Ta"
  "skType\022>\n\023dp_poly_path_config\030\002 \001(\0132!.ap"
  "ollo.planning.DpPolyPathConfig\022<\n\022dp_st_"
  "speed_config\030\003 \001(\0132 .apollo.planning.DpS"
  "tSpeedConfig\022B\n\025qp_spline_path_config\030\004 "
  "\001(\0132#.apollo.planning.QpSplinePathConfig"
  "\022<\n\022qp_st_speed_config\030\005 \001(\0132 .apollo.pl"
  "anning.QpStSpeedConfig\022@\n\024poly_st_speed_"
  "config\030\006 \001(\0132\".apollo.planning.PolyStSpe"
  "edConfig\"\322\001\n\021NaviPlannerConfig\022\'\n\004task\030\001"
  " \003(\0162\031.apollo.planning.TaskType\022H\n\030navi_"
  "path_decider_config\030\002 \001(\0132&.apollo.plann"
  "ing.NaviPathDeciderConfig\022J\n\031navi_speed_"
  "decider_config\030\003 \001(\0132\'.apollo.planning.N"
  "aviSpeedDeciderConfig\"\214\002\n\016PlanningConfig"
  "\022E\n\014planner_type\030\001 \001(\0162+.apollo.planning"
  ".PlanningConfig.PlannerType:\002EM\022;\n\021em_pl"
  "anner_config\030\002 \001(\0132 .apollo.planning.EMP"
  "lannerConfig\022\?\n\023navi_planner_config\030\003 \001("
  "\0132\".apollo.planning.NaviPlannerConfig\"5\n"
  "\013PlannerType\022\007\n\003RTK\020\000\022\006\n\002EM\020\001\022\013\n\007LATTICE"
  "\020\002\022\010\n\004NAVI\020\003*\215\002\n\010TaskType\022\032\n\026DP_POLY_PAT"
  "H_OPTIMIZER\020\000\022\031\n\025DP_ST_SPEED_OPTIMIZER\020\001"
  "\022\034\n\030QP_SPLINE_PATH_OPTIMIZER\020\002\022 \n\034QP_SPL"
  "INE_ST_SPEED_OPTIMIZER\020\003\022\020\n\014PATH_DECIDER"
  "\020\004\022\021\n\rSPEED_DECIDER\020\005\022\033\n\027POLY_ST_SPEED_O"
  "PTIMIZER\020\006\022\025\n\021NAVI_PATH_DECIDER\020\007\022\026\n\022NAV"
  "I_SPEED_DECIDER\020\010\022\031\n\025NAVI_OBSTACLE_DECID"
  "ER\020\t"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps[7] = {
  &::descriptor_table_modules_2fplanning_2fproto_2fdp_5fpoly_5fpath_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fdp_5fst_5fspeed_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fpath_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fnavi_5fspeed_5fdecider_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fpoly_5fst_5fspeed_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto,
  &::descriptor_table_modules_2fplanning_2fproto_2fqp_5fst_5fspeed_5fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto = {
    false, false, 1564, descriptor_table_protodef_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
    "modules/planning/proto/planning_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once, descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_deps, 7, 3,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
namespace apollo {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningConfig_PlannerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[0];
}
bool PlanningConfig_PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlanningConfig_PlannerType PlanningConfig::RTK;
constexpr PlanningConfig_PlannerType PlanningConfig::EM;
constexpr PlanningConfig_PlannerType PlanningConfig::LATTICE;
constexpr PlanningConfig_PlannerType PlanningConfig::NAVI;
constexpr PlanningConfig_PlannerType PlanningConfig::PlannerType_MIN;
constexpr PlanningConfig_PlannerType PlanningConfig::PlannerType_MAX;
constexpr int PlanningConfig::PlannerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[1];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EMPlannerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EMPlannerConfig>()._impl_._has_bits_);
  static const ::apollo::planning::DpPolyPathConfig& dp_poly_path_config(const EMPlannerConfig* msg);
  static void set_has_dp_poly_path_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::DpStSpeedConfig& dp_st_speed_config(const EMPlannerConfig* msg);
  static void set_has_dp_st_speed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::planning::QpSplinePathConfig& qp_spline_path_config(const EMPlannerConfig* msg);
  static void set_has_qp_spline_path_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::QpStSpeedConfig& qp_st_speed_config(const EMPlannerConfig* msg);
  static void set_has_qp_st_speed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::planning::PolyStSpeedConfig& poly_st_speed_config(const EMPlannerConfig* msg);
  static void set_has_poly_st_speed_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::apollo::planning::DpPolyPathConfig&
EMPlannerConfig::_Internal::dp_poly_path_config(const EMPlannerConfig* msg) {
  return *msg->_impl_.dp_poly_path_config_;
}
const ::apollo::planning::DpStSpeedConfig&
EMPlannerConfig::_Internal::dp_st_speed_config(const EMPlannerConfig* msg) {
  return *msg->_impl_.dp_st_speed_config_;
}
const ::apollo::planning::QpSplinePathConfig&
EMPlannerConfig::_Internal::qp_spline_path_config(const EMPlannerConfig* msg) {
  return *msg->_impl_.qp_spline_path_config_;
}
const ::apollo::planning::QpStSpeedConfig&
EMPlannerConfig::_Internal::qp_st_speed_config(const EMPlannerConfig* msg) {
  return *msg->_impl_.qp_st_speed_config_;
}
const ::apollo::planning::PolyStSpeedConfig&
EMPlannerConfig::_Internal::poly_st_speed_config(const EMPlannerConfig* msg) {
  return *msg->_impl_.poly_st_speed_config_;
}
void EMPlannerConfig::clear_dp_poly_path_config() {
  if (_impl_.dp_poly_path_config_ != nullptr) _impl_.dp_poly_path_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EMPlannerConfig::clear_dp_st_speed_config() {
  if (_impl_.dp_st_speed_config_ != nullptr) _impl_.dp_st_speed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void EMPlannerConfig::clear_qp_spline_path_config() {
  if (_impl_.qp_spline_path_config_ != nullptr) _impl_.qp_spline_path_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void EMPlannerConfig::clear_qp_st_speed_config() {
  if (_impl_.qp_st_speed_config_ != nullptr) _impl_.qp_st_speed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void EMPlannerConfig::clear_poly_st_speed_config() {
  if (_impl_.poly_st_speed_config_ != nullptr) _impl_.poly_st_speed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
EMPlannerConfig::EMPlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.EMPlannerConfig)
}
EMPlannerConfig::EMPlannerConfig(const EMPlannerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){from._impl_.task_}
    , decltype(_impl_.dp_poly_path_config_){nullptr}
    , decltype(_impl_.dp_st_speed_config_){nullptr}
    , decltype(_impl_.qp_spline_path_config_){nullptr}
    , decltype(_impl_.qp_st_speed_config_){nullptr}
    , decltype(_impl_.poly_st_speed_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dp_poly_path_config()) {
    _impl_.dp_poly_path_config_ = new ::apollo::planning::DpPolyPathConfig(*from._impl_.dp_poly_path_config_);
  }
  if (from._internal_has_dp_st_speed_config()) {
    _impl_.dp_st_speed_config_ = new ::apollo::planning::DpStSpeedConfig(*from._impl_.dp_st_speed_config_);
  }
  if (from._internal_has_qp_spline_path_config()) {
    _impl_.qp_spline_path_config_ = new ::apollo::planning::QpSplinePathConfig(*from._impl_.qp_spline_path_config_);
  }
  if (from._internal_has_qp_st_speed_config()) {
    _impl_.qp_st_speed_config_ = new ::apollo::planning::QpStSpeedConfig(*from._impl_.qp_st_speed_config_);
  }
  if (from._internal_has_poly_st_speed_config()) {
    _impl_.poly_st_speed_config_ = new ::apollo::planning::PolyStSpeedConfig(*from._impl_.poly_st_speed_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EMPlannerConfig)
}

inline void EMPlannerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){arena}
    , decltype(_impl_.dp_poly_path_config_){nullptr}
    , decltype(_impl_.dp_st_speed_config_){nullptr}
    , decltype(_impl_.qp_spline_path_config_){nullptr}
    , decltype(_impl_.qp_st_speed_config_){nullptr}
    , decltype(_impl_.poly_st_speed_config_){nullptr}
  };
}

EMPlannerConfig::~EMPlannerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.EMPlannerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EMPlannerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.dp_poly_path_config_;
  if (this != internal_default_instance()) delete _impl_.dp_st_speed_config_;
  if (this != internal_default_instance()) delete _impl_.qp_spline_path_config_;
  if (this != internal_default_instance()) delete _impl_.qp_st_speed_config_;
  if (this != internal_default_instance()) delete _impl_.poly_st_speed_config_;
}

void EMPlannerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EMPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EMPlannerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.dp_poly_path_config_ != nullptr);
      _impl_.dp_poly_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dp_st_speed_config_ != nullptr);
      _impl_.dp_st_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.qp_spline_path_config_ != nullptr);
      _impl_.qp_spline_path_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.qp_st_speed_config_ != nullptr);
      _impl_.qp_st_speed_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.poly_st_speed_config_ != nullptr);
      _impl_.poly_st_speed_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EMPlannerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TaskType task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskType_IsValid(val))) {
              _internal_add_task(static_cast<::apollo::planning::TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_task(), ptr, ctx, ::apollo::planning::TaskType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dp_poly_path_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dp_st_speed_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline_path_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_st_speed_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_poly_st_speed_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EMPlannerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EMPlannerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  for (int i = 0, n = this->_internal_task_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_task(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dp_poly_path_config(this),
        _Internal::dp_poly_path_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dp_st_speed_config(this),
        _Internal::dp_st_speed_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::qp_spline_path_config(this),
        _Internal::qp_spline_path_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::qp_st_speed_config(this),
        _Internal::qp_st_speed_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::poly_st_speed_config(this),
        _Internal::poly_st_speed_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EMPlannerConfig)
  return target;
}

size_t EMPlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EMPlannerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dp_poly_path_config_);
    }

    // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dp_st_speed_config_);
    }

    // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qp_spline_path_config_);
    }

    // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.qp_st_speed_config_);
    }

    // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poly_st_speed_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EMPlannerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EMPlannerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EMPlannerConfig::GetClassData() const { return &_class_data_; }

void EMPlannerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EMPlannerConfig *>(to)->MergeFrom(
      static_cast<const EMPlannerConfig &>(from));
}


void EMPlannerConfig::MergeFrom(const EMPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EMPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.task_.MergeFrom(from._impl_.task_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dp_poly_path_config()->::apollo::planning::DpPolyPathConfig::MergeFrom(from._internal_dp_poly_path_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dp_st_speed_config()->::apollo::planning::DpStSpeedConfig::MergeFrom(from._internal_dp_st_speed_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_qp_spline_path_config()->::apollo::planning::QpSplinePathConfig::MergeFrom(from._internal_qp_spline_path_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_qp_st_speed_config()->::apollo::planning::QpStSpeedConfig::MergeFrom(from._internal_qp_st_speed_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_poly_st_speed_config()->::apollo::planning::PolyStSpeedConfig::MergeFrom(from._internal_poly_st_speed_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EMPlannerConfig::CopyFrom(const EMPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EMPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EMPlannerConfig::IsInitialized() const {
  return true;
}

void EMPlannerConfig::InternalSwap(EMPlannerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_.InternalSwap(&other->_impl_.task_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EMPlannerConfig, _impl_.poly_st_speed_config_)
      + sizeof(EMPlannerConfig::_impl_.poly_st_speed_config_)
      - PROTOBUF_FIELD_OFFSET(EMPlannerConfig, _impl_.dp_poly_path_config_)>(
          reinterpret_cast<char*>(&_impl_.dp_poly_path_config_),
          reinterpret_cast<char*>(&other->_impl_.dp_poly_path_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EMPlannerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[0]);
}

// ===================================================================

class NaviPlannerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NaviPlannerConfig>()._impl_._has_bits_);
  static const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config(const NaviPlannerConfig* msg);
  static void set_has_navi_path_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config(const NaviPlannerConfig* msg);
  static void set_has_navi_speed_decider_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::NaviPathDeciderConfig&
NaviPlannerConfig::_Internal::navi_path_decider_config(const NaviPlannerConfig* msg) {
  return *msg->_impl_.navi_path_decider_config_;
}
const ::apollo::planning::NaviSpeedDeciderConfig&
NaviPlannerConfig::_Internal::navi_speed_decider_config(const NaviPlannerConfig* msg) {
  return *msg->_impl_.navi_speed_decider_config_;
}
void NaviPlannerConfig::clear_navi_path_decider_config() {
  if (_impl_.navi_path_decider_config_ != nullptr) _impl_.navi_path_decider_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NaviPlannerConfig::clear_navi_speed_decider_config() {
  if (_impl_.navi_speed_decider_config_ != nullptr) _impl_.navi_speed_decider_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NaviPlannerConfig::NaviPlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.NaviPlannerConfig)
}
NaviPlannerConfig::NaviPlannerConfig(const NaviPlannerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){from._impl_.task_}
    , decltype(_impl_.navi_path_decider_config_){nullptr}
    , decltype(_impl_.navi_speed_decider_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_navi_path_decider_config()) {
    _impl_.navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig(*from._impl_.navi_path_decider_config_);
  }
  if (from._internal_has_navi_speed_decider_config()) {
    _impl_.navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig(*from._impl_.navi_speed_decider_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NaviPlannerConfig)
}

inline void NaviPlannerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_){arena}
    , decltype(_impl_.navi_path_decider_config_){nullptr}
    , decltype(_impl_.navi_speed_decider_config_){nullptr}
  };
}

NaviPlannerConfig::~NaviPlannerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NaviPlannerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NaviPlannerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.navi_path_decider_config_;
  if (this != internal_default_instance()) delete _impl_.navi_speed_decider_config_;
}

void NaviPlannerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NaviPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NaviPlannerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.navi_path_decider_config_ != nullptr);
      _impl_.navi_path_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.navi_speed_decider_config_ != nullptr);
      _impl_.navi_speed_decider_config_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NaviPlannerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.TaskType task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::planning::TaskType_IsValid(val))) {
              _internal_add_task(static_cast<::apollo::planning::TaskType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_task(), ptr, ctx, ::apollo::planning::TaskType_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_path_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_speed_decider_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NaviPlannerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NaviPlannerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  for (int i = 0, n = this->_internal_task_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_task(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::navi_path_decider_config(this),
        _Internal::navi_path_decider_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::navi_speed_decider_config(this),
        _Internal::navi_speed_decider_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NaviPlannerConfig)
  return target;
}

size_t NaviPlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NaviPlannerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_path_decider_config_);
    }

    // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_speed_decider_config_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NaviPlannerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NaviPlannerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NaviPlannerConfig::GetClassData() const { return &_class_data_; }

void NaviPlannerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NaviPlannerConfig *>(to)->MergeFrom(
      static_cast<const NaviPlannerConfig &>(from));
}


void NaviPlannerConfig::MergeFrom(const NaviPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NaviPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.task_.MergeFrom(from._impl_.task_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_navi_path_decider_config()->::apollo::planning::NaviPathDeciderConfig::MergeFrom(from._internal_navi_path_decider_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navi_speed_decider_config()->::apollo::planning::NaviSpeedDeciderConfig::MergeFrom(from._internal_navi_speed_decider_config());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NaviPlannerConfig::CopyFrom(const NaviPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NaviPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NaviPlannerConfig::IsInitialized() const {
  return true;
}

void NaviPlannerConfig::InternalSwap(NaviPlannerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.task_.InternalSwap(&other->_impl_.task_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NaviPlannerConfig, _impl_.navi_speed_decider_config_)
      + sizeof(NaviPlannerConfig::_impl_.navi_speed_decider_config_)
      - PROTOBUF_FIELD_OFFSET(NaviPlannerConfig, _impl_.navi_path_decider_config_)>(
          reinterpret_cast<char*>(&_impl_.navi_path_decider_config_),
          reinterpret_cast<char*>(&other->_impl_.navi_path_decider_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NaviPlannerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[1]);
}

// ===================================================================

class PlanningConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanningConfig>()._impl_._has_bits_);
  static void set_has_planner_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::planning::EMPlannerConfig& em_planner_config(const PlanningConfig* msg);
  static void set_has_em_planner_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::NaviPlannerConfig& navi_planner_config(const PlanningConfig* msg);
  static void set_has_navi_planner_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::EMPlannerConfig&
PlanningConfig::_Internal::em_planner_config(const PlanningConfig* msg) {
  return *msg->_impl_.em_planner_config_;
}
const ::apollo::planning::NaviPlannerConfig&
PlanningConfig::_Internal::navi_planner_config(const PlanningConfig* msg) {
  return *msg->_impl_.navi_planner_config_;
}
PlanningConfig::PlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.em_planner_config_){nullptr}
    , decltype(_impl_.navi_planner_config_){nullptr}
    , decltype(_impl_.planner_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_em_planner_config()) {
    _impl_.em_planner_config_ = new ::apollo::planning::EMPlannerConfig(*from._impl_.em_planner_config_);
  }
  if (from._internal_has_navi_planner_config()) {
    _impl_.navi_planner_config_ = new ::apollo::planning::NaviPlannerConfig(*from._impl_.navi_planner_config_);
  }
  _impl_.planner_type_ = from._impl_.planner_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

inline void PlanningConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.em_planner_config_){nullptr}
    , decltype(_impl_.navi_planner_config_){nullptr}
    , decltype(_impl_.planner_type_){1}
  };
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanningConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.em_planner_config_;
  if (this != internal_default_instance()) delete _impl_.navi_planner_config_;
}

void PlanningConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.em_planner_config_ != nullptr);
      _impl_.em_planner_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.navi_planner_config_ != nullptr);
      _impl_.navi_planner_config_->Clear();
    }
    _impl_.planner_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanningConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::PlanningConfig_PlannerType_IsValid(val))) {
            _internal_set_planner_type(static_cast<::apollo::planning::PlanningConfig_PlannerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_em_planner_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.NaviPlannerConfig navi_planner_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_navi_planner_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanningConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_planner_type(), target);
  }

  // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::em_planner_config(this),
        _Internal::em_planner_config(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.NaviPlannerConfig navi_planner_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::navi_planner_config(this),
        _Internal::navi_planner_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.em_planner_config_);
    }

    // optional .apollo.planning.NaviPlannerConfig navi_planner_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navi_planner_config_);
    }

    // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_planner_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanningConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanningConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanningConfig::GetClassData() const { return &_class_data_; }

void PlanningConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanningConfig *>(to)->MergeFrom(
      static_cast<const PlanningConfig &>(from));
}


void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_em_planner_config()->::apollo::planning::EMPlannerConfig::MergeFrom(from._internal_em_planner_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navi_planner_config()->::apollo::planning::NaviPlannerConfig::MergeFrom(from._internal_navi_planner_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.planner_type_ = from._impl_.planner_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanningConfig, _impl_.navi_planner_config_)
      + sizeof(PlanningConfig::_impl_.navi_planner_config_)
      - PROTOBUF_FIELD_OFFSET(PlanningConfig, _impl_.em_planner_config_)>(
          reinterpret_cast<char*>(&_impl_.em_planner_config_),
          reinterpret_cast<char*>(&other->_impl_.em_planner_config_));
  swap(_impl_.planner_type_, other->_impl_.planner_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanningConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::EMPlannerConfig*
Arena::CreateMaybeMessage< ::apollo::planning::EMPlannerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::EMPlannerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::NaviPlannerConfig*
Arena::CreateMaybeMessage< ::apollo::planning::NaviPlannerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::NaviPlannerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::PlanningConfig*
Arena::CreateMaybeMessage< ::apollo::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::PlanningConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
