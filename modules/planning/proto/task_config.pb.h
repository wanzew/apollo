// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/task_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
namespace apollo {
namespace planning {
class CreepDeciderConfig;
struct CreepDeciderConfigDefaultTypeInternal;
extern CreepDeciderConfigDefaultTypeInternal _CreepDeciderConfig_default_instance_;
class DpStSpeedOptimizerConfig;
struct DpStSpeedOptimizerConfigDefaultTypeInternal;
extern DpStSpeedOptimizerConfigDefaultTypeInternal _DpStSpeedOptimizerConfig_default_instance_;
class LaneChangeDeciderConfig;
struct LaneChangeDeciderConfigDefaultTypeInternal;
extern LaneChangeDeciderConfigDefaultTypeInternal _LaneChangeDeciderConfig_default_instance_;
class LearningModelInferenceTaskConfig;
struct LearningModelInferenceTaskConfigDefaultTypeInternal;
extern LearningModelInferenceTaskConfigDefaultTypeInternal _LearningModelInferenceTaskConfig_default_instance_;
class LearningModelInferenceTrajectoryTaskConfig;
struct LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal;
extern LearningModelInferenceTrajectoryTaskConfigDefaultTypeInternal _LearningModelInferenceTrajectoryTaskConfig_default_instance_;
class MoveDestLaneConfigTable;
struct MoveDestLaneConfigTableDefaultTypeInternal;
extern MoveDestLaneConfigTableDefaultTypeInternal _MoveDestLaneConfigTable_default_instance_;
class NaviObstacleDeciderConfig;
struct NaviObstacleDeciderConfigDefaultTypeInternal;
extern NaviObstacleDeciderConfigDefaultTypeInternal _NaviObstacleDeciderConfig_default_instance_;
class NaviPathDeciderConfig;
struct NaviPathDeciderConfigDefaultTypeInternal;
extern NaviPathDeciderConfigDefaultTypeInternal _NaviPathDeciderConfig_default_instance_;
class NaviSpeedDeciderConfig;
struct NaviSpeedDeciderConfigDefaultTypeInternal;
extern NaviSpeedDeciderConfigDefaultTypeInternal _NaviSpeedDeciderConfig_default_instance_;
class PathAssessmentDeciderConfig;
struct PathAssessmentDeciderConfigDefaultTypeInternal;
extern PathAssessmentDeciderConfigDefaultTypeInternal _PathAssessmentDeciderConfig_default_instance_;
class PathBoundsDeciderConfig;
struct PathBoundsDeciderConfigDefaultTypeInternal;
extern PathBoundsDeciderConfigDefaultTypeInternal _PathBoundsDeciderConfig_default_instance_;
class PathDeciderConfig;
struct PathDeciderConfigDefaultTypeInternal;
extern PathDeciderConfigDefaultTypeInternal _PathDeciderConfig_default_instance_;
class PathLaneBorrowDeciderConfig;
struct PathLaneBorrowDeciderConfigDefaultTypeInternal;
extern PathLaneBorrowDeciderConfigDefaultTypeInternal _PathLaneBorrowDeciderConfig_default_instance_;
class PathReferenceDeciderConfig;
struct PathReferenceDeciderConfigDefaultTypeInternal;
extern PathReferenceDeciderConfigDefaultTypeInternal _PathReferenceDeciderConfig_default_instance_;
class PathReuseDeciderConfig;
struct PathReuseDeciderConfigDefaultTypeInternal;
extern PathReuseDeciderConfigDefaultTypeInternal _PathReuseDeciderConfig_default_instance_;
class PiecewiseJerkNonlinearSpeedOptimizerConfig;
struct PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkNonlinearSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_;
class PiecewiseJerkPathOptimizerConfig;
struct PiecewiseJerkPathOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkPathOptimizerConfigDefaultTypeInternal _PiecewiseJerkPathOptimizerConfig_default_instance_;
class PiecewiseJerkPathWeights;
struct PiecewiseJerkPathWeightsDefaultTypeInternal;
extern PiecewiseJerkPathWeightsDefaultTypeInternal _PiecewiseJerkPathWeights_default_instance_;
class PiecewiseJerkSpeedOptimizerConfig;
struct PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
class RuleBasedStopDeciderConfig;
struct RuleBasedStopDeciderConfigDefaultTypeInternal;
extern RuleBasedStopDeciderConfigDefaultTypeInternal _RuleBasedStopDeciderConfig_default_instance_;
class STBoundsDeciderConfig;
struct STBoundsDeciderConfigDefaultTypeInternal;
extern STBoundsDeciderConfigDefaultTypeInternal _STBoundsDeciderConfig_default_instance_;
class ShiftConfig;
struct ShiftConfigDefaultTypeInternal;
extern ShiftConfigDefaultTypeInternal _ShiftConfig_default_instance_;
class SpeedBoundsDeciderConfig;
struct SpeedBoundsDeciderConfigDefaultTypeInternal;
extern SpeedBoundsDeciderConfigDefaultTypeInternal _SpeedBoundsDeciderConfig_default_instance_;
class SpeedHeuristicOptimizerConfig;
struct SpeedHeuristicOptimizerConfigDefaultTypeInternal;
extern SpeedHeuristicOptimizerConfigDefaultTypeInternal _SpeedHeuristicOptimizerConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::CreepDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::CreepDeciderConfig>(Arena*);
template<> ::apollo::planning::DpStSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::LaneChangeDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::LaneChangeDeciderConfig>(Arena*);
template<> ::apollo::planning::LearningModelInferenceTaskConfig* Arena::CreateMaybeMessage<::apollo::planning::LearningModelInferenceTaskConfig>(Arena*);
template<> ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* Arena::CreateMaybeMessage<::apollo::planning::LearningModelInferenceTrajectoryTaskConfig>(Arena*);
template<> ::apollo::planning::MoveDestLaneConfigTable* Arena::CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(Arena*);
template<> ::apollo::planning::NaviObstacleDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviObstacleDeciderConfig>(Arena*);
template<> ::apollo::planning::NaviPathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(Arena*);
template<> ::apollo::planning::NaviSpeedDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(Arena*);
template<> ::apollo::planning::PathAssessmentDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathAssessmentDeciderConfig>(Arena*);
template<> ::apollo::planning::PathBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::PathDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathDeciderConfig>(Arena*);
template<> ::apollo::planning::PathLaneBorrowDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathLaneBorrowDeciderConfig>(Arena*);
template<> ::apollo::planning::PathReferenceDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathReferenceDeciderConfig>(Arena*);
template<> ::apollo::planning::PathReuseDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::PathReuseDeciderConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkPathOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathOptimizerConfig>(Arena*);
template<> ::apollo::planning::PiecewiseJerkPathWeights* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(Arena*);
template<> ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::PiecewiseJerkSpeedOptimizerConfig>(Arena*);
template<> ::apollo::planning::RuleBasedStopDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::RuleBasedStopDeciderConfig>(Arena*);
template<> ::apollo::planning::STBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::STBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::ShiftConfig* Arena::CreateMaybeMessage<::apollo::planning::ShiftConfig>(Arena*);
template<> ::apollo::planning::SpeedBoundsDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::SpeedBoundsDeciderConfig>(Arena*);
template<> ::apollo::planning::SpeedHeuristicOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::SpeedHeuristicOptimizerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum LearningModelInferenceTaskConfig_ModelType : int {
  LearningModelInferenceTaskConfig_ModelType_CNN = 1,
  LearningModelInferenceTaskConfig_ModelType_CNN_LSTM = 2
};
bool LearningModelInferenceTaskConfig_ModelType_IsValid(int value);
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig_ModelType_ModelType_MIN = LearningModelInferenceTaskConfig_ModelType_CNN;
constexpr LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig_ModelType_ModelType_MAX = LearningModelInferenceTaskConfig_ModelType_CNN_LSTM;
constexpr int LearningModelInferenceTaskConfig_ModelType_ModelType_ARRAYSIZE = LearningModelInferenceTaskConfig_ModelType_ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LearningModelInferenceTaskConfig_ModelType_descriptor();
template<typename T>
inline const std::string& LearningModelInferenceTaskConfig_ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LearningModelInferenceTaskConfig_ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LearningModelInferenceTaskConfig_ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LearningModelInferenceTaskConfig_ModelType_descriptor(), enum_t_value);
}
inline bool LearningModelInferenceTaskConfig_ModelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LearningModelInferenceTaskConfig_ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LearningModelInferenceTaskConfig_ModelType>(
    LearningModelInferenceTaskConfig_ModelType_descriptor(), name, value);
}
// ===================================================================

class CreepDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.CreepDeciderConfig) */ {
 public:
  inline CreepDeciderConfig() : CreepDeciderConfig(nullptr) {}
  ~CreepDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR CreepDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreepDeciderConfig(const CreepDeciderConfig& from);
  CreepDeciderConfig(CreepDeciderConfig&& from) noexcept
    : CreepDeciderConfig() {
    *this = ::std::move(from);
  }

  inline CreepDeciderConfig& operator=(const CreepDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreepDeciderConfig& operator=(CreepDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreepDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreepDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const CreepDeciderConfig*>(
               &_CreepDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreepDeciderConfig& a, CreepDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CreepDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreepDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreepDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreepDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreepDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreepDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreepDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.CreepDeciderConfig";
  }
  protected:
  explicit CreepDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopDistanceFieldNumber = 1,
    kSpeedLimitFieldNumber = 2,
    kMaxValidStopDistanceFieldNumber = 3,
    kMinBoundaryTFieldNumber = 4,
    kIgnoreMaxStMinTFieldNumber = 5,
    kIgnoreMinStMinSFieldNumber = 6,
  };
  // optional double stop_distance = 1 [default = 0.5];
  bool has_stop_distance() const;
  private:
  bool _internal_has_stop_distance() const;
  public:
  void clear_stop_distance();
  double stop_distance() const;
  void set_stop_distance(double value);
  private:
  double _internal_stop_distance() const;
  void _internal_set_stop_distance(double value);
  public:

  // optional double speed_limit = 2 [default = 1];
  bool has_speed_limit() const;
  private:
  bool _internal_has_speed_limit() const;
  public:
  void clear_speed_limit();
  double speed_limit() const;
  void set_speed_limit(double value);
  private:
  double _internal_speed_limit() const;
  void _internal_set_speed_limit(double value);
  public:

  // optional double max_valid_stop_distance = 3 [default = 0.3];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_boundary_t = 4 [default = 6];
  bool has_min_boundary_t() const;
  private:
  bool _internal_has_min_boundary_t() const;
  public:
  void clear_min_boundary_t();
  double min_boundary_t() const;
  void set_min_boundary_t(double value);
  private:
  double _internal_min_boundary_t() const;
  void _internal_set_min_boundary_t(double value);
  public:

  // optional double ignore_max_st_min_t = 5 [default = 0.1];
  bool has_ignore_max_st_min_t() const;
  private:
  bool _internal_has_ignore_max_st_min_t() const;
  public:
  void clear_ignore_max_st_min_t();
  double ignore_max_st_min_t() const;
  void set_ignore_max_st_min_t(double value);
  private:
  double _internal_ignore_max_st_min_t() const;
  void _internal_set_ignore_max_st_min_t(double value);
  public:

  // optional double ignore_min_st_min_s = 6 [default = 15];
  bool has_ignore_min_st_min_s() const;
  private:
  bool _internal_has_ignore_min_st_min_s() const;
  public:
  void clear_ignore_min_st_min_s();
  double ignore_min_st_min_s() const;
  void set_ignore_min_st_min_s(double value);
  private:
  double _internal_ignore_min_st_min_s() const;
  void _internal_set_ignore_min_st_min_s(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.CreepDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double stop_distance_;
    double speed_limit_;
    double max_valid_stop_distance_;
    double min_boundary_t_;
    double ignore_max_st_min_t_;
    double ignore_min_st_min_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LaneChangeDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LaneChangeDeciderConfig) */ {
 public:
  inline LaneChangeDeciderConfig() : LaneChangeDeciderConfig(nullptr) {}
  ~LaneChangeDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR LaneChangeDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneChangeDeciderConfig(const LaneChangeDeciderConfig& from);
  LaneChangeDeciderConfig(LaneChangeDeciderConfig&& from) noexcept
    : LaneChangeDeciderConfig() {
    *this = ::std::move(from);
  }

  inline LaneChangeDeciderConfig& operator=(const LaneChangeDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneChangeDeciderConfig& operator=(LaneChangeDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneChangeDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneChangeDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const LaneChangeDeciderConfig*>(
               &_LaneChangeDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaneChangeDeciderConfig& a, LaneChangeDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneChangeDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneChangeDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneChangeDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneChangeDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneChangeDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneChangeDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneChangeDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LaneChangeDeciderConfig";
  }
  protected:
  explicit LaneChangeDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableLaneChangeUrgencyCheckFieldNumber = 1,
    kEnablePrioritizeChangeLaneFieldNumber = 2,
    kEnableRemoveChangeLaneFieldNumber = 3,
    kRecklessChangeLaneFieldNumber = 4,
    kChangeLaneSuccessFreezeTimeFieldNumber = 5,
    kChangeLaneFailFreezeTimeFieldNumber = 6,
  };
  // optional bool enable_lane_change_urgency_check = 1;
  bool has_enable_lane_change_urgency_check() const;
  private:
  bool _internal_has_enable_lane_change_urgency_check() const;
  public:
  void clear_enable_lane_change_urgency_check();
  bool enable_lane_change_urgency_check() const;
  void set_enable_lane_change_urgency_check(bool value);
  private:
  bool _internal_enable_lane_change_urgency_check() const;
  void _internal_set_enable_lane_change_urgency_check(bool value);
  public:

  // optional bool enable_prioritize_change_lane = 2 [default = false];
  bool has_enable_prioritize_change_lane() const;
  private:
  bool _internal_has_enable_prioritize_change_lane() const;
  public:
  void clear_enable_prioritize_change_lane();
  bool enable_prioritize_change_lane() const;
  void set_enable_prioritize_change_lane(bool value);
  private:
  bool _internal_enable_prioritize_change_lane() const;
  void _internal_set_enable_prioritize_change_lane(bool value);
  public:

  // optional bool enable_remove_change_lane = 3 [default = false];
  bool has_enable_remove_change_lane() const;
  private:
  bool _internal_has_enable_remove_change_lane() const;
  public:
  void clear_enable_remove_change_lane();
  bool enable_remove_change_lane() const;
  void set_enable_remove_change_lane(bool value);
  private:
  bool _internal_enable_remove_change_lane() const;
  void _internal_set_enable_remove_change_lane(bool value);
  public:

  // optional bool reckless_change_lane = 4 [default = false];
  bool has_reckless_change_lane() const;
  private:
  bool _internal_has_reckless_change_lane() const;
  public:
  void clear_reckless_change_lane();
  bool reckless_change_lane() const;
  void set_reckless_change_lane(bool value);
  private:
  bool _internal_reckless_change_lane() const;
  void _internal_set_reckless_change_lane(bool value);
  public:

  // optional double change_lane_success_freeze_time = 5 [default = 1.5];
  bool has_change_lane_success_freeze_time() const;
  private:
  bool _internal_has_change_lane_success_freeze_time() const;
  public:
  void clear_change_lane_success_freeze_time();
  double change_lane_success_freeze_time() const;
  void set_change_lane_success_freeze_time(double value);
  private:
  double _internal_change_lane_success_freeze_time() const;
  void _internal_set_change_lane_success_freeze_time(double value);
  public:

  // optional double change_lane_fail_freeze_time = 6 [default = 1];
  bool has_change_lane_fail_freeze_time() const;
  private:
  bool _internal_has_change_lane_fail_freeze_time() const;
  public:
  void clear_change_lane_fail_freeze_time();
  double change_lane_fail_freeze_time() const;
  void set_change_lane_fail_freeze_time(double value);
  private:
  double _internal_change_lane_fail_freeze_time() const;
  void _internal_set_change_lane_fail_freeze_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LaneChangeDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_lane_change_urgency_check_;
    bool enable_prioritize_change_lane_;
    bool enable_remove_change_lane_;
    bool reckless_change_lane_;
    double change_lane_success_freeze_time_;
    double change_lane_fail_freeze_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LearningModelInferenceTaskConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LearningModelInferenceTaskConfig) */ {
 public:
  inline LearningModelInferenceTaskConfig() : LearningModelInferenceTaskConfig(nullptr) {}
  ~LearningModelInferenceTaskConfig() override;
  explicit PROTOBUF_CONSTEXPR LearningModelInferenceTaskConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LearningModelInferenceTaskConfig(const LearningModelInferenceTaskConfig& from);
  LearningModelInferenceTaskConfig(LearningModelInferenceTaskConfig&& from) noexcept
    : LearningModelInferenceTaskConfig() {
    *this = ::std::move(from);
  }

  inline LearningModelInferenceTaskConfig& operator=(const LearningModelInferenceTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LearningModelInferenceTaskConfig& operator=(LearningModelInferenceTaskConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LearningModelInferenceTaskConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LearningModelInferenceTaskConfig* internal_default_instance() {
    return reinterpret_cast<const LearningModelInferenceTaskConfig*>(
               &_LearningModelInferenceTaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LearningModelInferenceTaskConfig& a, LearningModelInferenceTaskConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LearningModelInferenceTaskConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LearningModelInferenceTaskConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LearningModelInferenceTaskConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LearningModelInferenceTaskConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LearningModelInferenceTaskConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LearningModelInferenceTaskConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearningModelInferenceTaskConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LearningModelInferenceTaskConfig";
  }
  protected:
  explicit LearningModelInferenceTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LearningModelInferenceTaskConfig_ModelType ModelType;
  static constexpr ModelType CNN =
    LearningModelInferenceTaskConfig_ModelType_CNN;
  static constexpr ModelType CNN_LSTM =
    LearningModelInferenceTaskConfig_ModelType_CNN_LSTM;
  static inline bool ModelType_IsValid(int value) {
    return LearningModelInferenceTaskConfig_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN =
    LearningModelInferenceTaskConfig_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX =
    LearningModelInferenceTaskConfig_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE =
    LearningModelInferenceTaskConfig_ModelType_ModelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelType_descriptor() {
    return LearningModelInferenceTaskConfig_ModelType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelType_Name.");
    return LearningModelInferenceTaskConfig_ModelType_Name(enum_t_value);
  }
  static inline bool ModelType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ModelType* value) {
    return LearningModelInferenceTaskConfig_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCpuModelFileFieldNumber = 2,
    kGpuModelFileFieldNumber = 3,
    kAllowEmptyLearningBasedDataFieldNumber = 6,
    kAllowEmptyOutputTrajectoryFieldNumber = 7,
    kModelTypeFieldNumber = 1,
    kUseCudaFieldNumber = 4,
    kTrajectoryDeltaTFieldNumber = 5,
  };
  // optional string cpu_model_file = 2;
  bool has_cpu_model_file() const;
  private:
  bool _internal_has_cpu_model_file() const;
  public:
  void clear_cpu_model_file();
  const std::string& cpu_model_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_model_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_model_file();
  PROTOBUF_NODISCARD std::string* release_cpu_model_file();
  void set_allocated_cpu_model_file(std::string* cpu_model_file);
  private:
  const std::string& _internal_cpu_model_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_model_file(const std::string& value);
  std::string* _internal_mutable_cpu_model_file();
  public:

  // optional string gpu_model_file = 3;
  bool has_gpu_model_file() const;
  private:
  bool _internal_has_gpu_model_file() const;
  public:
  void clear_gpu_model_file();
  const std::string& gpu_model_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gpu_model_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gpu_model_file();
  PROTOBUF_NODISCARD std::string* release_gpu_model_file();
  void set_allocated_gpu_model_file(std::string* gpu_model_file);
  private:
  const std::string& _internal_gpu_model_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gpu_model_file(const std::string& value);
  std::string* _internal_mutable_gpu_model_file();
  public:

  // optional bool allow_empty_learning_based_data = 6 [default = false];
  bool has_allow_empty_learning_based_data() const;
  private:
  bool _internal_has_allow_empty_learning_based_data() const;
  public:
  void clear_allow_empty_learning_based_data();
  bool allow_empty_learning_based_data() const;
  void set_allow_empty_learning_based_data(bool value);
  private:
  bool _internal_allow_empty_learning_based_data() const;
  void _internal_set_allow_empty_learning_based_data(bool value);
  public:

  // optional bool allow_empty_output_trajectory = 7 [default = false];
  bool has_allow_empty_output_trajectory() const;
  private:
  bool _internal_has_allow_empty_output_trajectory() const;
  public:
  void clear_allow_empty_output_trajectory();
  bool allow_empty_output_trajectory() const;
  void set_allow_empty_output_trajectory(bool value);
  private:
  bool _internal_allow_empty_output_trajectory() const;
  void _internal_set_allow_empty_output_trajectory(bool value);
  public:

  // optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
  bool has_model_type() const;
  private:
  bool _internal_has_model_type() const;
  public:
  void clear_model_type();
  ::apollo::planning::LearningModelInferenceTaskConfig_ModelType model_type() const;
  void set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value);
  private:
  ::apollo::planning::LearningModelInferenceTaskConfig_ModelType _internal_model_type() const;
  void _internal_set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value);
  public:

  // optional bool use_cuda = 4 [default = true];
  bool has_use_cuda() const;
  private:
  bool _internal_has_use_cuda() const;
  public:
  void clear_use_cuda();
  bool use_cuda() const;
  void set_use_cuda(bool value);
  private:
  bool _internal_use_cuda() const;
  void _internal_set_use_cuda(bool value);
  public:

  // optional double trajectory_delta_t = 5 [default = 0.2];
  bool has_trajectory_delta_t() const;
  private:
  bool _internal_has_trajectory_delta_t() const;
  public:
  void clear_trajectory_delta_t();
  double trajectory_delta_t() const;
  void set_trajectory_delta_t(double value);
  private:
  double _internal_trajectory_delta_t() const;
  void _internal_set_trajectory_delta_t(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LearningModelInferenceTaskConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_model_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gpu_model_file_;
    bool allow_empty_learning_based_data_;
    bool allow_empty_output_trajectory_;
    int model_type_;
    bool use_cuda_;
    double trajectory_delta_t_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LearningModelInferenceTrajectoryTaskConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LearningModelInferenceTrajectoryTaskConfig) */ {
 public:
  inline LearningModelInferenceTrajectoryTaskConfig() : LearningModelInferenceTrajectoryTaskConfig(nullptr) {}
  ~LearningModelInferenceTrajectoryTaskConfig() override;
  explicit PROTOBUF_CONSTEXPR LearningModelInferenceTrajectoryTaskConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LearningModelInferenceTrajectoryTaskConfig(const LearningModelInferenceTrajectoryTaskConfig& from);
  LearningModelInferenceTrajectoryTaskConfig(LearningModelInferenceTrajectoryTaskConfig&& from) noexcept
    : LearningModelInferenceTrajectoryTaskConfig() {
    *this = ::std::move(from);
  }

  inline LearningModelInferenceTrajectoryTaskConfig& operator=(const LearningModelInferenceTrajectoryTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LearningModelInferenceTrajectoryTaskConfig& operator=(LearningModelInferenceTrajectoryTaskConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LearningModelInferenceTrajectoryTaskConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LearningModelInferenceTrajectoryTaskConfig* internal_default_instance() {
    return reinterpret_cast<const LearningModelInferenceTrajectoryTaskConfig*>(
               &_LearningModelInferenceTrajectoryTaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LearningModelInferenceTrajectoryTaskConfig& a, LearningModelInferenceTrajectoryTaskConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LearningModelInferenceTrajectoryTaskConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LearningModelInferenceTrajectoryTaskConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LearningModelInferenceTrajectoryTaskConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LearningModelInferenceTrajectoryTaskConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LearningModelInferenceTrajectoryTaskConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LearningModelInferenceTrajectoryTaskConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LearningModelInferenceTrajectoryTaskConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LearningModelInferenceTrajectoryTaskConfig";
  }
  protected:
  explicit LearningModelInferenceTrajectoryTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinAdcFutureTrajectoryTimeLengthFieldNumber = 1,
  };
  // optional double min_adc_future_trajectory_time_length = 1 [default = 2];
  bool has_min_adc_future_trajectory_time_length() const;
  private:
  bool _internal_has_min_adc_future_trajectory_time_length() const;
  public:
  void clear_min_adc_future_trajectory_time_length();
  double min_adc_future_trajectory_time_length() const;
  void set_min_adc_future_trajectory_time_length(double value);
  private:
  double _internal_min_adc_future_trajectory_time_length() const;
  void _internal_set_min_adc_future_trajectory_time_length(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LearningModelInferenceTrajectoryTaskConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double min_adc_future_trajectory_time_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NaviObstacleDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviObstacleDeciderConfig) */ {
 public:
  inline NaviObstacleDeciderConfig() : NaviObstacleDeciderConfig(nullptr) {}
  ~NaviObstacleDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviObstacleDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviObstacleDeciderConfig(const NaviObstacleDeciderConfig& from);
  NaviObstacleDeciderConfig(NaviObstacleDeciderConfig&& from) noexcept
    : NaviObstacleDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviObstacleDeciderConfig& operator=(const NaviObstacleDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviObstacleDeciderConfig& operator=(NaviObstacleDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviObstacleDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviObstacleDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviObstacleDeciderConfig*>(
               &_NaviObstacleDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NaviObstacleDeciderConfig& a, NaviObstacleDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviObstacleDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviObstacleDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviObstacleDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviObstacleDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviObstacleDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviObstacleDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviObstacleDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviObstacleDeciderConfig";
  }
  protected:
  explicit NaviObstacleDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinNudgeDistanceFieldNumber = 1,
    kMaxNudgeDistanceFieldNumber = 2,
    kMaxAllowNudgeSpeedFieldNumber = 3,
    kSafeDistanceFieldNumber = 4,
    kNudgeAllowToleranceFieldNumber = 5,
    kJudgeDisCoeffFieldNumber = 7,
    kBasisDisValueFieldNumber = 8,
    kCyclesNumberFieldNumber = 6,
    kMaxKeepNudgeCyclesFieldNumber = 11,
    kLateralVelocityValueFieldNumber = 9,
    kSpeedDeciderDetectRangeFieldNumber = 10,
  };
  // optional double min_nudge_distance = 1 [default = 0.2];
  bool has_min_nudge_distance() const;
  private:
  bool _internal_has_min_nudge_distance() const;
  public:
  void clear_min_nudge_distance();
  double min_nudge_distance() const;
  void set_min_nudge_distance(double value);
  private:
  double _internal_min_nudge_distance() const;
  void _internal_set_min_nudge_distance(double value);
  public:

  // optional double max_nudge_distance = 2 [default = 1.2];
  bool has_max_nudge_distance() const;
  private:
  bool _internal_has_max_nudge_distance() const;
  public:
  void clear_max_nudge_distance();
  double max_nudge_distance() const;
  void set_max_nudge_distance(double value);
  private:
  double _internal_max_nudge_distance() const;
  void _internal_set_max_nudge_distance(double value);
  public:

  // optional double max_allow_nudge_speed = 3 [default = 16.667];
  bool has_max_allow_nudge_speed() const;
  private:
  bool _internal_has_max_allow_nudge_speed() const;
  public:
  void clear_max_allow_nudge_speed();
  double max_allow_nudge_speed() const;
  void set_max_allow_nudge_speed(double value);
  private:
  double _internal_max_allow_nudge_speed() const;
  void _internal_set_max_allow_nudge_speed(double value);
  public:

  // optional double safe_distance = 4 [default = 0.2];
  bool has_safe_distance() const;
  private:
  bool _internal_has_safe_distance() const;
  public:
  void clear_safe_distance();
  double safe_distance() const;
  void set_safe_distance(double value);
  private:
  double _internal_safe_distance() const;
  void _internal_set_safe_distance(double value);
  public:

  // optional double nudge_allow_tolerance = 5 [default = 0.05];
  bool has_nudge_allow_tolerance() const;
  private:
  bool _internal_has_nudge_allow_tolerance() const;
  public:
  void clear_nudge_allow_tolerance();
  double nudge_allow_tolerance() const;
  void set_nudge_allow_tolerance(double value);
  private:
  double _internal_nudge_allow_tolerance() const;
  void _internal_set_nudge_allow_tolerance(double value);
  public:

  // optional double judge_dis_coeff = 7 [default = 2];
  bool has_judge_dis_coeff() const;
  private:
  bool _internal_has_judge_dis_coeff() const;
  public:
  void clear_judge_dis_coeff();
  double judge_dis_coeff() const;
  void set_judge_dis_coeff(double value);
  private:
  double _internal_judge_dis_coeff() const;
  void _internal_set_judge_dis_coeff(double value);
  public:

  // optional double basis_dis_value = 8 [default = 30];
  bool has_basis_dis_value() const;
  private:
  bool _internal_has_basis_dis_value() const;
  public:
  void clear_basis_dis_value();
  double basis_dis_value() const;
  void set_basis_dis_value(double value);
  private:
  double _internal_basis_dis_value() const;
  void _internal_set_basis_dis_value(double value);
  public:

  // optional uint32 cycles_number = 6 [default = 3];
  bool has_cycles_number() const;
  private:
  bool _internal_has_cycles_number() const;
  public:
  void clear_cycles_number();
  uint32_t cycles_number() const;
  void set_cycles_number(uint32_t value);
  private:
  uint32_t _internal_cycles_number() const;
  void _internal_set_cycles_number(uint32_t value);
  public:

  // optional uint32 max_keep_nudge_cycles = 11 [default = 100];
  bool has_max_keep_nudge_cycles() const;
  private:
  bool _internal_has_max_keep_nudge_cycles() const;
  public:
  void clear_max_keep_nudge_cycles();
  uint32_t max_keep_nudge_cycles() const;
  void set_max_keep_nudge_cycles(uint32_t value);
  private:
  uint32_t _internal_max_keep_nudge_cycles() const;
  void _internal_set_max_keep_nudge_cycles(uint32_t value);
  public:

  // optional double lateral_velocity_value = 9 [default = 0.5];
  bool has_lateral_velocity_value() const;
  private:
  bool _internal_has_lateral_velocity_value() const;
  public:
  void clear_lateral_velocity_value();
  double lateral_velocity_value() const;
  void set_lateral_velocity_value(double value);
  private:
  double _internal_lateral_velocity_value() const;
  void _internal_set_lateral_velocity_value(double value);
  public:

  // optional double speed_decider_detect_range = 10 [default = 1];
  bool has_speed_decider_detect_range() const;
  private:
  bool _internal_has_speed_decider_detect_range() const;
  public:
  void clear_speed_decider_detect_range();
  double speed_decider_detect_range() const;
  void set_speed_decider_detect_range(double value);
  private:
  double _internal_speed_decider_detect_range() const;
  void _internal_set_speed_decider_detect_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviObstacleDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double min_nudge_distance_;
    double max_nudge_distance_;
    double max_allow_nudge_speed_;
    double safe_distance_;
    double nudge_allow_tolerance_;
    double judge_dis_coeff_;
    double basis_dis_value_;
    uint32_t cycles_number_;
    uint32_t max_keep_nudge_cycles_;
    double lateral_velocity_value_;
    double speed_decider_detect_range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NaviPathDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviPathDeciderConfig) */ {
 public:
  inline NaviPathDeciderConfig() : NaviPathDeciderConfig(nullptr) {}
  ~NaviPathDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviPathDeciderConfig(const NaviPathDeciderConfig& from);
  NaviPathDeciderConfig(NaviPathDeciderConfig&& from) noexcept
    : NaviPathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviPathDeciderConfig& operator=(const NaviPathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviPathDeciderConfig& operator=(NaviPathDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviPathDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviPathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPathDeciderConfig*>(
               &_NaviPathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NaviPathDeciderConfig& a, NaviPathDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviPathDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviPathDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviPathDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviPathDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviPathDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviPathDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviPathDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviPathDeciderConfig";
  }
  protected:
  explicit NaviPathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveDestLaneConfigTalbeFieldNumber = 7,
    kMaxKappaThresholdFieldNumber = 9,
    kKappaMoveDestLaneCompensationFieldNumber = 10,
    kStartPlanPointFromFieldNumber = 11,
    kMinLookForwardTimeFieldNumber = 2,
    kMinPathLengthFieldNumber = 1,
    kMaxKeepLaneDistanceFieldNumber = 3,
    kMaxKeepLaneShiftYFieldNumber = 4,
    kMinKeepLaneOffsetFieldNumber = 5,
    kKeepLaneShiftCompensationFieldNumber = 6,
    kMoveDestLaneCompensationFieldNumber = 8,
  };
  // optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
  bool has_move_dest_lane_config_talbe() const;
  private:
  bool _internal_has_move_dest_lane_config_talbe() const;
  public:
  void clear_move_dest_lane_config_talbe();
  const ::apollo::planning::MoveDestLaneConfigTable& move_dest_lane_config_talbe() const;
  PROTOBUF_NODISCARD ::apollo::planning::MoveDestLaneConfigTable* release_move_dest_lane_config_talbe();
  ::apollo::planning::MoveDestLaneConfigTable* mutable_move_dest_lane_config_talbe();
  void set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe);
  private:
  const ::apollo::planning::MoveDestLaneConfigTable& _internal_move_dest_lane_config_talbe() const;
  ::apollo::planning::MoveDestLaneConfigTable* _internal_mutable_move_dest_lane_config_talbe();
  public:
  void unsafe_arena_set_allocated_move_dest_lane_config_talbe(
      ::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe);
  ::apollo::planning::MoveDestLaneConfigTable* unsafe_arena_release_move_dest_lane_config_talbe();

  // optional double max_kappa_threshold = 9 [default = 0];
  bool has_max_kappa_threshold() const;
  private:
  bool _internal_has_max_kappa_threshold() const;
  public:
  void clear_max_kappa_threshold();
  double max_kappa_threshold() const;
  void set_max_kappa_threshold(double value);
  private:
  double _internal_max_kappa_threshold() const;
  void _internal_set_max_kappa_threshold(double value);
  public:

  // optional double kappa_move_dest_lane_compensation = 10 [default = 0];
  bool has_kappa_move_dest_lane_compensation() const;
  private:
  bool _internal_has_kappa_move_dest_lane_compensation() const;
  public:
  void clear_kappa_move_dest_lane_compensation();
  double kappa_move_dest_lane_compensation() const;
  void set_kappa_move_dest_lane_compensation(double value);
  private:
  double _internal_kappa_move_dest_lane_compensation() const;
  void _internal_set_kappa_move_dest_lane_compensation(double value);
  public:

  // optional uint32 start_plan_point_from = 11 [default = 0];
  bool has_start_plan_point_from() const;
  private:
  bool _internal_has_start_plan_point_from() const;
  public:
  void clear_start_plan_point_from();
  uint32_t start_plan_point_from() const;
  void set_start_plan_point_from(uint32_t value);
  private:
  uint32_t _internal_start_plan_point_from() const;
  void _internal_set_start_plan_point_from(uint32_t value);
  public:

  // optional uint32 min_look_forward_time = 2 [default = 2];
  bool has_min_look_forward_time() const;
  private:
  bool _internal_has_min_look_forward_time() const;
  public:
  void clear_min_look_forward_time();
  uint32_t min_look_forward_time() const;
  void set_min_look_forward_time(uint32_t value);
  private:
  uint32_t _internal_min_look_forward_time() const;
  void _internal_set_min_look_forward_time(uint32_t value);
  public:

  // optional double min_path_length = 1 [default = 5];
  bool has_min_path_length() const;
  private:
  bool _internal_has_min_path_length() const;
  public:
  void clear_min_path_length();
  double min_path_length() const;
  void set_min_path_length(double value);
  private:
  double _internal_min_path_length() const;
  void _internal_set_min_path_length(double value);
  public:

  // optional double max_keep_lane_distance = 3 [default = 0.8];
  bool has_max_keep_lane_distance() const;
  private:
  bool _internal_has_max_keep_lane_distance() const;
  public:
  void clear_max_keep_lane_distance();
  double max_keep_lane_distance() const;
  void set_max_keep_lane_distance(double value);
  private:
  double _internal_max_keep_lane_distance() const;
  void _internal_set_max_keep_lane_distance(double value);
  public:

  // optional double max_keep_lane_shift_y = 4 [default = 20];
  bool has_max_keep_lane_shift_y() const;
  private:
  bool _internal_has_max_keep_lane_shift_y() const;
  public:
  void clear_max_keep_lane_shift_y();
  double max_keep_lane_shift_y() const;
  void set_max_keep_lane_shift_y(double value);
  private:
  double _internal_max_keep_lane_shift_y() const;
  void _internal_set_max_keep_lane_shift_y(double value);
  public:

  // optional double min_keep_lane_offset = 5 [default = 15];
  bool has_min_keep_lane_offset() const;
  private:
  bool _internal_has_min_keep_lane_offset() const;
  public:
  void clear_min_keep_lane_offset();
  double min_keep_lane_offset() const;
  void set_min_keep_lane_offset(double value);
  private:
  double _internal_min_keep_lane_offset() const;
  void _internal_set_min_keep_lane_offset(double value);
  public:

  // optional double keep_lane_shift_compensation = 6 [default = 0.01];
  bool has_keep_lane_shift_compensation() const;
  private:
  bool _internal_has_keep_lane_shift_compensation() const;
  public:
  void clear_keep_lane_shift_compensation();
  double keep_lane_shift_compensation() const;
  void set_keep_lane_shift_compensation(double value);
  private:
  double _internal_keep_lane_shift_compensation() const;
  void _internal_set_keep_lane_shift_compensation(double value);
  public:

  // optional double move_dest_lane_compensation = 8 [default = 0.35];
  bool has_move_dest_lane_compensation() const;
  private:
  bool _internal_has_move_dest_lane_compensation() const;
  public:
  void clear_move_dest_lane_compensation();
  double move_dest_lane_compensation() const;
  void set_move_dest_lane_compensation(double value);
  private:
  double _internal_move_dest_lane_compensation() const;
  void _internal_set_move_dest_lane_compensation(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviPathDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe_;
    double max_kappa_threshold_;
    double kappa_move_dest_lane_compensation_;
    uint32_t start_plan_point_from_;
    uint32_t min_look_forward_time_;
    double min_path_length_;
    double max_keep_lane_distance_;
    double max_keep_lane_shift_y_;
    double min_keep_lane_offset_;
    double keep_lane_shift_compensation_;
    double move_dest_lane_compensation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MoveDestLaneConfigTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.MoveDestLaneConfigTable) */ {
 public:
  inline MoveDestLaneConfigTable() : MoveDestLaneConfigTable(nullptr) {}
  ~MoveDestLaneConfigTable() override;
  explicit PROTOBUF_CONSTEXPR MoveDestLaneConfigTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveDestLaneConfigTable(const MoveDestLaneConfigTable& from);
  MoveDestLaneConfigTable(MoveDestLaneConfigTable&& from) noexcept
    : MoveDestLaneConfigTable() {
    *this = ::std::move(from);
  }

  inline MoveDestLaneConfigTable& operator=(const MoveDestLaneConfigTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveDestLaneConfigTable& operator=(MoveDestLaneConfigTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveDestLaneConfigTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveDestLaneConfigTable* internal_default_instance() {
    return reinterpret_cast<const MoveDestLaneConfigTable*>(
               &_MoveDestLaneConfigTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MoveDestLaneConfigTable& a, MoveDestLaneConfigTable& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveDestLaneConfigTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveDestLaneConfigTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveDestLaneConfigTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveDestLaneConfigTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveDestLaneConfigTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveDestLaneConfigTable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveDestLaneConfigTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.MoveDestLaneConfigTable";
  }
  protected:
  explicit MoveDestLaneConfigTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLateralShiftFieldNumber = 1,
  };
  // repeated .apollo.planning.ShiftConfig lateral_shift = 1;
  int lateral_shift_size() const;
  private:
  int _internal_lateral_shift_size() const;
  public:
  void clear_lateral_shift();
  ::apollo::planning::ShiftConfig* mutable_lateral_shift(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
      mutable_lateral_shift();
  private:
  const ::apollo::planning::ShiftConfig& _internal_lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* _internal_add_lateral_shift();
  public:
  const ::apollo::planning::ShiftConfig& lateral_shift(int index) const;
  ::apollo::planning::ShiftConfig* add_lateral_shift();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
      lateral_shift() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.MoveDestLaneConfigTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig > lateral_shift_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ShiftConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ShiftConfig) */ {
 public:
  inline ShiftConfig() : ShiftConfig(nullptr) {}
  ~ShiftConfig() override;
  explicit PROTOBUF_CONSTEXPR ShiftConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShiftConfig(const ShiftConfig& from);
  ShiftConfig(ShiftConfig&& from) noexcept
    : ShiftConfig() {
    *this = ::std::move(from);
  }

  inline ShiftConfig& operator=(const ShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftConfig& operator=(ShiftConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShiftConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShiftConfig* internal_default_instance() {
    return reinterpret_cast<const ShiftConfig*>(
               &_ShiftConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ShiftConfig& a, ShiftConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShiftConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShiftConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShiftConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ShiftConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ShiftConfig";
  }
  protected:
  explicit ShiftConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSpeedFieldNumber = 1,
    kMaxMoveDestLaneShiftYFieldNumber = 3,
  };
  // optional double max_speed = 1 [default = 4.16];
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
  bool has_max_move_dest_lane_shift_y() const;
  private:
  bool _internal_has_max_move_dest_lane_shift_y() const;
  public:
  void clear_max_move_dest_lane_shift_y();
  double max_move_dest_lane_shift_y() const;
  void set_max_move_dest_lane_shift_y(double value);
  private:
  double _internal_max_move_dest_lane_shift_y() const;
  void _internal_set_max_move_dest_lane_shift_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ShiftConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_speed_;
    double max_move_dest_lane_shift_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NaviSpeedDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviSpeedDeciderConfig) */ {
 public:
  inline NaviSpeedDeciderConfig() : NaviSpeedDeciderConfig(nullptr) {}
  ~NaviSpeedDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviSpeedDeciderConfig(const NaviSpeedDeciderConfig& from);
  NaviSpeedDeciderConfig(NaviSpeedDeciderConfig&& from) noexcept
    : NaviSpeedDeciderConfig() {
    *this = ::std::move(from);
  }

  inline NaviSpeedDeciderConfig& operator=(const NaviSpeedDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviSpeedDeciderConfig& operator=(NaviSpeedDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviSpeedDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviSpeedDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const NaviSpeedDeciderConfig*>(
               &_NaviSpeedDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NaviSpeedDeciderConfig& a, NaviSpeedDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviSpeedDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviSpeedDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviSpeedDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviSpeedDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviSpeedDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviSpeedDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviSpeedDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviSpeedDeciderConfig";
  }
  protected:
  explicit NaviSpeedDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKappaPreviewFieldNumber = 17,
    kKappaThresholdFieldNumber = 18,
    kEnableSafePathFieldNumber = 14,
    kEnablePlanningStartPointFieldNumber = 15,
    kEnableAccelAutoCompensationFieldNumber = 16,
    kPreferredAccelFieldNumber = 1,
    kPreferredDecelFieldNumber = 2,
    kPreferredJerkFieldNumber = 3,
    kMaxAccelFieldNumber = 4,
    kMaxDecelFieldNumber = 5,
    kObstacleBufferFieldNumber = 6,
    kSafeDistanceBaseFieldNumber = 7,
    kSafeDistanceRatioFieldNumber = 8,
    kFollowingAccelRatioFieldNumber = 9,
    kSoftCentricAccelLimitFieldNumber = 10,
    kHardCentricAccelLimitFieldNumber = 11,
    kHardSpeedLimitFieldNumber = 12,
    kHardAccelLimitFieldNumber = 13,
  };
  // optional double kappa_preview = 17 [default = 0];
  bool has_kappa_preview() const;
  private:
  bool _internal_has_kappa_preview() const;
  public:
  void clear_kappa_preview();
  double kappa_preview() const;
  void set_kappa_preview(double value);
  private:
  double _internal_kappa_preview() const;
  void _internal_set_kappa_preview(double value);
  public:

  // optional double kappa_threshold = 18 [default = 0];
  bool has_kappa_threshold() const;
  private:
  bool _internal_has_kappa_threshold() const;
  public:
  void clear_kappa_threshold();
  double kappa_threshold() const;
  void set_kappa_threshold(double value);
  private:
  double _internal_kappa_threshold() const;
  void _internal_set_kappa_threshold(double value);
  public:

  // optional bool enable_safe_path = 14 [default = true];
  bool has_enable_safe_path() const;
  private:
  bool _internal_has_enable_safe_path() const;
  public:
  void clear_enable_safe_path();
  bool enable_safe_path() const;
  void set_enable_safe_path(bool value);
  private:
  bool _internal_enable_safe_path() const;
  void _internal_set_enable_safe_path(bool value);
  public:

  // optional bool enable_planning_start_point = 15 [default = true];
  bool has_enable_planning_start_point() const;
  private:
  bool _internal_has_enable_planning_start_point() const;
  public:
  void clear_enable_planning_start_point();
  bool enable_planning_start_point() const;
  void set_enable_planning_start_point(bool value);
  private:
  bool _internal_enable_planning_start_point() const;
  void _internal_set_enable_planning_start_point(bool value);
  public:

  // optional bool enable_accel_auto_compensation = 16 [default = true];
  bool has_enable_accel_auto_compensation() const;
  private:
  bool _internal_has_enable_accel_auto_compensation() const;
  public:
  void clear_enable_accel_auto_compensation();
  bool enable_accel_auto_compensation() const;
  void set_enable_accel_auto_compensation(bool value);
  private:
  bool _internal_enable_accel_auto_compensation() const;
  void _internal_set_enable_accel_auto_compensation(bool value);
  public:

  // optional double preferred_accel = 1 [default = 2];
  bool has_preferred_accel() const;
  private:
  bool _internal_has_preferred_accel() const;
  public:
  void clear_preferred_accel();
  double preferred_accel() const;
  void set_preferred_accel(double value);
  private:
  double _internal_preferred_accel() const;
  void _internal_set_preferred_accel(double value);
  public:

  // optional double preferred_decel = 2 [default = 2];
  bool has_preferred_decel() const;
  private:
  bool _internal_has_preferred_decel() const;
  public:
  void clear_preferred_decel();
  double preferred_decel() const;
  void set_preferred_decel(double value);
  private:
  double _internal_preferred_decel() const;
  void _internal_set_preferred_decel(double value);
  public:

  // optional double preferred_jerk = 3 [default = 2];
  bool has_preferred_jerk() const;
  private:
  bool _internal_has_preferred_jerk() const;
  public:
  void clear_preferred_jerk();
  double preferred_jerk() const;
  void set_preferred_jerk(double value);
  private:
  double _internal_preferred_jerk() const;
  void _internal_set_preferred_jerk(double value);
  public:

  // optional double max_accel = 4 [default = 4];
  bool has_max_accel() const;
  private:
  bool _internal_has_max_accel() const;
  public:
  void clear_max_accel();
  double max_accel() const;
  void set_max_accel(double value);
  private:
  double _internal_max_accel() const;
  void _internal_set_max_accel(double value);
  public:

  // optional double max_decel = 5 [default = 5];
  bool has_max_decel() const;
  private:
  bool _internal_has_max_decel() const;
  public:
  void clear_max_decel();
  double max_decel() const;
  void set_max_decel(double value);
  private:
  double _internal_max_decel() const;
  void _internal_set_max_decel(double value);
  public:

  // optional double obstacle_buffer = 6 [default = 0.5];
  bool has_obstacle_buffer() const;
  private:
  bool _internal_has_obstacle_buffer() const;
  public:
  void clear_obstacle_buffer();
  double obstacle_buffer() const;
  void set_obstacle_buffer(double value);
  private:
  double _internal_obstacle_buffer() const;
  void _internal_set_obstacle_buffer(double value);
  public:

  // optional double safe_distance_base = 7 [default = 2];
  bool has_safe_distance_base() const;
  private:
  bool _internal_has_safe_distance_base() const;
  public:
  void clear_safe_distance_base();
  double safe_distance_base() const;
  void set_safe_distance_base(double value);
  private:
  double _internal_safe_distance_base() const;
  void _internal_set_safe_distance_base(double value);
  public:

  // optional double safe_distance_ratio = 8 [default = 1];
  bool has_safe_distance_ratio() const;
  private:
  bool _internal_has_safe_distance_ratio() const;
  public:
  void clear_safe_distance_ratio();
  double safe_distance_ratio() const;
  void set_safe_distance_ratio(double value);
  private:
  double _internal_safe_distance_ratio() const;
  void _internal_set_safe_distance_ratio(double value);
  public:

  // optional double following_accel_ratio = 9 [default = 0.5];
  bool has_following_accel_ratio() const;
  private:
  bool _internal_has_following_accel_ratio() const;
  public:
  void clear_following_accel_ratio();
  double following_accel_ratio() const;
  void set_following_accel_ratio(double value);
  private:
  double _internal_following_accel_ratio() const;
  void _internal_set_following_accel_ratio(double value);
  public:

  // optional double soft_centric_accel_limit = 10 [default = 1.2];
  bool has_soft_centric_accel_limit() const;
  private:
  bool _internal_has_soft_centric_accel_limit() const;
  public:
  void clear_soft_centric_accel_limit();
  double soft_centric_accel_limit() const;
  void set_soft_centric_accel_limit(double value);
  private:
  double _internal_soft_centric_accel_limit() const;
  void _internal_set_soft_centric_accel_limit(double value);
  public:

  // optional double hard_centric_accel_limit = 11 [default = 1.5];
  bool has_hard_centric_accel_limit() const;
  private:
  bool _internal_has_hard_centric_accel_limit() const;
  public:
  void clear_hard_centric_accel_limit();
  double hard_centric_accel_limit() const;
  void set_hard_centric_accel_limit(double value);
  private:
  double _internal_hard_centric_accel_limit() const;
  void _internal_set_hard_centric_accel_limit(double value);
  public:

  // optional double hard_speed_limit = 12 [default = 100];
  bool has_hard_speed_limit() const;
  private:
  bool _internal_has_hard_speed_limit() const;
  public:
  void clear_hard_speed_limit();
  double hard_speed_limit() const;
  void set_hard_speed_limit(double value);
  private:
  double _internal_hard_speed_limit() const;
  void _internal_set_hard_speed_limit(double value);
  public:

  // optional double hard_accel_limit = 13 [default = 10];
  bool has_hard_accel_limit() const;
  private:
  bool _internal_has_hard_accel_limit() const;
  public:
  void clear_hard_accel_limit();
  double hard_accel_limit() const;
  void set_hard_accel_limit(double value);
  private:
  double _internal_hard_accel_limit() const;
  void _internal_set_hard_accel_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviSpeedDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double kappa_preview_;
    double kappa_threshold_;
    bool enable_safe_path_;
    bool enable_planning_start_point_;
    bool enable_accel_auto_compensation_;
    double preferred_accel_;
    double preferred_decel_;
    double preferred_jerk_;
    double max_accel_;
    double max_decel_;
    double obstacle_buffer_;
    double safe_distance_base_;
    double safe_distance_ratio_;
    double following_accel_ratio_;
    double soft_centric_accel_limit_;
    double hard_centric_accel_limit_;
    double hard_speed_limit_;
    double hard_accel_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathAssessmentDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.PathAssessmentDeciderConfig) */ {
 public:
  inline PathAssessmentDeciderConfig() : PathAssessmentDeciderConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PathAssessmentDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathAssessmentDeciderConfig(const PathAssessmentDeciderConfig& from);
  PathAssessmentDeciderConfig(PathAssessmentDeciderConfig&& from) noexcept
    : PathAssessmentDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathAssessmentDeciderConfig& operator=(const PathAssessmentDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathAssessmentDeciderConfig& operator=(PathAssessmentDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathAssessmentDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathAssessmentDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathAssessmentDeciderConfig*>(
               &_PathAssessmentDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PathAssessmentDeciderConfig& a, PathAssessmentDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathAssessmentDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathAssessmentDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathAssessmentDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathAssessmentDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PathAssessmentDeciderConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PathAssessmentDeciderConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathAssessmentDeciderConfig";
  }
  protected:
  explicit PathAssessmentDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.PathAssessmentDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathBoundsDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathBoundsDeciderConfig) */ {
 public:
  inline PathBoundsDeciderConfig() : PathBoundsDeciderConfig(nullptr) {}
  ~PathBoundsDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR PathBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathBoundsDeciderConfig(const PathBoundsDeciderConfig& from);
  PathBoundsDeciderConfig(PathBoundsDeciderConfig&& from) noexcept
    : PathBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathBoundsDeciderConfig& operator=(const PathBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathBoundsDeciderConfig& operator=(PathBoundsDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathBoundsDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathBoundsDeciderConfig*>(
               &_PathBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PathBoundsDeciderConfig& a, PathBoundsDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathBoundsDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathBoundsDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathBoundsDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathBoundsDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathBoundsDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathBoundsDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathBoundsDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathBoundsDeciderConfig";
  }
  protected:
  explicit PathBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsLaneBorrowingFieldNumber = 1,
    kIsPullOverFieldNumber = 2,
    kIsExtendLaneBoundsToIncludeAdcFieldNumber = 8,
    kPullOverDestinationToAdcBufferFieldNumber = 3,
    kPullOverDestinationToPathendBufferFieldNumber = 4,
    kPullOverRoadEdgeBufferFieldNumber = 5,
    kPullOverApproachLonDistanceAdjustFactorFieldNumber = 6,
    kAdcBufferCoeffFieldNumber = 7,
  };
  // optional bool is_lane_borrowing = 1;
  bool has_is_lane_borrowing() const;
  private:
  bool _internal_has_is_lane_borrowing() const;
  public:
  void clear_is_lane_borrowing();
  bool is_lane_borrowing() const;
  void set_is_lane_borrowing(bool value);
  private:
  bool _internal_is_lane_borrowing() const;
  void _internal_set_is_lane_borrowing(bool value);
  public:

  // optional bool is_pull_over = 2;
  bool has_is_pull_over() const;
  private:
  bool _internal_has_is_pull_over() const;
  public:
  void clear_is_pull_over();
  bool is_pull_over() const;
  void set_is_pull_over(bool value);
  private:
  bool _internal_is_pull_over() const;
  void _internal_set_is_pull_over(bool value);
  public:

  // optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
  bool has_is_extend_lane_bounds_to_include_adc() const;
  private:
  bool _internal_has_is_extend_lane_bounds_to_include_adc() const;
  public:
  void clear_is_extend_lane_bounds_to_include_adc();
  bool is_extend_lane_bounds_to_include_adc() const;
  void set_is_extend_lane_bounds_to_include_adc(bool value);
  private:
  bool _internal_is_extend_lane_bounds_to_include_adc() const;
  void _internal_set_is_extend_lane_bounds_to_include_adc(bool value);
  public:

  // optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
  bool has_pull_over_destination_to_adc_buffer() const;
  private:
  bool _internal_has_pull_over_destination_to_adc_buffer() const;
  public:
  void clear_pull_over_destination_to_adc_buffer();
  double pull_over_destination_to_adc_buffer() const;
  void set_pull_over_destination_to_adc_buffer(double value);
  private:
  double _internal_pull_over_destination_to_adc_buffer() const;
  void _internal_set_pull_over_destination_to_adc_buffer(double value);
  public:

  // optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
  bool has_pull_over_destination_to_pathend_buffer() const;
  private:
  bool _internal_has_pull_over_destination_to_pathend_buffer() const;
  public:
  void clear_pull_over_destination_to_pathend_buffer();
  double pull_over_destination_to_pathend_buffer() const;
  void set_pull_over_destination_to_pathend_buffer(double value);
  private:
  double _internal_pull_over_destination_to_pathend_buffer() const;
  void _internal_set_pull_over_destination_to_pathend_buffer(double value);
  public:

  // optional double pull_over_road_edge_buffer = 5 [default = 0.15];
  bool has_pull_over_road_edge_buffer() const;
  private:
  bool _internal_has_pull_over_road_edge_buffer() const;
  public:
  void clear_pull_over_road_edge_buffer();
  double pull_over_road_edge_buffer() const;
  void set_pull_over_road_edge_buffer(double value);
  private:
  double _internal_pull_over_road_edge_buffer() const;
  void _internal_set_pull_over_road_edge_buffer(double value);
  public:

  // optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
  bool has_pull_over_approach_lon_distance_adjust_factor() const;
  private:
  bool _internal_has_pull_over_approach_lon_distance_adjust_factor() const;
  public:
  void clear_pull_over_approach_lon_distance_adjust_factor();
  double pull_over_approach_lon_distance_adjust_factor() const;
  void set_pull_over_approach_lon_distance_adjust_factor(double value);
  private:
  double _internal_pull_over_approach_lon_distance_adjust_factor() const;
  void _internal_set_pull_over_approach_lon_distance_adjust_factor(double value);
  public:

  // optional double adc_buffer_coeff = 7 [default = 1];
  bool has_adc_buffer_coeff() const;
  private:
  bool _internal_has_adc_buffer_coeff() const;
  public:
  void clear_adc_buffer_coeff();
  double adc_buffer_coeff() const;
  void set_adc_buffer_coeff(double value);
  private:
  double _internal_adc_buffer_coeff() const;
  void _internal_set_adc_buffer_coeff(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathBoundsDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool is_lane_borrowing_;
    bool is_pull_over_;
    bool is_extend_lane_bounds_to_include_adc_;
    double pull_over_destination_to_adc_buffer_;
    double pull_over_destination_to_pathend_buffer_;
    double pull_over_road_edge_buffer_;
    double pull_over_approach_lon_distance_adjust_factor_;
    double adc_buffer_coeff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathDeciderConfig) */ {
 public:
  inline PathDeciderConfig() : PathDeciderConfig(nullptr) {}
  ~PathDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR PathDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathDeciderConfig(const PathDeciderConfig& from);
  PathDeciderConfig(PathDeciderConfig&& from) noexcept
    : PathDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathDeciderConfig& operator=(const PathDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathDeciderConfig& operator=(PathDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathDeciderConfig*>(
               &_PathDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PathDeciderConfig& a, PathDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathDeciderConfig";
  }
  protected:
  explicit PathDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticObstacleBufferFieldNumber = 1,
  };
  // optional double static_obstacle_buffer = 1 [default = 0.3];
  bool has_static_obstacle_buffer() const;
  private:
  bool _internal_has_static_obstacle_buffer() const;
  public:
  void clear_static_obstacle_buffer();
  double static_obstacle_buffer() const;
  void set_static_obstacle_buffer(double value);
  private:
  double _internal_static_obstacle_buffer() const;
  void _internal_set_static_obstacle_buffer(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double static_obstacle_buffer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathLaneBorrowDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathLaneBorrowDeciderConfig) */ {
 public:
  inline PathLaneBorrowDeciderConfig() : PathLaneBorrowDeciderConfig(nullptr) {}
  ~PathLaneBorrowDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR PathLaneBorrowDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathLaneBorrowDeciderConfig(const PathLaneBorrowDeciderConfig& from);
  PathLaneBorrowDeciderConfig(PathLaneBorrowDeciderConfig&& from) noexcept
    : PathLaneBorrowDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathLaneBorrowDeciderConfig& operator=(const PathLaneBorrowDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathLaneBorrowDeciderConfig& operator=(PathLaneBorrowDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathLaneBorrowDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathLaneBorrowDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathLaneBorrowDeciderConfig*>(
               &_PathLaneBorrowDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PathLaneBorrowDeciderConfig& a, PathLaneBorrowDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathLaneBorrowDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathLaneBorrowDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathLaneBorrowDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathLaneBorrowDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathLaneBorrowDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathLaneBorrowDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathLaneBorrowDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathLaneBorrowDeciderConfig";
  }
  protected:
  explicit PathLaneBorrowDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowLaneBorrowingFieldNumber = 1,
  };
  // optional bool allow_lane_borrowing = 1;
  bool has_allow_lane_borrowing() const;
  private:
  bool _internal_has_allow_lane_borrowing() const;
  public:
  void clear_allow_lane_borrowing();
  bool allow_lane_borrowing() const;
  void set_allow_lane_borrowing(bool value);
  private:
  bool _internal_allow_lane_borrowing() const;
  void _internal_set_allow_lane_borrowing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathLaneBorrowDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool allow_lane_borrowing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathReferenceDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathReferenceDeciderConfig) */ {
 public:
  inline PathReferenceDeciderConfig() : PathReferenceDeciderConfig(nullptr) {}
  ~PathReferenceDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR PathReferenceDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathReferenceDeciderConfig(const PathReferenceDeciderConfig& from);
  PathReferenceDeciderConfig(PathReferenceDeciderConfig&& from) noexcept
    : PathReferenceDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathReferenceDeciderConfig& operator=(const PathReferenceDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathReferenceDeciderConfig& operator=(PathReferenceDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathReferenceDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathReferenceDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathReferenceDeciderConfig*>(
               &_PathReferenceDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PathReferenceDeciderConfig& a, PathReferenceDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathReferenceDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathReferenceDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathReferenceDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathReferenceDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathReferenceDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathReferenceDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathReferenceDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathReferenceDeciderConfig";
  }
  protected:
  explicit PathReferenceDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightXRefPathReferenceFieldNumber = 2,
    kMinPathReferenceLengthFieldNumber = 1,
  };
  // optional double weight_x_ref_path_reference = 2;
  bool has_weight_x_ref_path_reference() const;
  private:
  bool _internal_has_weight_x_ref_path_reference() const;
  public:
  void clear_weight_x_ref_path_reference();
  double weight_x_ref_path_reference() const;
  void set_weight_x_ref_path_reference(double value);
  private:
  double _internal_weight_x_ref_path_reference() const;
  void _internal_set_weight_x_ref_path_reference(double value);
  public:

  // optional uint32 min_path_reference_length = 1 [default = 20];
  bool has_min_path_reference_length() const;
  private:
  bool _internal_has_min_path_reference_length() const;
  public:
  void clear_min_path_reference_length();
  uint32_t min_path_reference_length() const;
  void set_min_path_reference_length(uint32_t value);
  private:
  uint32_t _internal_min_path_reference_length() const;
  void _internal_set_min_path_reference_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathReferenceDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double weight_x_ref_path_reference_;
    uint32_t min_path_reference_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PathReuseDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PathReuseDeciderConfig) */ {
 public:
  inline PathReuseDeciderConfig() : PathReuseDeciderConfig(nullptr) {}
  ~PathReuseDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR PathReuseDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathReuseDeciderConfig(const PathReuseDeciderConfig& from);
  PathReuseDeciderConfig(PathReuseDeciderConfig&& from) noexcept
    : PathReuseDeciderConfig() {
    *this = ::std::move(from);
  }

  inline PathReuseDeciderConfig& operator=(const PathReuseDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathReuseDeciderConfig& operator=(PathReuseDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathReuseDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathReuseDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const PathReuseDeciderConfig*>(
               &_PathReuseDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PathReuseDeciderConfig& a, PathReuseDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PathReuseDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathReuseDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathReuseDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathReuseDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathReuseDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathReuseDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathReuseDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PathReuseDeciderConfig";
  }
  protected:
  explicit PathReuseDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReusePathFieldNumber = 1,
  };
  // optional bool reuse_path = 1;
  bool has_reuse_path() const;
  private:
  bool _internal_has_reuse_path() const;
  public:
  void clear_reuse_path();
  bool reuse_path() const;
  void set_reuse_path(bool value);
  private:
  bool _internal_reuse_path() const;
  void _internal_set_reuse_path(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PathReuseDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool reuse_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkNonlinearSpeedOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig) */ {
 public:
  inline PiecewiseJerkNonlinearSpeedOptimizerConfig() : PiecewiseJerkNonlinearSpeedOptimizerConfig(nullptr) {}
  ~PiecewiseJerkNonlinearSpeedOptimizerConfig() override;
  explicit PROTOBUF_CONSTEXPR PiecewiseJerkNonlinearSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PiecewiseJerkNonlinearSpeedOptimizerConfig(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);
  PiecewiseJerkNonlinearSpeedOptimizerConfig(PiecewiseJerkNonlinearSpeedOptimizerConfig&& from) noexcept
    : PiecewiseJerkNonlinearSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkNonlinearSpeedOptimizerConfig& operator=(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkNonlinearSpeedOptimizerConfig& operator=(PiecewiseJerkNonlinearSpeedOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PiecewiseJerkNonlinearSpeedOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PiecewiseJerkNonlinearSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkNonlinearSpeedOptimizerConfig*>(
               &_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PiecewiseJerkNonlinearSpeedOptimizerConfig& a, PiecewiseJerkNonlinearSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PiecewiseJerkNonlinearSpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PiecewiseJerkNonlinearSpeedOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PiecewiseJerkNonlinearSpeedOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkNonlinearSpeedOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig";
  }
  protected:
  explicit PiecewiseJerkNonlinearSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseWarmStartFieldNumber = 100,
    kAccWeightFieldNumber = 1,
    kJerkWeightFieldNumber = 2,
    kLatAccWeightFieldNumber = 3,
    kSPotentialWeightFieldNumber = 4,
    kRefVWeightFieldNumber = 5,
    kRefSWeightFieldNumber = 6,
    kEndSWeightFieldNumber = 7,
    kEndVWeightFieldNumber = 8,
    kEndAWeightFieldNumber = 9,
    kSoftSBoundWeightFieldNumber = 10,
  };
  // optional bool use_warm_start = 100 [default = true];
  bool has_use_warm_start() const;
  private:
  bool _internal_has_use_warm_start() const;
  public:
  void clear_use_warm_start();
  bool use_warm_start() const;
  void set_use_warm_start(bool value);
  private:
  bool _internal_use_warm_start() const;
  void _internal_set_use_warm_start(bool value);
  public:

  // optional double acc_weight = 1 [default = 500];
  bool has_acc_weight() const;
  private:
  bool _internal_has_acc_weight() const;
  public:
  void clear_acc_weight();
  double acc_weight() const;
  void set_acc_weight(double value);
  private:
  double _internal_acc_weight() const;
  void _internal_set_acc_weight(double value);
  public:

  // optional double jerk_weight = 2 [default = 100];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double lat_acc_weight = 3 [default = 500];
  bool has_lat_acc_weight() const;
  private:
  bool _internal_has_lat_acc_weight() const;
  public:
  void clear_lat_acc_weight();
  double lat_acc_weight() const;
  void set_lat_acc_weight(double value);
  private:
  double _internal_lat_acc_weight() const;
  void _internal_set_lat_acc_weight(double value);
  public:

  // optional double s_potential_weight = 4 [default = 10];
  bool has_s_potential_weight() const;
  private:
  bool _internal_has_s_potential_weight() const;
  public:
  void clear_s_potential_weight();
  double s_potential_weight() const;
  void set_s_potential_weight(double value);
  private:
  double _internal_s_potential_weight() const;
  void _internal_set_s_potential_weight(double value);
  public:

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  private:
  bool _internal_has_ref_v_weight() const;
  public:
  void clear_ref_v_weight();
  double ref_v_weight() const;
  void set_ref_v_weight(double value);
  private:
  double _internal_ref_v_weight() const;
  void _internal_set_ref_v_weight(double value);
  public:

  // optional double ref_s_weight = 6 [default = 10];
  bool has_ref_s_weight() const;
  private:
  bool _internal_has_ref_s_weight() const;
  public:
  void clear_ref_s_weight();
  double ref_s_weight() const;
  void set_ref_s_weight(double value);
  private:
  double _internal_ref_s_weight() const;
  void _internal_set_ref_s_weight(double value);
  public:

  // optional double end_s_weight = 7 [default = 10];
  bool has_end_s_weight() const;
  private:
  bool _internal_has_end_s_weight() const;
  public:
  void clear_end_s_weight();
  double end_s_weight() const;
  void set_end_s_weight(double value);
  private:
  double _internal_end_s_weight() const;
  void _internal_set_end_s_weight(double value);
  public:

  // optional double end_v_weight = 8 [default = 10];
  bool has_end_v_weight() const;
  private:
  bool _internal_has_end_v_weight() const;
  public:
  void clear_end_v_weight();
  double end_v_weight() const;
  void set_end_v_weight(double value);
  private:
  double _internal_end_v_weight() const;
  void _internal_set_end_v_weight(double value);
  public:

  // optional double end_a_weight = 9 [default = 10];
  bool has_end_a_weight() const;
  private:
  bool _internal_has_end_a_weight() const;
  public:
  void clear_end_a_weight();
  double end_a_weight() const;
  void set_end_a_weight(double value);
  private:
  double _internal_end_a_weight() const;
  void _internal_set_end_a_weight(double value);
  public:

  // optional double soft_s_bound_weight = 10 [default = 10];
  bool has_soft_s_bound_weight() const;
  private:
  bool _internal_has_soft_s_bound_weight() const;
  public:
  void clear_soft_s_bound_weight();
  double soft_s_bound_weight() const;
  void set_soft_s_bound_weight(double value);
  private:
  double _internal_soft_s_bound_weight() const;
  void _internal_set_soft_s_bound_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool use_warm_start_;
    double acc_weight_;
    double jerk_weight_;
    double lat_acc_weight_;
    double s_potential_weight_;
    double ref_v_weight_;
    double ref_s_weight_;
    double end_s_weight_;
    double end_v_weight_;
    double end_a_weight_;
    double soft_s_bound_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathOptimizerConfig) */ {
 public:
  inline PiecewiseJerkPathOptimizerConfig() : PiecewiseJerkPathOptimizerConfig(nullptr) {}
  ~PiecewiseJerkPathOptimizerConfig() override;
  explicit PROTOBUF_CONSTEXPR PiecewiseJerkPathOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PiecewiseJerkPathOptimizerConfig(const PiecewiseJerkPathOptimizerConfig& from);
  PiecewiseJerkPathOptimizerConfig(PiecewiseJerkPathOptimizerConfig&& from) noexcept
    : PiecewiseJerkPathOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathOptimizerConfig& operator=(const PiecewiseJerkPathOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkPathOptimizerConfig& operator=(PiecewiseJerkPathOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PiecewiseJerkPathOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PiecewiseJerkPathOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathOptimizerConfig*>(
               &_PiecewiseJerkPathOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PiecewiseJerkPathOptimizerConfig& a, PiecewiseJerkPathOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkPathOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecewiseJerkPathOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PiecewiseJerkPathOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PiecewiseJerkPathOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PiecewiseJerkPathOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PiecewiseJerkPathOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkPathOptimizerConfig";
  }
  protected:
  explicit PiecewiseJerkPathOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultPathConfigFieldNumber = 1,
    kLaneChangePathConfigFieldNumber = 2,
    kPathReferenceLWeightFieldNumber = 3,
  };
  // optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
  bool has_default_path_config() const;
  private:
  bool _internal_has_default_path_config() const;
  public:
  void clear_default_path_config();
  const ::apollo::planning::PiecewiseJerkPathWeights& default_path_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PiecewiseJerkPathWeights* release_default_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_default_path_config();
  void set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config);
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_default_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* _internal_mutable_default_path_config();
  public:
  void unsafe_arena_set_allocated_default_path_config(
      ::apollo::planning::PiecewiseJerkPathWeights* default_path_config);
  ::apollo::planning::PiecewiseJerkPathWeights* unsafe_arena_release_default_path_config();

  // optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
  bool has_lane_change_path_config() const;
  private:
  bool _internal_has_lane_change_path_config() const;
  public:
  void clear_lane_change_path_config();
  const ::apollo::planning::PiecewiseJerkPathWeights& lane_change_path_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PiecewiseJerkPathWeights* release_lane_change_path_config();
  ::apollo::planning::PiecewiseJerkPathWeights* mutable_lane_change_path_config();
  void set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config);
  private:
  const ::apollo::planning::PiecewiseJerkPathWeights& _internal_lane_change_path_config() const;
  ::apollo::planning::PiecewiseJerkPathWeights* _internal_mutable_lane_change_path_config();
  public:
  void unsafe_arena_set_allocated_lane_change_path_config(
      ::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config);
  ::apollo::planning::PiecewiseJerkPathWeights* unsafe_arena_release_lane_change_path_config();

  // optional double path_reference_l_weight = 3 [default = 0];
  bool has_path_reference_l_weight() const;
  private:
  bool _internal_has_path_reference_l_weight() const;
  public:
  void clear_path_reference_l_weight();
  double path_reference_l_weight() const;
  void set_path_reference_l_weight(double value);
  private:
  double _internal_path_reference_l_weight() const;
  void _internal_set_path_reference_l_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::PiecewiseJerkPathWeights* default_path_config_;
    ::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config_;
    double path_reference_l_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkPathWeights final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkPathWeights) */ {
 public:
  inline PiecewiseJerkPathWeights() : PiecewiseJerkPathWeights(nullptr) {}
  ~PiecewiseJerkPathWeights() override;
  explicit PROTOBUF_CONSTEXPR PiecewiseJerkPathWeights(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PiecewiseJerkPathWeights(const PiecewiseJerkPathWeights& from);
  PiecewiseJerkPathWeights(PiecewiseJerkPathWeights&& from) noexcept
    : PiecewiseJerkPathWeights() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkPathWeights& operator=(const PiecewiseJerkPathWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkPathWeights& operator=(PiecewiseJerkPathWeights&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PiecewiseJerkPathWeights& default_instance() {
    return *internal_default_instance();
  }
  static inline const PiecewiseJerkPathWeights* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkPathWeights*>(
               &_PiecewiseJerkPathWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PiecewiseJerkPathWeights& a, PiecewiseJerkPathWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkPathWeights* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecewiseJerkPathWeights* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PiecewiseJerkPathWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PiecewiseJerkPathWeights>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PiecewiseJerkPathWeights& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PiecewiseJerkPathWeights& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkPathWeights* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkPathWeights";
  }
  protected:
  explicit PiecewiseJerkPathWeights(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLWeightFieldNumber = 1,
    kDlWeightFieldNumber = 2,
    kDdlWeightFieldNumber = 3,
    kDddlWeightFieldNumber = 4,
  };
  // optional double l_weight = 1 [default = 1];
  bool has_l_weight() const;
  private:
  bool _internal_has_l_weight() const;
  public:
  void clear_l_weight();
  double l_weight() const;
  void set_l_weight(double value);
  private:
  double _internal_l_weight() const;
  void _internal_set_l_weight(double value);
  public:

  // optional double dl_weight = 2 [default = 100];
  bool has_dl_weight() const;
  private:
  bool _internal_has_dl_weight() const;
  public:
  void clear_dl_weight();
  double dl_weight() const;
  void set_dl_weight(double value);
  private:
  double _internal_dl_weight() const;
  void _internal_set_dl_weight(double value);
  public:

  // optional double ddl_weight = 3 [default = 1000];
  bool has_ddl_weight() const;
  private:
  bool _internal_has_ddl_weight() const;
  public:
  void clear_ddl_weight();
  double ddl_weight() const;
  void set_ddl_weight(double value);
  private:
  double _internal_ddl_weight() const;
  void _internal_set_ddl_weight(double value);
  public:

  // optional double dddl_weight = 4 [default = 10000];
  bool has_dddl_weight() const;
  private:
  bool _internal_has_dddl_weight() const;
  public:
  void clear_dddl_weight();
  double dddl_weight() const;
  void set_dddl_weight(double value);
  private:
  double _internal_dddl_weight() const;
  void _internal_set_dddl_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkPathWeights)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double l_weight_;
    double dl_weight_;
    double ddl_weight_;
    double dddl_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkSpeedOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PiecewiseJerkSpeedOptimizerConfig) */ {
 public:
  inline PiecewiseJerkSpeedOptimizerConfig() : PiecewiseJerkSpeedOptimizerConfig(nullptr) {}
  ~PiecewiseJerkSpeedOptimizerConfig() override;
  explicit PROTOBUF_CONSTEXPR PiecewiseJerkSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from);
  PiecewiseJerkSpeedOptimizerConfig(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept
    : PiecewiseJerkSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkSpeedOptimizerConfig& operator=(const PiecewiseJerkSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkSpeedOptimizerConfig& operator=(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PiecewiseJerkSpeedOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PiecewiseJerkSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkSpeedOptimizerConfig*>(
               &_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PiecewiseJerkSpeedOptimizerConfig& a, PiecewiseJerkSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkSpeedOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PiecewiseJerkSpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PiecewiseJerkSpeedOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PiecewiseJerkSpeedOptimizerConfig";
  }
  protected:
  explicit PiecewiseJerkSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccWeightFieldNumber = 1,
    kJerkWeightFieldNumber = 2,
    kKappaPenaltyWeightFieldNumber = 3,
    kRefSWeightFieldNumber = 4,
    kRefVWeightFieldNumber = 5,
  };
  // optional double acc_weight = 1 [default = 1];
  bool has_acc_weight() const;
  private:
  bool _internal_has_acc_weight() const;
  public:
  void clear_acc_weight();
  double acc_weight() const;
  void set_acc_weight(double value);
  private:
  double _internal_acc_weight() const;
  void _internal_set_acc_weight(double value);
  public:

  // optional double jerk_weight = 2 [default = 10];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double kappa_penalty_weight = 3 [default = 1000];
  bool has_kappa_penalty_weight() const;
  private:
  bool _internal_has_kappa_penalty_weight() const;
  public:
  void clear_kappa_penalty_weight();
  double kappa_penalty_weight() const;
  void set_kappa_penalty_weight(double value);
  private:
  double _internal_kappa_penalty_weight() const;
  void _internal_set_kappa_penalty_weight(double value);
  public:

  // optional double ref_s_weight = 4 [default = 10];
  bool has_ref_s_weight() const;
  private:
  bool _internal_has_ref_s_weight() const;
  public:
  void clear_ref_s_weight();
  double ref_s_weight() const;
  void set_ref_s_weight(double value);
  private:
  double _internal_ref_s_weight() const;
  void _internal_set_ref_s_weight(double value);
  public:

  // optional double ref_v_weight = 5 [default = 10];
  bool has_ref_v_weight() const;
  private:
  bool _internal_has_ref_v_weight() const;
  public:
  void clear_ref_v_weight();
  double ref_v_weight() const;
  void set_ref_v_weight(double value);
  private:
  double _internal_ref_v_weight() const;
  void _internal_set_ref_v_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PiecewiseJerkSpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double acc_weight_;
    double jerk_weight_;
    double kappa_penalty_weight_;
    double ref_s_weight_;
    double ref_v_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RuleBasedStopDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RuleBasedStopDeciderConfig) */ {
 public:
  inline RuleBasedStopDeciderConfig() : RuleBasedStopDeciderConfig(nullptr) {}
  ~RuleBasedStopDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR RuleBasedStopDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuleBasedStopDeciderConfig(const RuleBasedStopDeciderConfig& from);
  RuleBasedStopDeciderConfig(RuleBasedStopDeciderConfig&& from) noexcept
    : RuleBasedStopDeciderConfig() {
    *this = ::std::move(from);
  }

  inline RuleBasedStopDeciderConfig& operator=(const RuleBasedStopDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuleBasedStopDeciderConfig& operator=(RuleBasedStopDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuleBasedStopDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuleBasedStopDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const RuleBasedStopDeciderConfig*>(
               &_RuleBasedStopDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RuleBasedStopDeciderConfig& a, RuleBasedStopDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RuleBasedStopDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuleBasedStopDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuleBasedStopDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuleBasedStopDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuleBasedStopDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuleBasedStopDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleBasedStopDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.RuleBasedStopDeciderConfig";
  }
  protected:
  explicit RuleBasedStopDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAdcStopSpeedFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
    kSearchBeamLengthFieldNumber = 3,
    kSearchBeamRadiusIntensityFieldNumber = 4,
    kSearchRangeFieldNumber = 5,
    kIsBlockAngleThresholdFieldNumber = 6,
    kApproachDistanceForLaneChangeFieldNumber = 10,
    kUrgentDistanceForLaneChangeFieldNumber = 11,
  };
  // optional double max_adc_stop_speed = 1 [default = 0.3];
  bool has_max_adc_stop_speed() const;
  private:
  bool _internal_has_max_adc_stop_speed() const;
  public:
  void clear_max_adc_stop_speed();
  double max_adc_stop_speed() const;
  void set_max_adc_stop_speed(double value);
  private:
  double _internal_max_adc_stop_speed() const;
  void _internal_set_max_adc_stop_speed(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 0.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double search_beam_length = 3 [default = 5];
  bool has_search_beam_length() const;
  private:
  bool _internal_has_search_beam_length() const;
  public:
  void clear_search_beam_length();
  double search_beam_length() const;
  void set_search_beam_length(double value);
  private:
  double _internal_search_beam_length() const;
  void _internal_set_search_beam_length(double value);
  public:

  // optional double search_beam_radius_intensity = 4 [default = 0.08];
  bool has_search_beam_radius_intensity() const;
  private:
  bool _internal_has_search_beam_radius_intensity() const;
  public:
  void clear_search_beam_radius_intensity();
  double search_beam_radius_intensity() const;
  void set_search_beam_radius_intensity(double value);
  private:
  double _internal_search_beam_radius_intensity() const;
  void _internal_set_search_beam_radius_intensity(double value);
  public:

  // optional double search_range = 5 [default = 3.14];
  bool has_search_range() const;
  private:
  bool _internal_has_search_range() const;
  public:
  void clear_search_range();
  double search_range() const;
  void set_search_range(double value);
  private:
  double _internal_search_range() const;
  void _internal_set_search_range(double value);
  public:

  // optional double is_block_angle_threshold = 6 [default = 1.57];
  bool has_is_block_angle_threshold() const;
  private:
  bool _internal_has_is_block_angle_threshold() const;
  public:
  void clear_is_block_angle_threshold();
  double is_block_angle_threshold() const;
  void set_is_block_angle_threshold(double value);
  private:
  double _internal_is_block_angle_threshold() const;
  void _internal_set_is_block_angle_threshold(double value);
  public:

  // optional double approach_distance_for_lane_change = 10 [default = 80];
  bool has_approach_distance_for_lane_change() const;
  private:
  bool _internal_has_approach_distance_for_lane_change() const;
  public:
  void clear_approach_distance_for_lane_change();
  double approach_distance_for_lane_change() const;
  void set_approach_distance_for_lane_change(double value);
  private:
  double _internal_approach_distance_for_lane_change() const;
  void _internal_set_approach_distance_for_lane_change(double value);
  public:

  // optional double urgent_distance_for_lane_change = 11 [default = 50];
  bool has_urgent_distance_for_lane_change() const;
  private:
  bool _internal_has_urgent_distance_for_lane_change() const;
  public:
  void clear_urgent_distance_for_lane_change();
  double urgent_distance_for_lane_change() const;
  void set_urgent_distance_for_lane_change(double value);
  private:
  double _internal_urgent_distance_for_lane_change() const;
  void _internal_set_urgent_distance_for_lane_change(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.RuleBasedStopDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_adc_stop_speed_;
    double max_valid_stop_distance_;
    double search_beam_length_;
    double search_beam_radius_intensity_;
    double search_range_;
    double is_block_angle_threshold_;
    double approach_distance_for_lane_change_;
    double urgent_distance_for_lane_change_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpeedBoundsDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpeedBoundsDeciderConfig) */ {
 public:
  inline SpeedBoundsDeciderConfig() : SpeedBoundsDeciderConfig(nullptr) {}
  ~SpeedBoundsDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR SpeedBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedBoundsDeciderConfig(const SpeedBoundsDeciderConfig& from);
  SpeedBoundsDeciderConfig(SpeedBoundsDeciderConfig&& from) noexcept
    : SpeedBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline SpeedBoundsDeciderConfig& operator=(const SpeedBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedBoundsDeciderConfig& operator=(SpeedBoundsDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedBoundsDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedBoundsDeciderConfig*>(
               &_SpeedBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SpeedBoundsDeciderConfig& a, SpeedBoundsDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedBoundsDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedBoundsDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedBoundsDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedBoundsDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedBoundsDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedBoundsDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedBoundsDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SpeedBoundsDeciderConfig";
  }
  protected:
  explicit SpeedBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticObsNudgeSpeedRatioFieldNumber = 8,
    kDynamicObsNudgeSpeedRatioFieldNumber = 9,
    kTotalTimeFieldNumber = 1,
    kBoundaryBufferFieldNumber = 2,
    kMaxCentricAccelerationLimitFieldNumber = 3,
    kMinimalKappaFieldNumber = 4,
    kPointExtensionFieldNumber = 5,
    kLowestSpeedFieldNumber = 6,
    kCollisionSafetyRangeFieldNumber = 7,
  };
  // optional double static_obs_nudge_speed_ratio = 8;
  bool has_static_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_static_obs_nudge_speed_ratio() const;
  public:
  void clear_static_obs_nudge_speed_ratio();
  double static_obs_nudge_speed_ratio() const;
  void set_static_obs_nudge_speed_ratio(double value);
  private:
  double _internal_static_obs_nudge_speed_ratio() const;
  void _internal_set_static_obs_nudge_speed_ratio(double value);
  public:

  // optional double dynamic_obs_nudge_speed_ratio = 9;
  bool has_dynamic_obs_nudge_speed_ratio() const;
  private:
  bool _internal_has_dynamic_obs_nudge_speed_ratio() const;
  public:
  void clear_dynamic_obs_nudge_speed_ratio();
  double dynamic_obs_nudge_speed_ratio() const;
  void set_dynamic_obs_nudge_speed_ratio(double value);
  private:
  double _internal_dynamic_obs_nudge_speed_ratio() const;
  void _internal_set_dynamic_obs_nudge_speed_ratio(double value);
  public:

  // optional double total_time = 1 [default = 7];
  bool has_total_time() const;
  private:
  bool _internal_has_total_time() const;
  public:
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // optional double boundary_buffer = 2 [default = 0.1];
  bool has_boundary_buffer() const;
  private:
  bool _internal_has_boundary_buffer() const;
  public:
  void clear_boundary_buffer();
  double boundary_buffer() const;
  void set_boundary_buffer(double value);
  private:
  double _internal_boundary_buffer() const;
  void _internal_set_boundary_buffer(double value);
  public:

  // optional double max_centric_acceleration_limit = 3 [default = 2];
  bool has_max_centric_acceleration_limit() const;
  private:
  bool _internal_has_max_centric_acceleration_limit() const;
  public:
  void clear_max_centric_acceleration_limit();
  double max_centric_acceleration_limit() const;
  void set_max_centric_acceleration_limit(double value);
  private:
  double _internal_max_centric_acceleration_limit() const;
  void _internal_set_max_centric_acceleration_limit(double value);
  public:

  // optional double minimal_kappa = 4 [default = 1e-05];
  bool has_minimal_kappa() const;
  private:
  bool _internal_has_minimal_kappa() const;
  public:
  void clear_minimal_kappa();
  double minimal_kappa() const;
  void set_minimal_kappa(double value);
  private:
  double _internal_minimal_kappa() const;
  void _internal_set_minimal_kappa(double value);
  public:

  // optional double point_extension = 5 [default = 1];
  bool has_point_extension() const;
  private:
  bool _internal_has_point_extension() const;
  public:
  void clear_point_extension();
  double point_extension() const;
  void set_point_extension(double value);
  private:
  double _internal_point_extension() const;
  void _internal_set_point_extension(double value);
  public:

  // optional double lowest_speed = 6 [default = 2.5];
  bool has_lowest_speed() const;
  private:
  bool _internal_has_lowest_speed() const;
  public:
  void clear_lowest_speed();
  double lowest_speed() const;
  void set_lowest_speed(double value);
  private:
  double _internal_lowest_speed() const;
  void _internal_set_lowest_speed(double value);
  public:

  // optional double collision_safety_range = 7 [default = 1];
  bool has_collision_safety_range() const;
  private:
  bool _internal_has_collision_safety_range() const;
  public:
  void clear_collision_safety_range();
  double collision_safety_range() const;
  void set_collision_safety_range(double value);
  private:
  double _internal_collision_safety_range() const;
  void _internal_set_collision_safety_range(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SpeedBoundsDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double static_obs_nudge_speed_ratio_;
    double dynamic_obs_nudge_speed_ratio_;
    double total_time_;
    double boundary_buffer_;
    double max_centric_acceleration_limit_;
    double minimal_kappa_;
    double point_extension_;
    double lowest_speed_;
    double collision_safety_range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpeedHeuristicOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpeedHeuristicOptimizerConfig) */ {
 public:
  inline SpeedHeuristicOptimizerConfig() : SpeedHeuristicOptimizerConfig(nullptr) {}
  ~SpeedHeuristicOptimizerConfig() override;
  explicit PROTOBUF_CONSTEXPR SpeedHeuristicOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeedHeuristicOptimizerConfig(const SpeedHeuristicOptimizerConfig& from);
  SpeedHeuristicOptimizerConfig(SpeedHeuristicOptimizerConfig&& from) noexcept
    : SpeedHeuristicOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline SpeedHeuristicOptimizerConfig& operator=(const SpeedHeuristicOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedHeuristicOptimizerConfig& operator=(SpeedHeuristicOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpeedHeuristicOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeedHeuristicOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const SpeedHeuristicOptimizerConfig*>(
               &_SpeedHeuristicOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SpeedHeuristicOptimizerConfig& a, SpeedHeuristicOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedHeuristicOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeedHeuristicOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeedHeuristicOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeedHeuristicOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpeedHeuristicOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpeedHeuristicOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedHeuristicOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SpeedHeuristicOptimizerConfig";
  }
  protected:
  explicit SpeedHeuristicOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultSpeedConfigFieldNumber = 1,
    kLaneChangeSpeedConfigFieldNumber = 2,
  };
  // optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
  bool has_default_speed_config() const;
  private:
  bool _internal_has_default_speed_config() const;
  public:
  void clear_default_speed_config();
  const ::apollo::planning::DpStSpeedOptimizerConfig& default_speed_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::DpStSpeedOptimizerConfig* release_default_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* mutable_default_speed_config();
  void set_allocated_default_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config);
  private:
  const ::apollo::planning::DpStSpeedOptimizerConfig& _internal_default_speed_config() const;
  ::apollo::planning::DpStSpeedOptimizerConfig* _internal_mutable_default_speed_config();
  public:
  void unsafe_arena_set_allocated_default_speed_config(
      ::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config);
  ::apollo::planning::DpStSpeedOptimizerConfig* unsafe_arena_release_default_speed_config();

  // optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
  bool has_lane_change_speed_config() const;
  private:
  bool _internal_has_lane_change_speed_config() const;
  public:
  void clear_lane_change_speed_config();
  const ::apollo::planning::DpStSpeedOptimizerConfig& lane_change_speed_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::DpStSpeedOptimizerConfig* release_lane_change_speed_config();
  ::apollo::planning::DpStSpeedOptimizerConfig* mutable_lane_change_speed_config();
  void set_allocated_lane_change_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config);
  private:
  const ::apollo::planning::DpStSpeedOptimizerConfig& _internal_lane_change_speed_config() const;
  ::apollo::planning::DpStSpeedOptimizerConfig* _internal_mutable_lane_change_speed_config();
  public:
  void unsafe_arena_set_allocated_lane_change_speed_config(
      ::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config);
  ::apollo::planning::DpStSpeedOptimizerConfig* unsafe_arena_release_lane_change_speed_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.SpeedHeuristicOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config_;
    ::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DpStSpeedOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DpStSpeedOptimizerConfig) */ {
 public:
  inline DpStSpeedOptimizerConfig() : DpStSpeedOptimizerConfig(nullptr) {}
  ~DpStSpeedOptimizerConfig() override;
  explicit PROTOBUF_CONSTEXPR DpStSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpStSpeedOptimizerConfig(const DpStSpeedOptimizerConfig& from);
  DpStSpeedOptimizerConfig(DpStSpeedOptimizerConfig&& from) noexcept
    : DpStSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline DpStSpeedOptimizerConfig& operator=(const DpStSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpStSpeedOptimizerConfig& operator=(DpStSpeedOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DpStSpeedOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpStSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedOptimizerConfig*>(
               &_DpStSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DpStSpeedOptimizerConfig& a, DpStSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DpStSpeedOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpStSpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpStSpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpStSpeedOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DpStSpeedOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DpStSpeedOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpStSpeedOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DpStSpeedOptimizerConfig";
  }
  protected:
  explicit DpStSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedWeightFieldNumber = 10,
    kReferenceWeightFieldNumber = 14,
    kIsLaneChangingFieldNumber = 81,
    kDenseDimensionSFieldNumber = 2,
    kUnitTFieldNumber = 1,
    kDenseUnitSFieldNumber = 3,
    kSparseUnitSFieldNumber = 4,
    kAccelWeightFieldNumber = 11,
    kJerkWeightFieldNumber = 12,
    kObstacleWeightFieldNumber = 13,
    kGoDownBufferFieldNumber = 15,
    kGoUpBufferFieldNumber = 16,
    kDefaultObstacleCostFieldNumber = 20,
    kDefaultSpeedCostFieldNumber = 31,
    kExceedSpeedPenaltyFieldNumber = 32,
    kLowSpeedPenaltyFieldNumber = 33,
    kReferenceSpeedPenaltyFieldNumber = 34,
    kKeepClearLowSpeedPenaltyFieldNumber = 35,
    kAccelPenaltyFieldNumber = 40,
    kDecelPenaltyFieldNumber = 41,
    kPositiveJerkCoeffFieldNumber = 50,
    kNegativeJerkCoeffFieldNumber = 51,
    kMaxAccelerationFieldNumber = 60,
    kMaxDecelerationFieldNumber = 61,
    kSafeTimeBufferFieldNumber = 70,
    kSafeDistanceFieldNumber = 71,
    kSpatialPotentialPenaltyFieldNumber = 80,
  };
  // optional double speed_weight = 10 [default = 0];
  bool has_speed_weight() const;
  private:
  bool _internal_has_speed_weight() const;
  public:
  void clear_speed_weight();
  double speed_weight() const;
  void set_speed_weight(double value);
  private:
  double _internal_speed_weight() const;
  void _internal_set_speed_weight(double value);
  public:

  // optional double reference_weight = 14 [default = 0];
  bool has_reference_weight() const;
  private:
  bool _internal_has_reference_weight() const;
  public:
  void clear_reference_weight();
  double reference_weight() const;
  void set_reference_weight(double value);
  private:
  double _internal_reference_weight() const;
  void _internal_set_reference_weight(double value);
  public:

  // optional bool is_lane_changing = 81 [default = false];
  bool has_is_lane_changing() const;
  private:
  bool _internal_has_is_lane_changing() const;
  public:
  void clear_is_lane_changing();
  bool is_lane_changing() const;
  void set_is_lane_changing(bool value);
  private:
  bool _internal_is_lane_changing() const;
  void _internal_set_is_lane_changing(bool value);
  public:

  // optional int32 dense_dimension_s = 2 [default = 41];
  bool has_dense_dimension_s() const;
  private:
  bool _internal_has_dense_dimension_s() const;
  public:
  void clear_dense_dimension_s();
  int32_t dense_dimension_s() const;
  void set_dense_dimension_s(int32_t value);
  private:
  int32_t _internal_dense_dimension_s() const;
  void _internal_set_dense_dimension_s(int32_t value);
  public:

  // optional double unit_t = 1 [default = 1];
  bool has_unit_t() const;
  private:
  bool _internal_has_unit_t() const;
  public:
  void clear_unit_t();
  double unit_t() const;
  void set_unit_t(double value);
  private:
  double _internal_unit_t() const;
  void _internal_set_unit_t(double value);
  public:

  // optional double dense_unit_s = 3 [default = 0.5];
  bool has_dense_unit_s() const;
  private:
  bool _internal_has_dense_unit_s() const;
  public:
  void clear_dense_unit_s();
  double dense_unit_s() const;
  void set_dense_unit_s(double value);
  private:
  double _internal_dense_unit_s() const;
  void _internal_set_dense_unit_s(double value);
  public:

  // optional double sparse_unit_s = 4 [default = 1];
  bool has_sparse_unit_s() const;
  private:
  bool _internal_has_sparse_unit_s() const;
  public:
  void clear_sparse_unit_s();
  double sparse_unit_s() const;
  void set_sparse_unit_s(double value);
  private:
  double _internal_sparse_unit_s() const;
  void _internal_set_sparse_unit_s(double value);
  public:

  // optional double accel_weight = 11 [default = 10];
  bool has_accel_weight() const;
  private:
  bool _internal_has_accel_weight() const;
  public:
  void clear_accel_weight();
  double accel_weight() const;
  void set_accel_weight(double value);
  private:
  double _internal_accel_weight() const;
  void _internal_set_accel_weight(double value);
  public:

  // optional double jerk_weight = 12 [default = 10];
  bool has_jerk_weight() const;
  private:
  bool _internal_has_jerk_weight() const;
  public:
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // optional double obstacle_weight = 13 [default = 1];
  bool has_obstacle_weight() const;
  private:
  bool _internal_has_obstacle_weight() const;
  public:
  void clear_obstacle_weight();
  double obstacle_weight() const;
  void set_obstacle_weight(double value);
  private:
  double _internal_obstacle_weight() const;
  void _internal_set_obstacle_weight(double value);
  public:

  // optional double go_down_buffer = 15 [default = 5];
  bool has_go_down_buffer() const;
  private:
  bool _internal_has_go_down_buffer() const;
  public:
  void clear_go_down_buffer();
  double go_down_buffer() const;
  void set_go_down_buffer(double value);
  private:
  double _internal_go_down_buffer() const;
  void _internal_set_go_down_buffer(double value);
  public:

  // optional double go_up_buffer = 16 [default = 5];
  bool has_go_up_buffer() const;
  private:
  bool _internal_has_go_up_buffer() const;
  public:
  void clear_go_up_buffer();
  double go_up_buffer() const;
  void set_go_up_buffer(double value);
  private:
  double _internal_go_up_buffer() const;
  void _internal_set_go_up_buffer(double value);
  public:

  // optional double default_obstacle_cost = 20 [default = 10000000000];
  bool has_default_obstacle_cost() const;
  private:
  bool _internal_has_default_obstacle_cost() const;
  public:
  void clear_default_obstacle_cost();
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);
  private:
  double _internal_default_obstacle_cost() const;
  void _internal_set_default_obstacle_cost(double value);
  public:

  // optional double default_speed_cost = 31 [default = 1];
  bool has_default_speed_cost() const;
  private:
  bool _internal_has_default_speed_cost() const;
  public:
  void clear_default_speed_cost();
  double default_speed_cost() const;
  void set_default_speed_cost(double value);
  private:
  double _internal_default_speed_cost() const;
  void _internal_set_default_speed_cost(double value);
  public:

  // optional double exceed_speed_penalty = 32 [default = 10];
  bool has_exceed_speed_penalty() const;
  private:
  bool _internal_has_exceed_speed_penalty() const;
  public:
  void clear_exceed_speed_penalty();
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);
  private:
  double _internal_exceed_speed_penalty() const;
  void _internal_set_exceed_speed_penalty(double value);
  public:

  // optional double low_speed_penalty = 33 [default = 2.5];
  bool has_low_speed_penalty() const;
  private:
  bool _internal_has_low_speed_penalty() const;
  public:
  void clear_low_speed_penalty();
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);
  private:
  double _internal_low_speed_penalty() const;
  void _internal_set_low_speed_penalty(double value);
  public:

  // optional double reference_speed_penalty = 34 [default = 1];
  bool has_reference_speed_penalty() const;
  private:
  bool _internal_has_reference_speed_penalty() const;
  public:
  void clear_reference_speed_penalty();
  double reference_speed_penalty() const;
  void set_reference_speed_penalty(double value);
  private:
  double _internal_reference_speed_penalty() const;
  void _internal_set_reference_speed_penalty(double value);
  public:

  // optional double keep_clear_low_speed_penalty = 35 [default = 10];
  bool has_keep_clear_low_speed_penalty() const;
  private:
  bool _internal_has_keep_clear_low_speed_penalty() const;
  public:
  void clear_keep_clear_low_speed_penalty();
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);
  private:
  double _internal_keep_clear_low_speed_penalty() const;
  void _internal_set_keep_clear_low_speed_penalty(double value);
  public:

  // optional double accel_penalty = 40 [default = 2];
  bool has_accel_penalty() const;
  private:
  bool _internal_has_accel_penalty() const;
  public:
  void clear_accel_penalty();
  double accel_penalty() const;
  void set_accel_penalty(double value);
  private:
  double _internal_accel_penalty() const;
  void _internal_set_accel_penalty(double value);
  public:

  // optional double decel_penalty = 41 [default = 2];
  bool has_decel_penalty() const;
  private:
  bool _internal_has_decel_penalty() const;
  public:
  void clear_decel_penalty();
  double decel_penalty() const;
  void set_decel_penalty(double value);
  private:
  double _internal_decel_penalty() const;
  void _internal_set_decel_penalty(double value);
  public:

  // optional double positive_jerk_coeff = 50 [default = 1];
  bool has_positive_jerk_coeff() const;
  private:
  bool _internal_has_positive_jerk_coeff() const;
  public:
  void clear_positive_jerk_coeff();
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);
  private:
  double _internal_positive_jerk_coeff() const;
  void _internal_set_positive_jerk_coeff(double value);
  public:

  // optional double negative_jerk_coeff = 51 [default = 300];
  bool has_negative_jerk_coeff() const;
  private:
  bool _internal_has_negative_jerk_coeff() const;
  public:
  void clear_negative_jerk_coeff();
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);
  private:
  double _internal_negative_jerk_coeff() const;
  void _internal_set_negative_jerk_coeff(double value);
  public:

  // optional double max_acceleration = 60 [default = 4.5];
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double max_deceleration = 61 [default = -4.5];
  bool has_max_deceleration() const;
  private:
  bool _internal_has_max_deceleration() const;
  public:
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // optional double safe_time_buffer = 70 [default = 3];
  bool has_safe_time_buffer() const;
  private:
  bool _internal_has_safe_time_buffer() const;
  public:
  void clear_safe_time_buffer();
  double safe_time_buffer() const;
  void set_safe_time_buffer(double value);
  private:
  double _internal_safe_time_buffer() const;
  void _internal_set_safe_time_buffer(double value);
  public:

  // optional double safe_distance = 71 [default = 20];
  bool has_safe_distance() const;
  private:
  bool _internal_has_safe_distance() const;
  public:
  void clear_safe_distance();
  double safe_distance() const;
  void set_safe_distance(double value);
  private:
  double _internal_safe_distance() const;
  void _internal_set_safe_distance(double value);
  public:

  // optional double spatial_potential_penalty = 80 [default = 1];
  bool has_spatial_potential_penalty() const;
  private:
  bool _internal_has_spatial_potential_penalty() const;
  public:
  void clear_spatial_potential_penalty();
  double spatial_potential_penalty() const;
  void set_spatial_potential_penalty(double value);
  private:
  double _internal_spatial_potential_penalty() const;
  void _internal_set_spatial_potential_penalty(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.DpStSpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double speed_weight_;
    double reference_weight_;
    bool is_lane_changing_;
    int32_t dense_dimension_s_;
    double unit_t_;
    double dense_unit_s_;
    double sparse_unit_s_;
    double accel_weight_;
    double jerk_weight_;
    double obstacle_weight_;
    double go_down_buffer_;
    double go_up_buffer_;
    double default_obstacle_cost_;
    double default_speed_cost_;
    double exceed_speed_penalty_;
    double low_speed_penalty_;
    double reference_speed_penalty_;
    double keep_clear_low_speed_penalty_;
    double accel_penalty_;
    double decel_penalty_;
    double positive_jerk_coeff_;
    double negative_jerk_coeff_;
    double max_acceleration_;
    double max_deceleration_;
    double safe_time_buffer_;
    double safe_distance_;
    double spatial_potential_penalty_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class STBoundsDeciderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.STBoundsDeciderConfig) */ {
 public:
  inline STBoundsDeciderConfig() : STBoundsDeciderConfig(nullptr) {}
  ~STBoundsDeciderConfig() override;
  explicit PROTOBUF_CONSTEXPR STBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STBoundsDeciderConfig(const STBoundsDeciderConfig& from);
  STBoundsDeciderConfig(STBoundsDeciderConfig&& from) noexcept
    : STBoundsDeciderConfig() {
    *this = ::std::move(from);
  }

  inline STBoundsDeciderConfig& operator=(const STBoundsDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline STBoundsDeciderConfig& operator=(STBoundsDeciderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STBoundsDeciderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const STBoundsDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const STBoundsDeciderConfig*>(
               &_STBoundsDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(STBoundsDeciderConfig& a, STBoundsDeciderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(STBoundsDeciderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STBoundsDeciderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STBoundsDeciderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STBoundsDeciderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STBoundsDeciderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STBoundsDeciderConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STBoundsDeciderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.STBoundsDeciderConfig";
  }
  protected:
  explicit STBoundsDeciderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTimeFieldNumber = 1,
  };
  // optional double total_time = 1 [default = 7];
  bool has_total_time() const;
  private:
  bool _internal_has_total_time() const;
  public:
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.STBoundsDeciderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double total_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreepDeciderConfig

// optional double stop_distance = 1 [default = 0.5];
inline bool CreepDeciderConfig::_internal_has_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_stop_distance() const {
  return _internal_has_stop_distance();
}
inline void CreepDeciderConfig::clear_stop_distance() {
  _impl_.stop_distance_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CreepDeciderConfig::_internal_stop_distance() const {
  return _impl_.stop_distance_;
}
inline double CreepDeciderConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.stop_distance)
  return _internal_stop_distance();
}
inline void CreepDeciderConfig::_internal_set_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stop_distance_ = value;
}
inline void CreepDeciderConfig::set_stop_distance(double value) {
  _internal_set_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.stop_distance)
}

// optional double speed_limit = 2 [default = 1];
inline bool CreepDeciderConfig::_internal_has_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_speed_limit() const {
  return _internal_has_speed_limit();
}
inline void CreepDeciderConfig::clear_speed_limit() {
  _impl_.speed_limit_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CreepDeciderConfig::_internal_speed_limit() const {
  return _impl_.speed_limit_;
}
inline double CreepDeciderConfig::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.speed_limit)
  return _internal_speed_limit();
}
inline void CreepDeciderConfig::_internal_set_speed_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.speed_limit_ = value;
}
inline void CreepDeciderConfig::set_speed_limit(double value) {
  _internal_set_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.speed_limit)
}

// optional double max_valid_stop_distance = 3 [default = 0.3];
inline bool CreepDeciderConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void CreepDeciderConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CreepDeciderConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double CreepDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void CreepDeciderConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void CreepDeciderConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.max_valid_stop_distance)
}

// optional double min_boundary_t = 4 [default = 6];
inline bool CreepDeciderConfig::_internal_has_min_boundary_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_min_boundary_t() const {
  return _internal_has_min_boundary_t();
}
inline void CreepDeciderConfig::clear_min_boundary_t() {
  _impl_.min_boundary_t_ = 6;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double CreepDeciderConfig::_internal_min_boundary_t() const {
  return _impl_.min_boundary_t_;
}
inline double CreepDeciderConfig::min_boundary_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.min_boundary_t)
  return _internal_min_boundary_t();
}
inline void CreepDeciderConfig::_internal_set_min_boundary_t(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_boundary_t_ = value;
}
inline void CreepDeciderConfig::set_min_boundary_t(double value) {
  _internal_set_min_boundary_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.min_boundary_t)
}

// optional double ignore_max_st_min_t = 5 [default = 0.1];
inline bool CreepDeciderConfig::_internal_has_ignore_max_st_min_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_ignore_max_st_min_t() const {
  return _internal_has_ignore_max_st_min_t();
}
inline void CreepDeciderConfig::clear_ignore_max_st_min_t() {
  _impl_.ignore_max_st_min_t_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CreepDeciderConfig::_internal_ignore_max_st_min_t() const {
  return _impl_.ignore_max_st_min_t_;
}
inline double CreepDeciderConfig::ignore_max_st_min_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
  return _internal_ignore_max_st_min_t();
}
inline void CreepDeciderConfig::_internal_set_ignore_max_st_min_t(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ignore_max_st_min_t_ = value;
}
inline void CreepDeciderConfig::set_ignore_max_st_min_t(double value) {
  _internal_set_ignore_max_st_min_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_max_st_min_t)
}

// optional double ignore_min_st_min_s = 6 [default = 15];
inline bool CreepDeciderConfig::_internal_has_ignore_min_st_min_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CreepDeciderConfig::has_ignore_min_st_min_s() const {
  return _internal_has_ignore_min_st_min_s();
}
inline void CreepDeciderConfig::clear_ignore_min_st_min_s() {
  _impl_.ignore_min_st_min_s_ = 15;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double CreepDeciderConfig::_internal_ignore_min_st_min_s() const {
  return _impl_.ignore_min_st_min_s_;
}
inline double CreepDeciderConfig::ignore_min_st_min_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
  return _internal_ignore_min_st_min_s();
}
inline void CreepDeciderConfig::_internal_set_ignore_min_st_min_s(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ignore_min_st_min_s_ = value;
}
inline void CreepDeciderConfig::set_ignore_min_st_min_s(double value) {
  _internal_set_ignore_min_st_min_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.CreepDeciderConfig.ignore_min_st_min_s)
}

// -------------------------------------------------------------------

// LaneChangeDeciderConfig

// optional bool enable_lane_change_urgency_check = 1;
inline bool LaneChangeDeciderConfig::_internal_has_enable_lane_change_urgency_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_enable_lane_change_urgency_check() const {
  return _internal_has_enable_lane_change_urgency_check();
}
inline void LaneChangeDeciderConfig::clear_enable_lane_change_urgency_check() {
  _impl_.enable_lane_change_urgency_check_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool LaneChangeDeciderConfig::_internal_enable_lane_change_urgency_check() const {
  return _impl_.enable_lane_change_urgency_check_;
}
inline bool LaneChangeDeciderConfig::enable_lane_change_urgency_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_lane_change_urgency_check)
  return _internal_enable_lane_change_urgency_check();
}
inline void LaneChangeDeciderConfig::_internal_set_enable_lane_change_urgency_check(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_lane_change_urgency_check_ = value;
}
inline void LaneChangeDeciderConfig::set_enable_lane_change_urgency_check(bool value) {
  _internal_set_enable_lane_change_urgency_check(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_lane_change_urgency_check)
}

// optional bool enable_prioritize_change_lane = 2 [default = false];
inline bool LaneChangeDeciderConfig::_internal_has_enable_prioritize_change_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_enable_prioritize_change_lane() const {
  return _internal_has_enable_prioritize_change_lane();
}
inline void LaneChangeDeciderConfig::clear_enable_prioritize_change_lane() {
  _impl_.enable_prioritize_change_lane_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool LaneChangeDeciderConfig::_internal_enable_prioritize_change_lane() const {
  return _impl_.enable_prioritize_change_lane_;
}
inline bool LaneChangeDeciderConfig::enable_prioritize_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_prioritize_change_lane)
  return _internal_enable_prioritize_change_lane();
}
inline void LaneChangeDeciderConfig::_internal_set_enable_prioritize_change_lane(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enable_prioritize_change_lane_ = value;
}
inline void LaneChangeDeciderConfig::set_enable_prioritize_change_lane(bool value) {
  _internal_set_enable_prioritize_change_lane(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_prioritize_change_lane)
}

// optional bool enable_remove_change_lane = 3 [default = false];
inline bool LaneChangeDeciderConfig::_internal_has_enable_remove_change_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_enable_remove_change_lane() const {
  return _internal_has_enable_remove_change_lane();
}
inline void LaneChangeDeciderConfig::clear_enable_remove_change_lane() {
  _impl_.enable_remove_change_lane_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool LaneChangeDeciderConfig::_internal_enable_remove_change_lane() const {
  return _impl_.enable_remove_change_lane_;
}
inline bool LaneChangeDeciderConfig::enable_remove_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.enable_remove_change_lane)
  return _internal_enable_remove_change_lane();
}
inline void LaneChangeDeciderConfig::_internal_set_enable_remove_change_lane(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enable_remove_change_lane_ = value;
}
inline void LaneChangeDeciderConfig::set_enable_remove_change_lane(bool value) {
  _internal_set_enable_remove_change_lane(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.enable_remove_change_lane)
}

// optional bool reckless_change_lane = 4 [default = false];
inline bool LaneChangeDeciderConfig::_internal_has_reckless_change_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_reckless_change_lane() const {
  return _internal_has_reckless_change_lane();
}
inline void LaneChangeDeciderConfig::clear_reckless_change_lane() {
  _impl_.reckless_change_lane_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool LaneChangeDeciderConfig::_internal_reckless_change_lane() const {
  return _impl_.reckless_change_lane_;
}
inline bool LaneChangeDeciderConfig::reckless_change_lane() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.reckless_change_lane)
  return _internal_reckless_change_lane();
}
inline void LaneChangeDeciderConfig::_internal_set_reckless_change_lane(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.reckless_change_lane_ = value;
}
inline void LaneChangeDeciderConfig::set_reckless_change_lane(bool value) {
  _internal_set_reckless_change_lane(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.reckless_change_lane)
}

// optional double change_lane_success_freeze_time = 5 [default = 1.5];
inline bool LaneChangeDeciderConfig::_internal_has_change_lane_success_freeze_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_change_lane_success_freeze_time() const {
  return _internal_has_change_lane_success_freeze_time();
}
inline void LaneChangeDeciderConfig::clear_change_lane_success_freeze_time() {
  _impl_.change_lane_success_freeze_time_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double LaneChangeDeciderConfig::_internal_change_lane_success_freeze_time() const {
  return _impl_.change_lane_success_freeze_time_;
}
inline double LaneChangeDeciderConfig::change_lane_success_freeze_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.change_lane_success_freeze_time)
  return _internal_change_lane_success_freeze_time();
}
inline void LaneChangeDeciderConfig::_internal_set_change_lane_success_freeze_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.change_lane_success_freeze_time_ = value;
}
inline void LaneChangeDeciderConfig::set_change_lane_success_freeze_time(double value) {
  _internal_set_change_lane_success_freeze_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.change_lane_success_freeze_time)
}

// optional double change_lane_fail_freeze_time = 6 [default = 1];
inline bool LaneChangeDeciderConfig::_internal_has_change_lane_fail_freeze_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LaneChangeDeciderConfig::has_change_lane_fail_freeze_time() const {
  return _internal_has_change_lane_fail_freeze_time();
}
inline void LaneChangeDeciderConfig::clear_change_lane_fail_freeze_time() {
  _impl_.change_lane_fail_freeze_time_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double LaneChangeDeciderConfig::_internal_change_lane_fail_freeze_time() const {
  return _impl_.change_lane_fail_freeze_time_;
}
inline double LaneChangeDeciderConfig::change_lane_fail_freeze_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LaneChangeDeciderConfig.change_lane_fail_freeze_time)
  return _internal_change_lane_fail_freeze_time();
}
inline void LaneChangeDeciderConfig::_internal_set_change_lane_fail_freeze_time(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.change_lane_fail_freeze_time_ = value;
}
inline void LaneChangeDeciderConfig::set_change_lane_fail_freeze_time(double value) {
  _internal_set_change_lane_fail_freeze_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LaneChangeDeciderConfig.change_lane_fail_freeze_time)
}

// -------------------------------------------------------------------

// LearningModelInferenceTaskConfig

// optional .apollo.planning.LearningModelInferenceTaskConfig.ModelType model_type = 1;
inline bool LearningModelInferenceTaskConfig::_internal_has_model_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_model_type() const {
  return _internal_has_model_type();
}
inline void LearningModelInferenceTaskConfig::clear_model_type() {
  _impl_.model_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::apollo::planning::LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::_internal_model_type() const {
  return static_cast< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType >(_impl_.model_type_);
}
inline ::apollo::planning::LearningModelInferenceTaskConfig_ModelType LearningModelInferenceTaskConfig::model_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.model_type)
  return _internal_model_type();
}
inline void LearningModelInferenceTaskConfig::_internal_set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value) {
  assert(::apollo::planning::LearningModelInferenceTaskConfig_ModelType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.model_type_ = value;
}
inline void LearningModelInferenceTaskConfig::set_model_type(::apollo::planning::LearningModelInferenceTaskConfig_ModelType value) {
  _internal_set_model_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.model_type)
}

// optional string cpu_model_file = 2;
inline bool LearningModelInferenceTaskConfig::_internal_has_cpu_model_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_cpu_model_file() const {
  return _internal_has_cpu_model_file();
}
inline void LearningModelInferenceTaskConfig::clear_cpu_model_file() {
  _impl_.cpu_model_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LearningModelInferenceTaskConfig::cpu_model_file() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  return _internal_cpu_model_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LearningModelInferenceTaskConfig::set_cpu_model_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cpu_model_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}
inline std::string* LearningModelInferenceTaskConfig::mutable_cpu_model_file() {
  std::string* _s = _internal_mutable_cpu_model_file();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  return _s;
}
inline const std::string& LearningModelInferenceTaskConfig::_internal_cpu_model_file() const {
  return _impl_.cpu_model_file_.Get();
}
inline void LearningModelInferenceTaskConfig::_internal_set_cpu_model_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpu_model_file_.Set(value, GetArenaForAllocation());
}
inline std::string* LearningModelInferenceTaskConfig::_internal_mutable_cpu_model_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cpu_model_file_.Mutable(GetArenaForAllocation());
}
inline std::string* LearningModelInferenceTaskConfig::release_cpu_model_file() {
  // @@protoc_insertion_point(field_release:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
  if (!_internal_has_cpu_model_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cpu_model_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_model_file_.IsDefault()) {
    _impl_.cpu_model_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LearningModelInferenceTaskConfig::set_allocated_cpu_model_file(std::string* cpu_model_file) {
  if (cpu_model_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cpu_model_file_.SetAllocated(cpu_model_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpu_model_file_.IsDefault()) {
    _impl_.cpu_model_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LearningModelInferenceTaskConfig.cpu_model_file)
}

// optional string gpu_model_file = 3;
inline bool LearningModelInferenceTaskConfig::_internal_has_gpu_model_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_gpu_model_file() const {
  return _internal_has_gpu_model_file();
}
inline void LearningModelInferenceTaskConfig::clear_gpu_model_file() {
  _impl_.gpu_model_file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LearningModelInferenceTaskConfig::gpu_model_file() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  return _internal_gpu_model_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LearningModelInferenceTaskConfig::set_gpu_model_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.gpu_model_file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}
inline std::string* LearningModelInferenceTaskConfig::mutable_gpu_model_file() {
  std::string* _s = _internal_mutable_gpu_model_file();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  return _s;
}
inline const std::string& LearningModelInferenceTaskConfig::_internal_gpu_model_file() const {
  return _impl_.gpu_model_file_.Get();
}
inline void LearningModelInferenceTaskConfig::_internal_set_gpu_model_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.gpu_model_file_.Set(value, GetArenaForAllocation());
}
inline std::string* LearningModelInferenceTaskConfig::_internal_mutable_gpu_model_file() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.gpu_model_file_.Mutable(GetArenaForAllocation());
}
inline std::string* LearningModelInferenceTaskConfig::release_gpu_model_file() {
  // @@protoc_insertion_point(field_release:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
  if (!_internal_has_gpu_model_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.gpu_model_file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gpu_model_file_.IsDefault()) {
    _impl_.gpu_model_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LearningModelInferenceTaskConfig::set_allocated_gpu_model_file(std::string* gpu_model_file) {
  if (gpu_model_file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gpu_model_file_.SetAllocated(gpu_model_file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gpu_model_file_.IsDefault()) {
    _impl_.gpu_model_file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LearningModelInferenceTaskConfig.gpu_model_file)
}

// optional bool use_cuda = 4 [default = true];
inline bool LearningModelInferenceTaskConfig::_internal_has_use_cuda() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_use_cuda() const {
  return _internal_has_use_cuda();
}
inline void LearningModelInferenceTaskConfig::clear_use_cuda() {
  _impl_.use_cuda_ = true;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool LearningModelInferenceTaskConfig::_internal_use_cuda() const {
  return _impl_.use_cuda_;
}
inline bool LearningModelInferenceTaskConfig::use_cuda() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.use_cuda)
  return _internal_use_cuda();
}
inline void LearningModelInferenceTaskConfig::_internal_set_use_cuda(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.use_cuda_ = value;
}
inline void LearningModelInferenceTaskConfig::set_use_cuda(bool value) {
  _internal_set_use_cuda(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.use_cuda)
}

// optional double trajectory_delta_t = 5 [default = 0.2];
inline bool LearningModelInferenceTaskConfig::_internal_has_trajectory_delta_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_trajectory_delta_t() const {
  return _internal_has_trajectory_delta_t();
}
inline void LearningModelInferenceTaskConfig::clear_trajectory_delta_t() {
  _impl_.trajectory_delta_t_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double LearningModelInferenceTaskConfig::_internal_trajectory_delta_t() const {
  return _impl_.trajectory_delta_t_;
}
inline double LearningModelInferenceTaskConfig::trajectory_delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.trajectory_delta_t)
  return _internal_trajectory_delta_t();
}
inline void LearningModelInferenceTaskConfig::_internal_set_trajectory_delta_t(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.trajectory_delta_t_ = value;
}
inline void LearningModelInferenceTaskConfig::set_trajectory_delta_t(double value) {
  _internal_set_trajectory_delta_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.trajectory_delta_t)
}

// optional bool allow_empty_learning_based_data = 6 [default = false];
inline bool LearningModelInferenceTaskConfig::_internal_has_allow_empty_learning_based_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_allow_empty_learning_based_data() const {
  return _internal_has_allow_empty_learning_based_data();
}
inline void LearningModelInferenceTaskConfig::clear_allow_empty_learning_based_data() {
  _impl_.allow_empty_learning_based_data_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool LearningModelInferenceTaskConfig::_internal_allow_empty_learning_based_data() const {
  return _impl_.allow_empty_learning_based_data_;
}
inline bool LearningModelInferenceTaskConfig::allow_empty_learning_based_data() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_learning_based_data)
  return _internal_allow_empty_learning_based_data();
}
inline void LearningModelInferenceTaskConfig::_internal_set_allow_empty_learning_based_data(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.allow_empty_learning_based_data_ = value;
}
inline void LearningModelInferenceTaskConfig::set_allow_empty_learning_based_data(bool value) {
  _internal_set_allow_empty_learning_based_data(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_learning_based_data)
}

// optional bool allow_empty_output_trajectory = 7 [default = false];
inline bool LearningModelInferenceTaskConfig::_internal_has_allow_empty_output_trajectory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LearningModelInferenceTaskConfig::has_allow_empty_output_trajectory() const {
  return _internal_has_allow_empty_output_trajectory();
}
inline void LearningModelInferenceTaskConfig::clear_allow_empty_output_trajectory() {
  _impl_.allow_empty_output_trajectory_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool LearningModelInferenceTaskConfig::_internal_allow_empty_output_trajectory() const {
  return _impl_.allow_empty_output_trajectory_;
}
inline bool LearningModelInferenceTaskConfig::allow_empty_output_trajectory() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_output_trajectory)
  return _internal_allow_empty_output_trajectory();
}
inline void LearningModelInferenceTaskConfig::_internal_set_allow_empty_output_trajectory(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.allow_empty_output_trajectory_ = value;
}
inline void LearningModelInferenceTaskConfig::set_allow_empty_output_trajectory(bool value) {
  _internal_set_allow_empty_output_trajectory(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTaskConfig.allow_empty_output_trajectory)
}

// -------------------------------------------------------------------

// LearningModelInferenceTrajectoryTaskConfig

// optional double min_adc_future_trajectory_time_length = 1 [default = 2];
inline bool LearningModelInferenceTrajectoryTaskConfig::_internal_has_min_adc_future_trajectory_time_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LearningModelInferenceTrajectoryTaskConfig::has_min_adc_future_trajectory_time_length() const {
  return _internal_has_min_adc_future_trajectory_time_length();
}
inline void LearningModelInferenceTrajectoryTaskConfig::clear_min_adc_future_trajectory_time_length() {
  _impl_.min_adc_future_trajectory_time_length_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LearningModelInferenceTrajectoryTaskConfig::_internal_min_adc_future_trajectory_time_length() const {
  return _impl_.min_adc_future_trajectory_time_length_;
}
inline double LearningModelInferenceTrajectoryTaskConfig::min_adc_future_trajectory_time_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LearningModelInferenceTrajectoryTaskConfig.min_adc_future_trajectory_time_length)
  return _internal_min_adc_future_trajectory_time_length();
}
inline void LearningModelInferenceTrajectoryTaskConfig::_internal_set_min_adc_future_trajectory_time_length(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_adc_future_trajectory_time_length_ = value;
}
inline void LearningModelInferenceTrajectoryTaskConfig::set_min_adc_future_trajectory_time_length(double value) {
  _internal_set_min_adc_future_trajectory_time_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LearningModelInferenceTrajectoryTaskConfig.min_adc_future_trajectory_time_length)
}

// -------------------------------------------------------------------

// NaviObstacleDeciderConfig

// optional double min_nudge_distance = 1 [default = 0.2];
inline bool NaviObstacleDeciderConfig::_internal_has_min_nudge_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_min_nudge_distance() const {
  return _internal_has_min_nudge_distance();
}
inline void NaviObstacleDeciderConfig::clear_min_nudge_distance() {
  _impl_.min_nudge_distance_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double NaviObstacleDeciderConfig::_internal_min_nudge_distance() const {
  return _impl_.min_nudge_distance_;
}
inline double NaviObstacleDeciderConfig::min_nudge_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.min_nudge_distance)
  return _internal_min_nudge_distance();
}
inline void NaviObstacleDeciderConfig::_internal_set_min_nudge_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_nudge_distance_ = value;
}
inline void NaviObstacleDeciderConfig::set_min_nudge_distance(double value) {
  _internal_set_min_nudge_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.min_nudge_distance)
}

// optional double max_nudge_distance = 2 [default = 1.2];
inline bool NaviObstacleDeciderConfig::_internal_has_max_nudge_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_max_nudge_distance() const {
  return _internal_has_max_nudge_distance();
}
inline void NaviObstacleDeciderConfig::clear_max_nudge_distance() {
  _impl_.max_nudge_distance_ = 1.2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NaviObstacleDeciderConfig::_internal_max_nudge_distance() const {
  return _impl_.max_nudge_distance_;
}
inline double NaviObstacleDeciderConfig::max_nudge_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_nudge_distance)
  return _internal_max_nudge_distance();
}
inline void NaviObstacleDeciderConfig::_internal_set_max_nudge_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_nudge_distance_ = value;
}
inline void NaviObstacleDeciderConfig::set_max_nudge_distance(double value) {
  _internal_set_max_nudge_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_nudge_distance)
}

// optional double max_allow_nudge_speed = 3 [default = 16.667];
inline bool NaviObstacleDeciderConfig::_internal_has_max_allow_nudge_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_max_allow_nudge_speed() const {
  return _internal_has_max_allow_nudge_speed();
}
inline void NaviObstacleDeciderConfig::clear_max_allow_nudge_speed() {
  _impl_.max_allow_nudge_speed_ = 16.667;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double NaviObstacleDeciderConfig::_internal_max_allow_nudge_speed() const {
  return _impl_.max_allow_nudge_speed_;
}
inline double NaviObstacleDeciderConfig::max_allow_nudge_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
  return _internal_max_allow_nudge_speed();
}
inline void NaviObstacleDeciderConfig::_internal_set_max_allow_nudge_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_allow_nudge_speed_ = value;
}
inline void NaviObstacleDeciderConfig::set_max_allow_nudge_speed(double value) {
  _internal_set_max_allow_nudge_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_allow_nudge_speed)
}

// optional double safe_distance = 4 [default = 0.2];
inline bool NaviObstacleDeciderConfig::_internal_has_safe_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_safe_distance() const {
  return _internal_has_safe_distance();
}
inline void NaviObstacleDeciderConfig::clear_safe_distance() {
  _impl_.safe_distance_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double NaviObstacleDeciderConfig::_internal_safe_distance() const {
  return _impl_.safe_distance_;
}
inline double NaviObstacleDeciderConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.safe_distance)
  return _internal_safe_distance();
}
inline void NaviObstacleDeciderConfig::_internal_set_safe_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.safe_distance_ = value;
}
inline void NaviObstacleDeciderConfig::set_safe_distance(double value) {
  _internal_set_safe_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.safe_distance)
}

// optional double nudge_allow_tolerance = 5 [default = 0.05];
inline bool NaviObstacleDeciderConfig::_internal_has_nudge_allow_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_nudge_allow_tolerance() const {
  return _internal_has_nudge_allow_tolerance();
}
inline void NaviObstacleDeciderConfig::clear_nudge_allow_tolerance() {
  _impl_.nudge_allow_tolerance_ = 0.05;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double NaviObstacleDeciderConfig::_internal_nudge_allow_tolerance() const {
  return _impl_.nudge_allow_tolerance_;
}
inline double NaviObstacleDeciderConfig::nudge_allow_tolerance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
  return _internal_nudge_allow_tolerance();
}
inline void NaviObstacleDeciderConfig::_internal_set_nudge_allow_tolerance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.nudge_allow_tolerance_ = value;
}
inline void NaviObstacleDeciderConfig::set_nudge_allow_tolerance(double value) {
  _internal_set_nudge_allow_tolerance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.nudge_allow_tolerance)
}

// optional uint32 cycles_number = 6 [default = 3];
inline bool NaviObstacleDeciderConfig::_internal_has_cycles_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_cycles_number() const {
  return _internal_has_cycles_number();
}
inline void NaviObstacleDeciderConfig::clear_cycles_number() {
  _impl_.cycles_number_ = 3u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t NaviObstacleDeciderConfig::_internal_cycles_number() const {
  return _impl_.cycles_number_;
}
inline uint32_t NaviObstacleDeciderConfig::cycles_number() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.cycles_number)
  return _internal_cycles_number();
}
inline void NaviObstacleDeciderConfig::_internal_set_cycles_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cycles_number_ = value;
}
inline void NaviObstacleDeciderConfig::set_cycles_number(uint32_t value) {
  _internal_set_cycles_number(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.cycles_number)
}

// optional double judge_dis_coeff = 7 [default = 2];
inline bool NaviObstacleDeciderConfig::_internal_has_judge_dis_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_judge_dis_coeff() const {
  return _internal_has_judge_dis_coeff();
}
inline void NaviObstacleDeciderConfig::clear_judge_dis_coeff() {
  _impl_.judge_dis_coeff_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double NaviObstacleDeciderConfig::_internal_judge_dis_coeff() const {
  return _impl_.judge_dis_coeff_;
}
inline double NaviObstacleDeciderConfig::judge_dis_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
  return _internal_judge_dis_coeff();
}
inline void NaviObstacleDeciderConfig::_internal_set_judge_dis_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.judge_dis_coeff_ = value;
}
inline void NaviObstacleDeciderConfig::set_judge_dis_coeff(double value) {
  _internal_set_judge_dis_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.judge_dis_coeff)
}

// optional double basis_dis_value = 8 [default = 30];
inline bool NaviObstacleDeciderConfig::_internal_has_basis_dis_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_basis_dis_value() const {
  return _internal_has_basis_dis_value();
}
inline void NaviObstacleDeciderConfig::clear_basis_dis_value() {
  _impl_.basis_dis_value_ = 30;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double NaviObstacleDeciderConfig::_internal_basis_dis_value() const {
  return _impl_.basis_dis_value_;
}
inline double NaviObstacleDeciderConfig::basis_dis_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.basis_dis_value)
  return _internal_basis_dis_value();
}
inline void NaviObstacleDeciderConfig::_internal_set_basis_dis_value(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.basis_dis_value_ = value;
}
inline void NaviObstacleDeciderConfig::set_basis_dis_value(double value) {
  _internal_set_basis_dis_value(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.basis_dis_value)
}

// optional double lateral_velocity_value = 9 [default = 0.5];
inline bool NaviObstacleDeciderConfig::_internal_has_lateral_velocity_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_lateral_velocity_value() const {
  return _internal_has_lateral_velocity_value();
}
inline void NaviObstacleDeciderConfig::clear_lateral_velocity_value() {
  _impl_.lateral_velocity_value_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double NaviObstacleDeciderConfig::_internal_lateral_velocity_value() const {
  return _impl_.lateral_velocity_value_;
}
inline double NaviObstacleDeciderConfig::lateral_velocity_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
  return _internal_lateral_velocity_value();
}
inline void NaviObstacleDeciderConfig::_internal_set_lateral_velocity_value(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.lateral_velocity_value_ = value;
}
inline void NaviObstacleDeciderConfig::set_lateral_velocity_value(double value) {
  _internal_set_lateral_velocity_value(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.lateral_velocity_value)
}

// optional double speed_decider_detect_range = 10 [default = 1];
inline bool NaviObstacleDeciderConfig::_internal_has_speed_decider_detect_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_speed_decider_detect_range() const {
  return _internal_has_speed_decider_detect_range();
}
inline void NaviObstacleDeciderConfig::clear_speed_decider_detect_range() {
  _impl_.speed_decider_detect_range_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double NaviObstacleDeciderConfig::_internal_speed_decider_detect_range() const {
  return _impl_.speed_decider_detect_range_;
}
inline double NaviObstacleDeciderConfig::speed_decider_detect_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
  return _internal_speed_decider_detect_range();
}
inline void NaviObstacleDeciderConfig::_internal_set_speed_decider_detect_range(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.speed_decider_detect_range_ = value;
}
inline void NaviObstacleDeciderConfig::set_speed_decider_detect_range(double value) {
  _internal_set_speed_decider_detect_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.speed_decider_detect_range)
}

// optional uint32 max_keep_nudge_cycles = 11 [default = 100];
inline bool NaviObstacleDeciderConfig::_internal_has_max_keep_nudge_cycles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NaviObstacleDeciderConfig::has_max_keep_nudge_cycles() const {
  return _internal_has_max_keep_nudge_cycles();
}
inline void NaviObstacleDeciderConfig::clear_max_keep_nudge_cycles() {
  _impl_.max_keep_nudge_cycles_ = 100u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t NaviObstacleDeciderConfig::_internal_max_keep_nudge_cycles() const {
  return _impl_.max_keep_nudge_cycles_;
}
inline uint32_t NaviObstacleDeciderConfig::max_keep_nudge_cycles() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
  return _internal_max_keep_nudge_cycles();
}
inline void NaviObstacleDeciderConfig::_internal_set_max_keep_nudge_cycles(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_keep_nudge_cycles_ = value;
}
inline void NaviObstacleDeciderConfig::set_max_keep_nudge_cycles(uint32_t value) {
  _internal_set_max_keep_nudge_cycles(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviObstacleDeciderConfig.max_keep_nudge_cycles)
}

// -------------------------------------------------------------------

// NaviPathDeciderConfig

// optional double min_path_length = 1 [default = 5];
inline bool NaviPathDeciderConfig::_internal_has_min_path_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_path_length() const {
  return _internal_has_min_path_length();
}
inline void NaviPathDeciderConfig::clear_min_path_length() {
  _impl_.min_path_length_ = 5;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double NaviPathDeciderConfig::_internal_min_path_length() const {
  return _impl_.min_path_length_;
}
inline double NaviPathDeciderConfig::min_path_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_path_length)
  return _internal_min_path_length();
}
inline void NaviPathDeciderConfig::_internal_set_min_path_length(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.min_path_length_ = value;
}
inline void NaviPathDeciderConfig::set_min_path_length(double value) {
  _internal_set_min_path_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_path_length)
}

// optional uint32 min_look_forward_time = 2 [default = 2];
inline bool NaviPathDeciderConfig::_internal_has_min_look_forward_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_look_forward_time() const {
  return _internal_has_min_look_forward_time();
}
inline void NaviPathDeciderConfig::clear_min_look_forward_time() {
  _impl_.min_look_forward_time_ = 2u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t NaviPathDeciderConfig::_internal_min_look_forward_time() const {
  return _impl_.min_look_forward_time_;
}
inline uint32_t NaviPathDeciderConfig::min_look_forward_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
  return _internal_min_look_forward_time();
}
inline void NaviPathDeciderConfig::_internal_set_min_look_forward_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_look_forward_time_ = value;
}
inline void NaviPathDeciderConfig::set_min_look_forward_time(uint32_t value) {
  _internal_set_min_look_forward_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_look_forward_time)
}

// optional double max_keep_lane_distance = 3 [default = 0.8];
inline bool NaviPathDeciderConfig::_internal_has_max_keep_lane_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_keep_lane_distance() const {
  return _internal_has_max_keep_lane_distance();
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_distance() {
  _impl_.max_keep_lane_distance_ = 0.8;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double NaviPathDeciderConfig::_internal_max_keep_lane_distance() const {
  return _impl_.max_keep_lane_distance_;
}
inline double NaviPathDeciderConfig::max_keep_lane_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
  return _internal_max_keep_lane_distance();
}
inline void NaviPathDeciderConfig::_internal_set_max_keep_lane_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_keep_lane_distance_ = value;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_distance(double value) {
  _internal_set_max_keep_lane_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_distance)
}

// optional double max_keep_lane_shift_y = 4 [default = 20];
inline bool NaviPathDeciderConfig::_internal_has_max_keep_lane_shift_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_keep_lane_shift_y() const {
  return _internal_has_max_keep_lane_shift_y();
}
inline void NaviPathDeciderConfig::clear_max_keep_lane_shift_y() {
  _impl_.max_keep_lane_shift_y_ = 20;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double NaviPathDeciderConfig::_internal_max_keep_lane_shift_y() const {
  return _impl_.max_keep_lane_shift_y_;
}
inline double NaviPathDeciderConfig::max_keep_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
  return _internal_max_keep_lane_shift_y();
}
inline void NaviPathDeciderConfig::_internal_set_max_keep_lane_shift_y(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_keep_lane_shift_y_ = value;
}
inline void NaviPathDeciderConfig::set_max_keep_lane_shift_y(double value) {
  _internal_set_max_keep_lane_shift_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_keep_lane_shift_y)
}

// optional double min_keep_lane_offset = 5 [default = 15];
inline bool NaviPathDeciderConfig::_internal_has_min_keep_lane_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_min_keep_lane_offset() const {
  return _internal_has_min_keep_lane_offset();
}
inline void NaviPathDeciderConfig::clear_min_keep_lane_offset() {
  _impl_.min_keep_lane_offset_ = 15;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double NaviPathDeciderConfig::_internal_min_keep_lane_offset() const {
  return _impl_.min_keep_lane_offset_;
}
inline double NaviPathDeciderConfig::min_keep_lane_offset() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
  return _internal_min_keep_lane_offset();
}
inline void NaviPathDeciderConfig::_internal_set_min_keep_lane_offset(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.min_keep_lane_offset_ = value;
}
inline void NaviPathDeciderConfig::set_min_keep_lane_offset(double value) {
  _internal_set_min_keep_lane_offset(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.min_keep_lane_offset)
}

// optional double keep_lane_shift_compensation = 6 [default = 0.01];
inline bool NaviPathDeciderConfig::_internal_has_keep_lane_shift_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_keep_lane_shift_compensation() const {
  return _internal_has_keep_lane_shift_compensation();
}
inline void NaviPathDeciderConfig::clear_keep_lane_shift_compensation() {
  _impl_.keep_lane_shift_compensation_ = 0.01;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double NaviPathDeciderConfig::_internal_keep_lane_shift_compensation() const {
  return _impl_.keep_lane_shift_compensation_;
}
inline double NaviPathDeciderConfig::keep_lane_shift_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
  return _internal_keep_lane_shift_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_keep_lane_shift_compensation(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.keep_lane_shift_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_keep_lane_shift_compensation(double value) {
  _internal_set_keep_lane_shift_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.keep_lane_shift_compensation)
}

// optional .apollo.planning.MoveDestLaneConfigTable move_dest_lane_config_talbe = 7;
inline bool NaviPathDeciderConfig::_internal_has_move_dest_lane_config_talbe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.move_dest_lane_config_talbe_ != nullptr);
  return value;
}
inline bool NaviPathDeciderConfig::has_move_dest_lane_config_talbe() const {
  return _internal_has_move_dest_lane_config_talbe();
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_config_talbe() {
  if (_impl_.move_dest_lane_config_talbe_ != nullptr) _impl_.move_dest_lane_config_talbe_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::_internal_move_dest_lane_config_talbe() const {
  const ::apollo::planning::MoveDestLaneConfigTable* p = _impl_.move_dest_lane_config_talbe_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::MoveDestLaneConfigTable&>(
      ::apollo::planning::_MoveDestLaneConfigTable_default_instance_);
}
inline const ::apollo::planning::MoveDestLaneConfigTable& NaviPathDeciderConfig::move_dest_lane_config_talbe() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return _internal_move_dest_lane_config_talbe();
}
inline void NaviPathDeciderConfig::unsafe_arena_set_allocated_move_dest_lane_config_talbe(
    ::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_dest_lane_config_talbe_);
  }
  _impl_.move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  if (move_dest_lane_config_talbe) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::release_move_dest_lane_config_talbe() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MoveDestLaneConfigTable* temp = _impl_.move_dest_lane_config_talbe_;
  _impl_.move_dest_lane_config_talbe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::unsafe_arena_release_move_dest_lane_config_talbe() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::MoveDestLaneConfigTable* temp = _impl_.move_dest_lane_config_talbe_;
  _impl_.move_dest_lane_config_talbe_ = nullptr;
  return temp;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::_internal_mutable_move_dest_lane_config_talbe() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.move_dest_lane_config_talbe_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::MoveDestLaneConfigTable>(GetArenaForAllocation());
    _impl_.move_dest_lane_config_talbe_ = p;
  }
  return _impl_.move_dest_lane_config_talbe_;
}
inline ::apollo::planning::MoveDestLaneConfigTable* NaviPathDeciderConfig::mutable_move_dest_lane_config_talbe() {
  ::apollo::planning::MoveDestLaneConfigTable* _msg = _internal_mutable_move_dest_lane_config_talbe();
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
  return _msg;
}
inline void NaviPathDeciderConfig::set_allocated_move_dest_lane_config_talbe(::apollo::planning::MoveDestLaneConfigTable* move_dest_lane_config_talbe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.move_dest_lane_config_talbe_;
  }
  if (move_dest_lane_config_talbe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(move_dest_lane_config_talbe);
    if (message_arena != submessage_arena) {
      move_dest_lane_config_talbe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_dest_lane_config_talbe, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.move_dest_lane_config_talbe_ = move_dest_lane_config_talbe;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPathDeciderConfig.move_dest_lane_config_talbe)
}

// optional double move_dest_lane_compensation = 8 [default = 0.35];
inline bool NaviPathDeciderConfig::_internal_has_move_dest_lane_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_move_dest_lane_compensation() const {
  return _internal_has_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::clear_move_dest_lane_compensation() {
  _impl_.move_dest_lane_compensation_ = 0.35;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double NaviPathDeciderConfig::_internal_move_dest_lane_compensation() const {
  return _impl_.move_dest_lane_compensation_;
}
inline double NaviPathDeciderConfig::move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
  return _internal_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_move_dest_lane_compensation(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.move_dest_lane_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_move_dest_lane_compensation(double value) {
  _internal_set_move_dest_lane_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.move_dest_lane_compensation)
}

// optional double max_kappa_threshold = 9 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_max_kappa_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_max_kappa_threshold() const {
  return _internal_has_max_kappa_threshold();
}
inline void NaviPathDeciderConfig::clear_max_kappa_threshold() {
  _impl_.max_kappa_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NaviPathDeciderConfig::_internal_max_kappa_threshold() const {
  return _impl_.max_kappa_threshold_;
}
inline double NaviPathDeciderConfig::max_kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
  return _internal_max_kappa_threshold();
}
inline void NaviPathDeciderConfig::_internal_set_max_kappa_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_kappa_threshold_ = value;
}
inline void NaviPathDeciderConfig::set_max_kappa_threshold(double value) {
  _internal_set_max_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.max_kappa_threshold)
}

// optional double kappa_move_dest_lane_compensation = 10 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_kappa_move_dest_lane_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_kappa_move_dest_lane_compensation() const {
  return _internal_has_kappa_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::clear_kappa_move_dest_lane_compensation() {
  _impl_.kappa_move_dest_lane_compensation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double NaviPathDeciderConfig::_internal_kappa_move_dest_lane_compensation() const {
  return _impl_.kappa_move_dest_lane_compensation_;
}
inline double NaviPathDeciderConfig::kappa_move_dest_lane_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
  return _internal_kappa_move_dest_lane_compensation();
}
inline void NaviPathDeciderConfig::_internal_set_kappa_move_dest_lane_compensation(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.kappa_move_dest_lane_compensation_ = value;
}
inline void NaviPathDeciderConfig::set_kappa_move_dest_lane_compensation(double value) {
  _internal_set_kappa_move_dest_lane_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.kappa_move_dest_lane_compensation)
}

// optional uint32 start_plan_point_from = 11 [default = 0];
inline bool NaviPathDeciderConfig::_internal_has_start_plan_point_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviPathDeciderConfig::has_start_plan_point_from() const {
  return _internal_has_start_plan_point_from();
}
inline void NaviPathDeciderConfig::clear_start_plan_point_from() {
  _impl_.start_plan_point_from_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t NaviPathDeciderConfig::_internal_start_plan_point_from() const {
  return _impl_.start_plan_point_from_;
}
inline uint32_t NaviPathDeciderConfig::start_plan_point_from() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
  return _internal_start_plan_point_from();
}
inline void NaviPathDeciderConfig::_internal_set_start_plan_point_from(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_plan_point_from_ = value;
}
inline void NaviPathDeciderConfig::set_start_plan_point_from(uint32_t value) {
  _internal_set_start_plan_point_from(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPathDeciderConfig.start_plan_point_from)
}

// -------------------------------------------------------------------

// MoveDestLaneConfigTable

// repeated .apollo.planning.ShiftConfig lateral_shift = 1;
inline int MoveDestLaneConfigTable::_internal_lateral_shift_size() const {
  return _impl_.lateral_shift_.size();
}
inline int MoveDestLaneConfigTable::lateral_shift_size() const {
  return _internal_lateral_shift_size();
}
inline void MoveDestLaneConfigTable::clear_lateral_shift() {
  _impl_.lateral_shift_.Clear();
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::mutable_lateral_shift(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _impl_.lateral_shift_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >*
MoveDestLaneConfigTable::mutable_lateral_shift() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return &_impl_.lateral_shift_;
}
inline const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::_internal_lateral_shift(int index) const {
  return _impl_.lateral_shift_.Get(index);
}
inline const ::apollo::planning::ShiftConfig& MoveDestLaneConfigTable::lateral_shift(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _internal_lateral_shift(index);
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::_internal_add_lateral_shift() {
  return _impl_.lateral_shift_.Add();
}
inline ::apollo::planning::ShiftConfig* MoveDestLaneConfigTable::add_lateral_shift() {
  ::apollo::planning::ShiftConfig* _add = _internal_add_lateral_shift();
  // @@protoc_insertion_point(field_add:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ShiftConfig >&
MoveDestLaneConfigTable::lateral_shift() const {
  // @@protoc_insertion_point(field_list:apollo.planning.MoveDestLaneConfigTable.lateral_shift)
  return _impl_.lateral_shift_;
}

// -------------------------------------------------------------------

// ShiftConfig

// optional double max_speed = 1 [default = 4.16];
inline bool ShiftConfig::_internal_has_max_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void ShiftConfig::clear_max_speed() {
  _impl_.max_speed_ = 4.16;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ShiftConfig::_internal_max_speed() const {
  return _impl_.max_speed_;
}
inline double ShiftConfig::max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_speed)
  return _internal_max_speed();
}
inline void ShiftConfig::_internal_set_max_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_speed_ = value;
}
inline void ShiftConfig::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_speed)
}

// optional double max_move_dest_lane_shift_y = 3 [default = 0.4];
inline bool ShiftConfig::_internal_has_max_move_dest_lane_shift_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftConfig::has_max_move_dest_lane_shift_y() const {
  return _internal_has_max_move_dest_lane_shift_y();
}
inline void ShiftConfig::clear_max_move_dest_lane_shift_y() {
  _impl_.max_move_dest_lane_shift_y_ = 0.4;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ShiftConfig::_internal_max_move_dest_lane_shift_y() const {
  return _impl_.max_move_dest_lane_shift_y_;
}
inline double ShiftConfig::max_move_dest_lane_shift_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
  return _internal_max_move_dest_lane_shift_y();
}
inline void ShiftConfig::_internal_set_max_move_dest_lane_shift_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_move_dest_lane_shift_y_ = value;
}
inline void ShiftConfig::set_max_move_dest_lane_shift_y(double value) {
  _internal_set_max_move_dest_lane_shift_y(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ShiftConfig.max_move_dest_lane_shift_y)
}

// -------------------------------------------------------------------

// NaviSpeedDeciderConfig

// optional double preferred_accel = 1 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_accel() const {
  return _internal_has_preferred_accel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_accel() {
  _impl_.preferred_accel_ = 2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_accel() const {
  return _impl_.preferred_accel_;
}
inline double NaviSpeedDeciderConfig::preferred_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
  return _internal_preferred_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_accel(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.preferred_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_accel(double value) {
  _internal_set_preferred_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_accel)
}

// optional double preferred_decel = 2 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_decel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_decel() const {
  return _internal_has_preferred_decel();
}
inline void NaviSpeedDeciderConfig::clear_preferred_decel() {
  _impl_.preferred_decel_ = 2;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_decel() const {
  return _impl_.preferred_decel_;
}
inline double NaviSpeedDeciderConfig::preferred_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
  return _internal_preferred_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_decel(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.preferred_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_decel(double value) {
  _internal_set_preferred_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_decel)
}

// optional double preferred_jerk = 3 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_preferred_jerk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_preferred_jerk() const {
  return _internal_has_preferred_jerk();
}
inline void NaviSpeedDeciderConfig::clear_preferred_jerk() {
  _impl_.preferred_jerk_ = 2;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double NaviSpeedDeciderConfig::_internal_preferred_jerk() const {
  return _impl_.preferred_jerk_;
}
inline double NaviSpeedDeciderConfig::preferred_jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
  return _internal_preferred_jerk();
}
inline void NaviSpeedDeciderConfig::_internal_set_preferred_jerk(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.preferred_jerk_ = value;
}
inline void NaviSpeedDeciderConfig::set_preferred_jerk(double value) {
  _internal_set_preferred_jerk(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.preferred_jerk)
}

// optional double max_accel = 4 [default = 4];
inline bool NaviSpeedDeciderConfig::_internal_has_max_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_accel() const {
  return _internal_has_max_accel();
}
inline void NaviSpeedDeciderConfig::clear_max_accel() {
  _impl_.max_accel_ = 4;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double NaviSpeedDeciderConfig::_internal_max_accel() const {
  return _impl_.max_accel_;
}
inline double NaviSpeedDeciderConfig::max_accel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_accel)
  return _internal_max_accel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_accel(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_accel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_accel(double value) {
  _internal_set_max_accel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_accel)
}

// optional double max_decel = 5 [default = 5];
inline bool NaviSpeedDeciderConfig::_internal_has_max_decel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_max_decel() const {
  return _internal_has_max_decel();
}
inline void NaviSpeedDeciderConfig::clear_max_decel() {
  _impl_.max_decel_ = 5;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double NaviSpeedDeciderConfig::_internal_max_decel() const {
  return _impl_.max_decel_;
}
inline double NaviSpeedDeciderConfig::max_decel() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.max_decel)
  return _internal_max_decel();
}
inline void NaviSpeedDeciderConfig::_internal_set_max_decel(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_decel_ = value;
}
inline void NaviSpeedDeciderConfig::set_max_decel(double value) {
  _internal_set_max_decel(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.max_decel)
}

// optional double obstacle_buffer = 6 [default = 0.5];
inline bool NaviSpeedDeciderConfig::_internal_has_obstacle_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_obstacle_buffer() const {
  return _internal_has_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::clear_obstacle_buffer() {
  _impl_.obstacle_buffer_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double NaviSpeedDeciderConfig::_internal_obstacle_buffer() const {
  return _impl_.obstacle_buffer_;
}
inline double NaviSpeedDeciderConfig::obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
  return _internal_obstacle_buffer();
}
inline void NaviSpeedDeciderConfig::_internal_set_obstacle_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.obstacle_buffer_ = value;
}
inline void NaviSpeedDeciderConfig::set_obstacle_buffer(double value) {
  _internal_set_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.obstacle_buffer)
}

// optional double safe_distance_base = 7 [default = 2];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_base() const {
  return _internal_has_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_base() {
  _impl_.safe_distance_base_ = 2;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_base() const {
  return _impl_.safe_distance_base_;
}
inline double NaviSpeedDeciderConfig::safe_distance_base() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
  return _internal_safe_distance_base();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_base(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.safe_distance_base_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_base(double value) {
  _internal_set_safe_distance_base(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_base)
}

// optional double safe_distance_ratio = 8 [default = 1];
inline bool NaviSpeedDeciderConfig::_internal_has_safe_distance_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_safe_distance_ratio() const {
  return _internal_has_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::clear_safe_distance_ratio() {
  _impl_.safe_distance_ratio_ = 1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double NaviSpeedDeciderConfig::_internal_safe_distance_ratio() const {
  return _impl_.safe_distance_ratio_;
}
inline double NaviSpeedDeciderConfig::safe_distance_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
  return _internal_safe_distance_ratio();
}
inline void NaviSpeedDeciderConfig::_internal_set_safe_distance_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.safe_distance_ratio_ = value;
}
inline void NaviSpeedDeciderConfig::set_safe_distance_ratio(double value) {
  _internal_set_safe_distance_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.safe_distance_ratio)
}

// optional double following_accel_ratio = 9 [default = 0.5];
inline bool NaviSpeedDeciderConfig::_internal_has_following_accel_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_following_accel_ratio() const {
  return _internal_has_following_accel_ratio();
}
inline void NaviSpeedDeciderConfig::clear_following_accel_ratio() {
  _impl_.following_accel_ratio_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double NaviSpeedDeciderConfig::_internal_following_accel_ratio() const {
  return _impl_.following_accel_ratio_;
}
inline double NaviSpeedDeciderConfig::following_accel_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
  return _internal_following_accel_ratio();
}
inline void NaviSpeedDeciderConfig::_internal_set_following_accel_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.following_accel_ratio_ = value;
}
inline void NaviSpeedDeciderConfig::set_following_accel_ratio(double value) {
  _internal_set_following_accel_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.following_accel_ratio)
}

// optional double soft_centric_accel_limit = 10 [default = 1.2];
inline bool NaviSpeedDeciderConfig::_internal_has_soft_centric_accel_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_soft_centric_accel_limit() const {
  return _internal_has_soft_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_soft_centric_accel_limit() {
  _impl_.soft_centric_accel_limit_ = 1.2;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double NaviSpeedDeciderConfig::_internal_soft_centric_accel_limit() const {
  return _impl_.soft_centric_accel_limit_;
}
inline double NaviSpeedDeciderConfig::soft_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
  return _internal_soft_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_soft_centric_accel_limit(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.soft_centric_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_soft_centric_accel_limit(double value) {
  _internal_set_soft_centric_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.soft_centric_accel_limit)
}

// optional double hard_centric_accel_limit = 11 [default = 1.5];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_centric_accel_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_centric_accel_limit() const {
  return _internal_has_hard_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_centric_accel_limit() {
  _impl_.hard_centric_accel_limit_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_centric_accel_limit() const {
  return _impl_.hard_centric_accel_limit_;
}
inline double NaviSpeedDeciderConfig::hard_centric_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
  return _internal_hard_centric_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_centric_accel_limit(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.hard_centric_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_centric_accel_limit(double value) {
  _internal_set_hard_centric_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_centric_accel_limit)
}

// optional double hard_speed_limit = 12 [default = 100];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_speed_limit() const {
  return _internal_has_hard_speed_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_speed_limit() {
  _impl_.hard_speed_limit_ = 100;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_speed_limit() const {
  return _impl_.hard_speed_limit_;
}
inline double NaviSpeedDeciderConfig::hard_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
  return _internal_hard_speed_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_speed_limit(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.hard_speed_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_speed_limit(double value) {
  _internal_set_hard_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_speed_limit)
}

// optional double hard_accel_limit = 13 [default = 10];
inline bool NaviSpeedDeciderConfig::_internal_has_hard_accel_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_hard_accel_limit() const {
  return _internal_has_hard_accel_limit();
}
inline void NaviSpeedDeciderConfig::clear_hard_accel_limit() {
  _impl_.hard_accel_limit_ = 10;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double NaviSpeedDeciderConfig::_internal_hard_accel_limit() const {
  return _impl_.hard_accel_limit_;
}
inline double NaviSpeedDeciderConfig::hard_accel_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
  return _internal_hard_accel_limit();
}
inline void NaviSpeedDeciderConfig::_internal_set_hard_accel_limit(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.hard_accel_limit_ = value;
}
inline void NaviSpeedDeciderConfig::set_hard_accel_limit(double value) {
  _internal_set_hard_accel_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.hard_accel_limit)
}

// optional bool enable_safe_path = 14 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_safe_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_safe_path() const {
  return _internal_has_enable_safe_path();
}
inline void NaviSpeedDeciderConfig::clear_enable_safe_path() {
  _impl_.enable_safe_path_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_safe_path() const {
  return _impl_.enable_safe_path_;
}
inline bool NaviSpeedDeciderConfig::enable_safe_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
  return _internal_enable_safe_path();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_safe_path(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enable_safe_path_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_safe_path(bool value) {
  _internal_set_enable_safe_path(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_safe_path)
}

// optional bool enable_planning_start_point = 15 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_planning_start_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_planning_start_point() const {
  return _internal_has_enable_planning_start_point();
}
inline void NaviSpeedDeciderConfig::clear_enable_planning_start_point() {
  _impl_.enable_planning_start_point_ = true;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_planning_start_point() const {
  return _impl_.enable_planning_start_point_;
}
inline bool NaviSpeedDeciderConfig::enable_planning_start_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
  return _internal_enable_planning_start_point();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_planning_start_point(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enable_planning_start_point_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_planning_start_point(bool value) {
  _internal_set_enable_planning_start_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_planning_start_point)
}

// optional bool enable_accel_auto_compensation = 16 [default = true];
inline bool NaviSpeedDeciderConfig::_internal_has_enable_accel_auto_compensation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_enable_accel_auto_compensation() const {
  return _internal_has_enable_accel_auto_compensation();
}
inline void NaviSpeedDeciderConfig::clear_enable_accel_auto_compensation() {
  _impl_.enable_accel_auto_compensation_ = true;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NaviSpeedDeciderConfig::_internal_enable_accel_auto_compensation() const {
  return _impl_.enable_accel_auto_compensation_;
}
inline bool NaviSpeedDeciderConfig::enable_accel_auto_compensation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
  return _internal_enable_accel_auto_compensation();
}
inline void NaviSpeedDeciderConfig::_internal_set_enable_accel_auto_compensation(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.enable_accel_auto_compensation_ = value;
}
inline void NaviSpeedDeciderConfig::set_enable_accel_auto_compensation(bool value) {
  _internal_set_enable_accel_auto_compensation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.enable_accel_auto_compensation)
}

// optional double kappa_preview = 17 [default = 0];
inline bool NaviSpeedDeciderConfig::_internal_has_kappa_preview() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_kappa_preview() const {
  return _internal_has_kappa_preview();
}
inline void NaviSpeedDeciderConfig::clear_kappa_preview() {
  _impl_.kappa_preview_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double NaviSpeedDeciderConfig::_internal_kappa_preview() const {
  return _impl_.kappa_preview_;
}
inline double NaviSpeedDeciderConfig::kappa_preview() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
  return _internal_kappa_preview();
}
inline void NaviSpeedDeciderConfig::_internal_set_kappa_preview(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.kappa_preview_ = value;
}
inline void NaviSpeedDeciderConfig::set_kappa_preview(double value) {
  _internal_set_kappa_preview(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_preview)
}

// optional double kappa_threshold = 18 [default = 0];
inline bool NaviSpeedDeciderConfig::_internal_has_kappa_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NaviSpeedDeciderConfig::has_kappa_threshold() const {
  return _internal_has_kappa_threshold();
}
inline void NaviSpeedDeciderConfig::clear_kappa_threshold() {
  _impl_.kappa_threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NaviSpeedDeciderConfig::_internal_kappa_threshold() const {
  return _impl_.kappa_threshold_;
}
inline double NaviSpeedDeciderConfig::kappa_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
  return _internal_kappa_threshold();
}
inline void NaviSpeedDeciderConfig::_internal_set_kappa_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kappa_threshold_ = value;
}
inline void NaviSpeedDeciderConfig::set_kappa_threshold(double value) {
  _internal_set_kappa_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviSpeedDeciderConfig.kappa_threshold)
}

// -------------------------------------------------------------------

// PathAssessmentDeciderConfig

// -------------------------------------------------------------------

// PathBoundsDeciderConfig

// optional bool is_lane_borrowing = 1;
inline bool PathBoundsDeciderConfig::_internal_has_is_lane_borrowing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_is_lane_borrowing() const {
  return _internal_has_is_lane_borrowing();
}
inline void PathBoundsDeciderConfig::clear_is_lane_borrowing() {
  _impl_.is_lane_borrowing_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PathBoundsDeciderConfig::_internal_is_lane_borrowing() const {
  return _impl_.is_lane_borrowing_;
}
inline bool PathBoundsDeciderConfig::is_lane_borrowing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_lane_borrowing)
  return _internal_is_lane_borrowing();
}
inline void PathBoundsDeciderConfig::_internal_set_is_lane_borrowing(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_lane_borrowing_ = value;
}
inline void PathBoundsDeciderConfig::set_is_lane_borrowing(bool value) {
  _internal_set_is_lane_borrowing(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_lane_borrowing)
}

// optional bool is_pull_over = 2;
inline bool PathBoundsDeciderConfig::_internal_has_is_pull_over() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_is_pull_over() const {
  return _internal_has_is_pull_over();
}
inline void PathBoundsDeciderConfig::clear_is_pull_over() {
  _impl_.is_pull_over_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool PathBoundsDeciderConfig::_internal_is_pull_over() const {
  return _impl_.is_pull_over_;
}
inline bool PathBoundsDeciderConfig::is_pull_over() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_pull_over)
  return _internal_is_pull_over();
}
inline void PathBoundsDeciderConfig::_internal_set_is_pull_over(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_pull_over_ = value;
}
inline void PathBoundsDeciderConfig::set_is_pull_over(bool value) {
  _internal_set_is_pull_over(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_pull_over)
}

// optional double pull_over_destination_to_adc_buffer = 3 [default = 25];
inline bool PathBoundsDeciderConfig::_internal_has_pull_over_destination_to_adc_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_pull_over_destination_to_adc_buffer() const {
  return _internal_has_pull_over_destination_to_adc_buffer();
}
inline void PathBoundsDeciderConfig::clear_pull_over_destination_to_adc_buffer() {
  _impl_.pull_over_destination_to_adc_buffer_ = 25;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PathBoundsDeciderConfig::_internal_pull_over_destination_to_adc_buffer() const {
  return _impl_.pull_over_destination_to_adc_buffer_;
}
inline double PathBoundsDeciderConfig::pull_over_destination_to_adc_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
  return _internal_pull_over_destination_to_adc_buffer();
}
inline void PathBoundsDeciderConfig::_internal_set_pull_over_destination_to_adc_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pull_over_destination_to_adc_buffer_ = value;
}
inline void PathBoundsDeciderConfig::set_pull_over_destination_to_adc_buffer(double value) {
  _internal_set_pull_over_destination_to_adc_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_adc_buffer)
}

// optional double pull_over_destination_to_pathend_buffer = 4 [default = 10];
inline bool PathBoundsDeciderConfig::_internal_has_pull_over_destination_to_pathend_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_pull_over_destination_to_pathend_buffer() const {
  return _internal_has_pull_over_destination_to_pathend_buffer();
}
inline void PathBoundsDeciderConfig::clear_pull_over_destination_to_pathend_buffer() {
  _impl_.pull_over_destination_to_pathend_buffer_ = 10;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PathBoundsDeciderConfig::_internal_pull_over_destination_to_pathend_buffer() const {
  return _impl_.pull_over_destination_to_pathend_buffer_;
}
inline double PathBoundsDeciderConfig::pull_over_destination_to_pathend_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
  return _internal_pull_over_destination_to_pathend_buffer();
}
inline void PathBoundsDeciderConfig::_internal_set_pull_over_destination_to_pathend_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pull_over_destination_to_pathend_buffer_ = value;
}
inline void PathBoundsDeciderConfig::set_pull_over_destination_to_pathend_buffer(double value) {
  _internal_set_pull_over_destination_to_pathend_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_destination_to_pathend_buffer)
}

// optional double pull_over_road_edge_buffer = 5 [default = 0.15];
inline bool PathBoundsDeciderConfig::_internal_has_pull_over_road_edge_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_pull_over_road_edge_buffer() const {
  return _internal_has_pull_over_road_edge_buffer();
}
inline void PathBoundsDeciderConfig::clear_pull_over_road_edge_buffer() {
  _impl_.pull_over_road_edge_buffer_ = 0.15;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PathBoundsDeciderConfig::_internal_pull_over_road_edge_buffer() const {
  return _impl_.pull_over_road_edge_buffer_;
}
inline double PathBoundsDeciderConfig::pull_over_road_edge_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
  return _internal_pull_over_road_edge_buffer();
}
inline void PathBoundsDeciderConfig::_internal_set_pull_over_road_edge_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.pull_over_road_edge_buffer_ = value;
}
inline void PathBoundsDeciderConfig::set_pull_over_road_edge_buffer(double value) {
  _internal_set_pull_over_road_edge_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_road_edge_buffer)
}

// optional double pull_over_approach_lon_distance_adjust_factor = 6 [default = 1.5];
inline bool PathBoundsDeciderConfig::_internal_has_pull_over_approach_lon_distance_adjust_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_pull_over_approach_lon_distance_adjust_factor() const {
  return _internal_has_pull_over_approach_lon_distance_adjust_factor();
}
inline void PathBoundsDeciderConfig::clear_pull_over_approach_lon_distance_adjust_factor() {
  _impl_.pull_over_approach_lon_distance_adjust_factor_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PathBoundsDeciderConfig::_internal_pull_over_approach_lon_distance_adjust_factor() const {
  return _impl_.pull_over_approach_lon_distance_adjust_factor_;
}
inline double PathBoundsDeciderConfig::pull_over_approach_lon_distance_adjust_factor() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
  return _internal_pull_over_approach_lon_distance_adjust_factor();
}
inline void PathBoundsDeciderConfig::_internal_set_pull_over_approach_lon_distance_adjust_factor(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.pull_over_approach_lon_distance_adjust_factor_ = value;
}
inline void PathBoundsDeciderConfig::set_pull_over_approach_lon_distance_adjust_factor(double value) {
  _internal_set_pull_over_approach_lon_distance_adjust_factor(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.pull_over_approach_lon_distance_adjust_factor)
}

// optional double adc_buffer_coeff = 7 [default = 1];
inline bool PathBoundsDeciderConfig::_internal_has_adc_buffer_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_adc_buffer_coeff() const {
  return _internal_has_adc_buffer_coeff();
}
inline void PathBoundsDeciderConfig::clear_adc_buffer_coeff() {
  _impl_.adc_buffer_coeff_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PathBoundsDeciderConfig::_internal_adc_buffer_coeff() const {
  return _impl_.adc_buffer_coeff_;
}
inline double PathBoundsDeciderConfig::adc_buffer_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.adc_buffer_coeff)
  return _internal_adc_buffer_coeff();
}
inline void PathBoundsDeciderConfig::_internal_set_adc_buffer_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.adc_buffer_coeff_ = value;
}
inline void PathBoundsDeciderConfig::set_adc_buffer_coeff(double value) {
  _internal_set_adc_buffer_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.adc_buffer_coeff)
}

// optional bool is_extend_lane_bounds_to_include_adc = 8 [default = true];
inline bool PathBoundsDeciderConfig::_internal_has_is_extend_lane_bounds_to_include_adc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PathBoundsDeciderConfig::has_is_extend_lane_bounds_to_include_adc() const {
  return _internal_has_is_extend_lane_bounds_to_include_adc();
}
inline void PathBoundsDeciderConfig::clear_is_extend_lane_bounds_to_include_adc() {
  _impl_.is_extend_lane_bounds_to_include_adc_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PathBoundsDeciderConfig::_internal_is_extend_lane_bounds_to_include_adc() const {
  return _impl_.is_extend_lane_bounds_to_include_adc_;
}
inline bool PathBoundsDeciderConfig::is_extend_lane_bounds_to_include_adc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathBoundsDeciderConfig.is_extend_lane_bounds_to_include_adc)
  return _internal_is_extend_lane_bounds_to_include_adc();
}
inline void PathBoundsDeciderConfig::_internal_set_is_extend_lane_bounds_to_include_adc(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_extend_lane_bounds_to_include_adc_ = value;
}
inline void PathBoundsDeciderConfig::set_is_extend_lane_bounds_to_include_adc(bool value) {
  _internal_set_is_extend_lane_bounds_to_include_adc(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathBoundsDeciderConfig.is_extend_lane_bounds_to_include_adc)
}

// -------------------------------------------------------------------

// PathDeciderConfig

// optional double static_obstacle_buffer = 1 [default = 0.3];
inline bool PathDeciderConfig::_internal_has_static_obstacle_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathDeciderConfig::has_static_obstacle_buffer() const {
  return _internal_has_static_obstacle_buffer();
}
inline void PathDeciderConfig::clear_static_obstacle_buffer() {
  _impl_.static_obstacle_buffer_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PathDeciderConfig::_internal_static_obstacle_buffer() const {
  return _impl_.static_obstacle_buffer_;
}
inline double PathDeciderConfig::static_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathDeciderConfig.static_obstacle_buffer)
  return _internal_static_obstacle_buffer();
}
inline void PathDeciderConfig::_internal_set_static_obstacle_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.static_obstacle_buffer_ = value;
}
inline void PathDeciderConfig::set_static_obstacle_buffer(double value) {
  _internal_set_static_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathDeciderConfig.static_obstacle_buffer)
}

// -------------------------------------------------------------------

// PathLaneBorrowDeciderConfig

// optional bool allow_lane_borrowing = 1;
inline bool PathLaneBorrowDeciderConfig::_internal_has_allow_lane_borrowing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathLaneBorrowDeciderConfig::has_allow_lane_borrowing() const {
  return _internal_has_allow_lane_borrowing();
}
inline void PathLaneBorrowDeciderConfig::clear_allow_lane_borrowing() {
  _impl_.allow_lane_borrowing_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PathLaneBorrowDeciderConfig::_internal_allow_lane_borrowing() const {
  return _impl_.allow_lane_borrowing_;
}
inline bool PathLaneBorrowDeciderConfig::allow_lane_borrowing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathLaneBorrowDeciderConfig.allow_lane_borrowing)
  return _internal_allow_lane_borrowing();
}
inline void PathLaneBorrowDeciderConfig::_internal_set_allow_lane_borrowing(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.allow_lane_borrowing_ = value;
}
inline void PathLaneBorrowDeciderConfig::set_allow_lane_borrowing(bool value) {
  _internal_set_allow_lane_borrowing(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathLaneBorrowDeciderConfig.allow_lane_borrowing)
}

// -------------------------------------------------------------------

// PathReferenceDeciderConfig

// optional uint32 min_path_reference_length = 1 [default = 20];
inline bool PathReferenceDeciderConfig::_internal_has_min_path_reference_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PathReferenceDeciderConfig::has_min_path_reference_length() const {
  return _internal_has_min_path_reference_length();
}
inline void PathReferenceDeciderConfig::clear_min_path_reference_length() {
  _impl_.min_path_reference_length_ = 20u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PathReferenceDeciderConfig::_internal_min_path_reference_length() const {
  return _impl_.min_path_reference_length_;
}
inline uint32_t PathReferenceDeciderConfig::min_path_reference_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReferenceDeciderConfig.min_path_reference_length)
  return _internal_min_path_reference_length();
}
inline void PathReferenceDeciderConfig::_internal_set_min_path_reference_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_path_reference_length_ = value;
}
inline void PathReferenceDeciderConfig::set_min_path_reference_length(uint32_t value) {
  _internal_set_min_path_reference_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathReferenceDeciderConfig.min_path_reference_length)
}

// optional double weight_x_ref_path_reference = 2;
inline bool PathReferenceDeciderConfig::_internal_has_weight_x_ref_path_reference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathReferenceDeciderConfig::has_weight_x_ref_path_reference() const {
  return _internal_has_weight_x_ref_path_reference();
}
inline void PathReferenceDeciderConfig::clear_weight_x_ref_path_reference() {
  _impl_.weight_x_ref_path_reference_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PathReferenceDeciderConfig::_internal_weight_x_ref_path_reference() const {
  return _impl_.weight_x_ref_path_reference_;
}
inline double PathReferenceDeciderConfig::weight_x_ref_path_reference() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReferenceDeciderConfig.weight_x_ref_path_reference)
  return _internal_weight_x_ref_path_reference();
}
inline void PathReferenceDeciderConfig::_internal_set_weight_x_ref_path_reference(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.weight_x_ref_path_reference_ = value;
}
inline void PathReferenceDeciderConfig::set_weight_x_ref_path_reference(double value) {
  _internal_set_weight_x_ref_path_reference(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathReferenceDeciderConfig.weight_x_ref_path_reference)
}

// -------------------------------------------------------------------

// PathReuseDeciderConfig

// optional bool reuse_path = 1;
inline bool PathReuseDeciderConfig::_internal_has_reuse_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PathReuseDeciderConfig::has_reuse_path() const {
  return _internal_has_reuse_path();
}
inline void PathReuseDeciderConfig::clear_reuse_path() {
  _impl_.reuse_path_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PathReuseDeciderConfig::_internal_reuse_path() const {
  return _impl_.reuse_path_;
}
inline bool PathReuseDeciderConfig::reuse_path() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PathReuseDeciderConfig.reuse_path)
  return _internal_reuse_path();
}
inline void PathReuseDeciderConfig::_internal_set_reuse_path(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reuse_path_ = value;
}
inline void PathReuseDeciderConfig::set_reuse_path(bool value) {
  _internal_set_reuse_path(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PathReuseDeciderConfig.reuse_path)
}

// -------------------------------------------------------------------

// PiecewiseJerkNonlinearSpeedOptimizerConfig

// optional double acc_weight = 1 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_acc_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_acc_weight() const {
  return _internal_has_acc_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_acc_weight() {
  _impl_.acc_weight_ = 500;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_acc_weight() const {
  return _impl_.acc_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.acc_weight)
  return _internal_acc_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_acc_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acc_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_acc_weight(double value) {
  _internal_set_acc_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 100];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_jerk_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_jerk_weight() {
  _impl_.jerk_weight_ = 100;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_jerk_weight() const {
  return _impl_.jerk_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.jerk_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.jerk_weight)
}

// optional double lat_acc_weight = 3 [default = 500];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_lat_acc_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_lat_acc_weight() const {
  return _internal_has_lat_acc_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_lat_acc_weight() {
  _impl_.lat_acc_weight_ = 500;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_lat_acc_weight() const {
  return _impl_.lat_acc_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::lat_acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.lat_acc_weight)
  return _internal_lat_acc_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_lat_acc_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lat_acc_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_lat_acc_weight(double value) {
  _internal_set_lat_acc_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.lat_acc_weight)
}

// optional double s_potential_weight = 4 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_s_potential_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_s_potential_weight() const {
  return _internal_has_s_potential_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_s_potential_weight() {
  _impl_.s_potential_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_s_potential_weight() const {
  return _impl_.s_potential_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::s_potential_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.s_potential_weight)
  return _internal_s_potential_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_s_potential_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.s_potential_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_s_potential_weight(double value) {
  _internal_set_s_potential_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.s_potential_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_ref_v_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_ref_v_weight() const {
  return _internal_has_ref_v_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_ref_v_weight() {
  _impl_.ref_v_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_ref_v_weight() const {
  return _impl_.ref_v_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_v_weight)
  return _internal_ref_v_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_ref_v_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ref_v_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_ref_v_weight(double value) {
  _internal_set_ref_v_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_v_weight)
}

// optional double ref_s_weight = 6 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_ref_s_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_ref_s_weight() const {
  return _internal_has_ref_s_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_ref_s_weight() {
  _impl_.ref_s_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_ref_s_weight() const {
  return _impl_.ref_s_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_s_weight)
  return _internal_ref_s_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_ref_s_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ref_s_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_ref_s_weight(double value) {
  _internal_set_ref_s_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.ref_s_weight)
}

// optional double end_s_weight = 7 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_end_s_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_s_weight() const {
  return _internal_has_end_s_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_s_weight() {
  _impl_.end_s_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_end_s_weight() const {
  return _impl_.end_s_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_s_weight)
  return _internal_end_s_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_end_s_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.end_s_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_s_weight(double value) {
  _internal_set_end_s_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_s_weight)
}

// optional double end_v_weight = 8 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_end_v_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_v_weight() const {
  return _internal_has_end_v_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_v_weight() {
  _impl_.end_v_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_end_v_weight() const {
  return _impl_.end_v_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_v_weight)
  return _internal_end_v_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_end_v_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.end_v_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_v_weight(double value) {
  _internal_set_end_v_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_v_weight)
}

// optional double end_a_weight = 9 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_end_a_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_end_a_weight() const {
  return _internal_has_end_a_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_end_a_weight() {
  _impl_.end_a_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_end_a_weight() const {
  return _impl_.end_a_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::end_a_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_a_weight)
  return _internal_end_a_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_end_a_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.end_a_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_end_a_weight(double value) {
  _internal_set_end_a_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.end_a_weight)
}

// optional double soft_s_bound_weight = 10 [default = 10];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_soft_s_bound_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_soft_s_bound_weight() const {
  return _internal_has_soft_s_bound_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_soft_s_bound_weight() {
  _impl_.soft_s_bound_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_soft_s_bound_weight() const {
  return _impl_.soft_s_bound_weight_;
}
inline double PiecewiseJerkNonlinearSpeedOptimizerConfig::soft_s_bound_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.soft_s_bound_weight)
  return _internal_soft_s_bound_weight();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_soft_s_bound_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.soft_s_bound_weight_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_soft_s_bound_weight(double value) {
  _internal_set_soft_s_bound_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.soft_s_bound_weight)
}

// optional bool use_warm_start = 100 [default = true];
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_has_use_warm_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::has_use_warm_start() const {
  return _internal_has_use_warm_start();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::clear_use_warm_start() {
  _impl_.use_warm_start_ = true;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_use_warm_start() const {
  return _impl_.use_warm_start_;
}
inline bool PiecewiseJerkNonlinearSpeedOptimizerConfig::use_warm_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.use_warm_start)
  return _internal_use_warm_start();
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::_internal_set_use_warm_start(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.use_warm_start_ = value;
}
inline void PiecewiseJerkNonlinearSpeedOptimizerConfig::set_use_warm_start(bool value) {
  _internal_set_use_warm_start(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig.use_warm_start)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathOptimizerConfig

// optional .apollo.planning.PiecewiseJerkPathWeights default_path_config = 1;
inline bool PiecewiseJerkPathOptimizerConfig::_internal_has_default_path_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_path_config_ != nullptr);
  return value;
}
inline bool PiecewiseJerkPathOptimizerConfig::has_default_path_config() const {
  return _internal_has_default_path_config();
}
inline void PiecewiseJerkPathOptimizerConfig::clear_default_path_config() {
  if (_impl_.default_path_config_ != nullptr) _impl_.default_path_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::_internal_default_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = _impl_.default_path_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights&>(
      ::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::default_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  return _internal_default_path_config();
}
inline void PiecewiseJerkPathOptimizerConfig::unsafe_arena_set_allocated_default_path_config(
    ::apollo::planning::PiecewiseJerkPathWeights* default_path_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_path_config_);
  }
  _impl_.default_path_config_ = default_path_config;
  if (default_path_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::release_default_path_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = _impl_.default_path_config_;
  _impl_.default_path_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::unsafe_arena_release_default_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = _impl_.default_path_config_;
  _impl_.default_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::_internal_mutable_default_path_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaForAllocation());
    _impl_.default_path_config_ = p;
  }
  return _impl_.default_path_config_;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::mutable_default_path_config() {
  ::apollo::planning::PiecewiseJerkPathWeights* _msg = _internal_mutable_default_path_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
  return _msg;
}
inline void PiecewiseJerkPathOptimizerConfig::set_allocated_default_path_config(::apollo::planning::PiecewiseJerkPathWeights* default_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_path_config_;
  }
  if (default_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_path_config);
    if (message_arena != submessage_arena) {
      default_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_path_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_path_config_ = default_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.default_path_config)
}

// optional .apollo.planning.PiecewiseJerkPathWeights lane_change_path_config = 2;
inline bool PiecewiseJerkPathOptimizerConfig::_internal_has_lane_change_path_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_change_path_config_ != nullptr);
  return value;
}
inline bool PiecewiseJerkPathOptimizerConfig::has_lane_change_path_config() const {
  return _internal_has_lane_change_path_config();
}
inline void PiecewiseJerkPathOptimizerConfig::clear_lane_change_path_config() {
  if (_impl_.lane_change_path_config_ != nullptr) _impl_.lane_change_path_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::_internal_lane_change_path_config() const {
  const ::apollo::planning::PiecewiseJerkPathWeights* p = _impl_.lane_change_path_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PiecewiseJerkPathWeights&>(
      ::apollo::planning::_PiecewiseJerkPathWeights_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkPathWeights& PiecewiseJerkPathOptimizerConfig::lane_change_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  return _internal_lane_change_path_config();
}
inline void PiecewiseJerkPathOptimizerConfig::unsafe_arena_set_allocated_lane_change_path_config(
    ::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_change_path_config_);
  }
  _impl_.lane_change_path_config_ = lane_change_path_config;
  if (lane_change_path_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::release_lane_change_path_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = _impl_.lane_change_path_config_;
  _impl_.lane_change_path_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::unsafe_arena_release_lane_change_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::PiecewiseJerkPathWeights* temp = _impl_.lane_change_path_config_;
  _impl_.lane_change_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::_internal_mutable_lane_change_path_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lane_change_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PiecewiseJerkPathWeights>(GetArenaForAllocation());
    _impl_.lane_change_path_config_ = p;
  }
  return _impl_.lane_change_path_config_;
}
inline ::apollo::planning::PiecewiseJerkPathWeights* PiecewiseJerkPathOptimizerConfig::mutable_lane_change_path_config() {
  ::apollo::planning::PiecewiseJerkPathWeights* _msg = _internal_mutable_lane_change_path_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
  return _msg;
}
inline void PiecewiseJerkPathOptimizerConfig::set_allocated_lane_change_path_config(::apollo::planning::PiecewiseJerkPathWeights* lane_change_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_change_path_config_;
  }
  if (lane_change_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_change_path_config);
    if (message_arena != submessage_arena) {
      lane_change_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_path_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lane_change_path_config_ = lane_change_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PiecewiseJerkPathOptimizerConfig.lane_change_path_config)
}

// optional double path_reference_l_weight = 3 [default = 0];
inline bool PiecewiseJerkPathOptimizerConfig::_internal_has_path_reference_l_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiecewiseJerkPathOptimizerConfig::has_path_reference_l_weight() const {
  return _internal_has_path_reference_l_weight();
}
inline void PiecewiseJerkPathOptimizerConfig::clear_path_reference_l_weight() {
  _impl_.path_reference_l_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PiecewiseJerkPathOptimizerConfig::_internal_path_reference_l_weight() const {
  return _impl_.path_reference_l_weight_;
}
inline double PiecewiseJerkPathOptimizerConfig::path_reference_l_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathOptimizerConfig.path_reference_l_weight)
  return _internal_path_reference_l_weight();
}
inline void PiecewiseJerkPathOptimizerConfig::_internal_set_path_reference_l_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.path_reference_l_weight_ = value;
}
inline void PiecewiseJerkPathOptimizerConfig::set_path_reference_l_weight(double value) {
  _internal_set_path_reference_l_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathOptimizerConfig.path_reference_l_weight)
}

// -------------------------------------------------------------------

// PiecewiseJerkPathWeights

// optional double l_weight = 1 [default = 1];
inline bool PiecewiseJerkPathWeights::_internal_has_l_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_l_weight() const {
  return _internal_has_l_weight();
}
inline void PiecewiseJerkPathWeights::clear_l_weight() {
  _impl_.l_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PiecewiseJerkPathWeights::_internal_l_weight() const {
  return _impl_.l_weight_;
}
inline double PiecewiseJerkPathWeights::l_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.l_weight)
  return _internal_l_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_l_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.l_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_l_weight(double value) {
  _internal_set_l_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.l_weight)
}

// optional double dl_weight = 2 [default = 100];
inline bool PiecewiseJerkPathWeights::_internal_has_dl_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_dl_weight() const {
  return _internal_has_dl_weight();
}
inline void PiecewiseJerkPathWeights::clear_dl_weight() {
  _impl_.dl_weight_ = 100;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PiecewiseJerkPathWeights::_internal_dl_weight() const {
  return _impl_.dl_weight_;
}
inline double PiecewiseJerkPathWeights::dl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
  return _internal_dl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_dl_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_dl_weight(double value) {
  _internal_set_dl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dl_weight)
}

// optional double ddl_weight = 3 [default = 1000];
inline bool PiecewiseJerkPathWeights::_internal_has_ddl_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_ddl_weight() const {
  return _internal_has_ddl_weight();
}
inline void PiecewiseJerkPathWeights::clear_ddl_weight() {
  _impl_.ddl_weight_ = 1000;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PiecewiseJerkPathWeights::_internal_ddl_weight() const {
  return _impl_.ddl_weight_;
}
inline double PiecewiseJerkPathWeights::ddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
  return _internal_ddl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_ddl_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ddl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_ddl_weight(double value) {
  _internal_set_ddl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.ddl_weight)
}

// optional double dddl_weight = 4 [default = 10000];
inline bool PiecewiseJerkPathWeights::_internal_has_dddl_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiecewiseJerkPathWeights::has_dddl_weight() const {
  return _internal_has_dddl_weight();
}
inline void PiecewiseJerkPathWeights::clear_dddl_weight() {
  _impl_.dddl_weight_ = 10000;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PiecewiseJerkPathWeights::_internal_dddl_weight() const {
  return _impl_.dddl_weight_;
}
inline double PiecewiseJerkPathWeights::dddl_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
  return _internal_dddl_weight();
}
inline void PiecewiseJerkPathWeights::_internal_set_dddl_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dddl_weight_ = value;
}
inline void PiecewiseJerkPathWeights::set_dddl_weight(double value) {
  _internal_set_dddl_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkPathWeights.dddl_weight)
}

// -------------------------------------------------------------------

// PiecewiseJerkSpeedOptimizerConfig

// optional double acc_weight = 1 [default = 1];
inline bool PiecewiseJerkSpeedOptimizerConfig::_internal_has_acc_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PiecewiseJerkSpeedOptimizerConfig::has_acc_weight() const {
  return _internal_has_acc_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_acc_weight() {
  _impl_.acc_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_acc_weight() const {
  return _impl_.acc_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
  return _internal_acc_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_acc_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.acc_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_acc_weight(double value) {
  _internal_set_acc_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
}

// optional double jerk_weight = 2 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::_internal_has_jerk_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PiecewiseJerkSpeedOptimizerConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_jerk_weight() {
  _impl_.jerk_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_jerk_weight() const {
  return _impl_.jerk_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.jerk_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
}

// optional double kappa_penalty_weight = 3 [default = 1000];
inline bool PiecewiseJerkSpeedOptimizerConfig::_internal_has_kappa_penalty_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PiecewiseJerkSpeedOptimizerConfig::has_kappa_penalty_weight() const {
  return _internal_has_kappa_penalty_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_kappa_penalty_weight() {
  _impl_.kappa_penalty_weight_ = 1000;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_kappa_penalty_weight() const {
  return _impl_.kappa_penalty_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
  return _internal_kappa_penalty_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_kappa_penalty_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.kappa_penalty_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_kappa_penalty_weight(double value) {
  _internal_set_kappa_penalty_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
}

// optional double ref_s_weight = 4 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::_internal_has_ref_s_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_s_weight() const {
  return _internal_has_ref_s_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_s_weight() {
  _impl_.ref_s_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_ref_s_weight() const {
  return _impl_.ref_s_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
  return _internal_ref_s_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_ref_s_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ref_s_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_s_weight(double value) {
  _internal_set_ref_s_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
}

// optional double ref_v_weight = 5 [default = 10];
inline bool PiecewiseJerkSpeedOptimizerConfig::_internal_has_ref_v_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PiecewiseJerkSpeedOptimizerConfig::has_ref_v_weight() const {
  return _internal_has_ref_v_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_v_weight() {
  _impl_.ref_v_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_ref_v_weight() const {
  return _impl_.ref_v_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
  return _internal_ref_v_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_ref_v_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ref_v_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_v_weight(double value) {
  _internal_set_ref_v_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
}

// -------------------------------------------------------------------

// RuleBasedStopDeciderConfig

// optional double max_adc_stop_speed = 1 [default = 0.3];
inline bool RuleBasedStopDeciderConfig::_internal_has_max_adc_stop_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_max_adc_stop_speed() const {
  return _internal_has_max_adc_stop_speed();
}
inline void RuleBasedStopDeciderConfig::clear_max_adc_stop_speed() {
  _impl_.max_adc_stop_speed_ = 0.3;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double RuleBasedStopDeciderConfig::_internal_max_adc_stop_speed() const {
  return _impl_.max_adc_stop_speed_;
}
inline double RuleBasedStopDeciderConfig::max_adc_stop_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
  return _internal_max_adc_stop_speed();
}
inline void RuleBasedStopDeciderConfig::_internal_set_max_adc_stop_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_adc_stop_speed_ = value;
}
inline void RuleBasedStopDeciderConfig::set_max_adc_stop_speed(double value) {
  _internal_set_max_adc_stop_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_adc_stop_speed)
}

// optional double max_valid_stop_distance = 2 [default = 0.5];
inline bool RuleBasedStopDeciderConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void RuleBasedStopDeciderConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double RuleBasedStopDeciderConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double RuleBasedStopDeciderConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void RuleBasedStopDeciderConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void RuleBasedStopDeciderConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.max_valid_stop_distance)
}

// optional double search_beam_length = 3 [default = 5];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_beam_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_beam_length() const {
  return _internal_has_search_beam_length();
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_length() {
  _impl_.search_beam_length_ = 5;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_beam_length() const {
  return _impl_.search_beam_length_;
}
inline double RuleBasedStopDeciderConfig::search_beam_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
  return _internal_search_beam_length();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_beam_length(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.search_beam_length_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_length(double value) {
  _internal_set_search_beam_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_length)
}

// optional double search_beam_radius_intensity = 4 [default = 0.08];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_beam_radius_intensity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_beam_radius_intensity() const {
  return _internal_has_search_beam_radius_intensity();
}
inline void RuleBasedStopDeciderConfig::clear_search_beam_radius_intensity() {
  _impl_.search_beam_radius_intensity_ = 0.08;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_beam_radius_intensity() const {
  return _impl_.search_beam_radius_intensity_;
}
inline double RuleBasedStopDeciderConfig::search_beam_radius_intensity() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
  return _internal_search_beam_radius_intensity();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_beam_radius_intensity(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.search_beam_radius_intensity_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_beam_radius_intensity(double value) {
  _internal_set_search_beam_radius_intensity(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_beam_radius_intensity)
}

// optional double search_range = 5 [default = 3.14];
inline bool RuleBasedStopDeciderConfig::_internal_has_search_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_search_range() const {
  return _internal_has_search_range();
}
inline void RuleBasedStopDeciderConfig::clear_search_range() {
  _impl_.search_range_ = 3.14;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double RuleBasedStopDeciderConfig::_internal_search_range() const {
  return _impl_.search_range_;
}
inline double RuleBasedStopDeciderConfig::search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.search_range)
  return _internal_search_range();
}
inline void RuleBasedStopDeciderConfig::_internal_set_search_range(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.search_range_ = value;
}
inline void RuleBasedStopDeciderConfig::set_search_range(double value) {
  _internal_set_search_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.search_range)
}

// optional double is_block_angle_threshold = 6 [default = 1.57];
inline bool RuleBasedStopDeciderConfig::_internal_has_is_block_angle_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_is_block_angle_threshold() const {
  return _internal_has_is_block_angle_threshold();
}
inline void RuleBasedStopDeciderConfig::clear_is_block_angle_threshold() {
  _impl_.is_block_angle_threshold_ = 1.57;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double RuleBasedStopDeciderConfig::_internal_is_block_angle_threshold() const {
  return _impl_.is_block_angle_threshold_;
}
inline double RuleBasedStopDeciderConfig::is_block_angle_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
  return _internal_is_block_angle_threshold();
}
inline void RuleBasedStopDeciderConfig::_internal_set_is_block_angle_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.is_block_angle_threshold_ = value;
}
inline void RuleBasedStopDeciderConfig::set_is_block_angle_threshold(double value) {
  _internal_set_is_block_angle_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.is_block_angle_threshold)
}

// optional double approach_distance_for_lane_change = 10 [default = 80];
inline bool RuleBasedStopDeciderConfig::_internal_has_approach_distance_for_lane_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_approach_distance_for_lane_change() const {
  return _internal_has_approach_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::clear_approach_distance_for_lane_change() {
  _impl_.approach_distance_for_lane_change_ = 80;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double RuleBasedStopDeciderConfig::_internal_approach_distance_for_lane_change() const {
  return _impl_.approach_distance_for_lane_change_;
}
inline double RuleBasedStopDeciderConfig::approach_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
  return _internal_approach_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::_internal_set_approach_distance_for_lane_change(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.approach_distance_for_lane_change_ = value;
}
inline void RuleBasedStopDeciderConfig::set_approach_distance_for_lane_change(double value) {
  _internal_set_approach_distance_for_lane_change(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.approach_distance_for_lane_change)
}

// optional double urgent_distance_for_lane_change = 11 [default = 50];
inline bool RuleBasedStopDeciderConfig::_internal_has_urgent_distance_for_lane_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RuleBasedStopDeciderConfig::has_urgent_distance_for_lane_change() const {
  return _internal_has_urgent_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::clear_urgent_distance_for_lane_change() {
  _impl_.urgent_distance_for_lane_change_ = 50;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double RuleBasedStopDeciderConfig::_internal_urgent_distance_for_lane_change() const {
  return _impl_.urgent_distance_for_lane_change_;
}
inline double RuleBasedStopDeciderConfig::urgent_distance_for_lane_change() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
  return _internal_urgent_distance_for_lane_change();
}
inline void RuleBasedStopDeciderConfig::_internal_set_urgent_distance_for_lane_change(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.urgent_distance_for_lane_change_ = value;
}
inline void RuleBasedStopDeciderConfig::set_urgent_distance_for_lane_change(double value) {
  _internal_set_urgent_distance_for_lane_change(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RuleBasedStopDeciderConfig.urgent_distance_for_lane_change)
}

// -------------------------------------------------------------------

// SpeedBoundsDeciderConfig

// optional double total_time = 1 [default = 7];
inline bool SpeedBoundsDeciderConfig::_internal_has_total_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_total_time() const {
  return _internal_has_total_time();
}
inline void SpeedBoundsDeciderConfig::clear_total_time() {
  _impl_.total_time_ = 7;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SpeedBoundsDeciderConfig::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double SpeedBoundsDeciderConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.total_time)
  return _internal_total_time();
}
inline void SpeedBoundsDeciderConfig::_internal_set_total_time(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_time_ = value;
}
inline void SpeedBoundsDeciderConfig::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.total_time)
}

// optional double boundary_buffer = 2 [default = 0.1];
inline bool SpeedBoundsDeciderConfig::_internal_has_boundary_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_boundary_buffer() const {
  return _internal_has_boundary_buffer();
}
inline void SpeedBoundsDeciderConfig::clear_boundary_buffer() {
  _impl_.boundary_buffer_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SpeedBoundsDeciderConfig::_internal_boundary_buffer() const {
  return _impl_.boundary_buffer_;
}
inline double SpeedBoundsDeciderConfig::boundary_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
  return _internal_boundary_buffer();
}
inline void SpeedBoundsDeciderConfig::_internal_set_boundary_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.boundary_buffer_ = value;
}
inline void SpeedBoundsDeciderConfig::set_boundary_buffer(double value) {
  _internal_set_boundary_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.boundary_buffer)
}

// optional double max_centric_acceleration_limit = 3 [default = 2];
inline bool SpeedBoundsDeciderConfig::_internal_has_max_centric_acceleration_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_max_centric_acceleration_limit() const {
  return _internal_has_max_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::clear_max_centric_acceleration_limit() {
  _impl_.max_centric_acceleration_limit_ = 2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SpeedBoundsDeciderConfig::_internal_max_centric_acceleration_limit() const {
  return _impl_.max_centric_acceleration_limit_;
}
inline double SpeedBoundsDeciderConfig::max_centric_acceleration_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.max_centric_acceleration_limit)
  return _internal_max_centric_acceleration_limit();
}
inline void SpeedBoundsDeciderConfig::_internal_set_max_centric_acceleration_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_centric_acceleration_limit_ = value;
}
inline void SpeedBoundsDeciderConfig::set_max_centric_acceleration_limit(double value) {
  _internal_set_max_centric_acceleration_limit(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.max_centric_acceleration_limit)
}

// optional double minimal_kappa = 4 [default = 1e-05];
inline bool SpeedBoundsDeciderConfig::_internal_has_minimal_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_minimal_kappa() const {
  return _internal_has_minimal_kappa();
}
inline void SpeedBoundsDeciderConfig::clear_minimal_kappa() {
  _impl_.minimal_kappa_ = 1e-05;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SpeedBoundsDeciderConfig::_internal_minimal_kappa() const {
  return _impl_.minimal_kappa_;
}
inline double SpeedBoundsDeciderConfig::minimal_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
  return _internal_minimal_kappa();
}
inline void SpeedBoundsDeciderConfig::_internal_set_minimal_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.minimal_kappa_ = value;
}
inline void SpeedBoundsDeciderConfig::set_minimal_kappa(double value) {
  _internal_set_minimal_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.minimal_kappa)
}

// optional double point_extension = 5 [default = 1];
inline bool SpeedBoundsDeciderConfig::_internal_has_point_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_point_extension() const {
  return _internal_has_point_extension();
}
inline void SpeedBoundsDeciderConfig::clear_point_extension() {
  _impl_.point_extension_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SpeedBoundsDeciderConfig::_internal_point_extension() const {
  return _impl_.point_extension_;
}
inline double SpeedBoundsDeciderConfig::point_extension() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
  return _internal_point_extension();
}
inline void SpeedBoundsDeciderConfig::_internal_set_point_extension(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.point_extension_ = value;
}
inline void SpeedBoundsDeciderConfig::set_point_extension(double value) {
  _internal_set_point_extension(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.point_extension)
}

// optional double lowest_speed = 6 [default = 2.5];
inline bool SpeedBoundsDeciderConfig::_internal_has_lowest_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_lowest_speed() const {
  return _internal_has_lowest_speed();
}
inline void SpeedBoundsDeciderConfig::clear_lowest_speed() {
  _impl_.lowest_speed_ = 2.5;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SpeedBoundsDeciderConfig::_internal_lowest_speed() const {
  return _impl_.lowest_speed_;
}
inline double SpeedBoundsDeciderConfig::lowest_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
  return _internal_lowest_speed();
}
inline void SpeedBoundsDeciderConfig::_internal_set_lowest_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.lowest_speed_ = value;
}
inline void SpeedBoundsDeciderConfig::set_lowest_speed(double value) {
  _internal_set_lowest_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.lowest_speed)
}

// optional double collision_safety_range = 7 [default = 1];
inline bool SpeedBoundsDeciderConfig::_internal_has_collision_safety_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_collision_safety_range() const {
  return _internal_has_collision_safety_range();
}
inline void SpeedBoundsDeciderConfig::clear_collision_safety_range() {
  _impl_.collision_safety_range_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SpeedBoundsDeciderConfig::_internal_collision_safety_range() const {
  return _impl_.collision_safety_range_;
}
inline double SpeedBoundsDeciderConfig::collision_safety_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
  return _internal_collision_safety_range();
}
inline void SpeedBoundsDeciderConfig::_internal_set_collision_safety_range(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.collision_safety_range_ = value;
}
inline void SpeedBoundsDeciderConfig::set_collision_safety_range(double value) {
  _internal_set_collision_safety_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.collision_safety_range)
}

// optional double static_obs_nudge_speed_ratio = 8;
inline bool SpeedBoundsDeciderConfig::_internal_has_static_obs_nudge_speed_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_static_obs_nudge_speed_ratio() const {
  return _internal_has_static_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::clear_static_obs_nudge_speed_ratio() {
  _impl_.static_obs_nudge_speed_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SpeedBoundsDeciderConfig::_internal_static_obs_nudge_speed_ratio() const {
  return _impl_.static_obs_nudge_speed_ratio_;
}
inline double SpeedBoundsDeciderConfig::static_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
  return _internal_static_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::_internal_set_static_obs_nudge_speed_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.static_obs_nudge_speed_ratio_ = value;
}
inline void SpeedBoundsDeciderConfig::set_static_obs_nudge_speed_ratio(double value) {
  _internal_set_static_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.static_obs_nudge_speed_ratio)
}

// optional double dynamic_obs_nudge_speed_ratio = 9;
inline bool SpeedBoundsDeciderConfig::_internal_has_dynamic_obs_nudge_speed_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpeedBoundsDeciderConfig::has_dynamic_obs_nudge_speed_ratio() const {
  return _internal_has_dynamic_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::clear_dynamic_obs_nudge_speed_ratio() {
  _impl_.dynamic_obs_nudge_speed_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SpeedBoundsDeciderConfig::_internal_dynamic_obs_nudge_speed_ratio() const {
  return _impl_.dynamic_obs_nudge_speed_ratio_;
}
inline double SpeedBoundsDeciderConfig::dynamic_obs_nudge_speed_ratio() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
  return _internal_dynamic_obs_nudge_speed_ratio();
}
inline void SpeedBoundsDeciderConfig::_internal_set_dynamic_obs_nudge_speed_ratio(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dynamic_obs_nudge_speed_ratio_ = value;
}
inline void SpeedBoundsDeciderConfig::set_dynamic_obs_nudge_speed_ratio(double value) {
  _internal_set_dynamic_obs_nudge_speed_ratio(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpeedBoundsDeciderConfig.dynamic_obs_nudge_speed_ratio)
}

// -------------------------------------------------------------------

// SpeedHeuristicOptimizerConfig

// optional .apollo.planning.DpStSpeedOptimizerConfig default_speed_config = 1;
inline bool SpeedHeuristicOptimizerConfig::_internal_has_default_speed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_speed_config_ != nullptr);
  return value;
}
inline bool SpeedHeuristicOptimizerConfig::has_default_speed_config() const {
  return _internal_has_default_speed_config();
}
inline void SpeedHeuristicOptimizerConfig::clear_default_speed_config() {
  if (_impl_.default_speed_config_ != nullptr) _impl_.default_speed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::_internal_default_speed_config() const {
  const ::apollo::planning::DpStSpeedOptimizerConfig* p = _impl_.default_speed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::DpStSpeedOptimizerConfig&>(
      ::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::default_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  return _internal_default_speed_config();
}
inline void SpeedHeuristicOptimizerConfig::unsafe_arena_set_allocated_default_speed_config(
    ::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_speed_config_);
  }
  _impl_.default_speed_config_ = default_speed_config;
  if (default_speed_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::release_default_speed_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = _impl_.default_speed_config_;
  _impl_.default_speed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::unsafe_arena_release_default_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = _impl_.default_speed_config_;
  _impl_.default_speed_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::_internal_mutable_default_speed_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_speed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(GetArenaForAllocation());
    _impl_.default_speed_config_ = p;
  }
  return _impl_.default_speed_config_;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::mutable_default_speed_config() {
  ::apollo::planning::DpStSpeedOptimizerConfig* _msg = _internal_mutable_default_speed_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
  return _msg;
}
inline void SpeedHeuristicOptimizerConfig::set_allocated_default_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* default_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.default_speed_config_;
  }
  if (default_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(default_speed_config);
    if (message_arena != submessage_arena) {
      default_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_speed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_speed_config_ = default_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.default_speed_config)
}

// optional .apollo.planning.DpStSpeedOptimizerConfig lane_change_speed_config = 2;
inline bool SpeedHeuristicOptimizerConfig::_internal_has_lane_change_speed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lane_change_speed_config_ != nullptr);
  return value;
}
inline bool SpeedHeuristicOptimizerConfig::has_lane_change_speed_config() const {
  return _internal_has_lane_change_speed_config();
}
inline void SpeedHeuristicOptimizerConfig::clear_lane_change_speed_config() {
  if (_impl_.lane_change_speed_config_ != nullptr) _impl_.lane_change_speed_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::_internal_lane_change_speed_config() const {
  const ::apollo::planning::DpStSpeedOptimizerConfig* p = _impl_.lane_change_speed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::DpStSpeedOptimizerConfig&>(
      ::apollo::planning::_DpStSpeedOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::DpStSpeedOptimizerConfig& SpeedHeuristicOptimizerConfig::lane_change_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  return _internal_lane_change_speed_config();
}
inline void SpeedHeuristicOptimizerConfig::unsafe_arena_set_allocated_lane_change_speed_config(
    ::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lane_change_speed_config_);
  }
  _impl_.lane_change_speed_config_ = lane_change_speed_config;
  if (lane_change_speed_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::release_lane_change_speed_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = _impl_.lane_change_speed_config_;
  _impl_.lane_change_speed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::unsafe_arena_release_lane_change_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::DpStSpeedOptimizerConfig* temp = _impl_.lane_change_speed_config_;
  _impl_.lane_change_speed_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::_internal_mutable_lane_change_speed_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lane_change_speed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpStSpeedOptimizerConfig>(GetArenaForAllocation());
    _impl_.lane_change_speed_config_ = p;
  }
  return _impl_.lane_change_speed_config_;
}
inline ::apollo::planning::DpStSpeedOptimizerConfig* SpeedHeuristicOptimizerConfig::mutable_lane_change_speed_config() {
  ::apollo::planning::DpStSpeedOptimizerConfig* _msg = _internal_mutable_lane_change_speed_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
  return _msg;
}
inline void SpeedHeuristicOptimizerConfig::set_allocated_lane_change_speed_config(::apollo::planning::DpStSpeedOptimizerConfig* lane_change_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lane_change_speed_config_;
  }
  if (lane_change_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lane_change_speed_config);
    if (message_arena != submessage_arena) {
      lane_change_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_speed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lane_change_speed_config_ = lane_change_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SpeedHeuristicOptimizerConfig.lane_change_speed_config)
}

// -------------------------------------------------------------------

// DpStSpeedOptimizerConfig

// optional double unit_t = 1 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_unit_t() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_unit_t() const {
  return _internal_has_unit_t();
}
inline void DpStSpeedOptimizerConfig::clear_unit_t() {
  _impl_.unit_t_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double DpStSpeedOptimizerConfig::_internal_unit_t() const {
  return _impl_.unit_t_;
}
inline double DpStSpeedOptimizerConfig::unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.unit_t)
  return _internal_unit_t();
}
inline void DpStSpeedOptimizerConfig::_internal_set_unit_t(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unit_t_ = value;
}
inline void DpStSpeedOptimizerConfig::set_unit_t(double value) {
  _internal_set_unit_t(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.unit_t)
}

// optional int32 dense_dimension_s = 2 [default = 41];
inline bool DpStSpeedOptimizerConfig::_internal_has_dense_dimension_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_dense_dimension_s() const {
  return _internal_has_dense_dimension_s();
}
inline void DpStSpeedOptimizerConfig::clear_dense_dimension_s() {
  _impl_.dense_dimension_s_ = 41;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DpStSpeedOptimizerConfig::_internal_dense_dimension_s() const {
  return _impl_.dense_dimension_s_;
}
inline int32_t DpStSpeedOptimizerConfig::dense_dimension_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
  return _internal_dense_dimension_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_dense_dimension_s(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dense_dimension_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_dense_dimension_s(int32_t value) {
  _internal_set_dense_dimension_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
}

// optional double dense_unit_s = 3 [default = 0.5];
inline bool DpStSpeedOptimizerConfig::_internal_has_dense_unit_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_dense_unit_s() const {
  return _internal_has_dense_unit_s();
}
inline void DpStSpeedOptimizerConfig::clear_dense_unit_s() {
  _impl_.dense_unit_s_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double DpStSpeedOptimizerConfig::_internal_dense_unit_s() const {
  return _impl_.dense_unit_s_;
}
inline double DpStSpeedOptimizerConfig::dense_unit_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.dense_unit_s)
  return _internal_dense_unit_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_dense_unit_s(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dense_unit_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_dense_unit_s(double value) {
  _internal_set_dense_unit_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.dense_unit_s)
}

// optional double sparse_unit_s = 4 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_sparse_unit_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_sparse_unit_s() const {
  return _internal_has_sparse_unit_s();
}
inline void DpStSpeedOptimizerConfig::clear_sparse_unit_s() {
  _impl_.sparse_unit_s_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double DpStSpeedOptimizerConfig::_internal_sparse_unit_s() const {
  return _impl_.sparse_unit_s_;
}
inline double DpStSpeedOptimizerConfig::sparse_unit_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
  return _internal_sparse_unit_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_sparse_unit_s(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sparse_unit_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_sparse_unit_s(double value) {
  _internal_set_sparse_unit_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
}

// optional double speed_weight = 10 [default = 0];
inline bool DpStSpeedOptimizerConfig::_internal_has_speed_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_speed_weight() const {
  return _internal_has_speed_weight();
}
inline void DpStSpeedOptimizerConfig::clear_speed_weight() {
  _impl_.speed_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double DpStSpeedOptimizerConfig::_internal_speed_weight() const {
  return _impl_.speed_weight_;
}
inline double DpStSpeedOptimizerConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.speed_weight)
  return _internal_speed_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_speed_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.speed_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_speed_weight(double value) {
  _internal_set_speed_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.speed_weight)
}

// optional double accel_weight = 11 [default = 10];
inline bool DpStSpeedOptimizerConfig::_internal_has_accel_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_accel_weight() const {
  return _internal_has_accel_weight();
}
inline void DpStSpeedOptimizerConfig::clear_accel_weight() {
  _impl_.accel_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double DpStSpeedOptimizerConfig::_internal_accel_weight() const {
  return _impl_.accel_weight_;
}
inline double DpStSpeedOptimizerConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.accel_weight)
  return _internal_accel_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_accel_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.accel_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_accel_weight(double value) {
  _internal_set_accel_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.accel_weight)
}

// optional double jerk_weight = 12 [default = 10];
inline bool DpStSpeedOptimizerConfig::_internal_has_jerk_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_jerk_weight() const {
  return _internal_has_jerk_weight();
}
inline void DpStSpeedOptimizerConfig::clear_jerk_weight() {
  _impl_.jerk_weight_ = 10;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double DpStSpeedOptimizerConfig::_internal_jerk_weight() const {
  return _impl_.jerk_weight_;
}
inline double DpStSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.jerk_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.jerk_weight)
}

// optional double obstacle_weight = 13 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_obstacle_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_obstacle_weight() const {
  return _internal_has_obstacle_weight();
}
inline void DpStSpeedOptimizerConfig::clear_obstacle_weight() {
  _impl_.obstacle_weight_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double DpStSpeedOptimizerConfig::_internal_obstacle_weight() const {
  return _impl_.obstacle_weight_;
}
inline double DpStSpeedOptimizerConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.obstacle_weight)
  return _internal_obstacle_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_obstacle_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.obstacle_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_obstacle_weight(double value) {
  _internal_set_obstacle_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.obstacle_weight)
}

// optional double reference_weight = 14 [default = 0];
inline bool DpStSpeedOptimizerConfig::_internal_has_reference_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_reference_weight() const {
  return _internal_has_reference_weight();
}
inline void DpStSpeedOptimizerConfig::clear_reference_weight() {
  _impl_.reference_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double DpStSpeedOptimizerConfig::_internal_reference_weight() const {
  return _impl_.reference_weight_;
}
inline double DpStSpeedOptimizerConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.reference_weight)
  return _internal_reference_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_reference_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reference_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_reference_weight(double value) {
  _internal_set_reference_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.reference_weight)
}

// optional double go_down_buffer = 15 [default = 5];
inline bool DpStSpeedOptimizerConfig::_internal_has_go_down_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_go_down_buffer() const {
  return _internal_has_go_down_buffer();
}
inline void DpStSpeedOptimizerConfig::clear_go_down_buffer() {
  _impl_.go_down_buffer_ = 5;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double DpStSpeedOptimizerConfig::_internal_go_down_buffer() const {
  return _impl_.go_down_buffer_;
}
inline double DpStSpeedOptimizerConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.go_down_buffer)
  return _internal_go_down_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_go_down_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.go_down_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_go_down_buffer(double value) {
  _internal_set_go_down_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.go_down_buffer)
}

// optional double go_up_buffer = 16 [default = 5];
inline bool DpStSpeedOptimizerConfig::_internal_has_go_up_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_go_up_buffer() const {
  return _internal_has_go_up_buffer();
}
inline void DpStSpeedOptimizerConfig::clear_go_up_buffer() {
  _impl_.go_up_buffer_ = 5;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double DpStSpeedOptimizerConfig::_internal_go_up_buffer() const {
  return _impl_.go_up_buffer_;
}
inline double DpStSpeedOptimizerConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.go_up_buffer)
  return _internal_go_up_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_go_up_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.go_up_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_go_up_buffer(double value) {
  _internal_set_go_up_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.go_up_buffer)
}

// optional double default_obstacle_cost = 20 [default = 10000000000];
inline bool DpStSpeedOptimizerConfig::_internal_has_default_obstacle_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_default_obstacle_cost() const {
  return _internal_has_default_obstacle_cost();
}
inline void DpStSpeedOptimizerConfig::clear_default_obstacle_cost() {
  _impl_.default_obstacle_cost_ = 10000000000;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double DpStSpeedOptimizerConfig::_internal_default_obstacle_cost() const {
  return _impl_.default_obstacle_cost_;
}
inline double DpStSpeedOptimizerConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
  return _internal_default_obstacle_cost();
}
inline void DpStSpeedOptimizerConfig::_internal_set_default_obstacle_cost(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.default_obstacle_cost_ = value;
}
inline void DpStSpeedOptimizerConfig::set_default_obstacle_cost(double value) {
  _internal_set_default_obstacle_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
}

// optional double default_speed_cost = 31 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_default_speed_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_default_speed_cost() const {
  return _internal_has_default_speed_cost();
}
inline void DpStSpeedOptimizerConfig::clear_default_speed_cost() {
  _impl_.default_speed_cost_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double DpStSpeedOptimizerConfig::_internal_default_speed_cost() const {
  return _impl_.default_speed_cost_;
}
inline double DpStSpeedOptimizerConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.default_speed_cost)
  return _internal_default_speed_cost();
}
inline void DpStSpeedOptimizerConfig::_internal_set_default_speed_cost(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.default_speed_cost_ = value;
}
inline void DpStSpeedOptimizerConfig::set_default_speed_cost(double value) {
  _internal_set_default_speed_cost(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.default_speed_cost)
}

// optional double exceed_speed_penalty = 32 [default = 10];
inline bool DpStSpeedOptimizerConfig::_internal_has_exceed_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_exceed_speed_penalty() const {
  return _internal_has_exceed_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_exceed_speed_penalty() {
  _impl_.exceed_speed_penalty_ = 10;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double DpStSpeedOptimizerConfig::_internal_exceed_speed_penalty() const {
  return _impl_.exceed_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
  return _internal_exceed_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_exceed_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.exceed_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_exceed_speed_penalty(double value) {
  _internal_set_exceed_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
}

// optional double low_speed_penalty = 33 [default = 2.5];
inline bool DpStSpeedOptimizerConfig::_internal_has_low_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_low_speed_penalty() const {
  return _internal_has_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_low_speed_penalty() {
  _impl_.low_speed_penalty_ = 2.5;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double DpStSpeedOptimizerConfig::_internal_low_speed_penalty() const {
  return _impl_.low_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
  return _internal_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_low_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.low_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_low_speed_penalty(double value) {
  _internal_set_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
}

// optional double reference_speed_penalty = 34 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_reference_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_reference_speed_penalty() const {
  return _internal_has_reference_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_reference_speed_penalty() {
  _impl_.reference_speed_penalty_ = 1;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double DpStSpeedOptimizerConfig::_internal_reference_speed_penalty() const {
  return _impl_.reference_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
  return _internal_reference_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_reference_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.reference_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_reference_speed_penalty(double value) {
  _internal_set_reference_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
}

// optional double keep_clear_low_speed_penalty = 35 [default = 10];
inline bool DpStSpeedOptimizerConfig::_internal_has_keep_clear_low_speed_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_keep_clear_low_speed_penalty() const {
  return _internal_has_keep_clear_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_keep_clear_low_speed_penalty() {
  _impl_.keep_clear_low_speed_penalty_ = 10;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double DpStSpeedOptimizerConfig::_internal_keep_clear_low_speed_penalty() const {
  return _impl_.keep_clear_low_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
  return _internal_keep_clear_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_keep_clear_low_speed_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.keep_clear_low_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_keep_clear_low_speed_penalty(double value) {
  _internal_set_keep_clear_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
}

// optional double accel_penalty = 40 [default = 2];
inline bool DpStSpeedOptimizerConfig::_internal_has_accel_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_accel_penalty() const {
  return _internal_has_accel_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_accel_penalty() {
  _impl_.accel_penalty_ = 2;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double DpStSpeedOptimizerConfig::_internal_accel_penalty() const {
  return _impl_.accel_penalty_;
}
inline double DpStSpeedOptimizerConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.accel_penalty)
  return _internal_accel_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_accel_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.accel_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_accel_penalty(double value) {
  _internal_set_accel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.accel_penalty)
}

// optional double decel_penalty = 41 [default = 2];
inline bool DpStSpeedOptimizerConfig::_internal_has_decel_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_decel_penalty() const {
  return _internal_has_decel_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_decel_penalty() {
  _impl_.decel_penalty_ = 2;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double DpStSpeedOptimizerConfig::_internal_decel_penalty() const {
  return _impl_.decel_penalty_;
}
inline double DpStSpeedOptimizerConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.decel_penalty)
  return _internal_decel_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_decel_penalty(double value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.decel_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_decel_penalty(double value) {
  _internal_set_decel_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.decel_penalty)
}

// optional double positive_jerk_coeff = 50 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_positive_jerk_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_positive_jerk_coeff() const {
  return _internal_has_positive_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::clear_positive_jerk_coeff() {
  _impl_.positive_jerk_coeff_ = 1;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double DpStSpeedOptimizerConfig::_internal_positive_jerk_coeff() const {
  return _impl_.positive_jerk_coeff_;
}
inline double DpStSpeedOptimizerConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
  return _internal_positive_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::_internal_set_positive_jerk_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.positive_jerk_coeff_ = value;
}
inline void DpStSpeedOptimizerConfig::set_positive_jerk_coeff(double value) {
  _internal_set_positive_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
}

// optional double negative_jerk_coeff = 51 [default = 300];
inline bool DpStSpeedOptimizerConfig::_internal_has_negative_jerk_coeff() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_negative_jerk_coeff() const {
  return _internal_has_negative_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::clear_negative_jerk_coeff() {
  _impl_.negative_jerk_coeff_ = 300;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double DpStSpeedOptimizerConfig::_internal_negative_jerk_coeff() const {
  return _impl_.negative_jerk_coeff_;
}
inline double DpStSpeedOptimizerConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
  return _internal_negative_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::_internal_set_negative_jerk_coeff(double value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.negative_jerk_coeff_ = value;
}
inline void DpStSpeedOptimizerConfig::set_negative_jerk_coeff(double value) {
  _internal_set_negative_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
}

// optional double max_acceleration = 60 [default = 4.5];
inline bool DpStSpeedOptimizerConfig::_internal_has_max_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void DpStSpeedOptimizerConfig::clear_max_acceleration() {
  _impl_.max_acceleration_ = 4.5;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double DpStSpeedOptimizerConfig::_internal_max_acceleration() const {
  return _impl_.max_acceleration_;
}
inline double DpStSpeedOptimizerConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.max_acceleration)
  return _internal_max_acceleration();
}
inline void DpStSpeedOptimizerConfig::_internal_set_max_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.max_acceleration_ = value;
}
inline void DpStSpeedOptimizerConfig::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.max_acceleration)
}

// optional double max_deceleration = 61 [default = -4.5];
inline bool DpStSpeedOptimizerConfig::_internal_has_max_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_max_deceleration() const {
  return _internal_has_max_deceleration();
}
inline void DpStSpeedOptimizerConfig::clear_max_deceleration() {
  _impl_.max_deceleration_ = -4.5;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double DpStSpeedOptimizerConfig::_internal_max_deceleration() const {
  return _impl_.max_deceleration_;
}
inline double DpStSpeedOptimizerConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.max_deceleration)
  return _internal_max_deceleration();
}
inline void DpStSpeedOptimizerConfig::_internal_set_max_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.max_deceleration_ = value;
}
inline void DpStSpeedOptimizerConfig::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.max_deceleration)
}

// optional double safe_time_buffer = 70 [default = 3];
inline bool DpStSpeedOptimizerConfig::_internal_has_safe_time_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_safe_time_buffer() const {
  return _internal_has_safe_time_buffer();
}
inline void DpStSpeedOptimizerConfig::clear_safe_time_buffer() {
  _impl_.safe_time_buffer_ = 3;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double DpStSpeedOptimizerConfig::_internal_safe_time_buffer() const {
  return _impl_.safe_time_buffer_;
}
inline double DpStSpeedOptimizerConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
  return _internal_safe_time_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_safe_time_buffer(double value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.safe_time_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_safe_time_buffer(double value) {
  _internal_set_safe_time_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
}

// optional double safe_distance = 71 [default = 20];
inline bool DpStSpeedOptimizerConfig::_internal_has_safe_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_safe_distance() const {
  return _internal_has_safe_distance();
}
inline void DpStSpeedOptimizerConfig::clear_safe_distance() {
  _impl_.safe_distance_ = 20;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double DpStSpeedOptimizerConfig::_internal_safe_distance() const {
  return _impl_.safe_distance_;
}
inline double DpStSpeedOptimizerConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.safe_distance)
  return _internal_safe_distance();
}
inline void DpStSpeedOptimizerConfig::_internal_set_safe_distance(double value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.safe_distance_ = value;
}
inline void DpStSpeedOptimizerConfig::set_safe_distance(double value) {
  _internal_set_safe_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.safe_distance)
}

// optional double spatial_potential_penalty = 80 [default = 1];
inline bool DpStSpeedOptimizerConfig::_internal_has_spatial_potential_penalty() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_spatial_potential_penalty() const {
  return _internal_has_spatial_potential_penalty();
}
inline void DpStSpeedOptimizerConfig::clear_spatial_potential_penalty() {
  _impl_.spatial_potential_penalty_ = 1;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double DpStSpeedOptimizerConfig::_internal_spatial_potential_penalty() const {
  return _impl_.spatial_potential_penalty_;
}
inline double DpStSpeedOptimizerConfig::spatial_potential_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
  return _internal_spatial_potential_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_spatial_potential_penalty(double value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.spatial_potential_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_spatial_potential_penalty(double value) {
  _internal_set_spatial_potential_penalty(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
}

// optional bool is_lane_changing = 81 [default = false];
inline bool DpStSpeedOptimizerConfig::_internal_has_is_lane_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DpStSpeedOptimizerConfig::has_is_lane_changing() const {
  return _internal_has_is_lane_changing();
}
inline void DpStSpeedOptimizerConfig::clear_is_lane_changing() {
  _impl_.is_lane_changing_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool DpStSpeedOptimizerConfig::_internal_is_lane_changing() const {
  return _impl_.is_lane_changing_;
}
inline bool DpStSpeedOptimizerConfig::is_lane_changing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DpStSpeedOptimizerConfig.is_lane_changing)
  return _internal_is_lane_changing();
}
inline void DpStSpeedOptimizerConfig::_internal_set_is_lane_changing(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_lane_changing_ = value;
}
inline void DpStSpeedOptimizerConfig::set_is_lane_changing(bool value) {
  _internal_set_is_lane_changing(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DpStSpeedOptimizerConfig.is_lane_changing)
}

// -------------------------------------------------------------------

// STBoundsDeciderConfig

// optional double total_time = 1 [default = 7];
inline bool STBoundsDeciderConfig::_internal_has_total_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool STBoundsDeciderConfig::has_total_time() const {
  return _internal_has_total_time();
}
inline void STBoundsDeciderConfig::clear_total_time() {
  _impl_.total_time_ = 7;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double STBoundsDeciderConfig::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double STBoundsDeciderConfig::total_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.STBoundsDeciderConfig.total_time)
  return _internal_total_time();
}
inline void STBoundsDeciderConfig::_internal_set_total_time(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_time_ = value;
}
inline void STBoundsDeciderConfig::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.STBoundsDeciderConfig.total_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::LearningModelInferenceTaskConfig_ModelType>() {
  return ::apollo::planning::LearningModelInferenceTaskConfig_ModelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto
