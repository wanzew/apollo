// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/qp_spline_path_config.proto

#include "modules/planning/proto/qp_spline_path_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
PROTOBUF_CONSTEXPR QpSplinePathConfig::QpSplinePathConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.derivative_weight_)*/0
  , /*decltype(_impl_.second_derivative_weight_)*/0
  , /*decltype(_impl_.reference_line_weight_)*/0
  , /*decltype(_impl_.history_path_weight_)*/0
  , /*decltype(_impl_.max_spline_length_)*/15
  , /*decltype(_impl_.max_constraint_interval_)*/15
  , /*decltype(_impl_.time_resolution_)*/0.1
  , /*decltype(_impl_.regularization_weight_)*/0.001
  , /*decltype(_impl_.first_spline_weight_factor_)*/10
  , /*decltype(_impl_.spline_order_)*/6u
  , /*decltype(_impl_.num_output_)*/100u
  , /*decltype(_impl_.third_derivative_weight_)*/100
  , /*decltype(_impl_.cross_lane_lateral_extension_)*/1.2
  , /*decltype(_impl_.cross_lane_longitudinal_extension_)*/50
  , /*decltype(_impl_.lane_change_mid_l_)*/0.6
  , /*decltype(_impl_.point_constraint_s_position_)*/110
  , /*decltype(_impl_.lane_change_lateral_shift_)*/1
  , /*decltype(_impl_.uturn_speed_limit_)*/5} {}
struct QpSplinePathConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QpSplinePathConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QpSplinePathConfigDefaultTypeInternal() {}
  union {
    QpSplinePathConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QpSplinePathConfigDefaultTypeInternal _QpSplinePathConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.spline_order_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.max_spline_length_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.max_constraint_interval_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.time_resolution_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.first_spline_weight_factor_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.second_derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.third_derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.reference_line_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.num_output_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.cross_lane_lateral_extension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.cross_lane_longitudinal_extension_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.history_path_weight_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.lane_change_mid_l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.point_constraint_s_position_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.lane_change_lateral_shift_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::QpSplinePathConfig, _impl_.uturn_speed_limit_),
  9,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  11,
  2,
  10,
  12,
  13,
  3,
  14,
  15,
  16,
  17,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, -1, sizeof(::apollo::planning::QpSplinePathConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::_QpSplinePathConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2modules/planning/proto/qp_spline_path_"
  "config.proto\022\017apollo.planning\"\211\005\n\022QpSpli"
  "nePathConfig\022\027\n\014spline_order\030\001 \001(\r:\0016\022\035\n"
  "\021max_spline_length\030\002 \001(\001:\00215\022#\n\027max_cons"
  "traint_interval\030\003 \001(\001:\00215\022\034\n\017time_resolu"
  "tion\030\004 \001(\001:\0030.1\022$\n\025regularization_weight"
  "\030\005 \001(\001:\0050.001\022&\n\032first_spline_weight_fac"
  "tor\030\006 \001(\001:\00210\022\034\n\021derivative_weight\030\007 \001(\001"
  ":\0010\022#\n\030second_derivative_weight\030\010 \001(\001:\0010"
  "\022$\n\027third_derivative_weight\030\t \001(\001:\003100\022 "
  "\n\025reference_line_weight\030\n \001(\001:\0010\022\027\n\nnum_"
  "output\030\013 \001(\r:\003100\022)\n\034cross_lane_lateral_"
  "extension\030\014 \001(\001:\0031.2\022-\n!cross_lane_longi"
  "tudinal_extension\030\r \001(\001:\00250\022\036\n\023history_p"
  "ath_weight\030\016 \001(\001:\0010\022\036\n\021lane_change_mid_l"
  "\030\017 \001(\001:\0030.6\022(\n\033point_constraint_s_positi"
  "on\030\020 \001(\001:\003110\022$\n\031lane_change_lateral_shi"
  "ft\030\021 \001(\001:\0011\022\034\n\021uturn_speed_limit\030\022 \001(\001:\001"
  "5"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto = {
    false, false, 721, descriptor_table_protodef_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto,
    "modules/planning/proto/qp_spline_path_config.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto);
namespace apollo {
namespace planning {

// ===================================================================

class QpSplinePathConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<QpSplinePathConfig>()._impl_._has_bits_);
  static void set_has_spline_order(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_max_spline_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_max_constraint_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_regularization_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_first_spline_weight_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_second_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_third_derivative_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_reference_line_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_output(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cross_lane_lateral_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cross_lane_longitudinal_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_history_path_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lane_change_mid_l(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_point_constraint_s_position(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lane_change_lateral_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_uturn_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

QpSplinePathConfig::QpSplinePathConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.QpSplinePathConfig)
}
QpSplinePathConfig::QpSplinePathConfig(const QpSplinePathConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.derivative_weight_){}
    , decltype(_impl_.second_derivative_weight_){}
    , decltype(_impl_.reference_line_weight_){}
    , decltype(_impl_.history_path_weight_){}
    , decltype(_impl_.max_spline_length_){}
    , decltype(_impl_.max_constraint_interval_){}
    , decltype(_impl_.time_resolution_){}
    , decltype(_impl_.regularization_weight_){}
    , decltype(_impl_.first_spline_weight_factor_){}
    , decltype(_impl_.spline_order_){}
    , decltype(_impl_.num_output_){}
    , decltype(_impl_.third_derivative_weight_){}
    , decltype(_impl_.cross_lane_lateral_extension_){}
    , decltype(_impl_.cross_lane_longitudinal_extension_){}
    , decltype(_impl_.lane_change_mid_l_){}
    , decltype(_impl_.point_constraint_s_position_){}
    , decltype(_impl_.lane_change_lateral_shift_){}
    , decltype(_impl_.uturn_speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.derivative_weight_, &from._impl_.derivative_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uturn_speed_limit_) -
    reinterpret_cast<char*>(&_impl_.derivative_weight_)) + sizeof(_impl_.uturn_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.QpSplinePathConfig)
}

inline void QpSplinePathConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.derivative_weight_){0}
    , decltype(_impl_.second_derivative_weight_){0}
    , decltype(_impl_.reference_line_weight_){0}
    , decltype(_impl_.history_path_weight_){0}
    , decltype(_impl_.max_spline_length_){15}
    , decltype(_impl_.max_constraint_interval_){15}
    , decltype(_impl_.time_resolution_){0.1}
    , decltype(_impl_.regularization_weight_){0.001}
    , decltype(_impl_.first_spline_weight_factor_){10}
    , decltype(_impl_.spline_order_){6u}
    , decltype(_impl_.num_output_){100u}
    , decltype(_impl_.third_derivative_weight_){100}
    , decltype(_impl_.cross_lane_lateral_extension_){1.2}
    , decltype(_impl_.cross_lane_longitudinal_extension_){50}
    , decltype(_impl_.lane_change_mid_l_){0.6}
    , decltype(_impl_.point_constraint_s_position_){110}
    , decltype(_impl_.lane_change_lateral_shift_){1}
    , decltype(_impl_.uturn_speed_limit_){5}
  };
}

QpSplinePathConfig::~QpSplinePathConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.QpSplinePathConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QpSplinePathConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QpSplinePathConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QpSplinePathConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.QpSplinePathConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.derivative_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.history_path_weight_) -
        reinterpret_cast<char*>(&_impl_.derivative_weight_)) + sizeof(_impl_.history_path_weight_));
    _impl_.max_spline_length_ = 15;
    _impl_.max_constraint_interval_ = 15;
    _impl_.time_resolution_ = 0.1;
    _impl_.regularization_weight_ = 0.001;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.first_spline_weight_factor_ = 10;
    _impl_.spline_order_ = 6u;
    _impl_.num_output_ = 100u;
    _impl_.third_derivative_weight_ = 100;
    _impl_.cross_lane_lateral_extension_ = 1.2;
    _impl_.cross_lane_longitudinal_extension_ = 50;
    _impl_.lane_change_mid_l_ = 0.6;
    _impl_.point_constraint_s_position_ = 110;
  }
  if (cached_has_bits & 0x00030000u) {
    _impl_.lane_change_lateral_shift_ = 1;
    _impl_.uturn_speed_limit_ = 5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpSplinePathConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spline_order = 1 [default = 6];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spline_order(&has_bits);
          _impl_.spline_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double max_spline_length = 2 [default = 15];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_max_spline_length(&has_bits);
          _impl_.max_spline_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double max_constraint_interval = 3 [default = 15];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_max_constraint_interval(&has_bits);
          _impl_.max_constraint_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double time_resolution = 4 [default = 0.1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_time_resolution(&has_bits);
          _impl_.time_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double regularization_weight = 5 [default = 0.001];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_regularization_weight(&has_bits);
          _impl_.regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double first_spline_weight_factor = 6 [default = 10];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_first_spline_weight_factor(&has_bits);
          _impl_.first_spline_weight_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double derivative_weight = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_derivative_weight(&has_bits);
          _impl_.derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double second_derivative_weight = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_second_derivative_weight(&has_bits);
          _impl_.second_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double third_derivative_weight = 9 [default = 100];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_third_derivative_weight(&has_bits);
          _impl_.third_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double reference_line_weight = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_reference_line_weight(&has_bits);
          _impl_.reference_line_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_output = 11 [default = 100];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_num_output(&has_bits);
          _impl_.num_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double cross_lane_lateral_extension = 12 [default = 1.2];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_cross_lane_lateral_extension(&has_bits);
          _impl_.cross_lane_lateral_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double cross_lane_longitudinal_extension = 13 [default = 50];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_cross_lane_longitudinal_extension(&has_bits);
          _impl_.cross_lane_longitudinal_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double history_path_weight = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_history_path_weight(&has_bits);
          _impl_.history_path_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_change_mid_l = 15 [default = 0.6];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_lane_change_mid_l(&has_bits);
          _impl_.lane_change_mid_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double point_constraint_s_position = 16 [default = 110];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_point_constraint_s_position(&has_bits);
          _impl_.point_constraint_s_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lane_change_lateral_shift = 17 [default = 1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_lane_change_lateral_shift(&has_bits);
          _impl_.lane_change_lateral_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double uturn_speed_limit = 18 [default = 5];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_uturn_speed_limit(&has_bits);
          _impl_.uturn_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpSplinePathConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.QpSplinePathConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spline_order = 1 [default = 6];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spline_order(), target);
  }

  // optional double max_spline_length = 2 [default = 15];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_spline_length(), target);
  }

  // optional double max_constraint_interval = 3 [default = 15];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_constraint_interval(), target);
  }

  // optional double time_resolution = 4 [default = 0.1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_time_resolution(), target);
  }

  // optional double regularization_weight = 5 [default = 0.001];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_regularization_weight(), target);
  }

  // optional double first_spline_weight_factor = 6 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_first_spline_weight_factor(), target);
  }

  // optional double derivative_weight = 7 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_derivative_weight(), target);
  }

  // optional double second_derivative_weight = 8 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_second_derivative_weight(), target);
  }

  // optional double third_derivative_weight = 9 [default = 100];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_third_derivative_weight(), target);
  }

  // optional double reference_line_weight = 10 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_reference_line_weight(), target);
  }

  // optional uint32 num_output = 11 [default = 100];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_num_output(), target);
  }

  // optional double cross_lane_lateral_extension = 12 [default = 1.2];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_cross_lane_lateral_extension(), target);
  }

  // optional double cross_lane_longitudinal_extension = 13 [default = 50];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_cross_lane_longitudinal_extension(), target);
  }

  // optional double history_path_weight = 14 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_history_path_weight(), target);
  }

  // optional double lane_change_mid_l = 15 [default = 0.6];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_lane_change_mid_l(), target);
  }

  // optional double point_constraint_s_position = 16 [default = 110];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_point_constraint_s_position(), target);
  }

  // optional double lane_change_lateral_shift = 17 [default = 1];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_lane_change_lateral_shift(), target);
  }

  // optional double uturn_speed_limit = 18 [default = 5];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_uturn_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.QpSplinePathConfig)
  return target;
}

size_t QpSplinePathConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.QpSplinePathConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double derivative_weight = 7 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double second_derivative_weight = 8 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reference_line_weight = 10 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double history_path_weight = 14 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double max_spline_length = 2 [default = 15];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double max_constraint_interval = 3 [default = 15];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double time_resolution = 4 [default = 0.1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double regularization_weight = 5 [default = 0.001];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double first_spline_weight_factor = 6 [default = 10];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 spline_order = 1 [default = 6];
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spline_order());
    }

    // optional uint32 num_output = 11 [default = 100];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_output());
    }

    // optional double third_derivative_weight = 9 [default = 100];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double cross_lane_lateral_extension = 12 [default = 1.2];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double cross_lane_longitudinal_extension = 13 [default = 50];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double lane_change_mid_l = 15 [default = 0.6];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

    // optional double point_constraint_s_position = 16 [default = 110];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional double lane_change_lateral_shift = 17 [default = 1];
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double uturn_speed_limit = 18 [default = 5];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpSplinePathConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpSplinePathConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpSplinePathConfig::GetClassData() const { return &_class_data_; }

void QpSplinePathConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpSplinePathConfig *>(to)->MergeFrom(
      static_cast<const QpSplinePathConfig &>(from));
}


void QpSplinePathConfig::MergeFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.QpSplinePathConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.derivative_weight_ = from._impl_.derivative_weight_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.second_derivative_weight_ = from._impl_.second_derivative_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.reference_line_weight_ = from._impl_.reference_line_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.history_path_weight_ = from._impl_.history_path_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.max_spline_length_ = from._impl_.max_spline_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.max_constraint_interval_ = from._impl_.max_constraint_interval_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.time_resolution_ = from._impl_.time_resolution_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.regularization_weight_ = from._impl_.regularization_weight_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.first_spline_weight_factor_ = from._impl_.first_spline_weight_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.spline_order_ = from._impl_.spline_order_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.num_output_ = from._impl_.num_output_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.third_derivative_weight_ = from._impl_.third_derivative_weight_;
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.cross_lane_lateral_extension_ = from._impl_.cross_lane_lateral_extension_;
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.cross_lane_longitudinal_extension_ = from._impl_.cross_lane_longitudinal_extension_;
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.lane_change_mid_l_ = from._impl_.lane_change_mid_l_;
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.point_constraint_s_position_ = from._impl_.point_constraint_s_position_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.lane_change_lateral_shift_ = from._impl_.lane_change_lateral_shift_;
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.uturn_speed_limit_ = from._impl_.uturn_speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpSplinePathConfig::CopyFrom(const QpSplinePathConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.QpSplinePathConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplinePathConfig::IsInitialized() const {
  return true;
}

void QpSplinePathConfig::InternalSwap(QpSplinePathConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QpSplinePathConfig, _impl_.history_path_weight_)
      + sizeof(QpSplinePathConfig::_impl_.history_path_weight_)
      - PROTOBUF_FIELD_OFFSET(QpSplinePathConfig, _impl_.derivative_weight_)>(
          reinterpret_cast<char*>(&_impl_.derivative_weight_),
          reinterpret_cast<char*>(&other->_impl_.derivative_weight_));
  swap(_impl_.max_spline_length_, other->_impl_.max_spline_length_);
  swap(_impl_.max_constraint_interval_, other->_impl_.max_constraint_interval_);
  swap(_impl_.time_resolution_, other->_impl_.time_resolution_);
  swap(_impl_.regularization_weight_, other->_impl_.regularization_weight_);
  swap(_impl_.first_spline_weight_factor_, other->_impl_.first_spline_weight_factor_);
  swap(_impl_.spline_order_, other->_impl_.spline_order_);
  swap(_impl_.num_output_, other->_impl_.num_output_);
  swap(_impl_.third_derivative_weight_, other->_impl_.third_derivative_weight_);
  swap(_impl_.cross_lane_lateral_extension_, other->_impl_.cross_lane_lateral_extension_);
  swap(_impl_.cross_lane_longitudinal_extension_, other->_impl_.cross_lane_longitudinal_extension_);
  swap(_impl_.lane_change_mid_l_, other->_impl_.lane_change_mid_l_);
  swap(_impl_.point_constraint_s_position_, other->_impl_.point_constraint_s_position_);
  swap(_impl_.lane_change_lateral_shift_, other->_impl_.lane_change_lateral_shift_);
  swap(_impl_.uturn_speed_limit_, other->_impl_.uturn_speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QpSplinePathConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fqp_5fspline_5fpath_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::QpSplinePathConfig*
Arena::CreateMaybeMessage< ::apollo::planning::QpSplinePathConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::QpSplinePathConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
