// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/reference_line_smoother_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/math/cos_theta_smoother_config.pb.h"
#include "modules/planning/proto/math/fem_pos_deviation_smoother_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
namespace apollo {
namespace planning {
class DiscretePointsSmootherConfig;
struct DiscretePointsSmootherConfigDefaultTypeInternal;
extern DiscretePointsSmootherConfigDefaultTypeInternal _DiscretePointsSmootherConfig_default_instance_;
class QpSplineSmootherConfig;
struct QpSplineSmootherConfigDefaultTypeInternal;
extern QpSplineSmootherConfigDefaultTypeInternal _QpSplineSmootherConfig_default_instance_;
class ReferenceLineSmootherConfig;
struct ReferenceLineSmootherConfigDefaultTypeInternal;
extern ReferenceLineSmootherConfigDefaultTypeInternal _ReferenceLineSmootherConfig_default_instance_;
class SpiralSmootherConfig;
struct SpiralSmootherConfigDefaultTypeInternal;
extern SpiralSmootherConfigDefaultTypeInternal _SpiralSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::DiscretePointsSmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::DiscretePointsSmootherConfig>(Arena*);
template<> ::apollo::planning::QpSplineSmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::QpSplineSmootherConfig>(Arena*);
template<> ::apollo::planning::ReferenceLineSmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::ReferenceLineSmootherConfig>(Arena*);
template<> ::apollo::planning::SpiralSmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::SpiralSmootherConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum DiscretePointsSmootherConfig_SmoothingMethod : int {
  DiscretePointsSmootherConfig_SmoothingMethod_NOT_DEFINED = 0,
  DiscretePointsSmootherConfig_SmoothingMethod_COS_THETA_SMOOTHING = 1,
  DiscretePointsSmootherConfig_SmoothingMethod_FEM_POS_DEVIATION_SMOOTHING = 2
};
bool DiscretePointsSmootherConfig_SmoothingMethod_IsValid(int value);
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_MIN = DiscretePointsSmootherConfig_SmoothingMethod_NOT_DEFINED;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_MAX = DiscretePointsSmootherConfig_SmoothingMethod_FEM_POS_DEVIATION_SMOOTHING;
constexpr int DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_ARRAYSIZE = DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiscretePointsSmootherConfig_SmoothingMethod_descriptor();
template<typename T>
inline const std::string& DiscretePointsSmootherConfig_SmoothingMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DiscretePointsSmootherConfig_SmoothingMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DiscretePointsSmootherConfig_SmoothingMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DiscretePointsSmootherConfig_SmoothingMethod_descriptor(), enum_t_value);
}
inline bool DiscretePointsSmootherConfig_SmoothingMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DiscretePointsSmootherConfig_SmoothingMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DiscretePointsSmootherConfig_SmoothingMethod>(
    DiscretePointsSmootherConfig_SmoothingMethod_descriptor(), name, value);
}
// ===================================================================

class QpSplineSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QpSplineSmootherConfig) */ {
 public:
  inline QpSplineSmootherConfig() : QpSplineSmootherConfig(nullptr) {}
  ~QpSplineSmootherConfig() override;
  explicit PROTOBUF_CONSTEXPR QpSplineSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QpSplineSmootherConfig(const QpSplineSmootherConfig& from);
  QpSplineSmootherConfig(QpSplineSmootherConfig&& from) noexcept
    : QpSplineSmootherConfig() {
    *this = ::std::move(from);
  }

  inline QpSplineSmootherConfig& operator=(const QpSplineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QpSplineSmootherConfig& operator=(QpSplineSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QpSplineSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const QpSplineSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const QpSplineSmootherConfig*>(
               &_QpSplineSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QpSplineSmootherConfig& a, QpSplineSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QpSplineSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QpSplineSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QpSplineSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QpSplineSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QpSplineSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QpSplineSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QpSplineSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.QpSplineSmootherConfig";
  }
  protected:
  explicit QpSplineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondDerivativeWeightFieldNumber = 4,
    kSplineOrderFieldNumber = 1,
    kMaxSplineLengthFieldNumber = 2,
    kRegularizationWeightFieldNumber = 3,
    kThirdDerivativeWeightFieldNumber = 5,
  };
  // optional double second_derivative_weight = 4 [default = 0];
  bool has_second_derivative_weight() const;
  private:
  bool _internal_has_second_derivative_weight() const;
  public:
  void clear_second_derivative_weight();
  double second_derivative_weight() const;
  void set_second_derivative_weight(double value);
  private:
  double _internal_second_derivative_weight() const;
  void _internal_set_second_derivative_weight(double value);
  public:

  // optional uint32 spline_order = 1 [default = 5];
  bool has_spline_order() const;
  private:
  bool _internal_has_spline_order() const;
  public:
  void clear_spline_order();
  uint32_t spline_order() const;
  void set_spline_order(uint32_t value);
  private:
  uint32_t _internal_spline_order() const;
  void _internal_set_spline_order(uint32_t value);
  public:

  // optional double max_spline_length = 2 [default = 25];
  bool has_max_spline_length() const;
  private:
  bool _internal_has_max_spline_length() const;
  public:
  void clear_max_spline_length();
  double max_spline_length() const;
  void set_max_spline_length(double value);
  private:
  double _internal_max_spline_length() const;
  void _internal_set_max_spline_length(double value);
  public:

  // optional double regularization_weight = 3 [default = 0.1];
  bool has_regularization_weight() const;
  private:
  bool _internal_has_regularization_weight() const;
  public:
  void clear_regularization_weight();
  double regularization_weight() const;
  void set_regularization_weight(double value);
  private:
  double _internal_regularization_weight() const;
  void _internal_set_regularization_weight(double value);
  public:

  // optional double third_derivative_weight = 5 [default = 100];
  bool has_third_derivative_weight() const;
  private:
  bool _internal_has_third_derivative_weight() const;
  public:
  void clear_third_derivative_weight();
  double third_derivative_weight() const;
  void set_third_derivative_weight(double value);
  private:
  double _internal_third_derivative_weight() const;
  void _internal_set_third_derivative_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.QpSplineSmootherConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double second_derivative_weight_;
    uint32_t spline_order_;
    double max_spline_length_;
    double regularization_weight_;
    double third_derivative_weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SpiralSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SpiralSmootherConfig) */ {
 public:
  inline SpiralSmootherConfig() : SpiralSmootherConfig(nullptr) {}
  ~SpiralSmootherConfig() override;
  explicit PROTOBUF_CONSTEXPR SpiralSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpiralSmootherConfig(const SpiralSmootherConfig& from);
  SpiralSmootherConfig(SpiralSmootherConfig&& from) noexcept
    : SpiralSmootherConfig() {
    *this = ::std::move(from);
  }

  inline SpiralSmootherConfig& operator=(const SpiralSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpiralSmootherConfig& operator=(SpiralSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpiralSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpiralSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const SpiralSmootherConfig*>(
               &_SpiralSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpiralSmootherConfig& a, SpiralSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SpiralSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpiralSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpiralSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpiralSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpiralSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SpiralSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpiralSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SpiralSmootherConfig";
  }
  protected:
  explicit SpiralSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxDeviationFieldNumber = 1,
    kPiecewiseLengthFieldNumber = 2,
    kOptTolFieldNumber = 4,
    kMaxIterationFieldNumber = 3,
    kOptAcceptableIterationFieldNumber = 6,
    kOptAcceptableTolFieldNumber = 5,
    kWeightCurveLengthFieldNumber = 7,
    kWeightKappaFieldNumber = 8,
    kWeightDkappaFieldNumber = 9,
  };
  // optional double max_deviation = 1 [default = 0.1];
  bool has_max_deviation() const;
  private:
  bool _internal_has_max_deviation() const;
  public:
  void clear_max_deviation();
  double max_deviation() const;
  void set_max_deviation(double value);
  private:
  double _internal_max_deviation() const;
  void _internal_set_max_deviation(double value);
  public:

  // optional double piecewise_length = 2 [default = 10];
  bool has_piecewise_length() const;
  private:
  bool _internal_has_piecewise_length() const;
  public:
  void clear_piecewise_length();
  double piecewise_length() const;
  void set_piecewise_length(double value);
  private:
  double _internal_piecewise_length() const;
  void _internal_set_piecewise_length(double value);
  public:

  // optional double opt_tol = 4 [default = 1e-08];
  bool has_opt_tol() const;
  private:
  bool _internal_has_opt_tol() const;
  public:
  void clear_opt_tol();
  double opt_tol() const;
  void set_opt_tol(double value);
  private:
  double _internal_opt_tol() const;
  void _internal_set_opt_tol(double value);
  public:

  // optional uint32 max_iteration = 3 [default = 1000];
  bool has_max_iteration() const;
  private:
  bool _internal_has_max_iteration() const;
  public:
  void clear_max_iteration();
  uint32_t max_iteration() const;
  void set_max_iteration(uint32_t value);
  private:
  uint32_t _internal_max_iteration() const;
  void _internal_set_max_iteration(uint32_t value);
  public:

  // optional uint32 opt_acceptable_iteration = 6 [default = 15];
  bool has_opt_acceptable_iteration() const;
  private:
  bool _internal_has_opt_acceptable_iteration() const;
  public:
  void clear_opt_acceptable_iteration();
  uint32_t opt_acceptable_iteration() const;
  void set_opt_acceptable_iteration(uint32_t value);
  private:
  uint32_t _internal_opt_acceptable_iteration() const;
  void _internal_set_opt_acceptable_iteration(uint32_t value);
  public:

  // optional double opt_acceptable_tol = 5 [default = 1e-06];
  bool has_opt_acceptable_tol() const;
  private:
  bool _internal_has_opt_acceptable_tol() const;
  public:
  void clear_opt_acceptable_tol();
  double opt_acceptable_tol() const;
  void set_opt_acceptable_tol(double value);
  private:
  double _internal_opt_acceptable_tol() const;
  void _internal_set_opt_acceptable_tol(double value);
  public:

  // optional double weight_curve_length = 7 [default = 1];
  bool has_weight_curve_length() const;
  private:
  bool _internal_has_weight_curve_length() const;
  public:
  void clear_weight_curve_length();
  double weight_curve_length() const;
  void set_weight_curve_length(double value);
  private:
  double _internal_weight_curve_length() const;
  void _internal_set_weight_curve_length(double value);
  public:

  // optional double weight_kappa = 8 [default = 1];
  bool has_weight_kappa() const;
  private:
  bool _internal_has_weight_kappa() const;
  public:
  void clear_weight_kappa();
  double weight_kappa() const;
  void set_weight_kappa(double value);
  private:
  double _internal_weight_kappa() const;
  void _internal_set_weight_kappa(double value);
  public:

  // optional double weight_dkappa = 9 [default = 100];
  bool has_weight_dkappa() const;
  private:
  bool _internal_has_weight_dkappa() const;
  public:
  void clear_weight_dkappa();
  double weight_dkappa() const;
  void set_weight_dkappa(double value);
  private:
  double _internal_weight_dkappa() const;
  void _internal_set_weight_dkappa(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SpiralSmootherConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_deviation_;
    double piecewise_length_;
    double opt_tol_;
    uint32_t max_iteration_;
    uint32_t opt_acceptable_iteration_;
    double opt_acceptable_tol_;
    double weight_curve_length_;
    double weight_kappa_;
    double weight_dkappa_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DiscretePointsSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DiscretePointsSmootherConfig) */ {
 public:
  inline DiscretePointsSmootherConfig() : DiscretePointsSmootherConfig(nullptr) {}
  ~DiscretePointsSmootherConfig() override;
  explicit PROTOBUF_CONSTEXPR DiscretePointsSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscretePointsSmootherConfig(const DiscretePointsSmootherConfig& from);
  DiscretePointsSmootherConfig(DiscretePointsSmootherConfig&& from) noexcept
    : DiscretePointsSmootherConfig() {
    *this = ::std::move(from);
  }

  inline DiscretePointsSmootherConfig& operator=(const DiscretePointsSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscretePointsSmootherConfig& operator=(DiscretePointsSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscretePointsSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  enum SmootherConfigCase {
    kCosThetaSmoothing = 4,
    kFemPosDeviationSmoothing = 5,
    SMOOTHERCONFIG_NOT_SET = 0,
  };

  static inline const DiscretePointsSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const DiscretePointsSmootherConfig*>(
               &_DiscretePointsSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiscretePointsSmootherConfig& a, DiscretePointsSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscretePointsSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscretePointsSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscretePointsSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscretePointsSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscretePointsSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscretePointsSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscretePointsSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.DiscretePointsSmootherConfig";
  }
  protected:
  explicit DiscretePointsSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DiscretePointsSmootherConfig_SmoothingMethod SmoothingMethod;
  static constexpr SmoothingMethod NOT_DEFINED =
    DiscretePointsSmootherConfig_SmoothingMethod_NOT_DEFINED;
  static constexpr SmoothingMethod COS_THETA_SMOOTHING =
    DiscretePointsSmootherConfig_SmoothingMethod_COS_THETA_SMOOTHING;
  static constexpr SmoothingMethod FEM_POS_DEVIATION_SMOOTHING =
    DiscretePointsSmootherConfig_SmoothingMethod_FEM_POS_DEVIATION_SMOOTHING;
  static inline bool SmoothingMethod_IsValid(int value) {
    return DiscretePointsSmootherConfig_SmoothingMethod_IsValid(value);
  }
  static constexpr SmoothingMethod SmoothingMethod_MIN =
    DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_MIN;
  static constexpr SmoothingMethod SmoothingMethod_MAX =
    DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_MAX;
  static constexpr int SmoothingMethod_ARRAYSIZE =
    DiscretePointsSmootherConfig_SmoothingMethod_SmoothingMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SmoothingMethod_descriptor() {
    return DiscretePointsSmootherConfig_SmoothingMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& SmoothingMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SmoothingMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SmoothingMethod_Name.");
    return DiscretePointsSmootherConfig_SmoothingMethod_Name(enum_t_value);
  }
  static inline bool SmoothingMethod_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SmoothingMethod* value) {
    return DiscretePointsSmootherConfig_SmoothingMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSmoothingMethodFieldNumber = 3,
    kCosThetaSmoothingFieldNumber = 4,
    kFemPosDeviationSmoothingFieldNumber = 5,
  };
  // optional .apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
  bool has_smoothing_method() const;
  private:
  bool _internal_has_smoothing_method() const;
  public:
  void clear_smoothing_method();
  ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod smoothing_method() const;
  void set_smoothing_method(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod value);
  private:
  ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod _internal_smoothing_method() const;
  void _internal_set_smoothing_method(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod value);
  public:

  // .apollo.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
  bool has_cos_theta_smoothing() const;
  private:
  bool _internal_has_cos_theta_smoothing() const;
  public:
  void clear_cos_theta_smoothing();
  const ::apollo::planning::CosThetaSmootherConfig& cos_theta_smoothing() const;
  PROTOBUF_NODISCARD ::apollo::planning::CosThetaSmootherConfig* release_cos_theta_smoothing();
  ::apollo::planning::CosThetaSmootherConfig* mutable_cos_theta_smoothing();
  void set_allocated_cos_theta_smoothing(::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing);
  private:
  const ::apollo::planning::CosThetaSmootherConfig& _internal_cos_theta_smoothing() const;
  ::apollo::planning::CosThetaSmootherConfig* _internal_mutable_cos_theta_smoothing();
  public:
  void unsafe_arena_set_allocated_cos_theta_smoothing(
      ::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing);
  ::apollo::planning::CosThetaSmootherConfig* unsafe_arena_release_cos_theta_smoothing();

  // .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
  bool has_fem_pos_deviation_smoothing() const;
  private:
  bool _internal_has_fem_pos_deviation_smoothing() const;
  public:
  void clear_fem_pos_deviation_smoothing();
  const ::apollo::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoothing() const;
  PROTOBUF_NODISCARD ::apollo::planning::FemPosDeviationSmootherConfig* release_fem_pos_deviation_smoothing();
  ::apollo::planning::FemPosDeviationSmootherConfig* mutable_fem_pos_deviation_smoothing();
  void set_allocated_fem_pos_deviation_smoothing(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing);
  private:
  const ::apollo::planning::FemPosDeviationSmootherConfig& _internal_fem_pos_deviation_smoothing() const;
  ::apollo::planning::FemPosDeviationSmootherConfig* _internal_mutable_fem_pos_deviation_smoothing();
  public:
  void unsafe_arena_set_allocated_fem_pos_deviation_smoothing(
      ::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing);
  ::apollo::planning::FemPosDeviationSmootherConfig* unsafe_arena_release_fem_pos_deviation_smoothing();

  void clear_SmootherConfig();
  SmootherConfigCase SmootherConfig_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.DiscretePointsSmootherConfig)
 private:
  class _Internal;
  void set_has_cos_theta_smoothing();
  void set_has_fem_pos_deviation_smoothing();

  inline bool has_SmootherConfig() const;
  inline void clear_has_SmootherConfig();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int smoothing_method_;
    union SmootherConfigUnion {
      constexpr SmootherConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing_;
      ::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing_;
    } SmootherConfig_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ReferenceLineSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ReferenceLineSmootherConfig) */ {
 public:
  inline ReferenceLineSmootherConfig() : ReferenceLineSmootherConfig(nullptr) {}
  ~ReferenceLineSmootherConfig() override;
  explicit PROTOBUF_CONSTEXPR ReferenceLineSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from);
  ReferenceLineSmootherConfig(ReferenceLineSmootherConfig&& from) noexcept
    : ReferenceLineSmootherConfig() {
    *this = ::std::move(from);
  }

  inline ReferenceLineSmootherConfig& operator=(const ReferenceLineSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceLineSmootherConfig& operator=(ReferenceLineSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReferenceLineSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  enum SmootherConfigCase {
    kQpSpline = 20,
    kSpiral = 21,
    kDiscretePoints = 22,
    SMOOTHERCONFIG_NOT_SET = 0,
  };

  static inline const ReferenceLineSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const ReferenceLineSmootherConfig*>(
               &_ReferenceLineSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReferenceLineSmootherConfig& a, ReferenceLineSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceLineSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceLineSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReferenceLineSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReferenceLineSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReferenceLineSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReferenceLineSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceLineSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ReferenceLineSmootherConfig";
  }
  protected:
  explicit ReferenceLineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumOfTotalPointsFieldNumber = 5,
    kMaxConstraintIntervalFieldNumber = 1,
    kLongitudinalBoundaryBoundFieldNumber = 2,
    kMaxLateralBoundaryBoundFieldNumber = 3,
    kMinLateralBoundaryBoundFieldNumber = 4,
    kCurbShiftFieldNumber = 6,
    kLateralBufferFieldNumber = 7,
    kResolutionFieldNumber = 8,
    kQpSplineFieldNumber = 20,
    kSpiralFieldNumber = 21,
    kDiscretePointsFieldNumber = 22,
  };
  // optional uint32 num_of_total_points = 5 [default = 500];
  bool has_num_of_total_points() const;
  private:
  bool _internal_has_num_of_total_points() const;
  public:
  void clear_num_of_total_points();
  uint32_t num_of_total_points() const;
  void set_num_of_total_points(uint32_t value);
  private:
  uint32_t _internal_num_of_total_points() const;
  void _internal_set_num_of_total_points(uint32_t value);
  public:

  // optional double max_constraint_interval = 1 [default = 5];
  bool has_max_constraint_interval() const;
  private:
  bool _internal_has_max_constraint_interval() const;
  public:
  void clear_max_constraint_interval();
  double max_constraint_interval() const;
  void set_max_constraint_interval(double value);
  private:
  double _internal_max_constraint_interval() const;
  void _internal_set_max_constraint_interval(double value);
  public:

  // optional double longitudinal_boundary_bound = 2 [default = 1];
  bool has_longitudinal_boundary_bound() const;
  private:
  bool _internal_has_longitudinal_boundary_bound() const;
  public:
  void clear_longitudinal_boundary_bound();
  double longitudinal_boundary_bound() const;
  void set_longitudinal_boundary_bound(double value);
  private:
  double _internal_longitudinal_boundary_bound() const;
  void _internal_set_longitudinal_boundary_bound(double value);
  public:

  // optional double max_lateral_boundary_bound = 3 [default = 0.5];
  bool has_max_lateral_boundary_bound() const;
  private:
  bool _internal_has_max_lateral_boundary_bound() const;
  public:
  void clear_max_lateral_boundary_bound();
  double max_lateral_boundary_bound() const;
  void set_max_lateral_boundary_bound(double value);
  private:
  double _internal_max_lateral_boundary_bound() const;
  void _internal_set_max_lateral_boundary_bound(double value);
  public:

  // optional double min_lateral_boundary_bound = 4 [default = 0.2];
  bool has_min_lateral_boundary_bound() const;
  private:
  bool _internal_has_min_lateral_boundary_bound() const;
  public:
  void clear_min_lateral_boundary_bound();
  double min_lateral_boundary_bound() const;
  void set_min_lateral_boundary_bound(double value);
  private:
  double _internal_min_lateral_boundary_bound() const;
  void _internal_set_min_lateral_boundary_bound(double value);
  public:

  // optional double curb_shift = 6 [default = 0.2];
  bool has_curb_shift() const;
  private:
  bool _internal_has_curb_shift() const;
  public:
  void clear_curb_shift();
  double curb_shift() const;
  void set_curb_shift(double value);
  private:
  double _internal_curb_shift() const;
  void _internal_set_curb_shift(double value);
  public:

  // optional double lateral_buffer = 7 [default = 0.2];
  bool has_lateral_buffer() const;
  private:
  bool _internal_has_lateral_buffer() const;
  public:
  void clear_lateral_buffer();
  double lateral_buffer() const;
  void set_lateral_buffer(double value);
  private:
  double _internal_lateral_buffer() const;
  void _internal_set_lateral_buffer(double value);
  public:

  // optional double resolution = 8 [default = 0.02];
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
  bool has_qp_spline() const;
  private:
  bool _internal_has_qp_spline() const;
  public:
  void clear_qp_spline();
  const ::apollo::planning::QpSplineSmootherConfig& qp_spline() const;
  PROTOBUF_NODISCARD ::apollo::planning::QpSplineSmootherConfig* release_qp_spline();
  ::apollo::planning::QpSplineSmootherConfig* mutable_qp_spline();
  void set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline);
  private:
  const ::apollo::planning::QpSplineSmootherConfig& _internal_qp_spline() const;
  ::apollo::planning::QpSplineSmootherConfig* _internal_mutable_qp_spline();
  public:
  void unsafe_arena_set_allocated_qp_spline(
      ::apollo::planning::QpSplineSmootherConfig* qp_spline);
  ::apollo::planning::QpSplineSmootherConfig* unsafe_arena_release_qp_spline();

  // .apollo.planning.SpiralSmootherConfig spiral = 21;
  bool has_spiral() const;
  private:
  bool _internal_has_spiral() const;
  public:
  void clear_spiral();
  const ::apollo::planning::SpiralSmootherConfig& spiral() const;
  PROTOBUF_NODISCARD ::apollo::planning::SpiralSmootherConfig* release_spiral();
  ::apollo::planning::SpiralSmootherConfig* mutable_spiral();
  void set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral);
  private:
  const ::apollo::planning::SpiralSmootherConfig& _internal_spiral() const;
  ::apollo::planning::SpiralSmootherConfig* _internal_mutable_spiral();
  public:
  void unsafe_arena_set_allocated_spiral(
      ::apollo::planning::SpiralSmootherConfig* spiral);
  ::apollo::planning::SpiralSmootherConfig* unsafe_arena_release_spiral();

  // .apollo.planning.DiscretePointsSmootherConfig discrete_points = 22;
  bool has_discrete_points() const;
  private:
  bool _internal_has_discrete_points() const;
  public:
  void clear_discrete_points();
  const ::apollo::planning::DiscretePointsSmootherConfig& discrete_points() const;
  PROTOBUF_NODISCARD ::apollo::planning::DiscretePointsSmootherConfig* release_discrete_points();
  ::apollo::planning::DiscretePointsSmootherConfig* mutable_discrete_points();
  void set_allocated_discrete_points(::apollo::planning::DiscretePointsSmootherConfig* discrete_points);
  private:
  const ::apollo::planning::DiscretePointsSmootherConfig& _internal_discrete_points() const;
  ::apollo::planning::DiscretePointsSmootherConfig* _internal_mutable_discrete_points();
  public:
  void unsafe_arena_set_allocated_discrete_points(
      ::apollo::planning::DiscretePointsSmootherConfig* discrete_points);
  ::apollo::planning::DiscretePointsSmootherConfig* unsafe_arena_release_discrete_points();

  void clear_SmootherConfig();
  SmootherConfigCase SmootherConfig_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ReferenceLineSmootherConfig)
 private:
  class _Internal;
  void set_has_qp_spline();
  void set_has_spiral();
  void set_has_discrete_points();

  inline bool has_SmootherConfig() const;
  inline void clear_has_SmootherConfig();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t num_of_total_points_;
    double max_constraint_interval_;
    double longitudinal_boundary_bound_;
    double max_lateral_boundary_bound_;
    double min_lateral_boundary_bound_;
    double curb_shift_;
    double lateral_buffer_;
    double resolution_;
    union SmootherConfigUnion {
      constexpr SmootherConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::QpSplineSmootherConfig* qp_spline_;
      ::apollo::planning::SpiralSmootherConfig* spiral_;
      ::apollo::planning::DiscretePointsSmootherConfig* discrete_points_;
    } SmootherConfig_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QpSplineSmootherConfig

// optional uint32 spline_order = 1 [default = 5];
inline bool QpSplineSmootherConfig::_internal_has_spline_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QpSplineSmootherConfig::has_spline_order() const {
  return _internal_has_spline_order();
}
inline void QpSplineSmootherConfig::clear_spline_order() {
  _impl_.spline_order_ = 5u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t QpSplineSmootherConfig::_internal_spline_order() const {
  return _impl_.spline_order_;
}
inline uint32_t QpSplineSmootherConfig::spline_order() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.spline_order)
  return _internal_spline_order();
}
inline void QpSplineSmootherConfig::_internal_set_spline_order(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.spline_order_ = value;
}
inline void QpSplineSmootherConfig::set_spline_order(uint32_t value) {
  _internal_set_spline_order(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.spline_order)
}

// optional double max_spline_length = 2 [default = 25];
inline bool QpSplineSmootherConfig::_internal_has_max_spline_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool QpSplineSmootherConfig::has_max_spline_length() const {
  return _internal_has_max_spline_length();
}
inline void QpSplineSmootherConfig::clear_max_spline_length() {
  _impl_.max_spline_length_ = 25;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QpSplineSmootherConfig::_internal_max_spline_length() const {
  return _impl_.max_spline_length_;
}
inline double QpSplineSmootherConfig::max_spline_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.max_spline_length)
  return _internal_max_spline_length();
}
inline void QpSplineSmootherConfig::_internal_set_max_spline_length(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_spline_length_ = value;
}
inline void QpSplineSmootherConfig::set_max_spline_length(double value) {
  _internal_set_max_spline_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.max_spline_length)
}

// optional double regularization_weight = 3 [default = 0.1];
inline bool QpSplineSmootherConfig::_internal_has_regularization_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool QpSplineSmootherConfig::has_regularization_weight() const {
  return _internal_has_regularization_weight();
}
inline void QpSplineSmootherConfig::clear_regularization_weight() {
  _impl_.regularization_weight_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QpSplineSmootherConfig::_internal_regularization_weight() const {
  return _impl_.regularization_weight_;
}
inline double QpSplineSmootherConfig::regularization_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.regularization_weight)
  return _internal_regularization_weight();
}
inline void QpSplineSmootherConfig::_internal_set_regularization_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.regularization_weight_ = value;
}
inline void QpSplineSmootherConfig::set_regularization_weight(double value) {
  _internal_set_regularization_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.regularization_weight)
}

// optional double second_derivative_weight = 4 [default = 0];
inline bool QpSplineSmootherConfig::_internal_has_second_derivative_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QpSplineSmootherConfig::has_second_derivative_weight() const {
  return _internal_has_second_derivative_weight();
}
inline void QpSplineSmootherConfig::clear_second_derivative_weight() {
  _impl_.second_derivative_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double QpSplineSmootherConfig::_internal_second_derivative_weight() const {
  return _impl_.second_derivative_weight_;
}
inline double QpSplineSmootherConfig::second_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
  return _internal_second_derivative_weight();
}
inline void QpSplineSmootherConfig::_internal_set_second_derivative_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.second_derivative_weight_ = value;
}
inline void QpSplineSmootherConfig::set_second_derivative_weight(double value) {
  _internal_set_second_derivative_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.second_derivative_weight)
}

// optional double third_derivative_weight = 5 [default = 100];
inline bool QpSplineSmootherConfig::_internal_has_third_derivative_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool QpSplineSmootherConfig::has_third_derivative_weight() const {
  return _internal_has_third_derivative_weight();
}
inline void QpSplineSmootherConfig::clear_third_derivative_weight() {
  _impl_.third_derivative_weight_ = 100;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double QpSplineSmootherConfig::_internal_third_derivative_weight() const {
  return _impl_.third_derivative_weight_;
}
inline double QpSplineSmootherConfig::third_derivative_weight() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
  return _internal_third_derivative_weight();
}
inline void QpSplineSmootherConfig::_internal_set_third_derivative_weight(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.third_derivative_weight_ = value;
}
inline void QpSplineSmootherConfig::set_third_derivative_weight(double value) {
  _internal_set_third_derivative_weight(value);
  // @@protoc_insertion_point(field_set:apollo.planning.QpSplineSmootherConfig.third_derivative_weight)
}

// -------------------------------------------------------------------

// SpiralSmootherConfig

// optional double max_deviation = 1 [default = 0.1];
inline bool SpiralSmootherConfig::_internal_has_max_deviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_max_deviation() const {
  return _internal_has_max_deviation();
}
inline void SpiralSmootherConfig::clear_max_deviation() {
  _impl_.max_deviation_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SpiralSmootherConfig::_internal_max_deviation() const {
  return _impl_.max_deviation_;
}
inline double SpiralSmootherConfig::max_deviation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_deviation)
  return _internal_max_deviation();
}
inline void SpiralSmootherConfig::_internal_set_max_deviation(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_deviation_ = value;
}
inline void SpiralSmootherConfig::set_max_deviation(double value) {
  _internal_set_max_deviation(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_deviation)
}

// optional double piecewise_length = 2 [default = 10];
inline bool SpiralSmootherConfig::_internal_has_piecewise_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_piecewise_length() const {
  return _internal_has_piecewise_length();
}
inline void SpiralSmootherConfig::clear_piecewise_length() {
  _impl_.piecewise_length_ = 10;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SpiralSmootherConfig::_internal_piecewise_length() const {
  return _impl_.piecewise_length_;
}
inline double SpiralSmootherConfig::piecewise_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.piecewise_length)
  return _internal_piecewise_length();
}
inline void SpiralSmootherConfig::_internal_set_piecewise_length(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.piecewise_length_ = value;
}
inline void SpiralSmootherConfig::set_piecewise_length(double value) {
  _internal_set_piecewise_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.piecewise_length)
}

// optional uint32 max_iteration = 3 [default = 1000];
inline bool SpiralSmootherConfig::_internal_has_max_iteration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_max_iteration() const {
  return _internal_has_max_iteration();
}
inline void SpiralSmootherConfig::clear_max_iteration() {
  _impl_.max_iteration_ = 1000u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t SpiralSmootherConfig::_internal_max_iteration() const {
  return _impl_.max_iteration_;
}
inline uint32_t SpiralSmootherConfig::max_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.max_iteration)
  return _internal_max_iteration();
}
inline void SpiralSmootherConfig::_internal_set_max_iteration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_iteration_ = value;
}
inline void SpiralSmootherConfig::set_max_iteration(uint32_t value) {
  _internal_set_max_iteration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.max_iteration)
}

// optional double opt_tol = 4 [default = 1e-08];
inline bool SpiralSmootherConfig::_internal_has_opt_tol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_opt_tol() const {
  return _internal_has_opt_tol();
}
inline void SpiralSmootherConfig::clear_opt_tol() {
  _impl_.opt_tol_ = 1e-08;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SpiralSmootherConfig::_internal_opt_tol() const {
  return _impl_.opt_tol_;
}
inline double SpiralSmootherConfig::opt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_tol)
  return _internal_opt_tol();
}
inline void SpiralSmootherConfig::_internal_set_opt_tol(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.opt_tol_ = value;
}
inline void SpiralSmootherConfig::set_opt_tol(double value) {
  _internal_set_opt_tol(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_tol)
}

// optional double opt_acceptable_tol = 5 [default = 1e-06];
inline bool SpiralSmootherConfig::_internal_has_opt_acceptable_tol() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_opt_acceptable_tol() const {
  return _internal_has_opt_acceptable_tol();
}
inline void SpiralSmootherConfig::clear_opt_acceptable_tol() {
  _impl_.opt_acceptable_tol_ = 1e-06;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SpiralSmootherConfig::_internal_opt_acceptable_tol() const {
  return _impl_.opt_acceptable_tol_;
}
inline double SpiralSmootherConfig::opt_acceptable_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
  return _internal_opt_acceptable_tol();
}
inline void SpiralSmootherConfig::_internal_set_opt_acceptable_tol(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.opt_acceptable_tol_ = value;
}
inline void SpiralSmootherConfig::set_opt_acceptable_tol(double value) {
  _internal_set_opt_acceptable_tol(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_tol)
}

// optional uint32 opt_acceptable_iteration = 6 [default = 15];
inline bool SpiralSmootherConfig::_internal_has_opt_acceptable_iteration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_opt_acceptable_iteration() const {
  return _internal_has_opt_acceptable_iteration();
}
inline void SpiralSmootherConfig::clear_opt_acceptable_iteration() {
  _impl_.opt_acceptable_iteration_ = 15u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t SpiralSmootherConfig::_internal_opt_acceptable_iteration() const {
  return _impl_.opt_acceptable_iteration_;
}
inline uint32_t SpiralSmootherConfig::opt_acceptable_iteration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
  return _internal_opt_acceptable_iteration();
}
inline void SpiralSmootherConfig::_internal_set_opt_acceptable_iteration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.opt_acceptable_iteration_ = value;
}
inline void SpiralSmootherConfig::set_opt_acceptable_iteration(uint32_t value) {
  _internal_set_opt_acceptable_iteration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.opt_acceptable_iteration)
}

// optional double weight_curve_length = 7 [default = 1];
inline bool SpiralSmootherConfig::_internal_has_weight_curve_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_weight_curve_length() const {
  return _internal_has_weight_curve_length();
}
inline void SpiralSmootherConfig::clear_weight_curve_length() {
  _impl_.weight_curve_length_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SpiralSmootherConfig::_internal_weight_curve_length() const {
  return _impl_.weight_curve_length_;
}
inline double SpiralSmootherConfig::weight_curve_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.weight_curve_length)
  return _internal_weight_curve_length();
}
inline void SpiralSmootherConfig::_internal_set_weight_curve_length(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.weight_curve_length_ = value;
}
inline void SpiralSmootherConfig::set_weight_curve_length(double value) {
  _internal_set_weight_curve_length(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.weight_curve_length)
}

// optional double weight_kappa = 8 [default = 1];
inline bool SpiralSmootherConfig::_internal_has_weight_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_weight_kappa() const {
  return _internal_has_weight_kappa();
}
inline void SpiralSmootherConfig::clear_weight_kappa() {
  _impl_.weight_kappa_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double SpiralSmootherConfig::_internal_weight_kappa() const {
  return _impl_.weight_kappa_;
}
inline double SpiralSmootherConfig::weight_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.weight_kappa)
  return _internal_weight_kappa();
}
inline void SpiralSmootherConfig::_internal_set_weight_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.weight_kappa_ = value;
}
inline void SpiralSmootherConfig::set_weight_kappa(double value) {
  _internal_set_weight_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.weight_kappa)
}

// optional double weight_dkappa = 9 [default = 100];
inline bool SpiralSmootherConfig::_internal_has_weight_dkappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SpiralSmootherConfig::has_weight_dkappa() const {
  return _internal_has_weight_dkappa();
}
inline void SpiralSmootherConfig::clear_weight_dkappa() {
  _impl_.weight_dkappa_ = 100;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SpiralSmootherConfig::_internal_weight_dkappa() const {
  return _impl_.weight_dkappa_;
}
inline double SpiralSmootherConfig::weight_dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SpiralSmootherConfig.weight_dkappa)
  return _internal_weight_dkappa();
}
inline void SpiralSmootherConfig::_internal_set_weight_dkappa(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.weight_dkappa_ = value;
}
inline void SpiralSmootherConfig::set_weight_dkappa(double value) {
  _internal_set_weight_dkappa(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SpiralSmootherConfig.weight_dkappa)
}

// -------------------------------------------------------------------

// DiscretePointsSmootherConfig

// optional .apollo.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3 [default = FEM_POS_DEVIATION_SMOOTHING];
inline bool DiscretePointsSmootherConfig::_internal_has_smoothing_method() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DiscretePointsSmootherConfig::has_smoothing_method() const {
  return _internal_has_smoothing_method();
}
inline void DiscretePointsSmootherConfig::clear_smoothing_method() {
  _impl_.smoothing_method_ = 2;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::_internal_smoothing_method() const {
  return static_cast< ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod >(_impl_.smoothing_method_);
}
inline ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::smoothing_method() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DiscretePointsSmootherConfig.smoothing_method)
  return _internal_smoothing_method();
}
inline void DiscretePointsSmootherConfig::_internal_set_smoothing_method(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod value) {
  assert(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.smoothing_method_ = value;
}
inline void DiscretePointsSmootherConfig::set_smoothing_method(::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod value) {
  _internal_set_smoothing_method(value);
  // @@protoc_insertion_point(field_set:apollo.planning.DiscretePointsSmootherConfig.smoothing_method)
}

// .apollo.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
inline bool DiscretePointsSmootherConfig::_internal_has_cos_theta_smoothing() const {
  return SmootherConfig_case() == kCosThetaSmoothing;
}
inline bool DiscretePointsSmootherConfig::has_cos_theta_smoothing() const {
  return _internal_has_cos_theta_smoothing();
}
inline void DiscretePointsSmootherConfig::set_has_cos_theta_smoothing() {
  _impl_._oneof_case_[0] = kCosThetaSmoothing;
}
inline ::apollo::planning::CosThetaSmootherConfig* DiscretePointsSmootherConfig::release_cos_theta_smoothing() {
  // @@protoc_insertion_point(field_release:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
  if (_internal_has_cos_theta_smoothing()) {
    clear_has_SmootherConfig();
    ::apollo::planning::CosThetaSmootherConfig* temp = _impl_.SmootherConfig_.cos_theta_smoothing_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SmootherConfig_.cos_theta_smoothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::CosThetaSmootherConfig& DiscretePointsSmootherConfig::_internal_cos_theta_smoothing() const {
  return _internal_has_cos_theta_smoothing()
      ? *_impl_.SmootherConfig_.cos_theta_smoothing_
      : reinterpret_cast< ::apollo::planning::CosThetaSmootherConfig&>(::apollo::planning::_CosThetaSmootherConfig_default_instance_);
}
inline const ::apollo::planning::CosThetaSmootherConfig& DiscretePointsSmootherConfig::cos_theta_smoothing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
  return _internal_cos_theta_smoothing();
}
inline ::apollo::planning::CosThetaSmootherConfig* DiscretePointsSmootherConfig::unsafe_arena_release_cos_theta_smoothing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
  if (_internal_has_cos_theta_smoothing()) {
    clear_has_SmootherConfig();
    ::apollo::planning::CosThetaSmootherConfig* temp = _impl_.SmootherConfig_.cos_theta_smoothing_;
    _impl_.SmootherConfig_.cos_theta_smoothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DiscretePointsSmootherConfig::unsafe_arena_set_allocated_cos_theta_smoothing(::apollo::planning::CosThetaSmootherConfig* cos_theta_smoothing) {
  clear_SmootherConfig();
  if (cos_theta_smoothing) {
    set_has_cos_theta_smoothing();
    _impl_.SmootherConfig_.cos_theta_smoothing_ = cos_theta_smoothing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
}
inline ::apollo::planning::CosThetaSmootherConfig* DiscretePointsSmootherConfig::_internal_mutable_cos_theta_smoothing() {
  if (!_internal_has_cos_theta_smoothing()) {
    clear_SmootherConfig();
    set_has_cos_theta_smoothing();
    _impl_.SmootherConfig_.cos_theta_smoothing_ = CreateMaybeMessage< ::apollo::planning::CosThetaSmootherConfig >(GetArenaForAllocation());
  }
  return _impl_.SmootherConfig_.cos_theta_smoothing_;
}
inline ::apollo::planning::CosThetaSmootherConfig* DiscretePointsSmootherConfig::mutable_cos_theta_smoothing() {
  ::apollo::planning::CosThetaSmootherConfig* _msg = _internal_mutable_cos_theta_smoothing();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
  return _msg;
}

// .apollo.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
inline bool DiscretePointsSmootherConfig::_internal_has_fem_pos_deviation_smoothing() const {
  return SmootherConfig_case() == kFemPosDeviationSmoothing;
}
inline bool DiscretePointsSmootherConfig::has_fem_pos_deviation_smoothing() const {
  return _internal_has_fem_pos_deviation_smoothing();
}
inline void DiscretePointsSmootherConfig::set_has_fem_pos_deviation_smoothing() {
  _impl_._oneof_case_[0] = kFemPosDeviationSmoothing;
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* DiscretePointsSmootherConfig::release_fem_pos_deviation_smoothing() {
  // @@protoc_insertion_point(field_release:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
  if (_internal_has_fem_pos_deviation_smoothing()) {
    clear_has_SmootherConfig();
    ::apollo::planning::FemPosDeviationSmootherConfig* temp = _impl_.SmootherConfig_.fem_pos_deviation_smoothing_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SmootherConfig_.fem_pos_deviation_smoothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::FemPosDeviationSmootherConfig& DiscretePointsSmootherConfig::_internal_fem_pos_deviation_smoothing() const {
  return _internal_has_fem_pos_deviation_smoothing()
      ? *_impl_.SmootherConfig_.fem_pos_deviation_smoothing_
      : reinterpret_cast< ::apollo::planning::FemPosDeviationSmootherConfig&>(::apollo::planning::_FemPosDeviationSmootherConfig_default_instance_);
}
inline const ::apollo::planning::FemPosDeviationSmootherConfig& DiscretePointsSmootherConfig::fem_pos_deviation_smoothing() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
  return _internal_fem_pos_deviation_smoothing();
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* DiscretePointsSmootherConfig::unsafe_arena_release_fem_pos_deviation_smoothing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
  if (_internal_has_fem_pos_deviation_smoothing()) {
    clear_has_SmootherConfig();
    ::apollo::planning::FemPosDeviationSmootherConfig* temp = _impl_.SmootherConfig_.fem_pos_deviation_smoothing_;
    _impl_.SmootherConfig_.fem_pos_deviation_smoothing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DiscretePointsSmootherConfig::unsafe_arena_set_allocated_fem_pos_deviation_smoothing(::apollo::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing) {
  clear_SmootherConfig();
  if (fem_pos_deviation_smoothing) {
    set_has_fem_pos_deviation_smoothing();
    _impl_.SmootherConfig_.fem_pos_deviation_smoothing_ = fem_pos_deviation_smoothing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* DiscretePointsSmootherConfig::_internal_mutable_fem_pos_deviation_smoothing() {
  if (!_internal_has_fem_pos_deviation_smoothing()) {
    clear_SmootherConfig();
    set_has_fem_pos_deviation_smoothing();
    _impl_.SmootherConfig_.fem_pos_deviation_smoothing_ = CreateMaybeMessage< ::apollo::planning::FemPosDeviationSmootherConfig >(GetArenaForAllocation());
  }
  return _impl_.SmootherConfig_.fem_pos_deviation_smoothing_;
}
inline ::apollo::planning::FemPosDeviationSmootherConfig* DiscretePointsSmootherConfig::mutable_fem_pos_deviation_smoothing() {
  ::apollo::planning::FemPosDeviationSmootherConfig* _msg = _internal_mutable_fem_pos_deviation_smoothing();
  // @@protoc_insertion_point(field_mutable:apollo.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
  return _msg;
}

inline bool DiscretePointsSmootherConfig::has_SmootherConfig() const {
  return SmootherConfig_case() != SMOOTHERCONFIG_NOT_SET;
}
inline void DiscretePointsSmootherConfig::clear_has_SmootherConfig() {
  _impl_._oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}
inline DiscretePointsSmootherConfig::SmootherConfigCase DiscretePointsSmootherConfig::SmootherConfig_case() const {
  return DiscretePointsSmootherConfig::SmootherConfigCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReferenceLineSmootherConfig

// optional double max_constraint_interval = 1 [default = 5];
inline bool ReferenceLineSmootherConfig::_internal_has_max_constraint_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_max_constraint_interval() const {
  return _internal_has_max_constraint_interval();
}
inline void ReferenceLineSmootherConfig::clear_max_constraint_interval() {
  _impl_.max_constraint_interval_ = 5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ReferenceLineSmootherConfig::_internal_max_constraint_interval() const {
  return _impl_.max_constraint_interval_;
}
inline double ReferenceLineSmootherConfig::max_constraint_interval() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
  return _internal_max_constraint_interval();
}
inline void ReferenceLineSmootherConfig::_internal_set_max_constraint_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_constraint_interval_ = value;
}
inline void ReferenceLineSmootherConfig::set_max_constraint_interval(double value) {
  _internal_set_max_constraint_interval(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.max_constraint_interval)
}

// optional double longitudinal_boundary_bound = 2 [default = 1];
inline bool ReferenceLineSmootherConfig::_internal_has_longitudinal_boundary_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_longitudinal_boundary_bound() const {
  return _internal_has_longitudinal_boundary_bound();
}
inline void ReferenceLineSmootherConfig::clear_longitudinal_boundary_bound() {
  _impl_.longitudinal_boundary_bound_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ReferenceLineSmootherConfig::_internal_longitudinal_boundary_bound() const {
  return _impl_.longitudinal_boundary_bound_;
}
inline double ReferenceLineSmootherConfig::longitudinal_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
  return _internal_longitudinal_boundary_bound();
}
inline void ReferenceLineSmootherConfig::_internal_set_longitudinal_boundary_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.longitudinal_boundary_bound_ = value;
}
inline void ReferenceLineSmootherConfig::set_longitudinal_boundary_bound(double value) {
  _internal_set_longitudinal_boundary_bound(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.longitudinal_boundary_bound)
}

// optional double max_lateral_boundary_bound = 3 [default = 0.5];
inline bool ReferenceLineSmootherConfig::_internal_has_max_lateral_boundary_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_max_lateral_boundary_bound() const {
  return _internal_has_max_lateral_boundary_bound();
}
inline void ReferenceLineSmootherConfig::clear_max_lateral_boundary_bound() {
  _impl_.max_lateral_boundary_bound_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ReferenceLineSmootherConfig::_internal_max_lateral_boundary_bound() const {
  return _impl_.max_lateral_boundary_bound_;
}
inline double ReferenceLineSmootherConfig::max_lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.max_lateral_boundary_bound)
  return _internal_max_lateral_boundary_bound();
}
inline void ReferenceLineSmootherConfig::_internal_set_max_lateral_boundary_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_lateral_boundary_bound_ = value;
}
inline void ReferenceLineSmootherConfig::set_max_lateral_boundary_bound(double value) {
  _internal_set_max_lateral_boundary_bound(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.max_lateral_boundary_bound)
}

// optional double min_lateral_boundary_bound = 4 [default = 0.2];
inline bool ReferenceLineSmootherConfig::_internal_has_min_lateral_boundary_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_min_lateral_boundary_bound() const {
  return _internal_has_min_lateral_boundary_bound();
}
inline void ReferenceLineSmootherConfig::clear_min_lateral_boundary_bound() {
  _impl_.min_lateral_boundary_bound_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ReferenceLineSmootherConfig::_internal_min_lateral_boundary_bound() const {
  return _impl_.min_lateral_boundary_bound_;
}
inline double ReferenceLineSmootherConfig::min_lateral_boundary_bound() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.min_lateral_boundary_bound)
  return _internal_min_lateral_boundary_bound();
}
inline void ReferenceLineSmootherConfig::_internal_set_min_lateral_boundary_bound(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_lateral_boundary_bound_ = value;
}
inline void ReferenceLineSmootherConfig::set_min_lateral_boundary_bound(double value) {
  _internal_set_min_lateral_boundary_bound(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.min_lateral_boundary_bound)
}

// optional uint32 num_of_total_points = 5 [default = 500];
inline bool ReferenceLineSmootherConfig::_internal_has_num_of_total_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_num_of_total_points() const {
  return _internal_has_num_of_total_points();
}
inline void ReferenceLineSmootherConfig::clear_num_of_total_points() {
  _impl_.num_of_total_points_ = 500u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ReferenceLineSmootherConfig::_internal_num_of_total_points() const {
  return _impl_.num_of_total_points_;
}
inline uint32_t ReferenceLineSmootherConfig::num_of_total_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
  return _internal_num_of_total_points();
}
inline void ReferenceLineSmootherConfig::_internal_set_num_of_total_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_of_total_points_ = value;
}
inline void ReferenceLineSmootherConfig::set_num_of_total_points(uint32_t value) {
  _internal_set_num_of_total_points(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.num_of_total_points)
}

// optional double curb_shift = 6 [default = 0.2];
inline bool ReferenceLineSmootherConfig::_internal_has_curb_shift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_curb_shift() const {
  return _internal_has_curb_shift();
}
inline void ReferenceLineSmootherConfig::clear_curb_shift() {
  _impl_.curb_shift_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ReferenceLineSmootherConfig::_internal_curb_shift() const {
  return _impl_.curb_shift_;
}
inline double ReferenceLineSmootherConfig::curb_shift() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
  return _internal_curb_shift();
}
inline void ReferenceLineSmootherConfig::_internal_set_curb_shift(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.curb_shift_ = value;
}
inline void ReferenceLineSmootherConfig::set_curb_shift(double value) {
  _internal_set_curb_shift(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.curb_shift)
}

// optional double lateral_buffer = 7 [default = 0.2];
inline bool ReferenceLineSmootherConfig::_internal_has_lateral_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_lateral_buffer() const {
  return _internal_has_lateral_buffer();
}
inline void ReferenceLineSmootherConfig::clear_lateral_buffer() {
  _impl_.lateral_buffer_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ReferenceLineSmootherConfig::_internal_lateral_buffer() const {
  return _impl_.lateral_buffer_;
}
inline double ReferenceLineSmootherConfig::lateral_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.lateral_buffer)
  return _internal_lateral_buffer();
}
inline void ReferenceLineSmootherConfig::_internal_set_lateral_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.lateral_buffer_ = value;
}
inline void ReferenceLineSmootherConfig::set_lateral_buffer(double value) {
  _internal_set_lateral_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.lateral_buffer)
}

// optional double resolution = 8 [default = 0.02];
inline bool ReferenceLineSmootherConfig::_internal_has_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReferenceLineSmootherConfig::has_resolution() const {
  return _internal_has_resolution();
}
inline void ReferenceLineSmootherConfig::clear_resolution() {
  _impl_.resolution_ = 0.02;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ReferenceLineSmootherConfig::_internal_resolution() const {
  return _impl_.resolution_;
}
inline double ReferenceLineSmootherConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.resolution)
  return _internal_resolution();
}
inline void ReferenceLineSmootherConfig::_internal_set_resolution(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.resolution_ = value;
}
inline void ReferenceLineSmootherConfig::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ReferenceLineSmootherConfig.resolution)
}

// .apollo.planning.QpSplineSmootherConfig qp_spline = 20;
inline bool ReferenceLineSmootherConfig::_internal_has_qp_spline() const {
  return SmootherConfig_case() == kQpSpline;
}
inline bool ReferenceLineSmootherConfig::has_qp_spline() const {
  return _internal_has_qp_spline();
}
inline void ReferenceLineSmootherConfig::set_has_qp_spline() {
  _impl_._oneof_case_[0] = kQpSpline;
}
inline void ReferenceLineSmootherConfig::clear_qp_spline() {
  if (_internal_has_qp_spline()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SmootherConfig_.qp_spline_;
    }
    clear_has_SmootherConfig();
  }
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::release_qp_spline() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  if (_internal_has_qp_spline()) {
    clear_has_SmootherConfig();
    ::apollo::planning::QpSplineSmootherConfig* temp = _impl_.SmootherConfig_.qp_spline_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SmootherConfig_.qp_spline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::_internal_qp_spline() const {
  return _internal_has_qp_spline()
      ? *_impl_.SmootherConfig_.qp_spline_
      : reinterpret_cast< ::apollo::planning::QpSplineSmootherConfig&>(::apollo::planning::_QpSplineSmootherConfig_default_instance_);
}
inline const ::apollo::planning::QpSplineSmootherConfig& ReferenceLineSmootherConfig::qp_spline() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return _internal_qp_spline();
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::unsafe_arena_release_qp_spline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  if (_internal_has_qp_spline()) {
    clear_has_SmootherConfig();
    ::apollo::planning::QpSplineSmootherConfig* temp = _impl_.SmootherConfig_.qp_spline_;
    _impl_.SmootherConfig_.qp_spline_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReferenceLineSmootherConfig::unsafe_arena_set_allocated_qp_spline(::apollo::planning::QpSplineSmootherConfig* qp_spline) {
  clear_SmootherConfig();
  if (qp_spline) {
    set_has_qp_spline();
    _impl_.SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::_internal_mutable_qp_spline() {
  if (!_internal_has_qp_spline()) {
    clear_SmootherConfig();
    set_has_qp_spline();
    _impl_.SmootherConfig_.qp_spline_ = CreateMaybeMessage< ::apollo::planning::QpSplineSmootherConfig >(GetArenaForAllocation());
  }
  return _impl_.SmootherConfig_.qp_spline_;
}
inline ::apollo::planning::QpSplineSmootherConfig* ReferenceLineSmootherConfig::mutable_qp_spline() {
  ::apollo::planning::QpSplineSmootherConfig* _msg = _internal_mutable_qp_spline();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.qp_spline)
  return _msg;
}

// .apollo.planning.SpiralSmootherConfig spiral = 21;
inline bool ReferenceLineSmootherConfig::_internal_has_spiral() const {
  return SmootherConfig_case() == kSpiral;
}
inline bool ReferenceLineSmootherConfig::has_spiral() const {
  return _internal_has_spiral();
}
inline void ReferenceLineSmootherConfig::set_has_spiral() {
  _impl_._oneof_case_[0] = kSpiral;
}
inline void ReferenceLineSmootherConfig::clear_spiral() {
  if (_internal_has_spiral()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SmootherConfig_.spiral_;
    }
    clear_has_SmootherConfig();
  }
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::release_spiral() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.spiral)
  if (_internal_has_spiral()) {
    clear_has_SmootherConfig();
    ::apollo::planning::SpiralSmootherConfig* temp = _impl_.SmootherConfig_.spiral_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SmootherConfig_.spiral_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::SpiralSmootherConfig& ReferenceLineSmootherConfig::_internal_spiral() const {
  return _internal_has_spiral()
      ? *_impl_.SmootherConfig_.spiral_
      : reinterpret_cast< ::apollo::planning::SpiralSmootherConfig&>(::apollo::planning::_SpiralSmootherConfig_default_instance_);
}
inline const ::apollo::planning::SpiralSmootherConfig& ReferenceLineSmootherConfig::spiral() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return _internal_spiral();
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::unsafe_arena_release_spiral() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ReferenceLineSmootherConfig.spiral)
  if (_internal_has_spiral()) {
    clear_has_SmootherConfig();
    ::apollo::planning::SpiralSmootherConfig* temp = _impl_.SmootherConfig_.spiral_;
    _impl_.SmootherConfig_.spiral_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReferenceLineSmootherConfig::unsafe_arena_set_allocated_spiral(::apollo::planning::SpiralSmootherConfig* spiral) {
  clear_SmootherConfig();
  if (spiral) {
    set_has_spiral();
    _impl_.SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ReferenceLineSmootherConfig.spiral)
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::_internal_mutable_spiral() {
  if (!_internal_has_spiral()) {
    clear_SmootherConfig();
    set_has_spiral();
    _impl_.SmootherConfig_.spiral_ = CreateMaybeMessage< ::apollo::planning::SpiralSmootherConfig >(GetArenaForAllocation());
  }
  return _impl_.SmootherConfig_.spiral_;
}
inline ::apollo::planning::SpiralSmootherConfig* ReferenceLineSmootherConfig::mutable_spiral() {
  ::apollo::planning::SpiralSmootherConfig* _msg = _internal_mutable_spiral();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.spiral)
  return _msg;
}

// .apollo.planning.DiscretePointsSmootherConfig discrete_points = 22;
inline bool ReferenceLineSmootherConfig::_internal_has_discrete_points() const {
  return SmootherConfig_case() == kDiscretePoints;
}
inline bool ReferenceLineSmootherConfig::has_discrete_points() const {
  return _internal_has_discrete_points();
}
inline void ReferenceLineSmootherConfig::set_has_discrete_points() {
  _impl_._oneof_case_[0] = kDiscretePoints;
}
inline void ReferenceLineSmootherConfig::clear_discrete_points() {
  if (_internal_has_discrete_points()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.SmootherConfig_.discrete_points_;
    }
    clear_has_SmootherConfig();
  }
}
inline ::apollo::planning::DiscretePointsSmootherConfig* ReferenceLineSmootherConfig::release_discrete_points() {
  // @@protoc_insertion_point(field_release:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
  if (_internal_has_discrete_points()) {
    clear_has_SmootherConfig();
    ::apollo::planning::DiscretePointsSmootherConfig* temp = _impl_.SmootherConfig_.discrete_points_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.SmootherConfig_.discrete_points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::DiscretePointsSmootherConfig& ReferenceLineSmootherConfig::_internal_discrete_points() const {
  return _internal_has_discrete_points()
      ? *_impl_.SmootherConfig_.discrete_points_
      : reinterpret_cast< ::apollo::planning::DiscretePointsSmootherConfig&>(::apollo::planning::_DiscretePointsSmootherConfig_default_instance_);
}
inline const ::apollo::planning::DiscretePointsSmootherConfig& ReferenceLineSmootherConfig::discrete_points() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
  return _internal_discrete_points();
}
inline ::apollo::planning::DiscretePointsSmootherConfig* ReferenceLineSmootherConfig::unsafe_arena_release_discrete_points() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
  if (_internal_has_discrete_points()) {
    clear_has_SmootherConfig();
    ::apollo::planning::DiscretePointsSmootherConfig* temp = _impl_.SmootherConfig_.discrete_points_;
    _impl_.SmootherConfig_.discrete_points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReferenceLineSmootherConfig::unsafe_arena_set_allocated_discrete_points(::apollo::planning::DiscretePointsSmootherConfig* discrete_points) {
  clear_SmootherConfig();
  if (discrete_points) {
    set_has_discrete_points();
    _impl_.SmootherConfig_.discrete_points_ = discrete_points;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
}
inline ::apollo::planning::DiscretePointsSmootherConfig* ReferenceLineSmootherConfig::_internal_mutable_discrete_points() {
  if (!_internal_has_discrete_points()) {
    clear_SmootherConfig();
    set_has_discrete_points();
    _impl_.SmootherConfig_.discrete_points_ = CreateMaybeMessage< ::apollo::planning::DiscretePointsSmootherConfig >(GetArenaForAllocation());
  }
  return _impl_.SmootherConfig_.discrete_points_;
}
inline ::apollo::planning::DiscretePointsSmootherConfig* ReferenceLineSmootherConfig::mutable_discrete_points() {
  ::apollo::planning::DiscretePointsSmootherConfig* _msg = _internal_mutable_discrete_points();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ReferenceLineSmootherConfig.discrete_points)
  return _msg;
}

inline bool ReferenceLineSmootherConfig::has_SmootherConfig() const {
  return SmootherConfig_case() != SMOOTHERCONFIG_NOT_SET;
}
inline void ReferenceLineSmootherConfig::clear_has_SmootherConfig() {
  _impl_._oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}
inline ReferenceLineSmootherConfig::SmootherConfigCase ReferenceLineSmootherConfig::SmootherConfig_case() const {
  return ReferenceLineSmootherConfig::SmootherConfigCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod>() {
  return ::apollo::planning::DiscretePointsSmootherConfig_SmoothingMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2freference_5fline_5fsmoother_5fconfig_2eproto
