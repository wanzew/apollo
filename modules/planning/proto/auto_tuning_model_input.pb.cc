// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_model_input.proto

#include "modules/planning/proto/auto_tuning_model_input.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace planning {
namespace autotuning {
PROTOBUF_CONSTEXPR PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lateral_distance_)*/0} {}
struct PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal() {}
  union {
    PathPointwiseFeature_ObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal _PathPointwiseFeature_ObstacleFeature_default_instance_;
PROTOBUF_CONSTEXPR PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bound_distance_)*/0
  , /*decltype(_impl_.crossable_level_)*/0} {}
struct PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal() {}
  union {
    PathPointwiseFeature_BoundRelatedFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal _PathPointwiseFeature_BoundRelatedFeature_default_instance_;
PROTOBUF_CONSTEXPR PathPointwiseFeature::PathPointwiseFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.obstacle_info_)*/{}
  , /*decltype(_impl_.left_bound_feature_)*/nullptr
  , /*decltype(_impl_.right_bound_feature_)*/nullptr
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.dl_)*/0
  , /*decltype(_impl_.ddl_)*/0
  , /*decltype(_impl_.kappa_)*/0} {}
struct PathPointwiseFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathPointwiseFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathPointwiseFeatureDefaultTypeInternal() {}
  union {
    PathPointwiseFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathPointwiseFeatureDefaultTypeInternal _PathPointwiseFeature_default_instance_;
PROTOBUF_CONSTEXPR SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.longitudinal_distance_)*/0
  , /*decltype(_impl_.obstacle_speed_)*/0
  , /*decltype(_impl_.probability_)*/0
  , /*decltype(_impl_.relative_v_)*/0
  , /*decltype(_impl_.lateral_distance_)*/10} {}
struct SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal() {}
  union {
    SpeedPointwiseFeature_ObstacleFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal _SpeedPointwiseFeature_ObstacleFeature_default_instance_;
PROTOBUF_CONSTEXPR SpeedPointwiseFeature::SpeedPointwiseFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.follow_obs_feature_)*/{}
  , /*decltype(_impl_.overtake_obs_feature_)*/{}
  , /*decltype(_impl_.nudge_obs_feature_)*/{}
  , /*decltype(_impl_.stop_obs_feature_)*/{}
  , /*decltype(_impl_.virtual_obs_feature_)*/{}
  , /*decltype(_impl_.sidepass_front_obs_feature_)*/{}
  , /*decltype(_impl_.sidepass_rear_obs_feature_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.t_)*/0
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.speed_limit_)*/0
  , /*decltype(_impl_.acc_)*/0
  , /*decltype(_impl_.jerk_)*/0
  , /*decltype(_impl_.lateral_acc_)*/0
  , /*decltype(_impl_.path_curvature_abs_)*/0
  , /*decltype(_impl_.collision_times_)*/0} {}
struct SpeedPointwiseFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedPointwiseFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedPointwiseFeatureDefaultTypeInternal() {}
  union {
    SpeedPointwiseFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedPointwiseFeatureDefaultTypeInternal _SpeedPointwiseFeature_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_input_feature_)*/nullptr
  , /*decltype(_impl_.speed_input_feature_)*/nullptr} {}
struct TrajectoryPointwiseFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryPointwiseFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryPointwiseFeatureDefaultTypeInternal() {}
  union {
    TrajectoryPointwiseFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryPointwiseFeatureDefaultTypeInternal _TrajectoryPointwiseFeature_default_instance_;
PROTOBUF_CONSTEXPR TrajectoryFeature::TrajectoryFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.point_feature_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrajectoryFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrajectoryFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrajectoryFeatureDefaultTypeInternal() {}
  union {
    TrajectoryFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrajectoryFeatureDefaultTypeInternal _TrajectoryFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto = nullptr;

const uint32_t TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _impl_.lateral_distance_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _impl_.bound_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _impl_.crossable_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.dl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.ddl_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.kappa_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.obstacle_info_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.left_bound_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _impl_.right_bound_feature_),
  2,
  3,
  4,
  5,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_.longitudinal_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_.obstacle_speed_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_.lateral_distance_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_.probability_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _impl_.relative_v_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.t_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.jerk_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.follow_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.overtake_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.nudge_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.stop_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.collision_times_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.virtual_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.lateral_acc_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.path_curvature_abs_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.sidepass_front_obs_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _impl_.sidepass_rear_obs_feature_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  6,
  7,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _impl_.path_input_feature_),
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _impl_.speed_input_feature_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _impl_.point_feature_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature)},
  { 8, 16, -1, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature)},
  { 18, 31, -1, sizeof(::apollo::planning::autotuning::PathPointwiseFeature)},
  { 38, 49, -1, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature)},
  { 54, 76, -1, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature)},
  { 92, 100, -1, sizeof(::apollo::planning::autotuning::TrajectoryPointwiseFeature)},
  { 102, -1, -1, sizeof(::apollo::planning::autotuning::TrajectoryFeature)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::planning::autotuning::_PathPointwiseFeature_ObstacleFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_SpeedPointwiseFeature_ObstacleFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_._instance,
  &::apollo::planning::autotuning::_TrajectoryFeature_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/planning/proto/auto_tuning_mod"
  "el_input.proto\022\032apollo.planning.autotuni"
  "ng\"\371\004\n\024PathPointwiseFeature\022\t\n\001l\030\001 \001(\001\022\n"
  "\n\002dl\030\002 \001(\001\022\013\n\003ddl\030\003 \001(\001\022\r\n\005kappa\030\004 \001(\001\022W"
  "\n\robstacle_info\030\005 \003(\0132@.apollo.planning."
  "autotuning.PathPointwiseFeature.Obstacle"
  "Feature\022`\n\022left_bound_feature\030\006 \001(\0132D.ap"
  "ollo.planning.autotuning.PathPointwiseFe"
  "ature.BoundRelatedFeature\022a\n\023right_bound"
  "_feature\030\007 \001(\0132D.apollo.planning.autotun"
  "ing.PathPointwiseFeature.BoundRelatedFea"
  "ture\032+\n\017ObstacleFeature\022\030\n\020lateral_dista"
  "nce\030\001 \001(\001\032\342\001\n\023BoundRelatedFeature\022\026\n\016bou"
  "nd_distance\030\001 \001(\001\022l\n\017crossable_level\030\002 \001"
  "(\0162S.apollo.planning.autotuning.PathPoin"
  "twiseFeature.BoundRelatedFeature.Crossab"
  "leLevel\"E\n\016CrossableLevel\022\016\n\nCROSS_FREE\020"
  "\000\022\016\n\nCROSS_ABLE\020\001\022\023\n\017CROSS_FORBIDDEN\020\002\"\207"
  "\010\n\025SpeedPointwiseFeature\022\014\n\001s\030\001 \001(\001:\0010\022\014"
  "\n\001t\030\002 \001(\001:\0010\022\014\n\001v\030\003 \001(\001:\0010\022\026\n\013speed_limi"
  "t\030\004 \001(\001:\0010\022\016\n\003acc\030\005 \001(\001:\0010\022\017\n\004jerk\030\006 \001(\001"
  ":\0010\022]\n\022follow_obs_feature\030\007 \003(\0132A.apollo"
  ".planning.autotuning.SpeedPointwiseFeatu"
  "re.ObstacleFeature\022_\n\024overtake_obs_featu"
  "re\030\010 \003(\0132A.apollo.planning.autotuning.Sp"
  "eedPointwiseFeature.ObstacleFeature\022\\\n\021n"
  "udge_obs_feature\030\t \003(\0132A.apollo.planning"
  ".autotuning.SpeedPointwiseFeature.Obstac"
  "leFeature\022[\n\020stop_obs_feature\030\n \003(\0132A.ap"
  "ollo.planning.autotuning.SpeedPointwiseF"
  "eature.ObstacleFeature\022\032\n\017collision_time"
  "s\030\013 \001(\005:\0010\022^\n\023virtual_obs_feature\030\014 \003(\0132"
  "A.apollo.planning.autotuning.SpeedPointw"
  "iseFeature.ObstacleFeature\022\026\n\013lateral_ac"
  "c\030\r \001(\001:\0010\022\035\n\022path_curvature_abs\030\016 \001(\001:\001"
  "0\022e\n\032sidepass_front_obs_feature\030\017 \003(\0132A."
  "apollo.planning.autotuning.SpeedPointwis"
  "eFeature.ObstacleFeature\022d\n\031sidepass_rea"
  "r_obs_feature\030\020 \003(\0132A.apollo.planning.au"
  "totuning.SpeedPointwiseFeature.ObstacleF"
  "eature\032\217\001\n\017ObstacleFeature\022\035\n\025longitudin"
  "al_distance\030\001 \001(\001\022\026\n\016obstacle_speed\030\002 \001("
  "\001\022\034\n\020lateral_distance\030\003 \001(\001:\00210\022\023\n\013proba"
  "bility\030\004 \001(\001\022\022\n\nrelative_v\030\005 \001(\001\"\272\001\n\032Tra"
  "jectoryPointwiseFeature\022L\n\022path_input_fe"
  "ature\030\001 \001(\01320.apollo.planning.autotuning"
  ".PathPointwiseFeature\022N\n\023speed_input_fea"
  "ture\030\002 \001(\01321.apollo.planning.autotuning."
  "SpeedPointwiseFeature\"b\n\021TrajectoryFeatu"
  "re\022M\n\rpoint_feature\030\001 \003(\01326.apollo.plann"
  "ing.autotuning.TrajectoryPointwiseFeatur"
  "e"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto = {
    false, false, 2041, descriptor_table_protodef_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto,
    "modules/planning/proto/auto_tuning_model_input.proto",
    &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::offsets,
    file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto, file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto,
    file_level_service_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter() {
  return &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto);
namespace apollo {
namespace planning {
namespace autotuning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto);
  return file_level_enum_descriptors_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[0];
}
bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FREE;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_ABLE;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FORBIDDEN;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MIN;
constexpr PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MAX;
constexpr int PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PathPointwiseFeature_ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature_ObstacleFeature>()._impl_._has_bits_);
  static void set_has_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}
PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(const PathPointwiseFeature_ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lateral_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lateral_distance_ = from._impl_.lateral_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

inline void PathPointwiseFeature_ObstacleFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lateral_distance_){0}
  };
}

PathPointwiseFeature_ObstacleFeature::~PathPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPointwiseFeature_ObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lateral_distance_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPointwiseFeature_ObstacleFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lateral_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lateral_distance(&has_bits);
          _impl_.lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPointwiseFeature_ObstacleFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lateral_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return target;
}

size_t PathPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double lateral_distance = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPointwiseFeature_ObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathPointwiseFeature_ObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPointwiseFeature_ObstacleFeature::GetClassData() const { return &_class_data_; }

void PathPointwiseFeature_ObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathPointwiseFeature_ObstacleFeature *>(to)->MergeFrom(
      static_cast<const PathPointwiseFeature_ObstacleFeature &>(from));
}


void PathPointwiseFeature_ObstacleFeature::MergeFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lateral_distance()) {
    _internal_set_lateral_distance(from._internal_lateral_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_ObstacleFeature::InternalSwap(PathPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.lateral_distance_, other->_impl_.lateral_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature_ObstacleFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[0]);
}

// ===================================================================

class PathPointwiseFeature_BoundRelatedFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature_BoundRelatedFeature>()._impl_._has_bits_);
  static void set_has_bound_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crossable_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}
PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(const PathPointwiseFeature_BoundRelatedFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bound_distance_){}
    , decltype(_impl_.crossable_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bound_distance_, &from._impl_.bound_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crossable_level_) -
    reinterpret_cast<char*>(&_impl_.bound_distance_)) + sizeof(_impl_.crossable_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

inline void PathPointwiseFeature_BoundRelatedFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bound_distance_){0}
    , decltype(_impl_.crossable_level_){0}
  };
}

PathPointwiseFeature_BoundRelatedFeature::~PathPointwiseFeature_BoundRelatedFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPointwiseFeature_BoundRelatedFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PathPointwiseFeature_BoundRelatedFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPointwiseFeature_BoundRelatedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.bound_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crossable_level_) -
        reinterpret_cast<char*>(&_impl_.bound_distance_)) + sizeof(_impl_.crossable_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPointwiseFeature_BoundRelatedFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double bound_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_bound_distance(&has_bits);
          _impl_.bound_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(val))) {
            _internal_set_crossable_level(static_cast<::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPointwiseFeature_BoundRelatedFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double bound_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bound_distance(), target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_crossable_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return target;
}

size_t PathPointwiseFeature_BoundRelatedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double bound_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_crossable_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPointwiseFeature_BoundRelatedFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathPointwiseFeature_BoundRelatedFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPointwiseFeature_BoundRelatedFeature::GetClassData() const { return &_class_data_; }

void PathPointwiseFeature_BoundRelatedFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathPointwiseFeature_BoundRelatedFeature *>(to)->MergeFrom(
      static_cast<const PathPointwiseFeature_BoundRelatedFeature &>(from));
}


void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.bound_distance_ = from._impl_.bound_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.crossable_level_ = from._impl_.crossable_level_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_BoundRelatedFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_BoundRelatedFeature::InternalSwap(PathPointwiseFeature_BoundRelatedFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, _impl_.crossable_level_)
      + sizeof(PathPointwiseFeature_BoundRelatedFeature::_impl_.crossable_level_)
      - PROTOBUF_FIELD_OFFSET(PathPointwiseFeature_BoundRelatedFeature, _impl_.bound_distance_)>(
          reinterpret_cast<char*>(&_impl_.bound_distance_),
          reinterpret_cast<char*>(&other->_impl_.bound_distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature_BoundRelatedFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[1]);
}

// ===================================================================

class PathPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<PathPointwiseFeature>()._impl_._has_bits_);
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ddl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kappa(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& left_bound_feature(const PathPointwiseFeature* msg);
  static void set_has_left_bound_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& right_bound_feature(const PathPointwiseFeature* msg);
  static void set_has_right_bound_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature&
PathPointwiseFeature::_Internal::left_bound_feature(const PathPointwiseFeature* msg) {
  return *msg->_impl_.left_bound_feature_;
}
const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature&
PathPointwiseFeature::_Internal::right_bound_feature(const PathPointwiseFeature* msg) {
  return *msg->_impl_.right_bound_feature_;
}
PathPointwiseFeature::PathPointwiseFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.PathPointwiseFeature)
}
PathPointwiseFeature::PathPointwiseFeature(const PathPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_info_){from._impl_.obstacle_info_}
    , decltype(_impl_.left_bound_feature_){nullptr}
    , decltype(_impl_.right_bound_feature_){nullptr}
    , decltype(_impl_.l_){}
    , decltype(_impl_.dl_){}
    , decltype(_impl_.ddl_){}
    , decltype(_impl_.kappa_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_bound_feature()) {
    _impl_.left_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from._impl_.left_bound_feature_);
  }
  if (from._internal_has_right_bound_feature()) {
    _impl_.right_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from._impl_.right_bound_feature_);
  }
  ::memcpy(&_impl_.l_, &from._impl_.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kappa_) -
    reinterpret_cast<char*>(&_impl_.l_)) + sizeof(_impl_.kappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature)
}

inline void PathPointwiseFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.obstacle_info_){arena}
    , decltype(_impl_.left_bound_feature_){nullptr}
    , decltype(_impl_.right_bound_feature_){nullptr}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.dl_){0}
    , decltype(_impl_.ddl_){0}
    , decltype(_impl_.kappa_){0}
  };
}

PathPointwiseFeature::~PathPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathPointwiseFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obstacle_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.left_bound_feature_;
  if (this != internal_default_instance()) delete _impl_.right_bound_feature_;
}

void PathPointwiseFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obstacle_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.left_bound_feature_ != nullptr);
      _impl_.left_bound_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.right_bound_feature_ != nullptr);
      _impl_.right_bound_feature_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.l_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kappa_) -
        reinterpret_cast<char*>(&_impl_.l_)) + sizeof(_impl_.kappa_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathPointwiseFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double l = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_l(&has_bits);
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double dl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_dl(&has_bits);
          _impl_.dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double ddl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_ddl(&has_bits);
          _impl_.ddl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double kappa = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_kappa(&has_bits);
          _impl_.kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_bound_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_bound_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathPointwiseFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double l = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_l(), target);
  }

  // optional double dl = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_dl(), target);
  }

  // optional double ddl = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_ddl(), target);
  }

  // optional double kappa = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_kappa(), target);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::left_bound_feature(this),
        _Internal::left_bound_feature(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::right_bound_feature(this),
        _Internal::right_bound_feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature)
  return target;
}

size_t PathPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  total_size += 1UL * this->_internal_obstacle_info_size();
  for (const auto& msg : this->_impl_.obstacle_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_bound_feature_);
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_bound_feature_);
    }

    // optional double l = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double dl = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double kappa = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathPointwiseFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PathPointwiseFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathPointwiseFeature::GetClassData() const { return &_class_data_; }

void PathPointwiseFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PathPointwiseFeature *>(to)->MergeFrom(
      static_cast<const PathPointwiseFeature &>(from));
}


void PathPointwiseFeature::MergeFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.obstacle_info_.MergeFrom(from._impl_.obstacle_info_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_left_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from._internal_left_bound_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_right_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from._internal_right_bound_feature());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.l_ = from._impl_.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.dl_ = from._impl_.dl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ddl_ = from._impl_.ddl_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.kappa_ = from._impl_.kappa_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathPointwiseFeature::CopyFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature::InternalSwap(PathPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.obstacle_info_.InternalSwap(&other->_impl_.obstacle_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathPointwiseFeature, _impl_.kappa_)
      + sizeof(PathPointwiseFeature::_impl_.kappa_)
      - PROTOBUF_FIELD_OFFSET(PathPointwiseFeature, _impl_.left_bound_feature_)>(
          reinterpret_cast<char*>(&_impl_.left_bound_feature_),
          reinterpret_cast<char*>(&other->_impl_.left_bound_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathPointwiseFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[2]);
}

// ===================================================================

class SpeedPointwiseFeature_ObstacleFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointwiseFeature_ObstacleFeature>()._impl_._has_bits_);
  static void set_has_longitudinal_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lateral_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_relative_v(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}
SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(const SpeedPointwiseFeature_ObstacleFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.longitudinal_distance_){}
    , decltype(_impl_.obstacle_speed_){}
    , decltype(_impl_.probability_){}
    , decltype(_impl_.relative_v_){}
    , decltype(_impl_.lateral_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.longitudinal_distance_, &from._impl_.longitudinal_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lateral_distance_) -
    reinterpret_cast<char*>(&_impl_.longitudinal_distance_)) + sizeof(_impl_.lateral_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

inline void SpeedPointwiseFeature_ObstacleFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.longitudinal_distance_){0}
    , decltype(_impl_.obstacle_speed_){0}
    , decltype(_impl_.probability_){0}
    , decltype(_impl_.relative_v_){0}
    , decltype(_impl_.lateral_distance_){10}
  };
}

SpeedPointwiseFeature_ObstacleFeature::~SpeedPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPointwiseFeature_ObstacleFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.longitudinal_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.relative_v_) -
        reinterpret_cast<char*>(&_impl_.longitudinal_distance_)) + sizeof(_impl_.relative_v_));
    _impl_.lateral_distance_ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPointwiseFeature_ObstacleFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double longitudinal_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_longitudinal_distance(&has_bits);
          _impl_.longitudinal_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_obstacle_speed(&has_bits);
          _impl_.obstacle_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_distance = 3 [default = 10];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lateral_distance(&has_bits);
          _impl_.lateral_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double probability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_probability(&has_bits);
          _impl_.probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double relative_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_relative_v(&has_bits);
          _impl_.relative_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPointwiseFeature_ObstacleFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double longitudinal_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitudinal_distance(), target);
  }

  // optional double obstacle_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_obstacle_speed(), target);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_lateral_distance(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_probability(), target);
  }

  // optional double relative_v = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_relative_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return target;
}

size_t SpeedPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double longitudinal_distance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double probability = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double lateral_distance = 3 [default = 10];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPointwiseFeature_ObstacleFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPointwiseFeature_ObstacleFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPointwiseFeature_ObstacleFeature::GetClassData() const { return &_class_data_; }

void SpeedPointwiseFeature_ObstacleFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPointwiseFeature_ObstacleFeature *>(to)->MergeFrom(
      static_cast<const SpeedPointwiseFeature_ObstacleFeature &>(from));
}


void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.longitudinal_distance_ = from._impl_.longitudinal_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.obstacle_speed_ = from._impl_.obstacle_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.probability_ = from._impl_.probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.relative_v_ = from._impl_.relative_v_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.lateral_distance_ = from._impl_.lateral_distance_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature_ObstacleFeature::InternalSwap(SpeedPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, _impl_.relative_v_)
      + sizeof(SpeedPointwiseFeature_ObstacleFeature::_impl_.relative_v_)
      - PROTOBUF_FIELD_OFFSET(SpeedPointwiseFeature_ObstacleFeature, _impl_.longitudinal_distance_)>(
          reinterpret_cast<char*>(&_impl_.longitudinal_distance_),
          reinterpret_cast<char*>(&other->_impl_.longitudinal_distance_));
  swap(_impl_.lateral_distance_, other->_impl_.lateral_distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointwiseFeature_ObstacleFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[3]);
}

// ===================================================================

class SpeedPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedPointwiseFeature>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_v(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_jerk(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_collision_times(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lateral_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_path_curvature_abs(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SpeedPointwiseFeature::SpeedPointwiseFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}
SpeedPointwiseFeature::SpeedPointwiseFeature(const SpeedPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.follow_obs_feature_){from._impl_.follow_obs_feature_}
    , decltype(_impl_.overtake_obs_feature_){from._impl_.overtake_obs_feature_}
    , decltype(_impl_.nudge_obs_feature_){from._impl_.nudge_obs_feature_}
    , decltype(_impl_.stop_obs_feature_){from._impl_.stop_obs_feature_}
    , decltype(_impl_.virtual_obs_feature_){from._impl_.virtual_obs_feature_}
    , decltype(_impl_.sidepass_front_obs_feature_){from._impl_.sidepass_front_obs_feature_}
    , decltype(_impl_.sidepass_rear_obs_feature_){from._impl_.sidepass_rear_obs_feature_}
    , decltype(_impl_.s_){}
    , decltype(_impl_.t_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.speed_limit_){}
    , decltype(_impl_.acc_){}
    , decltype(_impl_.jerk_){}
    , decltype(_impl_.lateral_acc_){}
    , decltype(_impl_.path_curvature_abs_){}
    , decltype(_impl_.collision_times_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.collision_times_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.collision_times_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}

inline void SpeedPointwiseFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.follow_obs_feature_){arena}
    , decltype(_impl_.overtake_obs_feature_){arena}
    , decltype(_impl_.nudge_obs_feature_){arena}
    , decltype(_impl_.stop_obs_feature_){arena}
    , decltype(_impl_.virtual_obs_feature_){arena}
    , decltype(_impl_.sidepass_front_obs_feature_){arena}
    , decltype(_impl_.sidepass_rear_obs_feature_){arena}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.t_){0}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.speed_limit_){0}
    , decltype(_impl_.acc_){0}
    , decltype(_impl_.jerk_){0}
    , decltype(_impl_.lateral_acc_){0}
    , decltype(_impl_.path_curvature_abs_){0}
    , decltype(_impl_.collision_times_){0}
  };
}

SpeedPointwiseFeature::~SpeedPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedPointwiseFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.follow_obs_feature_.~RepeatedPtrField();
  _impl_.overtake_obs_feature_.~RepeatedPtrField();
  _impl_.nudge_obs_feature_.~RepeatedPtrField();
  _impl_.stop_obs_feature_.~RepeatedPtrField();
  _impl_.virtual_obs_feature_.~RepeatedPtrField();
  _impl_.sidepass_front_obs_feature_.~RepeatedPtrField();
  _impl_.sidepass_rear_obs_feature_.~RepeatedPtrField();
}

void SpeedPointwiseFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.follow_obs_feature_.Clear();
  _impl_.overtake_obs_feature_.Clear();
  _impl_.nudge_obs_feature_.Clear();
  _impl_.stop_obs_feature_.Clear();
  _impl_.virtual_obs_feature_.Clear();
  _impl_.sidepass_front_obs_feature_.Clear();
  _impl_.sidepass_rear_obs_feature_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.path_curvature_abs_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.path_curvature_abs_));
  }
  _impl_.collision_times_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedPointwiseFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double t = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_t(&has_bits);
          _impl_.t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double v = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_v(&has_bits);
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acc = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_acc(&has_bits);
          _impl_.acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double jerk = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_jerk(&has_bits);
          _impl_.jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_follow_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overtake_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nudge_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 collision_times = 11 [default = 0];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_collision_times(&has_bits);
          _impl_.collision_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double lateral_acc = 13 [default = 0];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_lateral_acc(&has_bits);
          _impl_.lateral_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double path_curvature_abs = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _Internal::set_has_path_curvature_abs(&has_bits);
          _impl_.path_curvature_abs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sidepass_front_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sidepass_rear_obs_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedPointwiseFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double t = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // optional double v = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // optional double speed_limit = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_speed_limit(), target);
  }

  // optional double acc = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_acc(), target);
  }

  // optional double jerk = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_jerk(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_follow_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_follow_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overtake_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_overtake_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nudge_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_nudge_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_collision_times(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_lateral_acc(), target);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_path_curvature_abs(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sidepass_front_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_sidepass_front_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sidepass_rear_obs_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_sidepass_rear_obs_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature)
  return target;
}

size_t SpeedPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  total_size += 1UL * this->_internal_follow_obs_feature_size();
  for (const auto& msg : this->_impl_.follow_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  total_size += 1UL * this->_internal_overtake_obs_feature_size();
  for (const auto& msg : this->_impl_.overtake_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  total_size += 1UL * this->_internal_nudge_obs_feature_size();
  for (const auto& msg : this->_impl_.nudge_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  total_size += 1UL * this->_internal_stop_obs_feature_size();
  for (const auto& msg : this->_impl_.stop_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  total_size += 1UL * this->_internal_virtual_obs_feature_size();
  for (const auto& msg : this->_impl_.virtual_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  total_size += 1UL * this->_internal_sidepass_front_obs_feature_size();
  for (const auto& msg : this->_impl_.sidepass_front_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  total_size += 2UL * this->_internal_sidepass_rear_obs_feature_size();
  for (const auto& msg : this->_impl_.sidepass_rear_obs_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double s = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double t = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double v = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double acc = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double jerk = 6 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double lateral_acc = 13 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double path_curvature_abs = 14 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_collision_times());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedPointwiseFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedPointwiseFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedPointwiseFeature::GetClassData() const { return &_class_data_; }

void SpeedPointwiseFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedPointwiseFeature *>(to)->MergeFrom(
      static_cast<const SpeedPointwiseFeature &>(from));
}


void SpeedPointwiseFeature::MergeFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.follow_obs_feature_.MergeFrom(from._impl_.follow_obs_feature_);
  _impl_.overtake_obs_feature_.MergeFrom(from._impl_.overtake_obs_feature_);
  _impl_.nudge_obs_feature_.MergeFrom(from._impl_.nudge_obs_feature_);
  _impl_.stop_obs_feature_.MergeFrom(from._impl_.stop_obs_feature_);
  _impl_.virtual_obs_feature_.MergeFrom(from._impl_.virtual_obs_feature_);
  _impl_.sidepass_front_obs_feature_.MergeFrom(from._impl_.sidepass_front_obs_feature_);
  _impl_.sidepass_rear_obs_feature_.MergeFrom(from._impl_.sidepass_rear_obs_feature_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.t_ = from._impl_.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.v_ = from._impl_.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.acc_ = from._impl_.acc_;
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.jerk_ = from._impl_.jerk_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.lateral_acc_ = from._impl_.lateral_acc_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.path_curvature_abs_ = from._impl_.path_curvature_abs_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_collision_times(from._internal_collision_times());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedPointwiseFeature::CopyFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature::InternalSwap(SpeedPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.follow_obs_feature_.InternalSwap(&other->_impl_.follow_obs_feature_);
  _impl_.overtake_obs_feature_.InternalSwap(&other->_impl_.overtake_obs_feature_);
  _impl_.nudge_obs_feature_.InternalSwap(&other->_impl_.nudge_obs_feature_);
  _impl_.stop_obs_feature_.InternalSwap(&other->_impl_.stop_obs_feature_);
  _impl_.virtual_obs_feature_.InternalSwap(&other->_impl_.virtual_obs_feature_);
  _impl_.sidepass_front_obs_feature_.InternalSwap(&other->_impl_.sidepass_front_obs_feature_);
  _impl_.sidepass_rear_obs_feature_.InternalSwap(&other->_impl_.sidepass_rear_obs_feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedPointwiseFeature, _impl_.collision_times_)
      + sizeof(SpeedPointwiseFeature::_impl_.collision_times_)
      - PROTOBUF_FIELD_OFFSET(SpeedPointwiseFeature, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedPointwiseFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[4]);
}

// ===================================================================

class TrajectoryPointwiseFeature::_Internal {
 public:
  using HasBits = decltype(std::declval<TrajectoryPointwiseFeature>()._impl_._has_bits_);
  static const ::apollo::planning::autotuning::PathPointwiseFeature& path_input_feature(const TrajectoryPointwiseFeature* msg);
  static void set_has_path_input_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::planning::autotuning::SpeedPointwiseFeature& speed_input_feature(const TrajectoryPointwiseFeature* msg);
  static void set_has_speed_input_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::planning::autotuning::PathPointwiseFeature&
TrajectoryPointwiseFeature::_Internal::path_input_feature(const TrajectoryPointwiseFeature* msg) {
  return *msg->_impl_.path_input_feature_;
}
const ::apollo::planning::autotuning::SpeedPointwiseFeature&
TrajectoryPointwiseFeature::_Internal::speed_input_feature(const TrajectoryPointwiseFeature* msg) {
  return *msg->_impl_.speed_input_feature_;
}
TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}
TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(const TrajectoryPointwiseFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_input_feature_){nullptr}
    , decltype(_impl_.speed_input_feature_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_input_feature()) {
    _impl_.path_input_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature(*from._impl_.path_input_feature_);
  }
  if (from._internal_has_speed_input_feature()) {
    _impl_.speed_input_feature_ = new ::apollo::planning::autotuning::SpeedPointwiseFeature(*from._impl_.speed_input_feature_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

inline void TrajectoryPointwiseFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_input_feature_){nullptr}
    , decltype(_impl_.speed_input_feature_){nullptr}
  };
}

TrajectoryPointwiseFeature::~TrajectoryPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryPointwiseFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_input_feature_;
  if (this != internal_default_instance()) delete _impl_.speed_input_feature_;
}

void TrajectoryPointwiseFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.path_input_feature_ != nullptr);
      _impl_.path_input_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.speed_input_feature_ != nullptr);
      _impl_.speed_input_feature_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPointwiseFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_input_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_input_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryPointwiseFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path_input_feature(this),
        _Internal::path_input_feature(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::speed_input_feature(this),
        _Internal::speed_input_feature(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return target;
}

size_t TrajectoryPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_input_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.speed_input_feature_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPointwiseFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPointwiseFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPointwiseFeature::GetClassData() const { return &_class_data_; }

void TrajectoryPointwiseFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryPointwiseFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryPointwiseFeature &>(from));
}


void TrajectoryPointwiseFeature::MergeFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path_input_feature()->::apollo::planning::autotuning::PathPointwiseFeature::MergeFrom(from._internal_path_input_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_speed_input_feature()->::apollo::planning::autotuning::SpeedPointwiseFeature::MergeFrom(from._internal_speed_input_feature());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPointwiseFeature::CopyFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointwiseFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointwiseFeature::InternalSwap(TrajectoryPointwiseFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPointwiseFeature, _impl_.speed_input_feature_)
      + sizeof(TrajectoryPointwiseFeature::_impl_.speed_input_feature_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPointwiseFeature, _impl_.path_input_feature_)>(
          reinterpret_cast<char*>(&_impl_.path_input_feature_),
          reinterpret_cast<char*>(&other->_impl_.path_input_feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPointwiseFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[5]);
}

// ===================================================================

class TrajectoryFeature::_Internal {
 public:
};

TrajectoryFeature::TrajectoryFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.planning.autotuning.TrajectoryFeature)
}
TrajectoryFeature::TrajectoryFeature(const TrajectoryFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.point_feature_){from._impl_.point_feature_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryFeature)
}

inline void TrajectoryFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.point_feature_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrajectoryFeature::~TrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrajectoryFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_feature_.~RepeatedPtrField();
}

void TrajectoryFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_feature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectoryFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_feature_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_feature(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryFeature)
  return target;
}

size_t TrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  total_size += 1UL * this->_internal_point_feature_size();
  for (const auto& msg : this->_impl_.point_feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryFeature::GetClassData() const { return &_class_data_; }

void TrajectoryFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectoryFeature *>(to)->MergeFrom(
      static_cast<const TrajectoryFeature &>(from));
}


void TrajectoryFeature::MergeFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.point_feature_.MergeFrom(from._impl_.point_feature_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryFeature::CopyFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryFeature::IsInitialized() const {
  return true;
}

void TrajectoryFeature::InternalSwap(TrajectoryFeature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.point_feature_.InternalSwap(&other->_impl_.point_feature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_getter, &descriptor_table_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto_once,
      file_level_metadata_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::PathPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryPointwiseFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::planning::autotuning::TrajectoryFeature*
Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::planning::autotuning::TrajectoryFeature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
