// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/dp_poly_path_config.pb.h"
#include "modules/planning/proto/dp_st_speed_config.pb.h"
#include "modules/planning/proto/qp_spline_path_config.pb.h"
#include "modules/planning/proto/qp_st_speed_config.pb.h"
#include "modules/planning/proto/poly_st_speed_config.pb.h"
#include "modules/planning/proto/navi_path_decider_config.pb.h"
#include "modules/planning/proto/navi_speed_decider_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
namespace apollo {
namespace planning {
class EMPlannerConfig;
struct EMPlannerConfigDefaultTypeInternal;
extern EMPlannerConfigDefaultTypeInternal _EMPlannerConfig_default_instance_;
class NaviPlannerConfig;
struct NaviPlannerConfigDefaultTypeInternal;
extern NaviPlannerConfigDefaultTypeInternal _NaviPlannerConfig_default_instance_;
class PlanningConfig;
struct PlanningConfigDefaultTypeInternal;
extern PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::EMPlannerConfig* Arena::CreateMaybeMessage<::apollo::planning::EMPlannerConfig>(Arena*);
template<> ::apollo::planning::NaviPlannerConfig* Arena::CreateMaybeMessage<::apollo::planning::NaviPlannerConfig>(Arena*);
template<> ::apollo::planning::PlanningConfig* Arena::CreateMaybeMessage<::apollo::planning::PlanningConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum PlanningConfig_PlannerType : int {
  PlanningConfig_PlannerType_RTK = 0,
  PlanningConfig_PlannerType_EM = 1,
  PlanningConfig_PlannerType_LATTICE = 2,
  PlanningConfig_PlannerType_NAVI = 3
};
bool PlanningConfig_PlannerType_IsValid(int value);
constexpr PlanningConfig_PlannerType PlanningConfig_PlannerType_PlannerType_MIN = PlanningConfig_PlannerType_RTK;
constexpr PlanningConfig_PlannerType PlanningConfig_PlannerType_PlannerType_MAX = PlanningConfig_PlannerType_NAVI;
constexpr int PlanningConfig_PlannerType_PlannerType_ARRAYSIZE = PlanningConfig_PlannerType_PlannerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningConfig_PlannerType_descriptor();
template<typename T>
inline const std::string& PlanningConfig_PlannerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningConfig_PlannerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningConfig_PlannerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningConfig_PlannerType_descriptor(), enum_t_value);
}
inline bool PlanningConfig_PlannerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlanningConfig_PlannerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningConfig_PlannerType>(
    PlanningConfig_PlannerType_descriptor(), name, value);
}
enum TaskType : int {
  DP_POLY_PATH_OPTIMIZER = 0,
  DP_ST_SPEED_OPTIMIZER = 1,
  QP_SPLINE_PATH_OPTIMIZER = 2,
  QP_SPLINE_ST_SPEED_OPTIMIZER = 3,
  PATH_DECIDER = 4,
  SPEED_DECIDER = 5,
  POLY_ST_SPEED_OPTIMIZER = 6,
  NAVI_PATH_DECIDER = 7,
  NAVI_SPEED_DECIDER = 8,
  NAVI_OBSTACLE_DECIDER = 9
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = DP_POLY_PATH_OPTIMIZER;
constexpr TaskType TaskType_MAX = NAVI_OBSTACLE_DECIDER;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class EMPlannerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.EMPlannerConfig) */ {
 public:
  inline EMPlannerConfig() : EMPlannerConfig(nullptr) {}
  ~EMPlannerConfig() override;
  explicit PROTOBUF_CONSTEXPR EMPlannerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EMPlannerConfig(const EMPlannerConfig& from);
  EMPlannerConfig(EMPlannerConfig&& from) noexcept
    : EMPlannerConfig() {
    *this = ::std::move(from);
  }

  inline EMPlannerConfig& operator=(const EMPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EMPlannerConfig& operator=(EMPlannerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EMPlannerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EMPlannerConfig* internal_default_instance() {
    return reinterpret_cast<const EMPlannerConfig*>(
               &_EMPlannerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EMPlannerConfig& a, EMPlannerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EMPlannerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EMPlannerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EMPlannerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EMPlannerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EMPlannerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EMPlannerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EMPlannerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.EMPlannerConfig";
  }
  protected:
  explicit EMPlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kDpPolyPathConfigFieldNumber = 2,
    kDpStSpeedConfigFieldNumber = 3,
    kQpSplinePathConfigFieldNumber = 4,
    kQpStSpeedConfigFieldNumber = 5,
    kPolyStSpeedConfigFieldNumber = 6,
  };
  // repeated .apollo.planning.TaskType task = 1;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  private:
  ::apollo::planning::TaskType _internal_task(int index) const;
  void _internal_add_task(::apollo::planning::TaskType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_task();
  public:
  ::apollo::planning::TaskType task(int index) const;
  void set_task(int index, ::apollo::planning::TaskType value);
  void add_task(::apollo::planning::TaskType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& task() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_task();

  // optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
  bool has_dp_poly_path_config() const;
  private:
  bool _internal_has_dp_poly_path_config() const;
  public:
  void clear_dp_poly_path_config();
  const ::apollo::planning::DpPolyPathConfig& dp_poly_path_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::DpPolyPathConfig* release_dp_poly_path_config();
  ::apollo::planning::DpPolyPathConfig* mutable_dp_poly_path_config();
  void set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config);
  private:
  const ::apollo::planning::DpPolyPathConfig& _internal_dp_poly_path_config() const;
  ::apollo::planning::DpPolyPathConfig* _internal_mutable_dp_poly_path_config();
  public:
  void unsafe_arena_set_allocated_dp_poly_path_config(
      ::apollo::planning::DpPolyPathConfig* dp_poly_path_config);
  ::apollo::planning::DpPolyPathConfig* unsafe_arena_release_dp_poly_path_config();

  // optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
  bool has_dp_st_speed_config() const;
  private:
  bool _internal_has_dp_st_speed_config() const;
  public:
  void clear_dp_st_speed_config();
  const ::apollo::planning::DpStSpeedConfig& dp_st_speed_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::DpStSpeedConfig* release_dp_st_speed_config();
  ::apollo::planning::DpStSpeedConfig* mutable_dp_st_speed_config();
  void set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config);
  private:
  const ::apollo::planning::DpStSpeedConfig& _internal_dp_st_speed_config() const;
  ::apollo::planning::DpStSpeedConfig* _internal_mutable_dp_st_speed_config();
  public:
  void unsafe_arena_set_allocated_dp_st_speed_config(
      ::apollo::planning::DpStSpeedConfig* dp_st_speed_config);
  ::apollo::planning::DpStSpeedConfig* unsafe_arena_release_dp_st_speed_config();

  // optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
  bool has_qp_spline_path_config() const;
  private:
  bool _internal_has_qp_spline_path_config() const;
  public:
  void clear_qp_spline_path_config();
  const ::apollo::planning::QpSplinePathConfig& qp_spline_path_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::QpSplinePathConfig* release_qp_spline_path_config();
  ::apollo::planning::QpSplinePathConfig* mutable_qp_spline_path_config();
  void set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config);
  private:
  const ::apollo::planning::QpSplinePathConfig& _internal_qp_spline_path_config() const;
  ::apollo::planning::QpSplinePathConfig* _internal_mutable_qp_spline_path_config();
  public:
  void unsafe_arena_set_allocated_qp_spline_path_config(
      ::apollo::planning::QpSplinePathConfig* qp_spline_path_config);
  ::apollo::planning::QpSplinePathConfig* unsafe_arena_release_qp_spline_path_config();

  // optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
  bool has_qp_st_speed_config() const;
  private:
  bool _internal_has_qp_st_speed_config() const;
  public:
  void clear_qp_st_speed_config();
  const ::apollo::planning::QpStSpeedConfig& qp_st_speed_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::QpStSpeedConfig* release_qp_st_speed_config();
  ::apollo::planning::QpStSpeedConfig* mutable_qp_st_speed_config();
  void set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config);
  private:
  const ::apollo::planning::QpStSpeedConfig& _internal_qp_st_speed_config() const;
  ::apollo::planning::QpStSpeedConfig* _internal_mutable_qp_st_speed_config();
  public:
  void unsafe_arena_set_allocated_qp_st_speed_config(
      ::apollo::planning::QpStSpeedConfig* qp_st_speed_config);
  ::apollo::planning::QpStSpeedConfig* unsafe_arena_release_qp_st_speed_config();

  // optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
  bool has_poly_st_speed_config() const;
  private:
  bool _internal_has_poly_st_speed_config() const;
  public:
  void clear_poly_st_speed_config();
  const ::apollo::planning::PolyStSpeedConfig& poly_st_speed_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PolyStSpeedConfig* release_poly_st_speed_config();
  ::apollo::planning::PolyStSpeedConfig* mutable_poly_st_speed_config();
  void set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config);
  private:
  const ::apollo::planning::PolyStSpeedConfig& _internal_poly_st_speed_config() const;
  ::apollo::planning::PolyStSpeedConfig* _internal_mutable_poly_st_speed_config();
  public:
  void unsafe_arena_set_allocated_poly_st_speed_config(
      ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config);
  ::apollo::planning::PolyStSpeedConfig* unsafe_arena_release_poly_st_speed_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.EMPlannerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> task_;
    ::apollo::planning::DpPolyPathConfig* dp_poly_path_config_;
    ::apollo::planning::DpStSpeedConfig* dp_st_speed_config_;
    ::apollo::planning::QpSplinePathConfig* qp_spline_path_config_;
    ::apollo::planning::QpStSpeedConfig* qp_st_speed_config_;
    ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NaviPlannerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NaviPlannerConfig) */ {
 public:
  inline NaviPlannerConfig() : NaviPlannerConfig(nullptr) {}
  ~NaviPlannerConfig() override;
  explicit PROTOBUF_CONSTEXPR NaviPlannerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NaviPlannerConfig(const NaviPlannerConfig& from);
  NaviPlannerConfig(NaviPlannerConfig&& from) noexcept
    : NaviPlannerConfig() {
    *this = ::std::move(from);
  }

  inline NaviPlannerConfig& operator=(const NaviPlannerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NaviPlannerConfig& operator=(NaviPlannerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NaviPlannerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NaviPlannerConfig* internal_default_instance() {
    return reinterpret_cast<const NaviPlannerConfig*>(
               &_NaviPlannerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NaviPlannerConfig& a, NaviPlannerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NaviPlannerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NaviPlannerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NaviPlannerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NaviPlannerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NaviPlannerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NaviPlannerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NaviPlannerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NaviPlannerConfig";
  }
  protected:
  explicit NaviPlannerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kNaviPathDeciderConfigFieldNumber = 2,
    kNaviSpeedDeciderConfigFieldNumber = 3,
  };
  // repeated .apollo.planning.TaskType task = 1;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  private:
  ::apollo::planning::TaskType _internal_task(int index) const;
  void _internal_add_task(::apollo::planning::TaskType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_task();
  public:
  ::apollo::planning::TaskType task(int index) const;
  void set_task(int index, ::apollo::planning::TaskType value);
  void add_task(::apollo::planning::TaskType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& task() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_task();

  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  bool has_navi_path_decider_config() const;
  private:
  bool _internal_has_navi_path_decider_config() const;
  public:
  void clear_navi_path_decider_config();
  const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviPathDeciderConfig* release_navi_path_decider_config();
  ::apollo::planning::NaviPathDeciderConfig* mutable_navi_path_decider_config();
  void set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config);
  private:
  const ::apollo::planning::NaviPathDeciderConfig& _internal_navi_path_decider_config() const;
  ::apollo::planning::NaviPathDeciderConfig* _internal_mutable_navi_path_decider_config();
  public:
  void unsafe_arena_set_allocated_navi_path_decider_config(
      ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config);
  ::apollo::planning::NaviPathDeciderConfig* unsafe_arena_release_navi_path_decider_config();

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  bool has_navi_speed_decider_config() const;
  private:
  bool _internal_has_navi_speed_decider_config() const;
  public:
  void clear_navi_speed_decider_config();
  const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviSpeedDeciderConfig* release_navi_speed_decider_config();
  ::apollo::planning::NaviSpeedDeciderConfig* mutable_navi_speed_decider_config();
  void set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config);
  private:
  const ::apollo::planning::NaviSpeedDeciderConfig& _internal_navi_speed_decider_config() const;
  ::apollo::planning::NaviSpeedDeciderConfig* _internal_mutable_navi_speed_decider_config();
  public:
  void unsafe_arena_set_allocated_navi_speed_decider_config(
      ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config);
  ::apollo::planning::NaviSpeedDeciderConfig* unsafe_arena_release_navi_speed_decider_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.NaviPlannerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> task_;
    ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config_;
    ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PlanningConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningConfig) */ {
 public:
  inline PlanningConfig() : PlanningConfig(nullptr) {}
  ~PlanningConfig() override;
  explicit PROTOBUF_CONSTEXPR PlanningConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningConfig(const PlanningConfig& from);
  PlanningConfig(PlanningConfig&& from) noexcept
    : PlanningConfig() {
    *this = ::std::move(from);
  }

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningConfig& operator=(PlanningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanningConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningConfig*>(
               &_PlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanningConfig& a, PlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningConfig";
  }
  protected:
  explicit PlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlanningConfig_PlannerType PlannerType;
  static constexpr PlannerType RTK =
    PlanningConfig_PlannerType_RTK;
  static constexpr PlannerType EM =
    PlanningConfig_PlannerType_EM;
  static constexpr PlannerType LATTICE =
    PlanningConfig_PlannerType_LATTICE;
  static constexpr PlannerType NAVI =
    PlanningConfig_PlannerType_NAVI;
  static inline bool PlannerType_IsValid(int value) {
    return PlanningConfig_PlannerType_IsValid(value);
  }
  static constexpr PlannerType PlannerType_MIN =
    PlanningConfig_PlannerType_PlannerType_MIN;
  static constexpr PlannerType PlannerType_MAX =
    PlanningConfig_PlannerType_PlannerType_MAX;
  static constexpr int PlannerType_ARRAYSIZE =
    PlanningConfig_PlannerType_PlannerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlannerType_descriptor() {
    return PlanningConfig_PlannerType_descriptor();
  }
  template<typename T>
  static inline const std::string& PlannerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlannerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlannerType_Name.");
    return PlanningConfig_PlannerType_Name(enum_t_value);
  }
  static inline bool PlannerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlannerType* value) {
    return PlanningConfig_PlannerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmPlannerConfigFieldNumber = 2,
    kNaviPlannerConfigFieldNumber = 3,
    kPlannerTypeFieldNumber = 1,
  };
  // optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
  bool has_em_planner_config() const;
  private:
  bool _internal_has_em_planner_config() const;
  public:
  void clear_em_planner_config();
  const ::apollo::planning::EMPlannerConfig& em_planner_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::EMPlannerConfig* release_em_planner_config();
  ::apollo::planning::EMPlannerConfig* mutable_em_planner_config();
  void set_allocated_em_planner_config(::apollo::planning::EMPlannerConfig* em_planner_config);
  private:
  const ::apollo::planning::EMPlannerConfig& _internal_em_planner_config() const;
  ::apollo::planning::EMPlannerConfig* _internal_mutable_em_planner_config();
  public:
  void unsafe_arena_set_allocated_em_planner_config(
      ::apollo::planning::EMPlannerConfig* em_planner_config);
  ::apollo::planning::EMPlannerConfig* unsafe_arena_release_em_planner_config();

  // optional .apollo.planning.NaviPlannerConfig navi_planner_config = 3;
  bool has_navi_planner_config() const;
  private:
  bool _internal_has_navi_planner_config() const;
  public:
  void clear_navi_planner_config();
  const ::apollo::planning::NaviPlannerConfig& navi_planner_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviPlannerConfig* release_navi_planner_config();
  ::apollo::planning::NaviPlannerConfig* mutable_navi_planner_config();
  void set_allocated_navi_planner_config(::apollo::planning::NaviPlannerConfig* navi_planner_config);
  private:
  const ::apollo::planning::NaviPlannerConfig& _internal_navi_planner_config() const;
  ::apollo::planning::NaviPlannerConfig* _internal_mutable_navi_planner_config();
  public:
  void unsafe_arena_set_allocated_navi_planner_config(
      ::apollo::planning::NaviPlannerConfig* navi_planner_config);
  ::apollo::planning::NaviPlannerConfig* unsafe_arena_release_navi_planner_config();

  // optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
  bool has_planner_type() const;
  private:
  bool _internal_has_planner_type() const;
  public:
  void clear_planner_type();
  ::apollo::planning::PlanningConfig_PlannerType planner_type() const;
  void set_planner_type(::apollo::planning::PlanningConfig_PlannerType value);
  private:
  ::apollo::planning::PlanningConfig_PlannerType _internal_planner_type() const;
  void _internal_set_planner_type(::apollo::planning::PlanningConfig_PlannerType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::EMPlannerConfig* em_planner_config_;
    ::apollo::planning::NaviPlannerConfig* navi_planner_config_;
    int planner_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EMPlannerConfig

// repeated .apollo.planning.TaskType task = 1;
inline int EMPlannerConfig::_internal_task_size() const {
  return _impl_.task_.size();
}
inline int EMPlannerConfig::task_size() const {
  return _internal_task_size();
}
inline void EMPlannerConfig::clear_task() {
  _impl_.task_.Clear();
}
inline ::apollo::planning::TaskType EMPlannerConfig::_internal_task(int index) const {
  return static_cast< ::apollo::planning::TaskType >(_impl_.task_.Get(index));
}
inline ::apollo::planning::TaskType EMPlannerConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.task)
  return _internal_task(index);
}
inline void EMPlannerConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  _impl_.task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.EMPlannerConfig.task)
}
inline void EMPlannerConfig::_internal_add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  _impl_.task_.Add(value);
}
inline void EMPlannerConfig::add_task(::apollo::planning::TaskType value) {
  _internal_add_task(value);
  // @@protoc_insertion_point(field_add:apollo.planning.EMPlannerConfig.task)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
EMPlannerConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.EMPlannerConfig.task)
  return _impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EMPlannerConfig::_internal_mutable_task() {
  return &_impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
EMPlannerConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.EMPlannerConfig.task)
  return _internal_mutable_task();
}

// optional .apollo.planning.DpPolyPathConfig dp_poly_path_config = 2;
inline bool EMPlannerConfig::_internal_has_dp_poly_path_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dp_poly_path_config_ != nullptr);
  return value;
}
inline bool EMPlannerConfig::has_dp_poly_path_config() const {
  return _internal_has_dp_poly_path_config();
}
inline const ::apollo::planning::DpPolyPathConfig& EMPlannerConfig::_internal_dp_poly_path_config() const {
  const ::apollo::planning::DpPolyPathConfig* p = _impl_.dp_poly_path_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::DpPolyPathConfig&>(
      ::apollo::planning::_DpPolyPathConfig_default_instance_);
}
inline const ::apollo::planning::DpPolyPathConfig& EMPlannerConfig::dp_poly_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return _internal_dp_poly_path_config();
}
inline void EMPlannerConfig::unsafe_arena_set_allocated_dp_poly_path_config(
    ::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dp_poly_path_config_);
  }
  _impl_.dp_poly_path_config_ = dp_poly_path_config;
  if (dp_poly_path_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.EMPlannerConfig.dp_poly_path_config)
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::release_dp_poly_path_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::DpPolyPathConfig* temp = _impl_.dp_poly_path_config_;
  _impl_.dp_poly_path_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::unsafe_arena_release_dp_poly_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::DpPolyPathConfig* temp = _impl_.dp_poly_path_config_;
  _impl_.dp_poly_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::_internal_mutable_dp_poly_path_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dp_poly_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpPolyPathConfig>(GetArenaForAllocation());
    _impl_.dp_poly_path_config_ = p;
  }
  return _impl_.dp_poly_path_config_;
}
inline ::apollo::planning::DpPolyPathConfig* EMPlannerConfig::mutable_dp_poly_path_config() {
  ::apollo::planning::DpPolyPathConfig* _msg = _internal_mutable_dp_poly_path_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_poly_path_config)
  return _msg;
}
inline void EMPlannerConfig::set_allocated_dp_poly_path_config(::apollo::planning::DpPolyPathConfig* dp_poly_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dp_poly_path_config_);
  }
  if (dp_poly_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dp_poly_path_config));
    if (message_arena != submessage_arena) {
      dp_poly_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dp_poly_path_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dp_poly_path_config_ = dp_poly_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_poly_path_config)
}

// optional .apollo.planning.DpStSpeedConfig dp_st_speed_config = 3;
inline bool EMPlannerConfig::_internal_has_dp_st_speed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dp_st_speed_config_ != nullptr);
  return value;
}
inline bool EMPlannerConfig::has_dp_st_speed_config() const {
  return _internal_has_dp_st_speed_config();
}
inline const ::apollo::planning::DpStSpeedConfig& EMPlannerConfig::_internal_dp_st_speed_config() const {
  const ::apollo::planning::DpStSpeedConfig* p = _impl_.dp_st_speed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::DpStSpeedConfig&>(
      ::apollo::planning::_DpStSpeedConfig_default_instance_);
}
inline const ::apollo::planning::DpStSpeedConfig& EMPlannerConfig::dp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return _internal_dp_st_speed_config();
}
inline void EMPlannerConfig::unsafe_arena_set_allocated_dp_st_speed_config(
    ::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dp_st_speed_config_);
  }
  _impl_.dp_st_speed_config_ = dp_st_speed_config;
  if (dp_st_speed_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.EMPlannerConfig.dp_st_speed_config)
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::release_dp_st_speed_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::DpStSpeedConfig* temp = _impl_.dp_st_speed_config_;
  _impl_.dp_st_speed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::unsafe_arena_release_dp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::DpStSpeedConfig* temp = _impl_.dp_st_speed_config_;
  _impl_.dp_st_speed_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::_internal_mutable_dp_st_speed_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dp_st_speed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::DpStSpeedConfig>(GetArenaForAllocation());
    _impl_.dp_st_speed_config_ = p;
  }
  return _impl_.dp_st_speed_config_;
}
inline ::apollo::planning::DpStSpeedConfig* EMPlannerConfig::mutable_dp_st_speed_config() {
  ::apollo::planning::DpStSpeedConfig* _msg = _internal_mutable_dp_st_speed_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.dp_st_speed_config)
  return _msg;
}
inline void EMPlannerConfig::set_allocated_dp_st_speed_config(::apollo::planning::DpStSpeedConfig* dp_st_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dp_st_speed_config_);
  }
  if (dp_st_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dp_st_speed_config));
    if (message_arena != submessage_arena) {
      dp_st_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dp_st_speed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dp_st_speed_config_ = dp_st_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.dp_st_speed_config)
}

// optional .apollo.planning.QpSplinePathConfig qp_spline_path_config = 4;
inline bool EMPlannerConfig::_internal_has_qp_spline_path_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qp_spline_path_config_ != nullptr);
  return value;
}
inline bool EMPlannerConfig::has_qp_spline_path_config() const {
  return _internal_has_qp_spline_path_config();
}
inline const ::apollo::planning::QpSplinePathConfig& EMPlannerConfig::_internal_qp_spline_path_config() const {
  const ::apollo::planning::QpSplinePathConfig* p = _impl_.qp_spline_path_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::QpSplinePathConfig&>(
      ::apollo::planning::_QpSplinePathConfig_default_instance_);
}
inline const ::apollo::planning::QpSplinePathConfig& EMPlannerConfig::qp_spline_path_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return _internal_qp_spline_path_config();
}
inline void EMPlannerConfig::unsafe_arena_set_allocated_qp_spline_path_config(
    ::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_spline_path_config_);
  }
  _impl_.qp_spline_path_config_ = qp_spline_path_config;
  if (qp_spline_path_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.EMPlannerConfig.qp_spline_path_config)
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::release_qp_spline_path_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::QpSplinePathConfig* temp = _impl_.qp_spline_path_config_;
  _impl_.qp_spline_path_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::unsafe_arena_release_qp_spline_path_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::QpSplinePathConfig* temp = _impl_.qp_spline_path_config_;
  _impl_.qp_spline_path_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::_internal_mutable_qp_spline_path_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.qp_spline_path_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QpSplinePathConfig>(GetArenaForAllocation());
    _impl_.qp_spline_path_config_ = p;
  }
  return _impl_.qp_spline_path_config_;
}
inline ::apollo::planning::QpSplinePathConfig* EMPlannerConfig::mutable_qp_spline_path_config() {
  ::apollo::planning::QpSplinePathConfig* _msg = _internal_mutable_qp_spline_path_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_spline_path_config)
  return _msg;
}
inline void EMPlannerConfig::set_allocated_qp_spline_path_config(::apollo::planning::QpSplinePathConfig* qp_spline_path_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_spline_path_config_);
  }
  if (qp_spline_path_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qp_spline_path_config));
    if (message_arena != submessage_arena) {
      qp_spline_path_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline_path_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.qp_spline_path_config_ = qp_spline_path_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_spline_path_config)
}

// optional .apollo.planning.QpStSpeedConfig qp_st_speed_config = 5;
inline bool EMPlannerConfig::_internal_has_qp_st_speed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.qp_st_speed_config_ != nullptr);
  return value;
}
inline bool EMPlannerConfig::has_qp_st_speed_config() const {
  return _internal_has_qp_st_speed_config();
}
inline const ::apollo::planning::QpStSpeedConfig& EMPlannerConfig::_internal_qp_st_speed_config() const {
  const ::apollo::planning::QpStSpeedConfig* p = _impl_.qp_st_speed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::QpStSpeedConfig&>(
      ::apollo::planning::_QpStSpeedConfig_default_instance_);
}
inline const ::apollo::planning::QpStSpeedConfig& EMPlannerConfig::qp_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return _internal_qp_st_speed_config();
}
inline void EMPlannerConfig::unsafe_arena_set_allocated_qp_st_speed_config(
    ::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_st_speed_config_);
  }
  _impl_.qp_st_speed_config_ = qp_st_speed_config;
  if (qp_st_speed_config) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.EMPlannerConfig.qp_st_speed_config)
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::release_qp_st_speed_config() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::QpStSpeedConfig* temp = _impl_.qp_st_speed_config_;
  _impl_.qp_st_speed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::unsafe_arena_release_qp_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::apollo::planning::QpStSpeedConfig* temp = _impl_.qp_st_speed_config_;
  _impl_.qp_st_speed_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::_internal_mutable_qp_st_speed_config() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.qp_st_speed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::QpStSpeedConfig>(GetArenaForAllocation());
    _impl_.qp_st_speed_config_ = p;
  }
  return _impl_.qp_st_speed_config_;
}
inline ::apollo::planning::QpStSpeedConfig* EMPlannerConfig::mutable_qp_st_speed_config() {
  ::apollo::planning::QpStSpeedConfig* _msg = _internal_mutable_qp_st_speed_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.qp_st_speed_config)
  return _msg;
}
inline void EMPlannerConfig::set_allocated_qp_st_speed_config(::apollo::planning::QpStSpeedConfig* qp_st_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.qp_st_speed_config_);
  }
  if (qp_st_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qp_st_speed_config));
    if (message_arena != submessage_arena) {
      qp_st_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_st_speed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.qp_st_speed_config_ = qp_st_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.qp_st_speed_config)
}

// optional .apollo.planning.PolyStSpeedConfig poly_st_speed_config = 6;
inline bool EMPlannerConfig::_internal_has_poly_st_speed_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poly_st_speed_config_ != nullptr);
  return value;
}
inline bool EMPlannerConfig::has_poly_st_speed_config() const {
  return _internal_has_poly_st_speed_config();
}
inline const ::apollo::planning::PolyStSpeedConfig& EMPlannerConfig::_internal_poly_st_speed_config() const {
  const ::apollo::planning::PolyStSpeedConfig* p = _impl_.poly_st_speed_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PolyStSpeedConfig&>(
      ::apollo::planning::_PolyStSpeedConfig_default_instance_);
}
inline const ::apollo::planning::PolyStSpeedConfig& EMPlannerConfig::poly_st_speed_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return _internal_poly_st_speed_config();
}
inline void EMPlannerConfig::unsafe_arena_set_allocated_poly_st_speed_config(
    ::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poly_st_speed_config_);
  }
  _impl_.poly_st_speed_config_ = poly_st_speed_config;
  if (poly_st_speed_config) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.EMPlannerConfig.poly_st_speed_config)
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::release_poly_st_speed_config() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::PolyStSpeedConfig* temp = _impl_.poly_st_speed_config_;
  _impl_.poly_st_speed_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::unsafe_arena_release_poly_st_speed_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::apollo::planning::PolyStSpeedConfig* temp = _impl_.poly_st_speed_config_;
  _impl_.poly_st_speed_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::_internal_mutable_poly_st_speed_config() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.poly_st_speed_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PolyStSpeedConfig>(GetArenaForAllocation());
    _impl_.poly_st_speed_config_ = p;
  }
  return _impl_.poly_st_speed_config_;
}
inline ::apollo::planning::PolyStSpeedConfig* EMPlannerConfig::mutable_poly_st_speed_config() {
  ::apollo::planning::PolyStSpeedConfig* _msg = _internal_mutable_poly_st_speed_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.EMPlannerConfig.poly_st_speed_config)
  return _msg;
}
inline void EMPlannerConfig::set_allocated_poly_st_speed_config(::apollo::planning::PolyStSpeedConfig* poly_st_speed_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poly_st_speed_config_);
  }
  if (poly_st_speed_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(poly_st_speed_config));
    if (message_arena != submessage_arena) {
      poly_st_speed_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poly_st_speed_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.poly_st_speed_config_ = poly_st_speed_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.EMPlannerConfig.poly_st_speed_config)
}

// -------------------------------------------------------------------

// NaviPlannerConfig

// repeated .apollo.planning.TaskType task = 1;
inline int NaviPlannerConfig::_internal_task_size() const {
  return _impl_.task_.size();
}
inline int NaviPlannerConfig::task_size() const {
  return _internal_task_size();
}
inline void NaviPlannerConfig::clear_task() {
  _impl_.task_.Clear();
}
inline ::apollo::planning::TaskType NaviPlannerConfig::_internal_task(int index) const {
  return static_cast< ::apollo::planning::TaskType >(_impl_.task_.Get(index));
}
inline ::apollo::planning::TaskType NaviPlannerConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPlannerConfig.task)
  return _internal_task(index);
}
inline void NaviPlannerConfig::set_task(int index, ::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  _impl_.task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.NaviPlannerConfig.task)
}
inline void NaviPlannerConfig::_internal_add_task(::apollo::planning::TaskType value) {
  assert(::apollo::planning::TaskType_IsValid(value));
  _impl_.task_.Add(value);
}
inline void NaviPlannerConfig::add_task(::apollo::planning::TaskType value) {
  _internal_add_task(value);
  // @@protoc_insertion_point(field_add:apollo.planning.NaviPlannerConfig.task)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
NaviPlannerConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.NaviPlannerConfig.task)
  return _impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NaviPlannerConfig::_internal_mutable_task() {
  return &_impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NaviPlannerConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.NaviPlannerConfig.task)
  return _internal_mutable_task();
}

// optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
inline bool NaviPlannerConfig::_internal_has_navi_path_decider_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_path_decider_config_ != nullptr);
  return value;
}
inline bool NaviPlannerConfig::has_navi_path_decider_config() const {
  return _internal_has_navi_path_decider_config();
}
inline const ::apollo::planning::NaviPathDeciderConfig& NaviPlannerConfig::_internal_navi_path_decider_config() const {
  const ::apollo::planning::NaviPathDeciderConfig* p = _impl_.navi_path_decider_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviPathDeciderConfig&>(
      ::apollo::planning::_NaviPathDeciderConfig_default_instance_);
}
inline const ::apollo::planning::NaviPathDeciderConfig& NaviPlannerConfig::navi_path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPlannerConfig.navi_path_decider_config)
  return _internal_navi_path_decider_config();
}
inline void NaviPlannerConfig::unsafe_arena_set_allocated_navi_path_decider_config(
    ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_path_decider_config_);
  }
  _impl_.navi_path_decider_config_ = navi_path_decider_config;
  if (navi_path_decider_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.NaviPlannerConfig.navi_path_decider_config)
}
inline ::apollo::planning::NaviPathDeciderConfig* NaviPlannerConfig::release_navi_path_decider_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::NaviPathDeciderConfig* temp = _impl_.navi_path_decider_config_;
  _impl_.navi_path_decider_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviPathDeciderConfig* NaviPlannerConfig::unsafe_arena_release_navi_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPlannerConfig.navi_path_decider_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::NaviPathDeciderConfig* temp = _impl_.navi_path_decider_config_;
  _impl_.navi_path_decider_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviPathDeciderConfig* NaviPlannerConfig::_internal_mutable_navi_path_decider_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.navi_path_decider_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(GetArenaForAllocation());
    _impl_.navi_path_decider_config_ = p;
  }
  return _impl_.navi_path_decider_config_;
}
inline ::apollo::planning::NaviPathDeciderConfig* NaviPlannerConfig::mutable_navi_path_decider_config() {
  ::apollo::planning::NaviPathDeciderConfig* _msg = _internal_mutable_navi_path_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPlannerConfig.navi_path_decider_config)
  return _msg;
}
inline void NaviPlannerConfig::set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_path_decider_config_);
  }
  if (navi_path_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navi_path_decider_config));
    if (message_arena != submessage_arena) {
      navi_path_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_path_decider_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.navi_path_decider_config_ = navi_path_decider_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPlannerConfig.navi_path_decider_config)
}

// optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
inline bool NaviPlannerConfig::_internal_has_navi_speed_decider_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_speed_decider_config_ != nullptr);
  return value;
}
inline bool NaviPlannerConfig::has_navi_speed_decider_config() const {
  return _internal_has_navi_speed_decider_config();
}
inline const ::apollo::planning::NaviSpeedDeciderConfig& NaviPlannerConfig::_internal_navi_speed_decider_config() const {
  const ::apollo::planning::NaviSpeedDeciderConfig* p = _impl_.navi_speed_decider_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviSpeedDeciderConfig&>(
      ::apollo::planning::_NaviSpeedDeciderConfig_default_instance_);
}
inline const ::apollo::planning::NaviSpeedDeciderConfig& NaviPlannerConfig::navi_speed_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NaviPlannerConfig.navi_speed_decider_config)
  return _internal_navi_speed_decider_config();
}
inline void NaviPlannerConfig::unsafe_arena_set_allocated_navi_speed_decider_config(
    ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_speed_decider_config_);
  }
  _impl_.navi_speed_decider_config_ = navi_speed_decider_config;
  if (navi_speed_decider_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.NaviPlannerConfig.navi_speed_decider_config)
}
inline ::apollo::planning::NaviSpeedDeciderConfig* NaviPlannerConfig::release_navi_speed_decider_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviSpeedDeciderConfig* temp = _impl_.navi_speed_decider_config_;
  _impl_.navi_speed_decider_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* NaviPlannerConfig::unsafe_arena_release_navi_speed_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.NaviPlannerConfig.navi_speed_decider_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviSpeedDeciderConfig* temp = _impl_.navi_speed_decider_config_;
  _impl_.navi_speed_decider_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* NaviPlannerConfig::_internal_mutable_navi_speed_decider_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.navi_speed_decider_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(GetArenaForAllocation());
    _impl_.navi_speed_decider_config_ = p;
  }
  return _impl_.navi_speed_decider_config_;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* NaviPlannerConfig::mutable_navi_speed_decider_config() {
  ::apollo::planning::NaviSpeedDeciderConfig* _msg = _internal_mutable_navi_speed_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.NaviPlannerConfig.navi_speed_decider_config)
  return _msg;
}
inline void NaviPlannerConfig::set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_speed_decider_config_);
  }
  if (navi_speed_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navi_speed_decider_config));
    if (message_arena != submessage_arena) {
      navi_speed_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_speed_decider_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.navi_speed_decider_config_ = navi_speed_decider_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NaviPlannerConfig.navi_speed_decider_config)
}

// -------------------------------------------------------------------

// PlanningConfig

// optional .apollo.planning.PlanningConfig.PlannerType planner_type = 1 [default = EM];
inline bool PlanningConfig::_internal_has_planner_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlanningConfig::has_planner_type() const {
  return _internal_has_planner_type();
}
inline void PlanningConfig::clear_planner_type() {
  _impl_.planner_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::planning::PlanningConfig_PlannerType PlanningConfig::_internal_planner_type() const {
  return static_cast< ::apollo::planning::PlanningConfig_PlannerType >(_impl_.planner_type_);
}
inline ::apollo::planning::PlanningConfig_PlannerType PlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.planner_type)
  return _internal_planner_type();
}
inline void PlanningConfig::_internal_set_planner_type(::apollo::planning::PlanningConfig_PlannerType value) {
  assert(::apollo::planning::PlanningConfig_PlannerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.planner_type_ = value;
}
inline void PlanningConfig::set_planner_type(::apollo::planning::PlanningConfig_PlannerType value) {
  _internal_set_planner_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.planner_type)
}

// optional .apollo.planning.EMPlannerConfig em_planner_config = 2;
inline bool PlanningConfig::_internal_has_em_planner_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.em_planner_config_ != nullptr);
  return value;
}
inline bool PlanningConfig::has_em_planner_config() const {
  return _internal_has_em_planner_config();
}
inline void PlanningConfig::clear_em_planner_config() {
  if (_impl_.em_planner_config_ != nullptr) _impl_.em_planner_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::EMPlannerConfig& PlanningConfig::_internal_em_planner_config() const {
  const ::apollo::planning::EMPlannerConfig* p = _impl_.em_planner_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::EMPlannerConfig&>(
      ::apollo::planning::_EMPlannerConfig_default_instance_);
}
inline const ::apollo::planning::EMPlannerConfig& PlanningConfig::em_planner_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.em_planner_config)
  return _internal_em_planner_config();
}
inline void PlanningConfig::unsafe_arena_set_allocated_em_planner_config(
    ::apollo::planning::EMPlannerConfig* em_planner_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.em_planner_config_);
  }
  _impl_.em_planner_config_ = em_planner_config;
  if (em_planner_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.em_planner_config)
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::release_em_planner_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::EMPlannerConfig* temp = _impl_.em_planner_config_;
  _impl_.em_planner_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::unsafe_arena_release_em_planner_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.em_planner_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::EMPlannerConfig* temp = _impl_.em_planner_config_;
  _impl_.em_planner_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::_internal_mutable_em_planner_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.em_planner_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::EMPlannerConfig>(GetArenaForAllocation());
    _impl_.em_planner_config_ = p;
  }
  return _impl_.em_planner_config_;
}
inline ::apollo::planning::EMPlannerConfig* PlanningConfig::mutable_em_planner_config() {
  ::apollo::planning::EMPlannerConfig* _msg = _internal_mutable_em_planner_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.em_planner_config)
  return _msg;
}
inline void PlanningConfig::set_allocated_em_planner_config(::apollo::planning::EMPlannerConfig* em_planner_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.em_planner_config_;
  }
  if (em_planner_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(em_planner_config);
    if (message_arena != submessage_arena) {
      em_planner_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, em_planner_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.em_planner_config_ = em_planner_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.em_planner_config)
}

// optional .apollo.planning.NaviPlannerConfig navi_planner_config = 3;
inline bool PlanningConfig::_internal_has_navi_planner_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_planner_config_ != nullptr);
  return value;
}
inline bool PlanningConfig::has_navi_planner_config() const {
  return _internal_has_navi_planner_config();
}
inline void PlanningConfig::clear_navi_planner_config() {
  if (_impl_.navi_planner_config_ != nullptr) _impl_.navi_planner_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::NaviPlannerConfig& PlanningConfig::_internal_navi_planner_config() const {
  const ::apollo::planning::NaviPlannerConfig* p = _impl_.navi_planner_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviPlannerConfig&>(
      ::apollo::planning::_NaviPlannerConfig_default_instance_);
}
inline const ::apollo::planning::NaviPlannerConfig& PlanningConfig::navi_planner_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.navi_planner_config)
  return _internal_navi_planner_config();
}
inline void PlanningConfig::unsafe_arena_set_allocated_navi_planner_config(
    ::apollo::planning::NaviPlannerConfig* navi_planner_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_planner_config_);
  }
  _impl_.navi_planner_config_ = navi_planner_config;
  if (navi_planner_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.navi_planner_config)
}
inline ::apollo::planning::NaviPlannerConfig* PlanningConfig::release_navi_planner_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviPlannerConfig* temp = _impl_.navi_planner_config_;
  _impl_.navi_planner_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviPlannerConfig* PlanningConfig::unsafe_arena_release_navi_planner_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.navi_planner_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviPlannerConfig* temp = _impl_.navi_planner_config_;
  _impl_.navi_planner_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviPlannerConfig* PlanningConfig::_internal_mutable_navi_planner_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.navi_planner_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviPlannerConfig>(GetArenaForAllocation());
    _impl_.navi_planner_config_ = p;
  }
  return _impl_.navi_planner_config_;
}
inline ::apollo::planning::NaviPlannerConfig* PlanningConfig::mutable_navi_planner_config() {
  ::apollo::planning::NaviPlannerConfig* _msg = _internal_mutable_navi_planner_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.navi_planner_config)
  return _msg;
}
inline void PlanningConfig::set_allocated_navi_planner_config(::apollo::planning::NaviPlannerConfig* navi_planner_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.navi_planner_config_;
  }
  if (navi_planner_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navi_planner_config);
    if (message_arena != submessage_arena) {
      navi_planner_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_planner_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.navi_planner_config_ = navi_planner_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navi_planner_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::PlanningConfig_PlannerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::PlanningConfig_PlannerType>() {
  return ::apollo::planning::PlanningConfig_PlannerType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::TaskType>() {
  return ::apollo::planning::TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
