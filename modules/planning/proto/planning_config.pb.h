// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/open_space_task_config.pb.h"
#include "modules/planning/proto/task_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
namespace apollo {
namespace planning {
class NavigationPlanningConfig;
struct NavigationPlanningConfigDefaultTypeInternal;
extern NavigationPlanningConfigDefaultTypeInternal _NavigationPlanningConfig_default_instance_;
class PlannerNaviConfig;
struct PlannerNaviConfigDefaultTypeInternal;
extern PlannerNaviConfigDefaultTypeInternal _PlannerNaviConfig_default_instance_;
class PlannerPublicRoadConfig;
struct PlannerPublicRoadConfigDefaultTypeInternal;
extern PlannerPublicRoadConfigDefaultTypeInternal _PlannerPublicRoadConfig_default_instance_;
class PlanningConfig;
struct PlanningConfigDefaultTypeInternal;
extern PlanningConfigDefaultTypeInternal _PlanningConfig_default_instance_;
class RtkPlanningConfig;
struct RtkPlanningConfigDefaultTypeInternal;
extern RtkPlanningConfigDefaultTypeInternal _RtkPlanningConfig_default_instance_;
class ScenarioBareIntersectionUnprotectedConfig;
struct ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal;
extern ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal _ScenarioBareIntersectionUnprotectedConfig_default_instance_;
class ScenarioConfig;
struct ScenarioConfigDefaultTypeInternal;
extern ScenarioConfigDefaultTypeInternal _ScenarioConfig_default_instance_;
class ScenarioConfig_StageConfig;
struct ScenarioConfig_StageConfigDefaultTypeInternal;
extern ScenarioConfig_StageConfigDefaultTypeInternal _ScenarioConfig_StageConfig_default_instance_;
class ScenarioDeadEndTurnAroundConfig;
struct ScenarioDeadEndTurnAroundConfigDefaultTypeInternal;
extern ScenarioDeadEndTurnAroundConfigDefaultTypeInternal _ScenarioDeadEndTurnAroundConfig_default_instance_;
class ScenarioEmergencyPullOverConfig;
struct ScenarioEmergencyPullOverConfigDefaultTypeInternal;
extern ScenarioEmergencyPullOverConfigDefaultTypeInternal _ScenarioEmergencyPullOverConfig_default_instance_;
class ScenarioEmergencyStopConfig;
struct ScenarioEmergencyStopConfigDefaultTypeInternal;
extern ScenarioEmergencyStopConfigDefaultTypeInternal _ScenarioEmergencyStopConfig_default_instance_;
class ScenarioLaneFollowConfig;
struct ScenarioLaneFollowConfigDefaultTypeInternal;
extern ScenarioLaneFollowConfigDefaultTypeInternal _ScenarioLaneFollowConfig_default_instance_;
class ScenarioLearningModelSampleConfig;
struct ScenarioLearningModelSampleConfigDefaultTypeInternal;
extern ScenarioLearningModelSampleConfigDefaultTypeInternal _ScenarioLearningModelSampleConfig_default_instance_;
class ScenarioNarrowStreetUTurnConfig;
struct ScenarioNarrowStreetUTurnConfigDefaultTypeInternal;
extern ScenarioNarrowStreetUTurnConfigDefaultTypeInternal _ScenarioNarrowStreetUTurnConfig_default_instance_;
class ScenarioParkAndGoConfig;
struct ScenarioParkAndGoConfigDefaultTypeInternal;
extern ScenarioParkAndGoConfigDefaultTypeInternal _ScenarioParkAndGoConfig_default_instance_;
class ScenarioPullOverConfig;
struct ScenarioPullOverConfigDefaultTypeInternal;
extern ScenarioPullOverConfigDefaultTypeInternal _ScenarioPullOverConfig_default_instance_;
class ScenarioStopSignUnprotectedConfig;
struct ScenarioStopSignUnprotectedConfigDefaultTypeInternal;
extern ScenarioStopSignUnprotectedConfigDefaultTypeInternal _ScenarioStopSignUnprotectedConfig_default_instance_;
class ScenarioTrafficLightProtectedConfig;
struct ScenarioTrafficLightProtectedConfigDefaultTypeInternal;
extern ScenarioTrafficLightProtectedConfigDefaultTypeInternal _ScenarioTrafficLightProtectedConfig_default_instance_;
class ScenarioTrafficLightUnprotectedLeftTurnConfig;
struct ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal;
extern ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
class ScenarioTrafficLightUnprotectedRightTurnConfig;
struct ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal;
extern ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal _ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
class ScenarioValetParkingConfig;
struct ScenarioValetParkingConfigDefaultTypeInternal;
extern ScenarioValetParkingConfigDefaultTypeInternal _ScenarioValetParkingConfig_default_instance_;
class ScenarioYieldSignConfig;
struct ScenarioYieldSignConfigDefaultTypeInternal;
extern ScenarioYieldSignConfigDefaultTypeInternal _ScenarioYieldSignConfig_default_instance_;
class StandardPlanningConfig;
struct StandardPlanningConfigDefaultTypeInternal;
extern StandardPlanningConfigDefaultTypeInternal _StandardPlanningConfig_default_instance_;
class TaskConfig;
struct TaskConfigDefaultTypeInternal;
extern TaskConfigDefaultTypeInternal _TaskConfig_default_instance_;
class TopicConfig;
struct TopicConfigDefaultTypeInternal;
extern TopicConfigDefaultTypeInternal _TopicConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::NavigationPlanningConfig* Arena::CreateMaybeMessage<::apollo::planning::NavigationPlanningConfig>(Arena*);
template<> ::apollo::planning::PlannerNaviConfig* Arena::CreateMaybeMessage<::apollo::planning::PlannerNaviConfig>(Arena*);
template<> ::apollo::planning::PlannerPublicRoadConfig* Arena::CreateMaybeMessage<::apollo::planning::PlannerPublicRoadConfig>(Arena*);
template<> ::apollo::planning::PlanningConfig* Arena::CreateMaybeMessage<::apollo::planning::PlanningConfig>(Arena*);
template<> ::apollo::planning::RtkPlanningConfig* Arena::CreateMaybeMessage<::apollo::planning::RtkPlanningConfig>(Arena*);
template<> ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioBareIntersectionUnprotectedConfig>(Arena*);
template<> ::apollo::planning::ScenarioConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioConfig>(Arena*);
template<> ::apollo::planning::ScenarioConfig_StageConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioConfig_StageConfig>(Arena*);
template<> ::apollo::planning::ScenarioDeadEndTurnAroundConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioDeadEndTurnAroundConfig>(Arena*);
template<> ::apollo::planning::ScenarioEmergencyPullOverConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioEmergencyPullOverConfig>(Arena*);
template<> ::apollo::planning::ScenarioEmergencyStopConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioEmergencyStopConfig>(Arena*);
template<> ::apollo::planning::ScenarioLaneFollowConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioLaneFollowConfig>(Arena*);
template<> ::apollo::planning::ScenarioLearningModelSampleConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioLearningModelSampleConfig>(Arena*);
template<> ::apollo::planning::ScenarioNarrowStreetUTurnConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioNarrowStreetUTurnConfig>(Arena*);
template<> ::apollo::planning::ScenarioParkAndGoConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioParkAndGoConfig>(Arena*);
template<> ::apollo::planning::ScenarioPullOverConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioPullOverConfig>(Arena*);
template<> ::apollo::planning::ScenarioStopSignUnprotectedConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioStopSignUnprotectedConfig>(Arena*);
template<> ::apollo::planning::ScenarioTrafficLightProtectedConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioTrafficLightProtectedConfig>(Arena*);
template<> ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig>(Arena*);
template<> ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig>(Arena*);
template<> ::apollo::planning::ScenarioValetParkingConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioValetParkingConfig>(Arena*);
template<> ::apollo::planning::ScenarioYieldSignConfig* Arena::CreateMaybeMessage<::apollo::planning::ScenarioYieldSignConfig>(Arena*);
template<> ::apollo::planning::StandardPlanningConfig* Arena::CreateMaybeMessage<::apollo::planning::StandardPlanningConfig>(Arena*);
template<> ::apollo::planning::TaskConfig* Arena::CreateMaybeMessage<::apollo::planning::TaskConfig>(Arena*);
template<> ::apollo::planning::TopicConfig* Arena::CreateMaybeMessage<::apollo::planning::TopicConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

enum TaskConfig_TaskType : int {
  TaskConfig_TaskType_CREEP_DECIDER = 1,
  TaskConfig_TaskType_LANE_CHANGE_DECIDER = 2,
  TaskConfig_TaskType_NAVI_OBSTACLE_DECIDER = 3,
  TaskConfig_TaskType_NAVI_PATH_DECIDER = 4,
  TaskConfig_TaskType_NAVI_SPEED_DECIDER = 5,
  TaskConfig_TaskType_OPEN_SPACE_FALLBACK_DECIDER = 6,
  TaskConfig_TaskType_OPEN_SPACE_PRE_STOP_DECIDER = 7,
  TaskConfig_TaskType_OPEN_SPACE_ROI_DECIDER = 8,
  TaskConfig_TaskType_PATH_ASSESSMENT_DECIDER = 9,
  TaskConfig_TaskType_PATH_BOUNDS_DECIDER = 10,
  TaskConfig_TaskType_PATH_DECIDER = 11,
  TaskConfig_TaskType_PATH_LANE_BORROW_DECIDER = 12,
  TaskConfig_TaskType_PATH_REFERENCE_DECIDER = 13,
  TaskConfig_TaskType_PATH_REUSE_DECIDER = 14,
  TaskConfig_TaskType_RSS_DECIDER = 15,
  TaskConfig_TaskType_RULE_BASED_STOP_DECIDER = 16,
  TaskConfig_TaskType_SPEED_BOUNDS_PRIORI_DECIDER = 17,
  TaskConfig_TaskType_SPEED_BOUNDS_FINAL_DECIDER = 18,
  TaskConfig_TaskType_SPEED_DECIDER = 19,
  TaskConfig_TaskType_ST_BOUNDS_DECIDER = 20,
  TaskConfig_TaskType_OPEN_SPACE_TRAJECTORY_PARTITION = 21,
  TaskConfig_TaskType_OPEN_SPACE_TRAJECTORY_PROVIDER = 22,
  TaskConfig_TaskType_PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER = 23,
  TaskConfig_TaskType_PIECEWISE_JERK_PATH_OPTIMIZER = 24,
  TaskConfig_TaskType_PIECEWISE_JERK_SPEED_OPTIMIZER = 25,
  TaskConfig_TaskType_SPEED_HEURISTIC_OPTIMIZER = 26,
  TaskConfig_TaskType_LEARNING_MODEL_INFERENCE_TASK = 27,
  TaskConfig_TaskType_LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK = 28
};
bool TaskConfig_TaskType_IsValid(int value);
constexpr TaskConfig_TaskType TaskConfig_TaskType_TaskType_MIN = TaskConfig_TaskType_CREEP_DECIDER;
constexpr TaskConfig_TaskType TaskConfig_TaskType_TaskType_MAX = TaskConfig_TaskType_LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK;
constexpr int TaskConfig_TaskType_TaskType_ARRAYSIZE = TaskConfig_TaskType_TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskConfig_TaskType_descriptor();
template<typename T>
inline const std::string& TaskConfig_TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskConfig_TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskConfig_TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskConfig_TaskType_descriptor(), enum_t_value);
}
inline bool TaskConfig_TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskConfig_TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskConfig_TaskType>(
    TaskConfig_TaskType_descriptor(), name, value);
}
enum ScenarioConfig_ScenarioType : int {
  ScenarioConfig_ScenarioType_LANE_FOLLOW = 0,
  ScenarioConfig_ScenarioType_BARE_INTERSECTION_UNPROTECTED = 2,
  ScenarioConfig_ScenarioType_STOP_SIGN_PROTECTED = 3,
  ScenarioConfig_ScenarioType_STOP_SIGN_UNPROTECTED = 4,
  ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_PROTECTED = 5,
  ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN = 6,
  ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN = 7,
  ScenarioConfig_ScenarioType_YIELD_SIGN = 8,
  ScenarioConfig_ScenarioType_PULL_OVER = 9,
  ScenarioConfig_ScenarioType_VALET_PARKING = 10,
  ScenarioConfig_ScenarioType_EMERGENCY_PULL_OVER = 11,
  ScenarioConfig_ScenarioType_EMERGENCY_STOP = 12,
  ScenarioConfig_ScenarioType_NARROW_STREET_U_TURN = 13,
  ScenarioConfig_ScenarioType_PARK_AND_GO = 14,
  ScenarioConfig_ScenarioType_LEARNING_MODEL_SAMPLE = 15,
  ScenarioConfig_ScenarioType_DEADEND_TURNAROUND = 16
};
bool ScenarioConfig_ScenarioType_IsValid(int value);
constexpr ScenarioConfig_ScenarioType ScenarioConfig_ScenarioType_ScenarioType_MIN = ScenarioConfig_ScenarioType_LANE_FOLLOW;
constexpr ScenarioConfig_ScenarioType ScenarioConfig_ScenarioType_ScenarioType_MAX = ScenarioConfig_ScenarioType_DEADEND_TURNAROUND;
constexpr int ScenarioConfig_ScenarioType_ScenarioType_ARRAYSIZE = ScenarioConfig_ScenarioType_ScenarioType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor();
template<typename T>
inline const std::string& ScenarioConfig_ScenarioType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScenarioConfig_ScenarioType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScenarioConfig_ScenarioType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScenarioConfig_ScenarioType_descriptor(), enum_t_value);
}
inline bool ScenarioConfig_ScenarioType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScenarioConfig_ScenarioType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScenarioConfig_ScenarioType>(
    ScenarioConfig_ScenarioType_descriptor(), name, value);
}
enum ScenarioConfig_StageType : int {
  ScenarioConfig_StageType_NO_STAGE = 0,
  ScenarioConfig_StageType_LANE_FOLLOW_DEFAULT_STAGE = 1,
  ScenarioConfig_StageType_BARE_INTERSECTION_UNPROTECTED_APPROACH = 200,
  ScenarioConfig_StageType_BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE = 201,
  ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_PRE_STOP = 300,
  ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_STOP = 301,
  ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_CREEP = 302,
  ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE = 303,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_PROTECTED_APPROACH = 400,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE = 401,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH = 410,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP = 411,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE = 412,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP = 420,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP = 421,
  ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE = 422,
  ScenarioConfig_StageType_PULL_OVER_APPROACH = 500,
  ScenarioConfig_StageType_PULL_OVER_RETRY_APPROACH_PARKING = 501,
  ScenarioConfig_StageType_PULL_OVER_RETRY_PARKING = 502,
  ScenarioConfig_StageType_EMERGENCY_PULL_OVER_SLOW_DOWN = 600,
  ScenarioConfig_StageType_EMERGENCY_PULL_OVER_APPROACH = 601,
  ScenarioConfig_StageType_EMERGENCY_PULL_OVER_STANDBY = 602,
  ScenarioConfig_StageType_EMERGENCY_STOP_APPROACH = 610,
  ScenarioConfig_StageType_EMERGENCY_STOP_STANDBY = 611,
  ScenarioConfig_StageType_VALET_PARKING_APPROACHING_PARKING_SPOT = 700,
  ScenarioConfig_StageType_VALET_PARKING_PARKING = 701,
  ScenarioConfig_StageType_DEADEND_TURNAROUND_APPROACHING_TURNING_POINT = 1100,
  ScenarioConfig_StageType_DEADEND_TURNAROUND_TURNING = 1101,
  ScenarioConfig_StageType_PARK_AND_GO_CHECK = 800,
  ScenarioConfig_StageType_PARK_AND_GO_CRUISE = 801,
  ScenarioConfig_StageType_PARK_AND_GO_ADJUST = 802,
  ScenarioConfig_StageType_PARK_AND_GO_PRE_CRUISE = 803,
  ScenarioConfig_StageType_YIELD_SIGN_APPROACH = 900,
  ScenarioConfig_StageType_YIELD_SIGN_CREEP = 901,
  ScenarioConfig_StageType_LEARNING_MODEL_RUN = 1000
};
bool ScenarioConfig_StageType_IsValid(int value);
constexpr ScenarioConfig_StageType ScenarioConfig_StageType_StageType_MIN = ScenarioConfig_StageType_NO_STAGE;
constexpr ScenarioConfig_StageType ScenarioConfig_StageType_StageType_MAX = ScenarioConfig_StageType_DEADEND_TURNAROUND_TURNING;
constexpr int ScenarioConfig_StageType_StageType_ARRAYSIZE = ScenarioConfig_StageType_StageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ScenarioConfig_StageType_descriptor();
template<typename T>
inline const std::string& ScenarioConfig_StageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScenarioConfig_StageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScenarioConfig_StageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ScenarioConfig_StageType_descriptor(), enum_t_value);
}
inline bool ScenarioConfig_StageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ScenarioConfig_StageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ScenarioConfig_StageType>(
    ScenarioConfig_StageType_descriptor(), name, value);
}
enum PlanningConfig_PlanningLearningMode : int {
  PlanningConfig_PlanningLearningMode_NO_LEARNING = 0,
  PlanningConfig_PlanningLearningMode_E2E = 1,
  PlanningConfig_PlanningLearningMode_HYBRID = 2,
  PlanningConfig_PlanningLearningMode_RL_TEST = 3,
  PlanningConfig_PlanningLearningMode_E2E_TEST = 4,
  PlanningConfig_PlanningLearningMode_HYBRID_TEST = 5
};
bool PlanningConfig_PlanningLearningMode_IsValid(int value);
constexpr PlanningConfig_PlanningLearningMode PlanningConfig_PlanningLearningMode_PlanningLearningMode_MIN = PlanningConfig_PlanningLearningMode_NO_LEARNING;
constexpr PlanningConfig_PlanningLearningMode PlanningConfig_PlanningLearningMode_PlanningLearningMode_MAX = PlanningConfig_PlanningLearningMode_HYBRID_TEST;
constexpr int PlanningConfig_PlanningLearningMode_PlanningLearningMode_ARRAYSIZE = PlanningConfig_PlanningLearningMode_PlanningLearningMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanningConfig_PlanningLearningMode_descriptor();
template<typename T>
inline const std::string& PlanningConfig_PlanningLearningMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanningConfig_PlanningLearningMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanningConfig_PlanningLearningMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanningConfig_PlanningLearningMode_descriptor(), enum_t_value);
}
inline bool PlanningConfig_PlanningLearningMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlanningConfig_PlanningLearningMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanningConfig_PlanningLearningMode>(
    PlanningConfig_PlanningLearningMode_descriptor(), name, value);
}
enum PlannerType : int {
  RTK = 0,
  PUBLIC_ROAD = 1,
  NAVI = 2,
  LATTICE = 3
};
bool PlannerType_IsValid(int value);
constexpr PlannerType PlannerType_MIN = RTK;
constexpr PlannerType PlannerType_MAX = LATTICE;
constexpr int PlannerType_ARRAYSIZE = PlannerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlannerType_descriptor();
template<typename T>
inline const std::string& PlannerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlannerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlannerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlannerType_descriptor(), enum_t_value);
}
inline bool PlannerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlannerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlannerType>(
    PlannerType_descriptor(), name, value);
}
// ===================================================================

class TaskConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TaskConfig) */ {
 public:
  inline TaskConfig() : TaskConfig(nullptr) {}
  ~TaskConfig() override;
  explicit PROTOBUF_CONSTEXPR TaskConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskConfig(const TaskConfig& from);
  TaskConfig(TaskConfig&& from) noexcept
    : TaskConfig() {
    *this = ::std::move(from);
  }

  inline TaskConfig& operator=(const TaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskConfig& operator=(TaskConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskConfig& default_instance() {
    return *internal_default_instance();
  }
  enum TaskConfigCase {
    kCreepDeciderConfig = 2,
    kLaneChangeDeciderConfig = 3,
    kOpenSpaceFallbackDeciderConfig = 4,
    kOpenSpacePreStopDeciderConfig = 5,
    kOpenSpaceRoiDeciderConfig = 6,
    kPathAssessmentDeciderConfig = 7,
    kPathBoundsDeciderConfig = 8,
    kPathDeciderConfig = 9,
    kPathLaneBorrowDeciderConfig = 10,
    kPathReferenceDeciderConfig = 11,
    kPathReuseDeciderConfig = 12,
    kRuleBasedStopDeciderConfig = 13,
    kSpeedBoundsDeciderConfig = 14,
    kStBoundsDeciderConfig = 15,
    kOpenSpaceTrajectoryPartitionConfig = 16,
    kOpenSpaceTrajectoryProviderConfig = 17,
    kPiecewiseJerkNonlinearSpeedOptimizerConfig = 18,
    kPiecewiseJerkPathOptimizerConfig = 19,
    kPiecewiseJerkSpeedOptimizerConfig = 20,
    kSpeedHeuristicOptimizerConfig = 21,
    kLearningModelInferenceTaskConfig = 22,
    kLearningModelInferenceTrajectoryTaskConfig = 23,
    TASK_CONFIG_NOT_SET = 0,
  };

  static inline const TaskConfig* internal_default_instance() {
    return reinterpret_cast<const TaskConfig*>(
               &_TaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskConfig& a, TaskConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TaskConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TaskConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TaskConfig";
  }
  protected:
  explicit TaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskConfig_TaskType TaskType;
  static constexpr TaskType CREEP_DECIDER =
    TaskConfig_TaskType_CREEP_DECIDER;
  static constexpr TaskType LANE_CHANGE_DECIDER =
    TaskConfig_TaskType_LANE_CHANGE_DECIDER;
  static constexpr TaskType NAVI_OBSTACLE_DECIDER =
    TaskConfig_TaskType_NAVI_OBSTACLE_DECIDER;
  static constexpr TaskType NAVI_PATH_DECIDER =
    TaskConfig_TaskType_NAVI_PATH_DECIDER;
  static constexpr TaskType NAVI_SPEED_DECIDER =
    TaskConfig_TaskType_NAVI_SPEED_DECIDER;
  static constexpr TaskType OPEN_SPACE_FALLBACK_DECIDER =
    TaskConfig_TaskType_OPEN_SPACE_FALLBACK_DECIDER;
  static constexpr TaskType OPEN_SPACE_PRE_STOP_DECIDER =
    TaskConfig_TaskType_OPEN_SPACE_PRE_STOP_DECIDER;
  static constexpr TaskType OPEN_SPACE_ROI_DECIDER =
    TaskConfig_TaskType_OPEN_SPACE_ROI_DECIDER;
  static constexpr TaskType PATH_ASSESSMENT_DECIDER =
    TaskConfig_TaskType_PATH_ASSESSMENT_DECIDER;
  static constexpr TaskType PATH_BOUNDS_DECIDER =
    TaskConfig_TaskType_PATH_BOUNDS_DECIDER;
  static constexpr TaskType PATH_DECIDER =
    TaskConfig_TaskType_PATH_DECIDER;
  static constexpr TaskType PATH_LANE_BORROW_DECIDER =
    TaskConfig_TaskType_PATH_LANE_BORROW_DECIDER;
  static constexpr TaskType PATH_REFERENCE_DECIDER =
    TaskConfig_TaskType_PATH_REFERENCE_DECIDER;
  static constexpr TaskType PATH_REUSE_DECIDER =
    TaskConfig_TaskType_PATH_REUSE_DECIDER;
  static constexpr TaskType RSS_DECIDER =
    TaskConfig_TaskType_RSS_DECIDER;
  static constexpr TaskType RULE_BASED_STOP_DECIDER =
    TaskConfig_TaskType_RULE_BASED_STOP_DECIDER;
  static constexpr TaskType SPEED_BOUNDS_PRIORI_DECIDER =
    TaskConfig_TaskType_SPEED_BOUNDS_PRIORI_DECIDER;
  static constexpr TaskType SPEED_BOUNDS_FINAL_DECIDER =
    TaskConfig_TaskType_SPEED_BOUNDS_FINAL_DECIDER;
  static constexpr TaskType SPEED_DECIDER =
    TaskConfig_TaskType_SPEED_DECIDER;
  static constexpr TaskType ST_BOUNDS_DECIDER =
    TaskConfig_TaskType_ST_BOUNDS_DECIDER;
  static constexpr TaskType OPEN_SPACE_TRAJECTORY_PARTITION =
    TaskConfig_TaskType_OPEN_SPACE_TRAJECTORY_PARTITION;
  static constexpr TaskType OPEN_SPACE_TRAJECTORY_PROVIDER =
    TaskConfig_TaskType_OPEN_SPACE_TRAJECTORY_PROVIDER;
  static constexpr TaskType PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER =
    TaskConfig_TaskType_PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER;
  static constexpr TaskType PIECEWISE_JERK_PATH_OPTIMIZER =
    TaskConfig_TaskType_PIECEWISE_JERK_PATH_OPTIMIZER;
  static constexpr TaskType PIECEWISE_JERK_SPEED_OPTIMIZER =
    TaskConfig_TaskType_PIECEWISE_JERK_SPEED_OPTIMIZER;
  static constexpr TaskType SPEED_HEURISTIC_OPTIMIZER =
    TaskConfig_TaskType_SPEED_HEURISTIC_OPTIMIZER;
  static constexpr TaskType LEARNING_MODEL_INFERENCE_TASK =
    TaskConfig_TaskType_LEARNING_MODEL_INFERENCE_TASK;
  static constexpr TaskType LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK =
    TaskConfig_TaskType_LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK;
  static inline bool TaskType_IsValid(int value) {
    return TaskConfig_TaskType_IsValid(value);
  }
  static constexpr TaskType TaskType_MIN =
    TaskConfig_TaskType_TaskType_MIN;
  static constexpr TaskType TaskType_MAX =
    TaskConfig_TaskType_TaskType_MAX;
  static constexpr int TaskType_ARRAYSIZE =
    TaskConfig_TaskType_TaskType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TaskType_descriptor() {
    return TaskConfig_TaskType_descriptor();
  }
  template<typename T>
  static inline const std::string& TaskType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TaskType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TaskType_Name.");
    return TaskConfig_TaskType_Name(enum_t_value);
  }
  static inline bool TaskType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TaskType* value) {
    return TaskConfig_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTaskTypeFieldNumber = 1,
    kCreepDeciderConfigFieldNumber = 2,
    kLaneChangeDeciderConfigFieldNumber = 3,
    kOpenSpaceFallbackDeciderConfigFieldNumber = 4,
    kOpenSpacePreStopDeciderConfigFieldNumber = 5,
    kOpenSpaceRoiDeciderConfigFieldNumber = 6,
    kPathAssessmentDeciderConfigFieldNumber = 7,
    kPathBoundsDeciderConfigFieldNumber = 8,
    kPathDeciderConfigFieldNumber = 9,
    kPathLaneBorrowDeciderConfigFieldNumber = 10,
    kPathReferenceDeciderConfigFieldNumber = 11,
    kPathReuseDeciderConfigFieldNumber = 12,
    kRuleBasedStopDeciderConfigFieldNumber = 13,
    kSpeedBoundsDeciderConfigFieldNumber = 14,
    kStBoundsDeciderConfigFieldNumber = 15,
    kOpenSpaceTrajectoryPartitionConfigFieldNumber = 16,
    kOpenSpaceTrajectoryProviderConfigFieldNumber = 17,
    kPiecewiseJerkNonlinearSpeedOptimizerConfigFieldNumber = 18,
    kPiecewiseJerkPathOptimizerConfigFieldNumber = 19,
    kPiecewiseJerkSpeedOptimizerConfigFieldNumber = 20,
    kSpeedHeuristicOptimizerConfigFieldNumber = 21,
    kLearningModelInferenceTaskConfigFieldNumber = 22,
    kLearningModelInferenceTrajectoryTaskConfigFieldNumber = 23,
  };
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  bool has_task_type() const;
  private:
  bool _internal_has_task_type() const;
  public:
  void clear_task_type();
  ::apollo::planning::TaskConfig_TaskType task_type() const;
  void set_task_type(::apollo::planning::TaskConfig_TaskType value);
  private:
  ::apollo::planning::TaskConfig_TaskType _internal_task_type() const;
  void _internal_set_task_type(::apollo::planning::TaskConfig_TaskType value);
  public:

  // .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
  bool has_creep_decider_config() const;
  private:
  bool _internal_has_creep_decider_config() const;
  public:
  void clear_creep_decider_config();
  const ::apollo::planning::CreepDeciderConfig& creep_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::CreepDeciderConfig* release_creep_decider_config();
  ::apollo::planning::CreepDeciderConfig* mutable_creep_decider_config();
  void set_allocated_creep_decider_config(::apollo::planning::CreepDeciderConfig* creep_decider_config);
  private:
  const ::apollo::planning::CreepDeciderConfig& _internal_creep_decider_config() const;
  ::apollo::planning::CreepDeciderConfig* _internal_mutable_creep_decider_config();
  public:
  void unsafe_arena_set_allocated_creep_decider_config(
      ::apollo::planning::CreepDeciderConfig* creep_decider_config);
  ::apollo::planning::CreepDeciderConfig* unsafe_arena_release_creep_decider_config();

  // .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
  bool has_lane_change_decider_config() const;
  private:
  bool _internal_has_lane_change_decider_config() const;
  public:
  void clear_lane_change_decider_config();
  const ::apollo::planning::LaneChangeDeciderConfig& lane_change_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::LaneChangeDeciderConfig* release_lane_change_decider_config();
  ::apollo::planning::LaneChangeDeciderConfig* mutable_lane_change_decider_config();
  void set_allocated_lane_change_decider_config(::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config);
  private:
  const ::apollo::planning::LaneChangeDeciderConfig& _internal_lane_change_decider_config() const;
  ::apollo::planning::LaneChangeDeciderConfig* _internal_mutable_lane_change_decider_config();
  public:
  void unsafe_arena_set_allocated_lane_change_decider_config(
      ::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config);
  ::apollo::planning::LaneChangeDeciderConfig* unsafe_arena_release_lane_change_decider_config();

  // .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
  bool has_open_space_fallback_decider_config() const;
  private:
  bool _internal_has_open_space_fallback_decider_config() const;
  public:
  void clear_open_space_fallback_decider_config();
  const ::apollo::planning::OpenSpaceFallBackDeciderConfig& open_space_fallback_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::OpenSpaceFallBackDeciderConfig* release_open_space_fallback_decider_config();
  ::apollo::planning::OpenSpaceFallBackDeciderConfig* mutable_open_space_fallback_decider_config();
  void set_allocated_open_space_fallback_decider_config(::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config);
  private:
  const ::apollo::planning::OpenSpaceFallBackDeciderConfig& _internal_open_space_fallback_decider_config() const;
  ::apollo::planning::OpenSpaceFallBackDeciderConfig* _internal_mutable_open_space_fallback_decider_config();
  public:
  void unsafe_arena_set_allocated_open_space_fallback_decider_config(
      ::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config);
  ::apollo::planning::OpenSpaceFallBackDeciderConfig* unsafe_arena_release_open_space_fallback_decider_config();

  // .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
  bool has_open_space_pre_stop_decider_config() const;
  private:
  bool _internal_has_open_space_pre_stop_decider_config() const;
  public:
  void clear_open_space_pre_stop_decider_config();
  const ::apollo::planning::OpenSpacePreStopDeciderConfig& open_space_pre_stop_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::OpenSpacePreStopDeciderConfig* release_open_space_pre_stop_decider_config();
  ::apollo::planning::OpenSpacePreStopDeciderConfig* mutable_open_space_pre_stop_decider_config();
  void set_allocated_open_space_pre_stop_decider_config(::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config);
  private:
  const ::apollo::planning::OpenSpacePreStopDeciderConfig& _internal_open_space_pre_stop_decider_config() const;
  ::apollo::planning::OpenSpacePreStopDeciderConfig* _internal_mutable_open_space_pre_stop_decider_config();
  public:
  void unsafe_arena_set_allocated_open_space_pre_stop_decider_config(
      ::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config);
  ::apollo::planning::OpenSpacePreStopDeciderConfig* unsafe_arena_release_open_space_pre_stop_decider_config();

  // .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
  bool has_open_space_roi_decider_config() const;
  private:
  bool _internal_has_open_space_roi_decider_config() const;
  public:
  void clear_open_space_roi_decider_config();
  const ::apollo::planning::OpenSpaceRoiDeciderConfig& open_space_roi_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::OpenSpaceRoiDeciderConfig* release_open_space_roi_decider_config();
  ::apollo::planning::OpenSpaceRoiDeciderConfig* mutable_open_space_roi_decider_config();
  void set_allocated_open_space_roi_decider_config(::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config);
  private:
  const ::apollo::planning::OpenSpaceRoiDeciderConfig& _internal_open_space_roi_decider_config() const;
  ::apollo::planning::OpenSpaceRoiDeciderConfig* _internal_mutable_open_space_roi_decider_config();
  public:
  void unsafe_arena_set_allocated_open_space_roi_decider_config(
      ::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config);
  ::apollo::planning::OpenSpaceRoiDeciderConfig* unsafe_arena_release_open_space_roi_decider_config();

  // .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
  bool has_path_assessment_decider_config() const;
  private:
  bool _internal_has_path_assessment_decider_config() const;
  public:
  void clear_path_assessment_decider_config();
  const ::apollo::planning::PathAssessmentDeciderConfig& path_assessment_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathAssessmentDeciderConfig* release_path_assessment_decider_config();
  ::apollo::planning::PathAssessmentDeciderConfig* mutable_path_assessment_decider_config();
  void set_allocated_path_assessment_decider_config(::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config);
  private:
  const ::apollo::planning::PathAssessmentDeciderConfig& _internal_path_assessment_decider_config() const;
  ::apollo::planning::PathAssessmentDeciderConfig* _internal_mutable_path_assessment_decider_config();
  public:
  void unsafe_arena_set_allocated_path_assessment_decider_config(
      ::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config);
  ::apollo::planning::PathAssessmentDeciderConfig* unsafe_arena_release_path_assessment_decider_config();

  // .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
  bool has_path_bounds_decider_config() const;
  private:
  bool _internal_has_path_bounds_decider_config() const;
  public:
  void clear_path_bounds_decider_config();
  const ::apollo::planning::PathBoundsDeciderConfig& path_bounds_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathBoundsDeciderConfig* release_path_bounds_decider_config();
  ::apollo::planning::PathBoundsDeciderConfig* mutable_path_bounds_decider_config();
  void set_allocated_path_bounds_decider_config(::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config);
  private:
  const ::apollo::planning::PathBoundsDeciderConfig& _internal_path_bounds_decider_config() const;
  ::apollo::planning::PathBoundsDeciderConfig* _internal_mutable_path_bounds_decider_config();
  public:
  void unsafe_arena_set_allocated_path_bounds_decider_config(
      ::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config);
  ::apollo::planning::PathBoundsDeciderConfig* unsafe_arena_release_path_bounds_decider_config();

  // .apollo.planning.PathDeciderConfig path_decider_config = 9;
  bool has_path_decider_config() const;
  private:
  bool _internal_has_path_decider_config() const;
  public:
  void clear_path_decider_config();
  const ::apollo::planning::PathDeciderConfig& path_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathDeciderConfig* release_path_decider_config();
  ::apollo::planning::PathDeciderConfig* mutable_path_decider_config();
  void set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config);
  private:
  const ::apollo::planning::PathDeciderConfig& _internal_path_decider_config() const;
  ::apollo::planning::PathDeciderConfig* _internal_mutable_path_decider_config();
  public:
  void unsafe_arena_set_allocated_path_decider_config(
      ::apollo::planning::PathDeciderConfig* path_decider_config);
  ::apollo::planning::PathDeciderConfig* unsafe_arena_release_path_decider_config();

  // .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
  bool has_path_lane_borrow_decider_config() const;
  private:
  bool _internal_has_path_lane_borrow_decider_config() const;
  public:
  void clear_path_lane_borrow_decider_config();
  const ::apollo::planning::PathLaneBorrowDeciderConfig& path_lane_borrow_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathLaneBorrowDeciderConfig* release_path_lane_borrow_decider_config();
  ::apollo::planning::PathLaneBorrowDeciderConfig* mutable_path_lane_borrow_decider_config();
  void set_allocated_path_lane_borrow_decider_config(::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config);
  private:
  const ::apollo::planning::PathLaneBorrowDeciderConfig& _internal_path_lane_borrow_decider_config() const;
  ::apollo::planning::PathLaneBorrowDeciderConfig* _internal_mutable_path_lane_borrow_decider_config();
  public:
  void unsafe_arena_set_allocated_path_lane_borrow_decider_config(
      ::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config);
  ::apollo::planning::PathLaneBorrowDeciderConfig* unsafe_arena_release_path_lane_borrow_decider_config();

  // .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
  bool has_path_reference_decider_config() const;
  private:
  bool _internal_has_path_reference_decider_config() const;
  public:
  void clear_path_reference_decider_config();
  const ::apollo::planning::PathReferenceDeciderConfig& path_reference_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathReferenceDeciderConfig* release_path_reference_decider_config();
  ::apollo::planning::PathReferenceDeciderConfig* mutable_path_reference_decider_config();
  void set_allocated_path_reference_decider_config(::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config);
  private:
  const ::apollo::planning::PathReferenceDeciderConfig& _internal_path_reference_decider_config() const;
  ::apollo::planning::PathReferenceDeciderConfig* _internal_mutable_path_reference_decider_config();
  public:
  void unsafe_arena_set_allocated_path_reference_decider_config(
      ::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config);
  ::apollo::planning::PathReferenceDeciderConfig* unsafe_arena_release_path_reference_decider_config();

  // .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
  bool has_path_reuse_decider_config() const;
  private:
  bool _internal_has_path_reuse_decider_config() const;
  public:
  void clear_path_reuse_decider_config();
  const ::apollo::planning::PathReuseDeciderConfig& path_reuse_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PathReuseDeciderConfig* release_path_reuse_decider_config();
  ::apollo::planning::PathReuseDeciderConfig* mutable_path_reuse_decider_config();
  void set_allocated_path_reuse_decider_config(::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config);
  private:
  const ::apollo::planning::PathReuseDeciderConfig& _internal_path_reuse_decider_config() const;
  ::apollo::planning::PathReuseDeciderConfig* _internal_mutable_path_reuse_decider_config();
  public:
  void unsafe_arena_set_allocated_path_reuse_decider_config(
      ::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config);
  ::apollo::planning::PathReuseDeciderConfig* unsafe_arena_release_path_reuse_decider_config();

  // .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
  bool has_rule_based_stop_decider_config() const;
  private:
  bool _internal_has_rule_based_stop_decider_config() const;
  public:
  void clear_rule_based_stop_decider_config();
  const ::apollo::planning::RuleBasedStopDeciderConfig& rule_based_stop_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::RuleBasedStopDeciderConfig* release_rule_based_stop_decider_config();
  ::apollo::planning::RuleBasedStopDeciderConfig* mutable_rule_based_stop_decider_config();
  void set_allocated_rule_based_stop_decider_config(::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config);
  private:
  const ::apollo::planning::RuleBasedStopDeciderConfig& _internal_rule_based_stop_decider_config() const;
  ::apollo::planning::RuleBasedStopDeciderConfig* _internal_mutable_rule_based_stop_decider_config();
  public:
  void unsafe_arena_set_allocated_rule_based_stop_decider_config(
      ::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config);
  ::apollo::planning::RuleBasedStopDeciderConfig* unsafe_arena_release_rule_based_stop_decider_config();

  // .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
  bool has_speed_bounds_decider_config() const;
  private:
  bool _internal_has_speed_bounds_decider_config() const;
  public:
  void clear_speed_bounds_decider_config();
  const ::apollo::planning::SpeedBoundsDeciderConfig& speed_bounds_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::SpeedBoundsDeciderConfig* release_speed_bounds_decider_config();
  ::apollo::planning::SpeedBoundsDeciderConfig* mutable_speed_bounds_decider_config();
  void set_allocated_speed_bounds_decider_config(::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config);
  private:
  const ::apollo::planning::SpeedBoundsDeciderConfig& _internal_speed_bounds_decider_config() const;
  ::apollo::planning::SpeedBoundsDeciderConfig* _internal_mutable_speed_bounds_decider_config();
  public:
  void unsafe_arena_set_allocated_speed_bounds_decider_config(
      ::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config);
  ::apollo::planning::SpeedBoundsDeciderConfig* unsafe_arena_release_speed_bounds_decider_config();

  // .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
  bool has_st_bounds_decider_config() const;
  private:
  bool _internal_has_st_bounds_decider_config() const;
  public:
  void clear_st_bounds_decider_config();
  const ::apollo::planning::STBoundsDeciderConfig& st_bounds_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::STBoundsDeciderConfig* release_st_bounds_decider_config();
  ::apollo::planning::STBoundsDeciderConfig* mutable_st_bounds_decider_config();
  void set_allocated_st_bounds_decider_config(::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config);
  private:
  const ::apollo::planning::STBoundsDeciderConfig& _internal_st_bounds_decider_config() const;
  ::apollo::planning::STBoundsDeciderConfig* _internal_mutable_st_bounds_decider_config();
  public:
  void unsafe_arena_set_allocated_st_bounds_decider_config(
      ::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config);
  ::apollo::planning::STBoundsDeciderConfig* unsafe_arena_release_st_bounds_decider_config();

  // .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
  bool has_open_space_trajectory_partition_config() const;
  private:
  bool _internal_has_open_space_trajectory_partition_config() const;
  public:
  void clear_open_space_trajectory_partition_config();
  const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& open_space_trajectory_partition_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* release_open_space_trajectory_partition_config();
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* mutable_open_space_trajectory_partition_config();
  void set_allocated_open_space_trajectory_partition_config(::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config);
  private:
  const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& _internal_open_space_trajectory_partition_config() const;
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* _internal_mutable_open_space_trajectory_partition_config();
  public:
  void unsafe_arena_set_allocated_open_space_trajectory_partition_config(
      ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config);
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* unsafe_arena_release_open_space_trajectory_partition_config();

  // .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
  bool has_open_space_trajectory_provider_config() const;
  private:
  bool _internal_has_open_space_trajectory_provider_config() const;
  public:
  void clear_open_space_trajectory_provider_config();
  const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& open_space_trajectory_provider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::OpenSpaceTrajectoryProviderConfig* release_open_space_trajectory_provider_config();
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig* mutable_open_space_trajectory_provider_config();
  void set_allocated_open_space_trajectory_provider_config(::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config);
  private:
  const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& _internal_open_space_trajectory_provider_config() const;
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig* _internal_mutable_open_space_trajectory_provider_config();
  public:
  void unsafe_arena_set_allocated_open_space_trajectory_provider_config(
      ::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config);
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig* unsafe_arena_release_open_space_trajectory_provider_config();

  // .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
  bool has_piecewise_jerk_nonlinear_speed_optimizer_config() const;
  private:
  bool _internal_has_piecewise_jerk_nonlinear_speed_optimizer_config() const;
  public:
  void clear_piecewise_jerk_nonlinear_speed_optimizer_config();
  const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig& piecewise_jerk_nonlinear_speed_optimizer_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* release_piecewise_jerk_nonlinear_speed_optimizer_config();
  ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* mutable_piecewise_jerk_nonlinear_speed_optimizer_config();
  void set_allocated_piecewise_jerk_nonlinear_speed_optimizer_config(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config);
  private:
  const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig& _internal_piecewise_jerk_nonlinear_speed_optimizer_config() const;
  ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* _internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config();
  public:
  void unsafe_arena_set_allocated_piecewise_jerk_nonlinear_speed_optimizer_config(
      ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config);
  ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* unsafe_arena_release_piecewise_jerk_nonlinear_speed_optimizer_config();

  // .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
  bool has_piecewise_jerk_path_optimizer_config() const;
  private:
  bool _internal_has_piecewise_jerk_path_optimizer_config() const;
  public:
  void clear_piecewise_jerk_path_optimizer_config();
  const ::apollo::planning::PiecewiseJerkPathOptimizerConfig& piecewise_jerk_path_optimizer_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PiecewiseJerkPathOptimizerConfig* release_piecewise_jerk_path_optimizer_config();
  ::apollo::planning::PiecewiseJerkPathOptimizerConfig* mutable_piecewise_jerk_path_optimizer_config();
  void set_allocated_piecewise_jerk_path_optimizer_config(::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config);
  private:
  const ::apollo::planning::PiecewiseJerkPathOptimizerConfig& _internal_piecewise_jerk_path_optimizer_config() const;
  ::apollo::planning::PiecewiseJerkPathOptimizerConfig* _internal_mutable_piecewise_jerk_path_optimizer_config();
  public:
  void unsafe_arena_set_allocated_piecewise_jerk_path_optimizer_config(
      ::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config);
  ::apollo::planning::PiecewiseJerkPathOptimizerConfig* unsafe_arena_release_piecewise_jerk_path_optimizer_config();

  // .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
  bool has_piecewise_jerk_speed_optimizer_config() const;
  private:
  bool _internal_has_piecewise_jerk_speed_optimizer_config() const;
  public:
  void clear_piecewise_jerk_speed_optimizer_config();
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& piecewise_jerk_speed_optimizer_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* release_piecewise_jerk_speed_optimizer_config();
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_piecewise_jerk_speed_optimizer_config();
  void set_allocated_piecewise_jerk_speed_optimizer_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config);
  private:
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& _internal_piecewise_jerk_speed_optimizer_config() const;
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* _internal_mutable_piecewise_jerk_speed_optimizer_config();
  public:
  void unsafe_arena_set_allocated_piecewise_jerk_speed_optimizer_config(
      ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config);
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* unsafe_arena_release_piecewise_jerk_speed_optimizer_config();

  // .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
  bool has_speed_heuristic_optimizer_config() const;
  private:
  bool _internal_has_speed_heuristic_optimizer_config() const;
  public:
  void clear_speed_heuristic_optimizer_config();
  const ::apollo::planning::SpeedHeuristicOptimizerConfig& speed_heuristic_optimizer_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::SpeedHeuristicOptimizerConfig* release_speed_heuristic_optimizer_config();
  ::apollo::planning::SpeedHeuristicOptimizerConfig* mutable_speed_heuristic_optimizer_config();
  void set_allocated_speed_heuristic_optimizer_config(::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config);
  private:
  const ::apollo::planning::SpeedHeuristicOptimizerConfig& _internal_speed_heuristic_optimizer_config() const;
  ::apollo::planning::SpeedHeuristicOptimizerConfig* _internal_mutable_speed_heuristic_optimizer_config();
  public:
  void unsafe_arena_set_allocated_speed_heuristic_optimizer_config(
      ::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config);
  ::apollo::planning::SpeedHeuristicOptimizerConfig* unsafe_arena_release_speed_heuristic_optimizer_config();

  // .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
  bool has_learning_model_inference_task_config() const;
  private:
  bool _internal_has_learning_model_inference_task_config() const;
  public:
  void clear_learning_model_inference_task_config();
  const ::apollo::planning::LearningModelInferenceTaskConfig& learning_model_inference_task_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::LearningModelInferenceTaskConfig* release_learning_model_inference_task_config();
  ::apollo::planning::LearningModelInferenceTaskConfig* mutable_learning_model_inference_task_config();
  void set_allocated_learning_model_inference_task_config(::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config);
  private:
  const ::apollo::planning::LearningModelInferenceTaskConfig& _internal_learning_model_inference_task_config() const;
  ::apollo::planning::LearningModelInferenceTaskConfig* _internal_mutable_learning_model_inference_task_config();
  public:
  void unsafe_arena_set_allocated_learning_model_inference_task_config(
      ::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config);
  ::apollo::planning::LearningModelInferenceTaskConfig* unsafe_arena_release_learning_model_inference_task_config();

  // .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
  bool has_learning_model_inference_trajectory_task_config() const;
  private:
  bool _internal_has_learning_model_inference_trajectory_task_config() const;
  public:
  void clear_learning_model_inference_trajectory_task_config();
  const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig& learning_model_inference_trajectory_task_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* release_learning_model_inference_trajectory_task_config();
  ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* mutable_learning_model_inference_trajectory_task_config();
  void set_allocated_learning_model_inference_trajectory_task_config(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config);
  private:
  const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig& _internal_learning_model_inference_trajectory_task_config() const;
  ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* _internal_mutable_learning_model_inference_trajectory_task_config();
  public:
  void unsafe_arena_set_allocated_learning_model_inference_trajectory_task_config(
      ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config);
  ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* unsafe_arena_release_learning_model_inference_trajectory_task_config();

  void clear_task_config();
  TaskConfigCase task_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.TaskConfig)
 private:
  class _Internal;
  void set_has_creep_decider_config();
  void set_has_lane_change_decider_config();
  void set_has_open_space_fallback_decider_config();
  void set_has_open_space_pre_stop_decider_config();
  void set_has_open_space_roi_decider_config();
  void set_has_path_assessment_decider_config();
  void set_has_path_bounds_decider_config();
  void set_has_path_decider_config();
  void set_has_path_lane_borrow_decider_config();
  void set_has_path_reference_decider_config();
  void set_has_path_reuse_decider_config();
  void set_has_rule_based_stop_decider_config();
  void set_has_speed_bounds_decider_config();
  void set_has_st_bounds_decider_config();
  void set_has_open_space_trajectory_partition_config();
  void set_has_open_space_trajectory_provider_config();
  void set_has_piecewise_jerk_nonlinear_speed_optimizer_config();
  void set_has_piecewise_jerk_path_optimizer_config();
  void set_has_piecewise_jerk_speed_optimizer_config();
  void set_has_speed_heuristic_optimizer_config();
  void set_has_learning_model_inference_task_config();
  void set_has_learning_model_inference_trajectory_task_config();

  inline bool has_task_config() const;
  inline void clear_has_task_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int task_type_;
    union TaskConfigUnion {
      constexpr TaskConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::CreepDeciderConfig* creep_decider_config_;
      ::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config_;
      ::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config_;
      ::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config_;
      ::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config_;
      ::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config_;
      ::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config_;
      ::apollo::planning::PathDeciderConfig* path_decider_config_;
      ::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config_;
      ::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config_;
      ::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config_;
      ::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config_;
      ::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config_;
      ::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config_;
      ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config_;
      ::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config_;
      ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config_;
      ::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config_;
      ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config_;
      ::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config_;
      ::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config_;
      ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config_;
    } task_config_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioBareIntersectionUnprotectedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioBareIntersectionUnprotectedConfig) */ {
 public:
  inline ScenarioBareIntersectionUnprotectedConfig() : ScenarioBareIntersectionUnprotectedConfig(nullptr) {}
  ~ScenarioBareIntersectionUnprotectedConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioBareIntersectionUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioBareIntersectionUnprotectedConfig(const ScenarioBareIntersectionUnprotectedConfig& from);
  ScenarioBareIntersectionUnprotectedConfig(ScenarioBareIntersectionUnprotectedConfig&& from) noexcept
    : ScenarioBareIntersectionUnprotectedConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioBareIntersectionUnprotectedConfig& operator=(const ScenarioBareIntersectionUnprotectedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioBareIntersectionUnprotectedConfig& operator=(ScenarioBareIntersectionUnprotectedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioBareIntersectionUnprotectedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioBareIntersectionUnprotectedConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioBareIntersectionUnprotectedConfig*>(
               &_ScenarioBareIntersectionUnprotectedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScenarioBareIntersectionUnprotectedConfig& a, ScenarioBareIntersectionUnprotectedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioBareIntersectionUnprotectedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioBareIntersectionUnprotectedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioBareIntersectionUnprotectedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioBareIntersectionUnprotectedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioBareIntersectionUnprotectedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioBareIntersectionUnprotectedConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioBareIntersectionUnprotectedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioBareIntersectionUnprotectedConfig";
  }
  protected:
  explicit ScenarioBareIntersectionUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableExplicitStopFieldNumber = 2,
    kStartBareIntersectionScenarioDistanceFieldNumber = 1,
    kMinPassSDistanceFieldNumber = 3,
    kApproachCruiseSpeedFieldNumber = 4,
    kStopDistanceFieldNumber = 5,
    kStopTimeoutSecFieldNumber = 6,
    kCreepTimeoutSecFieldNumber = 7,
  };
  // optional bool enable_explicit_stop = 2 [default = false];
  bool has_enable_explicit_stop() const;
  private:
  bool _internal_has_enable_explicit_stop() const;
  public:
  void clear_enable_explicit_stop();
  bool enable_explicit_stop() const;
  void set_enable_explicit_stop(bool value);
  private:
  bool _internal_enable_explicit_stop() const;
  void _internal_set_enable_explicit_stop(bool value);
  public:

  // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
  bool has_start_bare_intersection_scenario_distance() const;
  private:
  bool _internal_has_start_bare_intersection_scenario_distance() const;
  public:
  void clear_start_bare_intersection_scenario_distance();
  double start_bare_intersection_scenario_distance() const;
  void set_start_bare_intersection_scenario_distance(double value);
  private:
  double _internal_start_bare_intersection_scenario_distance() const;
  void _internal_set_start_bare_intersection_scenario_distance(double value);
  public:

  // optional double min_pass_s_distance = 3 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // optional double approach_cruise_speed = 4 [default = 6.7056];
  bool has_approach_cruise_speed() const;
  private:
  bool _internal_has_approach_cruise_speed() const;
  public:
  void clear_approach_cruise_speed();
  double approach_cruise_speed() const;
  void set_approach_cruise_speed(double value);
  private:
  double _internal_approach_cruise_speed() const;
  void _internal_set_approach_cruise_speed(double value);
  public:

  // optional double stop_distance = 5 [default = 0.5];
  bool has_stop_distance() const;
  private:
  bool _internal_has_stop_distance() const;
  public:
  void clear_stop_distance();
  double stop_distance() const;
  void set_stop_distance(double value);
  private:
  double _internal_stop_distance() const;
  void _internal_set_stop_distance(double value);
  public:

  // optional float stop_timeout_sec = 6 [default = 8];
  bool has_stop_timeout_sec() const;
  private:
  bool _internal_has_stop_timeout_sec() const;
  public:
  void clear_stop_timeout_sec();
  float stop_timeout_sec() const;
  void set_stop_timeout_sec(float value);
  private:
  float _internal_stop_timeout_sec() const;
  void _internal_set_stop_timeout_sec(float value);
  public:

  // optional float creep_timeout_sec = 7 [default = 10];
  bool has_creep_timeout_sec() const;
  private:
  bool _internal_has_creep_timeout_sec() const;
  public:
  void clear_creep_timeout_sec();
  float creep_timeout_sec() const;
  void set_creep_timeout_sec(float value);
  private:
  float _internal_creep_timeout_sec() const;
  void _internal_set_creep_timeout_sec(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_explicit_stop_;
    double start_bare_intersection_scenario_distance_;
    double min_pass_s_distance_;
    double approach_cruise_speed_;
    double stop_distance_;
    float stop_timeout_sec_;
    float creep_timeout_sec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioEmergencyPullOverConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioEmergencyPullOverConfig) */ {
 public:
  inline ScenarioEmergencyPullOverConfig() : ScenarioEmergencyPullOverConfig(nullptr) {}
  ~ScenarioEmergencyPullOverConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioEmergencyPullOverConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioEmergencyPullOverConfig(const ScenarioEmergencyPullOverConfig& from);
  ScenarioEmergencyPullOverConfig(ScenarioEmergencyPullOverConfig&& from) noexcept
    : ScenarioEmergencyPullOverConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioEmergencyPullOverConfig& operator=(const ScenarioEmergencyPullOverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioEmergencyPullOverConfig& operator=(ScenarioEmergencyPullOverConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioEmergencyPullOverConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioEmergencyPullOverConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioEmergencyPullOverConfig*>(
               &_ScenarioEmergencyPullOverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScenarioEmergencyPullOverConfig& a, ScenarioEmergencyPullOverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioEmergencyPullOverConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioEmergencyPullOverConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioEmergencyPullOverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioEmergencyPullOverConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioEmergencyPullOverConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioEmergencyPullOverConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioEmergencyPullOverConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioEmergencyPullOverConfig";
  }
  protected:
  explicit ScenarioEmergencyPullOverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxStopDecelerationFieldNumber = 1,
    kSlowDownDecelerationTimeFieldNumber = 2,
    kTargetSlowDownSpeedFieldNumber = 3,
    kStopDistanceFieldNumber = 4,
  };
  // optional double max_stop_deceleration = 1 [default = 3];
  bool has_max_stop_deceleration() const;
  private:
  bool _internal_has_max_stop_deceleration() const;
  public:
  void clear_max_stop_deceleration();
  double max_stop_deceleration() const;
  void set_max_stop_deceleration(double value);
  private:
  double _internal_max_stop_deceleration() const;
  void _internal_set_max_stop_deceleration(double value);
  public:

  // optional double slow_down_deceleration_time = 2 [default = 3];
  bool has_slow_down_deceleration_time() const;
  private:
  bool _internal_has_slow_down_deceleration_time() const;
  public:
  void clear_slow_down_deceleration_time();
  double slow_down_deceleration_time() const;
  void set_slow_down_deceleration_time(double value);
  private:
  double _internal_slow_down_deceleration_time() const;
  void _internal_set_slow_down_deceleration_time(double value);
  public:

  // optional double target_slow_down_speed = 3 [default = 2.5];
  bool has_target_slow_down_speed() const;
  private:
  bool _internal_has_target_slow_down_speed() const;
  public:
  void clear_target_slow_down_speed();
  double target_slow_down_speed() const;
  void set_target_slow_down_speed(double value);
  private:
  double _internal_target_slow_down_speed() const;
  void _internal_set_target_slow_down_speed(double value);
  public:

  // optional double stop_distance = 4 [default = 1.5];
  bool has_stop_distance() const;
  private:
  bool _internal_has_stop_distance() const;
  public:
  void clear_stop_distance();
  double stop_distance() const;
  void set_stop_distance(double value);
  private:
  double _internal_stop_distance() const;
  void _internal_set_stop_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioEmergencyPullOverConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_stop_deceleration_;
    double slow_down_deceleration_time_;
    double target_slow_down_speed_;
    double stop_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioEmergencyStopConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioEmergencyStopConfig) */ {
 public:
  inline ScenarioEmergencyStopConfig() : ScenarioEmergencyStopConfig(nullptr) {}
  ~ScenarioEmergencyStopConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioEmergencyStopConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioEmergencyStopConfig(const ScenarioEmergencyStopConfig& from);
  ScenarioEmergencyStopConfig(ScenarioEmergencyStopConfig&& from) noexcept
    : ScenarioEmergencyStopConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioEmergencyStopConfig& operator=(const ScenarioEmergencyStopConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioEmergencyStopConfig& operator=(ScenarioEmergencyStopConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioEmergencyStopConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioEmergencyStopConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioEmergencyStopConfig*>(
               &_ScenarioEmergencyStopConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScenarioEmergencyStopConfig& a, ScenarioEmergencyStopConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioEmergencyStopConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioEmergencyStopConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioEmergencyStopConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioEmergencyStopConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioEmergencyStopConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioEmergencyStopConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioEmergencyStopConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioEmergencyStopConfig";
  }
  protected:
  explicit ScenarioEmergencyStopConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxStopDecelerationFieldNumber = 1,
    kStopDistanceFieldNumber = 2,
  };
  // optional double max_stop_deceleration = 1 [default = 6];
  bool has_max_stop_deceleration() const;
  private:
  bool _internal_has_max_stop_deceleration() const;
  public:
  void clear_max_stop_deceleration();
  double max_stop_deceleration() const;
  void set_max_stop_deceleration(double value);
  private:
  double _internal_max_stop_deceleration() const;
  void _internal_set_max_stop_deceleration(double value);
  public:

  // optional double stop_distance = 2 [default = 1];
  bool has_stop_distance() const;
  private:
  bool _internal_has_stop_distance() const;
  public:
  void clear_stop_distance();
  double stop_distance() const;
  void set_stop_distance(double value);
  private:
  double _internal_stop_distance() const;
  void _internal_set_stop_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioEmergencyStopConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double max_stop_deceleration_;
    double stop_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioLaneFollowConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioLaneFollowConfig) */ {
 public:
  inline ScenarioLaneFollowConfig() : ScenarioLaneFollowConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ScenarioLaneFollowConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioLaneFollowConfig(const ScenarioLaneFollowConfig& from);
  ScenarioLaneFollowConfig(ScenarioLaneFollowConfig&& from) noexcept
    : ScenarioLaneFollowConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioLaneFollowConfig& operator=(const ScenarioLaneFollowConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioLaneFollowConfig& operator=(ScenarioLaneFollowConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioLaneFollowConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioLaneFollowConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioLaneFollowConfig*>(
               &_ScenarioLaneFollowConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScenarioLaneFollowConfig& a, ScenarioLaneFollowConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioLaneFollowConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioLaneFollowConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioLaneFollowConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioLaneFollowConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ScenarioLaneFollowConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ScenarioLaneFollowConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioLaneFollowConfig";
  }
  protected:
  explicit ScenarioLaneFollowConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioLaneFollowConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioLearningModelSampleConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioLearningModelSampleConfig) */ {
 public:
  inline ScenarioLearningModelSampleConfig() : ScenarioLearningModelSampleConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ScenarioLearningModelSampleConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioLearningModelSampleConfig(const ScenarioLearningModelSampleConfig& from);
  ScenarioLearningModelSampleConfig(ScenarioLearningModelSampleConfig&& from) noexcept
    : ScenarioLearningModelSampleConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioLearningModelSampleConfig& operator=(const ScenarioLearningModelSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioLearningModelSampleConfig& operator=(ScenarioLearningModelSampleConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioLearningModelSampleConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioLearningModelSampleConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioLearningModelSampleConfig*>(
               &_ScenarioLearningModelSampleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScenarioLearningModelSampleConfig& a, ScenarioLearningModelSampleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioLearningModelSampleConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioLearningModelSampleConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioLearningModelSampleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioLearningModelSampleConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ScenarioLearningModelSampleConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ScenarioLearningModelSampleConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioLearningModelSampleConfig";
  }
  protected:
  explicit ScenarioLearningModelSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioLearningModelSampleConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioNarrowStreetUTurnConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioNarrowStreetUTurnConfig) */ {
 public:
  inline ScenarioNarrowStreetUTurnConfig() : ScenarioNarrowStreetUTurnConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ScenarioNarrowStreetUTurnConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioNarrowStreetUTurnConfig(const ScenarioNarrowStreetUTurnConfig& from);
  ScenarioNarrowStreetUTurnConfig(ScenarioNarrowStreetUTurnConfig&& from) noexcept
    : ScenarioNarrowStreetUTurnConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioNarrowStreetUTurnConfig& operator=(const ScenarioNarrowStreetUTurnConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioNarrowStreetUTurnConfig& operator=(ScenarioNarrowStreetUTurnConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioNarrowStreetUTurnConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioNarrowStreetUTurnConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioNarrowStreetUTurnConfig*>(
               &_ScenarioNarrowStreetUTurnConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScenarioNarrowStreetUTurnConfig& a, ScenarioNarrowStreetUTurnConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioNarrowStreetUTurnConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioNarrowStreetUTurnConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioNarrowStreetUTurnConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioNarrowStreetUTurnConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ScenarioNarrowStreetUTurnConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ScenarioNarrowStreetUTurnConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioNarrowStreetUTurnConfig";
  }
  protected:
  explicit ScenarioNarrowStreetUTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioNarrowStreetUTurnConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioParkAndGoConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioParkAndGoConfig) */ {
 public:
  inline ScenarioParkAndGoConfig() : ScenarioParkAndGoConfig(nullptr) {}
  ~ScenarioParkAndGoConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioParkAndGoConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioParkAndGoConfig(const ScenarioParkAndGoConfig& from);
  ScenarioParkAndGoConfig(ScenarioParkAndGoConfig&& from) noexcept
    : ScenarioParkAndGoConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioParkAndGoConfig& operator=(const ScenarioParkAndGoConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioParkAndGoConfig& operator=(ScenarioParkAndGoConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioParkAndGoConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioParkAndGoConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioParkAndGoConfig*>(
               &_ScenarioParkAndGoConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ScenarioParkAndGoConfig& a, ScenarioParkAndGoConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioParkAndGoConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioParkAndGoConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioParkAndGoConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioParkAndGoConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioParkAndGoConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioParkAndGoConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioParkAndGoConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioParkAndGoConfig";
  }
  protected:
  explicit ScenarioParkAndGoConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontObstacleBufferFieldNumber = 1,
    kHeadingBufferFieldNumber = 2,
    kMinDistToDestFieldNumber = 3,
    kMaxSteeringPercentageWhenCruiseFieldNumber = 4,
  };
  // optional double front_obstacle_buffer = 1 [default = 4];
  bool has_front_obstacle_buffer() const;
  private:
  bool _internal_has_front_obstacle_buffer() const;
  public:
  void clear_front_obstacle_buffer();
  double front_obstacle_buffer() const;
  void set_front_obstacle_buffer(double value);
  private:
  double _internal_front_obstacle_buffer() const;
  void _internal_set_front_obstacle_buffer(double value);
  public:

  // optional double heading_buffer = 2 [default = 0.5];
  bool has_heading_buffer() const;
  private:
  bool _internal_has_heading_buffer() const;
  public:
  void clear_heading_buffer();
  double heading_buffer() const;
  void set_heading_buffer(double value);
  private:
  double _internal_heading_buffer() const;
  void _internal_set_heading_buffer(double value);
  public:

  // optional double min_dist_to_dest = 3 [default = 25];
  bool has_min_dist_to_dest() const;
  private:
  bool _internal_has_min_dist_to_dest() const;
  public:
  void clear_min_dist_to_dest();
  double min_dist_to_dest() const;
  void set_min_dist_to_dest(double value);
  private:
  double _internal_min_dist_to_dest() const;
  void _internal_set_min_dist_to_dest(double value);
  public:

  // optional double max_steering_percentage_when_cruise = 4 [default = 90];
  bool has_max_steering_percentage_when_cruise() const;
  private:
  bool _internal_has_max_steering_percentage_when_cruise() const;
  public:
  void clear_max_steering_percentage_when_cruise();
  double max_steering_percentage_when_cruise() const;
  void set_max_steering_percentage_when_cruise(double value);
  private:
  double _internal_max_steering_percentage_when_cruise() const;
  void _internal_set_max_steering_percentage_when_cruise(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioParkAndGoConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double front_obstacle_buffer_;
    double heading_buffer_;
    double min_dist_to_dest_;
    double max_steering_percentage_when_cruise_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioPullOverConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioPullOverConfig) */ {
 public:
  inline ScenarioPullOverConfig() : ScenarioPullOverConfig(nullptr) {}
  ~ScenarioPullOverConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioPullOverConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioPullOverConfig(const ScenarioPullOverConfig& from);
  ScenarioPullOverConfig(ScenarioPullOverConfig&& from) noexcept
    : ScenarioPullOverConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioPullOverConfig& operator=(const ScenarioPullOverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioPullOverConfig& operator=(ScenarioPullOverConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioPullOverConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioPullOverConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioPullOverConfig*>(
               &_ScenarioPullOverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ScenarioPullOverConfig& a, ScenarioPullOverConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioPullOverConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioPullOverConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioPullOverConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioPullOverConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioPullOverConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioPullOverConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioPullOverConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioPullOverConfig";
  }
  protected:
  explicit ScenarioPullOverConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPullOverScenarioDistanceFieldNumber = 1,
    kPullOverMinDistanceBufferFieldNumber = 2,
    kMaxDistanceStopSearchFieldNumber = 3,
    kMaxSErrorToEndPointFieldNumber = 4,
    kMaxLErrorToEndPointFieldNumber = 5,
    kMaxThetaErrorToEndPointFieldNumber = 6,
    kMaxDistanceErrorToEndPointFieldNumber = 7,
    kPassDestinationThresholdFieldNumber = 8,
    kMaxValidStopDistanceFieldNumber = 9,
    kSDistanceToStopForOpenSpaceParkingFieldNumber = 10,
  };
  // optional double start_pull_over_scenario_distance = 1 [default = 50];
  bool has_start_pull_over_scenario_distance() const;
  private:
  bool _internal_has_start_pull_over_scenario_distance() const;
  public:
  void clear_start_pull_over_scenario_distance();
  double start_pull_over_scenario_distance() const;
  void set_start_pull_over_scenario_distance(double value);
  private:
  double _internal_start_pull_over_scenario_distance() const;
  void _internal_set_start_pull_over_scenario_distance(double value);
  public:

  // optional double pull_over_min_distance_buffer = 2 [default = 10];
  bool has_pull_over_min_distance_buffer() const;
  private:
  bool _internal_has_pull_over_min_distance_buffer() const;
  public:
  void clear_pull_over_min_distance_buffer();
  double pull_over_min_distance_buffer() const;
  void set_pull_over_min_distance_buffer(double value);
  private:
  double _internal_pull_over_min_distance_buffer() const;
  void _internal_set_pull_over_min_distance_buffer(double value);
  public:

  // optional double max_distance_stop_search = 3 [default = 25];
  bool has_max_distance_stop_search() const;
  private:
  bool _internal_has_max_distance_stop_search() const;
  public:
  void clear_max_distance_stop_search();
  double max_distance_stop_search() const;
  void set_max_distance_stop_search(double value);
  private:
  double _internal_max_distance_stop_search() const;
  void _internal_set_max_distance_stop_search(double value);
  public:

  // optional double max_s_error_to_end_point = 4 [default = 0.2];
  bool has_max_s_error_to_end_point() const;
  private:
  bool _internal_has_max_s_error_to_end_point() const;
  public:
  void clear_max_s_error_to_end_point();
  double max_s_error_to_end_point() const;
  void set_max_s_error_to_end_point(double value);
  private:
  double _internal_max_s_error_to_end_point() const;
  void _internal_set_max_s_error_to_end_point(double value);
  public:

  // optional double max_l_error_to_end_point = 5 [default = 0.5];
  bool has_max_l_error_to_end_point() const;
  private:
  bool _internal_has_max_l_error_to_end_point() const;
  public:
  void clear_max_l_error_to_end_point();
  double max_l_error_to_end_point() const;
  void set_max_l_error_to_end_point(double value);
  private:
  double _internal_max_l_error_to_end_point() const;
  void _internal_set_max_l_error_to_end_point(double value);
  public:

  // optional double max_theta_error_to_end_point = 6 [default = 0.2];
  bool has_max_theta_error_to_end_point() const;
  private:
  bool _internal_has_max_theta_error_to_end_point() const;
  public:
  void clear_max_theta_error_to_end_point();
  double max_theta_error_to_end_point() const;
  void set_max_theta_error_to_end_point(double value);
  private:
  double _internal_max_theta_error_to_end_point() const;
  void _internal_set_max_theta_error_to_end_point(double value);
  public:

  // optional double max_distance_error_to_end_point = 7 [default = 0.2];
  bool has_max_distance_error_to_end_point() const;
  private:
  bool _internal_has_max_distance_error_to_end_point() const;
  public:
  void clear_max_distance_error_to_end_point();
  double max_distance_error_to_end_point() const;
  void set_max_distance_error_to_end_point(double value);
  private:
  double _internal_max_distance_error_to_end_point() const;
  void _internal_set_max_distance_error_to_end_point(double value);
  public:

  // optional double pass_destination_threshold = 8 [default = 10];
  bool has_pass_destination_threshold() const;
  private:
  bool _internal_has_pass_destination_threshold() const;
  public:
  void clear_pass_destination_threshold();
  double pass_destination_threshold() const;
  void set_pass_destination_threshold(double value);
  private:
  double _internal_pass_destination_threshold() const;
  void _internal_set_pass_destination_threshold(double value);
  public:

  // optional double max_valid_stop_distance = 9 [default = 1];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
  bool has_s_distance_to_stop_for_open_space_parking() const;
  private:
  bool _internal_has_s_distance_to_stop_for_open_space_parking() const;
  public:
  void clear_s_distance_to_stop_for_open_space_parking();
  double s_distance_to_stop_for_open_space_parking() const;
  void set_s_distance_to_stop_for_open_space_parking(double value);
  private:
  double _internal_s_distance_to_stop_for_open_space_parking() const;
  void _internal_set_s_distance_to_stop_for_open_space_parking(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioPullOverConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double start_pull_over_scenario_distance_;
    double pull_over_min_distance_buffer_;
    double max_distance_stop_search_;
    double max_s_error_to_end_point_;
    double max_l_error_to_end_point_;
    double max_theta_error_to_end_point_;
    double max_distance_error_to_end_point_;
    double pass_destination_threshold_;
    double max_valid_stop_distance_;
    double s_distance_to_stop_for_open_space_parking_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioStopSignUnprotectedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioStopSignUnprotectedConfig) */ {
 public:
  inline ScenarioStopSignUnprotectedConfig() : ScenarioStopSignUnprotectedConfig(nullptr) {}
  ~ScenarioStopSignUnprotectedConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioStopSignUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioStopSignUnprotectedConfig(const ScenarioStopSignUnprotectedConfig& from);
  ScenarioStopSignUnprotectedConfig(ScenarioStopSignUnprotectedConfig&& from) noexcept
    : ScenarioStopSignUnprotectedConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioStopSignUnprotectedConfig& operator=(const ScenarioStopSignUnprotectedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioStopSignUnprotectedConfig& operator=(ScenarioStopSignUnprotectedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioStopSignUnprotectedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioStopSignUnprotectedConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioStopSignUnprotectedConfig*>(
               &_ScenarioStopSignUnprotectedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ScenarioStopSignUnprotectedConfig& a, ScenarioStopSignUnprotectedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioStopSignUnprotectedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioStopSignUnprotectedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioStopSignUnprotectedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioStopSignUnprotectedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioStopSignUnprotectedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioStopSignUnprotectedConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioStopSignUnprotectedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioStopSignUnprotectedConfig";
  }
  protected:
  explicit ScenarioStopSignUnprotectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepTimeoutSecFieldNumber = 7,
    kStartStopSignScenarioDistanceFieldNumber = 1,
    kWatchVehicleMaxValidStopDistanceFieldNumber = 2,
    kMaxValidStopDistanceFieldNumber = 3,
    kMinPassSDistanceFieldNumber = 5,
    kStopDurationSecFieldNumber = 4,
    kStopTimeoutSecFieldNumber = 6,
  };
  // optional float creep_timeout_sec = 7 [default = 10];
  bool has_creep_timeout_sec() const;
  private:
  bool _internal_has_creep_timeout_sec() const;
  public:
  void clear_creep_timeout_sec();
  float creep_timeout_sec() const;
  void set_creep_timeout_sec(float value);
  private:
  float _internal_creep_timeout_sec() const;
  void _internal_set_creep_timeout_sec(float value);
  public:

  // optional double start_stop_sign_scenario_distance = 1 [default = 5];
  bool has_start_stop_sign_scenario_distance() const;
  private:
  bool _internal_has_start_stop_sign_scenario_distance() const;
  public:
  void clear_start_stop_sign_scenario_distance();
  double start_stop_sign_scenario_distance() const;
  void set_start_stop_sign_scenario_distance(double value);
  private:
  double _internal_start_stop_sign_scenario_distance() const;
  void _internal_set_start_stop_sign_scenario_distance(double value);
  public:

  // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
  bool has_watch_vehicle_max_valid_stop_distance() const;
  private:
  bool _internal_has_watch_vehicle_max_valid_stop_distance() const;
  public:
  void clear_watch_vehicle_max_valid_stop_distance();
  double watch_vehicle_max_valid_stop_distance() const;
  void set_watch_vehicle_max_valid_stop_distance(double value);
  private:
  double _internal_watch_vehicle_max_valid_stop_distance() const;
  void _internal_set_watch_vehicle_max_valid_stop_distance(double value);
  public:

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_pass_s_distance = 5 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // optional float stop_duration_sec = 4 [default = 1];
  bool has_stop_duration_sec() const;
  private:
  bool _internal_has_stop_duration_sec() const;
  public:
  void clear_stop_duration_sec();
  float stop_duration_sec() const;
  void set_stop_duration_sec(float value);
  private:
  float _internal_stop_duration_sec() const;
  void _internal_set_stop_duration_sec(float value);
  public:

  // optional float stop_timeout_sec = 6 [default = 8];
  bool has_stop_timeout_sec() const;
  private:
  bool _internal_has_stop_timeout_sec() const;
  public:
  void clear_stop_timeout_sec();
  float stop_timeout_sec() const;
  void set_stop_timeout_sec(float value);
  private:
  float _internal_stop_timeout_sec() const;
  void _internal_set_stop_timeout_sec(float value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioStopSignUnprotectedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float creep_timeout_sec_;
    double start_stop_sign_scenario_distance_;
    double watch_vehicle_max_valid_stop_distance_;
    double max_valid_stop_distance_;
    double min_pass_s_distance_;
    float stop_duration_sec_;
    float stop_timeout_sec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioTrafficLightProtectedConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioTrafficLightProtectedConfig) */ {
 public:
  inline ScenarioTrafficLightProtectedConfig() : ScenarioTrafficLightProtectedConfig(nullptr) {}
  ~ScenarioTrafficLightProtectedConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioTrafficLightProtectedConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioTrafficLightProtectedConfig(const ScenarioTrafficLightProtectedConfig& from);
  ScenarioTrafficLightProtectedConfig(ScenarioTrafficLightProtectedConfig&& from) noexcept
    : ScenarioTrafficLightProtectedConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioTrafficLightProtectedConfig& operator=(const ScenarioTrafficLightProtectedConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioTrafficLightProtectedConfig& operator=(ScenarioTrafficLightProtectedConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioTrafficLightProtectedConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioTrafficLightProtectedConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioTrafficLightProtectedConfig*>(
               &_ScenarioTrafficLightProtectedConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ScenarioTrafficLightProtectedConfig& a, ScenarioTrafficLightProtectedConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioTrafficLightProtectedConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioTrafficLightProtectedConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioTrafficLightProtectedConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioTrafficLightProtectedConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioTrafficLightProtectedConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioTrafficLightProtectedConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioTrafficLightProtectedConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioTrafficLightProtectedConfig";
  }
  protected:
  explicit ScenarioTrafficLightProtectedConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTrafficLightScenarioDistanceFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
    kMinPassSDistanceFieldNumber = 3,
  };
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  bool has_start_traffic_light_scenario_distance() const;
  private:
  bool _internal_has_start_traffic_light_scenario_distance() const;
  public:
  void clear_start_traffic_light_scenario_distance();
  double start_traffic_light_scenario_distance() const;
  void set_start_traffic_light_scenario_distance(double value);
  private:
  double _internal_start_traffic_light_scenario_distance() const;
  void _internal_set_start_traffic_light_scenario_distance(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 2];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_pass_s_distance = 3 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioTrafficLightProtectedConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double start_traffic_light_scenario_distance_;
    double max_valid_stop_distance_;
    double min_pass_s_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioTrafficLightUnprotectedLeftTurnConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig) */ {
 public:
  inline ScenarioTrafficLightUnprotectedLeftTurnConfig() : ScenarioTrafficLightUnprotectedLeftTurnConfig(nullptr) {}
  ~ScenarioTrafficLightUnprotectedLeftTurnConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedLeftTurnConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioTrafficLightUnprotectedLeftTurnConfig(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from);
  ScenarioTrafficLightUnprotectedLeftTurnConfig(ScenarioTrafficLightUnprotectedLeftTurnConfig&& from) noexcept
    : ScenarioTrafficLightUnprotectedLeftTurnConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioTrafficLightUnprotectedLeftTurnConfig& operator=(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioTrafficLightUnprotectedLeftTurnConfig& operator=(ScenarioTrafficLightUnprotectedLeftTurnConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioTrafficLightUnprotectedLeftTurnConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioTrafficLightUnprotectedLeftTurnConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioTrafficLightUnprotectedLeftTurnConfig*>(
               &_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ScenarioTrafficLightUnprotectedLeftTurnConfig& a, ScenarioTrafficLightUnprotectedLeftTurnConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioTrafficLightUnprotectedLeftTurnConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioTrafficLightUnprotectedLeftTurnConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig";
  }
  protected:
  explicit ScenarioTrafficLightUnprotectedLeftTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepTimeoutSecFieldNumber = 5,
    kStartTrafficLightScenarioDistanceFieldNumber = 1,
    kApproachCruiseSpeedFieldNumber = 2,
    kMaxValidStopDistanceFieldNumber = 3,
    kMinPassSDistanceFieldNumber = 4,
    kMaxAdcSpeedBeforeCreepFieldNumber = 6,
  };
  // optional float creep_timeout_sec = 5 [default = 10];
  bool has_creep_timeout_sec() const;
  private:
  bool _internal_has_creep_timeout_sec() const;
  public:
  void clear_creep_timeout_sec();
  float creep_timeout_sec() const;
  void set_creep_timeout_sec(float value);
  private:
  float _internal_creep_timeout_sec() const;
  void _internal_set_creep_timeout_sec(float value);
  public:

  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  bool has_start_traffic_light_scenario_distance() const;
  private:
  bool _internal_has_start_traffic_light_scenario_distance() const;
  public:
  void clear_start_traffic_light_scenario_distance();
  double start_traffic_light_scenario_distance() const;
  void set_start_traffic_light_scenario_distance(double value);
  private:
  double _internal_start_traffic_light_scenario_distance() const;
  void _internal_set_start_traffic_light_scenario_distance(double value);
  public:

  // optional double approach_cruise_speed = 2 [default = 2.78];
  bool has_approach_cruise_speed() const;
  private:
  bool _internal_has_approach_cruise_speed() const;
  public:
  void clear_approach_cruise_speed();
  double approach_cruise_speed() const;
  void set_approach_cruise_speed(double value);
  private:
  double _internal_approach_cruise_speed() const;
  void _internal_set_approach_cruise_speed(double value);
  public:

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_pass_s_distance = 4 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // optional double max_adc_speed_before_creep = 6 [default = 5.56];
  bool has_max_adc_speed_before_creep() const;
  private:
  bool _internal_has_max_adc_speed_before_creep() const;
  public:
  void clear_max_adc_speed_before_creep();
  double max_adc_speed_before_creep() const;
  void set_max_adc_speed_before_creep(double value);
  private:
  double _internal_max_adc_speed_before_creep() const;
  void _internal_set_max_adc_speed_before_creep(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float creep_timeout_sec_;
    double start_traffic_light_scenario_distance_;
    double approach_cruise_speed_;
    double max_valid_stop_distance_;
    double min_pass_s_distance_;
    double max_adc_speed_before_creep_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioTrafficLightUnprotectedRightTurnConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig) */ {
 public:
  inline ScenarioTrafficLightUnprotectedRightTurnConfig() : ScenarioTrafficLightUnprotectedRightTurnConfig(nullptr) {}
  ~ScenarioTrafficLightUnprotectedRightTurnConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioTrafficLightUnprotectedRightTurnConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioTrafficLightUnprotectedRightTurnConfig(const ScenarioTrafficLightUnprotectedRightTurnConfig& from);
  ScenarioTrafficLightUnprotectedRightTurnConfig(ScenarioTrafficLightUnprotectedRightTurnConfig&& from) noexcept
    : ScenarioTrafficLightUnprotectedRightTurnConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioTrafficLightUnprotectedRightTurnConfig& operator=(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioTrafficLightUnprotectedRightTurnConfig& operator=(ScenarioTrafficLightUnprotectedRightTurnConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioTrafficLightUnprotectedRightTurnConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioTrafficLightUnprotectedRightTurnConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioTrafficLightUnprotectedRightTurnConfig*>(
               &_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ScenarioTrafficLightUnprotectedRightTurnConfig& a, ScenarioTrafficLightUnprotectedRightTurnConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioTrafficLightUnprotectedRightTurnConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioTrafficLightUnprotectedRightTurnConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioTrafficLightUnprotectedRightTurnConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig";
  }
  protected:
  explicit ScenarioTrafficLightUnprotectedRightTurnConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableRightTurnOnRedFieldNumber = 2,
    kStartTrafficLightScenarioDistanceFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 3,
    kMinPassSDistanceFieldNumber = 4,
    kRedLightRightTurnStopDurationSecFieldNumber = 5,
    kCreepTimeoutSecFieldNumber = 6,
    kMaxAdcSpeedBeforeCreepFieldNumber = 7,
  };
  // optional bool enable_right_turn_on_red = 2 [default = false];
  bool has_enable_right_turn_on_red() const;
  private:
  bool _internal_has_enable_right_turn_on_red() const;
  public:
  void clear_enable_right_turn_on_red();
  bool enable_right_turn_on_red() const;
  void set_enable_right_turn_on_red(bool value);
  private:
  bool _internal_enable_right_turn_on_red() const;
  void _internal_set_enable_right_turn_on_red(bool value);
  public:

  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  bool has_start_traffic_light_scenario_distance() const;
  private:
  bool _internal_has_start_traffic_light_scenario_distance() const;
  public:
  void clear_start_traffic_light_scenario_distance();
  double start_traffic_light_scenario_distance() const;
  void set_start_traffic_light_scenario_distance(double value);
  private:
  double _internal_start_traffic_light_scenario_distance() const;
  void _internal_set_start_traffic_light_scenario_distance(double value);
  public:

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_pass_s_distance = 4 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
  bool has_red_light_right_turn_stop_duration_sec() const;
  private:
  bool _internal_has_red_light_right_turn_stop_duration_sec() const;
  public:
  void clear_red_light_right_turn_stop_duration_sec();
  float red_light_right_turn_stop_duration_sec() const;
  void set_red_light_right_turn_stop_duration_sec(float value);
  private:
  float _internal_red_light_right_turn_stop_duration_sec() const;
  void _internal_set_red_light_right_turn_stop_duration_sec(float value);
  public:

  // optional float creep_timeout_sec = 6 [default = 10];
  bool has_creep_timeout_sec() const;
  private:
  bool _internal_has_creep_timeout_sec() const;
  public:
  void clear_creep_timeout_sec();
  float creep_timeout_sec() const;
  void set_creep_timeout_sec(float value);
  private:
  float _internal_creep_timeout_sec() const;
  void _internal_set_creep_timeout_sec(float value);
  public:

  // optional double max_adc_speed_before_creep = 7 [default = 3];
  bool has_max_adc_speed_before_creep() const;
  private:
  bool _internal_has_max_adc_speed_before_creep() const;
  public:
  void clear_max_adc_speed_before_creep();
  double max_adc_speed_before_creep() const;
  void set_max_adc_speed_before_creep(double value);
  private:
  double _internal_max_adc_speed_before_creep() const;
  void _internal_set_max_adc_speed_before_creep(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_right_turn_on_red_;
    double start_traffic_light_scenario_distance_;
    double max_valid_stop_distance_;
    double min_pass_s_distance_;
    float red_light_right_turn_stop_duration_sec_;
    float creep_timeout_sec_;
    double max_adc_speed_before_creep_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioValetParkingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioValetParkingConfig) */ {
 public:
  inline ScenarioValetParkingConfig() : ScenarioValetParkingConfig(nullptr) {}
  ~ScenarioValetParkingConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioValetParkingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioValetParkingConfig(const ScenarioValetParkingConfig& from);
  ScenarioValetParkingConfig(ScenarioValetParkingConfig&& from) noexcept
    : ScenarioValetParkingConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioValetParkingConfig& operator=(const ScenarioValetParkingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioValetParkingConfig& operator=(ScenarioValetParkingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioValetParkingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioValetParkingConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioValetParkingConfig*>(
               &_ScenarioValetParkingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ScenarioValetParkingConfig& a, ScenarioValetParkingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioValetParkingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioValetParkingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioValetParkingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioValetParkingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioValetParkingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioValetParkingConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioValetParkingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioValetParkingConfig";
  }
  protected:
  explicit ScenarioValetParkingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParkingSpotRangeToStartFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
  };
  // optional double parking_spot_range_to_start = 1 [default = 20];
  bool has_parking_spot_range_to_start() const;
  private:
  bool _internal_has_parking_spot_range_to_start() const;
  public:
  void clear_parking_spot_range_to_start();
  double parking_spot_range_to_start() const;
  void set_parking_spot_range_to_start(double value);
  private:
  double _internal_parking_spot_range_to_start() const;
  void _internal_set_parking_spot_range_to_start(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 1];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioValetParkingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double parking_spot_range_to_start_;
    double max_valid_stop_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioDeadEndTurnAroundConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioDeadEndTurnAroundConfig) */ {
 public:
  inline ScenarioDeadEndTurnAroundConfig() : ScenarioDeadEndTurnAroundConfig(nullptr) {}
  ~ScenarioDeadEndTurnAroundConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioDeadEndTurnAroundConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioDeadEndTurnAroundConfig(const ScenarioDeadEndTurnAroundConfig& from);
  ScenarioDeadEndTurnAroundConfig(ScenarioDeadEndTurnAroundConfig&& from) noexcept
    : ScenarioDeadEndTurnAroundConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioDeadEndTurnAroundConfig& operator=(const ScenarioDeadEndTurnAroundConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioDeadEndTurnAroundConfig& operator=(ScenarioDeadEndTurnAroundConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioDeadEndTurnAroundConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioDeadEndTurnAroundConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioDeadEndTurnAroundConfig*>(
               &_ScenarioDeadEndTurnAroundConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ScenarioDeadEndTurnAroundConfig& a, ScenarioDeadEndTurnAroundConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioDeadEndTurnAroundConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioDeadEndTurnAroundConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioDeadEndTurnAroundConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioDeadEndTurnAroundConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioDeadEndTurnAroundConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioDeadEndTurnAroundConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioDeadEndTurnAroundConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioDeadEndTurnAroundConfig";
  }
  protected:
  explicit ScenarioDeadEndTurnAroundConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeadEndStartRangeFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
  };
  // optional double dead_end_start_range = 1 [default = 20];
  bool has_dead_end_start_range() const;
  private:
  bool _internal_has_dead_end_start_range() const;
  public:
  void clear_dead_end_start_range();
  double dead_end_start_range() const;
  void set_dead_end_start_range(double value);
  private:
  double _internal_dead_end_start_range() const;
  void _internal_set_dead_end_start_range(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 1];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioDeadEndTurnAroundConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double dead_end_start_range_;
    double max_valid_stop_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioYieldSignConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioYieldSignConfig) */ {
 public:
  inline ScenarioYieldSignConfig() : ScenarioYieldSignConfig(nullptr) {}
  ~ScenarioYieldSignConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioYieldSignConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioYieldSignConfig(const ScenarioYieldSignConfig& from);
  ScenarioYieldSignConfig(ScenarioYieldSignConfig&& from) noexcept
    : ScenarioYieldSignConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioYieldSignConfig& operator=(const ScenarioYieldSignConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioYieldSignConfig& operator=(ScenarioYieldSignConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioYieldSignConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioYieldSignConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioYieldSignConfig*>(
               &_ScenarioYieldSignConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ScenarioYieldSignConfig& a, ScenarioYieldSignConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioYieldSignConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioYieldSignConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioYieldSignConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioYieldSignConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioYieldSignConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioYieldSignConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioYieldSignConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioYieldSignConfig";
  }
  protected:
  explicit ScenarioYieldSignConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepTimeoutSecFieldNumber = 4,
    kStartYieldSignScenarioDistanceFieldNumber = 1,
    kMaxValidStopDistanceFieldNumber = 2,
    kMinPassSDistanceFieldNumber = 3,
  };
  // optional float creep_timeout_sec = 4 [default = 10];
  bool has_creep_timeout_sec() const;
  private:
  bool _internal_has_creep_timeout_sec() const;
  public:
  void clear_creep_timeout_sec();
  float creep_timeout_sec() const;
  void set_creep_timeout_sec(float value);
  private:
  float _internal_creep_timeout_sec() const;
  void _internal_set_creep_timeout_sec(float value);
  public:

  // optional double start_yield_sign_scenario_distance = 1 [default = 10];
  bool has_start_yield_sign_scenario_distance() const;
  private:
  bool _internal_has_start_yield_sign_scenario_distance() const;
  public:
  void clear_start_yield_sign_scenario_distance();
  double start_yield_sign_scenario_distance() const;
  void set_start_yield_sign_scenario_distance(double value);
  private:
  double _internal_start_yield_sign_scenario_distance() const;
  void _internal_set_start_yield_sign_scenario_distance(double value);
  public:

  // optional double max_valid_stop_distance = 2 [default = 4.5];
  bool has_max_valid_stop_distance() const;
  private:
  bool _internal_has_max_valid_stop_distance() const;
  public:
  void clear_max_valid_stop_distance();
  double max_valid_stop_distance() const;
  void set_max_valid_stop_distance(double value);
  private:
  double _internal_max_valid_stop_distance() const;
  void _internal_set_max_valid_stop_distance(double value);
  public:

  // optional double min_pass_s_distance = 3 [default = 3];
  bool has_min_pass_s_distance() const;
  private:
  bool _internal_has_min_pass_s_distance() const;
  public:
  void clear_min_pass_s_distance();
  double min_pass_s_distance() const;
  void set_min_pass_s_distance(double value);
  private:
  double _internal_min_pass_s_distance() const;
  void _internal_set_min_pass_s_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioYieldSignConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float creep_timeout_sec_;
    double start_yield_sign_scenario_distance_;
    double max_valid_stop_distance_;
    double min_pass_s_distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioConfig_StageConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioConfig.StageConfig) */ {
 public:
  inline ScenarioConfig_StageConfig() : ScenarioConfig_StageConfig(nullptr) {}
  ~ScenarioConfig_StageConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioConfig_StageConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioConfig_StageConfig(const ScenarioConfig_StageConfig& from);
  ScenarioConfig_StageConfig(ScenarioConfig_StageConfig&& from) noexcept
    : ScenarioConfig_StageConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioConfig_StageConfig& operator=(const ScenarioConfig_StageConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioConfig_StageConfig& operator=(ScenarioConfig_StageConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioConfig_StageConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScenarioConfig_StageConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioConfig_StageConfig*>(
               &_ScenarioConfig_StageConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ScenarioConfig_StageConfig& a, ScenarioConfig_StageConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioConfig_StageConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioConfig_StageConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioConfig_StageConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioConfig_StageConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioConfig_StageConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioConfig_StageConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioConfig_StageConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioConfig.StageConfig";
  }
  protected:
  explicit ScenarioConfig_StageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskTypeFieldNumber = 3,
    kTaskConfigFieldNumber = 4,
    kStageTypeFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  int task_type_size() const;
  private:
  int _internal_task_type_size() const;
  public:
  void clear_task_type();
  private:
  ::apollo::planning::TaskConfig_TaskType _internal_task_type(int index) const;
  void _internal_add_task_type(::apollo::planning::TaskConfig_TaskType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_task_type();
  public:
  ::apollo::planning::TaskConfig_TaskType task_type(int index) const;
  void set_task_type(int index, ::apollo::planning::TaskConfig_TaskType value);
  void add_task_type(::apollo::planning::TaskConfig_TaskType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& task_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_task_type();

  // repeated .apollo.planning.TaskConfig task_config = 4;
  int task_config_size() const;
  private:
  int _internal_task_config_size() const;
  public:
  void clear_task_config();
  ::apollo::planning::TaskConfig* mutable_task_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >*
      mutable_task_config();
  private:
  const ::apollo::planning::TaskConfig& _internal_task_config(int index) const;
  ::apollo::planning::TaskConfig* _internal_add_task_config();
  public:
  const ::apollo::planning::TaskConfig& task_config(int index) const;
  ::apollo::planning::TaskConfig* add_task_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >&
      task_config() const;

  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
  bool has_stage_type() const;
  private:
  bool _internal_has_stage_type() const;
  public:
  void clear_stage_type();
  ::apollo::planning::ScenarioConfig_StageType stage_type() const;
  void set_stage_type(::apollo::planning::ScenarioConfig_StageType value);
  private:
  ::apollo::planning::ScenarioConfig_StageType _internal_stage_type() const;
  void _internal_set_stage_type(::apollo::planning::ScenarioConfig_StageType value);
  public:

  // optional bool enabled = 2 [default = true];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioConfig.StageConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> task_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig > task_config_;
    int stage_type_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ScenarioConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.ScenarioConfig) */ {
 public:
  inline ScenarioConfig() : ScenarioConfig(nullptr) {}
  ~ScenarioConfig() override;
  explicit PROTOBUF_CONSTEXPR ScenarioConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScenarioConfig(const ScenarioConfig& from);
  ScenarioConfig(ScenarioConfig&& from) noexcept
    : ScenarioConfig() {
    *this = ::std::move(from);
  }

  inline ScenarioConfig& operator=(const ScenarioConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScenarioConfig& operator=(ScenarioConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScenarioConfig& default_instance() {
    return *internal_default_instance();
  }
  enum ScenarioConfigCase {
    kLaneFollowConfig = 2,
    kBareIntersectionUnprotectedConfig = 3,
    kEmergencyPullOverConfig = 4,
    kEmergencyStopConfig = 5,
    kLearningModelSampleConfig = 6,
    kNarrowStreetUTurnConfig = 7,
    kParkAndGoConfig = 8,
    kPullOverConfig = 9,
    kStopSignUnprotectedConfig = 10,
    kTrafficLightProtectedConfig = 11,
    kTrafficLightUnprotectedLeftTurnConfig = 12,
    kTrafficLightUnprotectedRightTurnConfig = 13,
    kValetParkingConfig = 14,
    kYieldSignConfig = 15,
    kDeadendTurnaroundConfig = 18,
    SCENARIO_CONFIG_NOT_SET = 0,
  };

  static inline const ScenarioConfig* internal_default_instance() {
    return reinterpret_cast<const ScenarioConfig*>(
               &_ScenarioConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ScenarioConfig& a, ScenarioConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ScenarioConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScenarioConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScenarioConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScenarioConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScenarioConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScenarioConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScenarioConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.ScenarioConfig";
  }
  protected:
  explicit ScenarioConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ScenarioConfig_StageConfig StageConfig;

  typedef ScenarioConfig_ScenarioType ScenarioType;
  static constexpr ScenarioType LANE_FOLLOW =
    ScenarioConfig_ScenarioType_LANE_FOLLOW;
  static constexpr ScenarioType BARE_INTERSECTION_UNPROTECTED =
    ScenarioConfig_ScenarioType_BARE_INTERSECTION_UNPROTECTED;
  static constexpr ScenarioType STOP_SIGN_PROTECTED =
    ScenarioConfig_ScenarioType_STOP_SIGN_PROTECTED;
  static constexpr ScenarioType STOP_SIGN_UNPROTECTED =
    ScenarioConfig_ScenarioType_STOP_SIGN_UNPROTECTED;
  static constexpr ScenarioType TRAFFIC_LIGHT_PROTECTED =
    ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_PROTECTED;
  static constexpr ScenarioType TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN =
    ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN;
  static constexpr ScenarioType TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN =
    ScenarioConfig_ScenarioType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN;
  static constexpr ScenarioType YIELD_SIGN =
    ScenarioConfig_ScenarioType_YIELD_SIGN;
  static constexpr ScenarioType PULL_OVER =
    ScenarioConfig_ScenarioType_PULL_OVER;
  static constexpr ScenarioType VALET_PARKING =
    ScenarioConfig_ScenarioType_VALET_PARKING;
  static constexpr ScenarioType EMERGENCY_PULL_OVER =
    ScenarioConfig_ScenarioType_EMERGENCY_PULL_OVER;
  static constexpr ScenarioType EMERGENCY_STOP =
    ScenarioConfig_ScenarioType_EMERGENCY_STOP;
  static constexpr ScenarioType NARROW_STREET_U_TURN =
    ScenarioConfig_ScenarioType_NARROW_STREET_U_TURN;
  static constexpr ScenarioType PARK_AND_GO =
    ScenarioConfig_ScenarioType_PARK_AND_GO;
  static constexpr ScenarioType LEARNING_MODEL_SAMPLE =
    ScenarioConfig_ScenarioType_LEARNING_MODEL_SAMPLE;
  static constexpr ScenarioType DEADEND_TURNAROUND =
    ScenarioConfig_ScenarioType_DEADEND_TURNAROUND;
  static inline bool ScenarioType_IsValid(int value) {
    return ScenarioConfig_ScenarioType_IsValid(value);
  }
  static constexpr ScenarioType ScenarioType_MIN =
    ScenarioConfig_ScenarioType_ScenarioType_MIN;
  static constexpr ScenarioType ScenarioType_MAX =
    ScenarioConfig_ScenarioType_ScenarioType_MAX;
  static constexpr int ScenarioType_ARRAYSIZE =
    ScenarioConfig_ScenarioType_ScenarioType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ScenarioType_descriptor() {
    return ScenarioConfig_ScenarioType_descriptor();
  }
  template<typename T>
  static inline const std::string& ScenarioType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScenarioType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScenarioType_Name.");
    return ScenarioConfig_ScenarioType_Name(enum_t_value);
  }
  static inline bool ScenarioType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ScenarioType* value) {
    return ScenarioConfig_ScenarioType_Parse(name, value);
  }

  typedef ScenarioConfig_StageType StageType;
  static constexpr StageType NO_STAGE =
    ScenarioConfig_StageType_NO_STAGE;
  static constexpr StageType LANE_FOLLOW_DEFAULT_STAGE =
    ScenarioConfig_StageType_LANE_FOLLOW_DEFAULT_STAGE;
  static constexpr StageType BARE_INTERSECTION_UNPROTECTED_APPROACH =
    ScenarioConfig_StageType_BARE_INTERSECTION_UNPROTECTED_APPROACH;
  static constexpr StageType BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE =
    ScenarioConfig_StageType_BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE;
  static constexpr StageType STOP_SIGN_UNPROTECTED_PRE_STOP =
    ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_PRE_STOP;
  static constexpr StageType STOP_SIGN_UNPROTECTED_STOP =
    ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_STOP;
  static constexpr StageType STOP_SIGN_UNPROTECTED_CREEP =
    ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_CREEP;
  static constexpr StageType STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE =
    ScenarioConfig_StageType_STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE;
  static constexpr StageType TRAFFIC_LIGHT_PROTECTED_APPROACH =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_PROTECTED_APPROACH;
  static constexpr StageType TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP;
  static constexpr StageType TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE =
    ScenarioConfig_StageType_TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE;
  static constexpr StageType PULL_OVER_APPROACH =
    ScenarioConfig_StageType_PULL_OVER_APPROACH;
  static constexpr StageType PULL_OVER_RETRY_APPROACH_PARKING =
    ScenarioConfig_StageType_PULL_OVER_RETRY_APPROACH_PARKING;
  static constexpr StageType PULL_OVER_RETRY_PARKING =
    ScenarioConfig_StageType_PULL_OVER_RETRY_PARKING;
  static constexpr StageType EMERGENCY_PULL_OVER_SLOW_DOWN =
    ScenarioConfig_StageType_EMERGENCY_PULL_OVER_SLOW_DOWN;
  static constexpr StageType EMERGENCY_PULL_OVER_APPROACH =
    ScenarioConfig_StageType_EMERGENCY_PULL_OVER_APPROACH;
  static constexpr StageType EMERGENCY_PULL_OVER_STANDBY =
    ScenarioConfig_StageType_EMERGENCY_PULL_OVER_STANDBY;
  static constexpr StageType EMERGENCY_STOP_APPROACH =
    ScenarioConfig_StageType_EMERGENCY_STOP_APPROACH;
  static constexpr StageType EMERGENCY_STOP_STANDBY =
    ScenarioConfig_StageType_EMERGENCY_STOP_STANDBY;
  static constexpr StageType VALET_PARKING_APPROACHING_PARKING_SPOT =
    ScenarioConfig_StageType_VALET_PARKING_APPROACHING_PARKING_SPOT;
  static constexpr StageType VALET_PARKING_PARKING =
    ScenarioConfig_StageType_VALET_PARKING_PARKING;
  static constexpr StageType DEADEND_TURNAROUND_APPROACHING_TURNING_POINT =
    ScenarioConfig_StageType_DEADEND_TURNAROUND_APPROACHING_TURNING_POINT;
  static constexpr StageType DEADEND_TURNAROUND_TURNING =
    ScenarioConfig_StageType_DEADEND_TURNAROUND_TURNING;
  static constexpr StageType PARK_AND_GO_CHECK =
    ScenarioConfig_StageType_PARK_AND_GO_CHECK;
  static constexpr StageType PARK_AND_GO_CRUISE =
    ScenarioConfig_StageType_PARK_AND_GO_CRUISE;
  static constexpr StageType PARK_AND_GO_ADJUST =
    ScenarioConfig_StageType_PARK_AND_GO_ADJUST;
  static constexpr StageType PARK_AND_GO_PRE_CRUISE =
    ScenarioConfig_StageType_PARK_AND_GO_PRE_CRUISE;
  static constexpr StageType YIELD_SIGN_APPROACH =
    ScenarioConfig_StageType_YIELD_SIGN_APPROACH;
  static constexpr StageType YIELD_SIGN_CREEP =
    ScenarioConfig_StageType_YIELD_SIGN_CREEP;
  static constexpr StageType LEARNING_MODEL_RUN =
    ScenarioConfig_StageType_LEARNING_MODEL_RUN;
  static inline bool StageType_IsValid(int value) {
    return ScenarioConfig_StageType_IsValid(value);
  }
  static constexpr StageType StageType_MIN =
    ScenarioConfig_StageType_StageType_MIN;
  static constexpr StageType StageType_MAX =
    ScenarioConfig_StageType_StageType_MAX;
  static constexpr int StageType_ARRAYSIZE =
    ScenarioConfig_StageType_StageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StageType_descriptor() {
    return ScenarioConfig_StageType_descriptor();
  }
  template<typename T>
  static inline const std::string& StageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StageType_Name.");
    return ScenarioConfig_StageType_Name(enum_t_value);
  }
  static inline bool StageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StageType* value) {
    return ScenarioConfig_StageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStageTypeFieldNumber = 16,
    kStageConfigFieldNumber = 17,
    kScenarioTypeFieldNumber = 1,
    kLaneFollowConfigFieldNumber = 2,
    kBareIntersectionUnprotectedConfigFieldNumber = 3,
    kEmergencyPullOverConfigFieldNumber = 4,
    kEmergencyStopConfigFieldNumber = 5,
    kLearningModelSampleConfigFieldNumber = 6,
    kNarrowStreetUTurnConfigFieldNumber = 7,
    kParkAndGoConfigFieldNumber = 8,
    kPullOverConfigFieldNumber = 9,
    kStopSignUnprotectedConfigFieldNumber = 10,
    kTrafficLightProtectedConfigFieldNumber = 11,
    kTrafficLightUnprotectedLeftTurnConfigFieldNumber = 12,
    kTrafficLightUnprotectedRightTurnConfigFieldNumber = 13,
    kValetParkingConfigFieldNumber = 14,
    kYieldSignConfigFieldNumber = 15,
    kDeadendTurnaroundConfigFieldNumber = 18,
  };
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  int stage_type_size() const;
  private:
  int _internal_stage_type_size() const;
  public:
  void clear_stage_type();
  private:
  ::apollo::planning::ScenarioConfig_StageType _internal_stage_type(int index) const;
  void _internal_add_stage_type(::apollo::planning::ScenarioConfig_StageType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_stage_type();
  public:
  ::apollo::planning::ScenarioConfig_StageType stage_type(int index) const;
  void set_stage_type(int index, ::apollo::planning::ScenarioConfig_StageType value);
  void add_stage_type(::apollo::planning::ScenarioConfig_StageType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& stage_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_stage_type();

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  int stage_config_size() const;
  private:
  int _internal_stage_config_size() const;
  public:
  void clear_stage_config();
  ::apollo::planning::ScenarioConfig_StageConfig* mutable_stage_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ScenarioConfig_StageConfig >*
      mutable_stage_config();
  private:
  const ::apollo::planning::ScenarioConfig_StageConfig& _internal_stage_config(int index) const;
  ::apollo::planning::ScenarioConfig_StageConfig* _internal_add_stage_config();
  public:
  const ::apollo::planning::ScenarioConfig_StageConfig& stage_config(int index) const;
  ::apollo::planning::ScenarioConfig_StageConfig* add_stage_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ScenarioConfig_StageConfig >&
      stage_config() const;

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  bool has_scenario_type() const;
  private:
  bool _internal_has_scenario_type() const;
  public:
  void clear_scenario_type();
  ::apollo::planning::ScenarioConfig_ScenarioType scenario_type() const;
  void set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value);
  private:
  ::apollo::planning::ScenarioConfig_ScenarioType _internal_scenario_type() const;
  void _internal_set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value);
  public:

  // .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
  bool has_lane_follow_config() const;
  private:
  bool _internal_has_lane_follow_config() const;
  public:
  void clear_lane_follow_config();
  const ::apollo::planning::ScenarioLaneFollowConfig& lane_follow_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioLaneFollowConfig* release_lane_follow_config();
  ::apollo::planning::ScenarioLaneFollowConfig* mutable_lane_follow_config();
  void set_allocated_lane_follow_config(::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config);
  private:
  const ::apollo::planning::ScenarioLaneFollowConfig& _internal_lane_follow_config() const;
  ::apollo::planning::ScenarioLaneFollowConfig* _internal_mutable_lane_follow_config();
  public:
  void unsafe_arena_set_allocated_lane_follow_config(
      ::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config);
  ::apollo::planning::ScenarioLaneFollowConfig* unsafe_arena_release_lane_follow_config();

  // .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
  bool has_bare_intersection_unprotected_config() const;
  private:
  bool _internal_has_bare_intersection_unprotected_config() const;
  public:
  void clear_bare_intersection_unprotected_config();
  const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& bare_intersection_unprotected_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* release_bare_intersection_unprotected_config();
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* mutable_bare_intersection_unprotected_config();
  void set_allocated_bare_intersection_unprotected_config(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config);
  private:
  const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& _internal_bare_intersection_unprotected_config() const;
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* _internal_mutable_bare_intersection_unprotected_config();
  public:
  void unsafe_arena_set_allocated_bare_intersection_unprotected_config(
      ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config);
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* unsafe_arena_release_bare_intersection_unprotected_config();

  // .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
  bool has_emergency_pull_over_config() const;
  private:
  bool _internal_has_emergency_pull_over_config() const;
  public:
  void clear_emergency_pull_over_config();
  const ::apollo::planning::ScenarioEmergencyPullOverConfig& emergency_pull_over_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioEmergencyPullOverConfig* release_emergency_pull_over_config();
  ::apollo::planning::ScenarioEmergencyPullOverConfig* mutable_emergency_pull_over_config();
  void set_allocated_emergency_pull_over_config(::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config);
  private:
  const ::apollo::planning::ScenarioEmergencyPullOverConfig& _internal_emergency_pull_over_config() const;
  ::apollo::planning::ScenarioEmergencyPullOverConfig* _internal_mutable_emergency_pull_over_config();
  public:
  void unsafe_arena_set_allocated_emergency_pull_over_config(
      ::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config);
  ::apollo::planning::ScenarioEmergencyPullOverConfig* unsafe_arena_release_emergency_pull_over_config();

  // .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
  bool has_emergency_stop_config() const;
  private:
  bool _internal_has_emergency_stop_config() const;
  public:
  void clear_emergency_stop_config();
  const ::apollo::planning::ScenarioEmergencyStopConfig& emergency_stop_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioEmergencyStopConfig* release_emergency_stop_config();
  ::apollo::planning::ScenarioEmergencyStopConfig* mutable_emergency_stop_config();
  void set_allocated_emergency_stop_config(::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config);
  private:
  const ::apollo::planning::ScenarioEmergencyStopConfig& _internal_emergency_stop_config() const;
  ::apollo::planning::ScenarioEmergencyStopConfig* _internal_mutable_emergency_stop_config();
  public:
  void unsafe_arena_set_allocated_emergency_stop_config(
      ::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config);
  ::apollo::planning::ScenarioEmergencyStopConfig* unsafe_arena_release_emergency_stop_config();

  // .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
  bool has_learning_model_sample_config() const;
  private:
  bool _internal_has_learning_model_sample_config() const;
  public:
  void clear_learning_model_sample_config();
  const ::apollo::planning::ScenarioLearningModelSampleConfig& learning_model_sample_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioLearningModelSampleConfig* release_learning_model_sample_config();
  ::apollo::planning::ScenarioLearningModelSampleConfig* mutable_learning_model_sample_config();
  void set_allocated_learning_model_sample_config(::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config);
  private:
  const ::apollo::planning::ScenarioLearningModelSampleConfig& _internal_learning_model_sample_config() const;
  ::apollo::planning::ScenarioLearningModelSampleConfig* _internal_mutable_learning_model_sample_config();
  public:
  void unsafe_arena_set_allocated_learning_model_sample_config(
      ::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config);
  ::apollo::planning::ScenarioLearningModelSampleConfig* unsafe_arena_release_learning_model_sample_config();

  // .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
  bool has_narrow_street_u_turn_config() const;
  private:
  bool _internal_has_narrow_street_u_turn_config() const;
  public:
  void clear_narrow_street_u_turn_config();
  const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& narrow_street_u_turn_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioNarrowStreetUTurnConfig* release_narrow_street_u_turn_config();
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig* mutable_narrow_street_u_turn_config();
  void set_allocated_narrow_street_u_turn_config(::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config);
  private:
  const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& _internal_narrow_street_u_turn_config() const;
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig* _internal_mutable_narrow_street_u_turn_config();
  public:
  void unsafe_arena_set_allocated_narrow_street_u_turn_config(
      ::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config);
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig* unsafe_arena_release_narrow_street_u_turn_config();

  // .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
  bool has_park_and_go_config() const;
  private:
  bool _internal_has_park_and_go_config() const;
  public:
  void clear_park_and_go_config();
  const ::apollo::planning::ScenarioParkAndGoConfig& park_and_go_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioParkAndGoConfig* release_park_and_go_config();
  ::apollo::planning::ScenarioParkAndGoConfig* mutable_park_and_go_config();
  void set_allocated_park_and_go_config(::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config);
  private:
  const ::apollo::planning::ScenarioParkAndGoConfig& _internal_park_and_go_config() const;
  ::apollo::planning::ScenarioParkAndGoConfig* _internal_mutable_park_and_go_config();
  public:
  void unsafe_arena_set_allocated_park_and_go_config(
      ::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config);
  ::apollo::planning::ScenarioParkAndGoConfig* unsafe_arena_release_park_and_go_config();

  // .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
  bool has_pull_over_config() const;
  private:
  bool _internal_has_pull_over_config() const;
  public:
  void clear_pull_over_config();
  const ::apollo::planning::ScenarioPullOverConfig& pull_over_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioPullOverConfig* release_pull_over_config();
  ::apollo::planning::ScenarioPullOverConfig* mutable_pull_over_config();
  void set_allocated_pull_over_config(::apollo::planning::ScenarioPullOverConfig* pull_over_config);
  private:
  const ::apollo::planning::ScenarioPullOverConfig& _internal_pull_over_config() const;
  ::apollo::planning::ScenarioPullOverConfig* _internal_mutable_pull_over_config();
  public:
  void unsafe_arena_set_allocated_pull_over_config(
      ::apollo::planning::ScenarioPullOverConfig* pull_over_config);
  ::apollo::planning::ScenarioPullOverConfig* unsafe_arena_release_pull_over_config();

  // .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
  bool has_stop_sign_unprotected_config() const;
  private:
  bool _internal_has_stop_sign_unprotected_config() const;
  public:
  void clear_stop_sign_unprotected_config();
  const ::apollo::planning::ScenarioStopSignUnprotectedConfig& stop_sign_unprotected_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioStopSignUnprotectedConfig* release_stop_sign_unprotected_config();
  ::apollo::planning::ScenarioStopSignUnprotectedConfig* mutable_stop_sign_unprotected_config();
  void set_allocated_stop_sign_unprotected_config(::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config);
  private:
  const ::apollo::planning::ScenarioStopSignUnprotectedConfig& _internal_stop_sign_unprotected_config() const;
  ::apollo::planning::ScenarioStopSignUnprotectedConfig* _internal_mutable_stop_sign_unprotected_config();
  public:
  void unsafe_arena_set_allocated_stop_sign_unprotected_config(
      ::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config);
  ::apollo::planning::ScenarioStopSignUnprotectedConfig* unsafe_arena_release_stop_sign_unprotected_config();

  // .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
  bool has_traffic_light_protected_config() const;
  private:
  bool _internal_has_traffic_light_protected_config() const;
  public:
  void clear_traffic_light_protected_config();
  const ::apollo::planning::ScenarioTrafficLightProtectedConfig& traffic_light_protected_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioTrafficLightProtectedConfig* release_traffic_light_protected_config();
  ::apollo::planning::ScenarioTrafficLightProtectedConfig* mutable_traffic_light_protected_config();
  void set_allocated_traffic_light_protected_config(::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config);
  private:
  const ::apollo::planning::ScenarioTrafficLightProtectedConfig& _internal_traffic_light_protected_config() const;
  ::apollo::planning::ScenarioTrafficLightProtectedConfig* _internal_mutable_traffic_light_protected_config();
  public:
  void unsafe_arena_set_allocated_traffic_light_protected_config(
      ::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config);
  ::apollo::planning::ScenarioTrafficLightProtectedConfig* unsafe_arena_release_traffic_light_protected_config();

  // .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
  bool has_traffic_light_unprotected_left_turn_config() const;
  private:
  bool _internal_has_traffic_light_unprotected_left_turn_config() const;
  public:
  void clear_traffic_light_unprotected_left_turn_config();
  const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& traffic_light_unprotected_left_turn_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* release_traffic_light_unprotected_left_turn_config();
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* mutable_traffic_light_unprotected_left_turn_config();
  void set_allocated_traffic_light_unprotected_left_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config);
  private:
  const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& _internal_traffic_light_unprotected_left_turn_config() const;
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* _internal_mutable_traffic_light_unprotected_left_turn_config();
  public:
  void unsafe_arena_set_allocated_traffic_light_unprotected_left_turn_config(
      ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config);
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* unsafe_arena_release_traffic_light_unprotected_left_turn_config();

  // .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
  bool has_traffic_light_unprotected_right_turn_config() const;
  private:
  bool _internal_has_traffic_light_unprotected_right_turn_config() const;
  public:
  void clear_traffic_light_unprotected_right_turn_config();
  const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& traffic_light_unprotected_right_turn_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* release_traffic_light_unprotected_right_turn_config();
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* mutable_traffic_light_unprotected_right_turn_config();
  void set_allocated_traffic_light_unprotected_right_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config);
  private:
  const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& _internal_traffic_light_unprotected_right_turn_config() const;
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* _internal_mutable_traffic_light_unprotected_right_turn_config();
  public:
  void unsafe_arena_set_allocated_traffic_light_unprotected_right_turn_config(
      ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config);
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* unsafe_arena_release_traffic_light_unprotected_right_turn_config();

  // .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
  bool has_valet_parking_config() const;
  private:
  bool _internal_has_valet_parking_config() const;
  public:
  void clear_valet_parking_config();
  const ::apollo::planning::ScenarioValetParkingConfig& valet_parking_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioValetParkingConfig* release_valet_parking_config();
  ::apollo::planning::ScenarioValetParkingConfig* mutable_valet_parking_config();
  void set_allocated_valet_parking_config(::apollo::planning::ScenarioValetParkingConfig* valet_parking_config);
  private:
  const ::apollo::planning::ScenarioValetParkingConfig& _internal_valet_parking_config() const;
  ::apollo::planning::ScenarioValetParkingConfig* _internal_mutable_valet_parking_config();
  public:
  void unsafe_arena_set_allocated_valet_parking_config(
      ::apollo::planning::ScenarioValetParkingConfig* valet_parking_config);
  ::apollo::planning::ScenarioValetParkingConfig* unsafe_arena_release_valet_parking_config();

  // .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
  bool has_yield_sign_config() const;
  private:
  bool _internal_has_yield_sign_config() const;
  public:
  void clear_yield_sign_config();
  const ::apollo::planning::ScenarioYieldSignConfig& yield_sign_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioYieldSignConfig* release_yield_sign_config();
  ::apollo::planning::ScenarioYieldSignConfig* mutable_yield_sign_config();
  void set_allocated_yield_sign_config(::apollo::planning::ScenarioYieldSignConfig* yield_sign_config);
  private:
  const ::apollo::planning::ScenarioYieldSignConfig& _internal_yield_sign_config() const;
  ::apollo::planning::ScenarioYieldSignConfig* _internal_mutable_yield_sign_config();
  public:
  void unsafe_arena_set_allocated_yield_sign_config(
      ::apollo::planning::ScenarioYieldSignConfig* yield_sign_config);
  ::apollo::planning::ScenarioYieldSignConfig* unsafe_arena_release_yield_sign_config();

  // .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
  bool has_deadend_turnaround_config() const;
  private:
  bool _internal_has_deadend_turnaround_config() const;
  public:
  void clear_deadend_turnaround_config();
  const ::apollo::planning::ScenarioDeadEndTurnAroundConfig& deadend_turnaround_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::ScenarioDeadEndTurnAroundConfig* release_deadend_turnaround_config();
  ::apollo::planning::ScenarioDeadEndTurnAroundConfig* mutable_deadend_turnaround_config();
  void set_allocated_deadend_turnaround_config(::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config);
  private:
  const ::apollo::planning::ScenarioDeadEndTurnAroundConfig& _internal_deadend_turnaround_config() const;
  ::apollo::planning::ScenarioDeadEndTurnAroundConfig* _internal_mutable_deadend_turnaround_config();
  public:
  void unsafe_arena_set_allocated_deadend_turnaround_config(
      ::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config);
  ::apollo::planning::ScenarioDeadEndTurnAroundConfig* unsafe_arena_release_deadend_turnaround_config();

  void clear_scenario_config();
  ScenarioConfigCase scenario_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.ScenarioConfig)
 private:
  class _Internal;
  void set_has_lane_follow_config();
  void set_has_bare_intersection_unprotected_config();
  void set_has_emergency_pull_over_config();
  void set_has_emergency_stop_config();
  void set_has_learning_model_sample_config();
  void set_has_narrow_street_u_turn_config();
  void set_has_park_and_go_config();
  void set_has_pull_over_config();
  void set_has_stop_sign_unprotected_config();
  void set_has_traffic_light_protected_config();
  void set_has_traffic_light_unprotected_left_turn_config();
  void set_has_traffic_light_unprotected_right_turn_config();
  void set_has_valet_parking_config();
  void set_has_yield_sign_config();
  void set_has_deadend_turnaround_config();

  inline bool has_scenario_config() const;
  inline void clear_has_scenario_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> stage_type_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ScenarioConfig_StageConfig > stage_config_;
    int scenario_type_;
    union ScenarioConfigUnion {
      constexpr ScenarioConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config_;
      ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config_;
      ::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config_;
      ::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config_;
      ::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config_;
      ::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config_;
      ::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config_;
      ::apollo::planning::ScenarioPullOverConfig* pull_over_config_;
      ::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config_;
      ::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config_;
      ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config_;
      ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config_;
      ::apollo::planning::ScenarioValetParkingConfig* valet_parking_config_;
      ::apollo::planning::ScenarioYieldSignConfig* yield_sign_config_;
      ::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config_;
    } scenario_config_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PlannerPublicRoadConfig final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:apollo.planning.PlannerPublicRoadConfig) */ {
 public:
  inline PlannerPublicRoadConfig() : PlannerPublicRoadConfig(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PlannerPublicRoadConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannerPublicRoadConfig(const PlannerPublicRoadConfig& from);
  PlannerPublicRoadConfig(PlannerPublicRoadConfig&& from) noexcept
    : PlannerPublicRoadConfig() {
    *this = ::std::move(from);
  }

  inline PlannerPublicRoadConfig& operator=(const PlannerPublicRoadConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannerPublicRoadConfig& operator=(PlannerPublicRoadConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlannerPublicRoadConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannerPublicRoadConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerPublicRoadConfig*>(
               &_PlannerPublicRoadConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlannerPublicRoadConfig& a, PlannerPublicRoadConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannerPublicRoadConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannerPublicRoadConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlannerPublicRoadConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlannerPublicRoadConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PlannerPublicRoadConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PlannerPublicRoadConfig& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlannerPublicRoadConfig";
  }
  protected:
  explicit PlannerPublicRoadConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerPublicRoadConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PlannerNaviConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlannerNaviConfig) */ {
 public:
  inline PlannerNaviConfig() : PlannerNaviConfig(nullptr) {}
  ~PlannerNaviConfig() override;
  explicit PROTOBUF_CONSTEXPR PlannerNaviConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannerNaviConfig(const PlannerNaviConfig& from);
  PlannerNaviConfig(PlannerNaviConfig&& from) noexcept
    : PlannerNaviConfig() {
    *this = ::std::move(from);
  }

  inline PlannerNaviConfig& operator=(const PlannerNaviConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannerNaviConfig& operator=(PlannerNaviConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlannerNaviConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannerNaviConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerNaviConfig*>(
               &_PlannerNaviConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PlannerNaviConfig& a, PlannerNaviConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannerNaviConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannerNaviConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlannerNaviConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlannerNaviConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlannerNaviConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlannerNaviConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannerNaviConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlannerNaviConfig";
  }
  protected:
  explicit PlannerNaviConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kNaviPathDeciderConfigFieldNumber = 2,
    kNaviSpeedDeciderConfigFieldNumber = 3,
    kNaviObstacleDeciderConfigFieldNumber = 4,
  };
  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  private:
  ::apollo::planning::TaskConfig_TaskType _internal_task(int index) const;
  void _internal_add_task(::apollo::planning::TaskConfig_TaskType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_task();
  public:
  ::apollo::planning::TaskConfig_TaskType task(int index) const;
  void set_task(int index, ::apollo::planning::TaskConfig_TaskType value);
  void add_task(::apollo::planning::TaskConfig_TaskType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& task() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_task();

  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  bool has_navi_path_decider_config() const;
  private:
  bool _internal_has_navi_path_decider_config() const;
  public:
  void clear_navi_path_decider_config();
  const ::apollo::planning::NaviPathDeciderConfig& navi_path_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviPathDeciderConfig* release_navi_path_decider_config();
  ::apollo::planning::NaviPathDeciderConfig* mutable_navi_path_decider_config();
  void set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config);
  private:
  const ::apollo::planning::NaviPathDeciderConfig& _internal_navi_path_decider_config() const;
  ::apollo::planning::NaviPathDeciderConfig* _internal_mutable_navi_path_decider_config();
  public:
  void unsafe_arena_set_allocated_navi_path_decider_config(
      ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config);
  ::apollo::planning::NaviPathDeciderConfig* unsafe_arena_release_navi_path_decider_config();

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  bool has_navi_speed_decider_config() const;
  private:
  bool _internal_has_navi_speed_decider_config() const;
  public:
  void clear_navi_speed_decider_config();
  const ::apollo::planning::NaviSpeedDeciderConfig& navi_speed_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviSpeedDeciderConfig* release_navi_speed_decider_config();
  ::apollo::planning::NaviSpeedDeciderConfig* mutable_navi_speed_decider_config();
  void set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config);
  private:
  const ::apollo::planning::NaviSpeedDeciderConfig& _internal_navi_speed_decider_config() const;
  ::apollo::planning::NaviSpeedDeciderConfig* _internal_mutable_navi_speed_decider_config();
  public:
  void unsafe_arena_set_allocated_navi_speed_decider_config(
      ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config);
  ::apollo::planning::NaviSpeedDeciderConfig* unsafe_arena_release_navi_speed_decider_config();

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  bool has_navi_obstacle_decider_config() const;
  private:
  bool _internal_has_navi_obstacle_decider_config() const;
  public:
  void clear_navi_obstacle_decider_config();
  const ::apollo::planning::NaviObstacleDeciderConfig& navi_obstacle_decider_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NaviObstacleDeciderConfig* release_navi_obstacle_decider_config();
  ::apollo::planning::NaviObstacleDeciderConfig* mutable_navi_obstacle_decider_config();
  void set_allocated_navi_obstacle_decider_config(::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config);
  private:
  const ::apollo::planning::NaviObstacleDeciderConfig& _internal_navi_obstacle_decider_config() const;
  ::apollo::planning::NaviObstacleDeciderConfig* _internal_mutable_navi_obstacle_decider_config();
  public:
  void unsafe_arena_set_allocated_navi_obstacle_decider_config(
      ::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config);
  ::apollo::planning::NaviObstacleDeciderConfig* unsafe_arena_release_navi_obstacle_decider_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.PlannerNaviConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> task_;
    ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config_;
    ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config_;
    ::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RtkPlanningConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.RtkPlanningConfig) */ {
 public:
  inline RtkPlanningConfig() : RtkPlanningConfig(nullptr) {}
  ~RtkPlanningConfig() override;
  explicit PROTOBUF_CONSTEXPR RtkPlanningConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtkPlanningConfig(const RtkPlanningConfig& from);
  RtkPlanningConfig(RtkPlanningConfig&& from) noexcept
    : RtkPlanningConfig() {
    *this = ::std::move(from);
  }

  inline RtkPlanningConfig& operator=(const RtkPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtkPlanningConfig& operator=(RtkPlanningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtkPlanningConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtkPlanningConfig* internal_default_instance() {
    return reinterpret_cast<const RtkPlanningConfig*>(
               &_RtkPlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RtkPlanningConfig& a, RtkPlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RtkPlanningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtkPlanningConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtkPlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtkPlanningConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtkPlanningConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtkPlanningConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtkPlanningConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.RtkPlanningConfig";
  }
  protected:
  explicit RtkPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlannerTypeFieldNumber = 1,
  };
  // optional .apollo.planning.PlannerType planner_type = 1;
  bool has_planner_type() const;
  private:
  bool _internal_has_planner_type() const;
  public:
  void clear_planner_type();
  ::apollo::planning::PlannerType planner_type() const;
  void set_planner_type(::apollo::planning::PlannerType value);
  private:
  ::apollo::planning::PlannerType _internal_planner_type() const;
  void _internal_set_planner_type(::apollo::planning::PlannerType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.RtkPlanningConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int planner_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StandardPlanningConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.StandardPlanningConfig) */ {
 public:
  inline StandardPlanningConfig() : StandardPlanningConfig(nullptr) {}
  ~StandardPlanningConfig() override;
  explicit PROTOBUF_CONSTEXPR StandardPlanningConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StandardPlanningConfig(const StandardPlanningConfig& from);
  StandardPlanningConfig(StandardPlanningConfig&& from) noexcept
    : StandardPlanningConfig() {
    *this = ::std::move(from);
  }

  inline StandardPlanningConfig& operator=(const StandardPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandardPlanningConfig& operator=(StandardPlanningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StandardPlanningConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StandardPlanningConfig* internal_default_instance() {
    return reinterpret_cast<const StandardPlanningConfig*>(
               &_StandardPlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StandardPlanningConfig& a, StandardPlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StandardPlanningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandardPlanningConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StandardPlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StandardPlanningConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StandardPlanningConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StandardPlanningConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandardPlanningConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.StandardPlanningConfig";
  }
  protected:
  explicit StandardPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlannerTypeFieldNumber = 1,
    kPlannerPublicRoadConfigFieldNumber = 2,
  };
  // repeated .apollo.planning.PlannerType planner_type = 1;
  int planner_type_size() const;
  private:
  int _internal_planner_type_size() const;
  public:
  void clear_planner_type();
  private:
  ::apollo::planning::PlannerType _internal_planner_type(int index) const;
  void _internal_add_planner_type(::apollo::planning::PlannerType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_planner_type();
  public:
  ::apollo::planning::PlannerType planner_type(int index) const;
  void set_planner_type(int index, ::apollo::planning::PlannerType value);
  void add_planner_type(::apollo::planning::PlannerType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& planner_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_planner_type();

  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  bool has_planner_public_road_config() const;
  private:
  bool _internal_has_planner_public_road_config() const;
  public:
  void clear_planner_public_road_config();
  const ::apollo::planning::PlannerPublicRoadConfig& planner_public_road_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PlannerPublicRoadConfig* release_planner_public_road_config();
  ::apollo::planning::PlannerPublicRoadConfig* mutable_planner_public_road_config();
  void set_allocated_planner_public_road_config(::apollo::planning::PlannerPublicRoadConfig* planner_public_road_config);
  private:
  const ::apollo::planning::PlannerPublicRoadConfig& _internal_planner_public_road_config() const;
  ::apollo::planning::PlannerPublicRoadConfig* _internal_mutable_planner_public_road_config();
  public:
  void unsafe_arena_set_allocated_planner_public_road_config(
      ::apollo::planning::PlannerPublicRoadConfig* planner_public_road_config);
  ::apollo::planning::PlannerPublicRoadConfig* unsafe_arena_release_planner_public_road_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.StandardPlanningConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> planner_type_;
    ::apollo::planning::PlannerPublicRoadConfig* planner_public_road_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NavigationPlanningConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.NavigationPlanningConfig) */ {
 public:
  inline NavigationPlanningConfig() : NavigationPlanningConfig(nullptr) {}
  ~NavigationPlanningConfig() override;
  explicit PROTOBUF_CONSTEXPR NavigationPlanningConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NavigationPlanningConfig(const NavigationPlanningConfig& from);
  NavigationPlanningConfig(NavigationPlanningConfig&& from) noexcept
    : NavigationPlanningConfig() {
    *this = ::std::move(from);
  }

  inline NavigationPlanningConfig& operator=(const NavigationPlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationPlanningConfig& operator=(NavigationPlanningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NavigationPlanningConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NavigationPlanningConfig* internal_default_instance() {
    return reinterpret_cast<const NavigationPlanningConfig*>(
               &_NavigationPlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(NavigationPlanningConfig& a, NavigationPlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationPlanningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationPlanningConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NavigationPlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NavigationPlanningConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NavigationPlanningConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NavigationPlanningConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationPlanningConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.NavigationPlanningConfig";
  }
  protected:
  explicit NavigationPlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlannerTypeFieldNumber = 1,
    kPlannerNaviConfigFieldNumber = 4,
  };
  // repeated .apollo.planning.PlannerType planner_type = 1;
  int planner_type_size() const;
  private:
  int _internal_planner_type_size() const;
  public:
  void clear_planner_type();
  private:
  ::apollo::planning::PlannerType _internal_planner_type(int index) const;
  void _internal_add_planner_type(::apollo::planning::PlannerType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_planner_type();
  public:
  ::apollo::planning::PlannerType planner_type(int index) const;
  void set_planner_type(int index, ::apollo::planning::PlannerType value);
  void add_planner_type(::apollo::planning::PlannerType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& planner_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_planner_type();

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  bool has_planner_navi_config() const;
  private:
  bool _internal_has_planner_navi_config() const;
  public:
  void clear_planner_navi_config();
  const ::apollo::planning::PlannerNaviConfig& planner_navi_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::PlannerNaviConfig* release_planner_navi_config();
  ::apollo::planning::PlannerNaviConfig* mutable_planner_navi_config();
  void set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config);
  private:
  const ::apollo::planning::PlannerNaviConfig& _internal_planner_navi_config() const;
  ::apollo::planning::PlannerNaviConfig* _internal_mutable_planner_navi_config();
  public:
  void unsafe_arena_set_allocated_planner_navi_config(
      ::apollo::planning::PlannerNaviConfig* planner_navi_config);
  ::apollo::planning::PlannerNaviConfig* unsafe_arena_release_planner_navi_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.NavigationPlanningConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> planner_type_;
    ::apollo::planning::PlannerNaviConfig* planner_navi_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TopicConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TopicConfig) */ {
 public:
  inline TopicConfig() : TopicConfig(nullptr) {}
  ~TopicConfig() override;
  explicit PROTOBUF_CONSTEXPR TopicConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopicConfig(const TopicConfig& from);
  TopicConfig(TopicConfig&& from) noexcept
    : TopicConfig() {
    *this = ::std::move(from);
  }

  inline TopicConfig& operator=(const TopicConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicConfig& operator=(TopicConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopicConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopicConfig* internal_default_instance() {
    return reinterpret_cast<const TopicConfig*>(
               &_TopicConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TopicConfig& a, TopicConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopicConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopicConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopicConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TopicConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TopicConfig";
  }
  protected:
  explicit TopicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChassisTopicFieldNumber = 1,
    kHmiStatusTopicFieldNumber = 2,
    kLocalizationTopicFieldNumber = 3,
    kPlanningPadTopicFieldNumber = 4,
    kPlanningTrajectoryTopicFieldNumber = 5,
    kPredictionTopicFieldNumber = 6,
    kRelativeMapTopicFieldNumber = 7,
    kRoutingRequestTopicFieldNumber = 8,
    kRoutingResponseTopicFieldNumber = 9,
    kStoryTellingTopicFieldNumber = 10,
    kTrafficLightDetectionTopicFieldNumber = 11,
    kPlanningLearningDataTopicFieldNumber = 12,
  };
  // optional string chassis_topic = 1;
  bool has_chassis_topic() const;
  private:
  bool _internal_has_chassis_topic() const;
  public:
  void clear_chassis_topic();
  const std::string& chassis_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chassis_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chassis_topic();
  PROTOBUF_NODISCARD std::string* release_chassis_topic();
  void set_allocated_chassis_topic(std::string* chassis_topic);
  private:
  const std::string& _internal_chassis_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chassis_topic(const std::string& value);
  std::string* _internal_mutable_chassis_topic();
  public:

  // optional string hmi_status_topic = 2;
  bool has_hmi_status_topic() const;
  private:
  bool _internal_has_hmi_status_topic() const;
  public:
  void clear_hmi_status_topic();
  const std::string& hmi_status_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hmi_status_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hmi_status_topic();
  PROTOBUF_NODISCARD std::string* release_hmi_status_topic();
  void set_allocated_hmi_status_topic(std::string* hmi_status_topic);
  private:
  const std::string& _internal_hmi_status_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hmi_status_topic(const std::string& value);
  std::string* _internal_mutable_hmi_status_topic();
  public:

  // optional string localization_topic = 3;
  bool has_localization_topic() const;
  private:
  bool _internal_has_localization_topic() const;
  public:
  void clear_localization_topic();
  const std::string& localization_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localization_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localization_topic();
  PROTOBUF_NODISCARD std::string* release_localization_topic();
  void set_allocated_localization_topic(std::string* localization_topic);
  private:
  const std::string& _internal_localization_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localization_topic(const std::string& value);
  std::string* _internal_mutable_localization_topic();
  public:

  // optional string planning_pad_topic = 4;
  bool has_planning_pad_topic() const;
  private:
  bool _internal_has_planning_pad_topic() const;
  public:
  void clear_planning_pad_topic();
  const std::string& planning_pad_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_planning_pad_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_planning_pad_topic();
  PROTOBUF_NODISCARD std::string* release_planning_pad_topic();
  void set_allocated_planning_pad_topic(std::string* planning_pad_topic);
  private:
  const std::string& _internal_planning_pad_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_planning_pad_topic(const std::string& value);
  std::string* _internal_mutable_planning_pad_topic();
  public:

  // optional string planning_trajectory_topic = 5;
  bool has_planning_trajectory_topic() const;
  private:
  bool _internal_has_planning_trajectory_topic() const;
  public:
  void clear_planning_trajectory_topic();
  const std::string& planning_trajectory_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_planning_trajectory_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_planning_trajectory_topic();
  PROTOBUF_NODISCARD std::string* release_planning_trajectory_topic();
  void set_allocated_planning_trajectory_topic(std::string* planning_trajectory_topic);
  private:
  const std::string& _internal_planning_trajectory_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_planning_trajectory_topic(const std::string& value);
  std::string* _internal_mutable_planning_trajectory_topic();
  public:

  // optional string prediction_topic = 6;
  bool has_prediction_topic() const;
  private:
  bool _internal_has_prediction_topic() const;
  public:
  void clear_prediction_topic();
  const std::string& prediction_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prediction_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prediction_topic();
  PROTOBUF_NODISCARD std::string* release_prediction_topic();
  void set_allocated_prediction_topic(std::string* prediction_topic);
  private:
  const std::string& _internal_prediction_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prediction_topic(const std::string& value);
  std::string* _internal_mutable_prediction_topic();
  public:

  // optional string relative_map_topic = 7;
  bool has_relative_map_topic() const;
  private:
  bool _internal_has_relative_map_topic() const;
  public:
  void clear_relative_map_topic();
  const std::string& relative_map_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_map_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_map_topic();
  PROTOBUF_NODISCARD std::string* release_relative_map_topic();
  void set_allocated_relative_map_topic(std::string* relative_map_topic);
  private:
  const std::string& _internal_relative_map_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_map_topic(const std::string& value);
  std::string* _internal_mutable_relative_map_topic();
  public:

  // optional string routing_request_topic = 8;
  bool has_routing_request_topic() const;
  private:
  bool _internal_has_routing_request_topic() const;
  public:
  void clear_routing_request_topic();
  const std::string& routing_request_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routing_request_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routing_request_topic();
  PROTOBUF_NODISCARD std::string* release_routing_request_topic();
  void set_allocated_routing_request_topic(std::string* routing_request_topic);
  private:
  const std::string& _internal_routing_request_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_request_topic(const std::string& value);
  std::string* _internal_mutable_routing_request_topic();
  public:

  // optional string routing_response_topic = 9;
  bool has_routing_response_topic() const;
  private:
  bool _internal_has_routing_response_topic() const;
  public:
  void clear_routing_response_topic();
  const std::string& routing_response_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_routing_response_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_routing_response_topic();
  PROTOBUF_NODISCARD std::string* release_routing_response_topic();
  void set_allocated_routing_response_topic(std::string* routing_response_topic);
  private:
  const std::string& _internal_routing_response_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_response_topic(const std::string& value);
  std::string* _internal_mutable_routing_response_topic();
  public:

  // optional string story_telling_topic = 10;
  bool has_story_telling_topic() const;
  private:
  bool _internal_has_story_telling_topic() const;
  public:
  void clear_story_telling_topic();
  const std::string& story_telling_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_story_telling_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_story_telling_topic();
  PROTOBUF_NODISCARD std::string* release_story_telling_topic();
  void set_allocated_story_telling_topic(std::string* story_telling_topic);
  private:
  const std::string& _internal_story_telling_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_story_telling_topic(const std::string& value);
  std::string* _internal_mutable_story_telling_topic();
  public:

  // optional string traffic_light_detection_topic = 11;
  bool has_traffic_light_detection_topic() const;
  private:
  bool _internal_has_traffic_light_detection_topic() const;
  public:
  void clear_traffic_light_detection_topic();
  const std::string& traffic_light_detection_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_traffic_light_detection_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_traffic_light_detection_topic();
  PROTOBUF_NODISCARD std::string* release_traffic_light_detection_topic();
  void set_allocated_traffic_light_detection_topic(std::string* traffic_light_detection_topic);
  private:
  const std::string& _internal_traffic_light_detection_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_traffic_light_detection_topic(const std::string& value);
  std::string* _internal_mutable_traffic_light_detection_topic();
  public:

  // optional string planning_learning_data_topic = 12;
  bool has_planning_learning_data_topic() const;
  private:
  bool _internal_has_planning_learning_data_topic() const;
  public:
  void clear_planning_learning_data_topic();
  const std::string& planning_learning_data_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_planning_learning_data_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_planning_learning_data_topic();
  PROTOBUF_NODISCARD std::string* release_planning_learning_data_topic();
  void set_allocated_planning_learning_data_topic(std::string* planning_learning_data_topic);
  private:
  const std::string& _internal_planning_learning_data_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_planning_learning_data_topic(const std::string& value);
  std::string* _internal_mutable_planning_learning_data_topic();
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.TopicConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chassis_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hmi_status_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localization_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planning_pad_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planning_trajectory_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prediction_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_map_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_request_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_response_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr story_telling_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traffic_light_detection_topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr planning_learning_data_topic_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PlanningConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningConfig) */ {
 public:
  inline PlanningConfig() : PlanningConfig(nullptr) {}
  ~PlanningConfig() override;
  explicit PROTOBUF_CONSTEXPR PlanningConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanningConfig(const PlanningConfig& from);
  PlanningConfig(PlanningConfig&& from) noexcept
    : PlanningConfig() {
    *this = ::std::move(from);
  }

  inline PlanningConfig& operator=(const PlanningConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanningConfig& operator=(PlanningConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanningConfig& default_instance() {
    return *internal_default_instance();
  }
  enum PlanningConfigCase {
    kRtkPlanningConfig = 3,
    kStandardPlanningConfig = 4,
    kNavigationPlanningConfig = 5,
    PLANNING_CONFIG_NOT_SET = 0,
  };

  static inline const PlanningConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningConfig*>(
               &_PlanningConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PlanningConfig& a, PlanningConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanningConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanningConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanningConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanningConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanningConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlanningConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.PlanningConfig";
  }
  protected:
  explicit PlanningConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PlanningConfig_PlanningLearningMode PlanningLearningMode;
  static constexpr PlanningLearningMode NO_LEARNING =
    PlanningConfig_PlanningLearningMode_NO_LEARNING;
  static constexpr PlanningLearningMode E2E =
    PlanningConfig_PlanningLearningMode_E2E;
  static constexpr PlanningLearningMode HYBRID =
    PlanningConfig_PlanningLearningMode_HYBRID;
  static constexpr PlanningLearningMode RL_TEST =
    PlanningConfig_PlanningLearningMode_RL_TEST;
  static constexpr PlanningLearningMode E2E_TEST =
    PlanningConfig_PlanningLearningMode_E2E_TEST;
  static constexpr PlanningLearningMode HYBRID_TEST =
    PlanningConfig_PlanningLearningMode_HYBRID_TEST;
  static inline bool PlanningLearningMode_IsValid(int value) {
    return PlanningConfig_PlanningLearningMode_IsValid(value);
  }
  static constexpr PlanningLearningMode PlanningLearningMode_MIN =
    PlanningConfig_PlanningLearningMode_PlanningLearningMode_MIN;
  static constexpr PlanningLearningMode PlanningLearningMode_MAX =
    PlanningConfig_PlanningLearningMode_PlanningLearningMode_MAX;
  static constexpr int PlanningLearningMode_ARRAYSIZE =
    PlanningConfig_PlanningLearningMode_PlanningLearningMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlanningLearningMode_descriptor() {
    return PlanningConfig_PlanningLearningMode_descriptor();
  }
  template<typename T>
  static inline const std::string& PlanningLearningMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlanningLearningMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlanningLearningMode_Name.");
    return PlanningConfig_PlanningLearningMode_Name(enum_t_value);
  }
  static inline bool PlanningLearningMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlanningLearningMode* value) {
    return PlanningConfig_PlanningLearningMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultTaskConfigFieldNumber = 6,
    kTopicConfigFieldNumber = 1,
    kLearningModeFieldNumber = 2,
    kRtkPlanningConfigFieldNumber = 3,
    kStandardPlanningConfigFieldNumber = 4,
    kNavigationPlanningConfigFieldNumber = 5,
  };
  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  int default_task_config_size() const;
  private:
  int _internal_default_task_config_size() const;
  public:
  void clear_default_task_config();
  ::apollo::planning::TaskConfig* mutable_default_task_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >*
      mutable_default_task_config();
  private:
  const ::apollo::planning::TaskConfig& _internal_default_task_config(int index) const;
  ::apollo::planning::TaskConfig* _internal_add_default_task_config();
  public:
  const ::apollo::planning::TaskConfig& default_task_config(int index) const;
  ::apollo::planning::TaskConfig* add_default_task_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >&
      default_task_config() const;

  // optional .apollo.planning.TopicConfig topic_config = 1;
  bool has_topic_config() const;
  private:
  bool _internal_has_topic_config() const;
  public:
  void clear_topic_config();
  const ::apollo::planning::TopicConfig& topic_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::TopicConfig* release_topic_config();
  ::apollo::planning::TopicConfig* mutable_topic_config();
  void set_allocated_topic_config(::apollo::planning::TopicConfig* topic_config);
  private:
  const ::apollo::planning::TopicConfig& _internal_topic_config() const;
  ::apollo::planning::TopicConfig* _internal_mutable_topic_config();
  public:
  void unsafe_arena_set_allocated_topic_config(
      ::apollo::planning::TopicConfig* topic_config);
  ::apollo::planning::TopicConfig* unsafe_arena_release_topic_config();

  // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
  bool has_learning_mode() const;
  private:
  bool _internal_has_learning_mode() const;
  public:
  void clear_learning_mode();
  ::apollo::planning::PlanningConfig_PlanningLearningMode learning_mode() const;
  void set_learning_mode(::apollo::planning::PlanningConfig_PlanningLearningMode value);
  private:
  ::apollo::planning::PlanningConfig_PlanningLearningMode _internal_learning_mode() const;
  void _internal_set_learning_mode(::apollo::planning::PlanningConfig_PlanningLearningMode value);
  public:

  // .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
  bool has_rtk_planning_config() const;
  private:
  bool _internal_has_rtk_planning_config() const;
  public:
  void clear_rtk_planning_config();
  const ::apollo::planning::RtkPlanningConfig& rtk_planning_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::RtkPlanningConfig* release_rtk_planning_config();
  ::apollo::planning::RtkPlanningConfig* mutable_rtk_planning_config();
  void set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config);
  private:
  const ::apollo::planning::RtkPlanningConfig& _internal_rtk_planning_config() const;
  ::apollo::planning::RtkPlanningConfig* _internal_mutable_rtk_planning_config();
  public:
  void unsafe_arena_set_allocated_rtk_planning_config(
      ::apollo::planning::RtkPlanningConfig* rtk_planning_config);
  ::apollo::planning::RtkPlanningConfig* unsafe_arena_release_rtk_planning_config();

  // .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
  bool has_standard_planning_config() const;
  private:
  bool _internal_has_standard_planning_config() const;
  public:
  void clear_standard_planning_config();
  const ::apollo::planning::StandardPlanningConfig& standard_planning_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::StandardPlanningConfig* release_standard_planning_config();
  ::apollo::planning::StandardPlanningConfig* mutable_standard_planning_config();
  void set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config);
  private:
  const ::apollo::planning::StandardPlanningConfig& _internal_standard_planning_config() const;
  ::apollo::planning::StandardPlanningConfig* _internal_mutable_standard_planning_config();
  public:
  void unsafe_arena_set_allocated_standard_planning_config(
      ::apollo::planning::StandardPlanningConfig* standard_planning_config);
  ::apollo::planning::StandardPlanningConfig* unsafe_arena_release_standard_planning_config();

  // .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
  bool has_navigation_planning_config() const;
  private:
  bool _internal_has_navigation_planning_config() const;
  public:
  void clear_navigation_planning_config();
  const ::apollo::planning::NavigationPlanningConfig& navigation_planning_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::NavigationPlanningConfig* release_navigation_planning_config();
  ::apollo::planning::NavigationPlanningConfig* mutable_navigation_planning_config();
  void set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config);
  private:
  const ::apollo::planning::NavigationPlanningConfig& _internal_navigation_planning_config() const;
  ::apollo::planning::NavigationPlanningConfig* _internal_mutable_navigation_planning_config();
  public:
  void unsafe_arena_set_allocated_navigation_planning_config(
      ::apollo::planning::NavigationPlanningConfig* navigation_planning_config);
  ::apollo::planning::NavigationPlanningConfig* unsafe_arena_release_navigation_planning_config();

  void clear_planning_config();
  PlanningConfigCase planning_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningConfig)
 private:
  class _Internal;
  void set_has_rtk_planning_config();
  void set_has_standard_planning_config();
  void set_has_navigation_planning_config();

  inline bool has_planning_config() const;
  inline void clear_has_planning_config();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig > default_task_config_;
    ::apollo::planning::TopicConfig* topic_config_;
    int learning_mode_;
    union PlanningConfigUnion {
      constexpr PlanningConfigUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::planning::RtkPlanningConfig* rtk_planning_config_;
      ::apollo::planning::StandardPlanningConfig* standard_planning_config_;
      ::apollo::planning::NavigationPlanningConfig* navigation_planning_config_;
    } planning_config_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskConfig

// optional .apollo.planning.TaskConfig.TaskType task_type = 1;
inline bool TaskConfig::_internal_has_task_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskConfig::has_task_type() const {
  return _internal_has_task_type();
}
inline void TaskConfig::clear_task_type() {
  _impl_.task_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::TaskConfig_TaskType TaskConfig::_internal_task_type() const {
  return static_cast< ::apollo::planning::TaskConfig_TaskType >(_impl_.task_type_);
}
inline ::apollo::planning::TaskConfig_TaskType TaskConfig::task_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.task_type)
  return _internal_task_type();
}
inline void TaskConfig::_internal_set_task_type(::apollo::planning::TaskConfig_TaskType value) {
  assert(::apollo::planning::TaskConfig_TaskType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_type_ = value;
}
inline void TaskConfig::set_task_type(::apollo::planning::TaskConfig_TaskType value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TaskConfig.task_type)
}

// .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
inline bool TaskConfig::_internal_has_creep_decider_config() const {
  return task_config_case() == kCreepDeciderConfig;
}
inline bool TaskConfig::has_creep_decider_config() const {
  return _internal_has_creep_decider_config();
}
inline void TaskConfig::set_has_creep_decider_config() {
  _impl_._oneof_case_[0] = kCreepDeciderConfig;
}
inline ::apollo::planning::CreepDeciderConfig* TaskConfig::release_creep_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.creep_decider_config)
  if (_internal_has_creep_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::CreepDeciderConfig* temp = _impl_.task_config_.creep_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.creep_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::CreepDeciderConfig& TaskConfig::_internal_creep_decider_config() const {
  return _internal_has_creep_decider_config()
      ? *_impl_.task_config_.creep_decider_config_
      : reinterpret_cast< ::apollo::planning::CreepDeciderConfig&>(::apollo::planning::_CreepDeciderConfig_default_instance_);
}
inline const ::apollo::planning::CreepDeciderConfig& TaskConfig::creep_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.creep_decider_config)
  return _internal_creep_decider_config();
}
inline ::apollo::planning::CreepDeciderConfig* TaskConfig::unsafe_arena_release_creep_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.creep_decider_config)
  if (_internal_has_creep_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::CreepDeciderConfig* temp = _impl_.task_config_.creep_decider_config_;
    _impl_.task_config_.creep_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_creep_decider_config(::apollo::planning::CreepDeciderConfig* creep_decider_config) {
  clear_task_config();
  if (creep_decider_config) {
    set_has_creep_decider_config();
    _impl_.task_config_.creep_decider_config_ = creep_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.creep_decider_config)
}
inline ::apollo::planning::CreepDeciderConfig* TaskConfig::_internal_mutable_creep_decider_config() {
  if (!_internal_has_creep_decider_config()) {
    clear_task_config();
    set_has_creep_decider_config();
    _impl_.task_config_.creep_decider_config_ = CreateMaybeMessage< ::apollo::planning::CreepDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.creep_decider_config_;
}
inline ::apollo::planning::CreepDeciderConfig* TaskConfig::mutable_creep_decider_config() {
  ::apollo::planning::CreepDeciderConfig* _msg = _internal_mutable_creep_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.creep_decider_config)
  return _msg;
}

// .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
inline bool TaskConfig::_internal_has_lane_change_decider_config() const {
  return task_config_case() == kLaneChangeDeciderConfig;
}
inline bool TaskConfig::has_lane_change_decider_config() const {
  return _internal_has_lane_change_decider_config();
}
inline void TaskConfig::set_has_lane_change_decider_config() {
  _impl_._oneof_case_[0] = kLaneChangeDeciderConfig;
}
inline ::apollo::planning::LaneChangeDeciderConfig* TaskConfig::release_lane_change_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.lane_change_decider_config)
  if (_internal_has_lane_change_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::LaneChangeDeciderConfig* temp = _impl_.task_config_.lane_change_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.lane_change_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::LaneChangeDeciderConfig& TaskConfig::_internal_lane_change_decider_config() const {
  return _internal_has_lane_change_decider_config()
      ? *_impl_.task_config_.lane_change_decider_config_
      : reinterpret_cast< ::apollo::planning::LaneChangeDeciderConfig&>(::apollo::planning::_LaneChangeDeciderConfig_default_instance_);
}
inline const ::apollo::planning::LaneChangeDeciderConfig& TaskConfig::lane_change_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.lane_change_decider_config)
  return _internal_lane_change_decider_config();
}
inline ::apollo::planning::LaneChangeDeciderConfig* TaskConfig::unsafe_arena_release_lane_change_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.lane_change_decider_config)
  if (_internal_has_lane_change_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::LaneChangeDeciderConfig* temp = _impl_.task_config_.lane_change_decider_config_;
    _impl_.task_config_.lane_change_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_lane_change_decider_config(::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config) {
  clear_task_config();
  if (lane_change_decider_config) {
    set_has_lane_change_decider_config();
    _impl_.task_config_.lane_change_decider_config_ = lane_change_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.lane_change_decider_config)
}
inline ::apollo::planning::LaneChangeDeciderConfig* TaskConfig::_internal_mutable_lane_change_decider_config() {
  if (!_internal_has_lane_change_decider_config()) {
    clear_task_config();
    set_has_lane_change_decider_config();
    _impl_.task_config_.lane_change_decider_config_ = CreateMaybeMessage< ::apollo::planning::LaneChangeDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.lane_change_decider_config_;
}
inline ::apollo::planning::LaneChangeDeciderConfig* TaskConfig::mutable_lane_change_decider_config() {
  ::apollo::planning::LaneChangeDeciderConfig* _msg = _internal_mutable_lane_change_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.lane_change_decider_config)
  return _msg;
}

// .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
inline bool TaskConfig::_internal_has_open_space_fallback_decider_config() const {
  return task_config_case() == kOpenSpaceFallbackDeciderConfig;
}
inline bool TaskConfig::has_open_space_fallback_decider_config() const {
  return _internal_has_open_space_fallback_decider_config();
}
inline void TaskConfig::set_has_open_space_fallback_decider_config() {
  _impl_._oneof_case_[0] = kOpenSpaceFallbackDeciderConfig;
}
inline ::apollo::planning::OpenSpaceFallBackDeciderConfig* TaskConfig::release_open_space_fallback_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.open_space_fallback_decider_config)
  if (_internal_has_open_space_fallback_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceFallBackDeciderConfig* temp = _impl_.task_config_.open_space_fallback_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.open_space_fallback_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::OpenSpaceFallBackDeciderConfig& TaskConfig::_internal_open_space_fallback_decider_config() const {
  return _internal_has_open_space_fallback_decider_config()
      ? *_impl_.task_config_.open_space_fallback_decider_config_
      : reinterpret_cast< ::apollo::planning::OpenSpaceFallBackDeciderConfig&>(::apollo::planning::_OpenSpaceFallBackDeciderConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpaceFallBackDeciderConfig& TaskConfig::open_space_fallback_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.open_space_fallback_decider_config)
  return _internal_open_space_fallback_decider_config();
}
inline ::apollo::planning::OpenSpaceFallBackDeciderConfig* TaskConfig::unsafe_arena_release_open_space_fallback_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.open_space_fallback_decider_config)
  if (_internal_has_open_space_fallback_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceFallBackDeciderConfig* temp = _impl_.task_config_.open_space_fallback_decider_config_;
    _impl_.task_config_.open_space_fallback_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_open_space_fallback_decider_config(::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config) {
  clear_task_config();
  if (open_space_fallback_decider_config) {
    set_has_open_space_fallback_decider_config();
    _impl_.task_config_.open_space_fallback_decider_config_ = open_space_fallback_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.open_space_fallback_decider_config)
}
inline ::apollo::planning::OpenSpaceFallBackDeciderConfig* TaskConfig::_internal_mutable_open_space_fallback_decider_config() {
  if (!_internal_has_open_space_fallback_decider_config()) {
    clear_task_config();
    set_has_open_space_fallback_decider_config();
    _impl_.task_config_.open_space_fallback_decider_config_ = CreateMaybeMessage< ::apollo::planning::OpenSpaceFallBackDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.open_space_fallback_decider_config_;
}
inline ::apollo::planning::OpenSpaceFallBackDeciderConfig* TaskConfig::mutable_open_space_fallback_decider_config() {
  ::apollo::planning::OpenSpaceFallBackDeciderConfig* _msg = _internal_mutable_open_space_fallback_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.open_space_fallback_decider_config)
  return _msg;
}

// .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
inline bool TaskConfig::_internal_has_open_space_pre_stop_decider_config() const {
  return task_config_case() == kOpenSpacePreStopDeciderConfig;
}
inline bool TaskConfig::has_open_space_pre_stop_decider_config() const {
  return _internal_has_open_space_pre_stop_decider_config();
}
inline void TaskConfig::set_has_open_space_pre_stop_decider_config() {
  _impl_._oneof_case_[0] = kOpenSpacePreStopDeciderConfig;
}
inline ::apollo::planning::OpenSpacePreStopDeciderConfig* TaskConfig::release_open_space_pre_stop_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
  if (_internal_has_open_space_pre_stop_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpacePreStopDeciderConfig* temp = _impl_.task_config_.open_space_pre_stop_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.open_space_pre_stop_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::OpenSpacePreStopDeciderConfig& TaskConfig::_internal_open_space_pre_stop_decider_config() const {
  return _internal_has_open_space_pre_stop_decider_config()
      ? *_impl_.task_config_.open_space_pre_stop_decider_config_
      : reinterpret_cast< ::apollo::planning::OpenSpacePreStopDeciderConfig&>(::apollo::planning::_OpenSpacePreStopDeciderConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpacePreStopDeciderConfig& TaskConfig::open_space_pre_stop_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
  return _internal_open_space_pre_stop_decider_config();
}
inline ::apollo::planning::OpenSpacePreStopDeciderConfig* TaskConfig::unsafe_arena_release_open_space_pre_stop_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
  if (_internal_has_open_space_pre_stop_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpacePreStopDeciderConfig* temp = _impl_.task_config_.open_space_pre_stop_decider_config_;
    _impl_.task_config_.open_space_pre_stop_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_open_space_pre_stop_decider_config(::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config) {
  clear_task_config();
  if (open_space_pre_stop_decider_config) {
    set_has_open_space_pre_stop_decider_config();
    _impl_.task_config_.open_space_pre_stop_decider_config_ = open_space_pre_stop_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
}
inline ::apollo::planning::OpenSpacePreStopDeciderConfig* TaskConfig::_internal_mutable_open_space_pre_stop_decider_config() {
  if (!_internal_has_open_space_pre_stop_decider_config()) {
    clear_task_config();
    set_has_open_space_pre_stop_decider_config();
    _impl_.task_config_.open_space_pre_stop_decider_config_ = CreateMaybeMessage< ::apollo::planning::OpenSpacePreStopDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.open_space_pre_stop_decider_config_;
}
inline ::apollo::planning::OpenSpacePreStopDeciderConfig* TaskConfig::mutable_open_space_pre_stop_decider_config() {
  ::apollo::planning::OpenSpacePreStopDeciderConfig* _msg = _internal_mutable_open_space_pre_stop_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
  return _msg;
}

// .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
inline bool TaskConfig::_internal_has_open_space_roi_decider_config() const {
  return task_config_case() == kOpenSpaceRoiDeciderConfig;
}
inline bool TaskConfig::has_open_space_roi_decider_config() const {
  return _internal_has_open_space_roi_decider_config();
}
inline void TaskConfig::set_has_open_space_roi_decider_config() {
  _impl_._oneof_case_[0] = kOpenSpaceRoiDeciderConfig;
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig* TaskConfig::release_open_space_roi_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.open_space_roi_decider_config)
  if (_internal_has_open_space_roi_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceRoiDeciderConfig* temp = _impl_.task_config_.open_space_roi_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.open_space_roi_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::OpenSpaceRoiDeciderConfig& TaskConfig::_internal_open_space_roi_decider_config() const {
  return _internal_has_open_space_roi_decider_config()
      ? *_impl_.task_config_.open_space_roi_decider_config_
      : reinterpret_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig&>(::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpaceRoiDeciderConfig& TaskConfig::open_space_roi_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.open_space_roi_decider_config)
  return _internal_open_space_roi_decider_config();
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig* TaskConfig::unsafe_arena_release_open_space_roi_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.open_space_roi_decider_config)
  if (_internal_has_open_space_roi_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceRoiDeciderConfig* temp = _impl_.task_config_.open_space_roi_decider_config_;
    _impl_.task_config_.open_space_roi_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_open_space_roi_decider_config(::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config) {
  clear_task_config();
  if (open_space_roi_decider_config) {
    set_has_open_space_roi_decider_config();
    _impl_.task_config_.open_space_roi_decider_config_ = open_space_roi_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.open_space_roi_decider_config)
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig* TaskConfig::_internal_mutable_open_space_roi_decider_config() {
  if (!_internal_has_open_space_roi_decider_config()) {
    clear_task_config();
    set_has_open_space_roi_decider_config();
    _impl_.task_config_.open_space_roi_decider_config_ = CreateMaybeMessage< ::apollo::planning::OpenSpaceRoiDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.open_space_roi_decider_config_;
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig* TaskConfig::mutable_open_space_roi_decider_config() {
  ::apollo::planning::OpenSpaceRoiDeciderConfig* _msg = _internal_mutable_open_space_roi_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.open_space_roi_decider_config)
  return _msg;
}

// .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
inline bool TaskConfig::_internal_has_path_assessment_decider_config() const {
  return task_config_case() == kPathAssessmentDeciderConfig;
}
inline bool TaskConfig::has_path_assessment_decider_config() const {
  return _internal_has_path_assessment_decider_config();
}
inline void TaskConfig::set_has_path_assessment_decider_config() {
  _impl_._oneof_case_[0] = kPathAssessmentDeciderConfig;
}
inline ::apollo::planning::PathAssessmentDeciderConfig* TaskConfig::release_path_assessment_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_assessment_decider_config)
  if (_internal_has_path_assessment_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathAssessmentDeciderConfig* temp = _impl_.task_config_.path_assessment_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_assessment_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathAssessmentDeciderConfig& TaskConfig::_internal_path_assessment_decider_config() const {
  return _internal_has_path_assessment_decider_config()
      ? *_impl_.task_config_.path_assessment_decider_config_
      : reinterpret_cast< ::apollo::planning::PathAssessmentDeciderConfig&>(::apollo::planning::_PathAssessmentDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathAssessmentDeciderConfig& TaskConfig::path_assessment_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_assessment_decider_config)
  return _internal_path_assessment_decider_config();
}
inline ::apollo::planning::PathAssessmentDeciderConfig* TaskConfig::unsafe_arena_release_path_assessment_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_assessment_decider_config)
  if (_internal_has_path_assessment_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathAssessmentDeciderConfig* temp = _impl_.task_config_.path_assessment_decider_config_;
    _impl_.task_config_.path_assessment_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_assessment_decider_config(::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config) {
  clear_task_config();
  if (path_assessment_decider_config) {
    set_has_path_assessment_decider_config();
    _impl_.task_config_.path_assessment_decider_config_ = path_assessment_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_assessment_decider_config)
}
inline ::apollo::planning::PathAssessmentDeciderConfig* TaskConfig::_internal_mutable_path_assessment_decider_config() {
  if (!_internal_has_path_assessment_decider_config()) {
    clear_task_config();
    set_has_path_assessment_decider_config();
    _impl_.task_config_.path_assessment_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathAssessmentDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_assessment_decider_config_;
}
inline ::apollo::planning::PathAssessmentDeciderConfig* TaskConfig::mutable_path_assessment_decider_config() {
  ::apollo::planning::PathAssessmentDeciderConfig* _msg = _internal_mutable_path_assessment_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_assessment_decider_config)
  return _msg;
}

// .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
inline bool TaskConfig::_internal_has_path_bounds_decider_config() const {
  return task_config_case() == kPathBoundsDeciderConfig;
}
inline bool TaskConfig::has_path_bounds_decider_config() const {
  return _internal_has_path_bounds_decider_config();
}
inline void TaskConfig::set_has_path_bounds_decider_config() {
  _impl_._oneof_case_[0] = kPathBoundsDeciderConfig;
}
inline ::apollo::planning::PathBoundsDeciderConfig* TaskConfig::release_path_bounds_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_bounds_decider_config)
  if (_internal_has_path_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathBoundsDeciderConfig* temp = _impl_.task_config_.path_bounds_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathBoundsDeciderConfig& TaskConfig::_internal_path_bounds_decider_config() const {
  return _internal_has_path_bounds_decider_config()
      ? *_impl_.task_config_.path_bounds_decider_config_
      : reinterpret_cast< ::apollo::planning::PathBoundsDeciderConfig&>(::apollo::planning::_PathBoundsDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathBoundsDeciderConfig& TaskConfig::path_bounds_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_bounds_decider_config)
  return _internal_path_bounds_decider_config();
}
inline ::apollo::planning::PathBoundsDeciderConfig* TaskConfig::unsafe_arena_release_path_bounds_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_bounds_decider_config)
  if (_internal_has_path_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathBoundsDeciderConfig* temp = _impl_.task_config_.path_bounds_decider_config_;
    _impl_.task_config_.path_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_bounds_decider_config(::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config) {
  clear_task_config();
  if (path_bounds_decider_config) {
    set_has_path_bounds_decider_config();
    _impl_.task_config_.path_bounds_decider_config_ = path_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_bounds_decider_config)
}
inline ::apollo::planning::PathBoundsDeciderConfig* TaskConfig::_internal_mutable_path_bounds_decider_config() {
  if (!_internal_has_path_bounds_decider_config()) {
    clear_task_config();
    set_has_path_bounds_decider_config();
    _impl_.task_config_.path_bounds_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathBoundsDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_bounds_decider_config_;
}
inline ::apollo::planning::PathBoundsDeciderConfig* TaskConfig::mutable_path_bounds_decider_config() {
  ::apollo::planning::PathBoundsDeciderConfig* _msg = _internal_mutable_path_bounds_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_bounds_decider_config)
  return _msg;
}

// .apollo.planning.PathDeciderConfig path_decider_config = 9;
inline bool TaskConfig::_internal_has_path_decider_config() const {
  return task_config_case() == kPathDeciderConfig;
}
inline bool TaskConfig::has_path_decider_config() const {
  return _internal_has_path_decider_config();
}
inline void TaskConfig::set_has_path_decider_config() {
  _impl_._oneof_case_[0] = kPathDeciderConfig;
}
inline ::apollo::planning::PathDeciderConfig* TaskConfig::release_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_decider_config)
  if (_internal_has_path_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathDeciderConfig* temp = _impl_.task_config_.path_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathDeciderConfig& TaskConfig::_internal_path_decider_config() const {
  return _internal_has_path_decider_config()
      ? *_impl_.task_config_.path_decider_config_
      : reinterpret_cast< ::apollo::planning::PathDeciderConfig&>(::apollo::planning::_PathDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathDeciderConfig& TaskConfig::path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_decider_config)
  return _internal_path_decider_config();
}
inline ::apollo::planning::PathDeciderConfig* TaskConfig::unsafe_arena_release_path_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_decider_config)
  if (_internal_has_path_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathDeciderConfig* temp = _impl_.task_config_.path_decider_config_;
    _impl_.task_config_.path_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  clear_task_config();
  if (path_decider_config) {
    set_has_path_decider_config();
    _impl_.task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_decider_config)
}
inline ::apollo::planning::PathDeciderConfig* TaskConfig::_internal_mutable_path_decider_config() {
  if (!_internal_has_path_decider_config()) {
    clear_task_config();
    set_has_path_decider_config();
    _impl_.task_config_.path_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_decider_config_;
}
inline ::apollo::planning::PathDeciderConfig* TaskConfig::mutable_path_decider_config() {
  ::apollo::planning::PathDeciderConfig* _msg = _internal_mutable_path_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_decider_config)
  return _msg;
}

// .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
inline bool TaskConfig::_internal_has_path_lane_borrow_decider_config() const {
  return task_config_case() == kPathLaneBorrowDeciderConfig;
}
inline bool TaskConfig::has_path_lane_borrow_decider_config() const {
  return _internal_has_path_lane_borrow_decider_config();
}
inline void TaskConfig::set_has_path_lane_borrow_decider_config() {
  _impl_._oneof_case_[0] = kPathLaneBorrowDeciderConfig;
}
inline ::apollo::planning::PathLaneBorrowDeciderConfig* TaskConfig::release_path_lane_borrow_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
  if (_internal_has_path_lane_borrow_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathLaneBorrowDeciderConfig* temp = _impl_.task_config_.path_lane_borrow_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_lane_borrow_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathLaneBorrowDeciderConfig& TaskConfig::_internal_path_lane_borrow_decider_config() const {
  return _internal_has_path_lane_borrow_decider_config()
      ? *_impl_.task_config_.path_lane_borrow_decider_config_
      : reinterpret_cast< ::apollo::planning::PathLaneBorrowDeciderConfig&>(::apollo::planning::_PathLaneBorrowDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathLaneBorrowDeciderConfig& TaskConfig::path_lane_borrow_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
  return _internal_path_lane_borrow_decider_config();
}
inline ::apollo::planning::PathLaneBorrowDeciderConfig* TaskConfig::unsafe_arena_release_path_lane_borrow_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
  if (_internal_has_path_lane_borrow_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathLaneBorrowDeciderConfig* temp = _impl_.task_config_.path_lane_borrow_decider_config_;
    _impl_.task_config_.path_lane_borrow_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_lane_borrow_decider_config(::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config) {
  clear_task_config();
  if (path_lane_borrow_decider_config) {
    set_has_path_lane_borrow_decider_config();
    _impl_.task_config_.path_lane_borrow_decider_config_ = path_lane_borrow_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
}
inline ::apollo::planning::PathLaneBorrowDeciderConfig* TaskConfig::_internal_mutable_path_lane_borrow_decider_config() {
  if (!_internal_has_path_lane_borrow_decider_config()) {
    clear_task_config();
    set_has_path_lane_borrow_decider_config();
    _impl_.task_config_.path_lane_borrow_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathLaneBorrowDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_lane_borrow_decider_config_;
}
inline ::apollo::planning::PathLaneBorrowDeciderConfig* TaskConfig::mutable_path_lane_borrow_decider_config() {
  ::apollo::planning::PathLaneBorrowDeciderConfig* _msg = _internal_mutable_path_lane_borrow_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
  return _msg;
}

// .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
inline bool TaskConfig::_internal_has_path_reference_decider_config() const {
  return task_config_case() == kPathReferenceDeciderConfig;
}
inline bool TaskConfig::has_path_reference_decider_config() const {
  return _internal_has_path_reference_decider_config();
}
inline void TaskConfig::set_has_path_reference_decider_config() {
  _impl_._oneof_case_[0] = kPathReferenceDeciderConfig;
}
inline ::apollo::planning::PathReferenceDeciderConfig* TaskConfig::release_path_reference_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_reference_decider_config)
  if (_internal_has_path_reference_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathReferenceDeciderConfig* temp = _impl_.task_config_.path_reference_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_reference_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathReferenceDeciderConfig& TaskConfig::_internal_path_reference_decider_config() const {
  return _internal_has_path_reference_decider_config()
      ? *_impl_.task_config_.path_reference_decider_config_
      : reinterpret_cast< ::apollo::planning::PathReferenceDeciderConfig&>(::apollo::planning::_PathReferenceDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathReferenceDeciderConfig& TaskConfig::path_reference_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_reference_decider_config)
  return _internal_path_reference_decider_config();
}
inline ::apollo::planning::PathReferenceDeciderConfig* TaskConfig::unsafe_arena_release_path_reference_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_reference_decider_config)
  if (_internal_has_path_reference_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathReferenceDeciderConfig* temp = _impl_.task_config_.path_reference_decider_config_;
    _impl_.task_config_.path_reference_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_reference_decider_config(::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config) {
  clear_task_config();
  if (path_reference_decider_config) {
    set_has_path_reference_decider_config();
    _impl_.task_config_.path_reference_decider_config_ = path_reference_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_reference_decider_config)
}
inline ::apollo::planning::PathReferenceDeciderConfig* TaskConfig::_internal_mutable_path_reference_decider_config() {
  if (!_internal_has_path_reference_decider_config()) {
    clear_task_config();
    set_has_path_reference_decider_config();
    _impl_.task_config_.path_reference_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathReferenceDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_reference_decider_config_;
}
inline ::apollo::planning::PathReferenceDeciderConfig* TaskConfig::mutable_path_reference_decider_config() {
  ::apollo::planning::PathReferenceDeciderConfig* _msg = _internal_mutable_path_reference_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_reference_decider_config)
  return _msg;
}

// .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
inline bool TaskConfig::_internal_has_path_reuse_decider_config() const {
  return task_config_case() == kPathReuseDeciderConfig;
}
inline bool TaskConfig::has_path_reuse_decider_config() const {
  return _internal_has_path_reuse_decider_config();
}
inline void TaskConfig::set_has_path_reuse_decider_config() {
  _impl_._oneof_case_[0] = kPathReuseDeciderConfig;
}
inline ::apollo::planning::PathReuseDeciderConfig* TaskConfig::release_path_reuse_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.path_reuse_decider_config)
  if (_internal_has_path_reuse_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathReuseDeciderConfig* temp = _impl_.task_config_.path_reuse_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.path_reuse_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PathReuseDeciderConfig& TaskConfig::_internal_path_reuse_decider_config() const {
  return _internal_has_path_reuse_decider_config()
      ? *_impl_.task_config_.path_reuse_decider_config_
      : reinterpret_cast< ::apollo::planning::PathReuseDeciderConfig&>(::apollo::planning::_PathReuseDeciderConfig_default_instance_);
}
inline const ::apollo::planning::PathReuseDeciderConfig& TaskConfig::path_reuse_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.path_reuse_decider_config)
  return _internal_path_reuse_decider_config();
}
inline ::apollo::planning::PathReuseDeciderConfig* TaskConfig::unsafe_arena_release_path_reuse_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.path_reuse_decider_config)
  if (_internal_has_path_reuse_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::PathReuseDeciderConfig* temp = _impl_.task_config_.path_reuse_decider_config_;
    _impl_.task_config_.path_reuse_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_path_reuse_decider_config(::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config) {
  clear_task_config();
  if (path_reuse_decider_config) {
    set_has_path_reuse_decider_config();
    _impl_.task_config_.path_reuse_decider_config_ = path_reuse_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.path_reuse_decider_config)
}
inline ::apollo::planning::PathReuseDeciderConfig* TaskConfig::_internal_mutable_path_reuse_decider_config() {
  if (!_internal_has_path_reuse_decider_config()) {
    clear_task_config();
    set_has_path_reuse_decider_config();
    _impl_.task_config_.path_reuse_decider_config_ = CreateMaybeMessage< ::apollo::planning::PathReuseDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.path_reuse_decider_config_;
}
inline ::apollo::planning::PathReuseDeciderConfig* TaskConfig::mutable_path_reuse_decider_config() {
  ::apollo::planning::PathReuseDeciderConfig* _msg = _internal_mutable_path_reuse_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.path_reuse_decider_config)
  return _msg;
}

// .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
inline bool TaskConfig::_internal_has_rule_based_stop_decider_config() const {
  return task_config_case() == kRuleBasedStopDeciderConfig;
}
inline bool TaskConfig::has_rule_based_stop_decider_config() const {
  return _internal_has_rule_based_stop_decider_config();
}
inline void TaskConfig::set_has_rule_based_stop_decider_config() {
  _impl_._oneof_case_[0] = kRuleBasedStopDeciderConfig;
}
inline ::apollo::planning::RuleBasedStopDeciderConfig* TaskConfig::release_rule_based_stop_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.rule_based_stop_decider_config)
  if (_internal_has_rule_based_stop_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::RuleBasedStopDeciderConfig* temp = _impl_.task_config_.rule_based_stop_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.rule_based_stop_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::RuleBasedStopDeciderConfig& TaskConfig::_internal_rule_based_stop_decider_config() const {
  return _internal_has_rule_based_stop_decider_config()
      ? *_impl_.task_config_.rule_based_stop_decider_config_
      : reinterpret_cast< ::apollo::planning::RuleBasedStopDeciderConfig&>(::apollo::planning::_RuleBasedStopDeciderConfig_default_instance_);
}
inline const ::apollo::planning::RuleBasedStopDeciderConfig& TaskConfig::rule_based_stop_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.rule_based_stop_decider_config)
  return _internal_rule_based_stop_decider_config();
}
inline ::apollo::planning::RuleBasedStopDeciderConfig* TaskConfig::unsafe_arena_release_rule_based_stop_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.rule_based_stop_decider_config)
  if (_internal_has_rule_based_stop_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::RuleBasedStopDeciderConfig* temp = _impl_.task_config_.rule_based_stop_decider_config_;
    _impl_.task_config_.rule_based_stop_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_rule_based_stop_decider_config(::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config) {
  clear_task_config();
  if (rule_based_stop_decider_config) {
    set_has_rule_based_stop_decider_config();
    _impl_.task_config_.rule_based_stop_decider_config_ = rule_based_stop_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.rule_based_stop_decider_config)
}
inline ::apollo::planning::RuleBasedStopDeciderConfig* TaskConfig::_internal_mutable_rule_based_stop_decider_config() {
  if (!_internal_has_rule_based_stop_decider_config()) {
    clear_task_config();
    set_has_rule_based_stop_decider_config();
    _impl_.task_config_.rule_based_stop_decider_config_ = CreateMaybeMessage< ::apollo::planning::RuleBasedStopDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.rule_based_stop_decider_config_;
}
inline ::apollo::planning::RuleBasedStopDeciderConfig* TaskConfig::mutable_rule_based_stop_decider_config() {
  ::apollo::planning::RuleBasedStopDeciderConfig* _msg = _internal_mutable_rule_based_stop_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.rule_based_stop_decider_config)
  return _msg;
}

// .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
inline bool TaskConfig::_internal_has_speed_bounds_decider_config() const {
  return task_config_case() == kSpeedBoundsDeciderConfig;
}
inline bool TaskConfig::has_speed_bounds_decider_config() const {
  return _internal_has_speed_bounds_decider_config();
}
inline void TaskConfig::set_has_speed_bounds_decider_config() {
  _impl_._oneof_case_[0] = kSpeedBoundsDeciderConfig;
}
inline ::apollo::planning::SpeedBoundsDeciderConfig* TaskConfig::release_speed_bounds_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.speed_bounds_decider_config)
  if (_internal_has_speed_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::SpeedBoundsDeciderConfig* temp = _impl_.task_config_.speed_bounds_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.speed_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::SpeedBoundsDeciderConfig& TaskConfig::_internal_speed_bounds_decider_config() const {
  return _internal_has_speed_bounds_decider_config()
      ? *_impl_.task_config_.speed_bounds_decider_config_
      : reinterpret_cast< ::apollo::planning::SpeedBoundsDeciderConfig&>(::apollo::planning::_SpeedBoundsDeciderConfig_default_instance_);
}
inline const ::apollo::planning::SpeedBoundsDeciderConfig& TaskConfig::speed_bounds_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.speed_bounds_decider_config)
  return _internal_speed_bounds_decider_config();
}
inline ::apollo::planning::SpeedBoundsDeciderConfig* TaskConfig::unsafe_arena_release_speed_bounds_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.speed_bounds_decider_config)
  if (_internal_has_speed_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::SpeedBoundsDeciderConfig* temp = _impl_.task_config_.speed_bounds_decider_config_;
    _impl_.task_config_.speed_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_speed_bounds_decider_config(::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config) {
  clear_task_config();
  if (speed_bounds_decider_config) {
    set_has_speed_bounds_decider_config();
    _impl_.task_config_.speed_bounds_decider_config_ = speed_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.speed_bounds_decider_config)
}
inline ::apollo::planning::SpeedBoundsDeciderConfig* TaskConfig::_internal_mutable_speed_bounds_decider_config() {
  if (!_internal_has_speed_bounds_decider_config()) {
    clear_task_config();
    set_has_speed_bounds_decider_config();
    _impl_.task_config_.speed_bounds_decider_config_ = CreateMaybeMessage< ::apollo::planning::SpeedBoundsDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.speed_bounds_decider_config_;
}
inline ::apollo::planning::SpeedBoundsDeciderConfig* TaskConfig::mutable_speed_bounds_decider_config() {
  ::apollo::planning::SpeedBoundsDeciderConfig* _msg = _internal_mutable_speed_bounds_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.speed_bounds_decider_config)
  return _msg;
}

// .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
inline bool TaskConfig::_internal_has_st_bounds_decider_config() const {
  return task_config_case() == kStBoundsDeciderConfig;
}
inline bool TaskConfig::has_st_bounds_decider_config() const {
  return _internal_has_st_bounds_decider_config();
}
inline void TaskConfig::set_has_st_bounds_decider_config() {
  _impl_._oneof_case_[0] = kStBoundsDeciderConfig;
}
inline ::apollo::planning::STBoundsDeciderConfig* TaskConfig::release_st_bounds_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.st_bounds_decider_config)
  if (_internal_has_st_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::STBoundsDeciderConfig* temp = _impl_.task_config_.st_bounds_decider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.st_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::STBoundsDeciderConfig& TaskConfig::_internal_st_bounds_decider_config() const {
  return _internal_has_st_bounds_decider_config()
      ? *_impl_.task_config_.st_bounds_decider_config_
      : reinterpret_cast< ::apollo::planning::STBoundsDeciderConfig&>(::apollo::planning::_STBoundsDeciderConfig_default_instance_);
}
inline const ::apollo::planning::STBoundsDeciderConfig& TaskConfig::st_bounds_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.st_bounds_decider_config)
  return _internal_st_bounds_decider_config();
}
inline ::apollo::planning::STBoundsDeciderConfig* TaskConfig::unsafe_arena_release_st_bounds_decider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.st_bounds_decider_config)
  if (_internal_has_st_bounds_decider_config()) {
    clear_has_task_config();
    ::apollo::planning::STBoundsDeciderConfig* temp = _impl_.task_config_.st_bounds_decider_config_;
    _impl_.task_config_.st_bounds_decider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_st_bounds_decider_config(::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config) {
  clear_task_config();
  if (st_bounds_decider_config) {
    set_has_st_bounds_decider_config();
    _impl_.task_config_.st_bounds_decider_config_ = st_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.st_bounds_decider_config)
}
inline ::apollo::planning::STBoundsDeciderConfig* TaskConfig::_internal_mutable_st_bounds_decider_config() {
  if (!_internal_has_st_bounds_decider_config()) {
    clear_task_config();
    set_has_st_bounds_decider_config();
    _impl_.task_config_.st_bounds_decider_config_ = CreateMaybeMessage< ::apollo::planning::STBoundsDeciderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.st_bounds_decider_config_;
}
inline ::apollo::planning::STBoundsDeciderConfig* TaskConfig::mutable_st_bounds_decider_config() {
  ::apollo::planning::STBoundsDeciderConfig* _msg = _internal_mutable_st_bounds_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.st_bounds_decider_config)
  return _msg;
}

// .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
inline bool TaskConfig::_internal_has_open_space_trajectory_partition_config() const {
  return task_config_case() == kOpenSpaceTrajectoryPartitionConfig;
}
inline bool TaskConfig::has_open_space_trajectory_partition_config() const {
  return _internal_has_open_space_trajectory_partition_config();
}
inline void TaskConfig::set_has_open_space_trajectory_partition_config() {
  _impl_._oneof_case_[0] = kOpenSpaceTrajectoryPartitionConfig;
}
inline ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* TaskConfig::release_open_space_trajectory_partition_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
  if (_internal_has_open_space_trajectory_partition_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* temp = _impl_.task_config_.open_space_trajectory_partition_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.open_space_trajectory_partition_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& TaskConfig::_internal_open_space_trajectory_partition_config() const {
  return _internal_has_open_space_trajectory_partition_config()
      ? *_impl_.task_config_.open_space_trajectory_partition_config_
      : reinterpret_cast< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig&>(::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig& TaskConfig::open_space_trajectory_partition_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
  return _internal_open_space_trajectory_partition_config();
}
inline ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* TaskConfig::unsafe_arena_release_open_space_trajectory_partition_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
  if (_internal_has_open_space_trajectory_partition_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* temp = _impl_.task_config_.open_space_trajectory_partition_config_;
    _impl_.task_config_.open_space_trajectory_partition_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_open_space_trajectory_partition_config(::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config) {
  clear_task_config();
  if (open_space_trajectory_partition_config) {
    set_has_open_space_trajectory_partition_config();
    _impl_.task_config_.open_space_trajectory_partition_config_ = open_space_trajectory_partition_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
}
inline ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* TaskConfig::_internal_mutable_open_space_trajectory_partition_config() {
  if (!_internal_has_open_space_trajectory_partition_config()) {
    clear_task_config();
    set_has_open_space_trajectory_partition_config();
    _impl_.task_config_.open_space_trajectory_partition_config_ = CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.open_space_trajectory_partition_config_;
}
inline ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* TaskConfig::mutable_open_space_trajectory_partition_config() {
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* _msg = _internal_mutable_open_space_trajectory_partition_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
  return _msg;
}

// .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
inline bool TaskConfig::_internal_has_open_space_trajectory_provider_config() const {
  return task_config_case() == kOpenSpaceTrajectoryProviderConfig;
}
inline bool TaskConfig::has_open_space_trajectory_provider_config() const {
  return _internal_has_open_space_trajectory_provider_config();
}
inline void TaskConfig::set_has_open_space_trajectory_provider_config() {
  _impl_._oneof_case_[0] = kOpenSpaceTrajectoryProviderConfig;
}
inline ::apollo::planning::OpenSpaceTrajectoryProviderConfig* TaskConfig::release_open_space_trajectory_provider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
  if (_internal_has_open_space_trajectory_provider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceTrajectoryProviderConfig* temp = _impl_.task_config_.open_space_trajectory_provider_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.open_space_trajectory_provider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& TaskConfig::_internal_open_space_trajectory_provider_config() const {
  return _internal_has_open_space_trajectory_provider_config()
      ? *_impl_.task_config_.open_space_trajectory_provider_config_
      : reinterpret_cast< ::apollo::planning::OpenSpaceTrajectoryProviderConfig&>(::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_);
}
inline const ::apollo::planning::OpenSpaceTrajectoryProviderConfig& TaskConfig::open_space_trajectory_provider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
  return _internal_open_space_trajectory_provider_config();
}
inline ::apollo::planning::OpenSpaceTrajectoryProviderConfig* TaskConfig::unsafe_arena_release_open_space_trajectory_provider_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
  if (_internal_has_open_space_trajectory_provider_config()) {
    clear_has_task_config();
    ::apollo::planning::OpenSpaceTrajectoryProviderConfig* temp = _impl_.task_config_.open_space_trajectory_provider_config_;
    _impl_.task_config_.open_space_trajectory_provider_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_open_space_trajectory_provider_config(::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config) {
  clear_task_config();
  if (open_space_trajectory_provider_config) {
    set_has_open_space_trajectory_provider_config();
    _impl_.task_config_.open_space_trajectory_provider_config_ = open_space_trajectory_provider_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
}
inline ::apollo::planning::OpenSpaceTrajectoryProviderConfig* TaskConfig::_internal_mutable_open_space_trajectory_provider_config() {
  if (!_internal_has_open_space_trajectory_provider_config()) {
    clear_task_config();
    set_has_open_space_trajectory_provider_config();
    _impl_.task_config_.open_space_trajectory_provider_config_ = CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.open_space_trajectory_provider_config_;
}
inline ::apollo::planning::OpenSpaceTrajectoryProviderConfig* TaskConfig::mutable_open_space_trajectory_provider_config() {
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig* _msg = _internal_mutable_open_space_trajectory_provider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
  return _msg;
}

// .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
inline bool TaskConfig::_internal_has_piecewise_jerk_nonlinear_speed_optimizer_config() const {
  return task_config_case() == kPiecewiseJerkNonlinearSpeedOptimizerConfig;
}
inline bool TaskConfig::has_piecewise_jerk_nonlinear_speed_optimizer_config() const {
  return _internal_has_piecewise_jerk_nonlinear_speed_optimizer_config();
}
inline void TaskConfig::set_has_piecewise_jerk_nonlinear_speed_optimizer_config() {
  _impl_._oneof_case_[0] = kPiecewiseJerkNonlinearSpeedOptimizerConfig;
}
inline ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* TaskConfig::release_piecewise_jerk_nonlinear_speed_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
  if (_internal_has_piecewise_jerk_nonlinear_speed_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig& TaskConfig::_internal_piecewise_jerk_nonlinear_speed_optimizer_config() const {
  return _internal_has_piecewise_jerk_nonlinear_speed_optimizer_config()
      ? *_impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_
      : reinterpret_cast< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig&>(::apollo::planning::_PiecewiseJerkNonlinearSpeedOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig& TaskConfig::piecewise_jerk_nonlinear_speed_optimizer_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
  return _internal_piecewise_jerk_nonlinear_speed_optimizer_config();
}
inline ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* TaskConfig::unsafe_arena_release_piecewise_jerk_nonlinear_speed_optimizer_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
  if (_internal_has_piecewise_jerk_nonlinear_speed_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
    _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_piecewise_jerk_nonlinear_speed_optimizer_config(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config) {
  clear_task_config();
  if (piecewise_jerk_nonlinear_speed_optimizer_config) {
    set_has_piecewise_jerk_nonlinear_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = piecewise_jerk_nonlinear_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
}
inline ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* TaskConfig::_internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config() {
  if (!_internal_has_piecewise_jerk_nonlinear_speed_optimizer_config()) {
    clear_task_config();
    set_has_piecewise_jerk_nonlinear_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = CreateMaybeMessage< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
}
inline ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* TaskConfig::mutable_piecewise_jerk_nonlinear_speed_optimizer_config() {
  ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* _msg = _internal_mutable_piecewise_jerk_nonlinear_speed_optimizer_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
  return _msg;
}

// .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
inline bool TaskConfig::_internal_has_piecewise_jerk_path_optimizer_config() const {
  return task_config_case() == kPiecewiseJerkPathOptimizerConfig;
}
inline bool TaskConfig::has_piecewise_jerk_path_optimizer_config() const {
  return _internal_has_piecewise_jerk_path_optimizer_config();
}
inline void TaskConfig::set_has_piecewise_jerk_path_optimizer_config() {
  _impl_._oneof_case_[0] = kPiecewiseJerkPathOptimizerConfig;
}
inline ::apollo::planning::PiecewiseJerkPathOptimizerConfig* TaskConfig::release_piecewise_jerk_path_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
  if (_internal_has_piecewise_jerk_path_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkPathOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_path_optimizer_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.piecewise_jerk_path_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PiecewiseJerkPathOptimizerConfig& TaskConfig::_internal_piecewise_jerk_path_optimizer_config() const {
  return _internal_has_piecewise_jerk_path_optimizer_config()
      ? *_impl_.task_config_.piecewise_jerk_path_optimizer_config_
      : reinterpret_cast< ::apollo::planning::PiecewiseJerkPathOptimizerConfig&>(::apollo::planning::_PiecewiseJerkPathOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkPathOptimizerConfig& TaskConfig::piecewise_jerk_path_optimizer_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
  return _internal_piecewise_jerk_path_optimizer_config();
}
inline ::apollo::planning::PiecewiseJerkPathOptimizerConfig* TaskConfig::unsafe_arena_release_piecewise_jerk_path_optimizer_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
  if (_internal_has_piecewise_jerk_path_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkPathOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_path_optimizer_config_;
    _impl_.task_config_.piecewise_jerk_path_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_piecewise_jerk_path_optimizer_config(::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config) {
  clear_task_config();
  if (piecewise_jerk_path_optimizer_config) {
    set_has_piecewise_jerk_path_optimizer_config();
    _impl_.task_config_.piecewise_jerk_path_optimizer_config_ = piecewise_jerk_path_optimizer_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
}
inline ::apollo::planning::PiecewiseJerkPathOptimizerConfig* TaskConfig::_internal_mutable_piecewise_jerk_path_optimizer_config() {
  if (!_internal_has_piecewise_jerk_path_optimizer_config()) {
    clear_task_config();
    set_has_piecewise_jerk_path_optimizer_config();
    _impl_.task_config_.piecewise_jerk_path_optimizer_config_ = CreateMaybeMessage< ::apollo::planning::PiecewiseJerkPathOptimizerConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.piecewise_jerk_path_optimizer_config_;
}
inline ::apollo::planning::PiecewiseJerkPathOptimizerConfig* TaskConfig::mutable_piecewise_jerk_path_optimizer_config() {
  ::apollo::planning::PiecewiseJerkPathOptimizerConfig* _msg = _internal_mutable_piecewise_jerk_path_optimizer_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
  return _msg;
}

// .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
inline bool TaskConfig::_internal_has_piecewise_jerk_speed_optimizer_config() const {
  return task_config_case() == kPiecewiseJerkSpeedOptimizerConfig;
}
inline bool TaskConfig::has_piecewise_jerk_speed_optimizer_config() const {
  return _internal_has_piecewise_jerk_speed_optimizer_config();
}
inline void TaskConfig::set_has_piecewise_jerk_speed_optimizer_config() {
  _impl_._oneof_case_[0] = kPiecewiseJerkSpeedOptimizerConfig;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* TaskConfig::release_piecewise_jerk_speed_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
  if (_internal_has_piecewise_jerk_speed_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.piecewise_jerk_speed_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& TaskConfig::_internal_piecewise_jerk_speed_optimizer_config() const {
  return _internal_has_piecewise_jerk_speed_optimizer_config()
      ? *_impl_.task_config_.piecewise_jerk_speed_optimizer_config_
      : reinterpret_cast< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig&>(::apollo::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig& TaskConfig::piecewise_jerk_speed_optimizer_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
  return _internal_piecewise_jerk_speed_optimizer_config();
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* TaskConfig::unsafe_arena_release_piecewise_jerk_speed_optimizer_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
  if (_internal_has_piecewise_jerk_speed_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* temp = _impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
    _impl_.task_config_.piecewise_jerk_speed_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_piecewise_jerk_speed_optimizer_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config) {
  clear_task_config();
  if (piecewise_jerk_speed_optimizer_config) {
    set_has_piecewise_jerk_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_speed_optimizer_config_ = piecewise_jerk_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* TaskConfig::_internal_mutable_piecewise_jerk_speed_optimizer_config() {
  if (!_internal_has_piecewise_jerk_speed_optimizer_config()) {
    clear_task_config();
    set_has_piecewise_jerk_speed_optimizer_config();
    _impl_.task_config_.piecewise_jerk_speed_optimizer_config_ = CreateMaybeMessage< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.piecewise_jerk_speed_optimizer_config_;
}
inline ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* TaskConfig::mutable_piecewise_jerk_speed_optimizer_config() {
  ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* _msg = _internal_mutable_piecewise_jerk_speed_optimizer_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
  return _msg;
}

// .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
inline bool TaskConfig::_internal_has_speed_heuristic_optimizer_config() const {
  return task_config_case() == kSpeedHeuristicOptimizerConfig;
}
inline bool TaskConfig::has_speed_heuristic_optimizer_config() const {
  return _internal_has_speed_heuristic_optimizer_config();
}
inline void TaskConfig::set_has_speed_heuristic_optimizer_config() {
  _impl_._oneof_case_[0] = kSpeedHeuristicOptimizerConfig;
}
inline ::apollo::planning::SpeedHeuristicOptimizerConfig* TaskConfig::release_speed_heuristic_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
  if (_internal_has_speed_heuristic_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::SpeedHeuristicOptimizerConfig* temp = _impl_.task_config_.speed_heuristic_optimizer_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.speed_heuristic_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::SpeedHeuristicOptimizerConfig& TaskConfig::_internal_speed_heuristic_optimizer_config() const {
  return _internal_has_speed_heuristic_optimizer_config()
      ? *_impl_.task_config_.speed_heuristic_optimizer_config_
      : reinterpret_cast< ::apollo::planning::SpeedHeuristicOptimizerConfig&>(::apollo::planning::_SpeedHeuristicOptimizerConfig_default_instance_);
}
inline const ::apollo::planning::SpeedHeuristicOptimizerConfig& TaskConfig::speed_heuristic_optimizer_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
  return _internal_speed_heuristic_optimizer_config();
}
inline ::apollo::planning::SpeedHeuristicOptimizerConfig* TaskConfig::unsafe_arena_release_speed_heuristic_optimizer_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
  if (_internal_has_speed_heuristic_optimizer_config()) {
    clear_has_task_config();
    ::apollo::planning::SpeedHeuristicOptimizerConfig* temp = _impl_.task_config_.speed_heuristic_optimizer_config_;
    _impl_.task_config_.speed_heuristic_optimizer_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_speed_heuristic_optimizer_config(::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config) {
  clear_task_config();
  if (speed_heuristic_optimizer_config) {
    set_has_speed_heuristic_optimizer_config();
    _impl_.task_config_.speed_heuristic_optimizer_config_ = speed_heuristic_optimizer_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
}
inline ::apollo::planning::SpeedHeuristicOptimizerConfig* TaskConfig::_internal_mutable_speed_heuristic_optimizer_config() {
  if (!_internal_has_speed_heuristic_optimizer_config()) {
    clear_task_config();
    set_has_speed_heuristic_optimizer_config();
    _impl_.task_config_.speed_heuristic_optimizer_config_ = CreateMaybeMessage< ::apollo::planning::SpeedHeuristicOptimizerConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.speed_heuristic_optimizer_config_;
}
inline ::apollo::planning::SpeedHeuristicOptimizerConfig* TaskConfig::mutable_speed_heuristic_optimizer_config() {
  ::apollo::planning::SpeedHeuristicOptimizerConfig* _msg = _internal_mutable_speed_heuristic_optimizer_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
  return _msg;
}

// .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
inline bool TaskConfig::_internal_has_learning_model_inference_task_config() const {
  return task_config_case() == kLearningModelInferenceTaskConfig;
}
inline bool TaskConfig::has_learning_model_inference_task_config() const {
  return _internal_has_learning_model_inference_task_config();
}
inline void TaskConfig::set_has_learning_model_inference_task_config() {
  _impl_._oneof_case_[0] = kLearningModelInferenceTaskConfig;
}
inline ::apollo::planning::LearningModelInferenceTaskConfig* TaskConfig::release_learning_model_inference_task_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.learning_model_inference_task_config)
  if (_internal_has_learning_model_inference_task_config()) {
    clear_has_task_config();
    ::apollo::planning::LearningModelInferenceTaskConfig* temp = _impl_.task_config_.learning_model_inference_task_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.learning_model_inference_task_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::LearningModelInferenceTaskConfig& TaskConfig::_internal_learning_model_inference_task_config() const {
  return _internal_has_learning_model_inference_task_config()
      ? *_impl_.task_config_.learning_model_inference_task_config_
      : reinterpret_cast< ::apollo::planning::LearningModelInferenceTaskConfig&>(::apollo::planning::_LearningModelInferenceTaskConfig_default_instance_);
}
inline const ::apollo::planning::LearningModelInferenceTaskConfig& TaskConfig::learning_model_inference_task_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.learning_model_inference_task_config)
  return _internal_learning_model_inference_task_config();
}
inline ::apollo::planning::LearningModelInferenceTaskConfig* TaskConfig::unsafe_arena_release_learning_model_inference_task_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.learning_model_inference_task_config)
  if (_internal_has_learning_model_inference_task_config()) {
    clear_has_task_config();
    ::apollo::planning::LearningModelInferenceTaskConfig* temp = _impl_.task_config_.learning_model_inference_task_config_;
    _impl_.task_config_.learning_model_inference_task_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_learning_model_inference_task_config(::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config) {
  clear_task_config();
  if (learning_model_inference_task_config) {
    set_has_learning_model_inference_task_config();
    _impl_.task_config_.learning_model_inference_task_config_ = learning_model_inference_task_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.learning_model_inference_task_config)
}
inline ::apollo::planning::LearningModelInferenceTaskConfig* TaskConfig::_internal_mutable_learning_model_inference_task_config() {
  if (!_internal_has_learning_model_inference_task_config()) {
    clear_task_config();
    set_has_learning_model_inference_task_config();
    _impl_.task_config_.learning_model_inference_task_config_ = CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTaskConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.learning_model_inference_task_config_;
}
inline ::apollo::planning::LearningModelInferenceTaskConfig* TaskConfig::mutable_learning_model_inference_task_config() {
  ::apollo::planning::LearningModelInferenceTaskConfig* _msg = _internal_mutable_learning_model_inference_task_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.learning_model_inference_task_config)
  return _msg;
}

// .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
inline bool TaskConfig::_internal_has_learning_model_inference_trajectory_task_config() const {
  return task_config_case() == kLearningModelInferenceTrajectoryTaskConfig;
}
inline bool TaskConfig::has_learning_model_inference_trajectory_task_config() const {
  return _internal_has_learning_model_inference_trajectory_task_config();
}
inline void TaskConfig::set_has_learning_model_inference_trajectory_task_config() {
  _impl_._oneof_case_[0] = kLearningModelInferenceTrajectoryTaskConfig;
}
inline ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* TaskConfig::release_learning_model_inference_trajectory_task_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
  if (_internal_has_learning_model_inference_trajectory_task_config()) {
    clear_has_task_config();
    ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* temp = _impl_.task_config_.learning_model_inference_trajectory_task_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.task_config_.learning_model_inference_trajectory_task_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig& TaskConfig::_internal_learning_model_inference_trajectory_task_config() const {
  return _internal_has_learning_model_inference_trajectory_task_config()
      ? *_impl_.task_config_.learning_model_inference_trajectory_task_config_
      : reinterpret_cast< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig&>(::apollo::planning::_LearningModelInferenceTrajectoryTaskConfig_default_instance_);
}
inline const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig& TaskConfig::learning_model_inference_trajectory_task_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
  return _internal_learning_model_inference_trajectory_task_config();
}
inline ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* TaskConfig::unsafe_arena_release_learning_model_inference_trajectory_task_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
  if (_internal_has_learning_model_inference_trajectory_task_config()) {
    clear_has_task_config();
    ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* temp = _impl_.task_config_.learning_model_inference_trajectory_task_config_;
    _impl_.task_config_.learning_model_inference_trajectory_task_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskConfig::unsafe_arena_set_allocated_learning_model_inference_trajectory_task_config(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config) {
  clear_task_config();
  if (learning_model_inference_trajectory_task_config) {
    set_has_learning_model_inference_trajectory_task_config();
    _impl_.task_config_.learning_model_inference_trajectory_task_config_ = learning_model_inference_trajectory_task_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
}
inline ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* TaskConfig::_internal_mutable_learning_model_inference_trajectory_task_config() {
  if (!_internal_has_learning_model_inference_trajectory_task_config()) {
    clear_task_config();
    set_has_learning_model_inference_trajectory_task_config();
    _impl_.task_config_.learning_model_inference_trajectory_task_config_ = CreateMaybeMessage< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig >(GetArenaForAllocation());
  }
  return _impl_.task_config_.learning_model_inference_trajectory_task_config_;
}
inline ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* TaskConfig::mutable_learning_model_inference_trajectory_task_config() {
  ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* _msg = _internal_mutable_learning_model_inference_trajectory_task_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
  return _msg;
}

inline bool TaskConfig::has_task_config() const {
  return task_config_case() != TASK_CONFIG_NOT_SET;
}
inline void TaskConfig::clear_has_task_config() {
  _impl_._oneof_case_[0] = TASK_CONFIG_NOT_SET;
}
inline TaskConfig::TaskConfigCase TaskConfig::task_config_case() const {
  return TaskConfig::TaskConfigCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ScenarioBareIntersectionUnprotectedConfig

// optional double start_bare_intersection_scenario_distance = 1 [default = 25];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_start_bare_intersection_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_start_bare_intersection_scenario_distance() const {
  return _internal_has_start_bare_intersection_scenario_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_start_bare_intersection_scenario_distance() {
  _impl_.start_bare_intersection_scenario_distance_ = 25;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioBareIntersectionUnprotectedConfig::_internal_start_bare_intersection_scenario_distance() const {
  return _impl_.start_bare_intersection_scenario_distance_;
}
inline double ScenarioBareIntersectionUnprotectedConfig::start_bare_intersection_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.start_bare_intersection_scenario_distance)
  return _internal_start_bare_intersection_scenario_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_start_bare_intersection_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_bare_intersection_scenario_distance_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_start_bare_intersection_scenario_distance(double value) {
  _internal_set_start_bare_intersection_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.start_bare_intersection_scenario_distance)
}

// optional bool enable_explicit_stop = 2 [default = false];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_enable_explicit_stop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_enable_explicit_stop() const {
  return _internal_has_enable_explicit_stop();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_enable_explicit_stop() {
  _impl_.enable_explicit_stop_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_enable_explicit_stop() const {
  return _impl_.enable_explicit_stop_;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::enable_explicit_stop() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.enable_explicit_stop)
  return _internal_enable_explicit_stop();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_enable_explicit_stop(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_explicit_stop_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_enable_explicit_stop(bool value) {
  _internal_set_enable_explicit_stop(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.enable_explicit_stop)
}

// optional double min_pass_s_distance = 3 [default = 3];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioBareIntersectionUnprotectedConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioBareIntersectionUnprotectedConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.min_pass_s_distance)
}

// optional double approach_cruise_speed = 4 [default = 6.7056];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_approach_cruise_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_approach_cruise_speed() const {
  return _internal_has_approach_cruise_speed();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_approach_cruise_speed() {
  _impl_.approach_cruise_speed_ = 6.7056;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioBareIntersectionUnprotectedConfig::_internal_approach_cruise_speed() const {
  return _impl_.approach_cruise_speed_;
}
inline double ScenarioBareIntersectionUnprotectedConfig::approach_cruise_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.approach_cruise_speed)
  return _internal_approach_cruise_speed();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_approach_cruise_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.approach_cruise_speed_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_approach_cruise_speed(double value) {
  _internal_set_approach_cruise_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.approach_cruise_speed)
}

// optional double stop_distance = 5 [default = 0.5];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_stop_distance() const {
  return _internal_has_stop_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_stop_distance() {
  _impl_.stop_distance_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ScenarioBareIntersectionUnprotectedConfig::_internal_stop_distance() const {
  return _impl_.stop_distance_;
}
inline double ScenarioBareIntersectionUnprotectedConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.stop_distance)
  return _internal_stop_distance();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stop_distance_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_stop_distance(double value) {
  _internal_set_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.stop_distance)
}

// optional float stop_timeout_sec = 6 [default = 8];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_stop_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_stop_timeout_sec() const {
  return _internal_has_stop_timeout_sec();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_stop_timeout_sec() {
  _impl_.stop_timeout_sec_ = 8;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ScenarioBareIntersectionUnprotectedConfig::_internal_stop_timeout_sec() const {
  return _impl_.stop_timeout_sec_;
}
inline float ScenarioBareIntersectionUnprotectedConfig::stop_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.stop_timeout_sec)
  return _internal_stop_timeout_sec();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_stop_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stop_timeout_sec_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_stop_timeout_sec(float value) {
  _internal_set_stop_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.stop_timeout_sec)
}

// optional float creep_timeout_sec = 7 [default = 10];
inline bool ScenarioBareIntersectionUnprotectedConfig::_internal_has_creep_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScenarioBareIntersectionUnprotectedConfig::has_creep_timeout_sec() const {
  return _internal_has_creep_timeout_sec();
}
inline void ScenarioBareIntersectionUnprotectedConfig::clear_creep_timeout_sec() {
  _impl_.creep_timeout_sec_ = 10;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ScenarioBareIntersectionUnprotectedConfig::_internal_creep_timeout_sec() const {
  return _impl_.creep_timeout_sec_;
}
inline float ScenarioBareIntersectionUnprotectedConfig::creep_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.creep_timeout_sec)
  return _internal_creep_timeout_sec();
}
inline void ScenarioBareIntersectionUnprotectedConfig::_internal_set_creep_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.creep_timeout_sec_ = value;
}
inline void ScenarioBareIntersectionUnprotectedConfig::set_creep_timeout_sec(float value) {
  _internal_set_creep_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioBareIntersectionUnprotectedConfig.creep_timeout_sec)
}

// -------------------------------------------------------------------

// ScenarioEmergencyPullOverConfig

// optional double max_stop_deceleration = 1 [default = 3];
inline bool ScenarioEmergencyPullOverConfig::_internal_has_max_stop_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioEmergencyPullOverConfig::has_max_stop_deceleration() const {
  return _internal_has_max_stop_deceleration();
}
inline void ScenarioEmergencyPullOverConfig::clear_max_stop_deceleration() {
  _impl_.max_stop_deceleration_ = 3;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioEmergencyPullOverConfig::_internal_max_stop_deceleration() const {
  return _impl_.max_stop_deceleration_;
}
inline double ScenarioEmergencyPullOverConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyPullOverConfig.max_stop_deceleration)
  return _internal_max_stop_deceleration();
}
inline void ScenarioEmergencyPullOverConfig::_internal_set_max_stop_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_stop_deceleration_ = value;
}
inline void ScenarioEmergencyPullOverConfig::set_max_stop_deceleration(double value) {
  _internal_set_max_stop_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyPullOverConfig.max_stop_deceleration)
}

// optional double slow_down_deceleration_time = 2 [default = 3];
inline bool ScenarioEmergencyPullOverConfig::_internal_has_slow_down_deceleration_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioEmergencyPullOverConfig::has_slow_down_deceleration_time() const {
  return _internal_has_slow_down_deceleration_time();
}
inline void ScenarioEmergencyPullOverConfig::clear_slow_down_deceleration_time() {
  _impl_.slow_down_deceleration_time_ = 3;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioEmergencyPullOverConfig::_internal_slow_down_deceleration_time() const {
  return _impl_.slow_down_deceleration_time_;
}
inline double ScenarioEmergencyPullOverConfig::slow_down_deceleration_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyPullOverConfig.slow_down_deceleration_time)
  return _internal_slow_down_deceleration_time();
}
inline void ScenarioEmergencyPullOverConfig::_internal_set_slow_down_deceleration_time(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slow_down_deceleration_time_ = value;
}
inline void ScenarioEmergencyPullOverConfig::set_slow_down_deceleration_time(double value) {
  _internal_set_slow_down_deceleration_time(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyPullOverConfig.slow_down_deceleration_time)
}

// optional double target_slow_down_speed = 3 [default = 2.5];
inline bool ScenarioEmergencyPullOverConfig::_internal_has_target_slow_down_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioEmergencyPullOverConfig::has_target_slow_down_speed() const {
  return _internal_has_target_slow_down_speed();
}
inline void ScenarioEmergencyPullOverConfig::clear_target_slow_down_speed() {
  _impl_.target_slow_down_speed_ = 2.5;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioEmergencyPullOverConfig::_internal_target_slow_down_speed() const {
  return _impl_.target_slow_down_speed_;
}
inline double ScenarioEmergencyPullOverConfig::target_slow_down_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyPullOverConfig.target_slow_down_speed)
  return _internal_target_slow_down_speed();
}
inline void ScenarioEmergencyPullOverConfig::_internal_set_target_slow_down_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_slow_down_speed_ = value;
}
inline void ScenarioEmergencyPullOverConfig::set_target_slow_down_speed(double value) {
  _internal_set_target_slow_down_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyPullOverConfig.target_slow_down_speed)
}

// optional double stop_distance = 4 [default = 1.5];
inline bool ScenarioEmergencyPullOverConfig::_internal_has_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioEmergencyPullOverConfig::has_stop_distance() const {
  return _internal_has_stop_distance();
}
inline void ScenarioEmergencyPullOverConfig::clear_stop_distance() {
  _impl_.stop_distance_ = 1.5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioEmergencyPullOverConfig::_internal_stop_distance() const {
  return _impl_.stop_distance_;
}
inline double ScenarioEmergencyPullOverConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyPullOverConfig.stop_distance)
  return _internal_stop_distance();
}
inline void ScenarioEmergencyPullOverConfig::_internal_set_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stop_distance_ = value;
}
inline void ScenarioEmergencyPullOverConfig::set_stop_distance(double value) {
  _internal_set_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyPullOverConfig.stop_distance)
}

// -------------------------------------------------------------------

// ScenarioEmergencyStopConfig

// optional double max_stop_deceleration = 1 [default = 6];
inline bool ScenarioEmergencyStopConfig::_internal_has_max_stop_deceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioEmergencyStopConfig::has_max_stop_deceleration() const {
  return _internal_has_max_stop_deceleration();
}
inline void ScenarioEmergencyStopConfig::clear_max_stop_deceleration() {
  _impl_.max_stop_deceleration_ = 6;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioEmergencyStopConfig::_internal_max_stop_deceleration() const {
  return _impl_.max_stop_deceleration_;
}
inline double ScenarioEmergencyStopConfig::max_stop_deceleration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyStopConfig.max_stop_deceleration)
  return _internal_max_stop_deceleration();
}
inline void ScenarioEmergencyStopConfig::_internal_set_max_stop_deceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_stop_deceleration_ = value;
}
inline void ScenarioEmergencyStopConfig::set_max_stop_deceleration(double value) {
  _internal_set_max_stop_deceleration(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyStopConfig.max_stop_deceleration)
}

// optional double stop_distance = 2 [default = 1];
inline bool ScenarioEmergencyStopConfig::_internal_has_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioEmergencyStopConfig::has_stop_distance() const {
  return _internal_has_stop_distance();
}
inline void ScenarioEmergencyStopConfig::clear_stop_distance() {
  _impl_.stop_distance_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioEmergencyStopConfig::_internal_stop_distance() const {
  return _impl_.stop_distance_;
}
inline double ScenarioEmergencyStopConfig::stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioEmergencyStopConfig.stop_distance)
  return _internal_stop_distance();
}
inline void ScenarioEmergencyStopConfig::_internal_set_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stop_distance_ = value;
}
inline void ScenarioEmergencyStopConfig::set_stop_distance(double value) {
  _internal_set_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioEmergencyStopConfig.stop_distance)
}

// -------------------------------------------------------------------

// ScenarioLaneFollowConfig

// -------------------------------------------------------------------

// ScenarioLearningModelSampleConfig

// -------------------------------------------------------------------

// ScenarioNarrowStreetUTurnConfig

// -------------------------------------------------------------------

// ScenarioParkAndGoConfig

// optional double front_obstacle_buffer = 1 [default = 4];
inline bool ScenarioParkAndGoConfig::_internal_has_front_obstacle_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioParkAndGoConfig::has_front_obstacle_buffer() const {
  return _internal_has_front_obstacle_buffer();
}
inline void ScenarioParkAndGoConfig::clear_front_obstacle_buffer() {
  _impl_.front_obstacle_buffer_ = 4;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioParkAndGoConfig::_internal_front_obstacle_buffer() const {
  return _impl_.front_obstacle_buffer_;
}
inline double ScenarioParkAndGoConfig::front_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioParkAndGoConfig.front_obstacle_buffer)
  return _internal_front_obstacle_buffer();
}
inline void ScenarioParkAndGoConfig::_internal_set_front_obstacle_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.front_obstacle_buffer_ = value;
}
inline void ScenarioParkAndGoConfig::set_front_obstacle_buffer(double value) {
  _internal_set_front_obstacle_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioParkAndGoConfig.front_obstacle_buffer)
}

// optional double heading_buffer = 2 [default = 0.5];
inline bool ScenarioParkAndGoConfig::_internal_has_heading_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioParkAndGoConfig::has_heading_buffer() const {
  return _internal_has_heading_buffer();
}
inline void ScenarioParkAndGoConfig::clear_heading_buffer() {
  _impl_.heading_buffer_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioParkAndGoConfig::_internal_heading_buffer() const {
  return _impl_.heading_buffer_;
}
inline double ScenarioParkAndGoConfig::heading_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioParkAndGoConfig.heading_buffer)
  return _internal_heading_buffer();
}
inline void ScenarioParkAndGoConfig::_internal_set_heading_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.heading_buffer_ = value;
}
inline void ScenarioParkAndGoConfig::set_heading_buffer(double value) {
  _internal_set_heading_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioParkAndGoConfig.heading_buffer)
}

// optional double min_dist_to_dest = 3 [default = 25];
inline bool ScenarioParkAndGoConfig::_internal_has_min_dist_to_dest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioParkAndGoConfig::has_min_dist_to_dest() const {
  return _internal_has_min_dist_to_dest();
}
inline void ScenarioParkAndGoConfig::clear_min_dist_to_dest() {
  _impl_.min_dist_to_dest_ = 25;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioParkAndGoConfig::_internal_min_dist_to_dest() const {
  return _impl_.min_dist_to_dest_;
}
inline double ScenarioParkAndGoConfig::min_dist_to_dest() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioParkAndGoConfig.min_dist_to_dest)
  return _internal_min_dist_to_dest();
}
inline void ScenarioParkAndGoConfig::_internal_set_min_dist_to_dest(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_dist_to_dest_ = value;
}
inline void ScenarioParkAndGoConfig::set_min_dist_to_dest(double value) {
  _internal_set_min_dist_to_dest(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioParkAndGoConfig.min_dist_to_dest)
}

// optional double max_steering_percentage_when_cruise = 4 [default = 90];
inline bool ScenarioParkAndGoConfig::_internal_has_max_steering_percentage_when_cruise() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioParkAndGoConfig::has_max_steering_percentage_when_cruise() const {
  return _internal_has_max_steering_percentage_when_cruise();
}
inline void ScenarioParkAndGoConfig::clear_max_steering_percentage_when_cruise() {
  _impl_.max_steering_percentage_when_cruise_ = 90;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioParkAndGoConfig::_internal_max_steering_percentage_when_cruise() const {
  return _impl_.max_steering_percentage_when_cruise_;
}
inline double ScenarioParkAndGoConfig::max_steering_percentage_when_cruise() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioParkAndGoConfig.max_steering_percentage_when_cruise)
  return _internal_max_steering_percentage_when_cruise();
}
inline void ScenarioParkAndGoConfig::_internal_set_max_steering_percentage_when_cruise(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_steering_percentage_when_cruise_ = value;
}
inline void ScenarioParkAndGoConfig::set_max_steering_percentage_when_cruise(double value) {
  _internal_set_max_steering_percentage_when_cruise(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioParkAndGoConfig.max_steering_percentage_when_cruise)
}

// -------------------------------------------------------------------

// ScenarioPullOverConfig

// optional double start_pull_over_scenario_distance = 1 [default = 50];
inline bool ScenarioPullOverConfig::_internal_has_start_pull_over_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_start_pull_over_scenario_distance() const {
  return _internal_has_start_pull_over_scenario_distance();
}
inline void ScenarioPullOverConfig::clear_start_pull_over_scenario_distance() {
  _impl_.start_pull_over_scenario_distance_ = 50;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioPullOverConfig::_internal_start_pull_over_scenario_distance() const {
  return _impl_.start_pull_over_scenario_distance_;
}
inline double ScenarioPullOverConfig::start_pull_over_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.start_pull_over_scenario_distance)
  return _internal_start_pull_over_scenario_distance();
}
inline void ScenarioPullOverConfig::_internal_set_start_pull_over_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_pull_over_scenario_distance_ = value;
}
inline void ScenarioPullOverConfig::set_start_pull_over_scenario_distance(double value) {
  _internal_set_start_pull_over_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.start_pull_over_scenario_distance)
}

// optional double pull_over_min_distance_buffer = 2 [default = 10];
inline bool ScenarioPullOverConfig::_internal_has_pull_over_min_distance_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_pull_over_min_distance_buffer() const {
  return _internal_has_pull_over_min_distance_buffer();
}
inline void ScenarioPullOverConfig::clear_pull_over_min_distance_buffer() {
  _impl_.pull_over_min_distance_buffer_ = 10;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioPullOverConfig::_internal_pull_over_min_distance_buffer() const {
  return _impl_.pull_over_min_distance_buffer_;
}
inline double ScenarioPullOverConfig::pull_over_min_distance_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.pull_over_min_distance_buffer)
  return _internal_pull_over_min_distance_buffer();
}
inline void ScenarioPullOverConfig::_internal_set_pull_over_min_distance_buffer(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pull_over_min_distance_buffer_ = value;
}
inline void ScenarioPullOverConfig::set_pull_over_min_distance_buffer(double value) {
  _internal_set_pull_over_min_distance_buffer(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.pull_over_min_distance_buffer)
}

// optional double max_distance_stop_search = 3 [default = 25];
inline bool ScenarioPullOverConfig::_internal_has_max_distance_stop_search() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_distance_stop_search() const {
  return _internal_has_max_distance_stop_search();
}
inline void ScenarioPullOverConfig::clear_max_distance_stop_search() {
  _impl_.max_distance_stop_search_ = 25;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioPullOverConfig::_internal_max_distance_stop_search() const {
  return _impl_.max_distance_stop_search_;
}
inline double ScenarioPullOverConfig::max_distance_stop_search() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_distance_stop_search)
  return _internal_max_distance_stop_search();
}
inline void ScenarioPullOverConfig::_internal_set_max_distance_stop_search(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_distance_stop_search_ = value;
}
inline void ScenarioPullOverConfig::set_max_distance_stop_search(double value) {
  _internal_set_max_distance_stop_search(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_distance_stop_search)
}

// optional double max_s_error_to_end_point = 4 [default = 0.2];
inline bool ScenarioPullOverConfig::_internal_has_max_s_error_to_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_s_error_to_end_point() const {
  return _internal_has_max_s_error_to_end_point();
}
inline void ScenarioPullOverConfig::clear_max_s_error_to_end_point() {
  _impl_.max_s_error_to_end_point_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioPullOverConfig::_internal_max_s_error_to_end_point() const {
  return _impl_.max_s_error_to_end_point_;
}
inline double ScenarioPullOverConfig::max_s_error_to_end_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_s_error_to_end_point)
  return _internal_max_s_error_to_end_point();
}
inline void ScenarioPullOverConfig::_internal_set_max_s_error_to_end_point(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_s_error_to_end_point_ = value;
}
inline void ScenarioPullOverConfig::set_max_s_error_to_end_point(double value) {
  _internal_set_max_s_error_to_end_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_s_error_to_end_point)
}

// optional double max_l_error_to_end_point = 5 [default = 0.5];
inline bool ScenarioPullOverConfig::_internal_has_max_l_error_to_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_l_error_to_end_point() const {
  return _internal_has_max_l_error_to_end_point();
}
inline void ScenarioPullOverConfig::clear_max_l_error_to_end_point() {
  _impl_.max_l_error_to_end_point_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ScenarioPullOverConfig::_internal_max_l_error_to_end_point() const {
  return _impl_.max_l_error_to_end_point_;
}
inline double ScenarioPullOverConfig::max_l_error_to_end_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_l_error_to_end_point)
  return _internal_max_l_error_to_end_point();
}
inline void ScenarioPullOverConfig::_internal_set_max_l_error_to_end_point(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_l_error_to_end_point_ = value;
}
inline void ScenarioPullOverConfig::set_max_l_error_to_end_point(double value) {
  _internal_set_max_l_error_to_end_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_l_error_to_end_point)
}

// optional double max_theta_error_to_end_point = 6 [default = 0.2];
inline bool ScenarioPullOverConfig::_internal_has_max_theta_error_to_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_theta_error_to_end_point() const {
  return _internal_has_max_theta_error_to_end_point();
}
inline void ScenarioPullOverConfig::clear_max_theta_error_to_end_point() {
  _impl_.max_theta_error_to_end_point_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ScenarioPullOverConfig::_internal_max_theta_error_to_end_point() const {
  return _impl_.max_theta_error_to_end_point_;
}
inline double ScenarioPullOverConfig::max_theta_error_to_end_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_theta_error_to_end_point)
  return _internal_max_theta_error_to_end_point();
}
inline void ScenarioPullOverConfig::_internal_set_max_theta_error_to_end_point(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_theta_error_to_end_point_ = value;
}
inline void ScenarioPullOverConfig::set_max_theta_error_to_end_point(double value) {
  _internal_set_max_theta_error_to_end_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_theta_error_to_end_point)
}

// optional double max_distance_error_to_end_point = 7 [default = 0.2];
inline bool ScenarioPullOverConfig::_internal_has_max_distance_error_to_end_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_distance_error_to_end_point() const {
  return _internal_has_max_distance_error_to_end_point();
}
inline void ScenarioPullOverConfig::clear_max_distance_error_to_end_point() {
  _impl_.max_distance_error_to_end_point_ = 0.2;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ScenarioPullOverConfig::_internal_max_distance_error_to_end_point() const {
  return _impl_.max_distance_error_to_end_point_;
}
inline double ScenarioPullOverConfig::max_distance_error_to_end_point() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_distance_error_to_end_point)
  return _internal_max_distance_error_to_end_point();
}
inline void ScenarioPullOverConfig::_internal_set_max_distance_error_to_end_point(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_distance_error_to_end_point_ = value;
}
inline void ScenarioPullOverConfig::set_max_distance_error_to_end_point(double value) {
  _internal_set_max_distance_error_to_end_point(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_distance_error_to_end_point)
}

// optional double pass_destination_threshold = 8 [default = 10];
inline bool ScenarioPullOverConfig::_internal_has_pass_destination_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_pass_destination_threshold() const {
  return _internal_has_pass_destination_threshold();
}
inline void ScenarioPullOverConfig::clear_pass_destination_threshold() {
  _impl_.pass_destination_threshold_ = 10;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ScenarioPullOverConfig::_internal_pass_destination_threshold() const {
  return _impl_.pass_destination_threshold_;
}
inline double ScenarioPullOverConfig::pass_destination_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.pass_destination_threshold)
  return _internal_pass_destination_threshold();
}
inline void ScenarioPullOverConfig::_internal_set_pass_destination_threshold(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pass_destination_threshold_ = value;
}
inline void ScenarioPullOverConfig::set_pass_destination_threshold(double value) {
  _internal_set_pass_destination_threshold(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.pass_destination_threshold)
}

// optional double max_valid_stop_distance = 9 [default = 1];
inline bool ScenarioPullOverConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioPullOverConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ScenarioPullOverConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioPullOverConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioPullOverConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioPullOverConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.max_valid_stop_distance)
}

// optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
inline bool ScenarioPullOverConfig::_internal_has_s_distance_to_stop_for_open_space_parking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ScenarioPullOverConfig::has_s_distance_to_stop_for_open_space_parking() const {
  return _internal_has_s_distance_to_stop_for_open_space_parking();
}
inline void ScenarioPullOverConfig::clear_s_distance_to_stop_for_open_space_parking() {
  _impl_.s_distance_to_stop_for_open_space_parking_ = 7;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ScenarioPullOverConfig::_internal_s_distance_to_stop_for_open_space_parking() const {
  return _impl_.s_distance_to_stop_for_open_space_parking_;
}
inline double ScenarioPullOverConfig::s_distance_to_stop_for_open_space_parking() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioPullOverConfig.s_distance_to_stop_for_open_space_parking)
  return _internal_s_distance_to_stop_for_open_space_parking();
}
inline void ScenarioPullOverConfig::_internal_set_s_distance_to_stop_for_open_space_parking(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.s_distance_to_stop_for_open_space_parking_ = value;
}
inline void ScenarioPullOverConfig::set_s_distance_to_stop_for_open_space_parking(double value) {
  _internal_set_s_distance_to_stop_for_open_space_parking(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioPullOverConfig.s_distance_to_stop_for_open_space_parking)
}

// -------------------------------------------------------------------

// ScenarioStopSignUnprotectedConfig

// optional double start_stop_sign_scenario_distance = 1 [default = 5];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_start_stop_sign_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_start_stop_sign_scenario_distance() const {
  return _internal_has_start_stop_sign_scenario_distance();
}
inline void ScenarioStopSignUnprotectedConfig::clear_start_stop_sign_scenario_distance() {
  _impl_.start_stop_sign_scenario_distance_ = 5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioStopSignUnprotectedConfig::_internal_start_stop_sign_scenario_distance() const {
  return _impl_.start_stop_sign_scenario_distance_;
}
inline double ScenarioStopSignUnprotectedConfig::start_stop_sign_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.start_stop_sign_scenario_distance)
  return _internal_start_stop_sign_scenario_distance();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_start_stop_sign_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_stop_sign_scenario_distance_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_start_stop_sign_scenario_distance(double value) {
  _internal_set_start_stop_sign_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.start_stop_sign_scenario_distance)
}

// optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_watch_vehicle_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_watch_vehicle_max_valid_stop_distance() const {
  return _internal_has_watch_vehicle_max_valid_stop_distance();
}
inline void ScenarioStopSignUnprotectedConfig::clear_watch_vehicle_max_valid_stop_distance() {
  _impl_.watch_vehicle_max_valid_stop_distance_ = 5;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioStopSignUnprotectedConfig::_internal_watch_vehicle_max_valid_stop_distance() const {
  return _impl_.watch_vehicle_max_valid_stop_distance_;
}
inline double ScenarioStopSignUnprotectedConfig::watch_vehicle_max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.watch_vehicle_max_valid_stop_distance)
  return _internal_watch_vehicle_max_valid_stop_distance();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_watch_vehicle_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.watch_vehicle_max_valid_stop_distance_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_watch_vehicle_max_valid_stop_distance(double value) {
  _internal_set_watch_vehicle_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.watch_vehicle_max_valid_stop_distance)
}

// optional double max_valid_stop_distance = 3 [default = 3.5];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioStopSignUnprotectedConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 3.5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioStopSignUnprotectedConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioStopSignUnprotectedConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.max_valid_stop_distance)
}

// optional float stop_duration_sec = 4 [default = 1];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_stop_duration_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_stop_duration_sec() const {
  return _internal_has_stop_duration_sec();
}
inline void ScenarioStopSignUnprotectedConfig::clear_stop_duration_sec() {
  _impl_.stop_duration_sec_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ScenarioStopSignUnprotectedConfig::_internal_stop_duration_sec() const {
  return _impl_.stop_duration_sec_;
}
inline float ScenarioStopSignUnprotectedConfig::stop_duration_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.stop_duration_sec)
  return _internal_stop_duration_sec();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_stop_duration_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stop_duration_sec_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_stop_duration_sec(float value) {
  _internal_set_stop_duration_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.stop_duration_sec)
}

// optional double min_pass_s_distance = 5 [default = 3];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioStopSignUnprotectedConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ScenarioStopSignUnprotectedConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioStopSignUnprotectedConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.min_pass_s_distance)
}

// optional float stop_timeout_sec = 6 [default = 8];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_stop_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_stop_timeout_sec() const {
  return _internal_has_stop_timeout_sec();
}
inline void ScenarioStopSignUnprotectedConfig::clear_stop_timeout_sec() {
  _impl_.stop_timeout_sec_ = 8;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ScenarioStopSignUnprotectedConfig::_internal_stop_timeout_sec() const {
  return _impl_.stop_timeout_sec_;
}
inline float ScenarioStopSignUnprotectedConfig::stop_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.stop_timeout_sec)
  return _internal_stop_timeout_sec();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_stop_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.stop_timeout_sec_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_stop_timeout_sec(float value) {
  _internal_set_stop_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.stop_timeout_sec)
}

// optional float creep_timeout_sec = 7 [default = 10];
inline bool ScenarioStopSignUnprotectedConfig::_internal_has_creep_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioStopSignUnprotectedConfig::has_creep_timeout_sec() const {
  return _internal_has_creep_timeout_sec();
}
inline void ScenarioStopSignUnprotectedConfig::clear_creep_timeout_sec() {
  _impl_.creep_timeout_sec_ = 10;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ScenarioStopSignUnprotectedConfig::_internal_creep_timeout_sec() const {
  return _impl_.creep_timeout_sec_;
}
inline float ScenarioStopSignUnprotectedConfig::creep_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioStopSignUnprotectedConfig.creep_timeout_sec)
  return _internal_creep_timeout_sec();
}
inline void ScenarioStopSignUnprotectedConfig::_internal_set_creep_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creep_timeout_sec_ = value;
}
inline void ScenarioStopSignUnprotectedConfig::set_creep_timeout_sec(float value) {
  _internal_set_creep_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioStopSignUnprotectedConfig.creep_timeout_sec)
}

// -------------------------------------------------------------------

// ScenarioTrafficLightProtectedConfig

// optional double start_traffic_light_scenario_distance = 1 [default = 5];
inline bool ScenarioTrafficLightProtectedConfig::_internal_has_start_traffic_light_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioTrafficLightProtectedConfig::has_start_traffic_light_scenario_distance() const {
  return _internal_has_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightProtectedConfig::clear_start_traffic_light_scenario_distance() {
  _impl_.start_traffic_light_scenario_distance_ = 5;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioTrafficLightProtectedConfig::_internal_start_traffic_light_scenario_distance() const {
  return _impl_.start_traffic_light_scenario_distance_;
}
inline double ScenarioTrafficLightProtectedConfig::start_traffic_light_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightProtectedConfig.start_traffic_light_scenario_distance)
  return _internal_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightProtectedConfig::_internal_set_start_traffic_light_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_traffic_light_scenario_distance_ = value;
}
inline void ScenarioTrafficLightProtectedConfig::set_start_traffic_light_scenario_distance(double value) {
  _internal_set_start_traffic_light_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightProtectedConfig.start_traffic_light_scenario_distance)
}

// optional double max_valid_stop_distance = 2 [default = 2];
inline bool ScenarioTrafficLightProtectedConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioTrafficLightProtectedConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioTrafficLightProtectedConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 2;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioTrafficLightProtectedConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioTrafficLightProtectedConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightProtectedConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioTrafficLightProtectedConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioTrafficLightProtectedConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightProtectedConfig.max_valid_stop_distance)
}

// optional double min_pass_s_distance = 3 [default = 3];
inline bool ScenarioTrafficLightProtectedConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioTrafficLightProtectedConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioTrafficLightProtectedConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioTrafficLightProtectedConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioTrafficLightProtectedConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightProtectedConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioTrafficLightProtectedConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioTrafficLightProtectedConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightProtectedConfig.min_pass_s_distance)
}

// -------------------------------------------------------------------

// ScenarioTrafficLightUnprotectedLeftTurnConfig

// optional double start_traffic_light_scenario_distance = 1 [default = 5];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_start_traffic_light_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_start_traffic_light_scenario_distance() const {
  return _internal_has_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_start_traffic_light_scenario_distance() {
  _impl_.start_traffic_light_scenario_distance_ = 5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_start_traffic_light_scenario_distance() const {
  return _impl_.start_traffic_light_scenario_distance_;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::start_traffic_light_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.start_traffic_light_scenario_distance)
  return _internal_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_start_traffic_light_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_traffic_light_scenario_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_start_traffic_light_scenario_distance(double value) {
  _internal_set_start_traffic_light_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.start_traffic_light_scenario_distance)
}

// optional double approach_cruise_speed = 2 [default = 2.78];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_approach_cruise_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_approach_cruise_speed() const {
  return _internal_has_approach_cruise_speed();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_approach_cruise_speed() {
  _impl_.approach_cruise_speed_ = 2.78;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_approach_cruise_speed() const {
  return _impl_.approach_cruise_speed_;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::approach_cruise_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.approach_cruise_speed)
  return _internal_approach_cruise_speed();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_approach_cruise_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.approach_cruise_speed_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_approach_cruise_speed(double value) {
  _internal_set_approach_cruise_speed(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.approach_cruise_speed)
}

// optional double max_valid_stop_distance = 3 [default = 3.5];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 3.5;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.max_valid_stop_distance)
}

// optional double min_pass_s_distance = 4 [default = 3];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.min_pass_s_distance)
}

// optional float creep_timeout_sec = 5 [default = 10];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_creep_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_creep_timeout_sec() const {
  return _internal_has_creep_timeout_sec();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_creep_timeout_sec() {
  _impl_.creep_timeout_sec_ = 10;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_creep_timeout_sec() const {
  return _impl_.creep_timeout_sec_;
}
inline float ScenarioTrafficLightUnprotectedLeftTurnConfig::creep_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.creep_timeout_sec)
  return _internal_creep_timeout_sec();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_creep_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creep_timeout_sec_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_creep_timeout_sec(float value) {
  _internal_set_creep_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.creep_timeout_sec)
}

// optional double max_adc_speed_before_creep = 6 [default = 5.56];
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_has_max_adc_speed_before_creep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedLeftTurnConfig::has_max_adc_speed_before_creep() const {
  return _internal_has_max_adc_speed_before_creep();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::clear_max_adc_speed_before_creep() {
  _impl_.max_adc_speed_before_creep_ = 5.56;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_max_adc_speed_before_creep() const {
  return _impl_.max_adc_speed_before_creep_;
}
inline double ScenarioTrafficLightUnprotectedLeftTurnConfig::max_adc_speed_before_creep() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.max_adc_speed_before_creep)
  return _internal_max_adc_speed_before_creep();
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::_internal_set_max_adc_speed_before_creep(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_adc_speed_before_creep_ = value;
}
inline void ScenarioTrafficLightUnprotectedLeftTurnConfig::set_max_adc_speed_before_creep(double value) {
  _internal_set_max_adc_speed_before_creep(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig.max_adc_speed_before_creep)
}

// -------------------------------------------------------------------

// ScenarioTrafficLightUnprotectedRightTurnConfig

// optional double start_traffic_light_scenario_distance = 1 [default = 5];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_start_traffic_light_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_start_traffic_light_scenario_distance() const {
  return _internal_has_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_start_traffic_light_scenario_distance() {
  _impl_.start_traffic_light_scenario_distance_ = 5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_start_traffic_light_scenario_distance() const {
  return _impl_.start_traffic_light_scenario_distance_;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::start_traffic_light_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.start_traffic_light_scenario_distance)
  return _internal_start_traffic_light_scenario_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_start_traffic_light_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_traffic_light_scenario_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_start_traffic_light_scenario_distance(double value) {
  _internal_set_start_traffic_light_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.start_traffic_light_scenario_distance)
}

// optional bool enable_right_turn_on_red = 2 [default = false];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_enable_right_turn_on_red() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_enable_right_turn_on_red() const {
  return _internal_has_enable_right_turn_on_red();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_enable_right_turn_on_red() {
  _impl_.enable_right_turn_on_red_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_enable_right_turn_on_red() const {
  return _impl_.enable_right_turn_on_red_;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::enable_right_turn_on_red() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.enable_right_turn_on_red)
  return _internal_enable_right_turn_on_red();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_enable_right_turn_on_red(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_right_turn_on_red_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_enable_right_turn_on_red(bool value) {
  _internal_set_enable_right_turn_on_red(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.enable_right_turn_on_red)
}

// optional double max_valid_stop_distance = 3 [default = 3.5];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 3.5;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.max_valid_stop_distance)
}

// optional double min_pass_s_distance = 4 [default = 3];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.min_pass_s_distance)
}

// optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_red_light_right_turn_stop_duration_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_red_light_right_turn_stop_duration_sec() const {
  return _internal_has_red_light_right_turn_stop_duration_sec();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_red_light_right_turn_stop_duration_sec() {
  _impl_.red_light_right_turn_stop_duration_sec_ = 3;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_red_light_right_turn_stop_duration_sec() const {
  return _impl_.red_light_right_turn_stop_duration_sec_;
}
inline float ScenarioTrafficLightUnprotectedRightTurnConfig::red_light_right_turn_stop_duration_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.red_light_right_turn_stop_duration_sec)
  return _internal_red_light_right_turn_stop_duration_sec();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_red_light_right_turn_stop_duration_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.red_light_right_turn_stop_duration_sec_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_red_light_right_turn_stop_duration_sec(float value) {
  _internal_set_red_light_right_turn_stop_duration_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.red_light_right_turn_stop_duration_sec)
}

// optional float creep_timeout_sec = 6 [default = 10];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_creep_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_creep_timeout_sec() const {
  return _internal_has_creep_timeout_sec();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_creep_timeout_sec() {
  _impl_.creep_timeout_sec_ = 10;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_creep_timeout_sec() const {
  return _impl_.creep_timeout_sec_;
}
inline float ScenarioTrafficLightUnprotectedRightTurnConfig::creep_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.creep_timeout_sec)
  return _internal_creep_timeout_sec();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_creep_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.creep_timeout_sec_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_creep_timeout_sec(float value) {
  _internal_set_creep_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.creep_timeout_sec)
}

// optional double max_adc_speed_before_creep = 7 [default = 3];
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_has_max_adc_speed_before_creep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScenarioTrafficLightUnprotectedRightTurnConfig::has_max_adc_speed_before_creep() const {
  return _internal_has_max_adc_speed_before_creep();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::clear_max_adc_speed_before_creep() {
  _impl_.max_adc_speed_before_creep_ = 3;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_max_adc_speed_before_creep() const {
  return _impl_.max_adc_speed_before_creep_;
}
inline double ScenarioTrafficLightUnprotectedRightTurnConfig::max_adc_speed_before_creep() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.max_adc_speed_before_creep)
  return _internal_max_adc_speed_before_creep();
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::_internal_set_max_adc_speed_before_creep(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_adc_speed_before_creep_ = value;
}
inline void ScenarioTrafficLightUnprotectedRightTurnConfig::set_max_adc_speed_before_creep(double value) {
  _internal_set_max_adc_speed_before_creep(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig.max_adc_speed_before_creep)
}

// -------------------------------------------------------------------

// ScenarioValetParkingConfig

// optional double parking_spot_range_to_start = 1 [default = 20];
inline bool ScenarioValetParkingConfig::_internal_has_parking_spot_range_to_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioValetParkingConfig::has_parking_spot_range_to_start() const {
  return _internal_has_parking_spot_range_to_start();
}
inline void ScenarioValetParkingConfig::clear_parking_spot_range_to_start() {
  _impl_.parking_spot_range_to_start_ = 20;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioValetParkingConfig::_internal_parking_spot_range_to_start() const {
  return _impl_.parking_spot_range_to_start_;
}
inline double ScenarioValetParkingConfig::parking_spot_range_to_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioValetParkingConfig.parking_spot_range_to_start)
  return _internal_parking_spot_range_to_start();
}
inline void ScenarioValetParkingConfig::_internal_set_parking_spot_range_to_start(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parking_spot_range_to_start_ = value;
}
inline void ScenarioValetParkingConfig::set_parking_spot_range_to_start(double value) {
  _internal_set_parking_spot_range_to_start(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioValetParkingConfig.parking_spot_range_to_start)
}

// optional double max_valid_stop_distance = 2 [default = 1];
inline bool ScenarioValetParkingConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioValetParkingConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioValetParkingConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioValetParkingConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioValetParkingConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioValetParkingConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioValetParkingConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioValetParkingConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioValetParkingConfig.max_valid_stop_distance)
}

// -------------------------------------------------------------------

// ScenarioDeadEndTurnAroundConfig

// optional double dead_end_start_range = 1 [default = 20];
inline bool ScenarioDeadEndTurnAroundConfig::_internal_has_dead_end_start_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioDeadEndTurnAroundConfig::has_dead_end_start_range() const {
  return _internal_has_dead_end_start_range();
}
inline void ScenarioDeadEndTurnAroundConfig::clear_dead_end_start_range() {
  _impl_.dead_end_start_range_ = 20;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ScenarioDeadEndTurnAroundConfig::_internal_dead_end_start_range() const {
  return _impl_.dead_end_start_range_;
}
inline double ScenarioDeadEndTurnAroundConfig::dead_end_start_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioDeadEndTurnAroundConfig.dead_end_start_range)
  return _internal_dead_end_start_range();
}
inline void ScenarioDeadEndTurnAroundConfig::_internal_set_dead_end_start_range(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dead_end_start_range_ = value;
}
inline void ScenarioDeadEndTurnAroundConfig::set_dead_end_start_range(double value) {
  _internal_set_dead_end_start_range(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioDeadEndTurnAroundConfig.dead_end_start_range)
}

// optional double max_valid_stop_distance = 2 [default = 1];
inline bool ScenarioDeadEndTurnAroundConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioDeadEndTurnAroundConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioDeadEndTurnAroundConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioDeadEndTurnAroundConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioDeadEndTurnAroundConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioDeadEndTurnAroundConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioDeadEndTurnAroundConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioDeadEndTurnAroundConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioDeadEndTurnAroundConfig.max_valid_stop_distance)
}

// -------------------------------------------------------------------

// ScenarioYieldSignConfig

// optional double start_yield_sign_scenario_distance = 1 [default = 10];
inline bool ScenarioYieldSignConfig::_internal_has_start_yield_sign_scenario_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioYieldSignConfig::has_start_yield_sign_scenario_distance() const {
  return _internal_has_start_yield_sign_scenario_distance();
}
inline void ScenarioYieldSignConfig::clear_start_yield_sign_scenario_distance() {
  _impl_.start_yield_sign_scenario_distance_ = 10;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ScenarioYieldSignConfig::_internal_start_yield_sign_scenario_distance() const {
  return _impl_.start_yield_sign_scenario_distance_;
}
inline double ScenarioYieldSignConfig::start_yield_sign_scenario_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioYieldSignConfig.start_yield_sign_scenario_distance)
  return _internal_start_yield_sign_scenario_distance();
}
inline void ScenarioYieldSignConfig::_internal_set_start_yield_sign_scenario_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_yield_sign_scenario_distance_ = value;
}
inline void ScenarioYieldSignConfig::set_start_yield_sign_scenario_distance(double value) {
  _internal_set_start_yield_sign_scenario_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioYieldSignConfig.start_yield_sign_scenario_distance)
}

// optional double max_valid_stop_distance = 2 [default = 4.5];
inline bool ScenarioYieldSignConfig::_internal_has_max_valid_stop_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScenarioYieldSignConfig::has_max_valid_stop_distance() const {
  return _internal_has_max_valid_stop_distance();
}
inline void ScenarioYieldSignConfig::clear_max_valid_stop_distance() {
  _impl_.max_valid_stop_distance_ = 4.5;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ScenarioYieldSignConfig::_internal_max_valid_stop_distance() const {
  return _impl_.max_valid_stop_distance_;
}
inline double ScenarioYieldSignConfig::max_valid_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioYieldSignConfig.max_valid_stop_distance)
  return _internal_max_valid_stop_distance();
}
inline void ScenarioYieldSignConfig::_internal_set_max_valid_stop_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_valid_stop_distance_ = value;
}
inline void ScenarioYieldSignConfig::set_max_valid_stop_distance(double value) {
  _internal_set_max_valid_stop_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioYieldSignConfig.max_valid_stop_distance)
}

// optional double min_pass_s_distance = 3 [default = 3];
inline bool ScenarioYieldSignConfig::_internal_has_min_pass_s_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScenarioYieldSignConfig::has_min_pass_s_distance() const {
  return _internal_has_min_pass_s_distance();
}
inline void ScenarioYieldSignConfig::clear_min_pass_s_distance() {
  _impl_.min_pass_s_distance_ = 3;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ScenarioYieldSignConfig::_internal_min_pass_s_distance() const {
  return _impl_.min_pass_s_distance_;
}
inline double ScenarioYieldSignConfig::min_pass_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioYieldSignConfig.min_pass_s_distance)
  return _internal_min_pass_s_distance();
}
inline void ScenarioYieldSignConfig::_internal_set_min_pass_s_distance(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.min_pass_s_distance_ = value;
}
inline void ScenarioYieldSignConfig::set_min_pass_s_distance(double value) {
  _internal_set_min_pass_s_distance(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioYieldSignConfig.min_pass_s_distance)
}

// optional float creep_timeout_sec = 4 [default = 10];
inline bool ScenarioYieldSignConfig::_internal_has_creep_timeout_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioYieldSignConfig::has_creep_timeout_sec() const {
  return _internal_has_creep_timeout_sec();
}
inline void ScenarioYieldSignConfig::clear_creep_timeout_sec() {
  _impl_.creep_timeout_sec_ = 10;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ScenarioYieldSignConfig::_internal_creep_timeout_sec() const {
  return _impl_.creep_timeout_sec_;
}
inline float ScenarioYieldSignConfig::creep_timeout_sec() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioYieldSignConfig.creep_timeout_sec)
  return _internal_creep_timeout_sec();
}
inline void ScenarioYieldSignConfig::_internal_set_creep_timeout_sec(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.creep_timeout_sec_ = value;
}
inline void ScenarioYieldSignConfig::set_creep_timeout_sec(float value) {
  _internal_set_creep_timeout_sec(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioYieldSignConfig.creep_timeout_sec)
}

// -------------------------------------------------------------------

// ScenarioConfig_StageConfig

// optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
inline bool ScenarioConfig_StageConfig::_internal_has_stage_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioConfig_StageConfig::has_stage_type() const {
  return _internal_has_stage_type();
}
inline void ScenarioConfig_StageConfig::clear_stage_type() {
  _impl_.stage_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::ScenarioConfig_StageType ScenarioConfig_StageConfig::_internal_stage_type() const {
  return static_cast< ::apollo::planning::ScenarioConfig_StageType >(_impl_.stage_type_);
}
inline ::apollo::planning::ScenarioConfig_StageType ScenarioConfig_StageConfig::stage_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.StageConfig.stage_type)
  return _internal_stage_type();
}
inline void ScenarioConfig_StageConfig::_internal_set_stage_type(::apollo::planning::ScenarioConfig_StageType value) {
  assert(::apollo::planning::ScenarioConfig_StageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stage_type_ = value;
}
inline void ScenarioConfig_StageConfig::set_stage_type(::apollo::planning::ScenarioConfig_StageType value) {
  _internal_set_stage_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.StageConfig.stage_type)
}

// optional bool enabled = 2 [default = true];
inline bool ScenarioConfig_StageConfig::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScenarioConfig_StageConfig::has_enabled() const {
  return _internal_has_enabled();
}
inline void ScenarioConfig_StageConfig::clear_enabled() {
  _impl_.enabled_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool ScenarioConfig_StageConfig::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool ScenarioConfig_StageConfig::enabled() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.StageConfig.enabled)
  return _internal_enabled();
}
inline void ScenarioConfig_StageConfig::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enabled_ = value;
}
inline void ScenarioConfig_StageConfig::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.StageConfig.enabled)
}

// repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
inline int ScenarioConfig_StageConfig::_internal_task_type_size() const {
  return _impl_.task_type_.size();
}
inline int ScenarioConfig_StageConfig::task_type_size() const {
  return _internal_task_type_size();
}
inline void ScenarioConfig_StageConfig::clear_task_type() {
  _impl_.task_type_.Clear();
}
inline ::apollo::planning::TaskConfig_TaskType ScenarioConfig_StageConfig::_internal_task_type(int index) const {
  return static_cast< ::apollo::planning::TaskConfig_TaskType >(_impl_.task_type_.Get(index));
}
inline ::apollo::planning::TaskConfig_TaskType ScenarioConfig_StageConfig::task_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.StageConfig.task_type)
  return _internal_task_type(index);
}
inline void ScenarioConfig_StageConfig::set_task_type(int index, ::apollo::planning::TaskConfig_TaskType value) {
  assert(::apollo::planning::TaskConfig_TaskType_IsValid(value));
  _impl_.task_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.StageConfig.task_type)
}
inline void ScenarioConfig_StageConfig::_internal_add_task_type(::apollo::planning::TaskConfig_TaskType value) {
  assert(::apollo::planning::TaskConfig_TaskType_IsValid(value));
  _impl_.task_type_.Add(value);
}
inline void ScenarioConfig_StageConfig::add_task_type(::apollo::planning::TaskConfig_TaskType value) {
  _internal_add_task_type(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.StageConfig.task_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ScenarioConfig_StageConfig::task_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.StageConfig.task_type)
  return _impl_.task_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScenarioConfig_StageConfig::_internal_mutable_task_type() {
  return &_impl_.task_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScenarioConfig_StageConfig::mutable_task_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.StageConfig.task_type)
  return _internal_mutable_task_type();
}

// repeated .apollo.planning.TaskConfig task_config = 4;
inline int ScenarioConfig_StageConfig::_internal_task_config_size() const {
  return _impl_.task_config_.size();
}
inline int ScenarioConfig_StageConfig::task_config_size() const {
  return _internal_task_config_size();
}
inline void ScenarioConfig_StageConfig::clear_task_config() {
  _impl_.task_config_.Clear();
}
inline ::apollo::planning::TaskConfig* ScenarioConfig_StageConfig::mutable_task_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.StageConfig.task_config)
  return _impl_.task_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >*
ScenarioConfig_StageConfig::mutable_task_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.StageConfig.task_config)
  return &_impl_.task_config_;
}
inline const ::apollo::planning::TaskConfig& ScenarioConfig_StageConfig::_internal_task_config(int index) const {
  return _impl_.task_config_.Get(index);
}
inline const ::apollo::planning::TaskConfig& ScenarioConfig_StageConfig::task_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.StageConfig.task_config)
  return _internal_task_config(index);
}
inline ::apollo::planning::TaskConfig* ScenarioConfig_StageConfig::_internal_add_task_config() {
  return _impl_.task_config_.Add();
}
inline ::apollo::planning::TaskConfig* ScenarioConfig_StageConfig::add_task_config() {
  ::apollo::planning::TaskConfig* _add = _internal_add_task_config();
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.StageConfig.task_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >&
ScenarioConfig_StageConfig::task_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.StageConfig.task_config)
  return _impl_.task_config_;
}

// -------------------------------------------------------------------

// ScenarioConfig

// optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
inline bool ScenarioConfig::_internal_has_scenario_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScenarioConfig::has_scenario_type() const {
  return _internal_has_scenario_type();
}
inline void ScenarioConfig::clear_scenario_type() {
  _impl_.scenario_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::ScenarioConfig_ScenarioType ScenarioConfig::_internal_scenario_type() const {
  return static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(_impl_.scenario_type_);
}
inline ::apollo::planning::ScenarioConfig_ScenarioType ScenarioConfig::scenario_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.scenario_type)
  return _internal_scenario_type();
}
inline void ScenarioConfig::_internal_set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  assert(::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scenario_type_ = value;
}
inline void ScenarioConfig::set_scenario_type(::apollo::planning::ScenarioConfig_ScenarioType value) {
  _internal_set_scenario_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.scenario_type)
}

// .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
inline bool ScenarioConfig::_internal_has_lane_follow_config() const {
  return scenario_config_case() == kLaneFollowConfig;
}
inline bool ScenarioConfig::has_lane_follow_config() const {
  return _internal_has_lane_follow_config();
}
inline void ScenarioConfig::set_has_lane_follow_config() {
  _impl_._oneof_case_[0] = kLaneFollowConfig;
}
inline void ScenarioConfig::clear_lane_follow_config() {
  if (_internal_has_lane_follow_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.lane_follow_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioLaneFollowConfig* ScenarioConfig::release_lane_follow_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.lane_follow_config)
  if (_internal_has_lane_follow_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioLaneFollowConfig* temp = _impl_.scenario_config_.lane_follow_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.lane_follow_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioLaneFollowConfig& ScenarioConfig::_internal_lane_follow_config() const {
  return _internal_has_lane_follow_config()
      ? *_impl_.scenario_config_.lane_follow_config_
      : reinterpret_cast< ::apollo::planning::ScenarioLaneFollowConfig&>(::apollo::planning::_ScenarioLaneFollowConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioLaneFollowConfig& ScenarioConfig::lane_follow_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.lane_follow_config)
  return _internal_lane_follow_config();
}
inline ::apollo::planning::ScenarioLaneFollowConfig* ScenarioConfig::unsafe_arena_release_lane_follow_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.lane_follow_config)
  if (_internal_has_lane_follow_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioLaneFollowConfig* temp = _impl_.scenario_config_.lane_follow_config_;
    _impl_.scenario_config_.lane_follow_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_lane_follow_config(::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config) {
  clear_scenario_config();
  if (lane_follow_config) {
    set_has_lane_follow_config();
    _impl_.scenario_config_.lane_follow_config_ = lane_follow_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.lane_follow_config)
}
inline ::apollo::planning::ScenarioLaneFollowConfig* ScenarioConfig::_internal_mutable_lane_follow_config() {
  if (!_internal_has_lane_follow_config()) {
    clear_scenario_config();
    set_has_lane_follow_config();
    _impl_.scenario_config_.lane_follow_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioLaneFollowConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.lane_follow_config_;
}
inline ::apollo::planning::ScenarioLaneFollowConfig* ScenarioConfig::mutable_lane_follow_config() {
  ::apollo::planning::ScenarioLaneFollowConfig* _msg = _internal_mutable_lane_follow_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.lane_follow_config)
  return _msg;
}

// .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
inline bool ScenarioConfig::_internal_has_bare_intersection_unprotected_config() const {
  return scenario_config_case() == kBareIntersectionUnprotectedConfig;
}
inline bool ScenarioConfig::has_bare_intersection_unprotected_config() const {
  return _internal_has_bare_intersection_unprotected_config();
}
inline void ScenarioConfig::set_has_bare_intersection_unprotected_config() {
  _impl_._oneof_case_[0] = kBareIntersectionUnprotectedConfig;
}
inline void ScenarioConfig::clear_bare_intersection_unprotected_config() {
  if (_internal_has_bare_intersection_unprotected_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.bare_intersection_unprotected_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* ScenarioConfig::release_bare_intersection_unprotected_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
  if (_internal_has_bare_intersection_unprotected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* temp = _impl_.scenario_config_.bare_intersection_unprotected_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.bare_intersection_unprotected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& ScenarioConfig::_internal_bare_intersection_unprotected_config() const {
  return _internal_has_bare_intersection_unprotected_config()
      ? *_impl_.scenario_config_.bare_intersection_unprotected_config_
      : reinterpret_cast< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig&>(::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig& ScenarioConfig::bare_intersection_unprotected_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
  return _internal_bare_intersection_unprotected_config();
}
inline ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* ScenarioConfig::unsafe_arena_release_bare_intersection_unprotected_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
  if (_internal_has_bare_intersection_unprotected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* temp = _impl_.scenario_config_.bare_intersection_unprotected_config_;
    _impl_.scenario_config_.bare_intersection_unprotected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_bare_intersection_unprotected_config(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config) {
  clear_scenario_config();
  if (bare_intersection_unprotected_config) {
    set_has_bare_intersection_unprotected_config();
    _impl_.scenario_config_.bare_intersection_unprotected_config_ = bare_intersection_unprotected_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
}
inline ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* ScenarioConfig::_internal_mutable_bare_intersection_unprotected_config() {
  if (!_internal_has_bare_intersection_unprotected_config()) {
    clear_scenario_config();
    set_has_bare_intersection_unprotected_config();
    _impl_.scenario_config_.bare_intersection_unprotected_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.bare_intersection_unprotected_config_;
}
inline ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* ScenarioConfig::mutable_bare_intersection_unprotected_config() {
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* _msg = _internal_mutable_bare_intersection_unprotected_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
  return _msg;
}

// .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
inline bool ScenarioConfig::_internal_has_emergency_pull_over_config() const {
  return scenario_config_case() == kEmergencyPullOverConfig;
}
inline bool ScenarioConfig::has_emergency_pull_over_config() const {
  return _internal_has_emergency_pull_over_config();
}
inline void ScenarioConfig::set_has_emergency_pull_over_config() {
  _impl_._oneof_case_[0] = kEmergencyPullOverConfig;
}
inline void ScenarioConfig::clear_emergency_pull_over_config() {
  if (_internal_has_emergency_pull_over_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.emergency_pull_over_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioEmergencyPullOverConfig* ScenarioConfig::release_emergency_pull_over_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.emergency_pull_over_config)
  if (_internal_has_emergency_pull_over_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioEmergencyPullOverConfig* temp = _impl_.scenario_config_.emergency_pull_over_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.emergency_pull_over_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioEmergencyPullOverConfig& ScenarioConfig::_internal_emergency_pull_over_config() const {
  return _internal_has_emergency_pull_over_config()
      ? *_impl_.scenario_config_.emergency_pull_over_config_
      : reinterpret_cast< ::apollo::planning::ScenarioEmergencyPullOverConfig&>(::apollo::planning::_ScenarioEmergencyPullOverConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioEmergencyPullOverConfig& ScenarioConfig::emergency_pull_over_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.emergency_pull_over_config)
  return _internal_emergency_pull_over_config();
}
inline ::apollo::planning::ScenarioEmergencyPullOverConfig* ScenarioConfig::unsafe_arena_release_emergency_pull_over_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.emergency_pull_over_config)
  if (_internal_has_emergency_pull_over_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioEmergencyPullOverConfig* temp = _impl_.scenario_config_.emergency_pull_over_config_;
    _impl_.scenario_config_.emergency_pull_over_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_emergency_pull_over_config(::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config) {
  clear_scenario_config();
  if (emergency_pull_over_config) {
    set_has_emergency_pull_over_config();
    _impl_.scenario_config_.emergency_pull_over_config_ = emergency_pull_over_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.emergency_pull_over_config)
}
inline ::apollo::planning::ScenarioEmergencyPullOverConfig* ScenarioConfig::_internal_mutable_emergency_pull_over_config() {
  if (!_internal_has_emergency_pull_over_config()) {
    clear_scenario_config();
    set_has_emergency_pull_over_config();
    _impl_.scenario_config_.emergency_pull_over_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyPullOverConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.emergency_pull_over_config_;
}
inline ::apollo::planning::ScenarioEmergencyPullOverConfig* ScenarioConfig::mutable_emergency_pull_over_config() {
  ::apollo::planning::ScenarioEmergencyPullOverConfig* _msg = _internal_mutable_emergency_pull_over_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.emergency_pull_over_config)
  return _msg;
}

// .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
inline bool ScenarioConfig::_internal_has_emergency_stop_config() const {
  return scenario_config_case() == kEmergencyStopConfig;
}
inline bool ScenarioConfig::has_emergency_stop_config() const {
  return _internal_has_emergency_stop_config();
}
inline void ScenarioConfig::set_has_emergency_stop_config() {
  _impl_._oneof_case_[0] = kEmergencyStopConfig;
}
inline void ScenarioConfig::clear_emergency_stop_config() {
  if (_internal_has_emergency_stop_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.emergency_stop_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioEmergencyStopConfig* ScenarioConfig::release_emergency_stop_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.emergency_stop_config)
  if (_internal_has_emergency_stop_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioEmergencyStopConfig* temp = _impl_.scenario_config_.emergency_stop_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.emergency_stop_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioEmergencyStopConfig& ScenarioConfig::_internal_emergency_stop_config() const {
  return _internal_has_emergency_stop_config()
      ? *_impl_.scenario_config_.emergency_stop_config_
      : reinterpret_cast< ::apollo::planning::ScenarioEmergencyStopConfig&>(::apollo::planning::_ScenarioEmergencyStopConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioEmergencyStopConfig& ScenarioConfig::emergency_stop_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.emergency_stop_config)
  return _internal_emergency_stop_config();
}
inline ::apollo::planning::ScenarioEmergencyStopConfig* ScenarioConfig::unsafe_arena_release_emergency_stop_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.emergency_stop_config)
  if (_internal_has_emergency_stop_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioEmergencyStopConfig* temp = _impl_.scenario_config_.emergency_stop_config_;
    _impl_.scenario_config_.emergency_stop_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_emergency_stop_config(::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config) {
  clear_scenario_config();
  if (emergency_stop_config) {
    set_has_emergency_stop_config();
    _impl_.scenario_config_.emergency_stop_config_ = emergency_stop_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.emergency_stop_config)
}
inline ::apollo::planning::ScenarioEmergencyStopConfig* ScenarioConfig::_internal_mutable_emergency_stop_config() {
  if (!_internal_has_emergency_stop_config()) {
    clear_scenario_config();
    set_has_emergency_stop_config();
    _impl_.scenario_config_.emergency_stop_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyStopConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.emergency_stop_config_;
}
inline ::apollo::planning::ScenarioEmergencyStopConfig* ScenarioConfig::mutable_emergency_stop_config() {
  ::apollo::planning::ScenarioEmergencyStopConfig* _msg = _internal_mutable_emergency_stop_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.emergency_stop_config)
  return _msg;
}

// .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
inline bool ScenarioConfig::_internal_has_learning_model_sample_config() const {
  return scenario_config_case() == kLearningModelSampleConfig;
}
inline bool ScenarioConfig::has_learning_model_sample_config() const {
  return _internal_has_learning_model_sample_config();
}
inline void ScenarioConfig::set_has_learning_model_sample_config() {
  _impl_._oneof_case_[0] = kLearningModelSampleConfig;
}
inline void ScenarioConfig::clear_learning_model_sample_config() {
  if (_internal_has_learning_model_sample_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.learning_model_sample_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioLearningModelSampleConfig* ScenarioConfig::release_learning_model_sample_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.learning_model_sample_config)
  if (_internal_has_learning_model_sample_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioLearningModelSampleConfig* temp = _impl_.scenario_config_.learning_model_sample_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.learning_model_sample_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioLearningModelSampleConfig& ScenarioConfig::_internal_learning_model_sample_config() const {
  return _internal_has_learning_model_sample_config()
      ? *_impl_.scenario_config_.learning_model_sample_config_
      : reinterpret_cast< ::apollo::planning::ScenarioLearningModelSampleConfig&>(::apollo::planning::_ScenarioLearningModelSampleConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioLearningModelSampleConfig& ScenarioConfig::learning_model_sample_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.learning_model_sample_config)
  return _internal_learning_model_sample_config();
}
inline ::apollo::planning::ScenarioLearningModelSampleConfig* ScenarioConfig::unsafe_arena_release_learning_model_sample_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.learning_model_sample_config)
  if (_internal_has_learning_model_sample_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioLearningModelSampleConfig* temp = _impl_.scenario_config_.learning_model_sample_config_;
    _impl_.scenario_config_.learning_model_sample_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_learning_model_sample_config(::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config) {
  clear_scenario_config();
  if (learning_model_sample_config) {
    set_has_learning_model_sample_config();
    _impl_.scenario_config_.learning_model_sample_config_ = learning_model_sample_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.learning_model_sample_config)
}
inline ::apollo::planning::ScenarioLearningModelSampleConfig* ScenarioConfig::_internal_mutable_learning_model_sample_config() {
  if (!_internal_has_learning_model_sample_config()) {
    clear_scenario_config();
    set_has_learning_model_sample_config();
    _impl_.scenario_config_.learning_model_sample_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioLearningModelSampleConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.learning_model_sample_config_;
}
inline ::apollo::planning::ScenarioLearningModelSampleConfig* ScenarioConfig::mutable_learning_model_sample_config() {
  ::apollo::planning::ScenarioLearningModelSampleConfig* _msg = _internal_mutable_learning_model_sample_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.learning_model_sample_config)
  return _msg;
}

// .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
inline bool ScenarioConfig::_internal_has_narrow_street_u_turn_config() const {
  return scenario_config_case() == kNarrowStreetUTurnConfig;
}
inline bool ScenarioConfig::has_narrow_street_u_turn_config() const {
  return _internal_has_narrow_street_u_turn_config();
}
inline void ScenarioConfig::set_has_narrow_street_u_turn_config() {
  _impl_._oneof_case_[0] = kNarrowStreetUTurnConfig;
}
inline void ScenarioConfig::clear_narrow_street_u_turn_config() {
  if (_internal_has_narrow_street_u_turn_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.narrow_street_u_turn_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioNarrowStreetUTurnConfig* ScenarioConfig::release_narrow_street_u_turn_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
  if (_internal_has_narrow_street_u_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioNarrowStreetUTurnConfig* temp = _impl_.scenario_config_.narrow_street_u_turn_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.narrow_street_u_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& ScenarioConfig::_internal_narrow_street_u_turn_config() const {
  return _internal_has_narrow_street_u_turn_config()
      ? *_impl_.scenario_config_.narrow_street_u_turn_config_
      : reinterpret_cast< ::apollo::planning::ScenarioNarrowStreetUTurnConfig&>(::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioNarrowStreetUTurnConfig& ScenarioConfig::narrow_street_u_turn_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
  return _internal_narrow_street_u_turn_config();
}
inline ::apollo::planning::ScenarioNarrowStreetUTurnConfig* ScenarioConfig::unsafe_arena_release_narrow_street_u_turn_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
  if (_internal_has_narrow_street_u_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioNarrowStreetUTurnConfig* temp = _impl_.scenario_config_.narrow_street_u_turn_config_;
    _impl_.scenario_config_.narrow_street_u_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_narrow_street_u_turn_config(::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config) {
  clear_scenario_config();
  if (narrow_street_u_turn_config) {
    set_has_narrow_street_u_turn_config();
    _impl_.scenario_config_.narrow_street_u_turn_config_ = narrow_street_u_turn_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
}
inline ::apollo::planning::ScenarioNarrowStreetUTurnConfig* ScenarioConfig::_internal_mutable_narrow_street_u_turn_config() {
  if (!_internal_has_narrow_street_u_turn_config()) {
    clear_scenario_config();
    set_has_narrow_street_u_turn_config();
    _impl_.scenario_config_.narrow_street_u_turn_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.narrow_street_u_turn_config_;
}
inline ::apollo::planning::ScenarioNarrowStreetUTurnConfig* ScenarioConfig::mutable_narrow_street_u_turn_config() {
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig* _msg = _internal_mutable_narrow_street_u_turn_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
  return _msg;
}

// .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
inline bool ScenarioConfig::_internal_has_park_and_go_config() const {
  return scenario_config_case() == kParkAndGoConfig;
}
inline bool ScenarioConfig::has_park_and_go_config() const {
  return _internal_has_park_and_go_config();
}
inline void ScenarioConfig::set_has_park_and_go_config() {
  _impl_._oneof_case_[0] = kParkAndGoConfig;
}
inline void ScenarioConfig::clear_park_and_go_config() {
  if (_internal_has_park_and_go_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.park_and_go_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioParkAndGoConfig* ScenarioConfig::release_park_and_go_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.park_and_go_config)
  if (_internal_has_park_and_go_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioParkAndGoConfig* temp = _impl_.scenario_config_.park_and_go_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.park_and_go_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioParkAndGoConfig& ScenarioConfig::_internal_park_and_go_config() const {
  return _internal_has_park_and_go_config()
      ? *_impl_.scenario_config_.park_and_go_config_
      : reinterpret_cast< ::apollo::planning::ScenarioParkAndGoConfig&>(::apollo::planning::_ScenarioParkAndGoConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioParkAndGoConfig& ScenarioConfig::park_and_go_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.park_and_go_config)
  return _internal_park_and_go_config();
}
inline ::apollo::planning::ScenarioParkAndGoConfig* ScenarioConfig::unsafe_arena_release_park_and_go_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.park_and_go_config)
  if (_internal_has_park_and_go_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioParkAndGoConfig* temp = _impl_.scenario_config_.park_and_go_config_;
    _impl_.scenario_config_.park_and_go_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_park_and_go_config(::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config) {
  clear_scenario_config();
  if (park_and_go_config) {
    set_has_park_and_go_config();
    _impl_.scenario_config_.park_and_go_config_ = park_and_go_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.park_and_go_config)
}
inline ::apollo::planning::ScenarioParkAndGoConfig* ScenarioConfig::_internal_mutable_park_and_go_config() {
  if (!_internal_has_park_and_go_config()) {
    clear_scenario_config();
    set_has_park_and_go_config();
    _impl_.scenario_config_.park_and_go_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioParkAndGoConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.park_and_go_config_;
}
inline ::apollo::planning::ScenarioParkAndGoConfig* ScenarioConfig::mutable_park_and_go_config() {
  ::apollo::planning::ScenarioParkAndGoConfig* _msg = _internal_mutable_park_and_go_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.park_and_go_config)
  return _msg;
}

// .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
inline bool ScenarioConfig::_internal_has_pull_over_config() const {
  return scenario_config_case() == kPullOverConfig;
}
inline bool ScenarioConfig::has_pull_over_config() const {
  return _internal_has_pull_over_config();
}
inline void ScenarioConfig::set_has_pull_over_config() {
  _impl_._oneof_case_[0] = kPullOverConfig;
}
inline void ScenarioConfig::clear_pull_over_config() {
  if (_internal_has_pull_over_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.pull_over_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioPullOverConfig* ScenarioConfig::release_pull_over_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.pull_over_config)
  if (_internal_has_pull_over_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioPullOverConfig* temp = _impl_.scenario_config_.pull_over_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.pull_over_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioPullOverConfig& ScenarioConfig::_internal_pull_over_config() const {
  return _internal_has_pull_over_config()
      ? *_impl_.scenario_config_.pull_over_config_
      : reinterpret_cast< ::apollo::planning::ScenarioPullOverConfig&>(::apollo::planning::_ScenarioPullOverConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioPullOverConfig& ScenarioConfig::pull_over_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.pull_over_config)
  return _internal_pull_over_config();
}
inline ::apollo::planning::ScenarioPullOverConfig* ScenarioConfig::unsafe_arena_release_pull_over_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.pull_over_config)
  if (_internal_has_pull_over_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioPullOverConfig* temp = _impl_.scenario_config_.pull_over_config_;
    _impl_.scenario_config_.pull_over_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_pull_over_config(::apollo::planning::ScenarioPullOverConfig* pull_over_config) {
  clear_scenario_config();
  if (pull_over_config) {
    set_has_pull_over_config();
    _impl_.scenario_config_.pull_over_config_ = pull_over_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.pull_over_config)
}
inline ::apollo::planning::ScenarioPullOverConfig* ScenarioConfig::_internal_mutable_pull_over_config() {
  if (!_internal_has_pull_over_config()) {
    clear_scenario_config();
    set_has_pull_over_config();
    _impl_.scenario_config_.pull_over_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioPullOverConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.pull_over_config_;
}
inline ::apollo::planning::ScenarioPullOverConfig* ScenarioConfig::mutable_pull_over_config() {
  ::apollo::planning::ScenarioPullOverConfig* _msg = _internal_mutable_pull_over_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.pull_over_config)
  return _msg;
}

// .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
inline bool ScenarioConfig::_internal_has_stop_sign_unprotected_config() const {
  return scenario_config_case() == kStopSignUnprotectedConfig;
}
inline bool ScenarioConfig::has_stop_sign_unprotected_config() const {
  return _internal_has_stop_sign_unprotected_config();
}
inline void ScenarioConfig::set_has_stop_sign_unprotected_config() {
  _impl_._oneof_case_[0] = kStopSignUnprotectedConfig;
}
inline void ScenarioConfig::clear_stop_sign_unprotected_config() {
  if (_internal_has_stop_sign_unprotected_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.stop_sign_unprotected_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioStopSignUnprotectedConfig* ScenarioConfig::release_stop_sign_unprotected_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
  if (_internal_has_stop_sign_unprotected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioStopSignUnprotectedConfig* temp = _impl_.scenario_config_.stop_sign_unprotected_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.stop_sign_unprotected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioStopSignUnprotectedConfig& ScenarioConfig::_internal_stop_sign_unprotected_config() const {
  return _internal_has_stop_sign_unprotected_config()
      ? *_impl_.scenario_config_.stop_sign_unprotected_config_
      : reinterpret_cast< ::apollo::planning::ScenarioStopSignUnprotectedConfig&>(::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioStopSignUnprotectedConfig& ScenarioConfig::stop_sign_unprotected_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
  return _internal_stop_sign_unprotected_config();
}
inline ::apollo::planning::ScenarioStopSignUnprotectedConfig* ScenarioConfig::unsafe_arena_release_stop_sign_unprotected_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
  if (_internal_has_stop_sign_unprotected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioStopSignUnprotectedConfig* temp = _impl_.scenario_config_.stop_sign_unprotected_config_;
    _impl_.scenario_config_.stop_sign_unprotected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_stop_sign_unprotected_config(::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config) {
  clear_scenario_config();
  if (stop_sign_unprotected_config) {
    set_has_stop_sign_unprotected_config();
    _impl_.scenario_config_.stop_sign_unprotected_config_ = stop_sign_unprotected_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
}
inline ::apollo::planning::ScenarioStopSignUnprotectedConfig* ScenarioConfig::_internal_mutable_stop_sign_unprotected_config() {
  if (!_internal_has_stop_sign_unprotected_config()) {
    clear_scenario_config();
    set_has_stop_sign_unprotected_config();
    _impl_.scenario_config_.stop_sign_unprotected_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.stop_sign_unprotected_config_;
}
inline ::apollo::planning::ScenarioStopSignUnprotectedConfig* ScenarioConfig::mutable_stop_sign_unprotected_config() {
  ::apollo::planning::ScenarioStopSignUnprotectedConfig* _msg = _internal_mutable_stop_sign_unprotected_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
  return _msg;
}

// .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
inline bool ScenarioConfig::_internal_has_traffic_light_protected_config() const {
  return scenario_config_case() == kTrafficLightProtectedConfig;
}
inline bool ScenarioConfig::has_traffic_light_protected_config() const {
  return _internal_has_traffic_light_protected_config();
}
inline void ScenarioConfig::set_has_traffic_light_protected_config() {
  _impl_._oneof_case_[0] = kTrafficLightProtectedConfig;
}
inline void ScenarioConfig::clear_traffic_light_protected_config() {
  if (_internal_has_traffic_light_protected_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.traffic_light_protected_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioTrafficLightProtectedConfig* ScenarioConfig::release_traffic_light_protected_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.traffic_light_protected_config)
  if (_internal_has_traffic_light_protected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightProtectedConfig* temp = _impl_.scenario_config_.traffic_light_protected_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.traffic_light_protected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioTrafficLightProtectedConfig& ScenarioConfig::_internal_traffic_light_protected_config() const {
  return _internal_has_traffic_light_protected_config()
      ? *_impl_.scenario_config_.traffic_light_protected_config_
      : reinterpret_cast< ::apollo::planning::ScenarioTrafficLightProtectedConfig&>(::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioTrafficLightProtectedConfig& ScenarioConfig::traffic_light_protected_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.traffic_light_protected_config)
  return _internal_traffic_light_protected_config();
}
inline ::apollo::planning::ScenarioTrafficLightProtectedConfig* ScenarioConfig::unsafe_arena_release_traffic_light_protected_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.traffic_light_protected_config)
  if (_internal_has_traffic_light_protected_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightProtectedConfig* temp = _impl_.scenario_config_.traffic_light_protected_config_;
    _impl_.scenario_config_.traffic_light_protected_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_traffic_light_protected_config(::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config) {
  clear_scenario_config();
  if (traffic_light_protected_config) {
    set_has_traffic_light_protected_config();
    _impl_.scenario_config_.traffic_light_protected_config_ = traffic_light_protected_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.traffic_light_protected_config)
}
inline ::apollo::planning::ScenarioTrafficLightProtectedConfig* ScenarioConfig::_internal_mutable_traffic_light_protected_config() {
  if (!_internal_has_traffic_light_protected_config()) {
    clear_scenario_config();
    set_has_traffic_light_protected_config();
    _impl_.scenario_config_.traffic_light_protected_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.traffic_light_protected_config_;
}
inline ::apollo::planning::ScenarioTrafficLightProtectedConfig* ScenarioConfig::mutable_traffic_light_protected_config() {
  ::apollo::planning::ScenarioTrafficLightProtectedConfig* _msg = _internal_mutable_traffic_light_protected_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.traffic_light_protected_config)
  return _msg;
}

// .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
inline bool ScenarioConfig::_internal_has_traffic_light_unprotected_left_turn_config() const {
  return scenario_config_case() == kTrafficLightUnprotectedLeftTurnConfig;
}
inline bool ScenarioConfig::has_traffic_light_unprotected_left_turn_config() const {
  return _internal_has_traffic_light_unprotected_left_turn_config();
}
inline void ScenarioConfig::set_has_traffic_light_unprotected_left_turn_config() {
  _impl_._oneof_case_[0] = kTrafficLightUnprotectedLeftTurnConfig;
}
inline void ScenarioConfig::clear_traffic_light_unprotected_left_turn_config() {
  if (_internal_has_traffic_light_unprotected_left_turn_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* ScenarioConfig::release_traffic_light_unprotected_left_turn_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
  if (_internal_has_traffic_light_unprotected_left_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* temp = _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& ScenarioConfig::_internal_traffic_light_unprotected_left_turn_config() const {
  return _internal_has_traffic_light_unprotected_left_turn_config()
      ? *_impl_.scenario_config_.traffic_light_unprotected_left_turn_config_
      : reinterpret_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig&>(::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig& ScenarioConfig::traffic_light_unprotected_left_turn_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
  return _internal_traffic_light_unprotected_left_turn_config();
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* ScenarioConfig::unsafe_arena_release_traffic_light_unprotected_left_turn_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
  if (_internal_has_traffic_light_unprotected_left_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* temp = _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
    _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_traffic_light_unprotected_left_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config) {
  clear_scenario_config();
  if (traffic_light_unprotected_left_turn_config) {
    set_has_traffic_light_unprotected_left_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_ = traffic_light_unprotected_left_turn_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* ScenarioConfig::_internal_mutable_traffic_light_unprotected_left_turn_config() {
  if (!_internal_has_traffic_light_unprotected_left_turn_config()) {
    clear_scenario_config();
    set_has_traffic_light_unprotected_left_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.traffic_light_unprotected_left_turn_config_;
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* ScenarioConfig::mutable_traffic_light_unprotected_left_turn_config() {
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* _msg = _internal_mutable_traffic_light_unprotected_left_turn_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
  return _msg;
}

// .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
inline bool ScenarioConfig::_internal_has_traffic_light_unprotected_right_turn_config() const {
  return scenario_config_case() == kTrafficLightUnprotectedRightTurnConfig;
}
inline bool ScenarioConfig::has_traffic_light_unprotected_right_turn_config() const {
  return _internal_has_traffic_light_unprotected_right_turn_config();
}
inline void ScenarioConfig::set_has_traffic_light_unprotected_right_turn_config() {
  _impl_._oneof_case_[0] = kTrafficLightUnprotectedRightTurnConfig;
}
inline void ScenarioConfig::clear_traffic_light_unprotected_right_turn_config() {
  if (_internal_has_traffic_light_unprotected_right_turn_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* ScenarioConfig::release_traffic_light_unprotected_right_turn_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
  if (_internal_has_traffic_light_unprotected_right_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* temp = _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& ScenarioConfig::_internal_traffic_light_unprotected_right_turn_config() const {
  return _internal_has_traffic_light_unprotected_right_turn_config()
      ? *_impl_.scenario_config_.traffic_light_unprotected_right_turn_config_
      : reinterpret_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig&>(::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig& ScenarioConfig::traffic_light_unprotected_right_turn_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
  return _internal_traffic_light_unprotected_right_turn_config();
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* ScenarioConfig::unsafe_arena_release_traffic_light_unprotected_right_turn_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
  if (_internal_has_traffic_light_unprotected_right_turn_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* temp = _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
    _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_traffic_light_unprotected_right_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config) {
  clear_scenario_config();
  if (traffic_light_unprotected_right_turn_config) {
    set_has_traffic_light_unprotected_right_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_ = traffic_light_unprotected_right_turn_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* ScenarioConfig::_internal_mutable_traffic_light_unprotected_right_turn_config() {
  if (!_internal_has_traffic_light_unprotected_right_turn_config()) {
    clear_scenario_config();
    set_has_traffic_light_unprotected_right_turn_config();
    _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.traffic_light_unprotected_right_turn_config_;
}
inline ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* ScenarioConfig::mutable_traffic_light_unprotected_right_turn_config() {
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* _msg = _internal_mutable_traffic_light_unprotected_right_turn_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
  return _msg;
}

// .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
inline bool ScenarioConfig::_internal_has_valet_parking_config() const {
  return scenario_config_case() == kValetParkingConfig;
}
inline bool ScenarioConfig::has_valet_parking_config() const {
  return _internal_has_valet_parking_config();
}
inline void ScenarioConfig::set_has_valet_parking_config() {
  _impl_._oneof_case_[0] = kValetParkingConfig;
}
inline void ScenarioConfig::clear_valet_parking_config() {
  if (_internal_has_valet_parking_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.valet_parking_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioValetParkingConfig* ScenarioConfig::release_valet_parking_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.valet_parking_config)
  if (_internal_has_valet_parking_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioValetParkingConfig* temp = _impl_.scenario_config_.valet_parking_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.valet_parking_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioValetParkingConfig& ScenarioConfig::_internal_valet_parking_config() const {
  return _internal_has_valet_parking_config()
      ? *_impl_.scenario_config_.valet_parking_config_
      : reinterpret_cast< ::apollo::planning::ScenarioValetParkingConfig&>(::apollo::planning::_ScenarioValetParkingConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioValetParkingConfig& ScenarioConfig::valet_parking_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.valet_parking_config)
  return _internal_valet_parking_config();
}
inline ::apollo::planning::ScenarioValetParkingConfig* ScenarioConfig::unsafe_arena_release_valet_parking_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.valet_parking_config)
  if (_internal_has_valet_parking_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioValetParkingConfig* temp = _impl_.scenario_config_.valet_parking_config_;
    _impl_.scenario_config_.valet_parking_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_valet_parking_config(::apollo::planning::ScenarioValetParkingConfig* valet_parking_config) {
  clear_scenario_config();
  if (valet_parking_config) {
    set_has_valet_parking_config();
    _impl_.scenario_config_.valet_parking_config_ = valet_parking_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.valet_parking_config)
}
inline ::apollo::planning::ScenarioValetParkingConfig* ScenarioConfig::_internal_mutable_valet_parking_config() {
  if (!_internal_has_valet_parking_config()) {
    clear_scenario_config();
    set_has_valet_parking_config();
    _impl_.scenario_config_.valet_parking_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioValetParkingConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.valet_parking_config_;
}
inline ::apollo::planning::ScenarioValetParkingConfig* ScenarioConfig::mutable_valet_parking_config() {
  ::apollo::planning::ScenarioValetParkingConfig* _msg = _internal_mutable_valet_parking_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.valet_parking_config)
  return _msg;
}

// .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
inline bool ScenarioConfig::_internal_has_yield_sign_config() const {
  return scenario_config_case() == kYieldSignConfig;
}
inline bool ScenarioConfig::has_yield_sign_config() const {
  return _internal_has_yield_sign_config();
}
inline void ScenarioConfig::set_has_yield_sign_config() {
  _impl_._oneof_case_[0] = kYieldSignConfig;
}
inline void ScenarioConfig::clear_yield_sign_config() {
  if (_internal_has_yield_sign_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.yield_sign_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioYieldSignConfig* ScenarioConfig::release_yield_sign_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.yield_sign_config)
  if (_internal_has_yield_sign_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioYieldSignConfig* temp = _impl_.scenario_config_.yield_sign_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.yield_sign_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioYieldSignConfig& ScenarioConfig::_internal_yield_sign_config() const {
  return _internal_has_yield_sign_config()
      ? *_impl_.scenario_config_.yield_sign_config_
      : reinterpret_cast< ::apollo::planning::ScenarioYieldSignConfig&>(::apollo::planning::_ScenarioYieldSignConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioYieldSignConfig& ScenarioConfig::yield_sign_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.yield_sign_config)
  return _internal_yield_sign_config();
}
inline ::apollo::planning::ScenarioYieldSignConfig* ScenarioConfig::unsafe_arena_release_yield_sign_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.yield_sign_config)
  if (_internal_has_yield_sign_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioYieldSignConfig* temp = _impl_.scenario_config_.yield_sign_config_;
    _impl_.scenario_config_.yield_sign_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_yield_sign_config(::apollo::planning::ScenarioYieldSignConfig* yield_sign_config) {
  clear_scenario_config();
  if (yield_sign_config) {
    set_has_yield_sign_config();
    _impl_.scenario_config_.yield_sign_config_ = yield_sign_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.yield_sign_config)
}
inline ::apollo::planning::ScenarioYieldSignConfig* ScenarioConfig::_internal_mutable_yield_sign_config() {
  if (!_internal_has_yield_sign_config()) {
    clear_scenario_config();
    set_has_yield_sign_config();
    _impl_.scenario_config_.yield_sign_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioYieldSignConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.yield_sign_config_;
}
inline ::apollo::planning::ScenarioYieldSignConfig* ScenarioConfig::mutable_yield_sign_config() {
  ::apollo::planning::ScenarioYieldSignConfig* _msg = _internal_mutable_yield_sign_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.yield_sign_config)
  return _msg;
}

// .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
inline bool ScenarioConfig::_internal_has_deadend_turnaround_config() const {
  return scenario_config_case() == kDeadendTurnaroundConfig;
}
inline bool ScenarioConfig::has_deadend_turnaround_config() const {
  return _internal_has_deadend_turnaround_config();
}
inline void ScenarioConfig::set_has_deadend_turnaround_config() {
  _impl_._oneof_case_[0] = kDeadendTurnaroundConfig;
}
inline void ScenarioConfig::clear_deadend_turnaround_config() {
  if (_internal_has_deadend_turnaround_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.scenario_config_.deadend_turnaround_config_;
    }
    clear_has_scenario_config();
  }
}
inline ::apollo::planning::ScenarioDeadEndTurnAroundConfig* ScenarioConfig::release_deadend_turnaround_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.ScenarioConfig.deadend_turnaround_config)
  if (_internal_has_deadend_turnaround_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioDeadEndTurnAroundConfig* temp = _impl_.scenario_config_.deadend_turnaround_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.scenario_config_.deadend_turnaround_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::ScenarioDeadEndTurnAroundConfig& ScenarioConfig::_internal_deadend_turnaround_config() const {
  return _internal_has_deadend_turnaround_config()
      ? *_impl_.scenario_config_.deadend_turnaround_config_
      : reinterpret_cast< ::apollo::planning::ScenarioDeadEndTurnAroundConfig&>(::apollo::planning::_ScenarioDeadEndTurnAroundConfig_default_instance_);
}
inline const ::apollo::planning::ScenarioDeadEndTurnAroundConfig& ScenarioConfig::deadend_turnaround_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.deadend_turnaround_config)
  return _internal_deadend_turnaround_config();
}
inline ::apollo::planning::ScenarioDeadEndTurnAroundConfig* ScenarioConfig::unsafe_arena_release_deadend_turnaround_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.ScenarioConfig.deadend_turnaround_config)
  if (_internal_has_deadend_turnaround_config()) {
    clear_has_scenario_config();
    ::apollo::planning::ScenarioDeadEndTurnAroundConfig* temp = _impl_.scenario_config_.deadend_turnaround_config_;
    _impl_.scenario_config_.deadend_turnaround_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ScenarioConfig::unsafe_arena_set_allocated_deadend_turnaround_config(::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config) {
  clear_scenario_config();
  if (deadend_turnaround_config) {
    set_has_deadend_turnaround_config();
    _impl_.scenario_config_.deadend_turnaround_config_ = deadend_turnaround_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.ScenarioConfig.deadend_turnaround_config)
}
inline ::apollo::planning::ScenarioDeadEndTurnAroundConfig* ScenarioConfig::_internal_mutable_deadend_turnaround_config() {
  if (!_internal_has_deadend_turnaround_config()) {
    clear_scenario_config();
    set_has_deadend_turnaround_config();
    _impl_.scenario_config_.deadend_turnaround_config_ = CreateMaybeMessage< ::apollo::planning::ScenarioDeadEndTurnAroundConfig >(GetArenaForAllocation());
  }
  return _impl_.scenario_config_.deadend_turnaround_config_;
}
inline ::apollo::planning::ScenarioDeadEndTurnAroundConfig* ScenarioConfig::mutable_deadend_turnaround_config() {
  ::apollo::planning::ScenarioDeadEndTurnAroundConfig* _msg = _internal_mutable_deadend_turnaround_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.deadend_turnaround_config)
  return _msg;
}

// repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
inline int ScenarioConfig::_internal_stage_type_size() const {
  return _impl_.stage_type_.size();
}
inline int ScenarioConfig::stage_type_size() const {
  return _internal_stage_type_size();
}
inline void ScenarioConfig::clear_stage_type() {
  _impl_.stage_type_.Clear();
}
inline ::apollo::planning::ScenarioConfig_StageType ScenarioConfig::_internal_stage_type(int index) const {
  return static_cast< ::apollo::planning::ScenarioConfig_StageType >(_impl_.stage_type_.Get(index));
}
inline ::apollo::planning::ScenarioConfig_StageType ScenarioConfig::stage_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.stage_type)
  return _internal_stage_type(index);
}
inline void ScenarioConfig::set_stage_type(int index, ::apollo::planning::ScenarioConfig_StageType value) {
  assert(::apollo::planning::ScenarioConfig_StageType_IsValid(value));
  _impl_.stage_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.ScenarioConfig.stage_type)
}
inline void ScenarioConfig::_internal_add_stage_type(::apollo::planning::ScenarioConfig_StageType value) {
  assert(::apollo::planning::ScenarioConfig_StageType_IsValid(value));
  _impl_.stage_type_.Add(value);
}
inline void ScenarioConfig::add_stage_type(::apollo::planning::ScenarioConfig_StageType value) {
  _internal_add_stage_type(value);
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.stage_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ScenarioConfig::stage_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.stage_type)
  return _impl_.stage_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScenarioConfig::_internal_mutable_stage_type() {
  return &_impl_.stage_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ScenarioConfig::mutable_stage_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.stage_type)
  return _internal_mutable_stage_type();
}

// repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
inline int ScenarioConfig::_internal_stage_config_size() const {
  return _impl_.stage_config_.size();
}
inline int ScenarioConfig::stage_config_size() const {
  return _internal_stage_config_size();
}
inline void ScenarioConfig::clear_stage_config() {
  _impl_.stage_config_.Clear();
}
inline ::apollo::planning::ScenarioConfig_StageConfig* ScenarioConfig::mutable_stage_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.ScenarioConfig.stage_config)
  return _impl_.stage_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ScenarioConfig_StageConfig >*
ScenarioConfig::mutable_stage_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.ScenarioConfig.stage_config)
  return &_impl_.stage_config_;
}
inline const ::apollo::planning::ScenarioConfig_StageConfig& ScenarioConfig::_internal_stage_config(int index) const {
  return _impl_.stage_config_.Get(index);
}
inline const ::apollo::planning::ScenarioConfig_StageConfig& ScenarioConfig::stage_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.ScenarioConfig.stage_config)
  return _internal_stage_config(index);
}
inline ::apollo::planning::ScenarioConfig_StageConfig* ScenarioConfig::_internal_add_stage_config() {
  return _impl_.stage_config_.Add();
}
inline ::apollo::planning::ScenarioConfig_StageConfig* ScenarioConfig::add_stage_config() {
  ::apollo::planning::ScenarioConfig_StageConfig* _add = _internal_add_stage_config();
  // @@protoc_insertion_point(field_add:apollo.planning.ScenarioConfig.stage_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::ScenarioConfig_StageConfig >&
ScenarioConfig::stage_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.ScenarioConfig.stage_config)
  return _impl_.stage_config_;
}

inline bool ScenarioConfig::has_scenario_config() const {
  return scenario_config_case() != SCENARIO_CONFIG_NOT_SET;
}
inline void ScenarioConfig::clear_has_scenario_config() {
  _impl_._oneof_case_[0] = SCENARIO_CONFIG_NOT_SET;
}
inline ScenarioConfig::ScenarioConfigCase ScenarioConfig::scenario_config_case() const {
  return ScenarioConfig::ScenarioConfigCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlannerPublicRoadConfig

// -------------------------------------------------------------------

// PlannerNaviConfig

// repeated .apollo.planning.TaskConfig.TaskType task = 1;
inline int PlannerNaviConfig::_internal_task_size() const {
  return _impl_.task_.size();
}
inline int PlannerNaviConfig::task_size() const {
  return _internal_task_size();
}
inline void PlannerNaviConfig::clear_task() {
  _impl_.task_.Clear();
}
inline ::apollo::planning::TaskConfig_TaskType PlannerNaviConfig::_internal_task(int index) const {
  return static_cast< ::apollo::planning::TaskConfig_TaskType >(_impl_.task_.Get(index));
}
inline ::apollo::planning::TaskConfig_TaskType PlannerNaviConfig::task(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.task)
  return _internal_task(index);
}
inline void PlannerNaviConfig::set_task(int index, ::apollo::planning::TaskConfig_TaskType value) {
  assert(::apollo::planning::TaskConfig_TaskType_IsValid(value));
  _impl_.task_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlannerNaviConfig.task)
}
inline void PlannerNaviConfig::_internal_add_task(::apollo::planning::TaskConfig_TaskType value) {
  assert(::apollo::planning::TaskConfig_TaskType_IsValid(value));
  _impl_.task_.Add(value);
}
inline void PlannerNaviConfig::add_task(::apollo::planning::TaskConfig_TaskType value) {
  _internal_add_task(value);
  // @@protoc_insertion_point(field_add:apollo.planning.PlannerNaviConfig.task)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PlannerNaviConfig::task() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlannerNaviConfig.task)
  return _impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PlannerNaviConfig::_internal_mutable_task() {
  return &_impl_.task_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PlannerNaviConfig::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlannerNaviConfig.task)
  return _internal_mutable_task();
}

// optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
inline bool PlannerNaviConfig::_internal_has_navi_path_decider_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_path_decider_config_ != nullptr);
  return value;
}
inline bool PlannerNaviConfig::has_navi_path_decider_config() const {
  return _internal_has_navi_path_decider_config();
}
inline const ::apollo::planning::NaviPathDeciderConfig& PlannerNaviConfig::_internal_navi_path_decider_config() const {
  const ::apollo::planning::NaviPathDeciderConfig* p = _impl_.navi_path_decider_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviPathDeciderConfig&>(
      ::apollo::planning::_NaviPathDeciderConfig_default_instance_);
}
inline const ::apollo::planning::NaviPathDeciderConfig& PlannerNaviConfig::navi_path_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return _internal_navi_path_decider_config();
}
inline void PlannerNaviConfig::unsafe_arena_set_allocated_navi_path_decider_config(
    ::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_path_decider_config_);
  }
  _impl_.navi_path_decider_config_ = navi_path_decider_config;
  if (navi_path_decider_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::release_navi_path_decider_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::NaviPathDeciderConfig* temp = _impl_.navi_path_decider_config_;
  _impl_.navi_path_decider_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::unsafe_arena_release_navi_path_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::NaviPathDeciderConfig* temp = _impl_.navi_path_decider_config_;
  _impl_.navi_path_decider_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::_internal_mutable_navi_path_decider_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.navi_path_decider_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviPathDeciderConfig>(GetArenaForAllocation());
    _impl_.navi_path_decider_config_ = p;
  }
  return _impl_.navi_path_decider_config_;
}
inline ::apollo::planning::NaviPathDeciderConfig* PlannerNaviConfig::mutable_navi_path_decider_config() {
  ::apollo::planning::NaviPathDeciderConfig* _msg = _internal_mutable_navi_path_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
  return _msg;
}
inline void PlannerNaviConfig::set_allocated_navi_path_decider_config(::apollo::planning::NaviPathDeciderConfig* navi_path_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_path_decider_config_);
  }
  if (navi_path_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navi_path_decider_config));
    if (message_arena != submessage_arena) {
      navi_path_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_path_decider_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.navi_path_decider_config_ = navi_path_decider_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_path_decider_config)
}

// optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
inline bool PlannerNaviConfig::_internal_has_navi_speed_decider_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_speed_decider_config_ != nullptr);
  return value;
}
inline bool PlannerNaviConfig::has_navi_speed_decider_config() const {
  return _internal_has_navi_speed_decider_config();
}
inline const ::apollo::planning::NaviSpeedDeciderConfig& PlannerNaviConfig::_internal_navi_speed_decider_config() const {
  const ::apollo::planning::NaviSpeedDeciderConfig* p = _impl_.navi_speed_decider_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviSpeedDeciderConfig&>(
      ::apollo::planning::_NaviSpeedDeciderConfig_default_instance_);
}
inline const ::apollo::planning::NaviSpeedDeciderConfig& PlannerNaviConfig::navi_speed_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return _internal_navi_speed_decider_config();
}
inline void PlannerNaviConfig::unsafe_arena_set_allocated_navi_speed_decider_config(
    ::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_speed_decider_config_);
  }
  _impl_.navi_speed_decider_config_ = navi_speed_decider_config;
  if (navi_speed_decider_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::release_navi_speed_decider_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviSpeedDeciderConfig* temp = _impl_.navi_speed_decider_config_;
  _impl_.navi_speed_decider_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::unsafe_arena_release_navi_speed_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::NaviSpeedDeciderConfig* temp = _impl_.navi_speed_decider_config_;
  _impl_.navi_speed_decider_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::_internal_mutable_navi_speed_decider_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.navi_speed_decider_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviSpeedDeciderConfig>(GetArenaForAllocation());
    _impl_.navi_speed_decider_config_ = p;
  }
  return _impl_.navi_speed_decider_config_;
}
inline ::apollo::planning::NaviSpeedDeciderConfig* PlannerNaviConfig::mutable_navi_speed_decider_config() {
  ::apollo::planning::NaviSpeedDeciderConfig* _msg = _internal_mutable_navi_speed_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
  return _msg;
}
inline void PlannerNaviConfig::set_allocated_navi_speed_decider_config(::apollo::planning::NaviSpeedDeciderConfig* navi_speed_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_speed_decider_config_);
  }
  if (navi_speed_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navi_speed_decider_config));
    if (message_arena != submessage_arena) {
      navi_speed_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_speed_decider_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.navi_speed_decider_config_ = navi_speed_decider_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_speed_decider_config)
}

// optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
inline bool PlannerNaviConfig::_internal_has_navi_obstacle_decider_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navi_obstacle_decider_config_ != nullptr);
  return value;
}
inline bool PlannerNaviConfig::has_navi_obstacle_decider_config() const {
  return _internal_has_navi_obstacle_decider_config();
}
inline const ::apollo::planning::NaviObstacleDeciderConfig& PlannerNaviConfig::_internal_navi_obstacle_decider_config() const {
  const ::apollo::planning::NaviObstacleDeciderConfig* p = _impl_.navi_obstacle_decider_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::NaviObstacleDeciderConfig&>(
      ::apollo::planning::_NaviObstacleDeciderConfig_default_instance_);
}
inline const ::apollo::planning::NaviObstacleDeciderConfig& PlannerNaviConfig::navi_obstacle_decider_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return _internal_navi_obstacle_decider_config();
}
inline void PlannerNaviConfig::unsafe_arena_set_allocated_navi_obstacle_decider_config(
    ::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_obstacle_decider_config_);
  }
  _impl_.navi_obstacle_decider_config_ = navi_obstacle_decider_config;
  if (navi_obstacle_decider_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::release_navi_obstacle_decider_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::NaviObstacleDeciderConfig* temp = _impl_.navi_obstacle_decider_config_;
  _impl_.navi_obstacle_decider_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::unsafe_arena_release_navi_obstacle_decider_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::apollo::planning::NaviObstacleDeciderConfig* temp = _impl_.navi_obstacle_decider_config_;
  _impl_.navi_obstacle_decider_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::_internal_mutable_navi_obstacle_decider_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.navi_obstacle_decider_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::NaviObstacleDeciderConfig>(GetArenaForAllocation());
    _impl_.navi_obstacle_decider_config_ = p;
  }
  return _impl_.navi_obstacle_decider_config_;
}
inline ::apollo::planning::NaviObstacleDeciderConfig* PlannerNaviConfig::mutable_navi_obstacle_decider_config() {
  ::apollo::planning::NaviObstacleDeciderConfig* _msg = _internal_mutable_navi_obstacle_decider_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
  return _msg;
}
inline void PlannerNaviConfig::set_allocated_navi_obstacle_decider_config(::apollo::planning::NaviObstacleDeciderConfig* navi_obstacle_decider_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navi_obstacle_decider_config_);
  }
  if (navi_obstacle_decider_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(navi_obstacle_decider_config));
    if (message_arena != submessage_arena) {
      navi_obstacle_decider_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navi_obstacle_decider_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.navi_obstacle_decider_config_ = navi_obstacle_decider_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlannerNaviConfig.navi_obstacle_decider_config)
}

// -------------------------------------------------------------------

// RtkPlanningConfig

// optional .apollo.planning.PlannerType planner_type = 1;
inline bool RtkPlanningConfig::_internal_has_planner_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RtkPlanningConfig::has_planner_type() const {
  return _internal_has_planner_type();
}
inline void RtkPlanningConfig::clear_planner_type() {
  _impl_.planner_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::planning::PlannerType RtkPlanningConfig::_internal_planner_type() const {
  return static_cast< ::apollo::planning::PlannerType >(_impl_.planner_type_);
}
inline ::apollo::planning::PlannerType RtkPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.RtkPlanningConfig.planner_type)
  return _internal_planner_type();
}
inline void RtkPlanningConfig::_internal_set_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.planner_type_ = value;
}
inline void RtkPlanningConfig::set_planner_type(::apollo::planning::PlannerType value) {
  _internal_set_planner_type(value);
  // @@protoc_insertion_point(field_set:apollo.planning.RtkPlanningConfig.planner_type)
}

// -------------------------------------------------------------------

// StandardPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
inline int StandardPlanningConfig::_internal_planner_type_size() const {
  return _impl_.planner_type_.size();
}
inline int StandardPlanningConfig::planner_type_size() const {
  return _internal_planner_type_size();
}
inline void StandardPlanningConfig::clear_planner_type() {
  _impl_.planner_type_.Clear();
}
inline ::apollo::planning::PlannerType StandardPlanningConfig::_internal_planner_type(int index) const {
  return static_cast< ::apollo::planning::PlannerType >(_impl_.planner_type_.Get(index));
}
inline ::apollo::planning::PlannerType StandardPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_type)
  return _internal_planner_type(index);
}
inline void StandardPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  _impl_.planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.StandardPlanningConfig.planner_type)
}
inline void StandardPlanningConfig::_internal_add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  _impl_.planner_type_.Add(value);
}
inline void StandardPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  _internal_add_planner_type(value);
  // @@protoc_insertion_point(field_add:apollo.planning.StandardPlanningConfig.planner_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
StandardPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.StandardPlanningConfig.planner_type)
  return _impl_.planner_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StandardPlanningConfig::_internal_mutable_planner_type() {
  return &_impl_.planner_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StandardPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.StandardPlanningConfig.planner_type)
  return _internal_mutable_planner_type();
}

// optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
inline bool StandardPlanningConfig::_internal_has_planner_public_road_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.planner_public_road_config_ != nullptr);
  return value;
}
inline bool StandardPlanningConfig::has_planner_public_road_config() const {
  return _internal_has_planner_public_road_config();
}
inline void StandardPlanningConfig::clear_planner_public_road_config() {
  if (_impl_.planner_public_road_config_ != nullptr) _impl_.planner_public_road_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PlannerPublicRoadConfig& StandardPlanningConfig::_internal_planner_public_road_config() const {
  const ::apollo::planning::PlannerPublicRoadConfig* p = _impl_.planner_public_road_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PlannerPublicRoadConfig&>(
      ::apollo::planning::_PlannerPublicRoadConfig_default_instance_);
}
inline const ::apollo::planning::PlannerPublicRoadConfig& StandardPlanningConfig::planner_public_road_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.StandardPlanningConfig.planner_public_road_config)
  return _internal_planner_public_road_config();
}
inline void StandardPlanningConfig::unsafe_arena_set_allocated_planner_public_road_config(
    ::apollo::planning::PlannerPublicRoadConfig* planner_public_road_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.planner_public_road_config_);
  }
  _impl_.planner_public_road_config_ = planner_public_road_config;
  if (planner_public_road_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.StandardPlanningConfig.planner_public_road_config)
}
inline ::apollo::planning::PlannerPublicRoadConfig* StandardPlanningConfig::release_planner_public_road_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PlannerPublicRoadConfig* temp = _impl_.planner_public_road_config_;
  _impl_.planner_public_road_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PlannerPublicRoadConfig* StandardPlanningConfig::unsafe_arena_release_planner_public_road_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.StandardPlanningConfig.planner_public_road_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PlannerPublicRoadConfig* temp = _impl_.planner_public_road_config_;
  _impl_.planner_public_road_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PlannerPublicRoadConfig* StandardPlanningConfig::_internal_mutable_planner_public_road_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.planner_public_road_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PlannerPublicRoadConfig>(GetArenaForAllocation());
    _impl_.planner_public_road_config_ = p;
  }
  return _impl_.planner_public_road_config_;
}
inline ::apollo::planning::PlannerPublicRoadConfig* StandardPlanningConfig::mutable_planner_public_road_config() {
  ::apollo::planning::PlannerPublicRoadConfig* _msg = _internal_mutable_planner_public_road_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.StandardPlanningConfig.planner_public_road_config)
  return _msg;
}
inline void StandardPlanningConfig::set_allocated_planner_public_road_config(::apollo::planning::PlannerPublicRoadConfig* planner_public_road_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.planner_public_road_config_;
  }
  if (planner_public_road_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(planner_public_road_config);
    if (message_arena != submessage_arena) {
      planner_public_road_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planner_public_road_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.planner_public_road_config_ = planner_public_road_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.StandardPlanningConfig.planner_public_road_config)
}

// -------------------------------------------------------------------

// NavigationPlanningConfig

// repeated .apollo.planning.PlannerType planner_type = 1;
inline int NavigationPlanningConfig::_internal_planner_type_size() const {
  return _impl_.planner_type_.size();
}
inline int NavigationPlanningConfig::planner_type_size() const {
  return _internal_planner_type_size();
}
inline void NavigationPlanningConfig::clear_planner_type() {
  _impl_.planner_type_.Clear();
}
inline ::apollo::planning::PlannerType NavigationPlanningConfig::_internal_planner_type(int index) const {
  return static_cast< ::apollo::planning::PlannerType >(_impl_.planner_type_.Get(index));
}
inline ::apollo::planning::PlannerType NavigationPlanningConfig::planner_type(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_type)
  return _internal_planner_type(index);
}
inline void NavigationPlanningConfig::set_planner_type(int index, ::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  _impl_.planner_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.NavigationPlanningConfig.planner_type)
}
inline void NavigationPlanningConfig::_internal_add_planner_type(::apollo::planning::PlannerType value) {
  assert(::apollo::planning::PlannerType_IsValid(value));
  _impl_.planner_type_.Add(value);
}
inline void NavigationPlanningConfig::add_planner_type(::apollo::planning::PlannerType value) {
  _internal_add_planner_type(value);
  // @@protoc_insertion_point(field_add:apollo.planning.NavigationPlanningConfig.planner_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
NavigationPlanningConfig::planner_type() const {
  // @@protoc_insertion_point(field_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return _impl_.planner_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NavigationPlanningConfig::_internal_mutable_planner_type() {
  return &_impl_.planner_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NavigationPlanningConfig::mutable_planner_type() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.NavigationPlanningConfig.planner_type)
  return _internal_mutable_planner_type();
}

// optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
inline bool NavigationPlanningConfig::_internal_has_planner_navi_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.planner_navi_config_ != nullptr);
  return value;
}
inline bool NavigationPlanningConfig::has_planner_navi_config() const {
  return _internal_has_planner_navi_config();
}
inline void NavigationPlanningConfig::clear_planner_navi_config() {
  if (_impl_.planner_navi_config_ != nullptr) _impl_.planner_navi_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::PlannerNaviConfig& NavigationPlanningConfig::_internal_planner_navi_config() const {
  const ::apollo::planning::PlannerNaviConfig* p = _impl_.planner_navi_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::PlannerNaviConfig&>(
      ::apollo::planning::_PlannerNaviConfig_default_instance_);
}
inline const ::apollo::planning::PlannerNaviConfig& NavigationPlanningConfig::planner_navi_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return _internal_planner_navi_config();
}
inline void NavigationPlanningConfig::unsafe_arena_set_allocated_planner_navi_config(
    ::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.planner_navi_config_);
  }
  _impl_.planner_navi_config_ = planner_navi_config;
  if (planner_navi_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.NavigationPlanningConfig.planner_navi_config)
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::release_planner_navi_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PlannerNaviConfig* temp = _impl_.planner_navi_config_;
  _impl_.planner_navi_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::unsafe_arena_release_planner_navi_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::PlannerNaviConfig* temp = _impl_.planner_navi_config_;
  _impl_.planner_navi_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::_internal_mutable_planner_navi_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.planner_navi_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::PlannerNaviConfig>(GetArenaForAllocation());
    _impl_.planner_navi_config_ = p;
  }
  return _impl_.planner_navi_config_;
}
inline ::apollo::planning::PlannerNaviConfig* NavigationPlanningConfig::mutable_planner_navi_config() {
  ::apollo::planning::PlannerNaviConfig* _msg = _internal_mutable_planner_navi_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.NavigationPlanningConfig.planner_navi_config)
  return _msg;
}
inline void NavigationPlanningConfig::set_allocated_planner_navi_config(::apollo::planning::PlannerNaviConfig* planner_navi_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.planner_navi_config_;
  }
  if (planner_navi_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(planner_navi_config);
    if (message_arena != submessage_arena) {
      planner_navi_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planner_navi_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.planner_navi_config_ = planner_navi_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.NavigationPlanningConfig.planner_navi_config)
}

// -------------------------------------------------------------------

// TopicConfig

// optional string chassis_topic = 1;
inline bool TopicConfig::_internal_has_chassis_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TopicConfig::has_chassis_topic() const {
  return _internal_has_chassis_topic();
}
inline void TopicConfig::clear_chassis_topic() {
  _impl_.chassis_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TopicConfig::chassis_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.chassis_topic)
  return _internal_chassis_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_chassis_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chassis_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.chassis_topic)
}
inline std::string* TopicConfig::mutable_chassis_topic() {
  std::string* _s = _internal_mutable_chassis_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.chassis_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_chassis_topic() const {
  return _impl_.chassis_topic_.Get();
}
inline void TopicConfig::_internal_set_chassis_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chassis_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_chassis_topic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chassis_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_chassis_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.chassis_topic)
  if (!_internal_has_chassis_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chassis_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chassis_topic_.IsDefault()) {
    _impl_.chassis_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_chassis_topic(std::string* chassis_topic) {
  if (chassis_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chassis_topic_.SetAllocated(chassis_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chassis_topic_.IsDefault()) {
    _impl_.chassis_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.chassis_topic)
}

// optional string hmi_status_topic = 2;
inline bool TopicConfig::_internal_has_hmi_status_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TopicConfig::has_hmi_status_topic() const {
  return _internal_has_hmi_status_topic();
}
inline void TopicConfig::clear_hmi_status_topic() {
  _impl_.hmi_status_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TopicConfig::hmi_status_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.hmi_status_topic)
  return _internal_hmi_status_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_hmi_status_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.hmi_status_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.hmi_status_topic)
}
inline std::string* TopicConfig::mutable_hmi_status_topic() {
  std::string* _s = _internal_mutable_hmi_status_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.hmi_status_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_hmi_status_topic() const {
  return _impl_.hmi_status_topic_.Get();
}
inline void TopicConfig::_internal_set_hmi_status_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hmi_status_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_hmi_status_topic() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hmi_status_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_hmi_status_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.hmi_status_topic)
  if (!_internal_has_hmi_status_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.hmi_status_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hmi_status_topic_.IsDefault()) {
    _impl_.hmi_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_hmi_status_topic(std::string* hmi_status_topic) {
  if (hmi_status_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hmi_status_topic_.SetAllocated(hmi_status_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hmi_status_topic_.IsDefault()) {
    _impl_.hmi_status_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.hmi_status_topic)
}

// optional string localization_topic = 3;
inline bool TopicConfig::_internal_has_localization_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TopicConfig::has_localization_topic() const {
  return _internal_has_localization_topic();
}
inline void TopicConfig::clear_localization_topic() {
  _impl_.localization_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TopicConfig::localization_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.localization_topic)
  return _internal_localization_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_localization_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.localization_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.localization_topic)
}
inline std::string* TopicConfig::mutable_localization_topic() {
  std::string* _s = _internal_mutable_localization_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.localization_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_localization_topic() const {
  return _impl_.localization_topic_.Get();
}
inline void TopicConfig::_internal_set_localization_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.localization_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_localization_topic() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.localization_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_localization_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.localization_topic)
  if (!_internal_has_localization_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.localization_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_localization_topic(std::string* localization_topic) {
  if (localization_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.localization_topic_.SetAllocated(localization_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.localization_topic_.IsDefault()) {
    _impl_.localization_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.localization_topic)
}

// optional string planning_pad_topic = 4;
inline bool TopicConfig::_internal_has_planning_pad_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TopicConfig::has_planning_pad_topic() const {
  return _internal_has_planning_pad_topic();
}
inline void TopicConfig::clear_planning_pad_topic() {
  _impl_.planning_pad_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TopicConfig::planning_pad_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.planning_pad_topic)
  return _internal_planning_pad_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_planning_pad_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.planning_pad_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.planning_pad_topic)
}
inline std::string* TopicConfig::mutable_planning_pad_topic() {
  std::string* _s = _internal_mutable_planning_pad_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.planning_pad_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_planning_pad_topic() const {
  return _impl_.planning_pad_topic_.Get();
}
inline void TopicConfig::_internal_set_planning_pad_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.planning_pad_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_planning_pad_topic() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.planning_pad_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_planning_pad_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.planning_pad_topic)
  if (!_internal_has_planning_pad_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.planning_pad_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_pad_topic_.IsDefault()) {
    _impl_.planning_pad_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_planning_pad_topic(std::string* planning_pad_topic) {
  if (planning_pad_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.planning_pad_topic_.SetAllocated(planning_pad_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_pad_topic_.IsDefault()) {
    _impl_.planning_pad_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.planning_pad_topic)
}

// optional string planning_trajectory_topic = 5;
inline bool TopicConfig::_internal_has_planning_trajectory_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TopicConfig::has_planning_trajectory_topic() const {
  return _internal_has_planning_trajectory_topic();
}
inline void TopicConfig::clear_planning_trajectory_topic() {
  _impl_.planning_trajectory_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TopicConfig::planning_trajectory_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.planning_trajectory_topic)
  return _internal_planning_trajectory_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_planning_trajectory_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.planning_trajectory_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.planning_trajectory_topic)
}
inline std::string* TopicConfig::mutable_planning_trajectory_topic() {
  std::string* _s = _internal_mutable_planning_trajectory_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.planning_trajectory_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_planning_trajectory_topic() const {
  return _impl_.planning_trajectory_topic_.Get();
}
inline void TopicConfig::_internal_set_planning_trajectory_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.planning_trajectory_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_planning_trajectory_topic() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.planning_trajectory_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_planning_trajectory_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.planning_trajectory_topic)
  if (!_internal_has_planning_trajectory_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.planning_trajectory_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_trajectory_topic_.IsDefault()) {
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_planning_trajectory_topic(std::string* planning_trajectory_topic) {
  if (planning_trajectory_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.planning_trajectory_topic_.SetAllocated(planning_trajectory_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_trajectory_topic_.IsDefault()) {
    _impl_.planning_trajectory_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.planning_trajectory_topic)
}

// optional string prediction_topic = 6;
inline bool TopicConfig::_internal_has_prediction_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TopicConfig::has_prediction_topic() const {
  return _internal_has_prediction_topic();
}
inline void TopicConfig::clear_prediction_topic() {
  _impl_.prediction_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TopicConfig::prediction_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.prediction_topic)
  return _internal_prediction_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_prediction_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.prediction_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.prediction_topic)
}
inline std::string* TopicConfig::mutable_prediction_topic() {
  std::string* _s = _internal_mutable_prediction_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.prediction_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_prediction_topic() const {
  return _impl_.prediction_topic_.Get();
}
inline void TopicConfig::_internal_set_prediction_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.prediction_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_prediction_topic() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.prediction_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_prediction_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.prediction_topic)
  if (!_internal_has_prediction_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.prediction_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prediction_topic_.IsDefault()) {
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_prediction_topic(std::string* prediction_topic) {
  if (prediction_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.prediction_topic_.SetAllocated(prediction_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prediction_topic_.IsDefault()) {
    _impl_.prediction_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.prediction_topic)
}

// optional string relative_map_topic = 7;
inline bool TopicConfig::_internal_has_relative_map_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TopicConfig::has_relative_map_topic() const {
  return _internal_has_relative_map_topic();
}
inline void TopicConfig::clear_relative_map_topic() {
  _impl_.relative_map_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TopicConfig::relative_map_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.relative_map_topic)
  return _internal_relative_map_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_relative_map_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.relative_map_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.relative_map_topic)
}
inline std::string* TopicConfig::mutable_relative_map_topic() {
  std::string* _s = _internal_mutable_relative_map_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.relative_map_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_relative_map_topic() const {
  return _impl_.relative_map_topic_.Get();
}
inline void TopicConfig::_internal_set_relative_map_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.relative_map_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_relative_map_topic() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.relative_map_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_relative_map_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.relative_map_topic)
  if (!_internal_has_relative_map_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.relative_map_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relative_map_topic_.IsDefault()) {
    _impl_.relative_map_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_relative_map_topic(std::string* relative_map_topic) {
  if (relative_map_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.relative_map_topic_.SetAllocated(relative_map_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.relative_map_topic_.IsDefault()) {
    _impl_.relative_map_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.relative_map_topic)
}

// optional string routing_request_topic = 8;
inline bool TopicConfig::_internal_has_routing_request_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TopicConfig::has_routing_request_topic() const {
  return _internal_has_routing_request_topic();
}
inline void TopicConfig::clear_routing_request_topic() {
  _impl_.routing_request_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& TopicConfig::routing_request_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.routing_request_topic)
  return _internal_routing_request_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_routing_request_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.routing_request_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.routing_request_topic)
}
inline std::string* TopicConfig::mutable_routing_request_topic() {
  std::string* _s = _internal_mutable_routing_request_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.routing_request_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_routing_request_topic() const {
  return _impl_.routing_request_topic_.Get();
}
inline void TopicConfig::_internal_set_routing_request_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.routing_request_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_routing_request_topic() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.routing_request_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_routing_request_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.routing_request_topic)
  if (!_internal_has_routing_request_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.routing_request_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.routing_request_topic_.IsDefault()) {
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_routing_request_topic(std::string* routing_request_topic) {
  if (routing_request_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.routing_request_topic_.SetAllocated(routing_request_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.routing_request_topic_.IsDefault()) {
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.routing_request_topic)
}

// optional string routing_response_topic = 9;
inline bool TopicConfig::_internal_has_routing_response_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TopicConfig::has_routing_response_topic() const {
  return _internal_has_routing_response_topic();
}
inline void TopicConfig::clear_routing_response_topic() {
  _impl_.routing_response_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& TopicConfig::routing_response_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.routing_response_topic)
  return _internal_routing_response_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_routing_response_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.routing_response_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.routing_response_topic)
}
inline std::string* TopicConfig::mutable_routing_response_topic() {
  std::string* _s = _internal_mutable_routing_response_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.routing_response_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_routing_response_topic() const {
  return _impl_.routing_response_topic_.Get();
}
inline void TopicConfig::_internal_set_routing_response_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.routing_response_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_routing_response_topic() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.routing_response_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_routing_response_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.routing_response_topic)
  if (!_internal_has_routing_response_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.routing_response_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.routing_response_topic_.IsDefault()) {
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_routing_response_topic(std::string* routing_response_topic) {
  if (routing_response_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.routing_response_topic_.SetAllocated(routing_response_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.routing_response_topic_.IsDefault()) {
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.routing_response_topic)
}

// optional string story_telling_topic = 10;
inline bool TopicConfig::_internal_has_story_telling_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TopicConfig::has_story_telling_topic() const {
  return _internal_has_story_telling_topic();
}
inline void TopicConfig::clear_story_telling_topic() {
  _impl_.story_telling_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& TopicConfig::story_telling_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.story_telling_topic)
  return _internal_story_telling_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_story_telling_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000200u;
 _impl_.story_telling_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.story_telling_topic)
}
inline std::string* TopicConfig::mutable_story_telling_topic() {
  std::string* _s = _internal_mutable_story_telling_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.story_telling_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_story_telling_topic() const {
  return _impl_.story_telling_topic_.Get();
}
inline void TopicConfig::_internal_set_story_telling_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.story_telling_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_story_telling_topic() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.story_telling_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_story_telling_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.story_telling_topic)
  if (!_internal_has_story_telling_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* p = _impl_.story_telling_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.story_telling_topic_.IsDefault()) {
    _impl_.story_telling_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_story_telling_topic(std::string* story_telling_topic) {
  if (story_telling_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.story_telling_topic_.SetAllocated(story_telling_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.story_telling_topic_.IsDefault()) {
    _impl_.story_telling_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.story_telling_topic)
}

// optional string traffic_light_detection_topic = 11;
inline bool TopicConfig::_internal_has_traffic_light_detection_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TopicConfig::has_traffic_light_detection_topic() const {
  return _internal_has_traffic_light_detection_topic();
}
inline void TopicConfig::clear_traffic_light_detection_topic() {
  _impl_.traffic_light_detection_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& TopicConfig::traffic_light_detection_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.traffic_light_detection_topic)
  return _internal_traffic_light_detection_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_traffic_light_detection_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000400u;
 _impl_.traffic_light_detection_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.traffic_light_detection_topic)
}
inline std::string* TopicConfig::mutable_traffic_light_detection_topic() {
  std::string* _s = _internal_mutable_traffic_light_detection_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.traffic_light_detection_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_traffic_light_detection_topic() const {
  return _impl_.traffic_light_detection_topic_.Get();
}
inline void TopicConfig::_internal_set_traffic_light_detection_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.traffic_light_detection_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_traffic_light_detection_topic() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.traffic_light_detection_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_traffic_light_detection_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.traffic_light_detection_topic)
  if (!_internal_has_traffic_light_detection_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* p = _impl_.traffic_light_detection_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traffic_light_detection_topic_.IsDefault()) {
    _impl_.traffic_light_detection_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_traffic_light_detection_topic(std::string* traffic_light_detection_topic) {
  if (traffic_light_detection_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.traffic_light_detection_topic_.SetAllocated(traffic_light_detection_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.traffic_light_detection_topic_.IsDefault()) {
    _impl_.traffic_light_detection_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.traffic_light_detection_topic)
}

// optional string planning_learning_data_topic = 12;
inline bool TopicConfig::_internal_has_planning_learning_data_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TopicConfig::has_planning_learning_data_topic() const {
  return _internal_has_planning_learning_data_topic();
}
inline void TopicConfig::clear_planning_learning_data_topic() {
  _impl_.planning_learning_data_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& TopicConfig::planning_learning_data_topic() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TopicConfig.planning_learning_data_topic)
  return _internal_planning_learning_data_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TopicConfig::set_planning_learning_data_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000800u;
 _impl_.planning_learning_data_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TopicConfig.planning_learning_data_topic)
}
inline std::string* TopicConfig::mutable_planning_learning_data_topic() {
  std::string* _s = _internal_mutable_planning_learning_data_topic();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TopicConfig.planning_learning_data_topic)
  return _s;
}
inline const std::string& TopicConfig::_internal_planning_learning_data_topic() const {
  return _impl_.planning_learning_data_topic_.Get();
}
inline void TopicConfig::_internal_set_planning_learning_data_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.planning_learning_data_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* TopicConfig::_internal_mutable_planning_learning_data_topic() {
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.planning_learning_data_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* TopicConfig::release_planning_learning_data_topic() {
  // @@protoc_insertion_point(field_release:apollo.planning.TopicConfig.planning_learning_data_topic)
  if (!_internal_has_planning_learning_data_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* p = _impl_.planning_learning_data_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_learning_data_topic_.IsDefault()) {
    _impl_.planning_learning_data_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TopicConfig::set_allocated_planning_learning_data_topic(std::string* planning_learning_data_topic) {
  if (planning_learning_data_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.planning_learning_data_topic_.SetAllocated(planning_learning_data_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.planning_learning_data_topic_.IsDefault()) {
    _impl_.planning_learning_data_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TopicConfig.planning_learning_data_topic)
}

// -------------------------------------------------------------------

// PlanningConfig

// optional .apollo.planning.TopicConfig topic_config = 1;
inline bool PlanningConfig::_internal_has_topic_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topic_config_ != nullptr);
  return value;
}
inline bool PlanningConfig::has_topic_config() const {
  return _internal_has_topic_config();
}
inline void PlanningConfig::clear_topic_config() {
  if (_impl_.topic_config_ != nullptr) _impl_.topic_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::TopicConfig& PlanningConfig::_internal_topic_config() const {
  const ::apollo::planning::TopicConfig* p = _impl_.topic_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::TopicConfig&>(
      ::apollo::planning::_TopicConfig_default_instance_);
}
inline const ::apollo::planning::TopicConfig& PlanningConfig::topic_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.topic_config)
  return _internal_topic_config();
}
inline void PlanningConfig::unsafe_arena_set_allocated_topic_config(
    ::apollo::planning::TopicConfig* topic_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topic_config_);
  }
  _impl_.topic_config_ = topic_config;
  if (topic_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.topic_config)
}
inline ::apollo::planning::TopicConfig* PlanningConfig::release_topic_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::TopicConfig* temp = _impl_.topic_config_;
  _impl_.topic_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::TopicConfig* PlanningConfig::unsafe_arena_release_topic_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.topic_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::TopicConfig* temp = _impl_.topic_config_;
  _impl_.topic_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::TopicConfig* PlanningConfig::_internal_mutable_topic_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.topic_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::TopicConfig>(GetArenaForAllocation());
    _impl_.topic_config_ = p;
  }
  return _impl_.topic_config_;
}
inline ::apollo::planning::TopicConfig* PlanningConfig::mutable_topic_config() {
  ::apollo::planning::TopicConfig* _msg = _internal_mutable_topic_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.topic_config)
  return _msg;
}
inline void PlanningConfig::set_allocated_topic_config(::apollo::planning::TopicConfig* topic_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.topic_config_;
  }
  if (topic_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topic_config);
    if (message_arena != submessage_arena) {
      topic_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.topic_config_ = topic_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.topic_config)
}

// optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
inline bool PlanningConfig::_internal_has_learning_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlanningConfig::has_learning_mode() const {
  return _internal_has_learning_mode();
}
inline void PlanningConfig::clear_learning_mode() {
  _impl_.learning_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::planning::PlanningConfig_PlanningLearningMode PlanningConfig::_internal_learning_mode() const {
  return static_cast< ::apollo::planning::PlanningConfig_PlanningLearningMode >(_impl_.learning_mode_);
}
inline ::apollo::planning::PlanningConfig_PlanningLearningMode PlanningConfig::learning_mode() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.learning_mode)
  return _internal_learning_mode();
}
inline void PlanningConfig::_internal_set_learning_mode(::apollo::planning::PlanningConfig_PlanningLearningMode value) {
  assert(::apollo::planning::PlanningConfig_PlanningLearningMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.learning_mode_ = value;
}
inline void PlanningConfig::set_learning_mode(::apollo::planning::PlanningConfig_PlanningLearningMode value) {
  _internal_set_learning_mode(value);
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningConfig.learning_mode)
}

// .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
inline bool PlanningConfig::_internal_has_rtk_planning_config() const {
  return planning_config_case() == kRtkPlanningConfig;
}
inline bool PlanningConfig::has_rtk_planning_config() const {
  return _internal_has_rtk_planning_config();
}
inline void PlanningConfig::set_has_rtk_planning_config() {
  _impl_._oneof_case_[0] = kRtkPlanningConfig;
}
inline void PlanningConfig::clear_rtk_planning_config() {
  if (_internal_has_rtk_planning_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.planning_config_.rtk_planning_config_;
    }
    clear_has_planning_config();
  }
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::release_rtk_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.rtk_planning_config)
  if (_internal_has_rtk_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::RtkPlanningConfig* temp = _impl_.planning_config_.rtk_planning_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.planning_config_.rtk_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::RtkPlanningConfig& PlanningConfig::_internal_rtk_planning_config() const {
  return _internal_has_rtk_planning_config()
      ? *_impl_.planning_config_.rtk_planning_config_
      : reinterpret_cast< ::apollo::planning::RtkPlanningConfig&>(::apollo::planning::_RtkPlanningConfig_default_instance_);
}
inline const ::apollo::planning::RtkPlanningConfig& PlanningConfig::rtk_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.rtk_planning_config)
  return _internal_rtk_planning_config();
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::unsafe_arena_release_rtk_planning_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.PlanningConfig.rtk_planning_config)
  if (_internal_has_rtk_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::RtkPlanningConfig* temp = _impl_.planning_config_.rtk_planning_config_;
    _impl_.planning_config_.rtk_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanningConfig::unsafe_arena_set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  clear_planning_config();
  if (rtk_planning_config) {
    set_has_rtk_planning_config();
    _impl_.planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::_internal_mutable_rtk_planning_config() {
  if (!_internal_has_rtk_planning_config()) {
    clear_planning_config();
    set_has_rtk_planning_config();
    _impl_.planning_config_.rtk_planning_config_ = CreateMaybeMessage< ::apollo::planning::RtkPlanningConfig >(GetArenaForAllocation());
  }
  return _impl_.planning_config_.rtk_planning_config_;
}
inline ::apollo::planning::RtkPlanningConfig* PlanningConfig::mutable_rtk_planning_config() {
  ::apollo::planning::RtkPlanningConfig* _msg = _internal_mutable_rtk_planning_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.rtk_planning_config)
  return _msg;
}

// .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
inline bool PlanningConfig::_internal_has_standard_planning_config() const {
  return planning_config_case() == kStandardPlanningConfig;
}
inline bool PlanningConfig::has_standard_planning_config() const {
  return _internal_has_standard_planning_config();
}
inline void PlanningConfig::set_has_standard_planning_config() {
  _impl_._oneof_case_[0] = kStandardPlanningConfig;
}
inline void PlanningConfig::clear_standard_planning_config() {
  if (_internal_has_standard_planning_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.planning_config_.standard_planning_config_;
    }
    clear_has_planning_config();
  }
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::release_standard_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.standard_planning_config)
  if (_internal_has_standard_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::StandardPlanningConfig* temp = _impl_.planning_config_.standard_planning_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.planning_config_.standard_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::StandardPlanningConfig& PlanningConfig::_internal_standard_planning_config() const {
  return _internal_has_standard_planning_config()
      ? *_impl_.planning_config_.standard_planning_config_
      : reinterpret_cast< ::apollo::planning::StandardPlanningConfig&>(::apollo::planning::_StandardPlanningConfig_default_instance_);
}
inline const ::apollo::planning::StandardPlanningConfig& PlanningConfig::standard_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.standard_planning_config)
  return _internal_standard_planning_config();
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::unsafe_arena_release_standard_planning_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.PlanningConfig.standard_planning_config)
  if (_internal_has_standard_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::StandardPlanningConfig* temp = _impl_.planning_config_.standard_planning_config_;
    _impl_.planning_config_.standard_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanningConfig::unsafe_arena_set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  clear_planning_config();
  if (standard_planning_config) {
    set_has_standard_planning_config();
    _impl_.planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::_internal_mutable_standard_planning_config() {
  if (!_internal_has_standard_planning_config()) {
    clear_planning_config();
    set_has_standard_planning_config();
    _impl_.planning_config_.standard_planning_config_ = CreateMaybeMessage< ::apollo::planning::StandardPlanningConfig >(GetArenaForAllocation());
  }
  return _impl_.planning_config_.standard_planning_config_;
}
inline ::apollo::planning::StandardPlanningConfig* PlanningConfig::mutable_standard_planning_config() {
  ::apollo::planning::StandardPlanningConfig* _msg = _internal_mutable_standard_planning_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.standard_planning_config)
  return _msg;
}

// .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
inline bool PlanningConfig::_internal_has_navigation_planning_config() const {
  return planning_config_case() == kNavigationPlanningConfig;
}
inline bool PlanningConfig::has_navigation_planning_config() const {
  return _internal_has_navigation_planning_config();
}
inline void PlanningConfig::set_has_navigation_planning_config() {
  _impl_._oneof_case_[0] = kNavigationPlanningConfig;
}
inline void PlanningConfig::clear_navigation_planning_config() {
  if (_internal_has_navigation_planning_config()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.planning_config_.navigation_planning_config_;
    }
    clear_has_planning_config();
  }
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::release_navigation_planning_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.PlanningConfig.navigation_planning_config)
  if (_internal_has_navigation_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::NavigationPlanningConfig* temp = _impl_.planning_config_.navigation_planning_config_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.planning_config_.navigation_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::planning::NavigationPlanningConfig& PlanningConfig::_internal_navigation_planning_config() const {
  return _internal_has_navigation_planning_config()
      ? *_impl_.planning_config_.navigation_planning_config_
      : reinterpret_cast< ::apollo::planning::NavigationPlanningConfig&>(::apollo::planning::_NavigationPlanningConfig_default_instance_);
}
inline const ::apollo::planning::NavigationPlanningConfig& PlanningConfig::navigation_planning_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.navigation_planning_config)
  return _internal_navigation_planning_config();
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::unsafe_arena_release_navigation_planning_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.planning.PlanningConfig.navigation_planning_config)
  if (_internal_has_navigation_planning_config()) {
    clear_has_planning_config();
    ::apollo::planning::NavigationPlanningConfig* temp = _impl_.planning_config_.navigation_planning_config_;
    _impl_.planning_config_.navigation_planning_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanningConfig::unsafe_arena_set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  clear_planning_config();
  if (navigation_planning_config) {
    set_has_navigation_planning_config();
    _impl_.planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::_internal_mutable_navigation_planning_config() {
  if (!_internal_has_navigation_planning_config()) {
    clear_planning_config();
    set_has_navigation_planning_config();
    _impl_.planning_config_.navigation_planning_config_ = CreateMaybeMessage< ::apollo::planning::NavigationPlanningConfig >(GetArenaForAllocation());
  }
  return _impl_.planning_config_.navigation_planning_config_;
}
inline ::apollo::planning::NavigationPlanningConfig* PlanningConfig::mutable_navigation_planning_config() {
  ::apollo::planning::NavigationPlanningConfig* _msg = _internal_mutable_navigation_planning_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.navigation_planning_config)
  return _msg;
}

// repeated .apollo.planning.TaskConfig default_task_config = 6;
inline int PlanningConfig::_internal_default_task_config_size() const {
  return _impl_.default_task_config_.size();
}
inline int PlanningConfig::default_task_config_size() const {
  return _internal_default_task_config_size();
}
inline void PlanningConfig::clear_default_task_config() {
  _impl_.default_task_config_.Clear();
}
inline ::apollo::planning::TaskConfig* PlanningConfig::mutable_default_task_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.PlanningConfig.default_task_config)
  return _impl_.default_task_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >*
PlanningConfig::mutable_default_task_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.PlanningConfig.default_task_config)
  return &_impl_.default_task_config_;
}
inline const ::apollo::planning::TaskConfig& PlanningConfig::_internal_default_task_config(int index) const {
  return _impl_.default_task_config_.Get(index);
}
inline const ::apollo::planning::TaskConfig& PlanningConfig::default_task_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningConfig.default_task_config)
  return _internal_default_task_config(index);
}
inline ::apollo::planning::TaskConfig* PlanningConfig::_internal_add_default_task_config() {
  return _impl_.default_task_config_.Add();
}
inline ::apollo::planning::TaskConfig* PlanningConfig::add_default_task_config() {
  ::apollo::planning::TaskConfig* _add = _internal_add_default_task_config();
  // @@protoc_insertion_point(field_add:apollo.planning.PlanningConfig.default_task_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::planning::TaskConfig >&
PlanningConfig::default_task_config() const {
  // @@protoc_insertion_point(field_list:apollo.planning.PlanningConfig.default_task_config)
  return _impl_.default_task_config_;
}

inline bool PlanningConfig::has_planning_config() const {
  return planning_config_case() != PLANNING_CONFIG_NOT_SET;
}
inline void PlanningConfig::clear_has_planning_config() {
  _impl_._oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}
inline PlanningConfig::PlanningConfigCase PlanningConfig::planning_config_case() const {
  return PlanningConfig::PlanningConfigCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::planning::TaskConfig_TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::TaskConfig_TaskType>() {
  return ::apollo::planning::TaskConfig_TaskType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ScenarioConfig_ScenarioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ScenarioConfig_ScenarioType>() {
  return ::apollo::planning::ScenarioConfig_ScenarioType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::ScenarioConfig_StageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::ScenarioConfig_StageType>() {
  return ::apollo::planning::ScenarioConfig_StageType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::PlanningConfig_PlanningLearningMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::PlanningConfig_PlanningLearningMode>() {
  return ::apollo::planning::PlanningConfig_PlanningLearningMode_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::PlannerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::PlannerType>() {
  return ::apollo::planning::PlannerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
