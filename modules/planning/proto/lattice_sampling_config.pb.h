// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/lattice_sampling_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
namespace apollo {
namespace planning {
class LatCondition;
struct LatConditionDefaultTypeInternal;
extern LatConditionDefaultTypeInternal _LatCondition_default_instance_;
class LatSampleConfig;
struct LatSampleConfigDefaultTypeInternal;
extern LatSampleConfigDefaultTypeInternal _LatSampleConfig_default_instance_;
class LatticeSamplingConfig;
struct LatticeSamplingConfigDefaultTypeInternal;
extern LatticeSamplingConfigDefaultTypeInternal _LatticeSamplingConfig_default_instance_;
class LonCondition;
struct LonConditionDefaultTypeInternal;
extern LonConditionDefaultTypeInternal _LonCondition_default_instance_;
class LonSampleConfig;
struct LonSampleConfigDefaultTypeInternal;
extern LonSampleConfigDefaultTypeInternal _LonSampleConfig_default_instance_;
class SStrategy;
struct SStrategyDefaultTypeInternal;
extern SStrategyDefaultTypeInternal _SStrategy_default_instance_;
class TStrategy;
struct TStrategyDefaultTypeInternal;
extern TStrategyDefaultTypeInternal _TStrategy_default_instance_;
}  // namespace planning
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::planning::LatCondition* Arena::CreateMaybeMessage<::apollo::planning::LatCondition>(Arena*);
template<> ::apollo::planning::LatSampleConfig* Arena::CreateMaybeMessage<::apollo::planning::LatSampleConfig>(Arena*);
template<> ::apollo::planning::LatticeSamplingConfig* Arena::CreateMaybeMessage<::apollo::planning::LatticeSamplingConfig>(Arena*);
template<> ::apollo::planning::LonCondition* Arena::CreateMaybeMessage<::apollo::planning::LonCondition>(Arena*);
template<> ::apollo::planning::LonSampleConfig* Arena::CreateMaybeMessage<::apollo::planning::LonSampleConfig>(Arena*);
template<> ::apollo::planning::SStrategy* Arena::CreateMaybeMessage<::apollo::planning::SStrategy>(Arena*);
template<> ::apollo::planning::TStrategy* Arena::CreateMaybeMessage<::apollo::planning::TStrategy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace planning {

// ===================================================================

class LonCondition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LonCondition) */ {
 public:
  inline LonCondition() : LonCondition(nullptr) {}
  ~LonCondition() override;
  explicit PROTOBUF_CONSTEXPR LonCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LonCondition(const LonCondition& from);
  LonCondition(LonCondition&& from) noexcept
    : LonCondition() {
    *this = ::std::move(from);
  }

  inline LonCondition& operator=(const LonCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline LonCondition& operator=(LonCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LonCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const LonCondition* internal_default_instance() {
    return reinterpret_cast<const LonCondition*>(
               &_LonCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LonCondition& a, LonCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(LonCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LonCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LonCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LonCondition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LonCondition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LonCondition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LonCondition";
  }
  protected:
  explicit LonCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kDsFieldNumber = 2,
    kDdsFieldNumber = 3,
  };
  // optional double s = 1 [default = 0];
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // optional double ds = 2 [default = 0];
  bool has_ds() const;
  private:
  bool _internal_has_ds() const;
  public:
  void clear_ds();
  double ds() const;
  void set_ds(double value);
  private:
  double _internal_ds() const;
  void _internal_set_ds(double value);
  public:

  // optional double dds = 3 [default = 0];
  bool has_dds() const;
  private:
  bool _internal_has_dds() const;
  public:
  void clear_dds();
  double dds() const;
  void set_dds(double value);
  private:
  double _internal_dds() const;
  void _internal_set_dds(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LonCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double s_;
    double ds_;
    double dds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LatCondition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatCondition) */ {
 public:
  inline LatCondition() : LatCondition(nullptr) {}
  ~LatCondition() override;
  explicit PROTOBUF_CONSTEXPR LatCondition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatCondition(const LatCondition& from);
  LatCondition(LatCondition&& from) noexcept
    : LatCondition() {
    *this = ::std::move(from);
  }

  inline LatCondition& operator=(const LatCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatCondition& operator=(LatCondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatCondition& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatCondition* internal_default_instance() {
    return reinterpret_cast<const LatCondition*>(
               &_LatCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LatCondition& a, LatCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(LatCondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatCondition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatCondition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatCondition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatCondition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatCondition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LatCondition";
  }
  protected:
  explicit LatCondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kDlFieldNumber = 2,
    kDdlFieldNumber = 3,
  };
  // optional double l = 1 [default = 0];
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  double l() const;
  void set_l(double value);
  private:
  double _internal_l() const;
  void _internal_set_l(double value);
  public:

  // optional double dl = 2 [default = 0];
  bool has_dl() const;
  private:
  bool _internal_has_dl() const;
  public:
  void clear_dl();
  double dl() const;
  void set_dl(double value);
  private:
  double _internal_dl() const;
  void _internal_set_dl(double value);
  public:

  // optional double ddl = 3 [default = 0];
  bool has_ddl() const;
  private:
  bool _internal_has_ddl() const;
  public:
  void clear_ddl();
  double ddl() const;
  void set_ddl(double value);
  private:
  double _internal_ddl() const;
  void _internal_set_ddl(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.LatCondition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double l_;
    double dl_;
    double ddl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class TStrategy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.TStrategy) */ {
 public:
  inline TStrategy() : TStrategy(nullptr) {}
  ~TStrategy() override;
  explicit PROTOBUF_CONSTEXPR TStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TStrategy(const TStrategy& from);
  TStrategy(TStrategy&& from) noexcept
    : TStrategy() {
    *this = ::std::move(from);
  }

  inline TStrategy& operator=(const TStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStrategy& operator=(TStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const TStrategy* internal_default_instance() {
    return reinterpret_cast<const TStrategy*>(
               &_TStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TStrategy& a, TStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(TStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TStrategy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TStrategy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TStrategy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStrategy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.TStrategy";
  }
  protected:
  explicit TStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTMarkersFieldNumber = 1,
    kStrategyFieldNumber = 3,
    kTStepFieldNumber = 2,
  };
  // repeated double t_markers = 1;
  int t_markers_size() const;
  private:
  int _internal_t_markers_size() const;
  public:
  void clear_t_markers();
  private:
  double _internal_t_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_t_markers() const;
  void _internal_add_t_markers(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_t_markers();
  public:
  double t_markers(int index) const;
  void set_t_markers(int index, double value);
  void add_t_markers(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      t_markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_t_markers();

  // optional string strategy = 3;
  bool has_strategy() const;
  private:
  bool _internal_has_strategy() const;
  public:
  void clear_strategy();
  const std::string& strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strategy();
  PROTOBUF_NODISCARD std::string* release_strategy();
  void set_allocated_strategy(std::string* strategy);
  private:
  const std::string& _internal_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy(const std::string& value);
  std::string* _internal_mutable_strategy();
  public:

  // optional double t_step = 2 [default = 0.5];
  bool has_t_step() const;
  private:
  bool _internal_has_t_step() const;
  public:
  void clear_t_step();
  double t_step() const;
  void set_t_step(double value);
  private:
  double _internal_t_step() const;
  void _internal_set_t_step(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.TStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > t_markers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategy_;
    double t_step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SStrategy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.SStrategy) */ {
 public:
  inline SStrategy() : SStrategy(nullptr) {}
  ~SStrategy() override;
  explicit PROTOBUF_CONSTEXPR SStrategy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SStrategy(const SStrategy& from);
  SStrategy(SStrategy&& from) noexcept
    : SStrategy() {
    *this = ::std::move(from);
  }

  inline SStrategy& operator=(const SStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SStrategy& operator=(SStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const SStrategy* internal_default_instance() {
    return reinterpret_cast<const SStrategy*>(
               &_SStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SStrategy& a, SStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(SStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SStrategy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SStrategy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SStrategy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SStrategy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SStrategy& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SStrategy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.SStrategy";
  }
  protected:
  explicit SStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSMarkersFieldNumber = 1,
    kStrategyFieldNumber = 3,
    kSStepFieldNumber = 2,
  };
  // repeated double s_markers = 1;
  int s_markers_size() const;
  private:
  int _internal_s_markers_size() const;
  public:
  void clear_s_markers();
  private:
  double _internal_s_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_s_markers() const;
  void _internal_add_s_markers(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_s_markers();
  public:
  double s_markers(int index) const;
  void set_s_markers(int index, double value);
  void add_s_markers(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      s_markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_s_markers();

  // optional string strategy = 3;
  bool has_strategy() const;
  private:
  bool _internal_has_strategy() const;
  public:
  void clear_strategy();
  const std::string& strategy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strategy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strategy();
  PROTOBUF_NODISCARD std::string* release_strategy();
  void set_allocated_strategy(std::string* strategy);
  private:
  const std::string& _internal_strategy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy(const std::string& value);
  std::string* _internal_mutable_strategy();
  public:

  // optional double s_step = 2 [default = 0.5];
  bool has_s_step() const;
  private:
  bool _internal_has_s_step() const;
  public:
  void clear_s_step();
  double s_step() const;
  void set_s_step(double value);
  private:
  double _internal_s_step() const;
  void _internal_set_s_step(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.planning.SStrategy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > s_markers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strategy_;
    double s_step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LonSampleConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LonSampleConfig) */ {
 public:
  inline LonSampleConfig() : LonSampleConfig(nullptr) {}
  ~LonSampleConfig() override;
  explicit PROTOBUF_CONSTEXPR LonSampleConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LonSampleConfig(const LonSampleConfig& from);
  LonSampleConfig(LonSampleConfig&& from) noexcept
    : LonSampleConfig() {
    *this = ::std::move(from);
  }

  inline LonSampleConfig& operator=(const LonSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LonSampleConfig& operator=(LonSampleConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LonSampleConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LonSampleConfig* internal_default_instance() {
    return reinterpret_cast<const LonSampleConfig*>(
               &_LonSampleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LonSampleConfig& a, LonSampleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LonSampleConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LonSampleConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LonSampleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LonSampleConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LonSampleConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LonSampleConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LonSampleConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LonSampleConfig";
  }
  protected:
  explicit LonSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonEndConditionFieldNumber = 1,
    kTStrategyFieldNumber = 2,
  };
  // optional .apollo.planning.LonCondition lon_end_condition = 1;
  bool has_lon_end_condition() const;
  private:
  bool _internal_has_lon_end_condition() const;
  public:
  void clear_lon_end_condition();
  const ::apollo::planning::LonCondition& lon_end_condition() const;
  PROTOBUF_NODISCARD ::apollo::planning::LonCondition* release_lon_end_condition();
  ::apollo::planning::LonCondition* mutable_lon_end_condition();
  void set_allocated_lon_end_condition(::apollo::planning::LonCondition* lon_end_condition);
  private:
  const ::apollo::planning::LonCondition& _internal_lon_end_condition() const;
  ::apollo::planning::LonCondition* _internal_mutable_lon_end_condition();
  public:
  void unsafe_arena_set_allocated_lon_end_condition(
      ::apollo::planning::LonCondition* lon_end_condition);
  ::apollo::planning::LonCondition* unsafe_arena_release_lon_end_condition();

  // optional .apollo.planning.TStrategy t_strategy = 2;
  bool has_t_strategy() const;
  private:
  bool _internal_has_t_strategy() const;
  public:
  void clear_t_strategy();
  const ::apollo::planning::TStrategy& t_strategy() const;
  PROTOBUF_NODISCARD ::apollo::planning::TStrategy* release_t_strategy();
  ::apollo::planning::TStrategy* mutable_t_strategy();
  void set_allocated_t_strategy(::apollo::planning::TStrategy* t_strategy);
  private:
  const ::apollo::planning::TStrategy& _internal_t_strategy() const;
  ::apollo::planning::TStrategy* _internal_mutable_t_strategy();
  public:
  void unsafe_arena_set_allocated_t_strategy(
      ::apollo::planning::TStrategy* t_strategy);
  ::apollo::planning::TStrategy* unsafe_arena_release_t_strategy();

  // @@protoc_insertion_point(class_scope:apollo.planning.LonSampleConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::LonCondition* lon_end_condition_;
    ::apollo::planning::TStrategy* t_strategy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LatSampleConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatSampleConfig) */ {
 public:
  inline LatSampleConfig() : LatSampleConfig(nullptr) {}
  ~LatSampleConfig() override;
  explicit PROTOBUF_CONSTEXPR LatSampleConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatSampleConfig(const LatSampleConfig& from);
  LatSampleConfig(LatSampleConfig&& from) noexcept
    : LatSampleConfig() {
    *this = ::std::move(from);
  }

  inline LatSampleConfig& operator=(const LatSampleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatSampleConfig& operator=(LatSampleConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatSampleConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatSampleConfig* internal_default_instance() {
    return reinterpret_cast<const LatSampleConfig*>(
               &_LatSampleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LatSampleConfig& a, LatSampleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LatSampleConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatSampleConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatSampleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatSampleConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatSampleConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatSampleConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatSampleConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LatSampleConfig";
  }
  protected:
  explicit LatSampleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatEndConditionFieldNumber = 1,
    kSStrategyFieldNumber = 2,
  };
  // optional .apollo.planning.LatCondition lat_end_condition = 1;
  bool has_lat_end_condition() const;
  private:
  bool _internal_has_lat_end_condition() const;
  public:
  void clear_lat_end_condition();
  const ::apollo::planning::LatCondition& lat_end_condition() const;
  PROTOBUF_NODISCARD ::apollo::planning::LatCondition* release_lat_end_condition();
  ::apollo::planning::LatCondition* mutable_lat_end_condition();
  void set_allocated_lat_end_condition(::apollo::planning::LatCondition* lat_end_condition);
  private:
  const ::apollo::planning::LatCondition& _internal_lat_end_condition() const;
  ::apollo::planning::LatCondition* _internal_mutable_lat_end_condition();
  public:
  void unsafe_arena_set_allocated_lat_end_condition(
      ::apollo::planning::LatCondition* lat_end_condition);
  ::apollo::planning::LatCondition* unsafe_arena_release_lat_end_condition();

  // optional .apollo.planning.SStrategy s_strategy = 2;
  bool has_s_strategy() const;
  private:
  bool _internal_has_s_strategy() const;
  public:
  void clear_s_strategy();
  const ::apollo::planning::SStrategy& s_strategy() const;
  PROTOBUF_NODISCARD ::apollo::planning::SStrategy* release_s_strategy();
  ::apollo::planning::SStrategy* mutable_s_strategy();
  void set_allocated_s_strategy(::apollo::planning::SStrategy* s_strategy);
  private:
  const ::apollo::planning::SStrategy& _internal_s_strategy() const;
  ::apollo::planning::SStrategy* _internal_mutable_s_strategy();
  public:
  void unsafe_arena_set_allocated_s_strategy(
      ::apollo::planning::SStrategy* s_strategy);
  ::apollo::planning::SStrategy* unsafe_arena_release_s_strategy();

  // @@protoc_insertion_point(class_scope:apollo.planning.LatSampleConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::LatCondition* lat_end_condition_;
    ::apollo::planning::SStrategy* s_strategy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LatticeSamplingConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.planning.LatticeSamplingConfig) */ {
 public:
  inline LatticeSamplingConfig() : LatticeSamplingConfig(nullptr) {}
  ~LatticeSamplingConfig() override;
  explicit PROTOBUF_CONSTEXPR LatticeSamplingConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatticeSamplingConfig(const LatticeSamplingConfig& from);
  LatticeSamplingConfig(LatticeSamplingConfig&& from) noexcept
    : LatticeSamplingConfig() {
    *this = ::std::move(from);
  }

  inline LatticeSamplingConfig& operator=(const LatticeSamplingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatticeSamplingConfig& operator=(LatticeSamplingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatticeSamplingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatticeSamplingConfig* internal_default_instance() {
    return reinterpret_cast<const LatticeSamplingConfig*>(
               &_LatticeSamplingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LatticeSamplingConfig& a, LatticeSamplingConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LatticeSamplingConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatticeSamplingConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatticeSamplingConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatticeSamplingConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatticeSamplingConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatticeSamplingConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatticeSamplingConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.planning.LatticeSamplingConfig";
  }
  protected:
  explicit LatticeSamplingConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonSampleConfigFieldNumber = 1,
    kLatSampleConfigFieldNumber = 2,
  };
  // optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
  bool has_lon_sample_config() const;
  private:
  bool _internal_has_lon_sample_config() const;
  public:
  void clear_lon_sample_config();
  const ::apollo::planning::LonSampleConfig& lon_sample_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::LonSampleConfig* release_lon_sample_config();
  ::apollo::planning::LonSampleConfig* mutable_lon_sample_config();
  void set_allocated_lon_sample_config(::apollo::planning::LonSampleConfig* lon_sample_config);
  private:
  const ::apollo::planning::LonSampleConfig& _internal_lon_sample_config() const;
  ::apollo::planning::LonSampleConfig* _internal_mutable_lon_sample_config();
  public:
  void unsafe_arena_set_allocated_lon_sample_config(
      ::apollo::planning::LonSampleConfig* lon_sample_config);
  ::apollo::planning::LonSampleConfig* unsafe_arena_release_lon_sample_config();

  // optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
  bool has_lat_sample_config() const;
  private:
  bool _internal_has_lat_sample_config() const;
  public:
  void clear_lat_sample_config();
  const ::apollo::planning::LatSampleConfig& lat_sample_config() const;
  PROTOBUF_NODISCARD ::apollo::planning::LatSampleConfig* release_lat_sample_config();
  ::apollo::planning::LatSampleConfig* mutable_lat_sample_config();
  void set_allocated_lat_sample_config(::apollo::planning::LatSampleConfig* lat_sample_config);
  private:
  const ::apollo::planning::LatSampleConfig& _internal_lat_sample_config() const;
  ::apollo::planning::LatSampleConfig* _internal_mutable_lat_sample_config();
  public:
  void unsafe_arena_set_allocated_lat_sample_config(
      ::apollo::planning::LatSampleConfig* lat_sample_config);
  ::apollo::planning::LatSampleConfig* unsafe_arena_release_lat_sample_config();

  // @@protoc_insertion_point(class_scope:apollo.planning.LatticeSamplingConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::planning::LonSampleConfig* lon_sample_config_;
    ::apollo::planning::LatSampleConfig* lat_sample_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LonCondition

// optional double s = 1 [default = 0];
inline bool LonCondition::_internal_has_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LonCondition::has_s() const {
  return _internal_has_s();
}
inline void LonCondition::clear_s() {
  _impl_.s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LonCondition::_internal_s() const {
  return _impl_.s_;
}
inline double LonCondition::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LonCondition.s)
  return _internal_s();
}
inline void LonCondition::_internal_set_s(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.s_ = value;
}
inline void LonCondition::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LonCondition.s)
}

// optional double ds = 2 [default = 0];
inline bool LonCondition::_internal_has_ds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LonCondition::has_ds() const {
  return _internal_has_ds();
}
inline void LonCondition::clear_ds() {
  _impl_.ds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LonCondition::_internal_ds() const {
  return _impl_.ds_;
}
inline double LonCondition::ds() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LonCondition.ds)
  return _internal_ds();
}
inline void LonCondition::_internal_set_ds(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ds_ = value;
}
inline void LonCondition::set_ds(double value) {
  _internal_set_ds(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LonCondition.ds)
}

// optional double dds = 3 [default = 0];
inline bool LonCondition::_internal_has_dds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LonCondition::has_dds() const {
  return _internal_has_dds();
}
inline void LonCondition::clear_dds() {
  _impl_.dds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LonCondition::_internal_dds() const {
  return _impl_.dds_;
}
inline double LonCondition::dds() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LonCondition.dds)
  return _internal_dds();
}
inline void LonCondition::_internal_set_dds(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.dds_ = value;
}
inline void LonCondition::set_dds(double value) {
  _internal_set_dds(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LonCondition.dds)
}

// -------------------------------------------------------------------

// LatCondition

// optional double l = 1 [default = 0];
inline bool LatCondition::_internal_has_l() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LatCondition::has_l() const {
  return _internal_has_l();
}
inline void LatCondition::clear_l() {
  _impl_.l_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LatCondition::_internal_l() const {
  return _impl_.l_;
}
inline double LatCondition::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatCondition.l)
  return _internal_l();
}
inline void LatCondition::_internal_set_l(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.l_ = value;
}
inline void LatCondition::set_l(double value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatCondition.l)
}

// optional double dl = 2 [default = 0];
inline bool LatCondition::_internal_has_dl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LatCondition::has_dl() const {
  return _internal_has_dl();
}
inline void LatCondition::clear_dl() {
  _impl_.dl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LatCondition::_internal_dl() const {
  return _impl_.dl_;
}
inline double LatCondition::dl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatCondition.dl)
  return _internal_dl();
}
inline void LatCondition::_internal_set_dl(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dl_ = value;
}
inline void LatCondition::set_dl(double value) {
  _internal_set_dl(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatCondition.dl)
}

// optional double ddl = 3 [default = 0];
inline bool LatCondition::_internal_has_ddl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LatCondition::has_ddl() const {
  return _internal_has_ddl();
}
inline void LatCondition::clear_ddl() {
  _impl_.ddl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double LatCondition::_internal_ddl() const {
  return _impl_.ddl_;
}
inline double LatCondition::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatCondition.ddl)
  return _internal_ddl();
}
inline void LatCondition::_internal_set_ddl(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ddl_ = value;
}
inline void LatCondition::set_ddl(double value) {
  _internal_set_ddl(value);
  // @@protoc_insertion_point(field_set:apollo.planning.LatCondition.ddl)
}

// -------------------------------------------------------------------

// TStrategy

// repeated double t_markers = 1;
inline int TStrategy::_internal_t_markers_size() const {
  return _impl_.t_markers_.size();
}
inline int TStrategy::t_markers_size() const {
  return _internal_t_markers_size();
}
inline void TStrategy::clear_t_markers() {
  _impl_.t_markers_.Clear();
}
inline double TStrategy::_internal_t_markers(int index) const {
  return _impl_.t_markers_.Get(index);
}
inline double TStrategy::t_markers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.TStrategy.t_markers)
  return _internal_t_markers(index);
}
inline void TStrategy::set_t_markers(int index, double value) {
  _impl_.t_markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.TStrategy.t_markers)
}
inline void TStrategy::_internal_add_t_markers(double value) {
  _impl_.t_markers_.Add(value);
}
inline void TStrategy::add_t_markers(double value) {
  _internal_add_t_markers(value);
  // @@protoc_insertion_point(field_add:apollo.planning.TStrategy.t_markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TStrategy::_internal_t_markers() const {
  return _impl_.t_markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TStrategy::t_markers() const {
  // @@protoc_insertion_point(field_list:apollo.planning.TStrategy.t_markers)
  return _internal_t_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TStrategy::_internal_mutable_t_markers() {
  return &_impl_.t_markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TStrategy::mutable_t_markers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.TStrategy.t_markers)
  return _internal_mutable_t_markers();
}

// optional double t_step = 2 [default = 0.5];
inline bool TStrategy::_internal_has_t_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TStrategy::has_t_step() const {
  return _internal_has_t_step();
}
inline void TStrategy::clear_t_step() {
  _impl_.t_step_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TStrategy::_internal_t_step() const {
  return _impl_.t_step_;
}
inline double TStrategy::t_step() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TStrategy.t_step)
  return _internal_t_step();
}
inline void TStrategy::_internal_set_t_step(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.t_step_ = value;
}
inline void TStrategy::set_t_step(double value) {
  _internal_set_t_step(value);
  // @@protoc_insertion_point(field_set:apollo.planning.TStrategy.t_step)
}

// optional string strategy = 3;
inline bool TStrategy::_internal_has_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TStrategy::has_strategy() const {
  return _internal_has_strategy();
}
inline void TStrategy::clear_strategy() {
  _impl_.strategy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TStrategy::strategy() const {
  // @@protoc_insertion_point(field_get:apollo.planning.TStrategy.strategy)
  return _internal_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TStrategy::set_strategy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.strategy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.TStrategy.strategy)
}
inline std::string* TStrategy::mutable_strategy() {
  std::string* _s = _internal_mutable_strategy();
  // @@protoc_insertion_point(field_mutable:apollo.planning.TStrategy.strategy)
  return _s;
}
inline const std::string& TStrategy::_internal_strategy() const {
  return _impl_.strategy_.Get();
}
inline void TStrategy::_internal_set_strategy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_.Set(value, GetArenaForAllocation());
}
inline std::string* TStrategy::_internal_mutable_strategy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strategy_.Mutable(GetArenaForAllocation());
}
inline std::string* TStrategy::release_strategy() {
  // @@protoc_insertion_point(field_release:apollo.planning.TStrategy.strategy)
  if (!_internal_has_strategy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.strategy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strategy_.IsDefault()) {
    _impl_.strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TStrategy::set_allocated_strategy(std::string* strategy) {
  if (strategy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strategy_.SetAllocated(strategy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strategy_.IsDefault()) {
    _impl_.strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TStrategy.strategy)
}

// -------------------------------------------------------------------

// SStrategy

// repeated double s_markers = 1;
inline int SStrategy::_internal_s_markers_size() const {
  return _impl_.s_markers_.size();
}
inline int SStrategy::s_markers_size() const {
  return _internal_s_markers_size();
}
inline void SStrategy::clear_s_markers() {
  _impl_.s_markers_.Clear();
}
inline double SStrategy::_internal_s_markers(int index) const {
  return _impl_.s_markers_.Get(index);
}
inline double SStrategy::s_markers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.SStrategy.s_markers)
  return _internal_s_markers(index);
}
inline void SStrategy::set_s_markers(int index, double value) {
  _impl_.s_markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.SStrategy.s_markers)
}
inline void SStrategy::_internal_add_s_markers(double value) {
  _impl_.s_markers_.Add(value);
}
inline void SStrategy::add_s_markers(double value) {
  _internal_add_s_markers(value);
  // @@protoc_insertion_point(field_add:apollo.planning.SStrategy.s_markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SStrategy::_internal_s_markers() const {
  return _impl_.s_markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SStrategy::s_markers() const {
  // @@protoc_insertion_point(field_list:apollo.planning.SStrategy.s_markers)
  return _internal_s_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SStrategy::_internal_mutable_s_markers() {
  return &_impl_.s_markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SStrategy::mutable_s_markers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.SStrategy.s_markers)
  return _internal_mutable_s_markers();
}

// optional double s_step = 2 [default = 0.5];
inline bool SStrategy::_internal_has_s_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SStrategy::has_s_step() const {
  return _internal_has_s_step();
}
inline void SStrategy::clear_s_step() {
  _impl_.s_step_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SStrategy::_internal_s_step() const {
  return _impl_.s_step_;
}
inline double SStrategy::s_step() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SStrategy.s_step)
  return _internal_s_step();
}
inline void SStrategy::_internal_set_s_step(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.s_step_ = value;
}
inline void SStrategy::set_s_step(double value) {
  _internal_set_s_step(value);
  // @@protoc_insertion_point(field_set:apollo.planning.SStrategy.s_step)
}

// optional string strategy = 3;
inline bool SStrategy::_internal_has_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SStrategy::has_strategy() const {
  return _internal_has_strategy();
}
inline void SStrategy::clear_strategy() {
  _impl_.strategy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SStrategy::strategy() const {
  // @@protoc_insertion_point(field_get:apollo.planning.SStrategy.strategy)
  return _internal_strategy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SStrategy::set_strategy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.strategy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.planning.SStrategy.strategy)
}
inline std::string* SStrategy::mutable_strategy() {
  std::string* _s = _internal_mutable_strategy();
  // @@protoc_insertion_point(field_mutable:apollo.planning.SStrategy.strategy)
  return _s;
}
inline const std::string& SStrategy::_internal_strategy() const {
  return _impl_.strategy_.Get();
}
inline void SStrategy::_internal_set_strategy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_.Set(value, GetArenaForAllocation());
}
inline std::string* SStrategy::_internal_mutable_strategy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strategy_.Mutable(GetArenaForAllocation());
}
inline std::string* SStrategy::release_strategy() {
  // @@protoc_insertion_point(field_release:apollo.planning.SStrategy.strategy)
  if (!_internal_has_strategy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.strategy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strategy_.IsDefault()) {
    _impl_.strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SStrategy::set_allocated_strategy(std::string* strategy) {
  if (strategy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strategy_.SetAllocated(strategy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.strategy_.IsDefault()) {
    _impl_.strategy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.SStrategy.strategy)
}

// -------------------------------------------------------------------

// LonSampleConfig

// optional .apollo.planning.LonCondition lon_end_condition = 1;
inline bool LonSampleConfig::_internal_has_lon_end_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lon_end_condition_ != nullptr);
  return value;
}
inline bool LonSampleConfig::has_lon_end_condition() const {
  return _internal_has_lon_end_condition();
}
inline void LonSampleConfig::clear_lon_end_condition() {
  if (_impl_.lon_end_condition_ != nullptr) _impl_.lon_end_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::LonCondition& LonSampleConfig::_internal_lon_end_condition() const {
  const ::apollo::planning::LonCondition* p = _impl_.lon_end_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LonCondition&>(
      ::apollo::planning::_LonCondition_default_instance_);
}
inline const ::apollo::planning::LonCondition& LonSampleConfig::lon_end_condition() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LonSampleConfig.lon_end_condition)
  return _internal_lon_end_condition();
}
inline void LonSampleConfig::unsafe_arena_set_allocated_lon_end_condition(
    ::apollo::planning::LonCondition* lon_end_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_end_condition_);
  }
  _impl_.lon_end_condition_ = lon_end_condition;
  if (lon_end_condition) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LonSampleConfig.lon_end_condition)
}
inline ::apollo::planning::LonCondition* LonSampleConfig::release_lon_end_condition() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LonCondition* temp = _impl_.lon_end_condition_;
  _impl_.lon_end_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LonCondition* LonSampleConfig::unsafe_arena_release_lon_end_condition() {
  // @@protoc_insertion_point(field_release:apollo.planning.LonSampleConfig.lon_end_condition)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LonCondition* temp = _impl_.lon_end_condition_;
  _impl_.lon_end_condition_ = nullptr;
  return temp;
}
inline ::apollo::planning::LonCondition* LonSampleConfig::_internal_mutable_lon_end_condition() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lon_end_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LonCondition>(GetArenaForAllocation());
    _impl_.lon_end_condition_ = p;
  }
  return _impl_.lon_end_condition_;
}
inline ::apollo::planning::LonCondition* LonSampleConfig::mutable_lon_end_condition() {
  ::apollo::planning::LonCondition* _msg = _internal_mutable_lon_end_condition();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LonSampleConfig.lon_end_condition)
  return _msg;
}
inline void LonSampleConfig::set_allocated_lon_end_condition(::apollo::planning::LonCondition* lon_end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lon_end_condition_;
  }
  if (lon_end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lon_end_condition);
    if (message_arena != submessage_arena) {
      lon_end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_end_condition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lon_end_condition_ = lon_end_condition;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LonSampleConfig.lon_end_condition)
}

// optional .apollo.planning.TStrategy t_strategy = 2;
inline bool LonSampleConfig::_internal_has_t_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.t_strategy_ != nullptr);
  return value;
}
inline bool LonSampleConfig::has_t_strategy() const {
  return _internal_has_t_strategy();
}
inline void LonSampleConfig::clear_t_strategy() {
  if (_impl_.t_strategy_ != nullptr) _impl_.t_strategy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::TStrategy& LonSampleConfig::_internal_t_strategy() const {
  const ::apollo::planning::TStrategy* p = _impl_.t_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::TStrategy&>(
      ::apollo::planning::_TStrategy_default_instance_);
}
inline const ::apollo::planning::TStrategy& LonSampleConfig::t_strategy() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LonSampleConfig.t_strategy)
  return _internal_t_strategy();
}
inline void LonSampleConfig::unsafe_arena_set_allocated_t_strategy(
    ::apollo::planning::TStrategy* t_strategy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.t_strategy_);
  }
  _impl_.t_strategy_ = t_strategy;
  if (t_strategy) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LonSampleConfig.t_strategy)
}
inline ::apollo::planning::TStrategy* LonSampleConfig::release_t_strategy() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::TStrategy* temp = _impl_.t_strategy_;
  _impl_.t_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::TStrategy* LonSampleConfig::unsafe_arena_release_t_strategy() {
  // @@protoc_insertion_point(field_release:apollo.planning.LonSampleConfig.t_strategy)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::TStrategy* temp = _impl_.t_strategy_;
  _impl_.t_strategy_ = nullptr;
  return temp;
}
inline ::apollo::planning::TStrategy* LonSampleConfig::_internal_mutable_t_strategy() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.t_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::TStrategy>(GetArenaForAllocation());
    _impl_.t_strategy_ = p;
  }
  return _impl_.t_strategy_;
}
inline ::apollo::planning::TStrategy* LonSampleConfig::mutable_t_strategy() {
  ::apollo::planning::TStrategy* _msg = _internal_mutable_t_strategy();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LonSampleConfig.t_strategy)
  return _msg;
}
inline void LonSampleConfig::set_allocated_t_strategy(::apollo::planning::TStrategy* t_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.t_strategy_;
  }
  if (t_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(t_strategy);
    if (message_arena != submessage_arena) {
      t_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_strategy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.t_strategy_ = t_strategy;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LonSampleConfig.t_strategy)
}

// -------------------------------------------------------------------

// LatSampleConfig

// optional .apollo.planning.LatCondition lat_end_condition = 1;
inline bool LatSampleConfig::_internal_has_lat_end_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lat_end_condition_ != nullptr);
  return value;
}
inline bool LatSampleConfig::has_lat_end_condition() const {
  return _internal_has_lat_end_condition();
}
inline void LatSampleConfig::clear_lat_end_condition() {
  if (_impl_.lat_end_condition_ != nullptr) _impl_.lat_end_condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::LatCondition& LatSampleConfig::_internal_lat_end_condition() const {
  const ::apollo::planning::LatCondition* p = _impl_.lat_end_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LatCondition&>(
      ::apollo::planning::_LatCondition_default_instance_);
}
inline const ::apollo::planning::LatCondition& LatSampleConfig::lat_end_condition() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatSampleConfig.lat_end_condition)
  return _internal_lat_end_condition();
}
inline void LatSampleConfig::unsafe_arena_set_allocated_lat_end_condition(
    ::apollo::planning::LatCondition* lat_end_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_end_condition_);
  }
  _impl_.lat_end_condition_ = lat_end_condition;
  if (lat_end_condition) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LatSampleConfig.lat_end_condition)
}
inline ::apollo::planning::LatCondition* LatSampleConfig::release_lat_end_condition() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LatCondition* temp = _impl_.lat_end_condition_;
  _impl_.lat_end_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LatCondition* LatSampleConfig::unsafe_arena_release_lat_end_condition() {
  // @@protoc_insertion_point(field_release:apollo.planning.LatSampleConfig.lat_end_condition)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LatCondition* temp = _impl_.lat_end_condition_;
  _impl_.lat_end_condition_ = nullptr;
  return temp;
}
inline ::apollo::planning::LatCondition* LatSampleConfig::_internal_mutable_lat_end_condition() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lat_end_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LatCondition>(GetArenaForAllocation());
    _impl_.lat_end_condition_ = p;
  }
  return _impl_.lat_end_condition_;
}
inline ::apollo::planning::LatCondition* LatSampleConfig::mutable_lat_end_condition() {
  ::apollo::planning::LatCondition* _msg = _internal_mutable_lat_end_condition();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatSampleConfig.lat_end_condition)
  return _msg;
}
inline void LatSampleConfig::set_allocated_lat_end_condition(::apollo::planning::LatCondition* lat_end_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lat_end_condition_;
  }
  if (lat_end_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lat_end_condition);
    if (message_arena != submessage_arena) {
      lat_end_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_end_condition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lat_end_condition_ = lat_end_condition;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LatSampleConfig.lat_end_condition)
}

// optional .apollo.planning.SStrategy s_strategy = 2;
inline bool LatSampleConfig::_internal_has_s_strategy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.s_strategy_ != nullptr);
  return value;
}
inline bool LatSampleConfig::has_s_strategy() const {
  return _internal_has_s_strategy();
}
inline void LatSampleConfig::clear_s_strategy() {
  if (_impl_.s_strategy_ != nullptr) _impl_.s_strategy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::SStrategy& LatSampleConfig::_internal_s_strategy() const {
  const ::apollo::planning::SStrategy* p = _impl_.s_strategy_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::SStrategy&>(
      ::apollo::planning::_SStrategy_default_instance_);
}
inline const ::apollo::planning::SStrategy& LatSampleConfig::s_strategy() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatSampleConfig.s_strategy)
  return _internal_s_strategy();
}
inline void LatSampleConfig::unsafe_arena_set_allocated_s_strategy(
    ::apollo::planning::SStrategy* s_strategy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.s_strategy_);
  }
  _impl_.s_strategy_ = s_strategy;
  if (s_strategy) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LatSampleConfig.s_strategy)
}
inline ::apollo::planning::SStrategy* LatSampleConfig::release_s_strategy() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::SStrategy* temp = _impl_.s_strategy_;
  _impl_.s_strategy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::SStrategy* LatSampleConfig::unsafe_arena_release_s_strategy() {
  // @@protoc_insertion_point(field_release:apollo.planning.LatSampleConfig.s_strategy)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::SStrategy* temp = _impl_.s_strategy_;
  _impl_.s_strategy_ = nullptr;
  return temp;
}
inline ::apollo::planning::SStrategy* LatSampleConfig::_internal_mutable_s_strategy() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.s_strategy_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::SStrategy>(GetArenaForAllocation());
    _impl_.s_strategy_ = p;
  }
  return _impl_.s_strategy_;
}
inline ::apollo::planning::SStrategy* LatSampleConfig::mutable_s_strategy() {
  ::apollo::planning::SStrategy* _msg = _internal_mutable_s_strategy();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatSampleConfig.s_strategy)
  return _msg;
}
inline void LatSampleConfig::set_allocated_s_strategy(::apollo::planning::SStrategy* s_strategy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.s_strategy_;
  }
  if (s_strategy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(s_strategy);
    if (message_arena != submessage_arena) {
      s_strategy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s_strategy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.s_strategy_ = s_strategy;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LatSampleConfig.s_strategy)
}

// -------------------------------------------------------------------

// LatticeSamplingConfig

// optional .apollo.planning.LonSampleConfig lon_sample_config = 1;
inline bool LatticeSamplingConfig::_internal_has_lon_sample_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lon_sample_config_ != nullptr);
  return value;
}
inline bool LatticeSamplingConfig::has_lon_sample_config() const {
  return _internal_has_lon_sample_config();
}
inline void LatticeSamplingConfig::clear_lon_sample_config() {
  if (_impl_.lon_sample_config_ != nullptr) _impl_.lon_sample_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::planning::LonSampleConfig& LatticeSamplingConfig::_internal_lon_sample_config() const {
  const ::apollo::planning::LonSampleConfig* p = _impl_.lon_sample_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LonSampleConfig&>(
      ::apollo::planning::_LonSampleConfig_default_instance_);
}
inline const ::apollo::planning::LonSampleConfig& LatticeSamplingConfig::lon_sample_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatticeSamplingConfig.lon_sample_config)
  return _internal_lon_sample_config();
}
inline void LatticeSamplingConfig::unsafe_arena_set_allocated_lon_sample_config(
    ::apollo::planning::LonSampleConfig* lon_sample_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lon_sample_config_);
  }
  _impl_.lon_sample_config_ = lon_sample_config;
  if (lon_sample_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LatticeSamplingConfig.lon_sample_config)
}
inline ::apollo::planning::LonSampleConfig* LatticeSamplingConfig::release_lon_sample_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LonSampleConfig* temp = _impl_.lon_sample_config_;
  _impl_.lon_sample_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LonSampleConfig* LatticeSamplingConfig::unsafe_arena_release_lon_sample_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.LatticeSamplingConfig.lon_sample_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::planning::LonSampleConfig* temp = _impl_.lon_sample_config_;
  _impl_.lon_sample_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::LonSampleConfig* LatticeSamplingConfig::_internal_mutable_lon_sample_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lon_sample_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LonSampleConfig>(GetArenaForAllocation());
    _impl_.lon_sample_config_ = p;
  }
  return _impl_.lon_sample_config_;
}
inline ::apollo::planning::LonSampleConfig* LatticeSamplingConfig::mutable_lon_sample_config() {
  ::apollo::planning::LonSampleConfig* _msg = _internal_mutable_lon_sample_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatticeSamplingConfig.lon_sample_config)
  return _msg;
}
inline void LatticeSamplingConfig::set_allocated_lon_sample_config(::apollo::planning::LonSampleConfig* lon_sample_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lon_sample_config_;
  }
  if (lon_sample_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lon_sample_config);
    if (message_arena != submessage_arena) {
      lon_sample_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_sample_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lon_sample_config_ = lon_sample_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LatticeSamplingConfig.lon_sample_config)
}

// optional .apollo.planning.LatSampleConfig lat_sample_config = 2;
inline bool LatticeSamplingConfig::_internal_has_lat_sample_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lat_sample_config_ != nullptr);
  return value;
}
inline bool LatticeSamplingConfig::has_lat_sample_config() const {
  return _internal_has_lat_sample_config();
}
inline void LatticeSamplingConfig::clear_lat_sample_config() {
  if (_impl_.lat_sample_config_ != nullptr) _impl_.lat_sample_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::planning::LatSampleConfig& LatticeSamplingConfig::_internal_lat_sample_config() const {
  const ::apollo::planning::LatSampleConfig* p = _impl_.lat_sample_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::planning::LatSampleConfig&>(
      ::apollo::planning::_LatSampleConfig_default_instance_);
}
inline const ::apollo::planning::LatSampleConfig& LatticeSamplingConfig::lat_sample_config() const {
  // @@protoc_insertion_point(field_get:apollo.planning.LatticeSamplingConfig.lat_sample_config)
  return _internal_lat_sample_config();
}
inline void LatticeSamplingConfig::unsafe_arena_set_allocated_lat_sample_config(
    ::apollo::planning::LatSampleConfig* lat_sample_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lat_sample_config_);
  }
  _impl_.lat_sample_config_ = lat_sample_config;
  if (lat_sample_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.planning.LatticeSamplingConfig.lat_sample_config)
}
inline ::apollo::planning::LatSampleConfig* LatticeSamplingConfig::release_lat_sample_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::LatSampleConfig* temp = _impl_.lat_sample_config_;
  _impl_.lat_sample_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::planning::LatSampleConfig* LatticeSamplingConfig::unsafe_arena_release_lat_sample_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.LatticeSamplingConfig.lat_sample_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::planning::LatSampleConfig* temp = _impl_.lat_sample_config_;
  _impl_.lat_sample_config_ = nullptr;
  return temp;
}
inline ::apollo::planning::LatSampleConfig* LatticeSamplingConfig::_internal_mutable_lat_sample_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lat_sample_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::planning::LatSampleConfig>(GetArenaForAllocation());
    _impl_.lat_sample_config_ = p;
  }
  return _impl_.lat_sample_config_;
}
inline ::apollo::planning::LatSampleConfig* LatticeSamplingConfig::mutable_lat_sample_config() {
  ::apollo::planning::LatSampleConfig* _msg = _internal_mutable_lat_sample_config();
  // @@protoc_insertion_point(field_mutable:apollo.planning.LatticeSamplingConfig.lat_sample_config)
  return _msg;
}
inline void LatticeSamplingConfig::set_allocated_lat_sample_config(::apollo::planning::LatSampleConfig* lat_sample_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lat_sample_config_;
  }
  if (lat_sample_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lat_sample_config);
    if (message_arena != submessage_arena) {
      lat_sample_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_sample_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lat_sample_config_ = lat_sample_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.LatticeSamplingConfig.lat_sample_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2flattice_5fsampling_5fconfig_2eproto
