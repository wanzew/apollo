// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/task_manager/proto/task_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/routing/proto/routing.pb.h"
#include "modules/map/proto/map_parking_space.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
namespace apollo {
namespace task_manager {
class CycleRoutingTask;
struct CycleRoutingTaskDefaultTypeInternal;
extern CycleRoutingTaskDefaultTypeInternal _CycleRoutingTask_default_instance_;
class DeadEndRoutingTask;
struct DeadEndRoutingTaskDefaultTypeInternal;
extern DeadEndRoutingTaskDefaultTypeInternal _DeadEndRoutingTask_default_instance_;
class ParkingRoutingTask;
struct ParkingRoutingTaskDefaultTypeInternal;
extern ParkingRoutingTaskDefaultTypeInternal _ParkingRoutingTask_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace task_manager
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::task_manager::CycleRoutingTask* Arena::CreateMaybeMessage<::apollo::task_manager::CycleRoutingTask>(Arena*);
template<> ::apollo::task_manager::DeadEndRoutingTask* Arena::CreateMaybeMessage<::apollo::task_manager::DeadEndRoutingTask>(Arena*);
template<> ::apollo::task_manager::ParkingRoutingTask* Arena::CreateMaybeMessage<::apollo::task_manager::ParkingRoutingTask>(Arena*);
template<> ::apollo::task_manager::Task* Arena::CreateMaybeMessage<::apollo::task_manager::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace task_manager {

enum TaskType : int {
  CYCLE_ROUTING = 0,
  PARKING_ROUTING = 1,
  DEAD_END_ROUTING = 3
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = CYCLE_ROUTING;
constexpr TaskType TaskType_MAX = DEAD_END_ROUTING;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum JunctionType : int {
  UNKNOWN = 0,
  IN_ROAD = 1,
  CROSS_ROAD = 2,
  FORK_ROAD = 3,
  MAIN_SIDE = 4,
  DEAD_END = 5
};
bool JunctionType_IsValid(int value);
constexpr JunctionType JunctionType_MIN = UNKNOWN;
constexpr JunctionType JunctionType_MAX = DEAD_END;
constexpr int JunctionType_ARRAYSIZE = JunctionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JunctionType_descriptor();
template<typename T>
inline const std::string& JunctionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JunctionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JunctionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JunctionType_descriptor(), enum_t_value);
}
inline bool JunctionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JunctionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JunctionType>(
    JunctionType_descriptor(), name, value);
}
// ===================================================================

class CycleRoutingTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.task_manager.CycleRoutingTask) */ {
 public:
  inline CycleRoutingTask() : CycleRoutingTask(nullptr) {}
  ~CycleRoutingTask() override;
  explicit PROTOBUF_CONSTEXPR CycleRoutingTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CycleRoutingTask(const CycleRoutingTask& from);
  CycleRoutingTask(CycleRoutingTask&& from) noexcept
    : CycleRoutingTask() {
    *this = ::std::move(from);
  }

  inline CycleRoutingTask& operator=(const CycleRoutingTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CycleRoutingTask& operator=(CycleRoutingTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CycleRoutingTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const CycleRoutingTask* internal_default_instance() {
    return reinterpret_cast<const CycleRoutingTask*>(
               &_CycleRoutingTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CycleRoutingTask& a, CycleRoutingTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CycleRoutingTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CycleRoutingTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CycleRoutingTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CycleRoutingTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CycleRoutingTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CycleRoutingTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CycleRoutingTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.task_manager.CycleRoutingTask";
  }
  protected:
  explicit CycleRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingRequestFieldNumber = 2,
    kCycleNumFieldNumber = 1,
  };
  // optional .apollo.routing.RoutingRequest routing_request = 2;
  bool has_routing_request() const;
  private:
  bool _internal_has_routing_request() const;
  public:
  void clear_routing_request();
  const ::apollo::routing::RoutingRequest& routing_request() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingRequest* release_routing_request();
  ::apollo::routing::RoutingRequest* mutable_routing_request();
  void set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request();
  public:
  void unsafe_arena_set_allocated_routing_request(
      ::apollo::routing::RoutingRequest* routing_request);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request();

  // optional int32 cycle_num = 1;
  bool has_cycle_num() const;
  private:
  bool _internal_has_cycle_num() const;
  public:
  void clear_cycle_num();
  int32_t cycle_num() const;
  void set_cycle_num(int32_t value);
  private:
  int32_t _internal_cycle_num() const;
  void _internal_set_cycle_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.task_manager.CycleRoutingTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::routing::RoutingRequest* routing_request_;
    int32_t cycle_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class ParkingRoutingTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.task_manager.ParkingRoutingTask) */ {
 public:
  inline ParkingRoutingTask() : ParkingRoutingTask(nullptr) {}
  ~ParkingRoutingTask() override;
  explicit PROTOBUF_CONSTEXPR ParkingRoutingTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParkingRoutingTask(const ParkingRoutingTask& from);
  ParkingRoutingTask(ParkingRoutingTask&& from) noexcept
    : ParkingRoutingTask() {
    *this = ::std::move(from);
  }

  inline ParkingRoutingTask& operator=(const ParkingRoutingTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParkingRoutingTask& operator=(ParkingRoutingTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParkingRoutingTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParkingRoutingTask* internal_default_instance() {
    return reinterpret_cast<const ParkingRoutingTask*>(
               &_ParkingRoutingTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParkingRoutingTask& a, ParkingRoutingTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ParkingRoutingTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParkingRoutingTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParkingRoutingTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParkingRoutingTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParkingRoutingTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParkingRoutingTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingRoutingTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.task_manager.ParkingRoutingTask";
  }
  protected:
  explicit ParkingRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingRequestFieldNumber = 2,
    kLaneWidthFieldNumber = 1,
  };
  // optional .apollo.routing.RoutingRequest routing_request = 2;
  bool has_routing_request() const;
  private:
  bool _internal_has_routing_request() const;
  public:
  void clear_routing_request();
  const ::apollo::routing::RoutingRequest& routing_request() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingRequest* release_routing_request();
  ::apollo::routing::RoutingRequest* mutable_routing_request();
  void set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request();
  public:
  void unsafe_arena_set_allocated_routing_request(
      ::apollo::routing::RoutingRequest* routing_request);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request();

  // optional double lane_width = 1;
  bool has_lane_width() const;
  private:
  bool _internal_has_lane_width() const;
  public:
  void clear_lane_width();
  double lane_width() const;
  void set_lane_width(double value);
  private:
  double _internal_lane_width() const;
  void _internal_set_lane_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.task_manager.ParkingRoutingTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::routing::RoutingRequest* routing_request_;
    double lane_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class DeadEndRoutingTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.task_manager.DeadEndRoutingTask) */ {
 public:
  inline DeadEndRoutingTask() : DeadEndRoutingTask(nullptr) {}
  ~DeadEndRoutingTask() override;
  explicit PROTOBUF_CONSTEXPR DeadEndRoutingTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeadEndRoutingTask(const DeadEndRoutingTask& from);
  DeadEndRoutingTask(DeadEndRoutingTask&& from) noexcept
    : DeadEndRoutingTask() {
    *this = ::std::move(from);
  }

  inline DeadEndRoutingTask& operator=(const DeadEndRoutingTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeadEndRoutingTask& operator=(DeadEndRoutingTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeadEndRoutingTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeadEndRoutingTask* internal_default_instance() {
    return reinterpret_cast<const DeadEndRoutingTask*>(
               &_DeadEndRoutingTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeadEndRoutingTask& a, DeadEndRoutingTask& b) {
    a.Swap(&b);
  }
  inline void Swap(DeadEndRoutingTask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeadEndRoutingTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeadEndRoutingTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeadEndRoutingTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeadEndRoutingTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeadEndRoutingTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeadEndRoutingTask* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.task_manager.DeadEndRoutingTask";
  }
  protected:
  explicit DeadEndRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingRequestInFieldNumber = 2,
    kRoutingRequestOutFieldNumber = 3,
  };
  // optional .apollo.routing.RoutingRequest routing_request_in = 2;
  bool has_routing_request_in() const;
  private:
  bool _internal_has_routing_request_in() const;
  public:
  void clear_routing_request_in();
  const ::apollo::routing::RoutingRequest& routing_request_in() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingRequest* release_routing_request_in();
  ::apollo::routing::RoutingRequest* mutable_routing_request_in();
  void set_allocated_routing_request_in(::apollo::routing::RoutingRequest* routing_request_in);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request_in() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request_in();
  public:
  void unsafe_arena_set_allocated_routing_request_in(
      ::apollo::routing::RoutingRequest* routing_request_in);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request_in();

  // optional .apollo.routing.RoutingRequest routing_request_out = 3;
  bool has_routing_request_out() const;
  private:
  bool _internal_has_routing_request_out() const;
  public:
  void clear_routing_request_out();
  const ::apollo::routing::RoutingRequest& routing_request_out() const;
  PROTOBUF_NODISCARD ::apollo::routing::RoutingRequest* release_routing_request_out();
  ::apollo::routing::RoutingRequest* mutable_routing_request_out();
  void set_allocated_routing_request_out(::apollo::routing::RoutingRequest* routing_request_out);
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request_out() const;
  ::apollo::routing::RoutingRequest* _internal_mutable_routing_request_out();
  public:
  void unsafe_arena_set_allocated_routing_request_out(
      ::apollo::routing::RoutingRequest* routing_request_out);
  ::apollo::routing::RoutingRequest* unsafe_arena_release_routing_request_out();

  // @@protoc_insertion_point(class_scope:apollo.task_manager.DeadEndRoutingTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::routing::RoutingRequest* routing_request_in_;
    ::apollo::routing::RoutingRequest* routing_request_out_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.task_manager.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit PROTOBUF_CONSTEXPR Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  enum RoutingTaskCase {
    kCycleRoutingTask = 4,
    kParkingRoutingTask = 5,
    kDeadEndRoutingTask = 6,
    ROUTING_TASK_NOT_SET = 0,
  };

  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.task_manager.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTaskTypeFieldNumber = 3,
    kCycleRoutingTaskFieldNumber = 4,
    kParkingRoutingTaskFieldNumber = 5,
    kDeadEndRoutingTaskFieldNumber = 6,
  };
  // optional string task_name = 2;
  bool has_task_name() const;
  private:
  bool _internal_has_task_name() const;
  public:
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_NODISCARD std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.task_manager.TaskType task_type = 3;
  bool has_task_type() const;
  private:
  bool _internal_has_task_type() const;
  public:
  void clear_task_type();
  ::apollo::task_manager::TaskType task_type() const;
  void set_task_type(::apollo::task_manager::TaskType value);
  private:
  ::apollo::task_manager::TaskType _internal_task_type() const;
  void _internal_set_task_type(::apollo::task_manager::TaskType value);
  public:

  // .apollo.task_manager.CycleRoutingTask cycle_routing_task = 4;
  bool has_cycle_routing_task() const;
  private:
  bool _internal_has_cycle_routing_task() const;
  public:
  void clear_cycle_routing_task();
  const ::apollo::task_manager::CycleRoutingTask& cycle_routing_task() const;
  PROTOBUF_NODISCARD ::apollo::task_manager::CycleRoutingTask* release_cycle_routing_task();
  ::apollo::task_manager::CycleRoutingTask* mutable_cycle_routing_task();
  void set_allocated_cycle_routing_task(::apollo::task_manager::CycleRoutingTask* cycle_routing_task);
  private:
  const ::apollo::task_manager::CycleRoutingTask& _internal_cycle_routing_task() const;
  ::apollo::task_manager::CycleRoutingTask* _internal_mutable_cycle_routing_task();
  public:
  void unsafe_arena_set_allocated_cycle_routing_task(
      ::apollo::task_manager::CycleRoutingTask* cycle_routing_task);
  ::apollo::task_manager::CycleRoutingTask* unsafe_arena_release_cycle_routing_task();

  // .apollo.task_manager.ParkingRoutingTask parking_routing_task = 5;
  bool has_parking_routing_task() const;
  private:
  bool _internal_has_parking_routing_task() const;
  public:
  void clear_parking_routing_task();
  const ::apollo::task_manager::ParkingRoutingTask& parking_routing_task() const;
  PROTOBUF_NODISCARD ::apollo::task_manager::ParkingRoutingTask* release_parking_routing_task();
  ::apollo::task_manager::ParkingRoutingTask* mutable_parking_routing_task();
  void set_allocated_parking_routing_task(::apollo::task_manager::ParkingRoutingTask* parking_routing_task);
  private:
  const ::apollo::task_manager::ParkingRoutingTask& _internal_parking_routing_task() const;
  ::apollo::task_manager::ParkingRoutingTask* _internal_mutable_parking_routing_task();
  public:
  void unsafe_arena_set_allocated_parking_routing_task(
      ::apollo::task_manager::ParkingRoutingTask* parking_routing_task);
  ::apollo::task_manager::ParkingRoutingTask* unsafe_arena_release_parking_routing_task();

  // .apollo.task_manager.DeadEndRoutingTask dead_end_routing_task = 6;
  bool has_dead_end_routing_task() const;
  private:
  bool _internal_has_dead_end_routing_task() const;
  public:
  void clear_dead_end_routing_task();
  const ::apollo::task_manager::DeadEndRoutingTask& dead_end_routing_task() const;
  PROTOBUF_NODISCARD ::apollo::task_manager::DeadEndRoutingTask* release_dead_end_routing_task();
  ::apollo::task_manager::DeadEndRoutingTask* mutable_dead_end_routing_task();
  void set_allocated_dead_end_routing_task(::apollo::task_manager::DeadEndRoutingTask* dead_end_routing_task);
  private:
  const ::apollo::task_manager::DeadEndRoutingTask& _internal_dead_end_routing_task() const;
  ::apollo::task_manager::DeadEndRoutingTask* _internal_mutable_dead_end_routing_task();
  public:
  void unsafe_arena_set_allocated_dead_end_routing_task(
      ::apollo::task_manager::DeadEndRoutingTask* dead_end_routing_task);
  ::apollo::task_manager::DeadEndRoutingTask* unsafe_arena_release_dead_end_routing_task();

  void clear_routing_task();
  RoutingTaskCase routing_task_case() const;
  // @@protoc_insertion_point(class_scope:apollo.task_manager.Task)
 private:
  class _Internal;
  void set_has_cycle_routing_task();
  void set_has_parking_routing_task();
  void set_has_dead_end_routing_task();

  inline bool has_routing_task() const;
  inline void clear_has_routing_task();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
    ::apollo::common::Header* header_;
    int task_type_;
    union RoutingTaskUnion {
      constexpr RoutingTaskUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::apollo::task_manager::CycleRoutingTask* cycle_routing_task_;
      ::apollo::task_manager::ParkingRoutingTask* parking_routing_task_;
      ::apollo::task_manager::DeadEndRoutingTask* dead_end_routing_task_;
    } routing_task_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CycleRoutingTask

// optional int32 cycle_num = 1;
inline bool CycleRoutingTask::_internal_has_cycle_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CycleRoutingTask::has_cycle_num() const {
  return _internal_has_cycle_num();
}
inline void CycleRoutingTask::clear_cycle_num() {
  _impl_.cycle_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CycleRoutingTask::_internal_cycle_num() const {
  return _impl_.cycle_num_;
}
inline int32_t CycleRoutingTask::cycle_num() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.CycleRoutingTask.cycle_num)
  return _internal_cycle_num();
}
inline void CycleRoutingTask::_internal_set_cycle_num(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cycle_num_ = value;
}
inline void CycleRoutingTask::set_cycle_num(int32_t value) {
  _internal_set_cycle_num(value);
  // @@protoc_insertion_point(field_set:apollo.task_manager.CycleRoutingTask.cycle_num)
}

// optional .apollo.routing.RoutingRequest routing_request = 2;
inline bool CycleRoutingTask::_internal_has_routing_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_request_ != nullptr);
  return value;
}
inline bool CycleRoutingTask::has_routing_request() const {
  return _internal_has_routing_request();
}
inline const ::apollo::routing::RoutingRequest& CycleRoutingTask::_internal_routing_request() const {
  const ::apollo::routing::RoutingRequest* p = _impl_.routing_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& CycleRoutingTask::routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.CycleRoutingTask.routing_request)
  return _internal_routing_request();
}
inline void CycleRoutingTask::unsafe_arena_set_allocated_routing_request(
    ::apollo::routing::RoutingRequest* routing_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_);
  }
  _impl_.routing_request_ = routing_request;
  if (routing_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.CycleRoutingTask.routing_request)
}
inline ::apollo::routing::RoutingRequest* CycleRoutingTask::release_routing_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingRequest* CycleRoutingTask::unsafe_arena_release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.CycleRoutingTask.routing_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* CycleRoutingTask::_internal_mutable_routing_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routing_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaForAllocation());
    _impl_.routing_request_ = p;
  }
  return _impl_.routing_request_;
}
inline ::apollo::routing::RoutingRequest* CycleRoutingTask::mutable_routing_request() {
  ::apollo::routing::RoutingRequest* _msg = _internal_mutable_routing_request();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.CycleRoutingTask.routing_request)
  return _msg;
}
inline void CycleRoutingTask::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_);
  }
  if (routing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request));
    if (message_arena != submessage_arena) {
      routing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.routing_request_ = routing_request;
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.CycleRoutingTask.routing_request)
}

// -------------------------------------------------------------------

// ParkingRoutingTask

// optional double lane_width = 1;
inline bool ParkingRoutingTask::_internal_has_lane_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ParkingRoutingTask::has_lane_width() const {
  return _internal_has_lane_width();
}
inline void ParkingRoutingTask::clear_lane_width() {
  _impl_.lane_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ParkingRoutingTask::_internal_lane_width() const {
  return _impl_.lane_width_;
}
inline double ParkingRoutingTask::lane_width() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.ParkingRoutingTask.lane_width)
  return _internal_lane_width();
}
inline void ParkingRoutingTask::_internal_set_lane_width(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_width_ = value;
}
inline void ParkingRoutingTask::set_lane_width(double value) {
  _internal_set_lane_width(value);
  // @@protoc_insertion_point(field_set:apollo.task_manager.ParkingRoutingTask.lane_width)
}

// optional .apollo.routing.RoutingRequest routing_request = 2;
inline bool ParkingRoutingTask::_internal_has_routing_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_request_ != nullptr);
  return value;
}
inline bool ParkingRoutingTask::has_routing_request() const {
  return _internal_has_routing_request();
}
inline const ::apollo::routing::RoutingRequest& ParkingRoutingTask::_internal_routing_request() const {
  const ::apollo::routing::RoutingRequest* p = _impl_.routing_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& ParkingRoutingTask::routing_request() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.ParkingRoutingTask.routing_request)
  return _internal_routing_request();
}
inline void ParkingRoutingTask::unsafe_arena_set_allocated_routing_request(
    ::apollo::routing::RoutingRequest* routing_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_);
  }
  _impl_.routing_request_ = routing_request;
  if (routing_request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.ParkingRoutingTask.routing_request)
}
inline ::apollo::routing::RoutingRequest* ParkingRoutingTask::release_routing_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingRequest* ParkingRoutingTask::unsafe_arena_release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.ParkingRoutingTask.routing_request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_;
  _impl_.routing_request_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* ParkingRoutingTask::_internal_mutable_routing_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routing_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaForAllocation());
    _impl_.routing_request_ = p;
  }
  return _impl_.routing_request_;
}
inline ::apollo::routing::RoutingRequest* ParkingRoutingTask::mutable_routing_request() {
  ::apollo::routing::RoutingRequest* _msg = _internal_mutable_routing_request();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.ParkingRoutingTask.routing_request)
  return _msg;
}
inline void ParkingRoutingTask::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_);
  }
  if (routing_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request));
    if (message_arena != submessage_arena) {
      routing_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.routing_request_ = routing_request;
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.ParkingRoutingTask.routing_request)
}

// -------------------------------------------------------------------

// DeadEndRoutingTask

// optional .apollo.routing.RoutingRequest routing_request_in = 2;
inline bool DeadEndRoutingTask::_internal_has_routing_request_in() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_request_in_ != nullptr);
  return value;
}
inline bool DeadEndRoutingTask::has_routing_request_in() const {
  return _internal_has_routing_request_in();
}
inline const ::apollo::routing::RoutingRequest& DeadEndRoutingTask::_internal_routing_request_in() const {
  const ::apollo::routing::RoutingRequest* p = _impl_.routing_request_in_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& DeadEndRoutingTask::routing_request_in() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.DeadEndRoutingTask.routing_request_in)
  return _internal_routing_request_in();
}
inline void DeadEndRoutingTask::unsafe_arena_set_allocated_routing_request_in(
    ::apollo::routing::RoutingRequest* routing_request_in) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_in_);
  }
  _impl_.routing_request_in_ = routing_request_in;
  if (routing_request_in) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.DeadEndRoutingTask.routing_request_in)
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::release_routing_request_in() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_in_;
  _impl_.routing_request_in_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::unsafe_arena_release_routing_request_in() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.DeadEndRoutingTask.routing_request_in)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_in_;
  _impl_.routing_request_in_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::_internal_mutable_routing_request_in() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.routing_request_in_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaForAllocation());
    _impl_.routing_request_in_ = p;
  }
  return _impl_.routing_request_in_;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::mutable_routing_request_in() {
  ::apollo::routing::RoutingRequest* _msg = _internal_mutable_routing_request_in();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.DeadEndRoutingTask.routing_request_in)
  return _msg;
}
inline void DeadEndRoutingTask::set_allocated_routing_request_in(::apollo::routing::RoutingRequest* routing_request_in) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_in_);
  }
  if (routing_request_in) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request_in));
    if (message_arena != submessage_arena) {
      routing_request_in = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request_in, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.routing_request_in_ = routing_request_in;
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.DeadEndRoutingTask.routing_request_in)
}

// optional .apollo.routing.RoutingRequest routing_request_out = 3;
inline bool DeadEndRoutingTask::_internal_has_routing_request_out() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.routing_request_out_ != nullptr);
  return value;
}
inline bool DeadEndRoutingTask::has_routing_request_out() const {
  return _internal_has_routing_request_out();
}
inline const ::apollo::routing::RoutingRequest& DeadEndRoutingTask::_internal_routing_request_out() const {
  const ::apollo::routing::RoutingRequest* p = _impl_.routing_request_out_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::routing::RoutingRequest&>(
      ::apollo::routing::_RoutingRequest_default_instance_);
}
inline const ::apollo::routing::RoutingRequest& DeadEndRoutingTask::routing_request_out() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.DeadEndRoutingTask.routing_request_out)
  return _internal_routing_request_out();
}
inline void DeadEndRoutingTask::unsafe_arena_set_allocated_routing_request_out(
    ::apollo::routing::RoutingRequest* routing_request_out) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_out_);
  }
  _impl_.routing_request_out_ = routing_request_out;
  if (routing_request_out) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.DeadEndRoutingTask.routing_request_out)
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::release_routing_request_out() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_out_;
  _impl_.routing_request_out_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::unsafe_arena_release_routing_request_out() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.DeadEndRoutingTask.routing_request_out)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::routing::RoutingRequest* temp = _impl_.routing_request_out_;
  _impl_.routing_request_out_ = nullptr;
  return temp;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::_internal_mutable_routing_request_out() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.routing_request_out_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaForAllocation());
    _impl_.routing_request_out_ = p;
  }
  return _impl_.routing_request_out_;
}
inline ::apollo::routing::RoutingRequest* DeadEndRoutingTask::mutable_routing_request_out() {
  ::apollo::routing::RoutingRequest* _msg = _internal_mutable_routing_request_out();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.DeadEndRoutingTask.routing_request_out)
  return _msg;
}
inline void DeadEndRoutingTask::set_allocated_routing_request_out(::apollo::routing::RoutingRequest* routing_request_out) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_request_out_);
  }
  if (routing_request_out) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_request_out));
    if (message_arena != submessage_arena) {
      routing_request_out = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_request_out, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.routing_request_out_ = routing_request_out;
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.DeadEndRoutingTask.routing_request_out)
}

// -------------------------------------------------------------------

// Task

// optional .apollo.common.Header header = 1;
inline bool Task::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Task::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& Task::_internal_header() const {
  const ::apollo::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& Task::header() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.header)
  return _internal_header();
}
inline void Task::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.Task.header)
}
inline ::apollo::common::Header* Task::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::common::Header* Task::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.Task.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* Task::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::common::Header* Task::mutable_header() {
  ::apollo::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.Task.header)
  return _msg;
}
inline void Task::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.Task.header)
}

// optional string task_name = 2;
inline bool Task::_internal_has_task_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Task::has_task_name() const {
  return _internal_has_task_name();
}
inline void Task::clear_task_name() {
  _impl_.task_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Task::task_name() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.task_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.task_manager.Task.task_name)
}
inline std::string* Task::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.Task.task_name)
  return _s;
}
inline const std::string& Task::_internal_task_name() const {
  return _impl_.task_name_.Get();
}
inline void Task::_internal_set_task_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.task_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.task_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Task::release_task_name() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.Task.task_name)
  if (!_internal_has_task_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.task_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_name_.IsDefault()) {
    _impl_.task_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Task::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.task_name_.SetAllocated(task_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.task_name_.IsDefault()) {
    _impl_.task_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.Task.task_name)
}

// optional .apollo.task_manager.TaskType task_type = 3;
inline bool Task::_internal_has_task_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Task::has_task_type() const {
  return _internal_has_task_type();
}
inline void Task::clear_task_type() {
  _impl_.task_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::task_manager::TaskType Task::_internal_task_type() const {
  return static_cast< ::apollo::task_manager::TaskType >(_impl_.task_type_);
}
inline ::apollo::task_manager::TaskType Task::task_type() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.task_type)
  return _internal_task_type();
}
inline void Task::_internal_set_task_type(::apollo::task_manager::TaskType value) {
  assert(::apollo::task_manager::TaskType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.task_type_ = value;
}
inline void Task::set_task_type(::apollo::task_manager::TaskType value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:apollo.task_manager.Task.task_type)
}

// .apollo.task_manager.CycleRoutingTask cycle_routing_task = 4;
inline bool Task::_internal_has_cycle_routing_task() const {
  return routing_task_case() == kCycleRoutingTask;
}
inline bool Task::has_cycle_routing_task() const {
  return _internal_has_cycle_routing_task();
}
inline void Task::set_has_cycle_routing_task() {
  _impl_._oneof_case_[0] = kCycleRoutingTask;
}
inline void Task::clear_cycle_routing_task() {
  if (_internal_has_cycle_routing_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.routing_task_.cycle_routing_task_;
    }
    clear_has_routing_task();
  }
}
inline ::apollo::task_manager::CycleRoutingTask* Task::release_cycle_routing_task() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.Task.cycle_routing_task)
  if (_internal_has_cycle_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::CycleRoutingTask* temp = _impl_.routing_task_.cycle_routing_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.routing_task_.cycle_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::task_manager::CycleRoutingTask& Task::_internal_cycle_routing_task() const {
  return _internal_has_cycle_routing_task()
      ? *_impl_.routing_task_.cycle_routing_task_
      : reinterpret_cast< ::apollo::task_manager::CycleRoutingTask&>(::apollo::task_manager::_CycleRoutingTask_default_instance_);
}
inline const ::apollo::task_manager::CycleRoutingTask& Task::cycle_routing_task() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.cycle_routing_task)
  return _internal_cycle_routing_task();
}
inline ::apollo::task_manager::CycleRoutingTask* Task::unsafe_arena_release_cycle_routing_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.task_manager.Task.cycle_routing_task)
  if (_internal_has_cycle_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::CycleRoutingTask* temp = _impl_.routing_task_.cycle_routing_task_;
    _impl_.routing_task_.cycle_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_cycle_routing_task(::apollo::task_manager::CycleRoutingTask* cycle_routing_task) {
  clear_routing_task();
  if (cycle_routing_task) {
    set_has_cycle_routing_task();
    _impl_.routing_task_.cycle_routing_task_ = cycle_routing_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.Task.cycle_routing_task)
}
inline ::apollo::task_manager::CycleRoutingTask* Task::_internal_mutable_cycle_routing_task() {
  if (!_internal_has_cycle_routing_task()) {
    clear_routing_task();
    set_has_cycle_routing_task();
    _impl_.routing_task_.cycle_routing_task_ = CreateMaybeMessage< ::apollo::task_manager::CycleRoutingTask >(GetArenaForAllocation());
  }
  return _impl_.routing_task_.cycle_routing_task_;
}
inline ::apollo::task_manager::CycleRoutingTask* Task::mutable_cycle_routing_task() {
  ::apollo::task_manager::CycleRoutingTask* _msg = _internal_mutable_cycle_routing_task();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.Task.cycle_routing_task)
  return _msg;
}

// .apollo.task_manager.ParkingRoutingTask parking_routing_task = 5;
inline bool Task::_internal_has_parking_routing_task() const {
  return routing_task_case() == kParkingRoutingTask;
}
inline bool Task::has_parking_routing_task() const {
  return _internal_has_parking_routing_task();
}
inline void Task::set_has_parking_routing_task() {
  _impl_._oneof_case_[0] = kParkingRoutingTask;
}
inline void Task::clear_parking_routing_task() {
  if (_internal_has_parking_routing_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.routing_task_.parking_routing_task_;
    }
    clear_has_routing_task();
  }
}
inline ::apollo::task_manager::ParkingRoutingTask* Task::release_parking_routing_task() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.Task.parking_routing_task)
  if (_internal_has_parking_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::ParkingRoutingTask* temp = _impl_.routing_task_.parking_routing_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.routing_task_.parking_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::task_manager::ParkingRoutingTask& Task::_internal_parking_routing_task() const {
  return _internal_has_parking_routing_task()
      ? *_impl_.routing_task_.parking_routing_task_
      : reinterpret_cast< ::apollo::task_manager::ParkingRoutingTask&>(::apollo::task_manager::_ParkingRoutingTask_default_instance_);
}
inline const ::apollo::task_manager::ParkingRoutingTask& Task::parking_routing_task() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.parking_routing_task)
  return _internal_parking_routing_task();
}
inline ::apollo::task_manager::ParkingRoutingTask* Task::unsafe_arena_release_parking_routing_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.task_manager.Task.parking_routing_task)
  if (_internal_has_parking_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::ParkingRoutingTask* temp = _impl_.routing_task_.parking_routing_task_;
    _impl_.routing_task_.parking_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_parking_routing_task(::apollo::task_manager::ParkingRoutingTask* parking_routing_task) {
  clear_routing_task();
  if (parking_routing_task) {
    set_has_parking_routing_task();
    _impl_.routing_task_.parking_routing_task_ = parking_routing_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.Task.parking_routing_task)
}
inline ::apollo::task_manager::ParkingRoutingTask* Task::_internal_mutable_parking_routing_task() {
  if (!_internal_has_parking_routing_task()) {
    clear_routing_task();
    set_has_parking_routing_task();
    _impl_.routing_task_.parking_routing_task_ = CreateMaybeMessage< ::apollo::task_manager::ParkingRoutingTask >(GetArenaForAllocation());
  }
  return _impl_.routing_task_.parking_routing_task_;
}
inline ::apollo::task_manager::ParkingRoutingTask* Task::mutable_parking_routing_task() {
  ::apollo::task_manager::ParkingRoutingTask* _msg = _internal_mutable_parking_routing_task();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.Task.parking_routing_task)
  return _msg;
}

// .apollo.task_manager.DeadEndRoutingTask dead_end_routing_task = 6;
inline bool Task::_internal_has_dead_end_routing_task() const {
  return routing_task_case() == kDeadEndRoutingTask;
}
inline bool Task::has_dead_end_routing_task() const {
  return _internal_has_dead_end_routing_task();
}
inline void Task::set_has_dead_end_routing_task() {
  _impl_._oneof_case_[0] = kDeadEndRoutingTask;
}
inline void Task::clear_dead_end_routing_task() {
  if (_internal_has_dead_end_routing_task()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.routing_task_.dead_end_routing_task_;
    }
    clear_has_routing_task();
  }
}
inline ::apollo::task_manager::DeadEndRoutingTask* Task::release_dead_end_routing_task() {
  // @@protoc_insertion_point(field_release:apollo.task_manager.Task.dead_end_routing_task)
  if (_internal_has_dead_end_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::DeadEndRoutingTask* temp = _impl_.routing_task_.dead_end_routing_task_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.routing_task_.dead_end_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::apollo::task_manager::DeadEndRoutingTask& Task::_internal_dead_end_routing_task() const {
  return _internal_has_dead_end_routing_task()
      ? *_impl_.routing_task_.dead_end_routing_task_
      : reinterpret_cast< ::apollo::task_manager::DeadEndRoutingTask&>(::apollo::task_manager::_DeadEndRoutingTask_default_instance_);
}
inline const ::apollo::task_manager::DeadEndRoutingTask& Task::dead_end_routing_task() const {
  // @@protoc_insertion_point(field_get:apollo.task_manager.Task.dead_end_routing_task)
  return _internal_dead_end_routing_task();
}
inline ::apollo::task_manager::DeadEndRoutingTask* Task::unsafe_arena_release_dead_end_routing_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:apollo.task_manager.Task.dead_end_routing_task)
  if (_internal_has_dead_end_routing_task()) {
    clear_has_routing_task();
    ::apollo::task_manager::DeadEndRoutingTask* temp = _impl_.routing_task_.dead_end_routing_task_;
    _impl_.routing_task_.dead_end_routing_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_dead_end_routing_task(::apollo::task_manager::DeadEndRoutingTask* dead_end_routing_task) {
  clear_routing_task();
  if (dead_end_routing_task) {
    set_has_dead_end_routing_task();
    _impl_.routing_task_.dead_end_routing_task_ = dead_end_routing_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.task_manager.Task.dead_end_routing_task)
}
inline ::apollo::task_manager::DeadEndRoutingTask* Task::_internal_mutable_dead_end_routing_task() {
  if (!_internal_has_dead_end_routing_task()) {
    clear_routing_task();
    set_has_dead_end_routing_task();
    _impl_.routing_task_.dead_end_routing_task_ = CreateMaybeMessage< ::apollo::task_manager::DeadEndRoutingTask >(GetArenaForAllocation());
  }
  return _impl_.routing_task_.dead_end_routing_task_;
}
inline ::apollo::task_manager::DeadEndRoutingTask* Task::mutable_dead_end_routing_task() {
  ::apollo::task_manager::DeadEndRoutingTask* _msg = _internal_mutable_dead_end_routing_task();
  // @@protoc_insertion_point(field_mutable:apollo.task_manager.Task.dead_end_routing_task)
  return _msg;
}

inline bool Task::has_routing_task() const {
  return routing_task_case() != ROUTING_TASK_NOT_SET;
}
inline void Task::clear_has_routing_task() {
  _impl_._oneof_case_[0] = ROUTING_TASK_NOT_SET;
}
inline Task::RoutingTaskCase Task::routing_task_case() const {
  return Task::RoutingTaskCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task_manager
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::task_manager::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::task_manager::TaskType>() {
  return ::apollo::task_manager::TaskType_descriptor();
}
template <> struct is_proto_enum< ::apollo::task_manager::JunctionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::task_manager::JunctionType>() {
  return ::apollo::task_manager::JunctionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto
