// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/task_manager/proto/task_manager_config.proto

#include "modules/task_manager/proto/task_manager_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace task_manager {
PROTOBUF_CONSTEXPR TopicConfig::TopicConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_request_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.routing_response_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.localization_pose_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.planning_topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct TopicConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicConfigDefaultTypeInternal() {}
  union {
    TopicConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicConfigDefaultTypeInternal _TopicConfig_default_instance_;
PROTOBUF_CONSTEXPR TaskManagerConfig::TaskManagerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_config_)*/nullptr} {}
struct TaskManagerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskManagerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskManagerConfigDefaultTypeInternal() {}
  union {
    TaskManagerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskManagerConfigDefaultTypeInternal _TaskManagerConfig_default_instance_;
}  // namespace task_manager
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _impl_.routing_request_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _impl_.routing_response_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _impl_.localization_pose_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TopicConfig, _impl_.planning_topic_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TaskManagerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TaskManagerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::TaskManagerConfig, _impl_.topic_config_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::apollo::task_manager::TopicConfig)},
  { 14, 21, -1, sizeof(::apollo::task_manager::TaskManagerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::task_manager::_TopicConfig_default_instance_._instance,
  &::apollo::task_manager::_TaskManagerConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n4modules/task_manager/proto/task_manage"
  "r_config.proto\022\023apollo.task_manager\"\205\001\n\013"
  "TopicConfig\022\035\n\025routing_request_topic\030\001 \001"
  "(\t\022\036\n\026routing_response_topic\030\002 \001(\t\022\037\n\027lo"
  "calization_pose_topic\030\003 \001(\t\022\026\n\016planning_"
  "topic\030\004 \001(\t\"K\n\021TaskManagerConfig\0226\n\014topi"
  "c_config\030\001 \001(\0132 .apollo.task_manager.Top"
  "icConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto = {
    false, false, 288, descriptor_table_protodef_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto,
    "modules/task_manager/proto/task_manager_config.proto",
    &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto, file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto,
    file_level_service_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto(&descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto);
namespace apollo {
namespace task_manager {

// ===================================================================

class TopicConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicConfig>()._impl_._has_bits_);
  static void set_has_routing_request_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_routing_response_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_localization_pose_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_planning_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TopicConfig::TopicConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.TopicConfig)
}
TopicConfig::TopicConfig(const TopicConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_topic_){}
    , decltype(_impl_.routing_response_topic_){}
    , decltype(_impl_.localization_pose_topic_){}
    , decltype(_impl_.planning_topic_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.routing_request_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_routing_request_topic()) {
    _impl_.routing_request_topic_.Set(from._internal_routing_request_topic(), 
      GetArenaForAllocation());
  }
  _impl_.routing_response_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_routing_response_topic()) {
    _impl_.routing_response_topic_.Set(from._internal_routing_response_topic(), 
      GetArenaForAllocation());
  }
  _impl_.localization_pose_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_pose_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_localization_pose_topic()) {
    _impl_.localization_pose_topic_.Set(from._internal_localization_pose_topic(), 
      GetArenaForAllocation());
  }
  _impl_.planning_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_planning_topic()) {
    _impl_.planning_topic_.Set(from._internal_planning_topic(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.TopicConfig)
}

inline void TopicConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_topic_){}
    , decltype(_impl_.routing_response_topic_){}
    , decltype(_impl_.localization_pose_topic_){}
    , decltype(_impl_.planning_topic_){}
  };
  _impl_.routing_request_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_request_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_response_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.routing_response_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.localization_pose_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.localization_pose_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.planning_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.planning_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TopicConfig::~TopicConfig() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.TopicConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routing_request_topic_.Destroy();
  _impl_.routing_response_topic_.Destroy();
  _impl_.localization_pose_topic_.Destroy();
  _impl_.planning_topic_.Destroy();
}

void TopicConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.TopicConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.routing_request_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.routing_response_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.localization_pose_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.planning_topic_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string routing_request_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_routing_request_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.task_manager.TopicConfig.routing_request_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string routing_response_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_routing_response_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.task_manager.TopicConfig.routing_response_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string localization_pose_topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_localization_pose_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.task_manager.TopicConfig.localization_pose_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string planning_topic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_planning_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.task_manager.TopicConfig.planning_topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.TopicConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string routing_request_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_routing_request_topic().data(), static_cast<int>(this->_internal_routing_request_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.task_manager.TopicConfig.routing_request_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_routing_request_topic(), target);
  }

  // optional string routing_response_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_routing_response_topic().data(), static_cast<int>(this->_internal_routing_response_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.task_manager.TopicConfig.routing_response_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_routing_response_topic(), target);
  }

  // optional string localization_pose_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_localization_pose_topic().data(), static_cast<int>(this->_internal_localization_pose_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.task_manager.TopicConfig.localization_pose_topic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_localization_pose_topic(), target);
  }

  // optional string planning_topic = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_planning_topic().data(), static_cast<int>(this->_internal_planning_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.task_manager.TopicConfig.planning_topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_planning_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.TopicConfig)
  return target;
}

size_t TopicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.TopicConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string routing_request_topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_routing_request_topic());
    }

    // optional string routing_response_topic = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_routing_response_topic());
    }

    // optional string localization_pose_topic = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_localization_pose_topic());
    }

    // optional string planning_topic = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_planning_topic());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicConfig::GetClassData() const { return &_class_data_; }

void TopicConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicConfig *>(to)->MergeFrom(
      static_cast<const TopicConfig &>(from));
}


void TopicConfig::MergeFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_routing_request_topic(from._internal_routing_request_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_routing_response_topic(from._internal_routing_response_topic());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_localization_pose_topic(from._internal_localization_pose_topic());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_planning_topic(from._internal_planning_topic());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicConfig::CopyFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConfig::IsInitialized() const {
  return true;
}

void TopicConfig::InternalSwap(TopicConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_request_topic_, lhs_arena,
      &other->_impl_.routing_request_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.routing_response_topic_, lhs_arena,
      &other->_impl_.routing_response_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.localization_pose_topic_, lhs_arena,
      &other->_impl_.localization_pose_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.planning_topic_, lhs_arena,
      &other->_impl_.planning_topic_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto[0]);
}

// ===================================================================

class TaskManagerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TaskManagerConfig>()._impl_._has_bits_);
  static const ::apollo::task_manager::TopicConfig& topic_config(const TaskManagerConfig* msg);
  static void set_has_topic_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::task_manager::TopicConfig&
TaskManagerConfig::_Internal::topic_config(const TaskManagerConfig* msg) {
  return *msg->_impl_.topic_config_;
}
TaskManagerConfig::TaskManagerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.TaskManagerConfig)
}
TaskManagerConfig::TaskManagerConfig(const TaskManagerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic_config()) {
    _impl_.topic_config_ = new ::apollo::task_manager::TopicConfig(*from._impl_.topic_config_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.TaskManagerConfig)
}

inline void TaskManagerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_config_){nullptr}
  };
}

TaskManagerConfig::~TaskManagerConfig() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.TaskManagerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskManagerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_config_;
}

void TaskManagerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.TaskManagerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.topic_config_ != nullptr);
    _impl_.topic_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskManagerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.task_manager.TopicConfig topic_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskManagerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.TaskManagerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.task_manager.TopicConfig topic_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic_config(this),
        _Internal::topic_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.TaskManagerConfig)
  return target;
}

size_t TaskManagerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.TaskManagerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.task_manager.TopicConfig topic_config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskManagerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TaskManagerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskManagerConfig::GetClassData() const { return &_class_data_; }

void TaskManagerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TaskManagerConfig *>(to)->MergeFrom(
      static_cast<const TaskManagerConfig &>(from));
}


void TaskManagerConfig::MergeFrom(const TaskManagerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.TaskManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic_config()) {
    _internal_mutable_topic_config()->::apollo::task_manager::TopicConfig::MergeFrom(from._internal_topic_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskManagerConfig::CopyFrom(const TaskManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.TaskManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskManagerConfig::IsInitialized() const {
  return true;
}

void TaskManagerConfig::InternalSwap(TaskManagerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.topic_config_, other->_impl_.topic_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskManagerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace task_manager
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::task_manager::TopicConfig*
Arena::CreateMaybeMessage< ::apollo::task_manager::TopicConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::TopicConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::task_manager::TaskManagerConfig*
Arena::CreateMaybeMessage< ::apollo::task_manager::TaskManagerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::TaskManagerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
