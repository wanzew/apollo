// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/task_manager/proto/task_manager.proto

#include "modules/task_manager/proto/task_manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace task_manager {
PROTOBUF_CONSTEXPR CycleRoutingTask::CycleRoutingTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_request_)*/nullptr
  , /*decltype(_impl_.cycle_num_)*/0} {}
struct CycleRoutingTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CycleRoutingTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CycleRoutingTaskDefaultTypeInternal() {}
  union {
    CycleRoutingTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CycleRoutingTaskDefaultTypeInternal _CycleRoutingTask_default_instance_;
PROTOBUF_CONSTEXPR ParkingRoutingTask::ParkingRoutingTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_request_)*/nullptr
  , /*decltype(_impl_.lane_width_)*/0} {}
struct ParkingRoutingTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParkingRoutingTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParkingRoutingTaskDefaultTypeInternal() {}
  union {
    ParkingRoutingTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParkingRoutingTaskDefaultTypeInternal _ParkingRoutingTask_default_instance_;
PROTOBUF_CONSTEXPR DeadEndRoutingTask::DeadEndRoutingTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.routing_request_in_)*/nullptr
  , /*decltype(_impl_.routing_request_out_)*/nullptr} {}
struct DeadEndRoutingTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeadEndRoutingTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeadEndRoutingTaskDefaultTypeInternal() {}
  union {
    DeadEndRoutingTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeadEndRoutingTaskDefaultTypeInternal _DeadEndRoutingTask_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.task_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.task_type_)*/0
  , /*decltype(_impl_.routing_task_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace task_manager
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto = nullptr;

const uint32_t TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::CycleRoutingTask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::CycleRoutingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::CycleRoutingTask, _impl_.cycle_num_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::CycleRoutingTask, _impl_.routing_request_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::ParkingRoutingTask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::ParkingRoutingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::ParkingRoutingTask, _impl_.lane_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::ParkingRoutingTask, _impl_.routing_request_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::DeadEndRoutingTask, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::DeadEndRoutingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::DeadEndRoutingTask, _impl_.routing_request_in_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::DeadEndRoutingTask, _impl_.routing_request_out_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_.task_name_),
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_.task_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::apollo::task_manager::Task, _impl_.routing_task_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::task_manager::CycleRoutingTask)},
  { 10, 18, -1, sizeof(::apollo::task_manager::ParkingRoutingTask)},
  { 20, 28, -1, sizeof(::apollo::task_manager::DeadEndRoutingTask)},
  { 30, 43, -1, sizeof(::apollo::task_manager::Task)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::task_manager::_CycleRoutingTask_default_instance_._instance,
  &::apollo::task_manager::_ParkingRoutingTask_default_instance_._instance,
  &::apollo::task_manager::_DeadEndRoutingTask_default_instance_._instance,
  &::apollo::task_manager::_Task_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-modules/task_manager/proto/task_manage"
  "r.proto\022\023apollo.task_manager\032!modules/co"
  "mmon/proto/header.proto\032#modules/routing"
  "/proto/routing.proto\032)modules/map/proto/"
  "map_parking_space.proto\"^\n\020CycleRoutingT"
  "ask\022\021\n\tcycle_num\030\001 \001(\005\0227\n\017routing_reques"
  "t\030\002 \001(\0132\036.apollo.routing.RoutingRequest\""
  "a\n\022ParkingRoutingTask\022\022\n\nlane_width\030\001 \001("
  "\001\0227\n\017routing_request\030\002 \001(\0132\036.apollo.rout"
  "ing.RoutingRequest\"\215\001\n\022DeadEndRoutingTas"
  "k\022:\n\022routing_request_in\030\002 \001(\0132\036.apollo.r"
  "outing.RoutingRequest\022;\n\023routing_request"
  "_out\030\003 \001(\0132\036.apollo.routing.RoutingReque"
  "st\"\332\002\n\004Task\022%\n\006header\030\001 \001(\0132\025.apollo.com"
  "mon.Header\022\021\n\ttask_name\030\002 \001(\t\0220\n\ttask_ty"
  "pe\030\003 \001(\0162\035.apollo.task_manager.TaskType\022"
  "C\n\022cycle_routing_task\030\004 \001(\0132%.apollo.tas"
  "k_manager.CycleRoutingTaskH\000\022G\n\024parking_"
  "routing_task\030\005 \001(\0132\'.apollo.task_manager"
  ".ParkingRoutingTaskH\000\022H\n\025dead_end_routin"
  "g_task\030\006 \001(\0132\'.apollo.task_manager.DeadE"
  "ndRoutingTaskH\000B\016\n\014routing_task*H\n\010TaskT"
  "ype\022\021\n\rCYCLE_ROUTING\020\000\022\023\n\017PARKING_ROUTIN"
  "G\020\001\022\024\n\020DEAD_END_ROUTING\020\003*d\n\014JunctionTyp"
  "e\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_ROAD\020\001\022\016\n\nCROSS_ROA"
  "D\020\002\022\r\n\tFORK_ROAD\020\003\022\r\n\tMAIN_SIDE\020\004\022\014\n\010DEA"
  "D_END\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
  &::descriptor_table_modules_2frouting_2fproto_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto = {
    false, false, 1047, descriptor_table_protodef_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto,
    "modules/task_manager/proto/task_manager.proto",
    &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once, descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto::offsets,
    file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto, file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto,
    file_level_service_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_getter() {
  return &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto(&descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto);
namespace apollo {
namespace task_manager {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto);
  return file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[0];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JunctionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto);
  return file_level_enum_descriptors_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[1];
}
bool JunctionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CycleRoutingTask::_Internal {
 public:
  using HasBits = decltype(std::declval<CycleRoutingTask>()._impl_._has_bits_);
  static void set_has_cycle_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request(const CycleRoutingTask* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::RoutingRequest&
CycleRoutingTask::_Internal::routing_request(const CycleRoutingTask* msg) {
  return *msg->_impl_.routing_request_;
}
void CycleRoutingTask::clear_routing_request() {
  if (_impl_.routing_request_ != nullptr) _impl_.routing_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CycleRoutingTask::CycleRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.CycleRoutingTask)
}
CycleRoutingTask::CycleRoutingTask(const CycleRoutingTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.cycle_num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_request()) {
    _impl_.routing_request_ = new ::apollo::routing::RoutingRequest(*from._impl_.routing_request_);
  }
  _impl_.cycle_num_ = from._impl_.cycle_num_;
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.CycleRoutingTask)
}

inline void CycleRoutingTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.cycle_num_){0}
  };
}

CycleRoutingTask::~CycleRoutingTask() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.CycleRoutingTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CycleRoutingTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_request_;
}

void CycleRoutingTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CycleRoutingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.CycleRoutingTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.routing_request_ != nullptr);
    _impl_.routing_request_->Clear();
  }
  _impl_.cycle_num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CycleRoutingTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 cycle_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cycle_num(&has_bits);
          _impl_.cycle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CycleRoutingTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.CycleRoutingTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 cycle_num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cycle_num(), target);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing_request(this),
        _Internal::routing_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.CycleRoutingTask)
  return target;
}

size_t CycleRoutingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.CycleRoutingTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.routing.RoutingRequest routing_request = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_request_);
    }

    // optional int32 cycle_num = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cycle_num());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CycleRoutingTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CycleRoutingTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CycleRoutingTask::GetClassData() const { return &_class_data_; }

void CycleRoutingTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CycleRoutingTask *>(to)->MergeFrom(
      static_cast<const CycleRoutingTask &>(from));
}


void CycleRoutingTask::MergeFrom(const CycleRoutingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.CycleRoutingTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.cycle_num_ = from._impl_.cycle_num_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CycleRoutingTask::CopyFrom(const CycleRoutingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.CycleRoutingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CycleRoutingTask::IsInitialized() const {
  return true;
}

void CycleRoutingTask::InternalSwap(CycleRoutingTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CycleRoutingTask, _impl_.cycle_num_)
      + sizeof(CycleRoutingTask::_impl_.cycle_num_)
      - PROTOBUF_FIELD_OFFSET(CycleRoutingTask, _impl_.routing_request_)>(
          reinterpret_cast<char*>(&_impl_.routing_request_),
          reinterpret_cast<char*>(&other->_impl_.routing_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CycleRoutingTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[0]);
}

// ===================================================================

class ParkingRoutingTask::_Internal {
 public:
  using HasBits = decltype(std::declval<ParkingRoutingTask>()._impl_._has_bits_);
  static void set_has_lane_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request(const ParkingRoutingTask* msg);
  static void set_has_routing_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::routing::RoutingRequest&
ParkingRoutingTask::_Internal::routing_request(const ParkingRoutingTask* msg) {
  return *msg->_impl_.routing_request_;
}
void ParkingRoutingTask::clear_routing_request() {
  if (_impl_.routing_request_ != nullptr) _impl_.routing_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ParkingRoutingTask::ParkingRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.ParkingRoutingTask)
}
ParkingRoutingTask::ParkingRoutingTask(const ParkingRoutingTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.lane_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_request()) {
    _impl_.routing_request_ = new ::apollo::routing::RoutingRequest(*from._impl_.routing_request_);
  }
  _impl_.lane_width_ = from._impl_.lane_width_;
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.ParkingRoutingTask)
}

inline void ParkingRoutingTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_){nullptr}
    , decltype(_impl_.lane_width_){0}
  };
}

ParkingRoutingTask::~ParkingRoutingTask() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.ParkingRoutingTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ParkingRoutingTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_request_;
}

void ParkingRoutingTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ParkingRoutingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.ParkingRoutingTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.routing_request_ != nullptr);
    _impl_.routing_request_->Clear();
  }
  _impl_.lane_width_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParkingRoutingTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lane_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lane_width(&has_bits);
          _impl_.lane_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ParkingRoutingTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.ParkingRoutingTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double lane_width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lane_width(), target);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing_request(this),
        _Internal::routing_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.ParkingRoutingTask)
  return target;
}

size_t ParkingRoutingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.ParkingRoutingTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.routing.RoutingRequest routing_request = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_request_);
    }

    // optional double lane_width = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParkingRoutingTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParkingRoutingTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParkingRoutingTask::GetClassData() const { return &_class_data_; }

void ParkingRoutingTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParkingRoutingTask *>(to)->MergeFrom(
      static_cast<const ParkingRoutingTask &>(from));
}


void ParkingRoutingTask::MergeFrom(const ParkingRoutingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.ParkingRoutingTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.lane_width_ = from._impl_.lane_width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParkingRoutingTask::CopyFrom(const ParkingRoutingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.ParkingRoutingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingRoutingTask::IsInitialized() const {
  return true;
}

void ParkingRoutingTask::InternalSwap(ParkingRoutingTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParkingRoutingTask, _impl_.lane_width_)
      + sizeof(ParkingRoutingTask::_impl_.lane_width_)
      - PROTOBUF_FIELD_OFFSET(ParkingRoutingTask, _impl_.routing_request_)>(
          reinterpret_cast<char*>(&_impl_.routing_request_),
          reinterpret_cast<char*>(&other->_impl_.routing_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParkingRoutingTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[1]);
}

// ===================================================================

class DeadEndRoutingTask::_Internal {
 public:
  using HasBits = decltype(std::declval<DeadEndRoutingTask>()._impl_._has_bits_);
  static const ::apollo::routing::RoutingRequest& routing_request_in(const DeadEndRoutingTask* msg);
  static void set_has_routing_request_in(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::routing::RoutingRequest& routing_request_out(const DeadEndRoutingTask* msg);
  static void set_has_routing_request_out(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::routing::RoutingRequest&
DeadEndRoutingTask::_Internal::routing_request_in(const DeadEndRoutingTask* msg) {
  return *msg->_impl_.routing_request_in_;
}
const ::apollo::routing::RoutingRequest&
DeadEndRoutingTask::_Internal::routing_request_out(const DeadEndRoutingTask* msg) {
  return *msg->_impl_.routing_request_out_;
}
void DeadEndRoutingTask::clear_routing_request_in() {
  if (_impl_.routing_request_in_ != nullptr) _impl_.routing_request_in_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DeadEndRoutingTask::clear_routing_request_out() {
  if (_impl_.routing_request_out_ != nullptr) _impl_.routing_request_out_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DeadEndRoutingTask::DeadEndRoutingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.DeadEndRoutingTask)
}
DeadEndRoutingTask::DeadEndRoutingTask(const DeadEndRoutingTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_in_){nullptr}
    , decltype(_impl_.routing_request_out_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_request_in()) {
    _impl_.routing_request_in_ = new ::apollo::routing::RoutingRequest(*from._impl_.routing_request_in_);
  }
  if (from._internal_has_routing_request_out()) {
    _impl_.routing_request_out_ = new ::apollo::routing::RoutingRequest(*from._impl_.routing_request_out_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.DeadEndRoutingTask)
}

inline void DeadEndRoutingTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.routing_request_in_){nullptr}
    , decltype(_impl_.routing_request_out_){nullptr}
  };
}

DeadEndRoutingTask::~DeadEndRoutingTask() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.DeadEndRoutingTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeadEndRoutingTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_request_in_;
  if (this != internal_default_instance()) delete _impl_.routing_request_out_;
}

void DeadEndRoutingTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeadEndRoutingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.DeadEndRoutingTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.routing_request_in_ != nullptr);
      _impl_.routing_request_in_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.routing_request_out_ != nullptr);
      _impl_.routing_request_out_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeadEndRoutingTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.routing.RoutingRequest routing_request_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request_in(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.routing.RoutingRequest routing_request_out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_request_out(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeadEndRoutingTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.DeadEndRoutingTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.routing.RoutingRequest routing_request_in = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::routing_request_in(this),
        _Internal::routing_request_in(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.routing.RoutingRequest routing_request_out = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::routing_request_out(this),
        _Internal::routing_request_out(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.DeadEndRoutingTask)
  return target;
}

size_t DeadEndRoutingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.DeadEndRoutingTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.routing.RoutingRequest routing_request_in = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_request_in_);
    }

    // optional .apollo.routing.RoutingRequest routing_request_out = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_request_out_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeadEndRoutingTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeadEndRoutingTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeadEndRoutingTask::GetClassData() const { return &_class_data_; }

void DeadEndRoutingTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeadEndRoutingTask *>(to)->MergeFrom(
      static_cast<const DeadEndRoutingTask &>(from));
}


void DeadEndRoutingTask::MergeFrom(const DeadEndRoutingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.DeadEndRoutingTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing_request_in()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request_in());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_routing_request_out()->::apollo::routing::RoutingRequest::MergeFrom(from._internal_routing_request_out());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeadEndRoutingTask::CopyFrom(const DeadEndRoutingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.DeadEndRoutingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadEndRoutingTask::IsInitialized() const {
  return true;
}

void DeadEndRoutingTask::InternalSwap(DeadEndRoutingTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeadEndRoutingTask, _impl_.routing_request_out_)
      + sizeof(DeadEndRoutingTask::_impl_.routing_request_out_)
      - PROTOBUF_FIELD_OFFSET(DeadEndRoutingTask, _impl_.routing_request_in_)>(
          reinterpret_cast<char*>(&_impl_.routing_request_in_),
          reinterpret_cast<char*>(&other->_impl_.routing_request_in_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeadEndRoutingTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[2]);
}

// ===================================================================

class Task::_Internal {
 public:
  using HasBits = decltype(std::declval<Task>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const Task* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_task_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_task_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::task_manager::CycleRoutingTask& cycle_routing_task(const Task* msg);
  static const ::apollo::task_manager::ParkingRoutingTask& parking_routing_task(const Task* msg);
  static const ::apollo::task_manager::DeadEndRoutingTask& dead_end_routing_task(const Task* msg);
};

const ::apollo::common::Header&
Task::_Internal::header(const Task* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::task_manager::CycleRoutingTask&
Task::_Internal::cycle_routing_task(const Task* msg) {
  return *msg->_impl_.routing_task_.cycle_routing_task_;
}
const ::apollo::task_manager::ParkingRoutingTask&
Task::_Internal::parking_routing_task(const Task* msg) {
  return *msg->_impl_.routing_task_.parking_routing_task_;
}
const ::apollo::task_manager::DeadEndRoutingTask&
Task::_Internal::dead_end_routing_task(const Task* msg) {
  return *msg->_impl_.routing_task_.dead_end_routing_task_;
}
void Task::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Task::set_allocated_cycle_routing_task(::apollo::task_manager::CycleRoutingTask* cycle_routing_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_routing_task();
  if (cycle_routing_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cycle_routing_task);
    if (message_arena != submessage_arena) {
      cycle_routing_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cycle_routing_task, submessage_arena);
    }
    set_has_cycle_routing_task();
    _impl_.routing_task_.cycle_routing_task_ = cycle_routing_task;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.Task.cycle_routing_task)
}
void Task::set_allocated_parking_routing_task(::apollo::task_manager::ParkingRoutingTask* parking_routing_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_routing_task();
  if (parking_routing_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parking_routing_task);
    if (message_arena != submessage_arena) {
      parking_routing_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parking_routing_task, submessage_arena);
    }
    set_has_parking_routing_task();
    _impl_.routing_task_.parking_routing_task_ = parking_routing_task;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.Task.parking_routing_task)
}
void Task::set_allocated_dead_end_routing_task(::apollo::task_manager::DeadEndRoutingTask* dead_end_routing_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_routing_task();
  if (dead_end_routing_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dead_end_routing_task);
    if (message_arena != submessage_arena) {
      dead_end_routing_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dead_end_routing_task, submessage_arena);
    }
    set_has_dead_end_routing_task();
    _impl_.routing_task_.dead_end_routing_task_ = dead_end_routing_task;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.task_manager.Task.dead_end_routing_task)
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.task_manager.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_name_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.task_type_){}
    , decltype(_impl_.routing_task_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_task_name()) {
    _impl_.task_name_.Set(from._internal_task_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  _impl_.task_type_ = from._impl_.task_type_;
  clear_has_routing_task();
  switch (from.routing_task_case()) {
    case kCycleRoutingTask: {
      _internal_mutable_cycle_routing_task()->::apollo::task_manager::CycleRoutingTask::MergeFrom(from._internal_cycle_routing_task());
      break;
    }
    case kParkingRoutingTask: {
      _internal_mutable_parking_routing_task()->::apollo::task_manager::ParkingRoutingTask::MergeFrom(from._internal_parking_routing_task());
      break;
    }
    case kDeadEndRoutingTask: {
      _internal_mutable_dead_end_routing_task()->::apollo::task_manager::DeadEndRoutingTask::MergeFrom(from._internal_dead_end_routing_task());
      break;
    }
    case ROUTING_TASK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.task_manager.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.task_name_){}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.task_type_){0}
    , decltype(_impl_.routing_task_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.task_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_routing_task();
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:apollo.task_manager.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (has_routing_task()) {
    clear_routing_task();
  }
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::clear_routing_task() {
// @@protoc_insertion_point(one_of_clear_start:apollo.task_manager.Task)
  switch (routing_task_case()) {
    case kCycleRoutingTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.routing_task_.cycle_routing_task_;
      }
      break;
    }
    case kParkingRoutingTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.routing_task_.parking_routing_task_;
      }
      break;
    }
    case kDeadEndRoutingTask: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.routing_task_.dead_end_routing_task_;
      }
      break;
    }
    case ROUTING_TASK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ROUTING_TASK_NOT_SET;
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.task_manager.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.task_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_.task_type_ = 0;
  clear_routing_task();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string task_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_task_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.task_manager.Task.task_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.task_manager.TaskType task_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::task_manager::TaskType_IsValid(val))) {
            _internal_set_task_type(static_cast<::apollo::task_manager::TaskType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .apollo.task_manager.CycleRoutingTask cycle_routing_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cycle_routing_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.task_manager.ParkingRoutingTask parking_routing_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_parking_routing_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .apollo.task_manager.DeadEndRoutingTask dead_end_routing_task = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dead_end_routing_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.task_manager.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional string task_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_task_name().data(), static_cast<int>(this->_internal_task_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.task_manager.Task.task_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_name(), target);
  }

  // optional .apollo.task_manager.TaskType task_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_task_type(), target);
  }

  switch (routing_task_case()) {
    case kCycleRoutingTask: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::cycle_routing_task(this),
          _Internal::cycle_routing_task(this).GetCachedSize(), target, stream);
      break;
    }
    case kParkingRoutingTask: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::parking_routing_task(this),
          _Internal::parking_routing_task(this).GetCachedSize(), target, stream);
      break;
    }
    case kDeadEndRoutingTask: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::dead_end_routing_task(this),
          _Internal::dead_end_routing_task(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.task_manager.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.task_manager.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string task_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_task_name());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.task_manager.TaskType task_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_task_type());
    }

  }
  switch (routing_task_case()) {
    // .apollo.task_manager.CycleRoutingTask cycle_routing_task = 4;
    case kCycleRoutingTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_task_.cycle_routing_task_);
      break;
    }
    // .apollo.task_manager.ParkingRoutingTask parking_routing_task = 5;
    case kParkingRoutingTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_task_.parking_routing_task_);
      break;
    }
    // .apollo.task_manager.DeadEndRoutingTask dead_end_routing_task = 6;
    case kDeadEndRoutingTask: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.routing_task_.dead_end_routing_task_);
      break;
    }
    case ROUTING_TASK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }

void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Task *>(to)->MergeFrom(
      static_cast<const Task &>(from));
}


void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.task_manager.Task)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_task_name(from._internal_task_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.task_type_ = from._impl_.task_type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.routing_task_case()) {
    case kCycleRoutingTask: {
      _internal_mutable_cycle_routing_task()->::apollo::task_manager::CycleRoutingTask::MergeFrom(from._internal_cycle_routing_task());
      break;
    }
    case kParkingRoutingTask: {
      _internal_mutable_parking_routing_task()->::apollo::task_manager::ParkingRoutingTask::MergeFrom(from._internal_parking_routing_task());
      break;
    }
    case kDeadEndRoutingTask: {
      _internal_mutable_dead_end_routing_task()->::apollo::task_manager::DeadEndRoutingTask::MergeFrom(from._internal_dead_end_routing_task());
      break;
    }
    case ROUTING_TASK_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.task_manager.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_name_, lhs_arena,
      &other->_impl_.task_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.task_type_)
      + sizeof(Task::_impl_.task_type_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
  swap(_impl_.routing_task_, other->_impl_.routing_task_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_getter, &descriptor_table_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto_once,
      file_level_metadata_modules_2ftask_5fmanager_2fproto_2ftask_5fmanager_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace task_manager
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::task_manager::CycleRoutingTask*
Arena::CreateMaybeMessage< ::apollo::task_manager::CycleRoutingTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::CycleRoutingTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::task_manager::ParkingRoutingTask*
Arena::CreateMaybeMessage< ::apollo::task_manager::ParkingRoutingTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::ParkingRoutingTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::task_manager::DeadEndRoutingTask*
Arena::CreateMaybeMessage< ::apollo::task_manager::DeadEndRoutingTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::DeadEndRoutingTask >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::task_manager::Task*
Arena::CreateMaybeMessage< ::apollo::task_manager::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::task_manager::Task >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
