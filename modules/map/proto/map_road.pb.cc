// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#include "modules/map/proto/map_road.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR BoundaryEdge::BoundaryEdge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.curve_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct BoundaryEdgeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundaryEdgeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundaryEdgeDefaultTypeInternal() {}
  union {
    BoundaryEdge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundaryEdgeDefaultTypeInternal _BoundaryEdge_default_instance_;
PROTOBUF_CONSTEXPR BoundaryPolygon::BoundaryPolygon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundaryPolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundaryPolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundaryPolygonDefaultTypeInternal() {}
  union {
    BoundaryPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundaryPolygonDefaultTypeInternal _BoundaryPolygon_default_instance_;
PROTOBUF_CONSTEXPR RoadBoundary::RoadBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hole_)*/{}
  , /*decltype(_impl_.outer_polygon_)*/nullptr} {}
struct RoadBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadBoundaryDefaultTypeInternal() {}
  union {
    RoadBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadBoundaryDefaultTypeInternal _RoadBoundary_default_instance_;
PROTOBUF_CONSTEXPR RoadROIBoundary::RoadROIBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.road_boundaries_)*/{}
  , /*decltype(_impl_.id_)*/nullptr} {}
struct RoadROIBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadROIBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadROIBoundaryDefaultTypeInternal() {}
  union {
    RoadROIBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadROIBoundaryDefaultTypeInternal _RoadROIBoundary_default_instance_;
PROTOBUF_CONSTEXPR RoadSection::RoadSection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_id_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.boundary_)*/nullptr} {}
struct RoadSectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadSectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadSectionDefaultTypeInternal() {}
  union {
    RoadSection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadSectionDefaultTypeInternal _RoadSection_default_instance_;
PROTOBUF_CONSTEXPR Road::Road(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.section_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.junction_id_)*/nullptr} {}
struct RoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadDefaultTypeInternal _Road_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _impl_.curve_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _impl_.type_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, _impl_.edge_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _impl_.outer_polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _impl_.hole_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _impl_.road_boundaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::RoadSection, _impl_.boundary_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _impl_.section_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Road, _impl_.junction_id_),
  0,
  ~0u,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::hdmap::BoundaryEdge)},
  { 10, -1, -1, sizeof(::apollo::hdmap::BoundaryPolygon)},
  { 17, 25, -1, sizeof(::apollo::hdmap::RoadBoundary)},
  { 27, 35, -1, sizeof(::apollo::hdmap::RoadROIBoundary)},
  { 37, 46, -1, sizeof(::apollo::hdmap::RoadSection)},
  { 49, 58, -1, sizeof(::apollo::hdmap::Road)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_BoundaryEdge_default_instance_._instance,
  &::apollo::hdmap::_BoundaryPolygon_default_instance_._instance,
  &::apollo::hdmap::_RoadBoundary_default_instance_._instance,
  &::apollo::hdmap::_RoadROIBoundary_default_instance_._instance,
  &::apollo::hdmap::_RoadSection_default_instance_._instance,
  &::apollo::hdmap::_Road_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5froad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/map/proto/map_road.proto\022\014apol"
  "lo.hdmap\032$modules/map/proto/map_geometry"
  ".proto\032\036modules/map/proto/map_id.proto\"\251"
  "\001\n\014BoundaryEdge\022\"\n\005curve\030\001 \001(\0132\023.apollo."
  "hdmap.Curve\022-\n\004type\030\002 \001(\0162\037.apollo.hdmap"
  ".BoundaryEdge.Type\"F\n\004Type\022\013\n\007UNKNOWN\020\000\022"
  "\n\n\006NORMAL\020\001\022\021\n\rLEFT_BOUNDARY\020\002\022\022\n\016RIGHT_"
  "BOUNDARY\020\003\";\n\017BoundaryPolygon\022(\n\004edge\030\001 "
  "\003(\0132\032.apollo.hdmap.BoundaryEdge\"q\n\014RoadB"
  "oundary\0224\n\router_polygon\030\001 \001(\0132\035.apollo."
  "hdmap.BoundaryPolygon\022+\n\004hole\030\002 \003(\0132\035.ap"
  "ollo.hdmap.BoundaryPolygon\"d\n\017RoadROIBou"
  "ndary\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\0223\n\017r"
  "oad_boundaries\030\002 \003(\0132\032.apollo.hdmap.Road"
  "Boundary\"|\n\013RoadSection\022\034\n\002id\030\001 \001(\0132\020.ap"
  "ollo.hdmap.Id\022!\n\007lane_id\030\002 \003(\0132\020.apollo."
  "hdmap.Id\022,\n\010boundary\030\003 \001(\0132\032.apollo.hdma"
  "p.RoadBoundary\"w\n\004Road\022\034\n\002id\030\001 \001(\0132\020.apo"
  "llo.hdmap.Id\022*\n\007section\030\002 \003(\0132\031.apollo.h"
  "dmap.RoadSection\022%\n\013junction_id\030\003 \001(\0132\020."
  "apollo.hdmap.Id"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_deps[2] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto = {
    false, false, 815, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5froad_2eproto,
    "modules/map/proto/map_road.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_deps, 2, 6,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5froad_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5froad_2eproto[0];
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BoundaryEdge_Type BoundaryEdge::UNKNOWN;
constexpr BoundaryEdge_Type BoundaryEdge::NORMAL;
constexpr BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
constexpr BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
constexpr BoundaryEdge_Type BoundaryEdge::Type_MIN;
constexpr BoundaryEdge_Type BoundaryEdge::Type_MAX;
constexpr int BoundaryEdge::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class BoundaryEdge::_Internal {
 public:
  using HasBits = decltype(std::declval<BoundaryEdge>()._impl_._has_bits_);
  static const ::apollo::hdmap::Curve& curve(const BoundaryEdge* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Curve&
BoundaryEdge::_Internal::curve(const BoundaryEdge* msg) {
  return *msg->_impl_.curve_;
}
void BoundaryEdge::clear_curve() {
  if (_impl_.curve_ != nullptr) _impl_.curve_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BoundaryEdge::BoundaryEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.BoundaryEdge)
}
BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curve_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve()) {
    _impl_.curve_ = new ::apollo::hdmap::Curve(*from._impl_.curve_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryEdge)
}

inline void BoundaryEdge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.curve_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryEdge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundaryEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.curve_;
}

void BoundaryEdge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryEdge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.curve_ != nullptr);
    _impl_.curve_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryEdge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::BoundaryEdge_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::BoundaryEdge_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundaryEdge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryEdge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::curve(this),
        _Internal::curve(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryEdge)
  return target;
}

size_t BoundaryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryEdge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.curve_);
    }

    // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundaryEdge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundaryEdge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundaryEdge::GetClassData() const { return &_class_data_; }

void BoundaryEdge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoundaryEdge *>(to)->MergeFrom(
      static_cast<const BoundaryEdge &>(from));
}


void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from._internal_curve());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {
  return true;
}

void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundaryEdge, _impl_.type_)
      + sizeof(BoundaryEdge::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BoundaryEdge, _impl_.curve_)>(
          reinterpret_cast<char*>(&_impl_.curve_),
          reinterpret_cast<char*>(&other->_impl_.curve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryEdge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[0]);
}

// ===================================================================

class BoundaryPolygon::_Internal {
 public:
};

BoundaryPolygon::BoundaryPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.BoundaryPolygon)
}
BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.edge_){from._impl_.edge_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryPolygon)
}

inline void BoundaryPolygon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryPolygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundaryPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_.~RepeatedPtrField();
}

void BoundaryPolygon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryPolygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundaryPolygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.BoundaryEdge edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundaryPolygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryPolygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryPolygon)
  return target;
}

size_t BoundaryPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryPolygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->_impl_.edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundaryPolygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoundaryPolygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundaryPolygon::GetClassData() const { return &_class_data_; }

void BoundaryPolygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoundaryPolygon *>(to)->MergeFrom(
      static_cast<const BoundaryPolygon &>(from));
}


void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.edge_.MergeFrom(from._impl_.edge_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {
  return true;
}

void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edge_.InternalSwap(&other->_impl_.edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryPolygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[1]);
}

// ===================================================================

class RoadBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadBoundary>()._impl_._has_bits_);
  static const ::apollo::hdmap::BoundaryPolygon& outer_polygon(const RoadBoundary* msg);
  static void set_has_outer_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::BoundaryPolygon&
RoadBoundary::_Internal::outer_polygon(const RoadBoundary* msg) {
  return *msg->_impl_.outer_polygon_;
}
RoadBoundary::RoadBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadBoundary)
}
RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hole_){from._impl_.hole_}
    , decltype(_impl_.outer_polygon_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outer_polygon()) {
    _impl_.outer_polygon_ = new ::apollo::hdmap::BoundaryPolygon(*from._impl_.outer_polygon_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadBoundary)
}

inline void RoadBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hole_){arena}
    , decltype(_impl_.outer_polygon_){nullptr}
  };
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hole_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.outer_polygon_;
}

void RoadBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hole_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.outer_polygon_ != nullptr);
    _impl_.outer_polygon_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_outer_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hole(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::outer_polygon(this),
        _Internal::outer_polygon(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hole_size()); i < n; i++) {
    const auto& repfield = this->_internal_hole(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadBoundary)
  return target;
}

size_t RoadBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  total_size += 1UL * this->_internal_hole_size();
  for (const auto& msg : this->_impl_.hole_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.outer_polygon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadBoundary::GetClassData() const { return &_class_data_; }

void RoadBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadBoundary *>(to)->MergeFrom(
      static_cast<const RoadBoundary &>(from));
}


void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.hole_.MergeFrom(from._impl_.hole_);
  if (from._internal_has_outer_polygon()) {
    _internal_mutable_outer_polygon()->::apollo::hdmap::BoundaryPolygon::MergeFrom(from._internal_outer_polygon());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {
  return true;
}

void RoadBoundary::InternalSwap(RoadBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hole_.InternalSwap(&other->_impl_.hole_);
  swap(_impl_.outer_polygon_, other->_impl_.outer_polygon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[2]);
}

// ===================================================================

class RoadROIBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadROIBoundary>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const RoadROIBoundary* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
RoadROIBoundary::_Internal::id(const RoadROIBoundary* msg) {
  return *msg->_impl_.id_;
}
void RoadROIBoundary::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RoadROIBoundary::RoadROIBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadROIBoundary)
}
RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_boundaries_){from._impl_.road_boundaries_}
    , decltype(_impl_.id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadROIBoundary)
}

inline void RoadROIBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.road_boundaries_){arena}
    , decltype(_impl_.id_){nullptr}
  };
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadROIBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadROIBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_boundaries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void RoadROIBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadROIBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_boundaries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_ != nullptr);
    _impl_.id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadROIBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_boundaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadROIBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadROIBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_boundaries_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_boundaries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadROIBoundary)
  return target;
}

size_t RoadROIBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadROIBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  total_size += 1UL * this->_internal_road_boundaries_size();
  for (const auto& msg : this->_impl_.road_boundaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadROIBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadROIBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadROIBoundary::GetClassData() const { return &_class_data_; }

void RoadROIBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadROIBoundary *>(to)->MergeFrom(
      static_cast<const RoadROIBoundary &>(from));
}


void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.road_boundaries_.MergeFrom(from._impl_.road_boundaries_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {
  return true;
}

void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.road_boundaries_.InternalSwap(&other->_impl_.road_boundaries_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadROIBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[3]);
}

// ===================================================================

class RoadSection::_Internal {
 public:
  using HasBits = decltype(std::declval<RoadSection>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const RoadSection* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::RoadBoundary& boundary(const RoadSection* msg);
  static void set_has_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
RoadSection::_Internal::id(const RoadSection* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::hdmap::RoadBoundary&
RoadSection::_Internal::boundary(const RoadSection* msg) {
  return *msg->_impl_.boundary_;
}
void RoadSection::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RoadSection::clear_lane_id() {
  _impl_.lane_id_.Clear();
}
RoadSection::RoadSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){from._impl_.lane_id_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.boundary_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_boundary()) {
    _impl_.boundary_ = new ::apollo::hdmap::RoadBoundary(*from._impl_.boundary_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadSection)
}

inline void RoadSection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_id_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.boundary_){nullptr}
  };
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadSection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadSection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.boundary_;
}

void RoadSection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadSection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.boundary_ != nullptr);
      _impl_.boundary_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadSection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.RoadBoundary boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadSection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadSection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::boundary(this),
        _Internal::boundary(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadSection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Id lane_id = 2;
  total_size += 1UL * this->_internal_lane_id_size();
  for (const auto& msg : this->_impl_.lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.RoadBoundary boundary = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boundary_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadSection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoadSection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadSection::GetClassData() const { return &_class_data_; }

void RoadSection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoadSection *>(to)->MergeFrom(
      static_cast<const RoadSection &>(from));
}


void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lane_id_.MergeFrom(from._impl_.lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundary()->::apollo::hdmap::RoadBoundary::MergeFrom(from._internal_boundary());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::InternalSwap(RoadSection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_id_.InternalSwap(&other->_impl_.lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadSection, _impl_.boundary_)
      + sizeof(RoadSection::_impl_.boundary_)
      - PROTOBUF_FIELD_OFFSET(RoadSection, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadSection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[4]);
}

// ===================================================================

class Road::_Internal {
 public:
  using HasBits = decltype(std::declval<Road>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const Road* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Id& junction_id(const Road* msg);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
Road::_Internal::id(const Road* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::hdmap::Id&
Road::_Internal::junction_id(const Road* msg) {
  return *msg->_impl_.junction_id_;
}
void Road::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Road::clear_junction_id() {
  if (_impl_.junction_id_ != nullptr) _impl_.junction_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Road::Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Road)
}
Road::Road(const Road& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_){from._impl_.section_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.junction_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_junction_id()) {
    _impl_.junction_id_ = new ::apollo::hdmap::Id(*from._impl_.junction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Road)
}

inline void Road::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.section_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.junction_id_){nullptr}
  };
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Road)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.section_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.junction_id_;
}

void Road::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Road)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.section_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.junction_id_ != nullptr);
      _impl_.junction_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Road::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.RoadSection section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Id junction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Road::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Road)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_section_size()); i < n; i++) {
    const auto& repfield = this->_internal_section(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::junction_id(this),
        _Internal::junction_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Road)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.RoadSection section = 2;
  total_size += 1UL * this->_internal_section_size();
  for (const auto& msg : this->_impl_.section_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.Id junction_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.junction_id_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Road::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Road::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Road::GetClassData() const { return &_class_data_; }

void Road::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Road *>(to)->MergeFrom(
      static_cast<const Road &>(from));
}


void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.section_.MergeFrom(from._impl_.section_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from._internal_junction_id());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::InternalSwap(Road* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.section_.InternalSwap(&other->_impl_.section_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, _impl_.junction_id_)
      + sizeof(Road::_impl_.junction_id_)
      - PROTOBUF_FIELD_OFFSET(Road, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Road::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5froad_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::BoundaryEdge*
Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::BoundaryEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::BoundaryPolygon*
Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::BoundaryPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadBoundary*
Arena::CreateMaybeMessage< ::apollo::hdmap::RoadBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadROIBoundary*
Arena::CreateMaybeMessage< ::apollo::hdmap::RoadROIBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadROIBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::RoadSection*
Arena::CreateMaybeMessage< ::apollo::hdmap::RoadSection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::RoadSection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Road*
Arena::CreateMaybeMessage< ::apollo::hdmap::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Road >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
