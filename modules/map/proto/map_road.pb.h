// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5froad_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5froad_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_geometry.pb.h"
#include "modules/map/proto/map_id.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_5froad_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto;
namespace apollo {
namespace hdmap {
class BoundaryEdge;
struct BoundaryEdgeDefaultTypeInternal;
extern BoundaryEdgeDefaultTypeInternal _BoundaryEdge_default_instance_;
class BoundaryPolygon;
struct BoundaryPolygonDefaultTypeInternal;
extern BoundaryPolygonDefaultTypeInternal _BoundaryPolygon_default_instance_;
class Road;
struct RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
class RoadBoundary;
struct RoadBoundaryDefaultTypeInternal;
extern RoadBoundaryDefaultTypeInternal _RoadBoundary_default_instance_;
class RoadROIBoundary;
struct RoadROIBoundaryDefaultTypeInternal;
extern RoadROIBoundaryDefaultTypeInternal _RoadROIBoundary_default_instance_;
class RoadSection;
struct RoadSectionDefaultTypeInternal;
extern RoadSectionDefaultTypeInternal _RoadSection_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::BoundaryEdge* Arena::CreateMaybeMessage<::apollo::hdmap::BoundaryEdge>(Arena*);
template<> ::apollo::hdmap::BoundaryPolygon* Arena::CreateMaybeMessage<::apollo::hdmap::BoundaryPolygon>(Arena*);
template<> ::apollo::hdmap::Road* Arena::CreateMaybeMessage<::apollo::hdmap::Road>(Arena*);
template<> ::apollo::hdmap::RoadBoundary* Arena::CreateMaybeMessage<::apollo::hdmap::RoadBoundary>(Arena*);
template<> ::apollo::hdmap::RoadROIBoundary* Arena::CreateMaybeMessage<::apollo::hdmap::RoadROIBoundary>(Arena*);
template<> ::apollo::hdmap::RoadSection* Arena::CreateMaybeMessage<::apollo::hdmap::RoadSection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

enum BoundaryEdge_Type : int {
  BoundaryEdge_Type_UNKNOWN = 0,
  BoundaryEdge_Type_NORMAL = 1,
  BoundaryEdge_Type_LEFT_BOUNDARY = 2,
  BoundaryEdge_Type_RIGHT_BOUNDARY = 3
};
bool BoundaryEdge_Type_IsValid(int value);
constexpr BoundaryEdge_Type BoundaryEdge_Type_Type_MIN = BoundaryEdge_Type_UNKNOWN;
constexpr BoundaryEdge_Type BoundaryEdge_Type_Type_MAX = BoundaryEdge_Type_RIGHT_BOUNDARY;
constexpr int BoundaryEdge_Type_Type_ARRAYSIZE = BoundaryEdge_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BoundaryEdge_Type_descriptor();
template<typename T>
inline const std::string& BoundaryEdge_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BoundaryEdge_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BoundaryEdge_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BoundaryEdge_Type_descriptor(), enum_t_value);
}
inline bool BoundaryEdge_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BoundaryEdge_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BoundaryEdge_Type>(
    BoundaryEdge_Type_descriptor(), name, value);
}
// ===================================================================

class BoundaryEdge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.BoundaryEdge) */ {
 public:
  inline BoundaryEdge() : BoundaryEdge(nullptr) {}
  ~BoundaryEdge() override;
  explicit PROTOBUF_CONSTEXPR BoundaryEdge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundaryEdge(const BoundaryEdge& from);
  BoundaryEdge(BoundaryEdge&& from) noexcept
    : BoundaryEdge() {
    *this = ::std::move(from);
  }

  inline BoundaryEdge& operator=(const BoundaryEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryEdge& operator=(BoundaryEdge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundaryEdge& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundaryEdge* internal_default_instance() {
    return reinterpret_cast<const BoundaryEdge*>(
               &_BoundaryEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoundaryEdge& a, BoundaryEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryEdge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundaryEdge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundaryEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundaryEdge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundaryEdge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoundaryEdge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundaryEdge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.BoundaryEdge";
  }
  protected:
  explicit BoundaryEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BoundaryEdge_Type Type;
  static constexpr Type UNKNOWN =
    BoundaryEdge_Type_UNKNOWN;
  static constexpr Type NORMAL =
    BoundaryEdge_Type_NORMAL;
  static constexpr Type LEFT_BOUNDARY =
    BoundaryEdge_Type_LEFT_BOUNDARY;
  static constexpr Type RIGHT_BOUNDARY =
    BoundaryEdge_Type_RIGHT_BOUNDARY;
  static inline bool Type_IsValid(int value) {
    return BoundaryEdge_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BoundaryEdge_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BoundaryEdge_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BoundaryEdge_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BoundaryEdge_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BoundaryEdge_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return BoundaryEdge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurveFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional .apollo.hdmap.Curve curve = 1;
  bool has_curve() const;
  private:
  bool _internal_has_curve() const;
  public:
  void clear_curve();
  const ::apollo::hdmap::Curve& curve() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Curve* release_curve();
  ::apollo::hdmap::Curve* mutable_curve();
  void set_allocated_curve(::apollo::hdmap::Curve* curve);
  private:
  const ::apollo::hdmap::Curve& _internal_curve() const;
  ::apollo::hdmap::Curve* _internal_mutable_curve();
  public:
  void unsafe_arena_set_allocated_curve(
      ::apollo::hdmap::Curve* curve);
  ::apollo::hdmap::Curve* unsafe_arena_release_curve();

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::BoundaryEdge_Type type() const;
  void set_type(::apollo::hdmap::BoundaryEdge_Type value);
  private:
  ::apollo::hdmap::BoundaryEdge_Type _internal_type() const;
  void _internal_set_type(::apollo::hdmap::BoundaryEdge_Type value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.BoundaryEdge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::hdmap::Curve* curve_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// -------------------------------------------------------------------

class BoundaryPolygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.BoundaryPolygon) */ {
 public:
  inline BoundaryPolygon() : BoundaryPolygon(nullptr) {}
  ~BoundaryPolygon() override;
  explicit PROTOBUF_CONSTEXPR BoundaryPolygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundaryPolygon(const BoundaryPolygon& from);
  BoundaryPolygon(BoundaryPolygon&& from) noexcept
    : BoundaryPolygon() {
    *this = ::std::move(from);
  }

  inline BoundaryPolygon& operator=(const BoundaryPolygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundaryPolygon& operator=(BoundaryPolygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundaryPolygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundaryPolygon* internal_default_instance() {
    return reinterpret_cast<const BoundaryPolygon*>(
               &_BoundaryPolygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoundaryPolygon& a, BoundaryPolygon& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundaryPolygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundaryPolygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundaryPolygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundaryPolygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundaryPolygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoundaryPolygon& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundaryPolygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.BoundaryPolygon";
  }
  protected:
  explicit BoundaryPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeFieldNumber = 1,
  };
  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  void clear_edge();
  ::apollo::hdmap::BoundaryEdge* mutable_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >*
      mutable_edge();
  private:
  const ::apollo::hdmap::BoundaryEdge& _internal_edge(int index) const;
  ::apollo::hdmap::BoundaryEdge* _internal_add_edge();
  public:
  const ::apollo::hdmap::BoundaryEdge& edge(int index) const;
  ::apollo::hdmap::BoundaryEdge* add_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >&
      edge() const;

  // @@protoc_insertion_point(class_scope:apollo.hdmap.BoundaryPolygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge > edge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// -------------------------------------------------------------------

class RoadBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.RoadBoundary) */ {
 public:
  inline RoadBoundary() : RoadBoundary(nullptr) {}
  ~RoadBoundary() override;
  explicit PROTOBUF_CONSTEXPR RoadBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadBoundary(const RoadBoundary& from);
  RoadBoundary(RoadBoundary&& from) noexcept
    : RoadBoundary() {
    *this = ::std::move(from);
  }

  inline RoadBoundary& operator=(const RoadBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadBoundary& operator=(RoadBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadBoundary* internal_default_instance() {
    return reinterpret_cast<const RoadBoundary*>(
               &_RoadBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoadBoundary& a, RoadBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.RoadBoundary";
  }
  protected:
  explicit RoadBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoleFieldNumber = 2,
    kOuterPolygonFieldNumber = 1,
  };
  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  int hole_size() const;
  private:
  int _internal_hole_size() const;
  public:
  void clear_hole();
  ::apollo::hdmap::BoundaryPolygon* mutable_hole(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >*
      mutable_hole();
  private:
  const ::apollo::hdmap::BoundaryPolygon& _internal_hole(int index) const;
  ::apollo::hdmap::BoundaryPolygon* _internal_add_hole();
  public:
  const ::apollo::hdmap::BoundaryPolygon& hole(int index) const;
  ::apollo::hdmap::BoundaryPolygon* add_hole();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >&
      hole() const;

  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  bool has_outer_polygon() const;
  private:
  bool _internal_has_outer_polygon() const;
  public:
  void clear_outer_polygon();
  const ::apollo::hdmap::BoundaryPolygon& outer_polygon() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::BoundaryPolygon* release_outer_polygon();
  ::apollo::hdmap::BoundaryPolygon* mutable_outer_polygon();
  void set_allocated_outer_polygon(::apollo::hdmap::BoundaryPolygon* outer_polygon);
  private:
  const ::apollo::hdmap::BoundaryPolygon& _internal_outer_polygon() const;
  ::apollo::hdmap::BoundaryPolygon* _internal_mutable_outer_polygon();
  public:
  void unsafe_arena_set_allocated_outer_polygon(
      ::apollo::hdmap::BoundaryPolygon* outer_polygon);
  ::apollo::hdmap::BoundaryPolygon* unsafe_arena_release_outer_polygon();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.RoadBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon > hole_;
    ::apollo::hdmap::BoundaryPolygon* outer_polygon_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// -------------------------------------------------------------------

class RoadROIBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.RoadROIBoundary) */ {
 public:
  inline RoadROIBoundary() : RoadROIBoundary(nullptr) {}
  ~RoadROIBoundary() override;
  explicit PROTOBUF_CONSTEXPR RoadROIBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadROIBoundary(const RoadROIBoundary& from);
  RoadROIBoundary(RoadROIBoundary&& from) noexcept
    : RoadROIBoundary() {
    *this = ::std::move(from);
  }

  inline RoadROIBoundary& operator=(const RoadROIBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadROIBoundary& operator=(RoadROIBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadROIBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadROIBoundary* internal_default_instance() {
    return reinterpret_cast<const RoadROIBoundary*>(
               &_RoadROIBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoadROIBoundary& a, RoadROIBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadROIBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadROIBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadROIBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadROIBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadROIBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadROIBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadROIBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.RoadROIBoundary";
  }
  protected:
  explicit RoadROIBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadBoundariesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  int road_boundaries_size() const;
  private:
  int _internal_road_boundaries_size() const;
  public:
  void clear_road_boundaries();
  ::apollo::hdmap::RoadBoundary* mutable_road_boundaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >*
      mutable_road_boundaries();
  private:
  const ::apollo::hdmap::RoadBoundary& _internal_road_boundaries(int index) const;
  ::apollo::hdmap::RoadBoundary* _internal_add_road_boundaries();
  public:
  const ::apollo::hdmap::RoadBoundary& road_boundaries(int index) const;
  ::apollo::hdmap::RoadBoundary* add_road_boundaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >&
      road_boundaries() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.RoadROIBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadBoundary > road_boundaries_;
    ::apollo::hdmap::Id* id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// -------------------------------------------------------------------

class RoadSection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.RoadSection) */ {
 public:
  inline RoadSection() : RoadSection(nullptr) {}
  ~RoadSection() override;
  explicit PROTOBUF_CONSTEXPR RoadSection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoadSection(const RoadSection& from);
  RoadSection(RoadSection&& from) noexcept
    : RoadSection() {
    *this = ::std::move(from);
  }

  inline RoadSection& operator=(const RoadSection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadSection& operator=(RoadSection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadSection& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadSection* internal_default_instance() {
    return reinterpret_cast<const RoadSection*>(
               &_RoadSection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoadSection& a, RoadSection& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadSection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadSection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadSection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadSection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoadSection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoadSection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.RoadSection";
  }
  protected:
  explicit RoadSection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kBoundaryFieldNumber = 3,
  };
  // repeated .apollo.hdmap.Id lane_id = 2;
  int lane_id_size() const;
  private:
  int _internal_lane_id_size() const;
  public:
  void clear_lane_id();
  ::apollo::hdmap::Id* mutable_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
      mutable_lane_id();
  private:
  const ::apollo::hdmap::Id& _internal_lane_id(int index) const;
  ::apollo::hdmap::Id* _internal_add_lane_id();
  public:
  const ::apollo::hdmap::Id& lane_id(int index) const;
  ::apollo::hdmap::Id* add_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
      lane_id() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  bool has_boundary() const;
  private:
  bool _internal_has_boundary() const;
  public:
  void clear_boundary();
  const ::apollo::hdmap::RoadBoundary& boundary() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::RoadBoundary* release_boundary();
  ::apollo::hdmap::RoadBoundary* mutable_boundary();
  void set_allocated_boundary(::apollo::hdmap::RoadBoundary* boundary);
  private:
  const ::apollo::hdmap::RoadBoundary& _internal_boundary() const;
  ::apollo::hdmap::RoadBoundary* _internal_mutable_boundary();
  public:
  void unsafe_arena_set_allocated_boundary(
      ::apollo::hdmap::RoadBoundary* boundary);
  ::apollo::hdmap::RoadBoundary* unsafe_arena_release_boundary();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.RoadSection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id > lane_id_;
    ::apollo::hdmap::Id* id_;
    ::apollo::hdmap::RoadBoundary* boundary_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// -------------------------------------------------------------------

class Road final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Road) */ {
 public:
  inline Road() : Road(nullptr) {}
  ~Road() override;
  explicit PROTOBUF_CONSTEXPR Road(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Road(const Road& from);
  Road(Road&& from) noexcept
    : Road() {
    *this = ::std::move(from);
  }

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }
  inline Road& operator=(Road&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Road& default_instance() {
    return *internal_default_instance();
  }
  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Road& a, Road& b) {
    a.Swap(&b);
  }
  inline void Swap(Road* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Road* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Road* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Road>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Road& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Road& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Road* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Road";
  }
  protected:
  explicit Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionFieldNumber = 2,
    kIdFieldNumber = 1,
    kJunctionIdFieldNumber = 3,
  };
  // repeated .apollo.hdmap.RoadSection section = 2;
  int section_size() const;
  private:
  int _internal_section_size() const;
  public:
  void clear_section();
  ::apollo::hdmap::RoadSection* mutable_section(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadSection >*
      mutable_section();
  private:
  const ::apollo::hdmap::RoadSection& _internal_section(int index) const;
  ::apollo::hdmap::RoadSection* _internal_add_section();
  public:
  const ::apollo::hdmap::RoadSection& section(int index) const;
  ::apollo::hdmap::RoadSection* add_section();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadSection >&
      section() const;

  // optional .apollo.hdmap.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::apollo::hdmap::Id& id() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Id* release_id();
  ::apollo::hdmap::Id* mutable_id();
  void set_allocated_id(::apollo::hdmap::Id* id);
  private:
  const ::apollo::hdmap::Id& _internal_id() const;
  ::apollo::hdmap::Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::apollo::hdmap::Id* id);
  ::apollo::hdmap::Id* unsafe_arena_release_id();

  // optional .apollo.hdmap.Id junction_id = 3;
  bool has_junction_id() const;
  private:
  bool _internal_has_junction_id() const;
  public:
  void clear_junction_id();
  const ::apollo::hdmap::Id& junction_id() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Id* release_junction_id();
  ::apollo::hdmap::Id* mutable_junction_id();
  void set_allocated_junction_id(::apollo::hdmap::Id* junction_id);
  private:
  const ::apollo::hdmap::Id& _internal_junction_id() const;
  ::apollo::hdmap::Id* _internal_mutable_junction_id();
  public:
  void unsafe_arena_set_allocated_junction_id(
      ::apollo::hdmap::Id* junction_id);
  ::apollo::hdmap::Id* unsafe_arena_release_junction_id();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Road)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadSection > section_;
    ::apollo::hdmap::Id* id_;
    ::apollo::hdmap::Id* junction_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_5froad_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoundaryEdge

// optional .apollo.hdmap.Curve curve = 1;
inline bool BoundaryEdge::_internal_has_curve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.curve_ != nullptr);
  return value;
}
inline bool BoundaryEdge::has_curve() const {
  return _internal_has_curve();
}
inline const ::apollo::hdmap::Curve& BoundaryEdge::_internal_curve() const {
  const ::apollo::hdmap::Curve* p = _impl_.curve_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Curve&>(
      ::apollo::hdmap::_Curve_default_instance_);
}
inline const ::apollo::hdmap::Curve& BoundaryEdge::curve() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryEdge.curve)
  return _internal_curve();
}
inline void BoundaryEdge::unsafe_arena_set_allocated_curve(
    ::apollo::hdmap::Curve* curve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curve_);
  }
  _impl_.curve_ = curve;
  if (curve) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.BoundaryEdge.curve)
}
inline ::apollo::hdmap::Curve* BoundaryEdge::release_curve() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Curve* temp = _impl_.curve_;
  _impl_.curve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Curve* BoundaryEdge::unsafe_arena_release_curve() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.BoundaryEdge.curve)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Curve* temp = _impl_.curve_;
  _impl_.curve_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Curve* BoundaryEdge::_internal_mutable_curve() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Curve>(GetArenaForAllocation());
    _impl_.curve_ = p;
  }
  return _impl_.curve_;
}
inline ::apollo::hdmap::Curve* BoundaryEdge::mutable_curve() {
  ::apollo::hdmap::Curve* _msg = _internal_mutable_curve();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.BoundaryEdge.curve)
  return _msg;
}
inline void BoundaryEdge::set_allocated_curve(::apollo::hdmap::Curve* curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curve_);
  }
  if (curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curve));
    if (message_arena != submessage_arena) {
      curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curve, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.curve_ = curve;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.BoundaryEdge.curve)
}

// optional .apollo.hdmap.BoundaryEdge.Type type = 2;
inline bool BoundaryEdge::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundaryEdge::has_type() const {
  return _internal_has_type();
}
inline void BoundaryEdge::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::BoundaryEdge_Type BoundaryEdge::_internal_type() const {
  return static_cast< ::apollo::hdmap::BoundaryEdge_Type >(_impl_.type_);
}
inline ::apollo::hdmap::BoundaryEdge_Type BoundaryEdge::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryEdge.type)
  return _internal_type();
}
inline void BoundaryEdge::_internal_set_type(::apollo::hdmap::BoundaryEdge_Type value) {
  assert(::apollo::hdmap::BoundaryEdge_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void BoundaryEdge::set_type(::apollo::hdmap::BoundaryEdge_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.BoundaryEdge.type)
}

// -------------------------------------------------------------------

// BoundaryPolygon

// repeated .apollo.hdmap.BoundaryEdge edge = 1;
inline int BoundaryPolygon::_internal_edge_size() const {
  return _impl_.edge_.size();
}
inline int BoundaryPolygon::edge_size() const {
  return _internal_edge_size();
}
inline void BoundaryPolygon::clear_edge() {
  _impl_.edge_.Clear();
}
inline ::apollo::hdmap::BoundaryEdge* BoundaryPolygon::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.BoundaryPolygon.edge)
  return _impl_.edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >*
BoundaryPolygon::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.BoundaryPolygon.edge)
  return &_impl_.edge_;
}
inline const ::apollo::hdmap::BoundaryEdge& BoundaryPolygon::_internal_edge(int index) const {
  return _impl_.edge_.Get(index);
}
inline const ::apollo::hdmap::BoundaryEdge& BoundaryPolygon::edge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.BoundaryPolygon.edge)
  return _internal_edge(index);
}
inline ::apollo::hdmap::BoundaryEdge* BoundaryPolygon::_internal_add_edge() {
  return _impl_.edge_.Add();
}
inline ::apollo::hdmap::BoundaryEdge* BoundaryPolygon::add_edge() {
  ::apollo::hdmap::BoundaryEdge* _add = _internal_add_edge();
  // @@protoc_insertion_point(field_add:apollo.hdmap.BoundaryPolygon.edge)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryEdge >&
BoundaryPolygon::edge() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.BoundaryPolygon.edge)
  return _impl_.edge_;
}

// -------------------------------------------------------------------

// RoadBoundary

// optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
inline bool RoadBoundary::_internal_has_outer_polygon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.outer_polygon_ != nullptr);
  return value;
}
inline bool RoadBoundary::has_outer_polygon() const {
  return _internal_has_outer_polygon();
}
inline void RoadBoundary::clear_outer_polygon() {
  if (_impl_.outer_polygon_ != nullptr) _impl_.outer_polygon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::_internal_outer_polygon() const {
  const ::apollo::hdmap::BoundaryPolygon* p = _impl_.outer_polygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::BoundaryPolygon&>(
      ::apollo::hdmap::_BoundaryPolygon_default_instance_);
}
inline const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::outer_polygon() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadBoundary.outer_polygon)
  return _internal_outer_polygon();
}
inline void RoadBoundary::unsafe_arena_set_allocated_outer_polygon(
    ::apollo::hdmap::BoundaryPolygon* outer_polygon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.outer_polygon_);
  }
  _impl_.outer_polygon_ = outer_polygon;
  if (outer_polygon) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.RoadBoundary.outer_polygon)
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::release_outer_polygon() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::BoundaryPolygon* temp = _impl_.outer_polygon_;
  _impl_.outer_polygon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::unsafe_arena_release_outer_polygon() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadBoundary.outer_polygon)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::BoundaryPolygon* temp = _impl_.outer_polygon_;
  _impl_.outer_polygon_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::_internal_mutable_outer_polygon() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.outer_polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::BoundaryPolygon>(GetArenaForAllocation());
    _impl_.outer_polygon_ = p;
  }
  return _impl_.outer_polygon_;
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::mutable_outer_polygon() {
  ::apollo::hdmap::BoundaryPolygon* _msg = _internal_mutable_outer_polygon();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadBoundary.outer_polygon)
  return _msg;
}
inline void RoadBoundary::set_allocated_outer_polygon(::apollo::hdmap::BoundaryPolygon* outer_polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.outer_polygon_;
  }
  if (outer_polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outer_polygon);
    if (message_arena != submessage_arena) {
      outer_polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outer_polygon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.outer_polygon_ = outer_polygon;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadBoundary.outer_polygon)
}

// repeated .apollo.hdmap.BoundaryPolygon hole = 2;
inline int RoadBoundary::_internal_hole_size() const {
  return _impl_.hole_.size();
}
inline int RoadBoundary::hole_size() const {
  return _internal_hole_size();
}
inline void RoadBoundary::clear_hole() {
  _impl_.hole_.Clear();
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::mutable_hole(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadBoundary.hole)
  return _impl_.hole_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >*
RoadBoundary::mutable_hole() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadBoundary.hole)
  return &_impl_.hole_;
}
inline const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::_internal_hole(int index) const {
  return _impl_.hole_.Get(index);
}
inline const ::apollo::hdmap::BoundaryPolygon& RoadBoundary::hole(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadBoundary.hole)
  return _internal_hole(index);
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::_internal_add_hole() {
  return _impl_.hole_.Add();
}
inline ::apollo::hdmap::BoundaryPolygon* RoadBoundary::add_hole() {
  ::apollo::hdmap::BoundaryPolygon* _add = _internal_add_hole();
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadBoundary.hole)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::BoundaryPolygon >&
RoadBoundary::hole() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadBoundary.hole)
  return _impl_.hole_;
}

// -------------------------------------------------------------------

// RoadROIBoundary

// optional .apollo.hdmap.Id id = 1;
inline bool RoadROIBoundary::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool RoadROIBoundary::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& RoadROIBoundary::_internal_id() const {
  const ::apollo::hdmap::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& RoadROIBoundary::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadROIBoundary.id)
  return _internal_id();
}
inline void RoadROIBoundary::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.RoadROIBoundary.id)
}
inline ::apollo::hdmap::Id* RoadROIBoundary::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Id* RoadROIBoundary::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadROIBoundary.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* RoadROIBoundary::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::apollo::hdmap::Id* RoadROIBoundary::mutable_id() {
  ::apollo::hdmap::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadROIBoundary.id)
  return _msg;
}
inline void RoadROIBoundary::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadROIBoundary.id)
}

// repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
inline int RoadROIBoundary::_internal_road_boundaries_size() const {
  return _impl_.road_boundaries_.size();
}
inline int RoadROIBoundary::road_boundaries_size() const {
  return _internal_road_boundaries_size();
}
inline void RoadROIBoundary::clear_road_boundaries() {
  _impl_.road_boundaries_.Clear();
}
inline ::apollo::hdmap::RoadBoundary* RoadROIBoundary::mutable_road_boundaries(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return _impl_.road_boundaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >*
RoadROIBoundary::mutable_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return &_impl_.road_boundaries_;
}
inline const ::apollo::hdmap::RoadBoundary& RoadROIBoundary::_internal_road_boundaries(int index) const {
  return _impl_.road_boundaries_.Get(index);
}
inline const ::apollo::hdmap::RoadBoundary& RoadROIBoundary::road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return _internal_road_boundaries(index);
}
inline ::apollo::hdmap::RoadBoundary* RoadROIBoundary::_internal_add_road_boundaries() {
  return _impl_.road_boundaries_.Add();
}
inline ::apollo::hdmap::RoadBoundary* RoadROIBoundary::add_road_boundaries() {
  ::apollo::hdmap::RoadBoundary* _add = _internal_add_road_boundaries();
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadBoundary >&
RoadROIBoundary::road_boundaries() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadROIBoundary.road_boundaries)
  return _impl_.road_boundaries_;
}

// -------------------------------------------------------------------

// RoadSection

// optional .apollo.hdmap.Id id = 1;
inline bool RoadSection::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool RoadSection::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& RoadSection::_internal_id() const {
  const ::apollo::hdmap::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& RoadSection::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.id)
  return _internal_id();
}
inline void RoadSection::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.RoadSection.id)
}
inline ::apollo::hdmap::Id* RoadSection::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Id* RoadSection::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadSection.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* RoadSection::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::apollo::hdmap::Id* RoadSection::mutable_id() {
  ::apollo::hdmap::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.id)
  return _msg;
}
inline void RoadSection::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadSection.id)
}

// repeated .apollo.hdmap.Id lane_id = 2;
inline int RoadSection::_internal_lane_id_size() const {
  return _impl_.lane_id_.size();
}
inline int RoadSection::lane_id_size() const {
  return _internal_lane_id_size();
}
inline ::apollo::hdmap::Id* RoadSection::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.lane_id)
  return _impl_.lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >*
RoadSection::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.RoadSection.lane_id)
  return &_impl_.lane_id_;
}
inline const ::apollo::hdmap::Id& RoadSection::_internal_lane_id(int index) const {
  return _impl_.lane_id_.Get(index);
}
inline const ::apollo::hdmap::Id& RoadSection::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.lane_id)
  return _internal_lane_id(index);
}
inline ::apollo::hdmap::Id* RoadSection::_internal_add_lane_id() {
  return _impl_.lane_id_.Add();
}
inline ::apollo::hdmap::Id* RoadSection::add_lane_id() {
  ::apollo::hdmap::Id* _add = _internal_add_lane_id();
  // @@protoc_insertion_point(field_add:apollo.hdmap.RoadSection.lane_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Id >&
RoadSection::lane_id() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.RoadSection.lane_id)
  return _impl_.lane_id_;
}

// optional .apollo.hdmap.RoadBoundary boundary = 3;
inline bool RoadSection::_internal_has_boundary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundary_ != nullptr);
  return value;
}
inline bool RoadSection::has_boundary() const {
  return _internal_has_boundary();
}
inline void RoadSection::clear_boundary() {
  if (_impl_.boundary_ != nullptr) _impl_.boundary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::hdmap::RoadBoundary& RoadSection::_internal_boundary() const {
  const ::apollo::hdmap::RoadBoundary* p = _impl_.boundary_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::RoadBoundary&>(
      ::apollo::hdmap::_RoadBoundary_default_instance_);
}
inline const ::apollo::hdmap::RoadBoundary& RoadSection::boundary() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.RoadSection.boundary)
  return _internal_boundary();
}
inline void RoadSection::unsafe_arena_set_allocated_boundary(
    ::apollo::hdmap::RoadBoundary* boundary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundary_);
  }
  _impl_.boundary_ = boundary;
  if (boundary) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.RoadSection.boundary)
}
inline ::apollo::hdmap::RoadBoundary* RoadSection::release_boundary() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::RoadBoundary* temp = _impl_.boundary_;
  _impl_.boundary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::RoadBoundary* RoadSection::unsafe_arena_release_boundary() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.RoadSection.boundary)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::RoadBoundary* temp = _impl_.boundary_;
  _impl_.boundary_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::RoadBoundary* RoadSection::_internal_mutable_boundary() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.boundary_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::RoadBoundary>(GetArenaForAllocation());
    _impl_.boundary_ = p;
  }
  return _impl_.boundary_;
}
inline ::apollo::hdmap::RoadBoundary* RoadSection::mutable_boundary() {
  ::apollo::hdmap::RoadBoundary* _msg = _internal_mutable_boundary();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.RoadSection.boundary)
  return _msg;
}
inline void RoadSection::set_allocated_boundary(::apollo::hdmap::RoadBoundary* boundary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundary_;
  }
  if (boundary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundary);
    if (message_arena != submessage_arena) {
      boundary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundary, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.boundary_ = boundary;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.RoadSection.boundary)
}

// -------------------------------------------------------------------

// Road

// optional .apollo.hdmap.Id id = 1;
inline bool Road::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool Road::has_id() const {
  return _internal_has_id();
}
inline const ::apollo::hdmap::Id& Road::_internal_id() const {
  const ::apollo::hdmap::Id* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& Road::id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.id)
  return _internal_id();
}
inline void Road::unsafe_arena_set_allocated_id(
    ::apollo::hdmap::Id* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Road.id)
}
inline ::apollo::hdmap::Id* Road::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Id* Road::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Road.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Id* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* Road::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::apollo::hdmap::Id* Road::mutable_id() {
  ::apollo::hdmap::Id* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.id)
  return _msg;
}
inline void Road::set_allocated_id(::apollo::hdmap::Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Road.id)
}

// repeated .apollo.hdmap.RoadSection section = 2;
inline int Road::_internal_section_size() const {
  return _impl_.section_.size();
}
inline int Road::section_size() const {
  return _internal_section_size();
}
inline void Road::clear_section() {
  _impl_.section_.Clear();
}
inline ::apollo::hdmap::RoadSection* Road::mutable_section(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.section)
  return _impl_.section_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadSection >*
Road::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Road.section)
  return &_impl_.section_;
}
inline const ::apollo::hdmap::RoadSection& Road::_internal_section(int index) const {
  return _impl_.section_.Get(index);
}
inline const ::apollo::hdmap::RoadSection& Road::section(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.section)
  return _internal_section(index);
}
inline ::apollo::hdmap::RoadSection* Road::_internal_add_section() {
  return _impl_.section_.Add();
}
inline ::apollo::hdmap::RoadSection* Road::add_section() {
  ::apollo::hdmap::RoadSection* _add = _internal_add_section();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Road.section)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::RoadSection >&
Road::section() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Road.section)
  return _impl_.section_;
}

// optional .apollo.hdmap.Id junction_id = 3;
inline bool Road::_internal_has_junction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.junction_id_ != nullptr);
  return value;
}
inline bool Road::has_junction_id() const {
  return _internal_has_junction_id();
}
inline const ::apollo::hdmap::Id& Road::_internal_junction_id() const {
  const ::apollo::hdmap::Id* p = _impl_.junction_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Id&>(
      ::apollo::hdmap::_Id_default_instance_);
}
inline const ::apollo::hdmap::Id& Road::junction_id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Road.junction_id)
  return _internal_junction_id();
}
inline void Road::unsafe_arena_set_allocated_junction_id(
    ::apollo::hdmap::Id* junction_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.junction_id_);
  }
  _impl_.junction_id_ = junction_id;
  if (junction_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Road.junction_id)
}
inline ::apollo::hdmap::Id* Road::release_junction_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Id* temp = _impl_.junction_id_;
  _impl_.junction_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Id* Road::unsafe_arena_release_junction_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Road.junction_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::hdmap::Id* temp = _impl_.junction_id_;
  _impl_.junction_id_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Id* Road::_internal_mutable_junction_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.junction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Id>(GetArenaForAllocation());
    _impl_.junction_id_ = p;
  }
  return _impl_.junction_id_;
}
inline ::apollo::hdmap::Id* Road::mutable_junction_id() {
  ::apollo::hdmap::Id* _msg = _internal_mutable_junction_id();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Road.junction_id)
  return _msg;
}
inline void Road::set_allocated_junction_id(::apollo::hdmap::Id* junction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.junction_id_);
  }
  if (junction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(junction_id));
    if (message_arena != submessage_arena) {
      junction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, junction_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.junction_id_ = junction_id;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Road.junction_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::hdmap::BoundaryEdge_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::BoundaryEdge_Type>() {
  return ::apollo::hdmap::BoundaryEdge_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_5froad_2eproto
