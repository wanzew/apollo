// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#include "modules/map/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR Projection::Projection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proj_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProjectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProjectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProjectionDefaultTypeInternal() {}
  union {
    Projection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProjectionDefaultTypeInternal _Projection_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.district_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generation_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rev_major_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rev_minor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.projection_)*/nullptr
  , /*decltype(_impl_.left_)*/0
  , /*decltype(_impl_.top_)*/0
  , /*decltype(_impl_.right_)*/0
  , /*decltype(_impl_.bottom_)*/0} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.crosswalk_)*/{}
  , /*decltype(_impl_.junction_)*/{}
  , /*decltype(_impl_.lane_)*/{}
  , /*decltype(_impl_.stop_sign_)*/{}
  , /*decltype(_impl_.signal_)*/{}
  , /*decltype(_impl_.yield_)*/{}
  , /*decltype(_impl_.overlap_)*/{}
  , /*decltype(_impl_.clear_area_)*/{}
  , /*decltype(_impl_.speed_bump_)*/{}
  , /*decltype(_impl_.road_)*/{}
  , /*decltype(_impl_.parking_space_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Projection, _impl_.proj_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.projection_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.district_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.generation_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.rev_major_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.rev_minor_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.left_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.top_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.right_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.bottom_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Header, _impl_.vendor_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  6,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.crosswalk_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.junction_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.stop_sign_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.signal_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.yield_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.overlap_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.clear_area_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.speed_bump_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.road_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Map, _impl_.parking_space_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::apollo::hdmap::Projection)},
  { 8, 26, -1, sizeof(::apollo::hdmap::Header)},
  { 38, 56, -1, sizeof(::apollo::hdmap::Map)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_Projection_default_instance_._instance,
  &::apollo::hdmap::_Header_default_instance_._instance,
  &::apollo::hdmap::_Map_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033modules/map/proto/map.proto\022\014apollo.hd"
  "map\032&modules/map/proto/map_clear_area.pr"
  "oto\032%modules/map/proto/map_crosswalk.pro"
  "to\032$modules/map/proto/map_junction.proto"
  "\032 modules/map/proto/map_lane.proto\032#modu"
  "les/map/proto/map_overlap.proto\032\"modules"
  "/map/proto/map_signal.proto\032&modules/map"
  "/proto/map_speed_bump.proto\032%modules/map"
  "/proto/map_stop_sign.proto\032&modules/map/"
  "proto/map_yield_sign.proto\032 modules/map/"
  "proto/map_road.proto\032)modules/map/proto/"
  "map_parking_space.proto\"\032\n\nProjection\022\014\n"
  "\004proj\030\001 \001(\t\"\353\001\n\006Header\022\017\n\007version\030\001 \001(\014\022"
  "\014\n\004date\030\002 \001(\014\022,\n\nprojection\030\003 \001(\0132\030.apol"
  "lo.hdmap.Projection\022\020\n\010district\030\004 \001(\014\022\022\n"
  "\ngeneration\030\005 \001(\014\022\021\n\trev_major\030\006 \001(\014\022\021\n\t"
  "rev_minor\030\007 \001(\014\022\014\n\004left\030\010 \001(\001\022\013\n\003top\030\t \001"
  "(\001\022\r\n\005right\030\n \001(\001\022\016\n\006bottom\030\013 \001(\001\022\016\n\006ven"
  "dor\030\014 \001(\014\"\363\003\n\003Map\022$\n\006header\030\001 \001(\0132\024.apol"
  "lo.hdmap.Header\022*\n\tcrosswalk\030\002 \003(\0132\027.apo"
  "llo.hdmap.Crosswalk\022(\n\010junction\030\003 \003(\0132\026."
  "apollo.hdmap.Junction\022 \n\004lane\030\004 \003(\0132\022.ap"
  "ollo.hdmap.Lane\022)\n\tstop_sign\030\005 \003(\0132\026.apo"
  "llo.hdmap.StopSign\022$\n\006signal\030\006 \003(\0132\024.apo"
  "llo.hdmap.Signal\022&\n\005yield\030\007 \003(\0132\027.apollo"
  ".hdmap.YieldSign\022&\n\007overlap\030\010 \003(\0132\025.apol"
  "lo.hdmap.Overlap\022+\n\nclear_area\030\t \003(\0132\027.a"
  "pollo.hdmap.ClearArea\022+\n\nspeed_bump\030\n \003("
  "\0132\027.apollo.hdmap.SpeedBump\022 \n\004road\030\013 \003(\013"
  "2\022.apollo.hdmap.Road\0221\n\rparking_space\030\014 "
  "\003(\0132\032.apollo.hdmap.ParkingSpace"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_deps[11] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fjunction_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5foverlap_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5froad_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_2eproto = {
    false, false, 1231, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_2eproto,
    "modules/map/proto/map.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_deps, 11, 3,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_2eproto);
namespace apollo {
namespace hdmap {

// ===================================================================

class Projection::_Internal {
 public:
  using HasBits = decltype(std::declval<Projection>()._impl_._has_bits_);
  static void set_has_proj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Projection::Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Projection)
}
Projection::Projection(const Projection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proj_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_proj()) {
    _impl_.proj_.Set(from._internal_proj(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Projection)
}

inline void Projection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proj_){}
  };
  _impl_.proj_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proj_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Projection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Projection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proj_.Destroy();
}

void Projection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Projection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.proj_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Projection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string proj = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proj();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.hdmap.Projection.proj");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Projection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Projection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_proj().data(), static_cast<int>(this->_internal_proj().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.Projection.proj");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_proj(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Projection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string proj = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proj());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Projection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Projection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Projection::GetClassData() const { return &_class_data_; }

void Projection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Projection *>(to)->MergeFrom(
      static_cast<const Projection &>(from));
}


void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_proj()) {
    _internal_set_proj(from._internal_proj());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::InternalSwap(Projection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proj_, lhs_arena,
      &other->_impl_.proj_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Projection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto[0]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::Projection& projection(const Header* msg);
  static void set_has_projection(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_district(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rev_major(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rev_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vendor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::apollo::hdmap::Projection&
Header::_Internal::projection(const Header* msg) {
  return *msg->_impl_.projection_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.district_){}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.rev_major_){}
    , decltype(_impl_.rev_minor_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.left_){}
    , decltype(_impl_.top_){}
    , decltype(_impl_.right_){}
    , decltype(_impl_.bottom_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    _impl_.version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date()) {
    _impl_.date_.Set(from._internal_date(), 
      GetArenaForAllocation());
  }
  _impl_.district_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.district_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_district()) {
    _impl_.district_.Set(from._internal_district(), 
      GetArenaForAllocation());
  }
  _impl_.generation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_generation()) {
    _impl_.generation_.Set(from._internal_generation(), 
      GetArenaForAllocation());
  }
  _impl_.rev_major_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rev_major_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rev_major()) {
    _impl_.rev_major_.Set(from._internal_rev_major(), 
      GetArenaForAllocation());
  }
  _impl_.rev_minor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rev_minor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rev_minor()) {
    _impl_.rev_minor_.Set(from._internal_rev_minor(), 
      GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vendor()) {
    _impl_.vendor_.Set(from._internal_vendor(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_projection()) {
    _impl_.projection_ = new ::apollo::hdmap::Projection(*from._impl_.projection_);
  }
  ::memcpy(&_impl_.left_, &from._impl_.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_) -
    reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.district_){}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.rev_major_){}
    , decltype(_impl_.rev_minor_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.projection_){nullptr}
    , decltype(_impl_.left_){0}
    , decltype(_impl_.top_){0}
    , decltype(_impl_.right_){0}
    , decltype(_impl_.bottom_){0}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.district_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.district_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.generation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rev_major_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rev_major_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rev_minor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rev_minor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.date_.Destroy();
  _impl_.district_.Destroy();
  _impl_.generation_.Destroy();
  _impl_.rev_major_.Destroy();
  _impl_.rev_minor_.Destroy();
  _impl_.vendor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.projection_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.district_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.generation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.rev_major_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.rev_minor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.vendor_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.projection_ != nullptr);
      _impl_.projection_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_) -
        reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.bottom_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Projection projection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_projection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes district = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_district();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes generation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_generation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rev_major = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rev_major();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes rev_minor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rev_minor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_left(&has_bits);
          _impl_.left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double top = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_top(&has_bits);
          _impl_.top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double right = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_right(&has_bits);
          _impl_.right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double bottom = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_bottom(&has_bits);
          _impl_.bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bytes vendor = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_date(), target);
  }

  // optional .apollo.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::projection(this),
        _Internal::projection(this).GetCachedSize(), target, stream);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_district(), target);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_generation(), target);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_rev_major(), target);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_rev_minor(), target);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_left(), target);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_top(), target);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_right(), target);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_bottom(), target);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_vendor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_version());
    }

    // optional bytes date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_date());
    }

    // optional bytes district = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_district());
    }

    // optional bytes generation = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_generation());
    }

    // optional bytes rev_major = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rev_major());
    }

    // optional bytes rev_minor = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_rev_minor());
    }

    // optional bytes vendor = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_vendor());
    }

    // optional .apollo.hdmap.Projection projection = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.projection_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional double left = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double top = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double right = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double bottom = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_district(from._internal_district());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_generation(from._internal_generation());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_rev_major(from._internal_rev_major());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_rev_minor(from._internal_rev_minor());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_vendor(from._internal_vendor());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_projection()->::apollo::hdmap::Projection::MergeFrom(from._internal_projection());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.left_ = from._impl_.left_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.top_ = from._impl_.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.right_ = from._impl_.right_;
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.bottom_ = from._impl_.bottom_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_, lhs_arena,
      &other->_impl_.date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.district_, lhs_arena,
      &other->_impl_.district_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generation_, lhs_arena,
      &other->_impl_.generation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rev_major_, lhs_arena,
      &other->_impl_.rev_major_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rev_minor_, lhs_arena,
      &other->_impl_.rev_minor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.bottom_)
      + sizeof(Header::_impl_.bottom_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.projection_)>(
          reinterpret_cast<char*>(&_impl_.projection_),
          reinterpret_cast<char*>(&other->_impl_.projection_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto[1]);
}

// ===================================================================

class Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Map>()._impl_._has_bits_);
  static const ::apollo::hdmap::Header& header(const Map* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Header&
Map::_Internal::header(const Map* msg) {
  return *msg->_impl_.header_;
}
void Map::clear_crosswalk() {
  _impl_.crosswalk_.Clear();
}
void Map::clear_junction() {
  _impl_.junction_.Clear();
}
void Map::clear_lane() {
  _impl_.lane_.Clear();
}
void Map::clear_stop_sign() {
  _impl_.stop_sign_.Clear();
}
void Map::clear_signal() {
  _impl_.signal_.Clear();
}
void Map::clear_yield() {
  _impl_.yield_.Clear();
}
void Map::clear_overlap() {
  _impl_.overlap_.Clear();
}
void Map::clear_clear_area() {
  _impl_.clear_area_.Clear();
}
void Map::clear_speed_bump() {
  _impl_.speed_bump_.Clear();
}
void Map::clear_road() {
  _impl_.road_.Clear();
}
void Map::clear_parking_space() {
  _impl_.parking_space_.Clear();
}
Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crosswalk_){from._impl_.crosswalk_}
    , decltype(_impl_.junction_){from._impl_.junction_}
    , decltype(_impl_.lane_){from._impl_.lane_}
    , decltype(_impl_.stop_sign_){from._impl_.stop_sign_}
    , decltype(_impl_.signal_){from._impl_.signal_}
    , decltype(_impl_.yield_){from._impl_.yield_}
    , decltype(_impl_.overlap_){from._impl_.overlap_}
    , decltype(_impl_.clear_area_){from._impl_.clear_area_}
    , decltype(_impl_.speed_bump_){from._impl_.speed_bump_}
    , decltype(_impl_.road_){from._impl_.road_}
    , decltype(_impl_.parking_space_){from._impl_.parking_space_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::hdmap::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Map)
}

inline void Map::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.crosswalk_){arena}
    , decltype(_impl_.junction_){arena}
    , decltype(_impl_.lane_){arena}
    , decltype(_impl_.stop_sign_){arena}
    , decltype(_impl_.signal_){arena}
    , decltype(_impl_.yield_){arena}
    , decltype(_impl_.overlap_){arena}
    , decltype(_impl_.clear_area_){arena}
    , decltype(_impl_.speed_bump_){arena}
    , decltype(_impl_.road_){arena}
    , decltype(_impl_.parking_space_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.crosswalk_.~RepeatedPtrField();
  _impl_.junction_.~RepeatedPtrField();
  _impl_.lane_.~RepeatedPtrField();
  _impl_.stop_sign_.~RepeatedPtrField();
  _impl_.signal_.~RepeatedPtrField();
  _impl_.yield_.~RepeatedPtrField();
  _impl_.overlap_.~RepeatedPtrField();
  _impl_.clear_area_.~RepeatedPtrField();
  _impl_.speed_bump_.~RepeatedPtrField();
  _impl_.road_.~RepeatedPtrField();
  _impl_.parking_space_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.crosswalk_.Clear();
  _impl_.junction_.Clear();
  _impl_.lane_.Clear();
  _impl_.stop_sign_.Clear();
  _impl_.signal_.Clear();
  _impl_.yield_.Clear();
  _impl_.overlap_.Clear();
  _impl_.clear_area_.Clear();
  _impl_.speed_bump_.Clear();
  _impl_.road_.Clear();
  _impl_.parking_space_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crosswalk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Junction junction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Lane lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.StopSign stop_sign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Signal signal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.YieldSign yield = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yield(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Overlap overlap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.ClearArea clear_area = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clear_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_bump(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Road road = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parking_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_crosswalk_size()); i < n; i++) {
    const auto& repfield = this->_internal_crosswalk(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_junction_size()); i < n; i++) {
    const auto& repfield = this->_internal_junction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_sign_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_sign(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_yield_size()); i < n; i++) {
    const auto& repfield = this->_internal_yield(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlap_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlap(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clear_area_size()); i < n; i++) {
    const auto& repfield = this->_internal_clear_area(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_bump_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_bump(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Road road = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_size()); i < n; i++) {
    const auto& repfield = this->_internal_road(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parking_space_size()); i < n; i++) {
    const auto& repfield = this->_internal_parking_space(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  total_size += 1UL * this->_internal_crosswalk_size();
  for (const auto& msg : this->_impl_.crosswalk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  total_size += 1UL * this->_internal_junction_size();
  for (const auto& msg : this->_impl_.junction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->_impl_.lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  total_size += 1UL * this->_internal_stop_sign_size();
  for (const auto& msg : this->_impl_.stop_sign_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  total_size += 1UL * this->_internal_signal_size();
  for (const auto& msg : this->_impl_.signal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  total_size += 1UL * this->_internal_yield_size();
  for (const auto& msg : this->_impl_.yield_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  total_size += 1UL * this->_internal_overlap_size();
  for (const auto& msg : this->_impl_.overlap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  total_size += 1UL * this->_internal_clear_area_size();
  for (const auto& msg : this->_impl_.clear_area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  total_size += 1UL * this->_internal_speed_bump_size();
  for (const auto& msg : this->_impl_.speed_bump_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Road road = 11;
  total_size += 1UL * this->_internal_road_size();
  for (const auto& msg : this->_impl_.road_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  total_size += 1UL * this->_internal_parking_space_size();
  for (const auto& msg : this->_impl_.parking_space_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }

void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Map *>(to)->MergeFrom(
      static_cast<const Map &>(from));
}


void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.crosswalk_.MergeFrom(from._impl_.crosswalk_);
  _impl_.junction_.MergeFrom(from._impl_.junction_);
  _impl_.lane_.MergeFrom(from._impl_.lane_);
  _impl_.stop_sign_.MergeFrom(from._impl_.stop_sign_);
  _impl_.signal_.MergeFrom(from._impl_.signal_);
  _impl_.yield_.MergeFrom(from._impl_.yield_);
  _impl_.overlap_.MergeFrom(from._impl_.overlap_);
  _impl_.clear_area_.MergeFrom(from._impl_.clear_area_);
  _impl_.speed_bump_.MergeFrom(from._impl_.speed_bump_);
  _impl_.road_.MergeFrom(from._impl_.road_);
  _impl_.parking_space_.MergeFrom(from._impl_.parking_space_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::hdmap::Header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.crosswalk_.InternalSwap(&other->_impl_.crosswalk_);
  _impl_.junction_.InternalSwap(&other->_impl_.junction_);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  _impl_.stop_sign_.InternalSwap(&other->_impl_.stop_sign_);
  _impl_.signal_.InternalSwap(&other->_impl_.signal_);
  _impl_.yield_.InternalSwap(&other->_impl_.yield_);
  _impl_.overlap_.InternalSwap(&other->_impl_.overlap_);
  _impl_.clear_area_.InternalSwap(&other->_impl_.clear_area_);
  _impl_.speed_bump_.InternalSwap(&other->_impl_.speed_bump_);
  _impl_.road_.InternalSwap(&other->_impl_.road_);
  _impl_.parking_space_.InternalSwap(&other->_impl_.parking_space_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Projection*
Arena::CreateMaybeMessage< ::apollo::hdmap::Projection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Projection >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Header*
Arena::CreateMaybeMessage< ::apollo::hdmap::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Map*
Arena::CreateMaybeMessage< ::apollo::hdmap::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Map >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
