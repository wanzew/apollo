// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_speed_control.proto

#include "modules/map/proto/map_speed_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR SpeedControl::SpeedControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.polygon_)*/nullptr
  , /*decltype(_impl_.speed_limit_)*/0} {}
struct SpeedControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedControlDefaultTypeInternal() {}
  union {
    SpeedControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedControlDefaultTypeInternal _SpeedControl_default_instance_;
PROTOBUF_CONSTEXPR SpeedControls::SpeedControls(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speed_control_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpeedControlsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeedControlsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeedControlsDefaultTypeInternal() {}
  union {
    SpeedControls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeedControlsDefaultTypeInternal _SpeedControls_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControl, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControl, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControl, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControl, _impl_.speed_limit_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SpeedControls, _impl_.speed_control_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::hdmap::SpeedControl)},
  { 12, -1, -1, sizeof(::apollo::hdmap::SpeedControls)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_SpeedControl_default_instance_._instance,
  &::apollo::hdmap::_SpeedControls_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)modules/map/proto/map_speed_control.pr"
  "oto\022\014apollo.hdmap\032$modules/map/proto/map"
  "_geometry.proto\"Y\n\014SpeedControl\022\014\n\004name\030"
  "\001 \001(\t\022&\n\007polygon\030\002 \001(\0132\025.apollo.hdmap.Po"
  "lygon\022\023\n\013speed_limit\030\003 \001(\001\"B\n\rSpeedContr"
  "ols\0221\n\rspeed_control\030\001 \003(\0132\032.apollo.hdma"
  "p.SpeedControl"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_deps[1] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto = {
    false, false, 254, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto,
    "modules/map/proto/map_speed_control.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto);
namespace apollo {
namespace hdmap {

// ===================================================================

class SpeedControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeedControl>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Polygon& polygon(const SpeedControl* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::hdmap::Polygon&
SpeedControl::_Internal::polygon(const SpeedControl* msg) {
  return *msg->_impl_.polygon_;
}
void SpeedControl::clear_polygon() {
  if (_impl_.polygon_ != nullptr) _impl_.polygon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SpeedControl::SpeedControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.SpeedControl)
}
SpeedControl::SpeedControl(const SpeedControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_polygon()) {
    _impl_.polygon_ = new ::apollo::hdmap::Polygon(*from._impl_.polygon_);
  }
  _impl_.speed_limit_ = from._impl_.speed_limit_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SpeedControl)
}

inline void SpeedControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.polygon_){nullptr}
    , decltype(_impl_.speed_limit_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpeedControl::~SpeedControl() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SpeedControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.polygon_;
}

void SpeedControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedControl::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SpeedControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.polygon_ != nullptr);
      _impl_.polygon_->Clear();
    }
  }
  _impl_.speed_limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.hdmap.SpeedControl.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SpeedControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.SpeedControl.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .apollo.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // optional double speed_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SpeedControl)
  return target;
}

size_t SpeedControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SpeedControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .apollo.hdmap.Polygon polygon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.polygon_);
    }

    // optional double speed_limit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedControl::GetClassData() const { return &_class_data_; }

void SpeedControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedControl *>(to)->MergeFrom(
      static_cast<const SpeedControl &>(from));
}


void SpeedControl::MergeFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SpeedControl)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_polygon()->::apollo::hdmap::Polygon::MergeFrom(from._internal_polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedControl::CopyFrom(const SpeedControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SpeedControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControl::IsInitialized() const {
  return true;
}

void SpeedControl::InternalSwap(SpeedControl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeedControl, _impl_.speed_limit_)
      + sizeof(SpeedControl::_impl_.speed_limit_)
      - PROTOBUF_FIELD_OFFSET(SpeedControl, _impl_.polygon_)>(
          reinterpret_cast<char*>(&_impl_.polygon_),
          reinterpret_cast<char*>(&other->_impl_.polygon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedControl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[0]);
}

// ===================================================================

class SpeedControls::_Internal {
 public:
};

SpeedControls::SpeedControls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.SpeedControls)
}
SpeedControls::SpeedControls(const SpeedControls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.speed_control_){from._impl_.speed_control_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SpeedControls)
}

inline void SpeedControls::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.speed_control_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpeedControls::~SpeedControls() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SpeedControls)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeedControls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speed_control_.~RepeatedPtrField();
}

void SpeedControls::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeedControls::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SpeedControls)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speed_control_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedControls::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .apollo.hdmap.SpeedControl speed_control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speed_control(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeedControls::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SpeedControls)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.SpeedControl speed_control = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speed_control_size()); i < n; i++) {
    const auto& repfield = this->_internal_speed_control(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SpeedControls)
  return target;
}

size_t SpeedControls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SpeedControls)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.SpeedControl speed_control = 1;
  total_size += 1UL * this->_internal_speed_control_size();
  for (const auto& msg : this->_impl_.speed_control_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedControls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedControls::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedControls::GetClassData() const { return &_class_data_; }

void SpeedControls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedControls *>(to)->MergeFrom(
      static_cast<const SpeedControls &>(from));
}


void SpeedControls::MergeFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SpeedControls)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.speed_control_.MergeFrom(from._impl_.speed_control_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedControls::CopyFrom(const SpeedControls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SpeedControls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedControls::IsInitialized() const {
  return true;
}

void SpeedControls::InternalSwap(SpeedControls* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speed_control_.InternalSwap(&other->_impl_.speed_control_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedControls::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fspeed_5fcontrol_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::SpeedControl*
Arena::CreateMaybeMessage< ::apollo::hdmap::SpeedControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::SpeedControl >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::SpeedControls*
Arena::CreateMaybeMessage< ::apollo::hdmap::SpeedControls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::SpeedControls >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
