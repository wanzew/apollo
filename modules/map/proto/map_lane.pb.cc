// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_lane.proto

#include "modules/map/proto/map_lane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR LaneBoundaryType::LaneBoundaryType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.s_)*/0} {}
struct LaneBoundaryTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryTypeDefaultTypeInternal() {}
  union {
    LaneBoundaryType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryTypeDefaultTypeInternal _LaneBoundaryType_default_instance_;
PROTOBUF_CONSTEXPR LaneBoundary::LaneBoundary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boundary_type_)*/{}
  , /*decltype(_impl_.curve_)*/nullptr
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.virtual__)*/false} {}
struct LaneBoundaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneBoundaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneBoundaryDefaultTypeInternal() {}
  union {
    LaneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;
PROTOBUF_CONSTEXPR LaneSampleAssociation::LaneSampleAssociation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.width_)*/0} {}
struct LaneSampleAssociationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneSampleAssociationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneSampleAssociationDefaultTypeInternal() {}
  union {
    LaneSampleAssociation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneSampleAssociationDefaultTypeInternal _LaneSampleAssociation_default_instance_;
PROTOBUF_CONSTEXPR Lane::Lane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.overlap_id_)*/{}
  , /*decltype(_impl_.predecessor_id_)*/{}
  , /*decltype(_impl_.successor_id_)*/{}
  , /*decltype(_impl_.left_neighbor_forward_lane_id_)*/{}
  , /*decltype(_impl_.right_neighbor_forward_lane_id_)*/{}
  , /*decltype(_impl_.left_neighbor_reverse_lane_id_)*/{}
  , /*decltype(_impl_.right_neighbor_reverse_lane_id_)*/{}
  , /*decltype(_impl_.left_sample_)*/{}
  , /*decltype(_impl_.right_sample_)*/{}
  , /*decltype(_impl_.left_road_sample_)*/{}
  , /*decltype(_impl_.right_road_sample_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.central_curve_)*/nullptr
  , /*decltype(_impl_.left_boundary_)*/nullptr
  , /*decltype(_impl_.right_boundary_)*/nullptr
  , /*decltype(_impl_.junction_id_)*/nullptr
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.speed_limit_)*/0
  , /*decltype(_impl_.direction_)*/1
  , /*decltype(_impl_.type_)*/1
  , /*decltype(_impl_.turn_)*/1} {}
struct LaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneDefaultTypeInternal() {}
  union {
    Lane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneDefaultTypeInternal _Lane_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_5flane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundaryType, _impl_.types_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _impl_.curve_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _impl_.virtual__),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneBoundary, _impl_.boundary_type_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _impl_.s_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LaneSampleAssociation, _impl_.width_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.central_curve_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.left_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.right_boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.speed_limit_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.predecessor_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.successor_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.left_neighbor_forward_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.right_neighbor_forward_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.turn_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.left_neighbor_reverse_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.right_neighbor_reverse_lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.junction_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.left_sample_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.right_sample_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.left_road_sample_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Lane, _impl_.right_road_sample_),
  0,
  1,
  2,
  3,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  7,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::hdmap::LaneBoundaryType)},
  { 10, 20, -1, sizeof(::apollo::hdmap::LaneBoundary)},
  { 24, 32, -1, sizeof(::apollo::hdmap::LaneSampleAssociation)},
  { 34, 61, -1, sizeof(::apollo::hdmap::Lane)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_LaneBoundaryType_default_instance_._instance,
  &::apollo::hdmap::_LaneBoundary_default_instance_._instance,
  &::apollo::hdmap::_LaneSampleAssociation_default_instance_._instance,
  &::apollo::hdmap::_Lane_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5flane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n modules/map/proto/map_lane.proto\022\014apol"
  "lo.hdmap\032\036modules/map/proto/map_id.proto"
  "\032$modules/map/proto/map_geometry.proto\"\313"
  "\001\n\020LaneBoundaryType\022\t\n\001s\030\001 \001(\001\0222\n\005types\030"
  "\002 \003(\0162#.apollo.hdmap.LaneBoundaryType.Ty"
  "pe\"x\n\004Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW"
  "\020\001\022\020\n\014DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017"
  "\n\013SOLID_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CU"
  "RB\020\006\"\212\001\n\014LaneBoundary\022\"\n\005curve\030\001 \001(\0132\023.a"
  "pollo.hdmap.Curve\022\016\n\006length\030\002 \001(\001\022\017\n\007vir"
  "tual\030\003 \001(\010\0225\n\rboundary_type\030\004 \003(\0132\036.apol"
  "lo.hdmap.LaneBoundaryType\"1\n\025LaneSampleA"
  "ssociation\022\t\n\001s\030\001 \001(\001\022\r\n\005width\030\002 \001(\001\"\260\t\n"
  "\004Lane\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022*\n\rc"
  "entral_curve\030\002 \001(\0132\023.apollo.hdmap.Curve\022"
  "1\n\rleft_boundary\030\003 \001(\0132\032.apollo.hdmap.La"
  "neBoundary\0222\n\016right_boundary\030\004 \001(\0132\032.apo"
  "llo.hdmap.LaneBoundary\022\016\n\006length\030\005 \001(\001\022\023"
  "\n\013speed_limit\030\006 \001(\001\022$\n\noverlap_id\030\007 \003(\0132"
  "\020.apollo.hdmap.Id\022(\n\016predecessor_id\030\010 \003("
  "\0132\020.apollo.hdmap.Id\022&\n\014successor_id\030\t \003("
  "\0132\020.apollo.hdmap.Id\0227\n\035left_neighbor_for"
  "ward_lane_id\030\n \003(\0132\020.apollo.hdmap.Id\0228\n\036"
  "right_neighbor_forward_lane_id\030\013 \003(\0132\020.a"
  "pollo.hdmap.Id\022)\n\004type\030\014 \001(\0162\033.apollo.hd"
  "map.Lane.LaneType\022)\n\004turn\030\r \001(\0162\033.apollo"
  ".hdmap.Lane.LaneTurn\0227\n\035left_neighbor_re"
  "verse_lane_id\030\016 \003(\0132\020.apollo.hdmap.Id\0228\n"
  "\036right_neighbor_reverse_lane_id\030\017 \003(\0132\020."
  "apollo.hdmap.Id\022%\n\013junction_id\030\020 \001(\0132\020.a"
  "pollo.hdmap.Id\0228\n\013left_sample\030\021 \003(\0132#.ap"
  "ollo.hdmap.LaneSampleAssociation\0229\n\014righ"
  "t_sample\030\022 \003(\0132#.apollo.hdmap.LaneSample"
  "Association\0223\n\tdirection\030\023 \001(\0162 .apollo."
  "hdmap.Lane.LaneDirection\022=\n\020left_road_sa"
  "mple\030\024 \003(\0132#.apollo.hdmap.LaneSampleAsso"
  "ciation\022>\n\021right_road_sample\030\025 \003(\0132#.apo"
  "llo.hdmap.LaneSampleAssociation\"M\n\010LaneT"
  "ype\022\010\n\004NONE\020\001\022\020\n\014CITY_DRIVING\020\002\022\n\n\006BIKIN"
  "G\020\003\022\014\n\010SIDEWALK\020\004\022\013\n\007PARKING\020\005\"B\n\010LaneTu"
  "rn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN\020\002\022\016\n\nRIGHT_"
  "TURN\020\003\022\n\n\006U_TURN\020\004\";\n\rLaneDirection\022\013\n\007F"
  "ORWARD\020\001\022\014\n\010BACKWARD\020\002\022\017\n\013BIDIRECTION\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_deps[2] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto = {
    false, false, 1719, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5flane_2eproto,
    "modules/map/proto/map_lane.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5flane_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5flane_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
constexpr LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
constexpr LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
constexpr LaneBoundaryType_Type LaneBoundaryType::CURB;
constexpr LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
constexpr LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
constexpr int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto[1];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Lane_LaneType Lane::NONE;
constexpr Lane_LaneType Lane::CITY_DRIVING;
constexpr Lane_LaneType Lane::BIKING;
constexpr Lane_LaneType Lane::SIDEWALK;
constexpr Lane_LaneType Lane::PARKING;
constexpr Lane_LaneType Lane::LaneType_MIN;
constexpr Lane_LaneType Lane::LaneType_MAX;
constexpr int Lane::LaneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneTurn_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto[2];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Lane_LaneTurn Lane::NO_TURN;
constexpr Lane_LaneTurn Lane::LEFT_TURN;
constexpr Lane_LaneTurn Lane::RIGHT_TURN;
constexpr Lane_LaneTurn Lane::U_TURN;
constexpr Lane_LaneTurn Lane::LaneTurn_MIN;
constexpr Lane_LaneTurn Lane::LaneTurn_MAX;
constexpr int Lane::LaneTurn_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_LaneDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5flane_2eproto[3];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Lane_LaneDirection Lane::FORWARD;
constexpr Lane_LaneDirection Lane::BACKWARD;
constexpr Lane_LaneDirection Lane::BIDIRECTION;
constexpr Lane_LaneDirection Lane::LaneDirection_MIN;
constexpr Lane_LaneDirection Lane::LaneDirection_MAX;
constexpr int Lane::LaneDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LaneBoundaryType::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundaryType>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LaneBoundaryType::LaneBoundaryType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.s_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_ = from._impl_.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneBoundaryType)
}

inline void LaneBoundaryType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.types_){arena}
    , decltype(_impl_.s_){0}
  };
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneBoundaryType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneBoundaryType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.types_.~RepeatedField();
}

void LaneBoundaryType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneBoundaryType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.types_.Clear();
  _impl_.s_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundaryType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::LaneBoundaryType_Type_IsValid(val))) {
              _internal_add_types(static_cast<::apollo::hdmap::LaneBoundaryType_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_types(), ptr, ctx, ::apollo::hdmap::LaneBoundaryType_Type_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneBoundaryType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneBoundaryType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneBoundaryType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundaryType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneBoundaryType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundaryType::GetClassData() const { return &_class_data_; }

void LaneBoundaryType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneBoundaryType *>(to)->MergeFrom(
      static_cast<const LaneBoundaryType &>(from));
}


void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.types_.MergeFrom(from._impl_.types_);
  if (from._internal_has_s()) {
    _internal_set_s(from._internal_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  swap(_impl_.s_, other->_impl_.s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundaryType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto[0]);
}

// ===================================================================

class LaneBoundary::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneBoundary>()._impl_._has_bits_);
  static const ::apollo::hdmap::Curve& curve(const LaneBoundary* msg);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_virtual_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::hdmap::Curve&
LaneBoundary::_Internal::curve(const LaneBoundary* msg) {
  return *msg->_impl_.curve_;
}
void LaneBoundary::clear_curve() {
  if (_impl_.curve_ != nullptr) _impl_.curve_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LaneBoundary::LaneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_type_){from._impl_.boundary_type_}
    , decltype(_impl_.curve_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.virtual__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve()) {
    _impl_.curve_ = new ::apollo::hdmap::Curve(*from._impl_.curve_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.virtual__) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.virtual__));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneBoundary)
}

inline void LaneBoundary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boundary_type_){arena}
    , decltype(_impl_.curve_){nullptr}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.virtual__){false}
  };
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneBoundary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.boundary_type_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.curve_;
}

void LaneBoundary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.boundary_type_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.curve_ != nullptr);
    _impl_.curve_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.virtual__) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.virtual__));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneBoundary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool virtual = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_virtual_(&has_bits);
          _impl_.virtual__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::curve(this),
        _Internal::curve(this).GetCachedSize(), target, stream);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_length(), target);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_virtual_(), target);
  }

  // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_boundary_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_boundary_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.LaneBoundaryType boundary_type = 4;
  total_size += 1UL * this->_internal_boundary_type_size();
  for (const auto& msg : this->_impl_.boundary_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.curve_);
    }

    // optional double length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool virtual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneBoundary::GetClassData() const { return &_class_data_; }

void LaneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneBoundary *>(to)->MergeFrom(
      static_cast<const LaneBoundary &>(from));
}


void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.boundary_type_.MergeFrom(from._impl_.boundary_type_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from._internal_curve());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.virtual__ = from._impl_.virtual__;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.boundary_type_.InternalSwap(&other->_impl_.boundary_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.virtual__)
      + sizeof(LaneBoundary::_impl_.virtual__)
      - PROTOBUF_FIELD_OFFSET(LaneBoundary, _impl_.curve_)>(
          reinterpret_cast<char*>(&_impl_.curve_),
          reinterpret_cast<char*>(&other->_impl_.curve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto[1]);
}

// ===================================================================

class LaneSampleAssociation::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneSampleAssociation>()._impl_._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LaneSampleAssociation::LaneSampleAssociation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LaneSampleAssociation)
}
LaneSampleAssociation::LaneSampleAssociation(const LaneSampleAssociation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){}
    , decltype(_impl_.width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LaneSampleAssociation)
}

inline void LaneSampleAssociation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_){0}
    , decltype(_impl_.width_){0}
  };
}

LaneSampleAssociation::~LaneSampleAssociation() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LaneSampleAssociation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneSampleAssociation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneSampleAssociation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneSampleAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LaneSampleAssociation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.width_) -
        reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneSampleAssociation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_s(&has_bits);
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneSampleAssociation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LaneSampleAssociation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_s(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LaneSampleAssociation)
  return target;
}

size_t LaneSampleAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LaneSampleAssociation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double s = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneSampleAssociation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneSampleAssociation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneSampleAssociation::GetClassData() const { return &_class_data_; }

void LaneSampleAssociation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaneSampleAssociation *>(to)->MergeFrom(
      static_cast<const LaneSampleAssociation &>(from));
}


void LaneSampleAssociation::MergeFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.s_ = from._impl_.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.width_ = from._impl_.width_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneSampleAssociation::CopyFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSampleAssociation::IsInitialized() const {
  return true;
}

void LaneSampleAssociation::InternalSwap(LaneSampleAssociation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneSampleAssociation, _impl_.width_)
      + sizeof(LaneSampleAssociation::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(LaneSampleAssociation, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneSampleAssociation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto[2]);
}

// ===================================================================

class Lane::_Internal {
 public:
  using HasBits = decltype(std::declval<Lane>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const Lane* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Curve& central_curve(const Lane* msg);
  static void set_has_central_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::LaneBoundary& left_boundary(const Lane* msg);
  static void set_has_left_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::hdmap::LaneBoundary& right_boundary(const Lane* msg);
  static void set_has_right_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::apollo::hdmap::Id& junction_id(const Lane* msg);
  static void set_has_junction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::apollo::hdmap::Id&
Lane::_Internal::id(const Lane* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::hdmap::Curve&
Lane::_Internal::central_curve(const Lane* msg) {
  return *msg->_impl_.central_curve_;
}
const ::apollo::hdmap::LaneBoundary&
Lane::_Internal::left_boundary(const Lane* msg) {
  return *msg->_impl_.left_boundary_;
}
const ::apollo::hdmap::LaneBoundary&
Lane::_Internal::right_boundary(const Lane* msg) {
  return *msg->_impl_.right_boundary_;
}
const ::apollo::hdmap::Id&
Lane::_Internal::junction_id(const Lane* msg) {
  return *msg->_impl_.junction_id_;
}
void Lane::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_central_curve() {
  if (_impl_.central_curve_ != nullptr) _impl_.central_curve_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_overlap_id() {
  _impl_.overlap_id_.Clear();
}
void Lane::clear_predecessor_id() {
  _impl_.predecessor_id_.Clear();
}
void Lane::clear_successor_id() {
  _impl_.successor_id_.Clear();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  _impl_.left_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  _impl_.right_neighbor_forward_lane_id_.Clear();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  _impl_.left_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  _impl_.right_neighbor_reverse_lane_id_.Clear();
}
void Lane::clear_junction_id() {
  if (_impl_.junction_id_ != nullptr) _impl_.junction_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Lane::Lane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_id_){from._impl_.overlap_id_}
    , decltype(_impl_.predecessor_id_){from._impl_.predecessor_id_}
    , decltype(_impl_.successor_id_){from._impl_.successor_id_}
    , decltype(_impl_.left_neighbor_forward_lane_id_){from._impl_.left_neighbor_forward_lane_id_}
    , decltype(_impl_.right_neighbor_forward_lane_id_){from._impl_.right_neighbor_forward_lane_id_}
    , decltype(_impl_.left_neighbor_reverse_lane_id_){from._impl_.left_neighbor_reverse_lane_id_}
    , decltype(_impl_.right_neighbor_reverse_lane_id_){from._impl_.right_neighbor_reverse_lane_id_}
    , decltype(_impl_.left_sample_){from._impl_.left_sample_}
    , decltype(_impl_.right_sample_){from._impl_.right_sample_}
    , decltype(_impl_.left_road_sample_){from._impl_.left_road_sample_}
    , decltype(_impl_.right_road_sample_){from._impl_.right_road_sample_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.central_curve_){nullptr}
    , decltype(_impl_.left_boundary_){nullptr}
    , decltype(_impl_.right_boundary_){nullptr}
    , decltype(_impl_.junction_id_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.speed_limit_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.turn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_central_curve()) {
    _impl_.central_curve_ = new ::apollo::hdmap::Curve(*from._impl_.central_curve_);
  }
  if (from._internal_has_left_boundary()) {
    _impl_.left_boundary_ = new ::apollo::hdmap::LaneBoundary(*from._impl_.left_boundary_);
  }
  if (from._internal_has_right_boundary()) {
    _impl_.right_boundary_ = new ::apollo::hdmap::LaneBoundary(*from._impl_.right_boundary_);
  }
  if (from._internal_has_junction_id()) {
    _impl_.junction_id_ = new ::apollo::hdmap::Id(*from._impl_.junction_id_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.turn_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.turn_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Lane)
}

inline void Lane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_id_){arena}
    , decltype(_impl_.predecessor_id_){arena}
    , decltype(_impl_.successor_id_){arena}
    , decltype(_impl_.left_neighbor_forward_lane_id_){arena}
    , decltype(_impl_.right_neighbor_forward_lane_id_){arena}
    , decltype(_impl_.left_neighbor_reverse_lane_id_){arena}
    , decltype(_impl_.right_neighbor_reverse_lane_id_){arena}
    , decltype(_impl_.left_sample_){arena}
    , decltype(_impl_.right_sample_){arena}
    , decltype(_impl_.left_road_sample_){arena}
    , decltype(_impl_.right_road_sample_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.central_curve_){nullptr}
    , decltype(_impl_.left_boundary_){nullptr}
    , decltype(_impl_.right_boundary_){nullptr}
    , decltype(_impl_.junction_id_){nullptr}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.speed_limit_){0}
    , decltype(_impl_.direction_){1}
    , decltype(_impl_.type_){1}
    , decltype(_impl_.turn_){1}
  };
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Lane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Lane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overlap_id_.~RepeatedPtrField();
  _impl_.predecessor_id_.~RepeatedPtrField();
  _impl_.successor_id_.~RepeatedPtrField();
  _impl_.left_neighbor_forward_lane_id_.~RepeatedPtrField();
  _impl_.right_neighbor_forward_lane_id_.~RepeatedPtrField();
  _impl_.left_neighbor_reverse_lane_id_.~RepeatedPtrField();
  _impl_.right_neighbor_reverse_lane_id_.~RepeatedPtrField();
  _impl_.left_sample_.~RepeatedPtrField();
  _impl_.right_sample_.~RepeatedPtrField();
  _impl_.left_road_sample_.~RepeatedPtrField();
  _impl_.right_road_sample_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.central_curve_;
  if (this != internal_default_instance()) delete _impl_.left_boundary_;
  if (this != internal_default_instance()) delete _impl_.right_boundary_;
  if (this != internal_default_instance()) delete _impl_.junction_id_;
}

void Lane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Lane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlap_id_.Clear();
  _impl_.predecessor_id_.Clear();
  _impl_.successor_id_.Clear();
  _impl_.left_neighbor_forward_lane_id_.Clear();
  _impl_.right_neighbor_forward_lane_id_.Clear();
  _impl_.left_neighbor_reverse_lane_id_.Clear();
  _impl_.right_neighbor_reverse_lane_id_.Clear();
  _impl_.left_sample_.Clear();
  _impl_.right_sample_.Clear();
  _impl_.left_road_sample_.Clear();
  _impl_.right_road_sample_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.central_curve_ != nullptr);
      _impl_.central_curve_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.left_boundary_ != nullptr);
      _impl_.left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.right_boundary_ != nullptr);
      _impl_.right_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.junction_id_ != nullptr);
      _impl_.junction_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_limit_) -
        reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.speed_limit_));
    _impl_.direction_ = 1;
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.type_ = 1;
    _impl_.turn_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Curve central_curve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_central_curve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_speed_limit(&has_bits);
          _impl_.speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id overlap_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id predecessor_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predecessor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id successor_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_successor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_neighbor_forward_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_neighbor_forward_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneType type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::Lane_LaneType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneTurn_IsValid(val))) {
            _internal_set_turn(static_cast<::apollo::hdmap::Lane_LaneTurn>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_left_neighbor_reverse_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_right_neighbor_reverse_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Id junction_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_left_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_right_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Lane_LaneDirection_IsValid(val))) {
            _internal_set_direction(static_cast<::apollo::hdmap::Lane_LaneDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_left_road_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_right_road_sample(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Lane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::central_curve(this),
        _Internal::central_curve(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::left_boundary(this),
        _Internal::left_boundary(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::right_boundary(this),
        _Internal::right_boundary(this).GetCachedSize(), target, stream);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_length(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_limit(), target);
  }

  // repeated .apollo.hdmap.Id overlap_id = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlap_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlap_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id predecessor_id = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predecessor_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_predecessor_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id successor_id = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_successor_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_successor_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_neighbor_forward_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_neighbor_forward_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_neighbor_forward_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_neighbor_forward_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_type(), target);
  }

  // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_turn(), target);
  }

  // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_neighbor_reverse_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_neighbor_reverse_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_neighbor_reverse_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_neighbor_reverse_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::junction_id(this),
        _Internal::junction_id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_direction(), target);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_left_road_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_left_road_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_right_road_sample_size()); i < n; i++) {
    const auto& repfield = this->_internal_right_road_sample(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Lane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Id overlap_id = 7;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->_impl_.overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id predecessor_id = 8;
  total_size += 1UL * this->_internal_predecessor_id_size();
  for (const auto& msg : this->_impl_.predecessor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id successor_id = 9;
  total_size += 1UL * this->_internal_successor_id_size();
  for (const auto& msg : this->_impl_.successor_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id left_neighbor_forward_lane_id = 10;
  total_size += 1UL * this->_internal_left_neighbor_forward_lane_id_size();
  for (const auto& msg : this->_impl_.left_neighbor_forward_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id right_neighbor_forward_lane_id = 11;
  total_size += 1UL * this->_internal_right_neighbor_forward_lane_id_size();
  for (const auto& msg : this->_impl_.right_neighbor_forward_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id left_neighbor_reverse_lane_id = 14;
  total_size += 1UL * this->_internal_left_neighbor_reverse_lane_id_size();
  for (const auto& msg : this->_impl_.left_neighbor_reverse_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id right_neighbor_reverse_lane_id = 15;
  total_size += 1UL * this->_internal_right_neighbor_reverse_lane_id_size();
  for (const auto& msg : this->_impl_.right_neighbor_reverse_lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_sample = 17;
  total_size += 2UL * this->_internal_left_sample_size();
  for (const auto& msg : this->_impl_.left_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_sample = 18;
  total_size += 2UL * this->_internal_right_sample_size();
  for (const auto& msg : this->_impl_.right_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation left_road_sample = 20;
  total_size += 2UL * this->_internal_left_road_sample_size();
  for (const auto& msg : this->_impl_.left_road_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.LaneSampleAssociation right_road_sample = 21;
  total_size += 2UL * this->_internal_right_road_sample_size();
  for (const auto& msg : this->_impl_.right_road_sample_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.Curve central_curve = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.central_curve_);
    }

    // optional .apollo.hdmap.LaneBoundary left_boundary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_boundary_);
    }

    // optional .apollo.hdmap.LaneBoundary right_boundary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_boundary_);
    }

    // optional .apollo.hdmap.Id junction_id = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.junction_id_);
    }

    // optional double length = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.Lane.LaneDirection direction = 19;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .apollo.hdmap.Lane.LaneType type = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .apollo.hdmap.Lane.LaneTurn turn = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_turn());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lane::GetClassData() const { return &_class_data_; }

void Lane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lane *>(to)->MergeFrom(
      static_cast<const Lane &>(from));
}


void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.overlap_id_.MergeFrom(from._impl_.overlap_id_);
  _impl_.predecessor_id_.MergeFrom(from._impl_.predecessor_id_);
  _impl_.successor_id_.MergeFrom(from._impl_.successor_id_);
  _impl_.left_neighbor_forward_lane_id_.MergeFrom(from._impl_.left_neighbor_forward_lane_id_);
  _impl_.right_neighbor_forward_lane_id_.MergeFrom(from._impl_.right_neighbor_forward_lane_id_);
  _impl_.left_neighbor_reverse_lane_id_.MergeFrom(from._impl_.left_neighbor_reverse_lane_id_);
  _impl_.right_neighbor_reverse_lane_id_.MergeFrom(from._impl_.right_neighbor_reverse_lane_id_);
  _impl_.left_sample_.MergeFrom(from._impl_.left_sample_);
  _impl_.right_sample_.MergeFrom(from._impl_.right_sample_);
  _impl_.left_road_sample_.MergeFrom(from._impl_.left_road_sample_);
  _impl_.right_road_sample_.MergeFrom(from._impl_.right_road_sample_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_central_curve()->::apollo::hdmap::Curve::MergeFrom(from._internal_central_curve());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_left_boundary()->::apollo::hdmap::LaneBoundary::MergeFrom(from._internal_left_boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_right_boundary()->::apollo::hdmap::LaneBoundary::MergeFrom(from._internal_right_boundary());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from._internal_junction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.length_ = from._impl_.length_;
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.speed_limit_ = from._impl_.speed_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.direction_ = from._impl_.direction_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.turn_ = from._impl_.turn_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.overlap_id_.InternalSwap(&other->_impl_.overlap_id_);
  _impl_.predecessor_id_.InternalSwap(&other->_impl_.predecessor_id_);
  _impl_.successor_id_.InternalSwap(&other->_impl_.successor_id_);
  _impl_.left_neighbor_forward_lane_id_.InternalSwap(&other->_impl_.left_neighbor_forward_lane_id_);
  _impl_.right_neighbor_forward_lane_id_.InternalSwap(&other->_impl_.right_neighbor_forward_lane_id_);
  _impl_.left_neighbor_reverse_lane_id_.InternalSwap(&other->_impl_.left_neighbor_reverse_lane_id_);
  _impl_.right_neighbor_reverse_lane_id_.InternalSwap(&other->_impl_.right_neighbor_reverse_lane_id_);
  _impl_.left_sample_.InternalSwap(&other->_impl_.left_sample_);
  _impl_.right_sample_.InternalSwap(&other->_impl_.right_sample_);
  _impl_.left_road_sample_.InternalSwap(&other->_impl_.left_road_sample_);
  _impl_.right_road_sample_.InternalSwap(&other->_impl_.right_road_sample_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Lane, _impl_.speed_limit_)
      + sizeof(Lane::_impl_.speed_limit_)
      - PROTOBUF_FIELD_OFFSET(Lane, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.direction_, other->_impl_.direction_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.turn_, other->_impl_.turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5flane_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5flane_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LaneBoundaryType*
Arena::CreateMaybeMessage< ::apollo::hdmap::LaneBoundaryType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LaneBoundaryType >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LaneBoundary*
Arena::CreateMaybeMessage< ::apollo::hdmap::LaneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LaneSampleAssociation*
Arena::CreateMaybeMessage< ::apollo::hdmap::LaneSampleAssociation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LaneSampleAssociation >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Lane*
Arena::CreateMaybeMessage< ::apollo::hdmap::Lane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Lane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
