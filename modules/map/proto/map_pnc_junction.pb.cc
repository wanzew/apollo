// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_pnc_junction.proto

#include "modules/map/proto/map_pnc_junction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR Passage::Passage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signal_id_)*/{}
  , /*decltype(_impl_.yield_id_)*/{}
  , /*decltype(_impl_.stop_sign_id_)*/{}
  , /*decltype(_impl_.lane_id_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.type_)*/0} {}
struct PassageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassageDefaultTypeInternal() {}
  union {
    Passage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassageDefaultTypeInternal _Passage_default_instance_;
PROTOBUF_CONSTEXPR PassageGroup::PassageGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.passage_)*/{}
  , /*decltype(_impl_.id_)*/nullptr} {}
struct PassageGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassageGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassageGroupDefaultTypeInternal() {}
  union {
    PassageGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassageGroupDefaultTypeInternal _PassageGroup_default_instance_;
PROTOBUF_CONSTEXPR PNCJunction::PNCJunction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.overlap_id_)*/{}
  , /*decltype(_impl_.passage_group_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.polygon_)*/nullptr} {}
struct PNCJunctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PNCJunctionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PNCJunctionDefaultTypeInternal() {}
  union {
    PNCJunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PNCJunctionDefaultTypeInternal _PNCJunction_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.signal_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.yield_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.stop_sign_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Passage, _impl_.type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _impl_.passage_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _impl_.polygon_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _impl_.overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _impl_.passage_group_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::apollo::hdmap::Passage)},
  { 18, 26, -1, sizeof(::apollo::hdmap::PassageGroup)},
  { 28, 38, -1, sizeof(::apollo::hdmap::PNCJunction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_Passage_default_instance_._instance,
  &::apollo::hdmap::_PassageGroup_default_instance_._instance,
  &::apollo::hdmap::_PNCJunction_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(modules/map/proto/map_pnc_junction.pro"
  "to\022\014apollo.hdmap\032\036modules/map/proto/map_"
  "id.proto\032$modules/map/proto/map_geometry"
  ".proto\"\222\002\n\007Passage\022\034\n\002id\030\001 \001(\0132\020.apollo."
  "hdmap.Id\022#\n\tsignal_id\030\002 \003(\0132\020.apollo.hdm"
  "ap.Id\022\"\n\010yield_id\030\003 \003(\0132\020.apollo.hdmap.I"
  "d\022&\n\014stop_sign_id\030\004 \003(\0132\020.apollo.hdmap.I"
  "d\022!\n\007lane_id\030\005 \003(\0132\020.apollo.hdmap.Id\022(\n\004"
  "type\030\006 \001(\0162\032.apollo.hdmap.Passage.Type\"+"
  "\n\004Type\022\013\n\007UNKNOWN\020\000\022\014\n\010ENTRANCE\020\001\022\010\n\004EXI"
  "T\020\002\"T\n\014PassageGroup\022\034\n\002id\030\001 \001(\0132\020.apollo"
  ".hdmap.Id\022&\n\007passage\030\002 \003(\0132\025.apollo.hdma"
  "p.Passage\"\254\001\n\013PNCJunction\022\034\n\002id\030\001 \001(\0132\020."
  "apollo.hdmap.Id\022&\n\007polygon\030\002 \001(\0132\025.apoll"
  "o.hdmap.Polygon\022$\n\noverlap_id\030\003 \003(\0132\020.ap"
  "ollo.hdmap.Id\0221\n\rpassage_group\030\004 \003(\0132\032.a"
  "pollo.hdmap.PassageGroup"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_deps[2] = {
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto = {
    false, false, 664, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto,
    "modules/map/proto/map_pnc_junction.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Passage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[0];
}
bool Passage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Passage_Type Passage::UNKNOWN;
constexpr Passage_Type Passage::ENTRANCE;
constexpr Passage_Type Passage::EXIT;
constexpr Passage_Type Passage::Type_MIN;
constexpr Passage_Type Passage::Type_MAX;
constexpr int Passage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Passage::_Internal {
 public:
  using HasBits = decltype(std::declval<Passage>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const Passage* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
Passage::_Internal::id(const Passage* msg) {
  return *msg->_impl_.id_;
}
void Passage::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Passage::clear_signal_id() {
  _impl_.signal_id_.Clear();
}
void Passage::clear_yield_id() {
  _impl_.yield_id_.Clear();
}
void Passage::clear_stop_sign_id() {
  _impl_.stop_sign_id_.Clear();
}
void Passage::clear_lane_id() {
  _impl_.lane_id_.Clear();
}
Passage::Passage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Passage)
}
Passage::Passage(const Passage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_id_){from._impl_.signal_id_}
    , decltype(_impl_.yield_id_){from._impl_.yield_id_}
    , decltype(_impl_.stop_sign_id_){from._impl_.stop_sign_id_}
    , decltype(_impl_.lane_id_){from._impl_.lane_id_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Passage)
}

inline void Passage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_id_){arena}
    , decltype(_impl_.yield_id_){arena}
    , decltype(_impl_.stop_sign_id_){arena}
    , decltype(_impl_.lane_id_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.type_){0}
  };
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Passage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Passage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_id_.~RepeatedPtrField();
  _impl_.yield_id_.~RepeatedPtrField();
  _impl_.stop_sign_id_.~RepeatedPtrField();
  _impl_.lane_id_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void Passage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Passage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_id_.Clear();
  _impl_.yield_id_.Clear();
  _impl_.stop_sign_id_.Clear();
  _impl_.lane_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_ != nullptr);
    _impl_.id_->Clear();
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Passage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id signal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id yield_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_yield_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id stop_sign_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_sign_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Passage.Type type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Passage_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::Passage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Passage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Passage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id signal_id = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signal_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_signal_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id yield_id = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_yield_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_yield_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_sign_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_sign_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id lane_id = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Passage.Type type = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Passage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Id signal_id = 2;
  total_size += 1UL * this->_internal_signal_id_size();
  for (const auto& msg : this->_impl_.signal_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id yield_id = 3;
  total_size += 1UL * this->_internal_yield_id_size();
  for (const auto& msg : this->_impl_.yield_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  total_size += 1UL * this->_internal_stop_sign_id_size();
  for (const auto& msg : this->_impl_.stop_sign_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id lane_id = 5;
  total_size += 1UL * this->_internal_lane_id_size();
  for (const auto& msg : this->_impl_.lane_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.Passage.Type type = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Passage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Passage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Passage::GetClassData() const { return &_class_data_; }

void Passage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Passage *>(to)->MergeFrom(
      static_cast<const Passage &>(from));
}


void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.signal_id_.MergeFrom(from._impl_.signal_id_);
  _impl_.yield_id_.MergeFrom(from._impl_.yield_id_);
  _impl_.stop_sign_id_.MergeFrom(from._impl_.stop_sign_id_);
  _impl_.lane_id_.MergeFrom(from._impl_.lane_id_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::InternalSwap(Passage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signal_id_.InternalSwap(&other->_impl_.signal_id_);
  _impl_.yield_id_.InternalSwap(&other->_impl_.yield_id_);
  _impl_.stop_sign_id_.InternalSwap(&other->_impl_.stop_sign_id_);
  _impl_.lane_id_.InternalSwap(&other->_impl_.lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Passage, _impl_.type_)
      + sizeof(Passage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Passage, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Passage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[0]);
}

// ===================================================================

class PassageGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<PassageGroup>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const PassageGroup* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::Id&
PassageGroup::_Internal::id(const PassageGroup* msg) {
  return *msg->_impl_.id_;
}
void PassageGroup::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PassageGroup::PassageGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.PassageGroup)
}
PassageGroup::PassageGroup(const PassageGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passage_){from._impl_.passage_}
    , decltype(_impl_.id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PassageGroup)
}

inline void PassageGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.passage_){arena}
    , decltype(_impl_.id_){nullptr}
  };
}

PassageGroup::~PassageGroup() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PassageGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassageGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passage_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void PassageGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PassageGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.passage_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.id_ != nullptr);
    _impl_.id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassageGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Passage passage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassageGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PassageGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Passage passage = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_passage_size()); i < n; i++) {
    const auto& repfield = this->_internal_passage(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PassageGroup)
  return target;
}

size_t PassageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PassageGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Passage passage = 2;
  total_size += 1UL * this->_internal_passage_size();
  for (const auto& msg : this->_impl_.passage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.Id id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassageGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PassageGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassageGroup::GetClassData() const { return &_class_data_; }

void PassageGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PassageGroup *>(to)->MergeFrom(
      static_cast<const PassageGroup &>(from));
}


void PassageGroup::MergeFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PassageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.passage_.MergeFrom(from._impl_.passage_);
  if (from._internal_has_id()) {
    _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassageGroup::CopyFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PassageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassageGroup::IsInitialized() const {
  return true;
}

void PassageGroup::InternalSwap(PassageGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.passage_.InternalSwap(&other->_impl_.passage_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassageGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[1]);
}

// ===================================================================

class PNCJunction::_Internal {
 public:
  using HasBits = decltype(std::declval<PNCJunction>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const PNCJunction* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Polygon& polygon(const PNCJunction* msg);
  static void set_has_polygon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
PNCJunction::_Internal::id(const PNCJunction* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::hdmap::Polygon&
PNCJunction::_Internal::polygon(const PNCJunction* msg) {
  return *msg->_impl_.polygon_;
}
void PNCJunction::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PNCJunction::clear_polygon() {
  if (_impl_.polygon_ != nullptr) _impl_.polygon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PNCJunction::clear_overlap_id() {
  _impl_.overlap_id_.Clear();
}
PNCJunction::PNCJunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.PNCJunction)
}
PNCJunction::PNCJunction(const PNCJunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_id_){from._impl_.overlap_id_}
    , decltype(_impl_.passage_group_){from._impl_.passage_group_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.polygon_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_polygon()) {
    _impl_.polygon_ = new ::apollo::hdmap::Polygon(*from._impl_.polygon_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PNCJunction)
}

inline void PNCJunction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.overlap_id_){arena}
    , decltype(_impl_.passage_group_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.polygon_){nullptr}
  };
}

PNCJunction::~PNCJunction() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PNCJunction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PNCJunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overlap_id_.~RepeatedPtrField();
  _impl_.passage_group_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.polygon_;
}

void PNCJunction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PNCJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PNCJunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overlap_id_.Clear();
  _impl_.passage_group_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.polygon_ != nullptr);
      _impl_.polygon_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PNCJunction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Polygon polygon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id overlap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.PassageGroup passage_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_passage_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PNCJunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PNCJunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::polygon(this),
        _Internal::polygon(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id overlap_id = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlap_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlap_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_passage_group_size()); i < n; i++) {
    const auto& repfield = this->_internal_passage_group(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PNCJunction)
  return target;
}

size_t PNCJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PNCJunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Id overlap_id = 3;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->_impl_.overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  total_size += 1UL * this->_internal_passage_group_size();
  for (const auto& msg : this->_impl_.passage_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.Polygon polygon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.polygon_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PNCJunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PNCJunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PNCJunction::GetClassData() const { return &_class_data_; }

void PNCJunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PNCJunction *>(to)->MergeFrom(
      static_cast<const PNCJunction &>(from));
}


void PNCJunction::MergeFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PNCJunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.overlap_id_.MergeFrom(from._impl_.overlap_id_);
  _impl_.passage_group_.MergeFrom(from._impl_.passage_group_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_polygon()->::apollo::hdmap::Polygon::MergeFrom(from._internal_polygon());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PNCJunction::CopyFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PNCJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunction::IsInitialized() const {
  return true;
}

void PNCJunction::InternalSwap(PNCJunction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.overlap_id_.InternalSwap(&other->_impl_.overlap_id_);
  _impl_.passage_group_.InternalSwap(&other->_impl_.passage_group_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PNCJunction, _impl_.polygon_)
      + sizeof(PNCJunction::_impl_.polygon_)
      - PROTOBUF_FIELD_OFFSET(PNCJunction, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PNCJunction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Passage*
Arena::CreateMaybeMessage< ::apollo::hdmap::Passage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Passage >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::PassageGroup*
Arena::CreateMaybeMessage< ::apollo::hdmap::PassageGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::PassageGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::PNCJunction*
Arena::CreateMaybeMessage< ::apollo::hdmap::PNCJunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::PNCJunction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
