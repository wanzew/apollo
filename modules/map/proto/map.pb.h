// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_clear_area.pb.h"
#include "modules/map/proto/map_crosswalk.pb.h"
#include "modules/map/proto/map_junction.pb.h"
#include "modules/map/proto/map_lane.pb.h"
#include "modules/map/proto/map_overlap.pb.h"
#include "modules/map/proto/map_signal.pb.h"
#include "modules/map/proto/map_speed_bump.pb.h"
#include "modules/map/proto/map_stop_sign.pb.h"
#include "modules/map/proto/map_yield_sign.pb.h"
#include "modules/map/proto/map_road.pb.h"
#include "modules/map/proto/map_parking_space.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2fproto_2fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2fproto_2fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_2eproto;
namespace apollo {
namespace hdmap {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Projection;
struct ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::Header* Arena::CreateMaybeMessage<::apollo::hdmap::Header>(Arena*);
template<> ::apollo::hdmap::Map* Arena::CreateMaybeMessage<::apollo::hdmap::Map>(Arena*);
template<> ::apollo::hdmap::Projection* Arena::CreateMaybeMessage<::apollo::hdmap::Projection>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

// ===================================================================

class Projection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Projection) */ {
 public:
  inline Projection() : Projection(nullptr) {}
  ~Projection() override;
  explicit PROTOBUF_CONSTEXPR Projection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Projection(const Projection& from);
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projection& operator=(Projection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Projection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }
  inline void Swap(Projection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Projection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Projection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Projection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Projection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Projection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Projection";
  }
  protected:
  explicit Projection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjFieldNumber = 1,
  };
  // optional string proj = 1;
  bool has_proj() const;
  private:
  bool _internal_has_proj() const;
  public:
  void clear_proj();
  const std::string& proj() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proj(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proj();
  PROTOBUF_NODISCARD std::string* release_proj();
  void set_allocated_proj(std::string* proj);
  private:
  const std::string& _internal_proj() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proj(const std::string& value);
  std::string* _internal_mutable_proj();
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Projection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proj_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kDateFieldNumber = 2,
    kDistrictFieldNumber = 4,
    kGenerationFieldNumber = 5,
    kRevMajorFieldNumber = 6,
    kRevMinorFieldNumber = 7,
    kVendorFieldNumber = 12,
    kProjectionFieldNumber = 3,
    kLeftFieldNumber = 8,
    kTopFieldNumber = 9,
    kRightFieldNumber = 10,
    kBottomFieldNumber = 11,
  };
  // optional bytes version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional bytes date = 2;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* date);
  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional bytes district = 4;
  bool has_district() const;
  private:
  bool _internal_has_district() const;
  public:
  void clear_district();
  const std::string& district() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_district(ArgT0&& arg0, ArgT... args);
  std::string* mutable_district();
  PROTOBUF_NODISCARD std::string* release_district();
  void set_allocated_district(std::string* district);
  private:
  const std::string& _internal_district() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_district(const std::string& value);
  std::string* _internal_mutable_district();
  public:

  // optional bytes generation = 5;
  bool has_generation() const;
  private:
  bool _internal_has_generation() const;
  public:
  void clear_generation();
  const std::string& generation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_generation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_generation();
  PROTOBUF_NODISCARD std::string* release_generation();
  void set_allocated_generation(std::string* generation);
  private:
  const std::string& _internal_generation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_generation(const std::string& value);
  std::string* _internal_mutable_generation();
  public:

  // optional bytes rev_major = 6;
  bool has_rev_major() const;
  private:
  bool _internal_has_rev_major() const;
  public:
  void clear_rev_major();
  const std::string& rev_major() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rev_major(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rev_major();
  PROTOBUF_NODISCARD std::string* release_rev_major();
  void set_allocated_rev_major(std::string* rev_major);
  private:
  const std::string& _internal_rev_major() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rev_major(const std::string& value);
  std::string* _internal_mutable_rev_major();
  public:

  // optional bytes rev_minor = 7;
  bool has_rev_minor() const;
  private:
  bool _internal_has_rev_minor() const;
  public:
  void clear_rev_minor();
  const std::string& rev_minor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rev_minor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rev_minor();
  PROTOBUF_NODISCARD std::string* release_rev_minor();
  void set_allocated_rev_minor(std::string* rev_minor);
  private:
  const std::string& _internal_rev_minor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rev_minor(const std::string& value);
  std::string* _internal_mutable_rev_minor();
  public:

  // optional bytes vendor = 12;
  bool has_vendor() const;
  private:
  bool _internal_has_vendor() const;
  public:
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // optional .apollo.hdmap.Projection projection = 3;
  bool has_projection() const;
  private:
  bool _internal_has_projection() const;
  public:
  void clear_projection();
  const ::apollo::hdmap::Projection& projection() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Projection* release_projection();
  ::apollo::hdmap::Projection* mutable_projection();
  void set_allocated_projection(::apollo::hdmap::Projection* projection);
  private:
  const ::apollo::hdmap::Projection& _internal_projection() const;
  ::apollo::hdmap::Projection* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::apollo::hdmap::Projection* projection);
  ::apollo::hdmap::Projection* unsafe_arena_release_projection();

  // optional double left = 8;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  double left() const;
  void set_left(double value);
  private:
  double _internal_left() const;
  void _internal_set_left(double value);
  public:

  // optional double top = 9;
  bool has_top() const;
  private:
  bool _internal_has_top() const;
  public:
  void clear_top();
  double top() const;
  void set_top(double value);
  private:
  double _internal_top() const;
  void _internal_set_top(double value);
  public:

  // optional double right = 10;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  double right() const;
  void set_right(double value);
  private:
  double _internal_right() const;
  void _internal_set_right(double value);
  public:

  // optional double bottom = 11;
  bool has_bottom() const;
  private:
  bool _internal_has_bottom() const;
  public:
  void clear_bottom();
  double bottom() const;
  void set_bottom(double value);
  private:
  double _internal_bottom() const;
  void _internal_set_bottom(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr district_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr generation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rev_major_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rev_minor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
    ::apollo::hdmap::Projection* projection_;
    double left_;
    double top_;
    double right_;
    double bottom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  explicit PROTOBUF_CONSTEXPR Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Map& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrosswalkFieldNumber = 2,
    kJunctionFieldNumber = 3,
    kLaneFieldNumber = 4,
    kStopSignFieldNumber = 5,
    kSignalFieldNumber = 6,
    kYieldFieldNumber = 7,
    kOverlapFieldNumber = 8,
    kClearAreaFieldNumber = 9,
    kSpeedBumpFieldNumber = 10,
    kRoadFieldNumber = 11,
    kParkingSpaceFieldNumber = 12,
    kHeaderFieldNumber = 1,
  };
  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  int crosswalk_size() const;
  private:
  int _internal_crosswalk_size() const;
  public:
  void clear_crosswalk();
  ::apollo::hdmap::Crosswalk* mutable_crosswalk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Crosswalk >*
      mutable_crosswalk();
  private:
  const ::apollo::hdmap::Crosswalk& _internal_crosswalk(int index) const;
  ::apollo::hdmap::Crosswalk* _internal_add_crosswalk();
  public:
  const ::apollo::hdmap::Crosswalk& crosswalk(int index) const;
  ::apollo::hdmap::Crosswalk* add_crosswalk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Crosswalk >&
      crosswalk() const;

  // repeated .apollo.hdmap.Junction junction = 3;
  int junction_size() const;
  private:
  int _internal_junction_size() const;
  public:
  void clear_junction();
  ::apollo::hdmap::Junction* mutable_junction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Junction >*
      mutable_junction();
  private:
  const ::apollo::hdmap::Junction& _internal_junction(int index) const;
  ::apollo::hdmap::Junction* _internal_add_junction();
  public:
  const ::apollo::hdmap::Junction& junction(int index) const;
  ::apollo::hdmap::Junction* add_junction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Junction >&
      junction() const;

  // repeated .apollo.hdmap.Lane lane = 4;
  int lane_size() const;
  private:
  int _internal_lane_size() const;
  public:
  void clear_lane();
  ::apollo::hdmap::Lane* mutable_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Lane >*
      mutable_lane();
  private:
  const ::apollo::hdmap::Lane& _internal_lane(int index) const;
  ::apollo::hdmap::Lane* _internal_add_lane();
  public:
  const ::apollo::hdmap::Lane& lane(int index) const;
  ::apollo::hdmap::Lane* add_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Lane >&
      lane() const;

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  int stop_sign_size() const;
  private:
  int _internal_stop_sign_size() const;
  public:
  void clear_stop_sign();
  ::apollo::hdmap::StopSign* mutable_stop_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::StopSign >*
      mutable_stop_sign();
  private:
  const ::apollo::hdmap::StopSign& _internal_stop_sign(int index) const;
  ::apollo::hdmap::StopSign* _internal_add_stop_sign();
  public:
  const ::apollo::hdmap::StopSign& stop_sign(int index) const;
  ::apollo::hdmap::StopSign* add_stop_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::StopSign >&
      stop_sign() const;

  // repeated .apollo.hdmap.Signal signal = 6;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  ::apollo::hdmap::Signal* mutable_signal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Signal >*
      mutable_signal();
  private:
  const ::apollo::hdmap::Signal& _internal_signal(int index) const;
  ::apollo::hdmap::Signal* _internal_add_signal();
  public:
  const ::apollo::hdmap::Signal& signal(int index) const;
  ::apollo::hdmap::Signal* add_signal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Signal >&
      signal() const;

  // repeated .apollo.hdmap.YieldSign yield = 7;
  int yield_size() const;
  private:
  int _internal_yield_size() const;
  public:
  void clear_yield();
  ::apollo::hdmap::YieldSign* mutable_yield(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::YieldSign >*
      mutable_yield();
  private:
  const ::apollo::hdmap::YieldSign& _internal_yield(int index) const;
  ::apollo::hdmap::YieldSign* _internal_add_yield();
  public:
  const ::apollo::hdmap::YieldSign& yield(int index) const;
  ::apollo::hdmap::YieldSign* add_yield();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::YieldSign >&
      yield() const;

  // repeated .apollo.hdmap.Overlap overlap = 8;
  int overlap_size() const;
  private:
  int _internal_overlap_size() const;
  public:
  void clear_overlap();
  ::apollo::hdmap::Overlap* mutable_overlap(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Overlap >*
      mutable_overlap();
  private:
  const ::apollo::hdmap::Overlap& _internal_overlap(int index) const;
  ::apollo::hdmap::Overlap* _internal_add_overlap();
  public:
  const ::apollo::hdmap::Overlap& overlap(int index) const;
  ::apollo::hdmap::Overlap* add_overlap();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Overlap >&
      overlap() const;

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  int clear_area_size() const;
  private:
  int _internal_clear_area_size() const;
  public:
  void clear_clear_area();
  ::apollo::hdmap::ClearArea* mutable_clear_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ClearArea >*
      mutable_clear_area();
  private:
  const ::apollo::hdmap::ClearArea& _internal_clear_area(int index) const;
  ::apollo::hdmap::ClearArea* _internal_add_clear_area();
  public:
  const ::apollo::hdmap::ClearArea& clear_area(int index) const;
  ::apollo::hdmap::ClearArea* add_clear_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ClearArea >&
      clear_area() const;

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  int speed_bump_size() const;
  private:
  int _internal_speed_bump_size() const;
  public:
  void clear_speed_bump();
  ::apollo::hdmap::SpeedBump* mutable_speed_bump(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SpeedBump >*
      mutable_speed_bump();
  private:
  const ::apollo::hdmap::SpeedBump& _internal_speed_bump(int index) const;
  ::apollo::hdmap::SpeedBump* _internal_add_speed_bump();
  public:
  const ::apollo::hdmap::SpeedBump& speed_bump(int index) const;
  ::apollo::hdmap::SpeedBump* add_speed_bump();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SpeedBump >&
      speed_bump() const;

  // repeated .apollo.hdmap.Road road = 11;
  int road_size() const;
  private:
  int _internal_road_size() const;
  public:
  void clear_road();
  ::apollo::hdmap::Road* mutable_road(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Road >*
      mutable_road();
  private:
  const ::apollo::hdmap::Road& _internal_road(int index) const;
  ::apollo::hdmap::Road* _internal_add_road();
  public:
  const ::apollo::hdmap::Road& road(int index) const;
  ::apollo::hdmap::Road* add_road();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Road >&
      road() const;

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  int parking_space_size() const;
  private:
  int _internal_parking_space_size() const;
  public:
  void clear_parking_space();
  ::apollo::hdmap::ParkingSpace* mutable_parking_space(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >*
      mutable_parking_space();
  private:
  const ::apollo::hdmap::ParkingSpace& _internal_parking_space(int index) const;
  ::apollo::hdmap::ParkingSpace* _internal_add_parking_space();
  public:
  const ::apollo::hdmap::ParkingSpace& parking_space(int index) const;
  ::apollo::hdmap::ParkingSpace* add_parking_space();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >&
      parking_space() const;

  // optional .apollo.hdmap.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::hdmap::Header& header() const;
  PROTOBUF_NODISCARD ::apollo::hdmap::Header* release_header();
  ::apollo::hdmap::Header* mutable_header();
  void set_allocated_header(::apollo::hdmap::Header* header);
  private:
  const ::apollo::hdmap::Header& _internal_header() const;
  ::apollo::hdmap::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::hdmap::Header* header);
  ::apollo::hdmap::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Crosswalk > crosswalk_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Junction > junction_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Lane > lane_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::StopSign > stop_sign_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Signal > signal_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::YieldSign > yield_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Overlap > overlap_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ClearArea > clear_area_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SpeedBump > speed_bump_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Road > road_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ParkingSpace > parking_space_;
    ::apollo::hdmap::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2fproto_2fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Projection

// optional string proj = 1;
inline bool Projection::_internal_has_proj() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Projection::has_proj() const {
  return _internal_has_proj();
}
inline void Projection::clear_proj() {
  _impl_.proj_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Projection::proj() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Projection.proj)
  return _internal_proj();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Projection::set_proj(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.proj_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Projection.proj)
}
inline std::string* Projection::mutable_proj() {
  std::string* _s = _internal_mutable_proj();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Projection.proj)
  return _s;
}
inline const std::string& Projection::_internal_proj() const {
  return _impl_.proj_.Get();
}
inline void Projection::_internal_set_proj(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.proj_.Set(value, GetArenaForAllocation());
}
inline std::string* Projection::_internal_mutable_proj() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.proj_.Mutable(GetArenaForAllocation());
}
inline std::string* Projection::release_proj() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Projection.proj)
  if (!_internal_has_proj()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.proj_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proj_.IsDefault()) {
    _impl_.proj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Projection::set_allocated_proj(std::string* proj) {
  if (proj != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proj_.SetAllocated(proj, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proj_.IsDefault()) {
    _impl_.proj_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Projection.proj)
}

// -------------------------------------------------------------------

// Header

// optional bytes version = 1;
inline bool Header::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_version() const {
  return _internal_has_version();
}
inline void Header::clear_version() {
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::version() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_version(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.version_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.version)
}
inline std::string* Header::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.version)
  return _s;
}
inline const std::string& Header::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Header::_internal_set_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_version() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.version)
}

// optional bytes date = 2;
inline bool Header::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Header::has_date() const {
  return _internal_has_date();
}
inline void Header::clear_date() {
  _impl_.date_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Header::date() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.date)
  return _internal_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_date(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.date_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.date)
}
inline std::string* Header::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.date)
  return _s;
}
inline const std::string& Header::_internal_date() const {
  return _impl_.date_.Get();
}
inline void Header::_internal_set_date(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_date() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.date_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_date() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.date_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.date_.SetAllocated(date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_.IsDefault()) {
    _impl_.date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.date)
}

// optional .apollo.hdmap.Projection projection = 3;
inline bool Header::_internal_has_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_ != nullptr);
  return value;
}
inline bool Header::has_projection() const {
  return _internal_has_projection();
}
inline void Header::clear_projection() {
  if (_impl_.projection_ != nullptr) _impl_.projection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::apollo::hdmap::Projection& Header::_internal_projection() const {
  const ::apollo::hdmap::Projection* p = _impl_.projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Projection&>(
      ::apollo::hdmap::_Projection_default_instance_);
}
inline const ::apollo::hdmap::Projection& Header::projection() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.projection)
  return _internal_projection();
}
inline void Header::unsafe_arena_set_allocated_projection(
    ::apollo::hdmap::Projection* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  _impl_.projection_ = projection;
  if (projection) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Header.projection)
}
inline ::apollo::hdmap::Projection* Header::release_projection() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::hdmap::Projection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Projection* Header::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.projection)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::apollo::hdmap::Projection* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Projection* Header::_internal_mutable_projection() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Projection>(GetArenaForAllocation());
    _impl_.projection_ = p;
  }
  return _impl_.projection_;
}
inline ::apollo::hdmap::Projection* Header::mutable_projection() {
  ::apollo::hdmap::Projection* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.projection)
  return _msg;
}
inline void Header::set_allocated_projection(::apollo::hdmap::Projection* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projection_;
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projection);
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.projection)
}

// optional bytes district = 4;
inline bool Header::_internal_has_district() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Header::has_district() const {
  return _internal_has_district();
}
inline void Header::clear_district() {
  _impl_.district_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Header::district() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.district)
  return _internal_district();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_district(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.district_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.district)
}
inline std::string* Header::mutable_district() {
  std::string* _s = _internal_mutable_district();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.district)
  return _s;
}
inline const std::string& Header::_internal_district() const {
  return _impl_.district_.Get();
}
inline void Header::_internal_set_district(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.district_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_district() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.district_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_district() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.district)
  if (!_internal_has_district()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.district_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.district_.IsDefault()) {
    _impl_.district_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_district(std::string* district) {
  if (district != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.district_.SetAllocated(district, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.district_.IsDefault()) {
    _impl_.district_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.district)
}

// optional bytes generation = 5;
inline bool Header::_internal_has_generation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Header::has_generation() const {
  return _internal_has_generation();
}
inline void Header::clear_generation() {
  _impl_.generation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Header::generation() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.generation)
  return _internal_generation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_generation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.generation_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.generation)
}
inline std::string* Header::mutable_generation() {
  std::string* _s = _internal_mutable_generation();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.generation)
  return _s;
}
inline const std::string& Header::_internal_generation() const {
  return _impl_.generation_.Get();
}
inline void Header::_internal_set_generation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.generation_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_generation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.generation_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_generation() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.generation)
  if (!_internal_has_generation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.generation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.generation_.IsDefault()) {
    _impl_.generation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_generation(std::string* generation) {
  if (generation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.generation_.SetAllocated(generation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.generation_.IsDefault()) {
    _impl_.generation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.generation)
}

// optional bytes rev_major = 6;
inline bool Header::_internal_has_rev_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Header::has_rev_major() const {
  return _internal_has_rev_major();
}
inline void Header::clear_rev_major() {
  _impl_.rev_major_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Header::rev_major() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.rev_major)
  return _internal_rev_major();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_rev_major(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.rev_major_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.rev_major)
}
inline std::string* Header::mutable_rev_major() {
  std::string* _s = _internal_mutable_rev_major();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.rev_major)
  return _s;
}
inline const std::string& Header::_internal_rev_major() const {
  return _impl_.rev_major_.Get();
}
inline void Header::_internal_set_rev_major(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rev_major_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_rev_major() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.rev_major_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_rev_major() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.rev_major)
  if (!_internal_has_rev_major()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.rev_major_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rev_major_.IsDefault()) {
    _impl_.rev_major_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_rev_major(std::string* rev_major) {
  if (rev_major != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rev_major_.SetAllocated(rev_major, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rev_major_.IsDefault()) {
    _impl_.rev_major_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.rev_major)
}

// optional bytes rev_minor = 7;
inline bool Header::_internal_has_rev_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Header::has_rev_minor() const {
  return _internal_has_rev_minor();
}
inline void Header::clear_rev_minor() {
  _impl_.rev_minor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Header::rev_minor() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.rev_minor)
  return _internal_rev_minor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_rev_minor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.rev_minor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.rev_minor)
}
inline std::string* Header::mutable_rev_minor() {
  std::string* _s = _internal_mutable_rev_minor();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.rev_minor)
  return _s;
}
inline const std::string& Header::_internal_rev_minor() const {
  return _impl_.rev_minor_.Get();
}
inline void Header::_internal_set_rev_minor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.rev_minor_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_rev_minor() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.rev_minor_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_rev_minor() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.rev_minor)
  if (!_internal_has_rev_minor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.rev_minor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rev_minor_.IsDefault()) {
    _impl_.rev_minor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_rev_minor(std::string* rev_minor) {
  if (rev_minor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rev_minor_.SetAllocated(rev_minor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rev_minor_.IsDefault()) {
    _impl_.rev_minor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.rev_minor)
}

// optional double left = 8;
inline bool Header::_internal_has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Header::has_left() const {
  return _internal_has_left();
}
inline void Header::clear_left() {
  _impl_.left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double Header::_internal_left() const {
  return _impl_.left_;
}
inline double Header::left() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.left)
  return _internal_left();
}
inline void Header::_internal_set_left(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.left_ = value;
}
inline void Header::set_left(double value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.left)
}

// optional double top = 9;
inline bool Header::_internal_has_top() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Header::has_top() const {
  return _internal_has_top();
}
inline void Header::clear_top() {
  _impl_.top_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Header::_internal_top() const {
  return _impl_.top_;
}
inline double Header::top() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.top)
  return _internal_top();
}
inline void Header::_internal_set_top(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.top_ = value;
}
inline void Header::set_top(double value) {
  _internal_set_top(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.top)
}

// optional double right = 10;
inline bool Header::_internal_has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Header::has_right() const {
  return _internal_has_right();
}
inline void Header::clear_right() {
  _impl_.right_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double Header::_internal_right() const {
  return _impl_.right_;
}
inline double Header::right() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.right)
  return _internal_right();
}
inline void Header::_internal_set_right(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.right_ = value;
}
inline void Header::set_right(double value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.right)
}

// optional double bottom = 11;
inline bool Header::_internal_has_bottom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Header::has_bottom() const {
  return _internal_has_bottom();
}
inline void Header::clear_bottom() {
  _impl_.bottom_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double Header::_internal_bottom() const {
  return _impl_.bottom_;
}
inline double Header::bottom() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.bottom)
  return _internal_bottom();
}
inline void Header::_internal_set_bottom(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bottom_ = value;
}
inline void Header::set_bottom(double value) {
  _internal_set_bottom(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.bottom)
}

// optional bytes vendor = 12;
inline bool Header::_internal_has_vendor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Header::has_vendor() const {
  return _internal_has_vendor();
}
inline void Header::clear_vendor() {
  _impl_.vendor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Header::vendor() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_vendor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.vendor_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.vendor)
}
inline std::string* Header::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.vendor)
  return _s;
}
inline const std::string& Header::_internal_vendor() const {
  return _impl_.vendor_.Get();
}
inline void Header::_internal_set_vendor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.vendor_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_vendor() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.vendor_.Mutable(GetArenaForAllocation());
}
inline std::string* Header::release_vendor() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.vendor)
  if (!_internal_has_vendor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.vendor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_.IsDefault()) {
    _impl_.vendor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Header::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.vendor_.SetAllocated(vendor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_.IsDefault()) {
    _impl_.vendor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.vendor)
}

// -------------------------------------------------------------------

// Map

// optional .apollo.hdmap.Header header = 1;
inline bool Map::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Map::has_header() const {
  return _internal_has_header();
}
inline void Map::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::hdmap::Header& Map::_internal_header() const {
  const ::apollo::hdmap::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::hdmap::Header&>(
      ::apollo::hdmap::_Header_default_instance_);
}
inline const ::apollo::hdmap::Header& Map::header() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.header)
  return _internal_header();
}
inline void Map::unsafe_arena_set_allocated_header(
    ::apollo::hdmap::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.hdmap.Map.header)
}
inline ::apollo::hdmap::Header* Map::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::hdmap::Header* Map::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Map.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::Header* Map::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::apollo::hdmap::Header* Map::mutable_header() {
  ::apollo::hdmap::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.header)
  return _msg;
}
inline void Map::set_allocated_header(::apollo::hdmap::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Map.header)
}

// repeated .apollo.hdmap.Crosswalk crosswalk = 2;
inline int Map::_internal_crosswalk_size() const {
  return _impl_.crosswalk_.size();
}
inline int Map::crosswalk_size() const {
  return _internal_crosswalk_size();
}
inline ::apollo::hdmap::Crosswalk* Map::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.crosswalk)
  return _impl_.crosswalk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Crosswalk >*
Map::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.crosswalk)
  return &_impl_.crosswalk_;
}
inline const ::apollo::hdmap::Crosswalk& Map::_internal_crosswalk(int index) const {
  return _impl_.crosswalk_.Get(index);
}
inline const ::apollo::hdmap::Crosswalk& Map::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.crosswalk)
  return _internal_crosswalk(index);
}
inline ::apollo::hdmap::Crosswalk* Map::_internal_add_crosswalk() {
  return _impl_.crosswalk_.Add();
}
inline ::apollo::hdmap::Crosswalk* Map::add_crosswalk() {
  ::apollo::hdmap::Crosswalk* _add = _internal_add_crosswalk();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.crosswalk)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Crosswalk >&
Map::crosswalk() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.crosswalk)
  return _impl_.crosswalk_;
}

// repeated .apollo.hdmap.Junction junction = 3;
inline int Map::_internal_junction_size() const {
  return _impl_.junction_.size();
}
inline int Map::junction_size() const {
  return _internal_junction_size();
}
inline ::apollo::hdmap::Junction* Map::mutable_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.junction)
  return _impl_.junction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Junction >*
Map::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.junction)
  return &_impl_.junction_;
}
inline const ::apollo::hdmap::Junction& Map::_internal_junction(int index) const {
  return _impl_.junction_.Get(index);
}
inline const ::apollo::hdmap::Junction& Map::junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.junction)
  return _internal_junction(index);
}
inline ::apollo::hdmap::Junction* Map::_internal_add_junction() {
  return _impl_.junction_.Add();
}
inline ::apollo::hdmap::Junction* Map::add_junction() {
  ::apollo::hdmap::Junction* _add = _internal_add_junction();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.junction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Junction >&
Map::junction() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.junction)
  return _impl_.junction_;
}

// repeated .apollo.hdmap.Lane lane = 4;
inline int Map::_internal_lane_size() const {
  return _impl_.lane_.size();
}
inline int Map::lane_size() const {
  return _internal_lane_size();
}
inline ::apollo::hdmap::Lane* Map::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.lane)
  return _impl_.lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Lane >*
Map::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.lane)
  return &_impl_.lane_;
}
inline const ::apollo::hdmap::Lane& Map::_internal_lane(int index) const {
  return _impl_.lane_.Get(index);
}
inline const ::apollo::hdmap::Lane& Map::lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.lane)
  return _internal_lane(index);
}
inline ::apollo::hdmap::Lane* Map::_internal_add_lane() {
  return _impl_.lane_.Add();
}
inline ::apollo::hdmap::Lane* Map::add_lane() {
  ::apollo::hdmap::Lane* _add = _internal_add_lane();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.lane)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Lane >&
Map::lane() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.lane)
  return _impl_.lane_;
}

// repeated .apollo.hdmap.StopSign stop_sign = 5;
inline int Map::_internal_stop_sign_size() const {
  return _impl_.stop_sign_.size();
}
inline int Map::stop_sign_size() const {
  return _internal_stop_sign_size();
}
inline ::apollo::hdmap::StopSign* Map::mutable_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.stop_sign)
  return _impl_.stop_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::StopSign >*
Map::mutable_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.stop_sign)
  return &_impl_.stop_sign_;
}
inline const ::apollo::hdmap::StopSign& Map::_internal_stop_sign(int index) const {
  return _impl_.stop_sign_.Get(index);
}
inline const ::apollo::hdmap::StopSign& Map::stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.stop_sign)
  return _internal_stop_sign(index);
}
inline ::apollo::hdmap::StopSign* Map::_internal_add_stop_sign() {
  return _impl_.stop_sign_.Add();
}
inline ::apollo::hdmap::StopSign* Map::add_stop_sign() {
  ::apollo::hdmap::StopSign* _add = _internal_add_stop_sign();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.stop_sign)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::StopSign >&
Map::stop_sign() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.stop_sign)
  return _impl_.stop_sign_;
}

// repeated .apollo.hdmap.Signal signal = 6;
inline int Map::_internal_signal_size() const {
  return _impl_.signal_.size();
}
inline int Map::signal_size() const {
  return _internal_signal_size();
}
inline ::apollo::hdmap::Signal* Map::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.signal)
  return _impl_.signal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Signal >*
Map::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.signal)
  return &_impl_.signal_;
}
inline const ::apollo::hdmap::Signal& Map::_internal_signal(int index) const {
  return _impl_.signal_.Get(index);
}
inline const ::apollo::hdmap::Signal& Map::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.signal)
  return _internal_signal(index);
}
inline ::apollo::hdmap::Signal* Map::_internal_add_signal() {
  return _impl_.signal_.Add();
}
inline ::apollo::hdmap::Signal* Map::add_signal() {
  ::apollo::hdmap::Signal* _add = _internal_add_signal();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.signal)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Signal >&
Map::signal() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.signal)
  return _impl_.signal_;
}

// repeated .apollo.hdmap.YieldSign yield = 7;
inline int Map::_internal_yield_size() const {
  return _impl_.yield_.size();
}
inline int Map::yield_size() const {
  return _internal_yield_size();
}
inline ::apollo::hdmap::YieldSign* Map::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.yield)
  return _impl_.yield_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::YieldSign >*
Map::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.yield)
  return &_impl_.yield_;
}
inline const ::apollo::hdmap::YieldSign& Map::_internal_yield(int index) const {
  return _impl_.yield_.Get(index);
}
inline const ::apollo::hdmap::YieldSign& Map::yield(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.yield)
  return _internal_yield(index);
}
inline ::apollo::hdmap::YieldSign* Map::_internal_add_yield() {
  return _impl_.yield_.Add();
}
inline ::apollo::hdmap::YieldSign* Map::add_yield() {
  ::apollo::hdmap::YieldSign* _add = _internal_add_yield();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.yield)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::YieldSign >&
Map::yield() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.yield)
  return _impl_.yield_;
}

// repeated .apollo.hdmap.Overlap overlap = 8;
inline int Map::_internal_overlap_size() const {
  return _impl_.overlap_.size();
}
inline int Map::overlap_size() const {
  return _internal_overlap_size();
}
inline ::apollo::hdmap::Overlap* Map::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.overlap)
  return _impl_.overlap_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Overlap >*
Map::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.overlap)
  return &_impl_.overlap_;
}
inline const ::apollo::hdmap::Overlap& Map::_internal_overlap(int index) const {
  return _impl_.overlap_.Get(index);
}
inline const ::apollo::hdmap::Overlap& Map::overlap(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.overlap)
  return _internal_overlap(index);
}
inline ::apollo::hdmap::Overlap* Map::_internal_add_overlap() {
  return _impl_.overlap_.Add();
}
inline ::apollo::hdmap::Overlap* Map::add_overlap() {
  ::apollo::hdmap::Overlap* _add = _internal_add_overlap();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.overlap)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Overlap >&
Map::overlap() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.overlap)
  return _impl_.overlap_;
}

// repeated .apollo.hdmap.ClearArea clear_area = 9;
inline int Map::_internal_clear_area_size() const {
  return _impl_.clear_area_.size();
}
inline int Map::clear_area_size() const {
  return _internal_clear_area_size();
}
inline ::apollo::hdmap::ClearArea* Map::mutable_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.clear_area)
  return _impl_.clear_area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ClearArea >*
Map::mutable_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.clear_area)
  return &_impl_.clear_area_;
}
inline const ::apollo::hdmap::ClearArea& Map::_internal_clear_area(int index) const {
  return _impl_.clear_area_.Get(index);
}
inline const ::apollo::hdmap::ClearArea& Map::clear_area(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.clear_area)
  return _internal_clear_area(index);
}
inline ::apollo::hdmap::ClearArea* Map::_internal_add_clear_area() {
  return _impl_.clear_area_.Add();
}
inline ::apollo::hdmap::ClearArea* Map::add_clear_area() {
  ::apollo::hdmap::ClearArea* _add = _internal_add_clear_area();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.clear_area)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ClearArea >&
Map::clear_area() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.clear_area)
  return _impl_.clear_area_;
}

// repeated .apollo.hdmap.SpeedBump speed_bump = 10;
inline int Map::_internal_speed_bump_size() const {
  return _impl_.speed_bump_.size();
}
inline int Map::speed_bump_size() const {
  return _internal_speed_bump_size();
}
inline ::apollo::hdmap::SpeedBump* Map::mutable_speed_bump(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.speed_bump)
  return _impl_.speed_bump_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SpeedBump >*
Map::mutable_speed_bump() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.speed_bump)
  return &_impl_.speed_bump_;
}
inline const ::apollo::hdmap::SpeedBump& Map::_internal_speed_bump(int index) const {
  return _impl_.speed_bump_.Get(index);
}
inline const ::apollo::hdmap::SpeedBump& Map::speed_bump(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.speed_bump)
  return _internal_speed_bump(index);
}
inline ::apollo::hdmap::SpeedBump* Map::_internal_add_speed_bump() {
  return _impl_.speed_bump_.Add();
}
inline ::apollo::hdmap::SpeedBump* Map::add_speed_bump() {
  ::apollo::hdmap::SpeedBump* _add = _internal_add_speed_bump();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.speed_bump)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::SpeedBump >&
Map::speed_bump() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.speed_bump)
  return _impl_.speed_bump_;
}

// repeated .apollo.hdmap.Road road = 11;
inline int Map::_internal_road_size() const {
  return _impl_.road_.size();
}
inline int Map::road_size() const {
  return _internal_road_size();
}
inline ::apollo::hdmap::Road* Map::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.road)
  return _impl_.road_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Road >*
Map::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.road)
  return &_impl_.road_;
}
inline const ::apollo::hdmap::Road& Map::_internal_road(int index) const {
  return _impl_.road_.Get(index);
}
inline const ::apollo::hdmap::Road& Map::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.road)
  return _internal_road(index);
}
inline ::apollo::hdmap::Road* Map::_internal_add_road() {
  return _impl_.road_.Add();
}
inline ::apollo::hdmap::Road* Map::add_road() {
  ::apollo::hdmap::Road* _add = _internal_add_road();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.road)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::Road >&
Map::road() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.road)
  return _impl_.road_;
}

// repeated .apollo.hdmap.ParkingSpace parking_space = 12;
inline int Map::_internal_parking_space_size() const {
  return _impl_.parking_space_.size();
}
inline int Map::parking_space_size() const {
  return _internal_parking_space_size();
}
inline ::apollo::hdmap::ParkingSpace* Map::mutable_parking_space(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.parking_space)
  return _impl_.parking_space_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >*
Map::mutable_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.parking_space)
  return &_impl_.parking_space_;
}
inline const ::apollo::hdmap::ParkingSpace& Map::_internal_parking_space(int index) const {
  return _impl_.parking_space_.Get(index);
}
inline const ::apollo::hdmap::ParkingSpace& Map::parking_space(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.parking_space)
  return _internal_parking_space(index);
}
inline ::apollo::hdmap::ParkingSpace* Map::_internal_add_parking_space() {
  return _impl_.parking_space_.Add();
}
inline ::apollo::hdmap::ParkingSpace* Map::add_parking_space() {
  ::apollo::hdmap::ParkingSpace* _add = _internal_add_parking_space();
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.parking_space)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >&
Map::parking_space() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.parking_space)
  return _impl_.parking_space_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto
