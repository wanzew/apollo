// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_signal.proto

#include "modules/map/proto/map_signal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR Subsignal::Subsignal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.type_)*/1} {}
struct SubsignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubsignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubsignalDefaultTypeInternal() {}
  union {
    Subsignal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubsignalDefaultTypeInternal _Subsignal_default_instance_;
PROTOBUF_CONSTEXPR SignInfo::SignInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0} {}
struct SignInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignInfoDefaultTypeInternal() {}
  union {
    SignInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignInfoDefaultTypeInternal _SignInfo_default_instance_;
PROTOBUF_CONSTEXPR Signal::Signal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subsignal_)*/{}
  , /*decltype(_impl_.overlap_id_)*/{}
  , /*decltype(_impl_.stop_line_)*/{}
  , /*decltype(_impl_.sign_info_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.boundary_)*/nullptr
  , /*decltype(_impl_.type_)*/1} {}
struct SignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignalDefaultTypeInternal() {}
  union {
    Signal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignalDefaultTypeInternal _Signal_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Subsignal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Subsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Subsignal, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Subsignal, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Subsignal, _impl_.location_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SignInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SignInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::SignInfo, _impl_.type_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.boundary_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.subsignal_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.overlap_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.stop_line_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::Signal, _impl_.sign_info_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::hdmap::Subsignal)},
  { 12, 19, -1, sizeof(::apollo::hdmap::SignInfo)},
  { 20, 33, -1, sizeof(::apollo::hdmap::Signal)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_Subsignal_default_instance_._instance,
  &::apollo::hdmap::_SignInfo_default_instance_._instance,
  &::apollo::hdmap::_Signal_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"modules/map/proto/map_signal.proto\022\014ap"
  "ollo.hdmap\032#modules/common/proto/geometr"
  "y.proto\032$modules/map/proto/map_geometry."
  "proto\032\036modules/map/proto/map_id.proto\"\241\002"
  "\n\tSubsignal\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.I"
  "d\022*\n\004type\030\002 \001(\0162\034.apollo.hdmap.Subsignal"
  ".Type\022)\n\010location\030\003 \001(\0132\027.apollo.common."
  "PointENU\"\236\001\n\004Type\022\013\n\007UNKNOWN\020\001\022\n\n\006CIRCLE"
  "\020\002\022\016\n\nARROW_LEFT\020\003\022\021\n\rARROW_FORWARD\020\004\022\017\n"
  "\013ARROW_RIGHT\020\005\022\032\n\026ARROW_LEFT_AND_FORWARD"
  "\020\006\022\033\n\027ARROW_RIGHT_AND_FORWARD\020\007\022\020\n\014ARROW"
  "_U_TURN\020\010\"a\n\010SignInfo\022)\n\004type\030\001 \001(\0162\033.ap"
  "ollo.hdmap.SignInfo.Type\"*\n\004Type\022\010\n\004None"
  "\020\000\022\030\n\024NO_RIGHT_TURN_ON_RED\020\001\"\222\003\n\006Signal\022"
  "\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\022\'\n\010boundar"
  "y\030\002 \001(\0132\025.apollo.hdmap.Polygon\022*\n\tsubsig"
  "nal\030\003 \003(\0132\027.apollo.hdmap.Subsignal\022$\n\nov"
  "erlap_id\030\004 \003(\0132\020.apollo.hdmap.Id\022\'\n\004type"
  "\030\005 \001(\0162\031.apollo.hdmap.Signal.Type\022&\n\tsto"
  "p_line\030\006 \003(\0132\023.apollo.hdmap.Curve\022)\n\tsig"
  "n_info\030\007 \003(\0132\026.apollo.hdmap.SignInfo\"s\n\004"
  "Type\022\013\n\007UNKNOWN\020\001\022\024\n\020MIX_2_HORIZONTAL\020\002\022"
  "\022\n\016MIX_2_VERTICAL\020\003\022\024\n\020MIX_3_HORIZONTAL\020"
  "\004\022\022\n\016MIX_3_VERTICAL\020\005\022\n\n\006SINGLE\020\006"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_5fid_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto = {
    false, false, 953, descriptor_table_protodef_modules_2fmap_2fproto_2fmap_5fsignal_2eproto,
    "modules/map/proto/map_signal.proto",
    &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_once, descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::offsets,
    file_level_metadata_modules_2fmap_2fproto_2fmap_5fsignal_2eproto, file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto,
    file_level_service_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2fproto_2fmap_5fsignal_2eproto(&descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Subsignal_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[0];
}
bool Subsignal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Subsignal_Type Subsignal::UNKNOWN;
constexpr Subsignal_Type Subsignal::CIRCLE;
constexpr Subsignal_Type Subsignal::ARROW_LEFT;
constexpr Subsignal_Type Subsignal::ARROW_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_RIGHT;
constexpr Subsignal_Type Subsignal::ARROW_LEFT_AND_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_RIGHT_AND_FORWARD;
constexpr Subsignal_Type Subsignal::ARROW_U_TURN;
constexpr Subsignal_Type Subsignal::Type_MIN;
constexpr Subsignal_Type Subsignal::Type_MAX;
constexpr int Subsignal::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[1];
}
bool SignInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SignInfo_Type SignInfo::None;
constexpr SignInfo_Type SignInfo::NO_RIGHT_TURN_ON_RED;
constexpr SignInfo_Type SignInfo::Type_MIN;
constexpr SignInfo_Type SignInfo::Type_MAX;
constexpr int SignInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Signal_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[2];
}
bool Signal_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Signal_Type Signal::UNKNOWN;
constexpr Signal_Type Signal::MIX_2_HORIZONTAL;
constexpr Signal_Type Signal::MIX_2_VERTICAL;
constexpr Signal_Type Signal::MIX_3_HORIZONTAL;
constexpr Signal_Type Signal::MIX_3_VERTICAL;
constexpr Signal_Type Signal::SINGLE;
constexpr Signal_Type Signal::Type_MIN;
constexpr Signal_Type Signal::Type_MAX;
constexpr int Signal::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Subsignal::_Internal {
 public:
  using HasBits = decltype(std::declval<Subsignal>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const Subsignal* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::common::PointENU& location(const Subsignal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::hdmap::Id&
Subsignal::_Internal::id(const Subsignal* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::common::PointENU&
Subsignal::_Internal::location(const Subsignal* msg) {
  return *msg->_impl_.location_;
}
void Subsignal::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Subsignal::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Subsignal::Subsignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Subsignal)
}
Subsignal::Subsignal(const Subsignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_location()) {
    _impl_.location_ = new ::apollo::common::PointENU(*from._impl_.location_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Subsignal)
}

inline void Subsignal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.type_){1}
  };
}

Subsignal::~Subsignal() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Subsignal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subsignal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void Subsignal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Subsignal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subsignal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Subsignal.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Subsignal_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::Subsignal_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.common.PointENU location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subsignal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Subsignal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Subsignal.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .apollo.common.PointENU location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Subsignal)
  return target;
}

size_t Subsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Subsignal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.common.PointENU location = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .apollo.hdmap.Subsignal.Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subsignal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subsignal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subsignal::GetClassData() const { return &_class_data_; }

void Subsignal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Subsignal *>(to)->MergeFrom(
      static_cast<const Subsignal &>(from));
}


void Subsignal::MergeFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Subsignal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::apollo::common::PointENU::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subsignal::CopyFrom(const Subsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Subsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subsignal::IsInitialized() const {
  return true;
}

void Subsignal::InternalSwap(Subsignal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subsignal, _impl_.location_)
      + sizeof(Subsignal::_impl_.location_)
      - PROTOBUF_FIELD_OFFSET(Subsignal, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subsignal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[0]);
}

// ===================================================================

class SignInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SignInfo>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SignInfo::SignInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.SignInfo)
}
SignInfo::SignInfo(const SignInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.SignInfo)
}

inline void SignInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
  };
}

SignInfo::~SignInfo() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.SignInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SignInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.SignInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.SignInfo.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::SignInfo_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::SignInfo_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.SignInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.SignInfo.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.SignInfo)
  return target;
}

size_t SignInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.SignInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.SignInfo.Type type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SignInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignInfo::GetClassData() const { return &_class_data_; }

void SignInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SignInfo *>(to)->MergeFrom(
      static_cast<const SignInfo &>(from));
}


void SignInfo::MergeFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.SignInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignInfo::CopyFrom(const SignInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.SignInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInfo::IsInitialized() const {
  return true;
}

void SignInfo::InternalSwap(SignInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[1]);
}

// ===================================================================

class Signal::_Internal {
 public:
  using HasBits = decltype(std::declval<Signal>()._impl_._has_bits_);
  static const ::apollo::hdmap::Id& id(const Signal* msg);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Polygon& boundary(const Signal* msg);
  static void set_has_boundary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::hdmap::Id&
Signal::_Internal::id(const Signal* msg) {
  return *msg->_impl_.id_;
}
const ::apollo::hdmap::Polygon&
Signal::_Internal::boundary(const Signal* msg) {
  return *msg->_impl_.boundary_;
}
void Signal::clear_id() {
  if (_impl_.id_ != nullptr) _impl_.id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_boundary() {
  if (_impl_.boundary_ != nullptr) _impl_.boundary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_overlap_id() {
  _impl_.overlap_id_.Clear();
}
void Signal::clear_stop_line() {
  _impl_.stop_line_.Clear();
}
Signal::Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.Signal)
}
Signal::Signal(const Signal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subsignal_){from._impl_.subsignal_}
    , decltype(_impl_.overlap_id_){from._impl_.overlap_id_}
    , decltype(_impl_.stop_line_){from._impl_.stop_line_}
    , decltype(_impl_.sign_info_){from._impl_.sign_info_}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.boundary_){nullptr}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _impl_.id_ = new ::apollo::hdmap::Id(*from._impl_.id_);
  }
  if (from._internal_has_boundary()) {
    _impl_.boundary_ = new ::apollo::hdmap::Polygon(*from._impl_.boundary_);
  }
  _impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Signal)
}

inline void Signal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subsignal_){arena}
    , decltype(_impl_.overlap_id_){arena}
    , decltype(_impl_.stop_line_){arena}
    , decltype(_impl_.sign_info_){arena}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.boundary_){nullptr}
    , decltype(_impl_.type_){1}
  };
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Signal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subsignal_.~RepeatedPtrField();
  _impl_.overlap_id_.~RepeatedPtrField();
  _impl_.stop_line_.~RepeatedPtrField();
  _impl_.sign_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.boundary_;
}

void Signal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Signal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subsignal_.Clear();
  _impl_.overlap_id_.Clear();
  _impl_.stop_line_.Clear();
  _impl_.sign_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.id_ != nullptr);
      _impl_.id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.boundary_ != nullptr);
      _impl_.boundary_->Clear();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.Id id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Polygon boundary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Subsignal subsignal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subsignal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Id overlap_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overlap_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Signal.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::Signal_Type_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::Signal_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.Curve stop_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.SignInfo sign_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sign_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Signal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Signal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Polygon boundary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::boundary(this),
        _Internal::boundary(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subsignal_size()); i < n; i++) {
    const auto& repfield = this->_internal_subsignal(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.Id overlap_id = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overlap_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_overlap_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Signal.Type type = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // repeated .apollo.hdmap.Curve stop_line = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.SignInfo sign_info = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sign_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_sign_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Signal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.Subsignal subsignal = 3;
  total_size += 1UL * this->_internal_subsignal_size();
  for (const auto& msg : this->_impl_.subsignal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Id overlap_id = 4;
  total_size += 1UL * this->_internal_overlap_id_size();
  for (const auto& msg : this->_impl_.overlap_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.Curve stop_line = 6;
  total_size += 1UL * this->_internal_stop_line_size();
  for (const auto& msg : this->_impl_.stop_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.hdmap.SignInfo sign_info = 7;
  total_size += 1UL * this->_internal_sign_info_size();
  for (const auto& msg : this->_impl_.sign_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.Id id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.id_);
    }

    // optional .apollo.hdmap.Polygon boundary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boundary_);
    }

    // optional .apollo.hdmap.Signal.Type type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Signal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signal::GetClassData() const { return &_class_data_; }

void Signal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Signal *>(to)->MergeFrom(
      static_cast<const Signal &>(from));
}


void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.subsignal_.MergeFrom(from._impl_.subsignal_);
  _impl_.overlap_id_.MergeFrom(from._impl_.overlap_id_);
  _impl_.stop_line_.MergeFrom(from._impl_.stop_line_);
  _impl_.sign_info_.MergeFrom(from._impl_.sign_info_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_id()->::apollo::hdmap::Id::MergeFrom(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_boundary()->::apollo::hdmap::Polygon::MergeFrom(from._internal_boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::InternalSwap(Signal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subsignal_.InternalSwap(&other->_impl_.subsignal_);
  _impl_.overlap_id_.InternalSwap(&other->_impl_.overlap_id_);
  _impl_.stop_line_.InternalSwap(&other->_impl_.stop_line_);
  _impl_.sign_info_.InternalSwap(&other->_impl_.sign_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Signal, _impl_.boundary_)
      + sizeof(Signal::_impl_.boundary_)
      - PROTOBUF_FIELD_OFFSET(Signal, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_getter, &descriptor_table_modules_2fmap_2fproto_2fmap_5fsignal_2eproto_once,
      file_level_metadata_modules_2fmap_2fproto_2fmap_5fsignal_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Subsignal*
Arena::CreateMaybeMessage< ::apollo::hdmap::Subsignal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Subsignal >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::SignInfo*
Arena::CreateMaybeMessage< ::apollo::hdmap::SignInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::SignInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::Signal*
Arena::CreateMaybeMessage< ::apollo::hdmap::Signal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::Signal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
