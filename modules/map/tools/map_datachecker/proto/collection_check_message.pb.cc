// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/tools/map_datachecker/proto/collection_check_message.proto

#include "modules/map/tools/map_datachecker/proto/collection_check_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace hdmap {
PROTOBUF_CONSTEXPR VerifyRange::VerifyRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_time_)*/0
  , /*decltype(_impl_.end_time_)*/0} {}
struct VerifyRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyRangeDefaultTypeInternal() {}
  union {
    VerifyRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyRangeDefaultTypeInternal _VerifyRange_default_instance_;
PROTOBUF_CONSTEXPR LoopResult::LoopResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.loop_num_)*/0
  , /*decltype(_impl_.is_reached_)*/false} {}
struct LoopResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopResultDefaultTypeInternal() {}
  union {
    LoopResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopResultDefaultTypeInternal _LoopResult_default_instance_;
PROTOBUF_CONSTEXPR TopicResult::TopicResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_lack_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopicResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicResultDefaultTypeInternal() {}
  union {
    TopicResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicResultDefaultTypeInternal _TopicResult_default_instance_;
PROTOBUF_CONSTEXPR FrameRate::FrameRate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bad_record_name_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expected_rate_)*/0
  , /*decltype(_impl_.current_rate_)*/0} {}
struct FrameRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameRateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameRateDefaultTypeInternal() {}
  union {
    FrameRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameRateDefaultTypeInternal _FrameRate_default_instance_;
PROTOBUF_CONSTEXPR VerifyResult::VerifyResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rates_)*/{}
  , /*decltype(_impl_.topics_)*/nullptr} {}
struct VerifyResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyResultDefaultTypeInternal() {}
  union {
    VerifyResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyResultDefaultTypeInternal _VerifyResult_default_instance_;
PROTOBUF_CONSTEXPR ChannelVerifyRequest::ChannelVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.collect_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cmd_)*/1} {}
struct ChannelVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelVerifyRequestDefaultTypeInternal() {}
  union {
    ChannelVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelVerifyRequestDefaultTypeInternal _ChannelVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR ChannelVerifyResponse::ChannelVerifyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.code_)*/0} {}
struct ChannelVerifyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelVerifyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelVerifyResponseDefaultTypeInternal() {}
  union {
    ChannelVerifyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelVerifyResponseDefaultTypeInternal _ChannelVerifyResponse_default_instance_;
PROTOBUF_CONSTEXPR LoopsVerifyRequest::LoopsVerifyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/{}
  , /*decltype(_impl_.cmd_)*/1
  , /*decltype(_impl_.type_)*/1} {}
struct LoopsVerifyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopsVerifyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopsVerifyRequestDefaultTypeInternal() {}
  union {
    LoopsVerifyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopsVerifyRequestDefaultTypeInternal _LoopsVerifyRequest_default_instance_;
PROTOBUF_CONSTEXPR LoopsVerifyResponse::LoopsVerifyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.loop_result_)*/nullptr
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.code_)*/0} {}
struct LoopsVerifyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoopsVerifyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoopsVerifyResponseDefaultTypeInternal() {}
  union {
    LoopsVerifyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoopsVerifyResponseDefaultTypeInternal _LoopsVerifyResponse_default_instance_;
PROTOBUF_CONSTEXPR DynamicAlignRequest::DynamicAlignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/1} {}
struct DynamicAlignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicAlignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicAlignRequestDefaultTypeInternal() {}
  union {
    DynamicAlignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicAlignRequestDefaultTypeInternal _DynamicAlignRequest_default_instance_;
PROTOBUF_CONSTEXPR DynamicAlignResponse::DynamicAlignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.code_)*/0} {}
struct DynamicAlignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DynamicAlignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DynamicAlignResponseDefaultTypeInternal() {}
  union {
    DynamicAlignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DynamicAlignResponseDefaultTypeInternal _DynamicAlignResponse_default_instance_;
PROTOBUF_CONSTEXPR StaticAlignRequest::StaticAlignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/1} {}
struct StaticAlignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticAlignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticAlignRequestDefaultTypeInternal() {}
  union {
    StaticAlignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticAlignRequestDefaultTypeInternal _StaticAlignRequest_default_instance_;
PROTOBUF_CONSTEXPR StaticAlignResponse::StaticAlignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.code_)*/0} {}
struct StaticAlignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StaticAlignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StaticAlignResponseDefaultTypeInternal() {}
  union {
    StaticAlignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StaticAlignResponseDefaultTypeInternal _StaticAlignResponse_default_instance_;
PROTOBUF_CONSTEXPR EightRouteRequest::EightRouteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cmd_)*/1} {}
struct EightRouteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EightRouteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EightRouteRequestDefaultTypeInternal() {}
  union {
    EightRouteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EightRouteRequestDefaultTypeInternal _EightRouteRequest_default_instance_;
PROTOBUF_CONSTEXPR EightRouteResponse::EightRouteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.progress_)*/0
  , /*decltype(_impl_.code_)*/0} {}
struct EightRouteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EightRouteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EightRouteResponseDefaultTypeInternal() {}
  union {
    EightRouteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EightRouteResponseDefaultTypeInternal _EightRouteResponse_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _impl_.end_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _impl_.is_reached_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _impl_.loop_num_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::TopicResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::TopicResult, _impl_.topic_lack_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _impl_.expected_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _impl_.current_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _impl_.bad_record_name_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _impl_.topics_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _impl_.rates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _impl_.collect_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _impl_.path_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _impl_.result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _impl_.cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _impl_.range_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _impl_.loop_result_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, _impl_.cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _impl_.progress_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, _impl_.cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _impl_.progress_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, _impl_.cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _impl_.progress_),
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::hdmap::VerifyRange)},
  { 10, 18, -1, sizeof(::apollo::hdmap::LoopResult)},
  { 20, -1, -1, sizeof(::apollo::hdmap::TopicResult)},
  { 27, 37, -1, sizeof(::apollo::hdmap::FrameRate)},
  { 41, 49, -1, sizeof(::apollo::hdmap::VerifyResult)},
  { 51, 60, -1, sizeof(::apollo::hdmap::ChannelVerifyRequest)},
  { 63, 71, -1, sizeof(::apollo::hdmap::ChannelVerifyResponse)},
  { 73, 82, -1, sizeof(::apollo::hdmap::LoopsVerifyRequest)},
  { 85, 94, -1, sizeof(::apollo::hdmap::LoopsVerifyResponse)},
  { 97, 104, -1, sizeof(::apollo::hdmap::DynamicAlignRequest)},
  { 105, 113, -1, sizeof(::apollo::hdmap::DynamicAlignResponse)},
  { 115, 122, -1, sizeof(::apollo::hdmap::StaticAlignRequest)},
  { 123, 131, -1, sizeof(::apollo::hdmap::StaticAlignResponse)},
  { 133, 140, -1, sizeof(::apollo::hdmap::EightRouteRequest)},
  { 141, 149, -1, sizeof(::apollo::hdmap::EightRouteResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::hdmap::_VerifyRange_default_instance_._instance,
  &::apollo::hdmap::_LoopResult_default_instance_._instance,
  &::apollo::hdmap::_TopicResult_default_instance_._instance,
  &::apollo::hdmap::_FrameRate_default_instance_._instance,
  &::apollo::hdmap::_VerifyResult_default_instance_._instance,
  &::apollo::hdmap::_ChannelVerifyRequest_default_instance_._instance,
  &::apollo::hdmap::_ChannelVerifyResponse_default_instance_._instance,
  &::apollo::hdmap::_LoopsVerifyRequest_default_instance_._instance,
  &::apollo::hdmap::_LoopsVerifyResponse_default_instance_._instance,
  &::apollo::hdmap::_DynamicAlignRequest_default_instance_._instance,
  &::apollo::hdmap::_DynamicAlignResponse_default_instance_._instance,
  &::apollo::hdmap::_StaticAlignRequest_default_instance_._instance,
  &::apollo::hdmap::_StaticAlignResponse_default_instance_._instance,
  &::apollo::hdmap::_EightRouteRequest_default_instance_._instance,
  &::apollo::hdmap::_EightRouteResponse_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nFmodules/map/tools/map_datachecker/prot"
  "o/collection_check_message.proto\022\014apollo"
  ".hdmap\032Cmodules/map/tools/map_datachecke"
  "r/proto/collection_error_code.proto\"3\n\013V"
  "erifyRange\022\022\n\nstart_time\030\001 \001(\001\022\020\n\010end_ti"
  "me\030\002 \001(\001\"2\n\nLoopResult\022\022\n\nis_reached\030\001 \002"
  "(\010\022\020\n\010loop_num\030\002 \001(\001\"!\n\013TopicResult\022\022\n\nt"
  "opic_lack\030\001 \003(\t\"`\n\tFrameRate\022\r\n\005topic\030\001 "
  "\001(\t\022\025\n\rexpected_rate\030\002 \001(\001\022\024\n\014current_ra"
  "te\030\003 \001(\001\022\027\n\017bad_record_name\030\004 \003(\t\"a\n\014Ver"
  "ifyResult\022)\n\006topics\030\001 \001(\0132\031.apollo.hdmap"
  ".TopicResult\022&\n\005rates\030\002 \003(\0132\027.apollo.hdm"
  "ap.FrameRate\"\\\n\024ChannelVerifyRequest\022\"\n\003"
  "cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\022\022\n\ncoll"
  "ect_id\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\"j\n\025ChannelVer"
  "ifyResponse\022%\n\004code\030\001 \001(\0162\027.apollo.hdmap"
  ".ErrorCode\022*\n\006result\030\002 \001(\0132\032.apollo.hdma"
  "p.VerifyResult\"\210\001\n\022LoopsVerifyRequest\022\"\n"
  "\003cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\022$\n\004typ"
  "e\030\002 \001(\0162\026.apollo.hdmap.DataType\022(\n\005range"
  "\030\003 \003(\0132\031.apollo.hdmap.VerifyRange\"}\n\023Loo"
  "psVerifyResponse\022%\n\004code\030\001 \001(\0162\027.apollo."
  "hdmap.ErrorCode\022\020\n\010progress\030\002 \001(\001\022-\n\013loo"
  "p_result\030\003 \001(\0132\030.apollo.hdmap.LoopResult"
  "\"9\n\023DynamicAlignRequest\022\"\n\003cmd\030\001 \001(\0162\025.a"
  "pollo.hdmap.CmdType\"O\n\024DynamicAlignRespo"
  "nse\022%\n\004code\030\001 \001(\0162\027.apollo.hdmap.ErrorCo"
  "de\022\020\n\010progress\030\002 \001(\001\"8\n\022StaticAlignReque"
  "st\022\"\n\003cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\"N"
  "\n\023StaticAlignResponse\022%\n\004code\030\001 \001(\0162\027.ap"
  "ollo.hdmap.ErrorCode\022\020\n\010progress\030\002 \001(\001\"7"
  "\n\021EightRouteRequest\022\"\n\003cmd\030\001 \001(\0162\025.apoll"
  "o.hdmap.CmdType\"M\n\022EightRouteResponse\022%\n"
  "\004code\030\001 \001(\0162\027.apollo.hdmap.ErrorCode\022\020\n\010"
  "progress\030\002 \001(\001*)\n\007CmdType\022\t\n\005START\020\001\022\t\n\005"
  "CHECK\020\002\022\010\n\004STOP\020\003*,\n\010DataType\022\016\n\nMAP_MAK"
  "ING\020\001\022\020\n\014MAP_CHECKOUT\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5ferror_5fcode_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto = {
    false, false, 1463, descriptor_table_protodef_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto,
    "modules/map/tools/map_datachecker/proto/collection_check_message.proto",
    &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once, descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto::offsets,
    file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto, file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto,
    file_level_service_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VerifyRange::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyRange>()._impl_._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VerifyRange::VerifyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.VerifyRange)
}
VerifyRange::VerifyRange(const VerifyRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_time_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.VerifyRange)
}

inline void VerifyRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_time_){0}
    , decltype(_impl_.end_time_){0}
  };
}

VerifyRange::~VerifyRange() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.VerifyRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VerifyRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.VerifyRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.end_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_end_time(&has_bits);
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.VerifyRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional double end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.VerifyRange)
  return target;
}

size_t VerifyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.VerifyRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double start_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double end_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyRange::GetClassData() const { return &_class_data_; }

void VerifyRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyRange *>(to)->MergeFrom(
      static_cast<const VerifyRange &>(from));
}


void VerifyRange::MergeFrom(const VerifyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.VerifyRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.start_time_ = from._impl_.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.end_time_ = from._impl_.end_time_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyRange::CopyFrom(const VerifyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.VerifyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRange::IsInitialized() const {
  return true;
}

void VerifyRange::InternalSwap(VerifyRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VerifyRange, _impl_.end_time_)
      + sizeof(VerifyRange::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(VerifyRange, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[0]);
}

// ===================================================================

class LoopResult::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopResult>()._impl_._has_bits_);
  static void set_has_is_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loop_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

LoopResult::LoopResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LoopResult)
}
LoopResult::LoopResult(const LoopResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loop_num_){}
    , decltype(_impl_.is_reached_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.loop_num_, &from._impl_.loop_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_reached_) -
    reinterpret_cast<char*>(&_impl_.loop_num_)) + sizeof(_impl_.is_reached_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopResult)
}

inline void LoopResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loop_num_){0}
    , decltype(_impl_.is_reached_){false}
  };
}

LoopResult::~LoopResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoopResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoopResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.loop_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_reached_) -
        reinterpret_cast<char*>(&_impl_.loop_num_)) + sizeof(_impl_.is_reached_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_reached = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_reached(&has_bits);
          _impl_.is_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double loop_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_loop_num(&has_bits);
          _impl_.loop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool is_reached = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_reached(), target);
  }

  // optional double loop_num = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_loop_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopResult)
  return target;
}

size_t LoopResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopResult)
  size_t total_size = 0;

  // required bool is_reached = 1;
  if (_internal_has_is_reached()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double loop_num = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoopResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopResult::GetClassData() const { return &_class_data_; }

void LoopResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoopResult *>(to)->MergeFrom(
      static_cast<const LoopResult &>(from));
}


void LoopResult::MergeFrom(const LoopResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.loop_num_ = from._impl_.loop_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.is_reached_ = from._impl_.is_reached_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopResult::CopyFrom(const LoopResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopResult::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void LoopResult::InternalSwap(LoopResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoopResult, _impl_.is_reached_)
      + sizeof(LoopResult::_impl_.is_reached_)
      - PROTOBUF_FIELD_OFFSET(LoopResult, _impl_.loop_num_)>(
          reinterpret_cast<char*>(&_impl_.loop_num_),
          reinterpret_cast<char*>(&other->_impl_.loop_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[1]);
}

// ===================================================================

class TopicResult::_Internal {
 public:
};

TopicResult::TopicResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.TopicResult)
}
TopicResult::TopicResult(const TopicResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.topic_lack_){from._impl_.topic_lack_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.TopicResult)
}

inline void TopicResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_lack_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TopicResult::~TopicResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.TopicResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_lack_.~RepeatedPtrField();
}

void TopicResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopicResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.TopicResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_lack_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopicResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string topic_lack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topic_lack();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.hdmap.TopicResult.topic_lack");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.TopicResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string topic_lack = 1;
  for (int i = 0, n = this->_internal_topic_lack_size(); i < n; i++) {
    const auto& s = this->_internal_topic_lack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.TopicResult.topic_lack");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.TopicResult)
  return target;
}

size_t TopicResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.TopicResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string topic_lack = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.topic_lack_.size());
  for (int i = 0, n = _impl_.topic_lack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.topic_lack_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopicResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TopicResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopicResult::GetClassData() const { return &_class_data_; }

void TopicResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TopicResult *>(to)->MergeFrom(
      static_cast<const TopicResult &>(from));
}


void TopicResult::MergeFrom(const TopicResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.TopicResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.topic_lack_.MergeFrom(from._impl_.topic_lack_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopicResult::CopyFrom(const TopicResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.TopicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicResult::IsInitialized() const {
  return true;
}

void TopicResult::InternalSwap(TopicResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.topic_lack_.InternalSwap(&other->_impl_.topic_lack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[2]);
}

// ===================================================================

class FrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameRate>()._impl_._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FrameRate::FrameRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.FrameRate)
}
FrameRate::FrameRate(const FrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bad_record_name_){from._impl_.bad_record_name_}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.expected_rate_){}
    , decltype(_impl_.current_rate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic()) {
    _impl_.topic_.Set(from._internal_topic(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expected_rate_, &from._impl_.expected_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_rate_) -
    reinterpret_cast<char*>(&_impl_.expected_rate_)) + sizeof(_impl_.current_rate_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.FrameRate)
}

inline void FrameRate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bad_record_name_){arena}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.expected_rate_){0}
    , decltype(_impl_.current_rate_){0}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FrameRate::~FrameRate() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.FrameRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bad_record_name_.~RepeatedPtrField();
  _impl_.topic_.Destroy();
}

void FrameRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.FrameRate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bad_record_name_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.expected_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.current_rate_) -
        reinterpret_cast<char*>(&_impl_.expected_rate_)) + sizeof(_impl_.current_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.hdmap.FrameRate.topic");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double expected_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_expected_rate(&has_bits);
          _impl_.expected_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double current_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_current_rate(&has_bits);
          _impl_.current_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string bad_record_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bad_record_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "apollo.hdmap.FrameRate.bad_record_name");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FrameRate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.FrameRate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.FrameRate.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // optional double expected_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_expected_rate(), target);
  }

  // optional double current_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_rate(), target);
  }

  // repeated string bad_record_name = 4;
  for (int i = 0, n = this->_internal_bad_record_name_size(); i < n; i++) {
    const auto& s = this->_internal_bad_record_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.FrameRate.bad_record_name");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.FrameRate)
  return target;
}

size_t FrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.FrameRate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bad_record_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bad_record_name_.size());
  for (int i = 0, n = _impl_.bad_record_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.bad_record_name_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional double expected_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double current_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrameRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameRate::GetClassData() const { return &_class_data_; }

void FrameRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FrameRate *>(to)->MergeFrom(
      static_cast<const FrameRate &>(from));
}


void FrameRate::MergeFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.bad_record_name_.MergeFrom(from._impl_.bad_record_name_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_topic(from._internal_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.expected_rate_ = from._impl_.expected_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.current_rate_ = from._impl_.current_rate_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameRate::CopyFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRate::IsInitialized() const {
  return true;
}

void FrameRate::InternalSwap(FrameRate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bad_record_name_.InternalSwap(&other->_impl_.bad_record_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameRate, _impl_.current_rate_)
      + sizeof(FrameRate::_impl_.current_rate_)
      - PROTOBUF_FIELD_OFFSET(FrameRate, _impl_.expected_rate_)>(
          reinterpret_cast<char*>(&_impl_.expected_rate_),
          reinterpret_cast<char*>(&other->_impl_.expected_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[3]);
}

// ===================================================================

class VerifyResult::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyResult>()._impl_._has_bits_);
  static const ::apollo::hdmap::TopicResult& topics(const VerifyResult* msg);
  static void set_has_topics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::TopicResult&
VerifyResult::_Internal::topics(const VerifyResult* msg) {
  return *msg->_impl_.topics_;
}
VerifyResult::VerifyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.VerifyResult)
}
VerifyResult::VerifyResult(const VerifyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rates_){from._impl_.rates_}
    , decltype(_impl_.topics_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topics()) {
    _impl_.topics_ = new ::apollo::hdmap::TopicResult(*from._impl_.topics_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.VerifyResult)
}

inline void VerifyResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rates_){arena}
    , decltype(_impl_.topics_){nullptr}
  };
}

VerifyResult::~VerifyResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.VerifyResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rates_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.topics_;
}

void VerifyResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.VerifyResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.topics_ != nullptr);
    _impl_.topics_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.TopicResult topics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.FrameRate rates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerifyResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.VerifyResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.TopicResult topics = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topics(this),
        _Internal::topics(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.hdmap.FrameRate rates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rates_size()); i < n; i++) {
    const auto& repfield = this->_internal_rates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.VerifyResult)
  return target;
}

size_t VerifyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.VerifyResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.FrameRate rates = 2;
  total_size += 1UL * this->_internal_rates_size();
  for (const auto& msg : this->_impl_.rates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.TopicResult topics = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VerifyResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyResult::GetClassData() const { return &_class_data_; }

void VerifyResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VerifyResult *>(to)->MergeFrom(
      static_cast<const VerifyResult &>(from));
}


void VerifyResult::MergeFrom(const VerifyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.VerifyResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.rates_.MergeFrom(from._impl_.rates_);
  if (from._internal_has_topics()) {
    _internal_mutable_topics()->::apollo::hdmap::TopicResult::MergeFrom(from._internal_topics());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyResult::CopyFrom(const VerifyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.VerifyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyResult::IsInitialized() const {
  return true;
}

void VerifyResult::InternalSwap(VerifyResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rates_.InternalSwap(&other->_impl_.rates_);
  swap(_impl_.topics_, other->_impl_.topics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[4]);
}

// ===================================================================

class ChannelVerifyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelVerifyRequest>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelVerifyRequest::ChannelVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.ChannelVerifyRequest)
}
ChannelVerifyRequest::ChannelVerifyRequest(const ChannelVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collect_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.collect_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collect_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_collect_id()) {
    _impl_.collect_id_.Set(from._internal_collect_id(), 
      GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_path()) {
    _impl_.path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  _impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ChannelVerifyRequest)
}

inline void ChannelVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.collect_id_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.cmd_){1}
  };
  _impl_.collect_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.collect_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelVerifyRequest::~ChannelVerifyRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ChannelVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.collect_id_.Destroy();
  _impl_.path_.Destroy();
}

void ChannelVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ChannelVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.collect_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_.ClearNonDefaultToEmpty();
    }
    _impl_.cmd_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string collect_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collect_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.hdmap.ChannelVerifyRequest.collect_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "apollo.hdmap.ChannelVerifyRequest.path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ChannelVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // optional string collect_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collect_id().data(), static_cast<int>(this->_internal_collect_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.ChannelVerifyRequest.collect_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collect_id(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.ChannelVerifyRequest.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ChannelVerifyRequest)
  return target;
}

size_t ChannelVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ChannelVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string collect_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_collect_id());
    }

    // optional string path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional .apollo.hdmap.CmdType cmd = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelVerifyRequest::GetClassData() const { return &_class_data_; }

void ChannelVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelVerifyRequest *>(to)->MergeFrom(
      static_cast<const ChannelVerifyRequest &>(from));
}


void ChannelVerifyRequest::MergeFrom(const ChannelVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ChannelVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_collect_id(from._internal_collect_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_path(from._internal_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.cmd_ = from._impl_.cmd_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelVerifyRequest::CopyFrom(const ChannelVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ChannelVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelVerifyRequest::IsInitialized() const {
  return true;
}

void ChannelVerifyRequest::InternalSwap(ChannelVerifyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.collect_id_, lhs_arena,
      &other->_impl_.collect_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[5]);
}

// ===================================================================

class ChannelVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelVerifyResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::VerifyResult& result(const ChannelVerifyResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::VerifyResult&
ChannelVerifyResponse::_Internal::result(const ChannelVerifyResponse* msg) {
  return *msg->_impl_.result_;
}
ChannelVerifyResponse::ChannelVerifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.ChannelVerifyResponse)
}
ChannelVerifyResponse::ChannelVerifyResponse(const ChannelVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _impl_.result_ = new ::apollo::hdmap::VerifyResult(*from._impl_.result_);
  }
  _impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ChannelVerifyResponse)
}

inline void ChannelVerifyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.code_){0}
  };
}

ChannelVerifyResponse::~ChannelVerifyResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ChannelVerifyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelVerifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void ChannelVerifyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ChannelVerifyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelVerifyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.VerifyResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelVerifyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ChannelVerifyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional .apollo.hdmap.VerifyResult result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ChannelVerifyResponse)
  return target;
}

size_t ChannelVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ChannelVerifyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.VerifyResult result = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelVerifyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelVerifyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelVerifyResponse::GetClassData() const { return &_class_data_; }

void ChannelVerifyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelVerifyResponse *>(to)->MergeFrom(
      static_cast<const ChannelVerifyResponse &>(from));
}


void ChannelVerifyResponse::MergeFrom(const ChannelVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ChannelVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_result()->::apollo::hdmap::VerifyResult::MergeFrom(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.code_ = from._impl_.code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelVerifyResponse::CopyFrom(const ChannelVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ChannelVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelVerifyResponse::IsInitialized() const {
  return true;
}

void ChannelVerifyResponse::InternalSwap(ChannelVerifyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelVerifyResponse, _impl_.code_)
      + sizeof(ChannelVerifyResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(ChannelVerifyResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelVerifyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[6]);
}

// ===================================================================

class LoopsVerifyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopsVerifyRequest>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoopsVerifyRequest::LoopsVerifyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LoopsVerifyRequest)
}
LoopsVerifyRequest::LoopsVerifyRequest(const LoopsVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){from._impl_.range_}
    , decltype(_impl_.cmd_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cmd_, &from._impl_.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.cmd_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopsVerifyRequest)
}

inline void LoopsVerifyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){arena}
    , decltype(_impl_.cmd_){1}
    , decltype(_impl_.type_){1}
  };
}

LoopsVerifyRequest::~LoopsVerifyRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopsVerifyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopsVerifyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.range_.~RepeatedPtrField();
}

void LoopsVerifyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoopsVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopsVerifyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.cmd_ = 1;
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopsVerifyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::DataType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.VerifyRange range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopsVerifyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopsVerifyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // optional .apollo.hdmap.DataType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .apollo.hdmap.VerifyRange range = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_range(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopsVerifyRequest)
  return target;
}

size_t LoopsVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopsVerifyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.VerifyRange range = 3;
  total_size += 1UL * this->_internal_range_size();
  for (const auto& msg : this->_impl_.range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.CmdType cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
    }

    // optional .apollo.hdmap.DataType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopsVerifyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoopsVerifyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopsVerifyRequest::GetClassData() const { return &_class_data_; }

void LoopsVerifyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoopsVerifyRequest *>(to)->MergeFrom(
      static_cast<const LoopsVerifyRequest &>(from));
}


void LoopsVerifyRequest::MergeFrom(const LoopsVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopsVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.range_.MergeFrom(from._impl_.range_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.cmd_ = from._impl_.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.type_ = from._impl_.type_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopsVerifyRequest::CopyFrom(const LoopsVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopsVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopsVerifyRequest::IsInitialized() const {
  return true;
}

void LoopsVerifyRequest::InternalSwap(LoopsVerifyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.range_.InternalSwap(&other->_impl_.range_);
  swap(_impl_.cmd_, other->_impl_.cmd_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopsVerifyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[7]);
}

// ===================================================================

class LoopsVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopsVerifyResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::LoopResult& loop_result(const LoopsVerifyResponse* msg);
  static void set_has_loop_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::LoopResult&
LoopsVerifyResponse::_Internal::loop_result(const LoopsVerifyResponse* msg) {
  return *msg->_impl_.loop_result_;
}
LoopsVerifyResponse::LoopsVerifyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.LoopsVerifyResponse)
}
LoopsVerifyResponse::LoopsVerifyResponse(const LoopsVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loop_result_){nullptr}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_loop_result()) {
    _impl_.loop_result_ = new ::apollo::hdmap::LoopResult(*from._impl_.loop_result_);
  }
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopsVerifyResponse)
}

inline void LoopsVerifyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.loop_result_){nullptr}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.code_){0}
  };
}

LoopsVerifyResponse::~LoopsVerifyResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopsVerifyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoopsVerifyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.loop_result_;
}

void LoopsVerifyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoopsVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopsVerifyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.loop_result_ != nullptr);
    _impl_.loop_result_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoopsVerifyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.LoopResult loop_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_loop_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoopsVerifyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopsVerifyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  // optional .apollo.hdmap.LoopResult loop_result = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::loop_result(this),
        _Internal::loop_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopsVerifyResponse)
  return target;
}

size_t LoopsVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopsVerifyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.LoopResult loop_result = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loop_result_);
    }

    // optional double progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoopsVerifyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoopsVerifyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoopsVerifyResponse::GetClassData() const { return &_class_data_; }

void LoopsVerifyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoopsVerifyResponse *>(to)->MergeFrom(
      static_cast<const LoopsVerifyResponse &>(from));
}


void LoopsVerifyResponse::MergeFrom(const LoopsVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopsVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_loop_result()->::apollo::hdmap::LoopResult::MergeFrom(from._internal_loop_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.code_ = from._impl_.code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoopsVerifyResponse::CopyFrom(const LoopsVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopsVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopsVerifyResponse::IsInitialized() const {
  if (_internal_has_loop_result()) {
    if (!_impl_.loop_result_->IsInitialized()) return false;
  }
  return true;
}

void LoopsVerifyResponse::InternalSwap(LoopsVerifyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoopsVerifyResponse, _impl_.code_)
      + sizeof(LoopsVerifyResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(LoopsVerifyResponse, _impl_.loop_result_)>(
          reinterpret_cast<char*>(&_impl_.loop_result_),
          reinterpret_cast<char*>(&other->_impl_.loop_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopsVerifyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[8]);
}

// ===================================================================

class DynamicAlignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicAlignRequest>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DynamicAlignRequest::DynamicAlignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.DynamicAlignRequest)
}
DynamicAlignRequest::DynamicAlignRequest(const DynamicAlignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.DynamicAlignRequest)
}

inline void DynamicAlignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){1}
  };
}

DynamicAlignRequest::~DynamicAlignRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.DynamicAlignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicAlignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicAlignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicAlignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.DynamicAlignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicAlignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicAlignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.DynamicAlignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.DynamicAlignRequest)
  return target;
}

size_t DynamicAlignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.DynamicAlignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicAlignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DynamicAlignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicAlignRequest::GetClassData() const { return &_class_data_; }

void DynamicAlignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DynamicAlignRequest *>(to)->MergeFrom(
      static_cast<const DynamicAlignRequest &>(from));
}


void DynamicAlignRequest::MergeFrom(const DynamicAlignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.DynamicAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicAlignRequest::CopyFrom(const DynamicAlignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.DynamicAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicAlignRequest::IsInitialized() const {
  return true;
}

void DynamicAlignRequest::InternalSwap(DynamicAlignRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicAlignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[9]);
}

// ===================================================================

class DynamicAlignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicAlignResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DynamicAlignResponse::DynamicAlignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.DynamicAlignResponse)
}
DynamicAlignResponse::DynamicAlignResponse(const DynamicAlignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.DynamicAlignResponse)
}

inline void DynamicAlignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.code_){0}
  };
}

DynamicAlignResponse::~DynamicAlignResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.DynamicAlignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DynamicAlignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicAlignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DynamicAlignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.DynamicAlignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicAlignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicAlignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.DynamicAlignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.DynamicAlignResponse)
  return target;
}

size_t DynamicAlignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.DynamicAlignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicAlignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DynamicAlignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicAlignResponse::GetClassData() const { return &_class_data_; }

void DynamicAlignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DynamicAlignResponse *>(to)->MergeFrom(
      static_cast<const DynamicAlignResponse &>(from));
}


void DynamicAlignResponse::MergeFrom(const DynamicAlignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.DynamicAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.code_ = from._impl_.code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicAlignResponse::CopyFrom(const DynamicAlignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.DynamicAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicAlignResponse::IsInitialized() const {
  return true;
}

void DynamicAlignResponse::InternalSwap(DynamicAlignResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicAlignResponse, _impl_.code_)
      + sizeof(DynamicAlignResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(DynamicAlignResponse, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicAlignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[10]);
}

// ===================================================================

class StaticAlignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticAlignRequest>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StaticAlignRequest::StaticAlignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.StaticAlignRequest)
}
StaticAlignRequest::StaticAlignRequest(const StaticAlignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StaticAlignRequest)
}

inline void StaticAlignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){1}
  };
}

StaticAlignRequest::~StaticAlignRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StaticAlignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StaticAlignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StaticAlignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StaticAlignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StaticAlignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticAlignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticAlignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StaticAlignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StaticAlignRequest)
  return target;
}

size_t StaticAlignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StaticAlignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticAlignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticAlignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticAlignRequest::GetClassData() const { return &_class_data_; }

void StaticAlignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticAlignRequest *>(to)->MergeFrom(
      static_cast<const StaticAlignRequest &>(from));
}


void StaticAlignRequest::MergeFrom(const StaticAlignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StaticAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticAlignRequest::CopyFrom(const StaticAlignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StaticAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAlignRequest::IsInitialized() const {
  return true;
}

void StaticAlignRequest::InternalSwap(StaticAlignRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticAlignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[11]);
}

// ===================================================================

class StaticAlignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticAlignResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StaticAlignResponse::StaticAlignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.StaticAlignResponse)
}
StaticAlignResponse::StaticAlignResponse(const StaticAlignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StaticAlignResponse)
}

inline void StaticAlignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.code_){0}
  };
}

StaticAlignResponse::~StaticAlignResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StaticAlignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StaticAlignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StaticAlignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StaticAlignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StaticAlignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticAlignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StaticAlignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StaticAlignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StaticAlignResponse)
  return target;
}

size_t StaticAlignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StaticAlignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticAlignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticAlignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticAlignResponse::GetClassData() const { return &_class_data_; }

void StaticAlignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StaticAlignResponse *>(to)->MergeFrom(
      static_cast<const StaticAlignResponse &>(from));
}


void StaticAlignResponse::MergeFrom(const StaticAlignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StaticAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.code_ = from._impl_.code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticAlignResponse::CopyFrom(const StaticAlignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StaticAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAlignResponse::IsInitialized() const {
  return true;
}

void StaticAlignResponse::InternalSwap(StaticAlignResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticAlignResponse, _impl_.code_)
      + sizeof(StaticAlignResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(StaticAlignResponse, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticAlignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[12]);
}

// ===================================================================

class EightRouteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EightRouteRequest>()._impl_._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EightRouteRequest::EightRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.EightRouteRequest)
}
EightRouteRequest::EightRouteRequest(const EightRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cmd_ = from._impl_.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.EightRouteRequest)
}

inline void EightRouteRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cmd_){1}
  };
}

EightRouteRequest::~EightRouteRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.EightRouteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EightRouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EightRouteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EightRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.EightRouteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmd_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EightRouteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EightRouteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.EightRouteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.EightRouteRequest)
  return target;
}

size_t EightRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.EightRouteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EightRouteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EightRouteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EightRouteRequest::GetClassData() const { return &_class_data_; }

void EightRouteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EightRouteRequest *>(to)->MergeFrom(
      static_cast<const EightRouteRequest &>(from));
}


void EightRouteRequest::MergeFrom(const EightRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.EightRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EightRouteRequest::CopyFrom(const EightRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.EightRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EightRouteRequest::IsInitialized() const {
  return true;
}

void EightRouteRequest::InternalSwap(EightRouteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cmd_, other->_impl_.cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EightRouteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[13]);
}

// ===================================================================

class EightRouteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EightRouteResponse>()._impl_._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EightRouteResponse::EightRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.hdmap.EightRouteResponse)
}
EightRouteResponse::EightRouteResponse(const EightRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.EightRouteResponse)
}

inline void EightRouteResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.progress_){0}
    , decltype(_impl_.code_){0}
  };
}

EightRouteResponse::~EightRouteResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.EightRouteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EightRouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EightRouteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EightRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.EightRouteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.code_) -
        reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EightRouteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EightRouteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.EightRouteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.EightRouteResponse)
  return target;
}

size_t EightRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.EightRouteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EightRouteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EightRouteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EightRouteResponse::GetClassData() const { return &_class_data_; }

void EightRouteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EightRouteResponse *>(to)->MergeFrom(
      static_cast<const EightRouteResponse &>(from));
}


void EightRouteResponse::MergeFrom(const EightRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.EightRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.code_ = from._impl_.code_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EightRouteResponse::CopyFrom(const EightRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.EightRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EightRouteResponse::IsInitialized() const {
  return true;
}

void EightRouteResponse::InternalSwap(EightRouteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EightRouteResponse, _impl_.code_)
      + sizeof(EightRouteResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(EightRouteResponse, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EightRouteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_getter, &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once,
      file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::VerifyRange*
Arena::CreateMaybeMessage< ::apollo::hdmap::VerifyRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::VerifyRange >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopResult*
Arena::CreateMaybeMessage< ::apollo::hdmap::LoopResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LoopResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::TopicResult*
Arena::CreateMaybeMessage< ::apollo::hdmap::TopicResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::TopicResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::FrameRate*
Arena::CreateMaybeMessage< ::apollo::hdmap::FrameRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::FrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::VerifyResult*
Arena::CreateMaybeMessage< ::apollo::hdmap::VerifyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::VerifyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ChannelVerifyRequest*
Arena::CreateMaybeMessage< ::apollo::hdmap::ChannelVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::ChannelVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ChannelVerifyResponse*
Arena::CreateMaybeMessage< ::apollo::hdmap::ChannelVerifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::ChannelVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopsVerifyRequest*
Arena::CreateMaybeMessage< ::apollo::hdmap::LoopsVerifyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LoopsVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopsVerifyResponse*
Arena::CreateMaybeMessage< ::apollo::hdmap::LoopsVerifyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::LoopsVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::DynamicAlignRequest*
Arena::CreateMaybeMessage< ::apollo::hdmap::DynamicAlignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::DynamicAlignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::DynamicAlignResponse*
Arena::CreateMaybeMessage< ::apollo::hdmap::DynamicAlignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::DynamicAlignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::StaticAlignRequest*
Arena::CreateMaybeMessage< ::apollo::hdmap::StaticAlignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::StaticAlignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::StaticAlignResponse*
Arena::CreateMaybeMessage< ::apollo::hdmap::StaticAlignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::StaticAlignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::EightRouteRequest*
Arena::CreateMaybeMessage< ::apollo::hdmap::EightRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::EightRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::EightRouteResponse*
Arena::CreateMaybeMessage< ::apollo::hdmap::EightRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::hdmap::EightRouteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
