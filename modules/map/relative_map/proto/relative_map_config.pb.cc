// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto

#include "modules/map/relative_map/proto/relative_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace relative_map {
PROTOBUF_CONSTEXPR MapGenerationParam::MapGenerationParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default_left_width_)*/1.75
  , /*decltype(_impl_.default_right_width_)*/1.75
  , /*decltype(_impl_.default_speed_limit_)*/29.0576} {}
struct MapGenerationParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapGenerationParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapGenerationParamDefaultTypeInternal() {}
  union {
    MapGenerationParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapGenerationParamDefaultTypeInternal _MapGenerationParam_default_instance_;
PROTOBUF_CONSTEXPR NavigationLaneConfig::NavigationLaneConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_source_)*/1
  , /*decltype(_impl_.min_lane_marker_quality_)*/0.5} {}
struct NavigationLaneConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationLaneConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationLaneConfigDefaultTypeInternal() {}
  union {
    NavigationLaneConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationLaneConfigDefaultTypeInternal _NavigationLaneConfig_default_instance_;
PROTOBUF_CONSTEXPR RelativeMapConfig::RelativeMapConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_param_)*/nullptr
  , /*decltype(_impl_.navigation_lane_)*/nullptr} {}
struct RelativeMapConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelativeMapConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelativeMapConfigDefaultTypeInternal() {}
  union {
    RelativeMapConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelativeMapConfigDefaultTypeInternal _RelativeMapConfig_default_instance_;
}  // namespace relative_map
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _impl_.default_left_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _impl_.default_right_width_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _impl_.default_speed_limit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _impl_.min_lane_marker_quality_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _impl_.lane_source_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _impl_.map_param_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _impl_.navigation_lane_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::apollo::relative_map::MapGenerationParam)},
  { 12, 20, -1, sizeof(::apollo::relative_map::NavigationLaneConfig)},
  { 22, 30, -1, sizeof(::apollo::relative_map::RelativeMapConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::relative_map::_MapGenerationParam_default_instance_._instance,
  &::apollo::relative_map::_NavigationLaneConfig_default_instance_._instance,
  &::apollo::relative_map::_RelativeMapConfig_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n8modules/map/relative_map/proto/relativ"
  "e_map_config.proto\022\023apollo.relative_map\""
  "\177\n\022MapGenerationParam\022 \n\022default_left_wi"
  "dth\030\001 \001(\001:\0041.75\022!\n\023default_right_width\030\002"
  " \001(\001:\0041.75\022$\n\023default_speed_limit\030\003 \001(\001:"
  "\00729.0576\"\274\001\n\024NavigationLaneConfig\022$\n\027min"
  "_lane_marker_quality\030\001 \001(\001:\0030.5\022I\n\013lane_"
  "source\030\002 \001(\01624.apollo.relative_map.Navig"
  "ationLaneConfig.LaneSource\"3\n\nLaneSource"
  "\022\016\n\nPERCEPTION\020\001\022\025\n\021OFFLINE_GENERATED\020\002\""
  "\223\001\n\021RelativeMapConfig\022:\n\tmap_param\030\001 \001(\013"
  "2\'.apollo.relative_map.MapGenerationPara"
  "m\022B\n\017navigation_lane\030\002 \001(\0132).apollo.rela"
  "tive_map.NavigationLaneConfig"
  ;
static ::_pbi::once_flag descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto = {
    false, false, 549, descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto,
    "modules/map/relative_map/proto/relative_map_config.proto",
    &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::offsets,
    file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto, file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto,
    file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto);
namespace apollo {
namespace relative_map {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[0];
}
bool NavigationLaneConfig_LaneSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::PERCEPTION;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::OFFLINE_GENERATED;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MIN;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MAX;
constexpr int NavigationLaneConfig::LaneSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class MapGenerationParam::_Internal {
 public:
  using HasBits = decltype(std::declval<MapGenerationParam>()._impl_._has_bits_);
  static void set_has_default_left_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_default_right_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_speed_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MapGenerationParam::MapGenerationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.MapGenerationParam)
}
MapGenerationParam::MapGenerationParam(const MapGenerationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_left_width_){}
    , decltype(_impl_.default_right_width_){}
    , decltype(_impl_.default_speed_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.default_left_width_, &from._impl_.default_left_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.default_speed_limit_) -
    reinterpret_cast<char*>(&_impl_.default_left_width_)) + sizeof(_impl_.default_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapGenerationParam)
}

inline void MapGenerationParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_left_width_){1.75}
    , decltype(_impl_.default_right_width_){1.75}
    , decltype(_impl_.default_speed_limit_){29.0576}
  };
}

MapGenerationParam::~MapGenerationParam() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapGenerationParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MapGenerationParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapGenerationParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapGenerationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapGenerationParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    _impl_.default_left_width_ = 1.75;
    _impl_.default_right_width_ = 1.75;
    _impl_.default_speed_limit_ = 29.0576;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapGenerationParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double default_left_width = 1 [default = 1.75];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_default_left_width(&has_bits);
          _impl_.default_left_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_right_width = 2 [default = 1.75];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_default_right_width(&has_bits);
          _impl_.default_right_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double default_speed_limit = 3 [default = 29.0576];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_default_speed_limit(&has_bits);
          _impl_.default_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapGenerationParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapGenerationParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_default_left_width(), target);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_default_right_width(), target);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_default_speed_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapGenerationParam)
  return target;
}

size_t MapGenerationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapGenerationParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double default_left_width = 1 [default = 1.75];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double default_right_width = 2 [default = 1.75];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double default_speed_limit = 3 [default = 29.0576];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapGenerationParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapGenerationParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapGenerationParam::GetClassData() const { return &_class_data_; }

void MapGenerationParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapGenerationParam *>(to)->MergeFrom(
      static_cast<const MapGenerationParam &>(from));
}


void MapGenerationParam::MergeFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.default_left_width_ = from._impl_.default_left_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.default_right_width_ = from._impl_.default_right_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.default_speed_limit_ = from._impl_.default_speed_limit_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapGenerationParam::CopyFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGenerationParam::IsInitialized() const {
  return true;
}

void MapGenerationParam::InternalSwap(MapGenerationParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.default_left_width_, other->_impl_.default_left_width_);
  swap(_impl_.default_right_width_, other->_impl_.default_right_width_);
  swap(_impl_.default_speed_limit_, other->_impl_.default_speed_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapGenerationParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[0]);
}

// ===================================================================

class NavigationLaneConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationLaneConfig>()._impl_._has_bits_);
  static void set_has_min_lane_marker_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NavigationLaneConfig::NavigationLaneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.NavigationLaneConfig)
}
NavigationLaneConfig::NavigationLaneConfig(const NavigationLaneConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_source_){}
    , decltype(_impl_.min_lane_marker_quality_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lane_source_, &from._impl_.lane_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_lane_marker_quality_) -
    reinterpret_cast<char*>(&_impl_.lane_source_)) + sizeof(_impl_.min_lane_marker_quality_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationLaneConfig)
}

inline void NavigationLaneConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_source_){1}
    , decltype(_impl_.min_lane_marker_quality_){0.5}
  };
}

NavigationLaneConfig::~NavigationLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationLaneConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationLaneConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NavigationLaneConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NavigationLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationLaneConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.lane_source_ = 1;
    _impl_.min_lane_marker_quality_ = 0.5;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationLaneConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double min_lane_marker_quality = 1 [default = 0.5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_min_lane_marker_quality(&has_bits);
          _impl_.min_lane_marker_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(val))) {
            _internal_set_lane_source(static_cast<::apollo::relative_map::NavigationLaneConfig_LaneSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationLaneConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationLaneConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_min_lane_marker_quality(), target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_lane_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationLaneConfig)
  return target;
}

size_t NavigationLaneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationLaneConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_lane_source());
    }

    // optional double min_lane_marker_quality = 1 [default = 0.5];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationLaneConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationLaneConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationLaneConfig::GetClassData() const { return &_class_data_; }

void NavigationLaneConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NavigationLaneConfig *>(to)->MergeFrom(
      static_cast<const NavigationLaneConfig &>(from));
}


void NavigationLaneConfig::MergeFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lane_source_ = from._impl_.lane_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.min_lane_marker_quality_ = from._impl_.min_lane_marker_quality_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationLaneConfig::CopyFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationLaneConfig::IsInitialized() const {
  return true;
}

void NavigationLaneConfig::InternalSwap(NavigationLaneConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.lane_source_, other->_impl_.lane_source_);
  swap(_impl_.min_lane_marker_quality_, other->_impl_.min_lane_marker_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationLaneConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[1]);
}

// ===================================================================

class RelativeMapConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeMapConfig>()._impl_._has_bits_);
  static const ::apollo::relative_map::MapGenerationParam& map_param(const RelativeMapConfig* msg);
  static void set_has_map_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::relative_map::NavigationLaneConfig& navigation_lane(const RelativeMapConfig* msg);
  static void set_has_navigation_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::relative_map::MapGenerationParam&
RelativeMapConfig::_Internal::map_param(const RelativeMapConfig* msg) {
  return *msg->_impl_.map_param_;
}
const ::apollo::relative_map::NavigationLaneConfig&
RelativeMapConfig::_Internal::navigation_lane(const RelativeMapConfig* msg) {
  return *msg->_impl_.navigation_lane_;
}
RelativeMapConfig::RelativeMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.RelativeMapConfig)
}
RelativeMapConfig::RelativeMapConfig(const RelativeMapConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_param_){nullptr}
    , decltype(_impl_.navigation_lane_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_map_param()) {
    _impl_.map_param_ = new ::apollo::relative_map::MapGenerationParam(*from._impl_.map_param_);
  }
  if (from._internal_has_navigation_lane()) {
    _impl_.navigation_lane_ = new ::apollo::relative_map::NavigationLaneConfig(*from._impl_.navigation_lane_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.RelativeMapConfig)
}

inline void RelativeMapConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_param_){nullptr}
    , decltype(_impl_.navigation_lane_){nullptr}
  };
}

RelativeMapConfig::~RelativeMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.RelativeMapConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelativeMapConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.map_param_;
  if (this != internal_default_instance()) delete _impl_.navigation_lane_;
}

void RelativeMapConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelativeMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.RelativeMapConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.map_param_ != nullptr);
      _impl_.map_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.navigation_lane_ != nullptr);
      _impl_.navigation_lane_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeMapConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.relative_map.MapGenerationParam map_param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_navigation_lane(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelativeMapConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.RelativeMapConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::map_param(this),
        _Internal::map_param(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::navigation_lane(this),
        _Internal::navigation_lane(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.RelativeMapConfig)
  return target;
}

size_t RelativeMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.RelativeMapConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.relative_map.MapGenerationParam map_param = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.map_param_);
    }

    // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.navigation_lane_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelativeMapConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelativeMapConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelativeMapConfig::GetClassData() const { return &_class_data_; }

void RelativeMapConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelativeMapConfig *>(to)->MergeFrom(
      static_cast<const RelativeMapConfig &>(from));
}


void RelativeMapConfig::MergeFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_map_param()->::apollo::relative_map::MapGenerationParam::MergeFrom(from._internal_map_param());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_navigation_lane()->::apollo::relative_map::NavigationLaneConfig::MergeFrom(from._internal_navigation_lane());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelativeMapConfig::CopyFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeMapConfig::IsInitialized() const {
  return true;
}

void RelativeMapConfig::InternalSwap(RelativeMapConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeMapConfig, _impl_.navigation_lane_)
      + sizeof(RelativeMapConfig::_impl_.navigation_lane_)
      - PROTOBUF_FIELD_OFFSET(RelativeMapConfig, _impl_.map_param_)>(
          reinterpret_cast<char*>(&_impl_.map_param_),
          reinterpret_cast<char*>(&other->_impl_.map_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeMapConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapGenerationParam*
Arena::CreateMaybeMessage< ::apollo::relative_map::MapGenerationParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::MapGenerationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationLaneConfig*
Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationLaneConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::NavigationLaneConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::RelativeMapConfig*
Arena::CreateMaybeMessage< ::apollo::relative_map::RelativeMapConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::RelativeMapConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
