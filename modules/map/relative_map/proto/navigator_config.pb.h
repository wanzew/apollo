// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigator_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto;
namespace apollo {
namespace relative_map {
class NavigatorConfig;
struct NavigatorConfigDefaultTypeInternal;
extern NavigatorConfigDefaultTypeInternal _NavigatorConfig_default_instance_;
class SampleParam;
struct SampleParamDefaultTypeInternal;
extern SampleParamDefaultTypeInternal _SampleParam_default_instance_;
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::relative_map::NavigatorConfig* Arena::CreateMaybeMessage<::apollo::relative_map::NavigatorConfig>(Arena*);
template<> ::apollo::relative_map::SampleParam* Arena::CreateMaybeMessage<::apollo::relative_map::SampleParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace relative_map {

// ===================================================================

class SampleParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.SampleParam) */ {
 public:
  inline SampleParam() : SampleParam(nullptr) {}
  ~SampleParam() override;
  explicit PROTOBUF_CONSTEXPR SampleParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleParam(const SampleParam& from);
  SampleParam(SampleParam&& from) noexcept
    : SampleParam() {
    *this = ::std::move(from);
  }

  inline SampleParam& operator=(const SampleParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleParam& operator=(SampleParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SampleParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleParam* internal_default_instance() {
    return reinterpret_cast<const SampleParam*>(
               &_SampleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SampleParam& a, SampleParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SampleParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SampleParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SampleParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SampleParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.relative_map.SampleParam";
  }
  protected:
  explicit SampleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStraightSampleIntervalFieldNumber = 1,
    kSmallKappaSampleIntervalFieldNumber = 2,
    kMiddleKappaSampleIntervalFieldNumber = 3,
    kLargeKappaSampleIntervalFieldNumber = 4,
    kSmallKappaFieldNumber = 5,
    kMiddleKappaFieldNumber = 6,
    kLargeKappaFieldNumber = 7,
  };
  // optional double straight_sample_interval = 1 [default = 3];
  bool has_straight_sample_interval() const;
  private:
  bool _internal_has_straight_sample_interval() const;
  public:
  void clear_straight_sample_interval();
  double straight_sample_interval() const;
  void set_straight_sample_interval(double value);
  private:
  double _internal_straight_sample_interval() const;
  void _internal_set_straight_sample_interval(double value);
  public:

  // optional double small_kappa_sample_interval = 2 [default = 1];
  bool has_small_kappa_sample_interval() const;
  private:
  bool _internal_has_small_kappa_sample_interval() const;
  public:
  void clear_small_kappa_sample_interval();
  double small_kappa_sample_interval() const;
  void set_small_kappa_sample_interval(double value);
  private:
  double _internal_small_kappa_sample_interval() const;
  void _internal_set_small_kappa_sample_interval(double value);
  public:

  // optional double middle_kappa_sample_interval = 3 [default = 0.4];
  bool has_middle_kappa_sample_interval() const;
  private:
  bool _internal_has_middle_kappa_sample_interval() const;
  public:
  void clear_middle_kappa_sample_interval();
  double middle_kappa_sample_interval() const;
  void set_middle_kappa_sample_interval(double value);
  private:
  double _internal_middle_kappa_sample_interval() const;
  void _internal_set_middle_kappa_sample_interval(double value);
  public:

  // optional double large_kappa_sample_interval = 4 [default = 0.1];
  bool has_large_kappa_sample_interval() const;
  private:
  bool _internal_has_large_kappa_sample_interval() const;
  public:
  void clear_large_kappa_sample_interval();
  double large_kappa_sample_interval() const;
  void set_large_kappa_sample_interval(double value);
  private:
  double _internal_large_kappa_sample_interval() const;
  void _internal_set_large_kappa_sample_interval(double value);
  public:

  // optional double small_kappa = 5 [default = 0.002];
  bool has_small_kappa() const;
  private:
  bool _internal_has_small_kappa() const;
  public:
  void clear_small_kappa();
  double small_kappa() const;
  void set_small_kappa(double value);
  private:
  double _internal_small_kappa() const;
  void _internal_set_small_kappa(double value);
  public:

  // optional double middle_kappa = 6 [default = 0.008];
  bool has_middle_kappa() const;
  private:
  bool _internal_has_middle_kappa() const;
  public:
  void clear_middle_kappa();
  double middle_kappa() const;
  void set_middle_kappa(double value);
  private:
  double _internal_middle_kappa() const;
  void _internal_set_middle_kappa(double value);
  public:

  // optional double large_kappa = 7 [default = 0.02];
  bool has_large_kappa() const;
  private:
  bool _internal_has_large_kappa() const;
  public:
  void clear_large_kappa();
  double large_kappa() const;
  void set_large_kappa(double value);
  private:
  double _internal_large_kappa() const;
  void _internal_set_large_kappa(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.relative_map.SampleParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double straight_sample_interval_;
    double small_kappa_sample_interval_;
    double middle_kappa_sample_interval_;
    double large_kappa_sample_interval_;
    double small_kappa_;
    double middle_kappa_;
    double large_kappa_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NavigatorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigatorConfig) */ {
 public:
  inline NavigatorConfig() : NavigatorConfig(nullptr) {}
  ~NavigatorConfig() override;
  explicit PROTOBUF_CONSTEXPR NavigatorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NavigatorConfig(const NavigatorConfig& from);
  NavigatorConfig(NavigatorConfig&& from) noexcept
    : NavigatorConfig() {
    *this = ::std::move(from);
  }

  inline NavigatorConfig& operator=(const NavigatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigatorConfig& operator=(NavigatorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NavigatorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NavigatorConfig* internal_default_instance() {
    return reinterpret_cast<const NavigatorConfig*>(
               &_NavigatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NavigatorConfig& a, NavigatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigatorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigatorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NavigatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NavigatorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NavigatorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NavigatorConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigatorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.relative_map.NavigatorConfig";
  }
  protected:
  explicit NavigatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleParamFieldNumber = 2,
    kEnableNavigatorDownsampleFieldNumber = 1,
  };
  // optional .apollo.relative_map.SampleParam sample_param = 2;
  bool has_sample_param() const;
  private:
  bool _internal_has_sample_param() const;
  public:
  void clear_sample_param();
  const ::apollo::relative_map::SampleParam& sample_param() const;
  PROTOBUF_NODISCARD ::apollo::relative_map::SampleParam* release_sample_param();
  ::apollo::relative_map::SampleParam* mutable_sample_param();
  void set_allocated_sample_param(::apollo::relative_map::SampleParam* sample_param);
  private:
  const ::apollo::relative_map::SampleParam& _internal_sample_param() const;
  ::apollo::relative_map::SampleParam* _internal_mutable_sample_param();
  public:
  void unsafe_arena_set_allocated_sample_param(
      ::apollo::relative_map::SampleParam* sample_param);
  ::apollo::relative_map::SampleParam* unsafe_arena_release_sample_param();

  // optional bool enable_navigator_downsample = 1 [default = true];
  bool has_enable_navigator_downsample() const;
  private:
  bool _internal_has_enable_navigator_downsample() const;
  public:
  void clear_enable_navigator_downsample();
  bool enable_navigator_downsample() const;
  void set_enable_navigator_downsample(bool value);
  private:
  bool _internal_enable_navigator_downsample() const;
  void _internal_set_enable_navigator_downsample(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigatorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::relative_map::SampleParam* sample_param_;
    bool enable_navigator_downsample_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SampleParam

// optional double straight_sample_interval = 1 [default = 3];
inline bool SampleParam::_internal_has_straight_sample_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SampleParam::has_straight_sample_interval() const {
  return _internal_has_straight_sample_interval();
}
inline void SampleParam::clear_straight_sample_interval() {
  _impl_.straight_sample_interval_ = 3;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SampleParam::_internal_straight_sample_interval() const {
  return _impl_.straight_sample_interval_;
}
inline double SampleParam::straight_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.straight_sample_interval)
  return _internal_straight_sample_interval();
}
inline void SampleParam::_internal_set_straight_sample_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.straight_sample_interval_ = value;
}
inline void SampleParam::set_straight_sample_interval(double value) {
  _internal_set_straight_sample_interval(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.straight_sample_interval)
}

// optional double small_kappa_sample_interval = 2 [default = 1];
inline bool SampleParam::_internal_has_small_kappa_sample_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SampleParam::has_small_kappa_sample_interval() const {
  return _internal_has_small_kappa_sample_interval();
}
inline void SampleParam::clear_small_kappa_sample_interval() {
  _impl_.small_kappa_sample_interval_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SampleParam::_internal_small_kappa_sample_interval() const {
  return _impl_.small_kappa_sample_interval_;
}
inline double SampleParam::small_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.small_kappa_sample_interval)
  return _internal_small_kappa_sample_interval();
}
inline void SampleParam::_internal_set_small_kappa_sample_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.small_kappa_sample_interval_ = value;
}
inline void SampleParam::set_small_kappa_sample_interval(double value) {
  _internal_set_small_kappa_sample_interval(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.small_kappa_sample_interval)
}

// optional double middle_kappa_sample_interval = 3 [default = 0.4];
inline bool SampleParam::_internal_has_middle_kappa_sample_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SampleParam::has_middle_kappa_sample_interval() const {
  return _internal_has_middle_kappa_sample_interval();
}
inline void SampleParam::clear_middle_kappa_sample_interval() {
  _impl_.middle_kappa_sample_interval_ = 0.4;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SampleParam::_internal_middle_kappa_sample_interval() const {
  return _impl_.middle_kappa_sample_interval_;
}
inline double SampleParam::middle_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.middle_kappa_sample_interval)
  return _internal_middle_kappa_sample_interval();
}
inline void SampleParam::_internal_set_middle_kappa_sample_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.middle_kappa_sample_interval_ = value;
}
inline void SampleParam::set_middle_kappa_sample_interval(double value) {
  _internal_set_middle_kappa_sample_interval(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.middle_kappa_sample_interval)
}

// optional double large_kappa_sample_interval = 4 [default = 0.1];
inline bool SampleParam::_internal_has_large_kappa_sample_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SampleParam::has_large_kappa_sample_interval() const {
  return _internal_has_large_kappa_sample_interval();
}
inline void SampleParam::clear_large_kappa_sample_interval() {
  _impl_.large_kappa_sample_interval_ = 0.1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SampleParam::_internal_large_kappa_sample_interval() const {
  return _impl_.large_kappa_sample_interval_;
}
inline double SampleParam::large_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.large_kappa_sample_interval)
  return _internal_large_kappa_sample_interval();
}
inline void SampleParam::_internal_set_large_kappa_sample_interval(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.large_kappa_sample_interval_ = value;
}
inline void SampleParam::set_large_kappa_sample_interval(double value) {
  _internal_set_large_kappa_sample_interval(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.large_kappa_sample_interval)
}

// optional double small_kappa = 5 [default = 0.002];
inline bool SampleParam::_internal_has_small_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SampleParam::has_small_kappa() const {
  return _internal_has_small_kappa();
}
inline void SampleParam::clear_small_kappa() {
  _impl_.small_kappa_ = 0.002;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double SampleParam::_internal_small_kappa() const {
  return _impl_.small_kappa_;
}
inline double SampleParam::small_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.small_kappa)
  return _internal_small_kappa();
}
inline void SampleParam::_internal_set_small_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.small_kappa_ = value;
}
inline void SampleParam::set_small_kappa(double value) {
  _internal_set_small_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.small_kappa)
}

// optional double middle_kappa = 6 [default = 0.008];
inline bool SampleParam::_internal_has_middle_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SampleParam::has_middle_kappa() const {
  return _internal_has_middle_kappa();
}
inline void SampleParam::clear_middle_kappa() {
  _impl_.middle_kappa_ = 0.008;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double SampleParam::_internal_middle_kappa() const {
  return _impl_.middle_kappa_;
}
inline double SampleParam::middle_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.middle_kappa)
  return _internal_middle_kappa();
}
inline void SampleParam::_internal_set_middle_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.middle_kappa_ = value;
}
inline void SampleParam::set_middle_kappa(double value) {
  _internal_set_middle_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.middle_kappa)
}

// optional double large_kappa = 7 [default = 0.02];
inline bool SampleParam::_internal_has_large_kappa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SampleParam::has_large_kappa() const {
  return _internal_has_large_kappa();
}
inline void SampleParam::clear_large_kappa() {
  _impl_.large_kappa_ = 0.02;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double SampleParam::_internal_large_kappa() const {
  return _impl_.large_kappa_;
}
inline double SampleParam::large_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.large_kappa)
  return _internal_large_kappa();
}
inline void SampleParam::_internal_set_large_kappa(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.large_kappa_ = value;
}
inline void SampleParam::set_large_kappa(double value) {
  _internal_set_large_kappa(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.large_kappa)
}

// -------------------------------------------------------------------

// NavigatorConfig

// optional bool enable_navigator_downsample = 1 [default = true];
inline bool NavigatorConfig::_internal_has_enable_navigator_downsample() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NavigatorConfig::has_enable_navigator_downsample() const {
  return _internal_has_enable_navigator_downsample();
}
inline void NavigatorConfig::clear_enable_navigator_downsample() {
  _impl_.enable_navigator_downsample_ = true;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NavigatorConfig::_internal_enable_navigator_downsample() const {
  return _impl_.enable_navigator_downsample_;
}
inline bool NavigatorConfig::enable_navigator_downsample() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigatorConfig.enable_navigator_downsample)
  return _internal_enable_navigator_downsample();
}
inline void NavigatorConfig::_internal_set_enable_navigator_downsample(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enable_navigator_downsample_ = value;
}
inline void NavigatorConfig::set_enable_navigator_downsample(bool value) {
  _internal_set_enable_navigator_downsample(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigatorConfig.enable_navigator_downsample)
}

// optional .apollo.relative_map.SampleParam sample_param = 2;
inline bool NavigatorConfig::_internal_has_sample_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sample_param_ != nullptr);
  return value;
}
inline bool NavigatorConfig::has_sample_param() const {
  return _internal_has_sample_param();
}
inline void NavigatorConfig::clear_sample_param() {
  if (_impl_.sample_param_ != nullptr) _impl_.sample_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::relative_map::SampleParam& NavigatorConfig::_internal_sample_param() const {
  const ::apollo::relative_map::SampleParam* p = _impl_.sample_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::relative_map::SampleParam&>(
      ::apollo::relative_map::_SampleParam_default_instance_);
}
inline const ::apollo::relative_map::SampleParam& NavigatorConfig::sample_param() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigatorConfig.sample_param)
  return _internal_sample_param();
}
inline void NavigatorConfig::unsafe_arena_set_allocated_sample_param(
    ::apollo::relative_map::SampleParam* sample_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sample_param_);
  }
  _impl_.sample_param_ = sample_param;
  if (sample_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.relative_map.NavigatorConfig.sample_param)
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::release_sample_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::relative_map::SampleParam* temp = _impl_.sample_param_;
  _impl_.sample_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::unsafe_arena_release_sample_param() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigatorConfig.sample_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::relative_map::SampleParam* temp = _impl_.sample_param_;
  _impl_.sample_param_ = nullptr;
  return temp;
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::_internal_mutable_sample_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sample_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::relative_map::SampleParam>(GetArenaForAllocation());
    _impl_.sample_param_ = p;
  }
  return _impl_.sample_param_;
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::mutable_sample_param() {
  ::apollo::relative_map::SampleParam* _msg = _internal_mutable_sample_param();
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigatorConfig.sample_param)
  return _msg;
}
inline void NavigatorConfig::set_allocated_sample_param(::apollo::relative_map::SampleParam* sample_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sample_param_;
  }
  if (sample_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sample_param);
    if (message_arena != submessage_arena) {
      sample_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sample_param_ = sample_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigatorConfig.sample_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
