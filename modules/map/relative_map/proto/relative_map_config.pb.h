// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
namespace apollo {
namespace relative_map {
class MapGenerationParam;
struct MapGenerationParamDefaultTypeInternal;
extern MapGenerationParamDefaultTypeInternal _MapGenerationParam_default_instance_;
class NavigationLaneConfig;
struct NavigationLaneConfigDefaultTypeInternal;
extern NavigationLaneConfigDefaultTypeInternal _NavigationLaneConfig_default_instance_;
class RelativeMapConfig;
struct RelativeMapConfigDefaultTypeInternal;
extern RelativeMapConfigDefaultTypeInternal _RelativeMapConfig_default_instance_;
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::relative_map::MapGenerationParam* Arena::CreateMaybeMessage<::apollo::relative_map::MapGenerationParam>(Arena*);
template<> ::apollo::relative_map::NavigationLaneConfig* Arena::CreateMaybeMessage<::apollo::relative_map::NavigationLaneConfig>(Arena*);
template<> ::apollo::relative_map::RelativeMapConfig* Arena::CreateMaybeMessage<::apollo::relative_map::RelativeMapConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace relative_map {

enum NavigationLaneConfig_LaneSource : int {
  NavigationLaneConfig_LaneSource_PERCEPTION = 1,
  NavigationLaneConfig_LaneSource_OFFLINE_GENERATED = 2
};
bool NavigationLaneConfig_LaneSource_IsValid(int value);
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig_LaneSource_LaneSource_MIN = NavigationLaneConfig_LaneSource_PERCEPTION;
constexpr NavigationLaneConfig_LaneSource NavigationLaneConfig_LaneSource_LaneSource_MAX = NavigationLaneConfig_LaneSource_OFFLINE_GENERATED;
constexpr int NavigationLaneConfig_LaneSource_LaneSource_ARRAYSIZE = NavigationLaneConfig_LaneSource_LaneSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor();
template<typename T>
inline const std::string& NavigationLaneConfig_LaneSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationLaneConfig_LaneSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationLaneConfig_LaneSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationLaneConfig_LaneSource_descriptor(), enum_t_value);
}
inline bool NavigationLaneConfig_LaneSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NavigationLaneConfig_LaneSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationLaneConfig_LaneSource>(
    NavigationLaneConfig_LaneSource_descriptor(), name, value);
}
// ===================================================================

class MapGenerationParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.MapGenerationParam) */ {
 public:
  inline MapGenerationParam() : MapGenerationParam(nullptr) {}
  ~MapGenerationParam() override;
  explicit PROTOBUF_CONSTEXPR MapGenerationParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapGenerationParam(const MapGenerationParam& from);
  MapGenerationParam(MapGenerationParam&& from) noexcept
    : MapGenerationParam() {
    *this = ::std::move(from);
  }

  inline MapGenerationParam& operator=(const MapGenerationParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapGenerationParam& operator=(MapGenerationParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapGenerationParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapGenerationParam* internal_default_instance() {
    return reinterpret_cast<const MapGenerationParam*>(
               &_MapGenerationParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapGenerationParam& a, MapGenerationParam& b) {
    a.Swap(&b);
  }
  inline void Swap(MapGenerationParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapGenerationParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapGenerationParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapGenerationParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapGenerationParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapGenerationParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapGenerationParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.relative_map.MapGenerationParam";
  }
  protected:
  explicit MapGenerationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultLeftWidthFieldNumber = 1,
    kDefaultRightWidthFieldNumber = 2,
    kDefaultSpeedLimitFieldNumber = 3,
  };
  // optional double default_left_width = 1 [default = 1.75];
  bool has_default_left_width() const;
  private:
  bool _internal_has_default_left_width() const;
  public:
  void clear_default_left_width();
  double default_left_width() const;
  void set_default_left_width(double value);
  private:
  double _internal_default_left_width() const;
  void _internal_set_default_left_width(double value);
  public:

  // optional double default_right_width = 2 [default = 1.75];
  bool has_default_right_width() const;
  private:
  bool _internal_has_default_right_width() const;
  public:
  void clear_default_right_width();
  double default_right_width() const;
  void set_default_right_width(double value);
  private:
  double _internal_default_right_width() const;
  void _internal_set_default_right_width(double value);
  public:

  // optional double default_speed_limit = 3 [default = 29.0576];
  bool has_default_speed_limit() const;
  private:
  bool _internal_has_default_speed_limit() const;
  public:
  void clear_default_speed_limit();
  double default_speed_limit() const;
  void set_default_speed_limit(double value);
  private:
  double _internal_default_speed_limit() const;
  void _internal_set_default_speed_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.relative_map.MapGenerationParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double default_left_width_;
    double default_right_width_;
    double default_speed_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class NavigationLaneConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigationLaneConfig) */ {
 public:
  inline NavigationLaneConfig() : NavigationLaneConfig(nullptr) {}
  ~NavigationLaneConfig() override;
  explicit PROTOBUF_CONSTEXPR NavigationLaneConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NavigationLaneConfig(const NavigationLaneConfig& from);
  NavigationLaneConfig(NavigationLaneConfig&& from) noexcept
    : NavigationLaneConfig() {
    *this = ::std::move(from);
  }

  inline NavigationLaneConfig& operator=(const NavigationLaneConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationLaneConfig& operator=(NavigationLaneConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NavigationLaneConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const NavigationLaneConfig* internal_default_instance() {
    return reinterpret_cast<const NavigationLaneConfig*>(
               &_NavigationLaneConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NavigationLaneConfig& a, NavigationLaneConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationLaneConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationLaneConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NavigationLaneConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NavigationLaneConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NavigationLaneConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NavigationLaneConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationLaneConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.relative_map.NavigationLaneConfig";
  }
  protected:
  explicit NavigationLaneConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NavigationLaneConfig_LaneSource LaneSource;
  static constexpr LaneSource PERCEPTION =
    NavigationLaneConfig_LaneSource_PERCEPTION;
  static constexpr LaneSource OFFLINE_GENERATED =
    NavigationLaneConfig_LaneSource_OFFLINE_GENERATED;
  static inline bool LaneSource_IsValid(int value) {
    return NavigationLaneConfig_LaneSource_IsValid(value);
  }
  static constexpr LaneSource LaneSource_MIN =
    NavigationLaneConfig_LaneSource_LaneSource_MIN;
  static constexpr LaneSource LaneSource_MAX =
    NavigationLaneConfig_LaneSource_LaneSource_MAX;
  static constexpr int LaneSource_ARRAYSIZE =
    NavigationLaneConfig_LaneSource_LaneSource_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LaneSource_descriptor() {
    return NavigationLaneConfig_LaneSource_descriptor();
  }
  template<typename T>
  static inline const std::string& LaneSource_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LaneSource>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LaneSource_Name.");
    return NavigationLaneConfig_LaneSource_Name(enum_t_value);
  }
  static inline bool LaneSource_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LaneSource* value) {
    return NavigationLaneConfig_LaneSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSourceFieldNumber = 2,
    kMinLaneMarkerQualityFieldNumber = 1,
  };
  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  bool has_lane_source() const;
  private:
  bool _internal_has_lane_source() const;
  public:
  void clear_lane_source();
  ::apollo::relative_map::NavigationLaneConfig_LaneSource lane_source() const;
  void set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value);
  private:
  ::apollo::relative_map::NavigationLaneConfig_LaneSource _internal_lane_source() const;
  void _internal_set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value);
  public:

  // optional double min_lane_marker_quality = 1 [default = 0.5];
  bool has_min_lane_marker_quality() const;
  private:
  bool _internal_has_min_lane_marker_quality() const;
  public:
  void clear_min_lane_marker_quality();
  double min_lane_marker_quality() const;
  void set_min_lane_marker_quality(double value);
  private:
  double _internal_min_lane_marker_quality() const;
  void _internal_set_min_lane_marker_quality(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigationLaneConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int lane_source_;
    double min_lane_marker_quality_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RelativeMapConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.RelativeMapConfig) */ {
 public:
  inline RelativeMapConfig() : RelativeMapConfig(nullptr) {}
  ~RelativeMapConfig() override;
  explicit PROTOBUF_CONSTEXPR RelativeMapConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelativeMapConfig(const RelativeMapConfig& from);
  RelativeMapConfig(RelativeMapConfig&& from) noexcept
    : RelativeMapConfig() {
    *this = ::std::move(from);
  }

  inline RelativeMapConfig& operator=(const RelativeMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelativeMapConfig& operator=(RelativeMapConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelativeMapConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelativeMapConfig* internal_default_instance() {
    return reinterpret_cast<const RelativeMapConfig*>(
               &_RelativeMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelativeMapConfig& a, RelativeMapConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RelativeMapConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelativeMapConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelativeMapConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelativeMapConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelativeMapConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RelativeMapConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelativeMapConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.relative_map.RelativeMapConfig";
  }
  protected:
  explicit RelativeMapConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapParamFieldNumber = 1,
    kNavigationLaneFieldNumber = 2,
  };
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  bool has_map_param() const;
  private:
  bool _internal_has_map_param() const;
  public:
  void clear_map_param();
  const ::apollo::relative_map::MapGenerationParam& map_param() const;
  PROTOBUF_NODISCARD ::apollo::relative_map::MapGenerationParam* release_map_param();
  ::apollo::relative_map::MapGenerationParam* mutable_map_param();
  void set_allocated_map_param(::apollo::relative_map::MapGenerationParam* map_param);
  private:
  const ::apollo::relative_map::MapGenerationParam& _internal_map_param() const;
  ::apollo::relative_map::MapGenerationParam* _internal_mutable_map_param();
  public:
  void unsafe_arena_set_allocated_map_param(
      ::apollo::relative_map::MapGenerationParam* map_param);
  ::apollo::relative_map::MapGenerationParam* unsafe_arena_release_map_param();

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  bool has_navigation_lane() const;
  private:
  bool _internal_has_navigation_lane() const;
  public:
  void clear_navigation_lane();
  const ::apollo::relative_map::NavigationLaneConfig& navigation_lane() const;
  PROTOBUF_NODISCARD ::apollo::relative_map::NavigationLaneConfig* release_navigation_lane();
  ::apollo::relative_map::NavigationLaneConfig* mutable_navigation_lane();
  void set_allocated_navigation_lane(::apollo::relative_map::NavigationLaneConfig* navigation_lane);
  private:
  const ::apollo::relative_map::NavigationLaneConfig& _internal_navigation_lane() const;
  ::apollo::relative_map::NavigationLaneConfig* _internal_mutable_navigation_lane();
  public:
  void unsafe_arena_set_allocated_navigation_lane(
      ::apollo::relative_map::NavigationLaneConfig* navigation_lane);
  ::apollo::relative_map::NavigationLaneConfig* unsafe_arena_release_navigation_lane();

  // @@protoc_insertion_point(class_scope:apollo.relative_map.RelativeMapConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::apollo::relative_map::MapGenerationParam* map_param_;
    ::apollo::relative_map::NavigationLaneConfig* navigation_lane_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapGenerationParam

// optional double default_left_width = 1 [default = 1.75];
inline bool MapGenerationParam::_internal_has_default_left_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MapGenerationParam::has_default_left_width() const {
  return _internal_has_default_left_width();
}
inline void MapGenerationParam::clear_default_left_width() {
  _impl_.default_left_width_ = 1.75;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double MapGenerationParam::_internal_default_left_width() const {
  return _impl_.default_left_width_;
}
inline double MapGenerationParam::default_left_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_left_width)
  return _internal_default_left_width();
}
inline void MapGenerationParam::_internal_set_default_left_width(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_left_width_ = value;
}
inline void MapGenerationParam::set_default_left_width(double value) {
  _internal_set_default_left_width(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_left_width)
}

// optional double default_right_width = 2 [default = 1.75];
inline bool MapGenerationParam::_internal_has_default_right_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MapGenerationParam::has_default_right_width() const {
  return _internal_has_default_right_width();
}
inline void MapGenerationParam::clear_default_right_width() {
  _impl_.default_right_width_ = 1.75;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double MapGenerationParam::_internal_default_right_width() const {
  return _impl_.default_right_width_;
}
inline double MapGenerationParam::default_right_width() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_right_width)
  return _internal_default_right_width();
}
inline void MapGenerationParam::_internal_set_default_right_width(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.default_right_width_ = value;
}
inline void MapGenerationParam::set_default_right_width(double value) {
  _internal_set_default_right_width(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_right_width)
}

// optional double default_speed_limit = 3 [default = 29.0576];
inline bool MapGenerationParam::_internal_has_default_speed_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapGenerationParam::has_default_speed_limit() const {
  return _internal_has_default_speed_limit();
}
inline void MapGenerationParam::clear_default_speed_limit() {
  _impl_.default_speed_limit_ = 29.0576;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double MapGenerationParam::_internal_default_speed_limit() const {
  return _impl_.default_speed_limit_;
}
inline double MapGenerationParam::default_speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.MapGenerationParam.default_speed_limit)
  return _internal_default_speed_limit();
}
inline void MapGenerationParam::_internal_set_default_speed_limit(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.default_speed_limit_ = value;
}
inline void MapGenerationParam::set_default_speed_limit(double value) {
  _internal_set_default_speed_limit(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.MapGenerationParam.default_speed_limit)
}

// -------------------------------------------------------------------

// NavigationLaneConfig

// optional double min_lane_marker_quality = 1 [default = 0.5];
inline bool NavigationLaneConfig::_internal_has_min_lane_marker_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NavigationLaneConfig::has_min_lane_marker_quality() const {
  return _internal_has_min_lane_marker_quality();
}
inline void NavigationLaneConfig::clear_min_lane_marker_quality() {
  _impl_.min_lane_marker_quality_ = 0.5;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double NavigationLaneConfig::_internal_min_lane_marker_quality() const {
  return _impl_.min_lane_marker_quality_;
}
inline double NavigationLaneConfig::min_lane_marker_quality() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
  return _internal_min_lane_marker_quality();
}
inline void NavigationLaneConfig::_internal_set_min_lane_marker_quality(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.min_lane_marker_quality_ = value;
}
inline void NavigationLaneConfig::set_min_lane_marker_quality(double value) {
  _internal_set_min_lane_marker_quality(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.min_lane_marker_quality)
}

// optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
inline bool NavigationLaneConfig::_internal_has_lane_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NavigationLaneConfig::has_lane_source() const {
  return _internal_has_lane_source();
}
inline void NavigationLaneConfig::clear_lane_source() {
  _impl_.lane_source_ = 1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::relative_map::NavigationLaneConfig_LaneSource NavigationLaneConfig::_internal_lane_source() const {
  return static_cast< ::apollo::relative_map::NavigationLaneConfig_LaneSource >(_impl_.lane_source_);
}
inline ::apollo::relative_map::NavigationLaneConfig_LaneSource NavigationLaneConfig::lane_source() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigationLaneConfig.lane_source)
  return _internal_lane_source();
}
inline void NavigationLaneConfig::_internal_set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value) {
  assert(::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lane_source_ = value;
}
inline void NavigationLaneConfig::set_lane_source(::apollo::relative_map::NavigationLaneConfig_LaneSource value) {
  _internal_set_lane_source(value);
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigationLaneConfig.lane_source)
}

// -------------------------------------------------------------------

// RelativeMapConfig

// optional .apollo.relative_map.MapGenerationParam map_param = 1;
inline bool RelativeMapConfig::_internal_has_map_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.map_param_ != nullptr);
  return value;
}
inline bool RelativeMapConfig::has_map_param() const {
  return _internal_has_map_param();
}
inline void RelativeMapConfig::clear_map_param() {
  if (_impl_.map_param_ != nullptr) _impl_.map_param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::relative_map::MapGenerationParam& RelativeMapConfig::_internal_map_param() const {
  const ::apollo::relative_map::MapGenerationParam* p = _impl_.map_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::relative_map::MapGenerationParam&>(
      ::apollo::relative_map::_MapGenerationParam_default_instance_);
}
inline const ::apollo::relative_map::MapGenerationParam& RelativeMapConfig::map_param() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.map_param)
  return _internal_map_param();
}
inline void RelativeMapConfig::unsafe_arena_set_allocated_map_param(
    ::apollo::relative_map::MapGenerationParam* map_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_param_);
  }
  _impl_.map_param_ = map_param;
  if (map_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.relative_map.RelativeMapConfig.map_param)
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::release_map_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::relative_map::MapGenerationParam* temp = _impl_.map_param_;
  _impl_.map_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::unsafe_arena_release_map_param() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.map_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::apollo::relative_map::MapGenerationParam* temp = _impl_.map_param_;
  _impl_.map_param_ = nullptr;
  return temp;
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::_internal_mutable_map_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.map_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::relative_map::MapGenerationParam>(GetArenaForAllocation());
    _impl_.map_param_ = p;
  }
  return _impl_.map_param_;
}
inline ::apollo::relative_map::MapGenerationParam* RelativeMapConfig::mutable_map_param() {
  ::apollo::relative_map::MapGenerationParam* _msg = _internal_mutable_map_param();
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.map_param)
  return _msg;
}
inline void RelativeMapConfig::set_allocated_map_param(::apollo::relative_map::MapGenerationParam* map_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_param_;
  }
  if (map_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_param);
    if (message_arena != submessage_arena) {
      map_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.map_param_ = map_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.map_param)
}

// optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
inline bool RelativeMapConfig::_internal_has_navigation_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.navigation_lane_ != nullptr);
  return value;
}
inline bool RelativeMapConfig::has_navigation_lane() const {
  return _internal_has_navigation_lane();
}
inline void RelativeMapConfig::clear_navigation_lane() {
  if (_impl_.navigation_lane_ != nullptr) _impl_.navigation_lane_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::relative_map::NavigationLaneConfig& RelativeMapConfig::_internal_navigation_lane() const {
  const ::apollo::relative_map::NavigationLaneConfig* p = _impl_.navigation_lane_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::relative_map::NavigationLaneConfig&>(
      ::apollo::relative_map::_NavigationLaneConfig_default_instance_);
}
inline const ::apollo::relative_map::NavigationLaneConfig& RelativeMapConfig::navigation_lane() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return _internal_navigation_lane();
}
inline void RelativeMapConfig::unsafe_arena_set_allocated_navigation_lane(
    ::apollo::relative_map::NavigationLaneConfig* navigation_lane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.navigation_lane_);
  }
  _impl_.navigation_lane_ = navigation_lane;
  if (navigation_lane) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.relative_map.RelativeMapConfig.navigation_lane)
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::release_navigation_lane() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::relative_map::NavigationLaneConfig* temp = _impl_.navigation_lane_;
  _impl_.navigation_lane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::unsafe_arena_release_navigation_lane() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.RelativeMapConfig.navigation_lane)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::apollo::relative_map::NavigationLaneConfig* temp = _impl_.navigation_lane_;
  _impl_.navigation_lane_ = nullptr;
  return temp;
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::_internal_mutable_navigation_lane() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.navigation_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::relative_map::NavigationLaneConfig>(GetArenaForAllocation());
    _impl_.navigation_lane_ = p;
  }
  return _impl_.navigation_lane_;
}
inline ::apollo::relative_map::NavigationLaneConfig* RelativeMapConfig::mutable_navigation_lane() {
  ::apollo::relative_map::NavigationLaneConfig* _msg = _internal_mutable_navigation_lane();
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.RelativeMapConfig.navigation_lane)
  return _msg;
}
inline void RelativeMapConfig::set_allocated_navigation_lane(::apollo::relative_map::NavigationLaneConfig* navigation_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.navigation_lane_;
  }
  if (navigation_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(navigation_lane);
    if (message_arena != submessage_arena) {
      navigation_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_lane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.navigation_lane_ = navigation_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.RelativeMapConfig.navigation_lane)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::relative_map::NavigationLaneConfig_LaneSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::relative_map::NavigationLaneConfig_LaneSource>() {
  return ::apollo::relative_map::NavigationLaneConfig_LaneSource_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto
