// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto

#include "modules/map/relative_map/proto/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace apollo {
namespace relative_map {
PROTOBUF_CONSTEXPR NavigationPath::NavigationPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/nullptr
  , /*decltype(_impl_.path_priority_)*/0u} {}
struct NavigationPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationPathDefaultTypeInternal() {}
  union {
    NavigationPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationPathDefaultTypeInternal _NavigationPath_default_instance_;
PROTOBUF_CONSTEXPR NavigationInfo::NavigationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.navigation_path_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct NavigationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigationInfoDefaultTypeInternal() {}
  union {
    NavigationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigationInfoDefaultTypeInternal _NavigationInfo_default_instance_;
PROTOBUF_CONSTEXPR MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapMsg_NavigationPathEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal _MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MapMsg::MapMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.navigation_path_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.hdmap_)*/nullptr
  , /*decltype(_impl_.lane_marker_)*/nullptr
  , /*decltype(_impl_.localization_)*/nullptr} {}
struct MapMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapMsgDefaultTypeInternal() {}
  union {
    MapMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapMsgDefaultTypeInternal _MapMsg_default_instance_;
}  // namespace relative_map
}  // namespace apollo
static ::_pb::Metadata file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = nullptr;

const uint32_t TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _impl_.path_priority_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _impl_.navigation_path_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_.hdmap_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_.navigation_path_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_.lane_marker_),
  PROTOBUF_FIELD_OFFSET(::apollo::relative_map::MapMsg, _impl_.localization_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::apollo::relative_map::NavigationPath)},
  { 10, 18, -1, sizeof(::apollo::relative_map::NavigationInfo)},
  { 20, 28, -1, sizeof(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse)},
  { 30, 41, -1, sizeof(::apollo::relative_map::MapMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::apollo::relative_map::_NavigationPath_default_instance_._instance,
  &::apollo::relative_map::_NavigationInfo_default_instance_._instance,
  &::apollo::relative_map::_MapMsg_NavigationPathEntry_DoNotUse_default_instance_._instance,
  &::apollo::relative_map::_MapMsg_default_instance_._instance,
};

const char descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/modules/map/relative_map/proto/navigat"
  "ion.proto\022\023apollo.relative_map\032!modules/"
  "common/proto/header.proto\032$modules/commo"
  "n/proto/pnc_point.proto\032-modules/localiz"
  "ation/proto/localization.proto\032\033modules/"
  "map/proto/map.proto\0322modules/perception/"
  "proto/perception_obstacle.proto\"J\n\016Navig"
  "ationPath\022!\n\004path\030\001 \001(\0132\023.apollo.common."
  "Path\022\025\n\rpath_priority\030\002 \001(\r\"u\n\016Navigatio"
  "nInfo\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
  "ader\022<\n\017navigation_path\030\002 \003(\0132#.apollo.r"
  "elative_map.NavigationPath\"\355\002\n\006MapMsg\022%\n"
  "\006header\030\001 \001(\0132\025.apollo.common.Header\022 \n\005"
  "hdmap\030\002 \001(\0132\021.apollo.hdmap.Map\022H\n\017naviga"
  "tion_path\030\003 \003(\0132/.apollo.relative_map.Ma"
  "pMsg.NavigationPathEntry\0223\n\013lane_marker\030"
  "\004 \001(\0132\036.apollo.perception.LaneMarkers\022\?\n"
  "\014localization\030\005 \001(\0132).apollo.localizatio"
  "n.LocalizationEstimate\032Z\n\023NavigationPath"
  "Entry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.apol"
  "lo.relative_map.NavigationPath:\0028\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_deps[5] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto,
  &::descriptor_table_modules_2flocalization_2fproto_2flocalization_2eproto,
  &::descriptor_table_modules_2fmap_2fproto_2fmap_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::_pbi::once_flag descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto = {
    false, false, 834, descriptor_table_protodef_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
    "modules/map/relative_map/proto/navigation.proto",
    &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once, descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::offsets,
    file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto, file_level_enum_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
    file_level_service_descriptors_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_getter() {
  return &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto(&descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto);
namespace apollo {
namespace relative_map {

// ===================================================================

class NavigationPath::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationPath>()._impl_._has_bits_);
  static const ::apollo::common::Path& path(const NavigationPath* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Path&
NavigationPath::_Internal::path(const NavigationPath* msg) {
  return *msg->_impl_.path_;
}
void NavigationPath::clear_path() {
  if (_impl_.path_ != nullptr) _impl_.path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NavigationPath::NavigationPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.NavigationPath)
}
NavigationPath::NavigationPath(const NavigationPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.path_priority_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path()) {
    _impl_.path_ = new ::apollo::common::Path(*from._impl_.path_);
  }
  _impl_.path_priority_ = from._impl_.path_priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationPath)
}

inline void NavigationPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}
    , decltype(_impl_.path_priority_){0u}
  };
}

NavigationPath::~NavigationPath() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_;
}

void NavigationPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NavigationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.path_ != nullptr);
    _impl_.path_->Clear();
  }
  _impl_.path_priority_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Path path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 path_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_path_priority(&has_bits);
          _impl_.path_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_path_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationPath)
  return target;
}

size_t NavigationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Path path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_);
    }

    // optional uint32 path_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path_priority());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationPath::GetClassData() const { return &_class_data_; }

void NavigationPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NavigationPath *>(to)->MergeFrom(
      static_cast<const NavigationPath &>(from));
}


void NavigationPath::MergeFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_path()->::apollo::common::Path::MergeFrom(from._internal_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.path_priority_ = from._impl_.path_priority_;
    }
    _impl_._has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationPath::CopyFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPath::IsInitialized() const {
  return true;
}

void NavigationPath::InternalSwap(NavigationPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationPath, _impl_.path_priority_)
      + sizeof(NavigationPath::_impl_.path_priority_)
      - PROTOBUF_FIELD_OFFSET(NavigationPath, _impl_.path_)>(
          reinterpret_cast<char*>(&_impl_.path_),
          reinterpret_cast<char*>(&other->_impl_.path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[0]);
}

// ===================================================================

class NavigationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationInfo>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const NavigationInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::common::Header&
NavigationInfo::_Internal::header(const NavigationInfo* msg) {
  return *msg->_impl_.header_;
}
void NavigationInfo::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NavigationInfo::NavigationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.NavigationInfo)
}
NavigationInfo::NavigationInfo(const NavigationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_path_){from._impl_.navigation_path_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationInfo)
}

inline void NavigationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.navigation_path_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

NavigationInfo::~NavigationInfo() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NavigationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.navigation_path_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void NavigationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NavigationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.navigation_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_navigation_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NavigationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_navigation_path_size()); i < n; i++) {
    const auto& repfield = this->_internal_navigation_path(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationInfo)
  return target;
}

size_t NavigationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  total_size += 1UL * this->_internal_navigation_path_size();
  for (const auto& msg : this->_impl_.navigation_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.common.Header header = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationInfo::GetClassData() const { return &_class_data_; }

void NavigationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NavigationInfo *>(to)->MergeFrom(
      static_cast<const NavigationInfo &>(from));
}


void NavigationInfo::MergeFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.navigation_path_.MergeFrom(from._impl_.navigation_path_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationInfo::CopyFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationInfo::IsInitialized() const {
  return true;
}

void NavigationInfo::InternalSwap(NavigationInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.navigation_path_.InternalSwap(&other->_impl_.navigation_path_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[1]);
}

// ===================================================================

MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse() {}
MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapMsg_NavigationPathEntry_DoNotUse::MergeFrom(const MapMsg_NavigationPathEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapMsg_NavigationPathEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[2]);
}

// ===================================================================

class MapMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<MapMsg>()._impl_._has_bits_);
  static const ::apollo::common::Header& header(const MapMsg* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::hdmap::Map& hdmap(const MapMsg* msg);
  static void set_has_hdmap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::perception::LaneMarkers& lane_marker(const MapMsg* msg);
  static void set_has_lane_marker(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::apollo::localization::LocalizationEstimate& localization(const MapMsg* msg);
  static void set_has_localization(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::apollo::common::Header&
MapMsg::_Internal::header(const MapMsg* msg) {
  return *msg->_impl_.header_;
}
const ::apollo::hdmap::Map&
MapMsg::_Internal::hdmap(const MapMsg* msg) {
  return *msg->_impl_.hdmap_;
}
const ::apollo::perception::LaneMarkers&
MapMsg::_Internal::lane_marker(const MapMsg* msg) {
  return *msg->_impl_.lane_marker_;
}
const ::apollo::localization::LocalizationEstimate&
MapMsg::_Internal::localization(const MapMsg* msg) {
  return *msg->_impl_.localization_;
}
void MapMsg::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MapMsg::clear_hdmap() {
  if (_impl_.hdmap_ != nullptr) _impl_.hdmap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MapMsg::clear_lane_marker() {
  if (_impl_.lane_marker_ != nullptr) _impl_.lane_marker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MapMsg::clear_localization() {
  if (_impl_.localization_ != nullptr) _impl_.localization_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
MapMsg::MapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MapMsg::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:apollo.relative_map.MapMsg)
}
MapMsg::MapMsg(const MapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.navigation_path_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.hdmap_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.localization_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.navigation_path_.MergeFrom(from._impl_.navigation_path_);
  if (from._internal_has_header()) {
    _impl_.header_ = new ::apollo::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_hdmap()) {
    _impl_.hdmap_ = new ::apollo::hdmap::Map(*from._impl_.hdmap_);
  }
  if (from._internal_has_lane_marker()) {
    _impl_.lane_marker_ = new ::apollo::perception::LaneMarkers(*from._impl_.lane_marker_);
  }
  if (from._internal_has_localization()) {
    _impl_.localization_ = new ::apollo::localization::LocalizationEstimate(*from._impl_.localization_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapMsg)
}

inline void MapMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.navigation_path_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.hdmap_){nullptr}
    , decltype(_impl_.lane_marker_){nullptr}
    , decltype(_impl_.localization_){nullptr}
  };
}

MapMsg::~MapMsg() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MapMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.navigation_path_.Destruct();
  _impl_.navigation_path_.~MapField();
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.hdmap_;
  if (this != internal_default_instance()) delete _impl_.lane_marker_;
  if (this != internal_default_instance()) delete _impl_.localization_;
}

void MapMsg::ArenaDtor(void* object) {
  MapMsg* _this = reinterpret_cast< MapMsg* >(object);
  _this->_impl_.navigation_path_.Destruct();
}
void MapMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.navigation_path_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.hdmap_ != nullptr);
      _impl_.hdmap_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lane_marker_ != nullptr);
      _impl_.lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.localization_ != nullptr);
      _impl_.localization_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.hdmap.Map hdmap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdmap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.navigation_path_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lane_marker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .apollo.localization.LocalizationEstimate localization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hdmap(this),
        _Internal::hdmap(this).GetCachedSize(), target, stream);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->_internal_navigation_path().empty()) {
    using MapType = ::_pb::Map<std::string, ::apollo::relative_map::NavigationPath>;
    using WireHelper = MapMsg_NavigationPathEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_navigation_path();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "apollo.relative_map.MapMsg.NavigationPathEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lane_marker(this),
        _Internal::lane_marker(this).GetCachedSize(), target, stream);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::localization(this),
        _Internal::localization(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapMsg)
  return target;
}

size_t MapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_navigation_path_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::apollo::relative_map::NavigationPath >::const_iterator
      it = this->_internal_navigation_path().begin();
      it != this->_internal_navigation_path().end(); ++it) {
    total_size += MapMsg_NavigationPathEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .apollo.hdmap.Map hdmap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hdmap_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lane_marker_);
    }

    // optional .apollo.localization.LocalizationEstimate localization = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.localization_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapMsg::GetClassData() const { return &_class_data_; }

void MapMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapMsg *>(to)->MergeFrom(
      static_cast<const MapMsg &>(from));
}


void MapMsg::MergeFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.navigation_path_.MergeFrom(from._impl_.navigation_path_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hdmap()->::apollo::hdmap::Map::MergeFrom(from._internal_hdmap());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from._internal_lane_marker());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_localization()->::apollo::localization::LocalizationEstimate::MergeFrom(from._internal_localization());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapMsg::CopyFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMsg::IsInitialized() const {
  return true;
}

void MapMsg::InternalSwap(MapMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.navigation_path_.InternalSwap(&other->_impl_.navigation_path_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapMsg, _impl_.localization_)
      + sizeof(MapMsg::_impl_.localization_)
      - PROTOBUF_FIELD_OFFSET(MapMsg, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_getter, &descriptor_table_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto_once,
      file_level_metadata_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationPath*
Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::NavigationPath >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::NavigationInfo*
Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::NavigationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse*
Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::relative_map::MapMsg*
Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::relative_map::MapMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
